// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an AppStream fleet.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testFleet = new aws.appstream.Fleet("test_fleet", {
 *     computeCapacity: {
 *         desiredInstances: 1,
 *     },
 *     description: "test fleet",
 *     displayName: "test-fleet",
 *     enableDefaultInternetAccess: false,
 *     fleetType: "ON_DEMAND",
 *     idleDisconnectTimeoutInSeconds: 60,
 *     imageName: "Amazon-AppStream2-Sample-Image-02-04-2019",
 *     instanceType: "stream.standard.large",
 *     maxUserDurationInSeconds: 600,
 *     tags: {
 *         TagName: "tag-value",
 *     },
 *     vpcConfig: {
 *         subnetIds: ["subnet-06e9b13400c225127"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_appstream_fleet` can be imported using the id, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:appstream/fleet:Fleet example fleetNameExample
 * ```
 */
export class Fleet extends pulumi.CustomResource {
    /**
     * Get an existing Fleet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FleetState, opts?: pulumi.CustomResourceOptions): Fleet {
        return new Fleet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appstream/fleet:Fleet';

    /**
     * Returns true if the given object is an instance of Fleet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fleet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fleet.__pulumiType;
    }

    /**
     * ARN of the appstream fleet.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Configuration block for the desired capacity of the fleet. See below.
     */
    public readonly computeCapacity!: pulumi.Output<outputs.appstream.FleetComputeCapacity>;
    /**
     * Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * Description to display.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect.
     */
    public readonly disconnectTimeoutInSeconds!: pulumi.Output<number>;
    /**
     * Human-readable friendly name for the AppStream fleet.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
     */
    public readonly domainJoinInfo!: pulumi.Output<outputs.appstream.FleetDomainJoinInfo>;
    /**
     * Enables or disables default internet access for the fleet.
     */
    public readonly enableDefaultInternetAccess!: pulumi.Output<boolean>;
    /**
     * Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
     */
    public readonly fleetType!: pulumi.Output<string>;
    /**
     * ARN of the IAM role to apply to the fleet.
     */
    public readonly iamRoleArn!: pulumi.Output<string>;
    /**
     * Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
     */
    public readonly idleDisconnectTimeoutInSeconds!: pulumi.Output<number | undefined>;
    /**
     * ARN of the public, private, or shared image to use.
     */
    public readonly imageArn!: pulumi.Output<string>;
    /**
     * Name of the image used to create the fleet.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * Instance type to use when launching fleet instances.
     */
    public readonly instanceType!: pulumi.Output<string>;
    /**
     * Maximum amount of time that a streaming session can remain active, in seconds.
     */
    public readonly maxUserDurationInSeconds!: pulumi.Output<number>;
    /**
     * Unique name for the fleet.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
     */
    public readonly streamView!: pulumi.Output<string>;
    /**
     * Map of tags to attach to AppStream instances.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     */
    public readonly vpcConfig!: pulumi.Output<outputs.appstream.FleetVpcConfig>;

    /**
     * Create a Fleet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FleetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FleetArgs | FleetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FleetState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["computeCapacity"] = state ? state.computeCapacity : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disconnectTimeoutInSeconds"] = state ? state.disconnectTimeoutInSeconds : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["domainJoinInfo"] = state ? state.domainJoinInfo : undefined;
            resourceInputs["enableDefaultInternetAccess"] = state ? state.enableDefaultInternetAccess : undefined;
            resourceInputs["fleetType"] = state ? state.fleetType : undefined;
            resourceInputs["iamRoleArn"] = state ? state.iamRoleArn : undefined;
            resourceInputs["idleDisconnectTimeoutInSeconds"] = state ? state.idleDisconnectTimeoutInSeconds : undefined;
            resourceInputs["imageArn"] = state ? state.imageArn : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["maxUserDurationInSeconds"] = state ? state.maxUserDurationInSeconds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["streamView"] = state ? state.streamView : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as FleetArgs | undefined;
            if ((!args || args.computeCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeCapacity'");
            }
            if ((!args || args.instanceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceType'");
            }
            resourceInputs["computeCapacity"] = args ? args.computeCapacity : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disconnectTimeoutInSeconds"] = args ? args.disconnectTimeoutInSeconds : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["domainJoinInfo"] = args ? args.domainJoinInfo : undefined;
            resourceInputs["enableDefaultInternetAccess"] = args ? args.enableDefaultInternetAccess : undefined;
            resourceInputs["fleetType"] = args ? args.fleetType : undefined;
            resourceInputs["iamRoleArn"] = args ? args.iamRoleArn : undefined;
            resourceInputs["idleDisconnectTimeoutInSeconds"] = args ? args.idleDisconnectTimeoutInSeconds : undefined;
            resourceInputs["imageArn"] = args ? args.imageArn : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["maxUserDurationInSeconds"] = args ? args.maxUserDurationInSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["streamView"] = args ? args.streamView : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fleet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Fleet resources.
 */
export interface FleetState {
    /**
     * ARN of the appstream fleet.
     */
    arn?: pulumi.Input<string>;
    /**
     * Configuration block for the desired capacity of the fleet. See below.
     */
    computeCapacity?: pulumi.Input<inputs.appstream.FleetComputeCapacity>;
    /**
     * Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * Description to display.
     */
    description?: pulumi.Input<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect.
     */
    disconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * Human-readable friendly name for the AppStream fleet.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
     */
    domainJoinInfo?: pulumi.Input<inputs.appstream.FleetDomainJoinInfo>;
    /**
     * Enables or disables default internet access for the fleet.
     */
    enableDefaultInternetAccess?: pulumi.Input<boolean>;
    /**
     * Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
     */
    fleetType?: pulumi.Input<string>;
    /**
     * ARN of the IAM role to apply to the fleet.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
     */
    idleDisconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * ARN of the public, private, or shared image to use.
     */
    imageArn?: pulumi.Input<string>;
    /**
     * Name of the image used to create the fleet.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Instance type to use when launching fleet instances.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Maximum amount of time that a streaming session can remain active, in seconds.
     */
    maxUserDurationInSeconds?: pulumi.Input<number>;
    /**
     * Unique name for the fleet.
     */
    name?: pulumi.Input<string>;
    /**
     * State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
     */
    state?: pulumi.Input<string>;
    /**
     * AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
     */
    streamView?: pulumi.Input<string>;
    /**
     * Map of tags to attach to AppStream instances.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     */
    vpcConfig?: pulumi.Input<inputs.appstream.FleetVpcConfig>;
}

/**
 * The set of arguments for constructing a Fleet resource.
 */
export interface FleetArgs {
    /**
     * Configuration block for the desired capacity of the fleet. See below.
     */
    computeCapacity: pulumi.Input<inputs.appstream.FleetComputeCapacity>;
    /**
     * Description to display.
     */
    description?: pulumi.Input<string>;
    /**
     * Amount of time that a streaming session remains active after users disconnect.
     */
    disconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * Human-readable friendly name for the AppStream fleet.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
     */
    domainJoinInfo?: pulumi.Input<inputs.appstream.FleetDomainJoinInfo>;
    /**
     * Enables or disables default internet access for the fleet.
     */
    enableDefaultInternetAccess?: pulumi.Input<boolean>;
    /**
     * Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
     */
    fleetType?: pulumi.Input<string>;
    /**
     * ARN of the IAM role to apply to the fleet.
     */
    iamRoleArn?: pulumi.Input<string>;
    /**
     * Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnectTimeoutInSeconds` time interval begins.
     */
    idleDisconnectTimeoutInSeconds?: pulumi.Input<number>;
    /**
     * ARN of the public, private, or shared image to use.
     */
    imageArn?: pulumi.Input<string>;
    /**
     * Name of the image used to create the fleet.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Instance type to use when launching fleet instances.
     */
    instanceType: pulumi.Input<string>;
    /**
     * Maximum amount of time that a streaming session can remain active, in seconds.
     */
    maxUserDurationInSeconds?: pulumi.Input<number>;
    /**
     * Unique name for the fleet.
     */
    name?: pulumi.Input<string>;
    /**
     * AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
     */
    streamView?: pulumi.Input<string>;
    /**
     * Map of tags to attach to AppStream instances.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Configuration block for the VPC configuration for the image builder. See below.
     */
    vpcConfig?: pulumi.Input<inputs.appstream.FleetVpcConfig>;
}
