// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export function getPermissions(args: GetPermissionsArgs, opts?: pulumi.InvokeOptions): Promise<GetPermissionsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:lakeformation/getPermissions:getPermissions", {
        "catalogId": args.catalogId,
        "catalogResource": args.catalogResource,
        "dataLocation": args.dataLocation,
        "database": args.database,
        "lfTag": args.lfTag,
        "lfTagPolicy": args.lfTagPolicy,
        "principal": args.principal,
        "table": args.table,
        "tableWithColumns": args.tableWithColumns,
    }, opts);
}

/**
 * A collection of arguments for invoking getPermissions.
 */
export interface GetPermissionsArgs {
    catalogId?: string;
    catalogResource?: boolean;
    dataLocation?: inputs.lakeformation.GetPermissionsDataLocation;
    database?: inputs.lakeformation.GetPermissionsDatabase;
    lfTag?: inputs.lakeformation.GetPermissionsLfTag;
    lfTagPolicy?: inputs.lakeformation.GetPermissionsLfTagPolicy;
    principal: string;
    table?: inputs.lakeformation.GetPermissionsTable;
    tableWithColumns?: inputs.lakeformation.GetPermissionsTableWithColumns;
}

/**
 * A collection of values returned by getPermissions.
 */
export interface GetPermissionsResult {
    readonly catalogId?: string;
    readonly catalogResource?: boolean;
    readonly dataLocation: outputs.lakeformation.GetPermissionsDataLocation;
    readonly database: outputs.lakeformation.GetPermissionsDatabase;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly lfTag: outputs.lakeformation.GetPermissionsLfTag;
    readonly lfTagPolicy: outputs.lakeformation.GetPermissionsLfTagPolicy;
    readonly permissions: string[];
    readonly permissionsWithGrantOptions: string[];
    readonly principal: string;
    readonly table: outputs.lakeformation.GetPermissionsTable;
    readonly tableWithColumns: outputs.lakeformation.GetPermissionsTableWithColumns;
}
export function getPermissionsOutput(args: GetPermissionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPermissionsResult> {
    return pulumi.output(args).apply((a: any) => getPermissions(a, opts))
}

/**
 * A collection of arguments for invoking getPermissions.
 */
export interface GetPermissionsOutputArgs {
    catalogId?: pulumi.Input<string>;
    catalogResource?: pulumi.Input<boolean>;
    dataLocation?: pulumi.Input<inputs.lakeformation.GetPermissionsDataLocationArgs>;
    database?: pulumi.Input<inputs.lakeformation.GetPermissionsDatabaseArgs>;
    lfTag?: pulumi.Input<inputs.lakeformation.GetPermissionsLfTagArgs>;
    lfTagPolicy?: pulumi.Input<inputs.lakeformation.GetPermissionsLfTagPolicyArgs>;
    principal: pulumi.Input<string>;
    table?: pulumi.Input<inputs.lakeformation.GetPermissionsTableArgs>;
    tableWithColumns?: pulumi.Input<inputs.lakeformation.GetPermissionsTableWithColumnsArgs>;
}
