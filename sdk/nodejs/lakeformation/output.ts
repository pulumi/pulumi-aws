// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface DataCellsFilterTableData {
    /**
     * A list of column names and/or nested column attributes.
     */
    columnNames: string[];
    columnWildcard?: outputs.DataCellsFilterTableDataColumnWildcard;
    /**
     * The name of the database.
     */
    databaseName: string;
    /**
     * The name of the data cells filter.
     */
    name: string;
    /**
     * A PartiQL predicate. See Row Filter below for details.
     */
    rowFilter?: outputs.DataCellsFilterTableDataRowFilter;
    /**
     * The ID of the Data Catalog.
     */
    tableCatalogId: string;
    /**
     * The name of the table.
     */
    tableName: string;
    /**
     * ID of the data cells filter version.
     */
    versionId: string;
}
export interface DataCellsFilterTableDataColumnWildcard {
    /**
     * (Optional) Excludes column names. Any column with this name will be excluded.
     */
    excludedColumnNames?: string[];
}
export interface DataCellsFilterTableDataRowFilter {
    /**
     * (Optional) A wildcard that matches all rows.
     */
    allRowsWildcard?: outputs.DataCellsFilterTableDataRowFilterAllRowsWildcard;
    /**
     * (Optional) A filter expression.
     */
    filterExpression?: string;
}
export interface DataCellsFilterTableDataRowFilterAllRowsWildcard {
}
export interface DataCellsFilterTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
}
export interface DataLakeSettingsCreateDatabaseDefaultPermission {
    /**
     * List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, `DESCRIBE`, and `CREATE_TABLE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
     */
    permissions: string[];
    /**
     * Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
     */
    principal: string;
}
export interface DataLakeSettingsCreateTableDefaultPermission {
    /**
     * List of permissions that are granted to the principal. Valid values may include `ALL`, `SELECT`, `ALTER`, `DROP`, `DELETE`, `INSERT`, and `DESCRIBE`. For more details, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
     */
    permissions: string[];
    /**
     * Principal who is granted permissions. To enforce metadata and underlying data access control only by IAM on new databases and tables set `principal` to `IAM_ALLOWED_PRINCIPALS` and `permissions` to `["ALL"]`.
     */
    principal: string;
}
export interface PermissionsDataCellsFilter {
    /**
     * The name of the database.
     */
    databaseName: string;
    /**
     * The name of the data cells filter.
     */
    name: string;
    /**
     * The ID of the Data Catalog.
     */
    tableCatalogId: string;
    /**
     * The name of the table.
     */
    tableName: string;
}
export interface PermissionsDataLocation {
    /**
     * Amazon Resource Name (ARN) that uniquely identifies the data location resource.
     *
     * The following argument is optional:
     */
    arn: string;
    /**
     * Identifier for the Data Catalog where the location is registered with Lake Formation. By default, it is the account ID of the caller.
     */
    catalogId: string;
}
export interface PermissionsDatabase {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Name of the database resource. Unique to the Data Catalog.
     *
     * The following argument is optional:
     */
    name: string;
}
export interface PermissionsLfTag {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * The key-name for the tag.
     */
    key: string;
    /**
     * A list of possible values an attribute can take.
     *
     * The following argument is optional:
     */
    values: string[];
}
export interface PermissionsLfTagPolicy {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * A list of tag conditions that apply to the resource's tag policy. Configuration block for tag conditions that apply to the policy. See `expression` below.
     *
     * The following argument is optional:
     */
    expressions: outputs.PermissionsLfTagPolicyExpression[];
    /**
     * The resource type for which the tag policy applies. Valid values are `DATABASE` and `TABLE`.
     */
    resourceType: string;
}
export interface PermissionsLfTagPolicyExpression {
    /**
     * The key-name of an LF-Tag.
     */
    key: string;
    /**
     * A list of possible values of an LF-Tag.
     */
    values: string[];
}
export interface PermissionsTable {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Name of the database for the table. Unique to a Data Catalog.
     */
    databaseName: string;
    /**
     * Name of the table.
     */
    name: string;
    /**
     * Whether to use a wildcard representing every table under a database. Defaults to `false`.
     *
     * The following arguments are optional:
     */
    wildcard?: boolean;
}
export interface PermissionsTableWithColumns {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Set of column names for the table.
     */
    columnNames?: string[];
    /**
     * Name of the database for the table with columns resource. Unique to the Data Catalog.
     */
    databaseName: string;
    /**
     * Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
     */
    excludedColumnNames?: string[];
    /**
     * Name of the table resource.
     */
    name: string;
    /**
     * Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
     *
     * The following arguments are optional:
     */
    wildcard?: boolean;
}
export interface ResourceLfTagDatabase {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId?: string;
    /**
     * Name of the database resource. Unique to the Data Catalog.
     *
     * The following argument is optional:
     */
    name: string;
}
export interface ResourceLfTagLfTag {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Key name for an existing LF-tag.
     */
    key: string;
    /**
     * Value from the possible values for the LF-tag.
     *
     * The following argument is optional:
     */
    value: string;
}
export interface ResourceLfTagTable {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId?: string;
    /**
     * Name of the database for the table. Unique to a Data Catalog.
     */
    databaseName: string;
    /**
     * Name of the table.
     */
    name?: string;
    /**
     * Whether to use a wildcard representing every table under a database. Defaults to `false`.
     *
     * The following arguments are optional:
     */
    wildcard?: boolean;
}
export interface ResourceLfTagTableWithColumns {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId?: string;
    /**
     * Set of column names for the table.
     */
    columnNames?: string[];
    /**
     * Option to add column wildcard. See Column Wildcard for more details.
     */
    columnWildcard?: outputs.ResourceLfTagTableWithColumnsColumnWildcard;
    /**
     * Name of the database for the table with columns resource. Unique to the Data Catalog.
     */
    databaseName: string;
    /**
     * Name of the table resource.
     *
     * The following arguments are optional:
     */
    name: string;
}
export interface ResourceLfTagTableWithColumnsColumnWildcard {
    excludedColumnNames?: string[];
}
export interface ResourceLfTagTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}
export interface ResourceLfTagsDatabase {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Name of the database resource. Unique to the Data Catalog.
     *
     * The following argument is optional:
     */
    name: string;
}
export interface ResourceLfTagsLfTag {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Key name for an existing LF-tag.
     */
    key: string;
    /**
     * Value from the possible values for the LF-tag.
     *
     * The following argument is optional:
     */
    value: string;
}
export interface ResourceLfTagsTable {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Name of the database for the table. Unique to a Data Catalog.
     */
    databaseName: string;
    /**
     * Name of the table.
     */
    name: string;
    /**
     * Whether to use a wildcard representing every table under a database. Defaults to `false`.
     *
     * The following arguments are optional:
     */
    wildcard?: boolean;
}
export interface ResourceLfTagsTableWithColumns {
    /**
     * Identifier for the Data Catalog. By default, it is the account ID of the caller.
     */
    catalogId: string;
    /**
     * Set of column names for the table.
     */
    columnNames?: string[];
    /**
     * Name of the database for the table with columns resource. Unique to the Data Catalog.
     */
    databaseName: string;
    /**
     * Set of column names for the table to exclude. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
     */
    excludedColumnNames?: string[];
    /**
     * Name of the table resource.
     */
    name: string;
    /**
     * Whether to use a column wildcard. If `excludedColumnNames` is included, `wildcard` must be set to `true` to avoid the provider reporting a difference.
     *
     * The following arguments are optional:
     */
    wildcard?: boolean;
}
export interface GetDataLakeSettingsCreateDatabaseDefaultPermission {
    /**
     * List of permissions granted to the principal.
     */
    permissions: string[];
    /**
     * Principal who is granted permissions.
     */
    principal: string;
}
export interface GetDataLakeSettingsCreateTableDefaultPermission {
    /**
     * List of permissions granted to the principal.
     */
    permissions: string[];
    /**
     * Principal who is granted permissions.
     */
    principal: string;
}
