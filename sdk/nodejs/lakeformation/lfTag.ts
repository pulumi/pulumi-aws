// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an LF-Tag with the specified name and values. Each key must have at least one value. The maximum number of values permitted is 15.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lakeformation.LfTag("example", {
 *     key: "module",
 *     values: [
 *         "Orders",
 *         "Sales",
 *         "Customers",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_lakeformation_lf_tag.example
 *
 *  id = "123456789012:some_key" } Using `pulumi import`, import Lake Formation LF-Tags using the `catalog_id:key`. If you have not set a Catalog ID specify the AWS Account ID that the database is in. For exampleconsole % pulumi import aws_lakeformation_lf_tag.example 123456789012:some_key
 */
export class LfTag extends pulumi.CustomResource {
    /**
     * Get an existing LfTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LfTagState, opts?: pulumi.CustomResourceOptions): LfTag {
        return new LfTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lakeformation/lfTag:LfTag';

    /**
     * Returns true if the given object is an instance of LfTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LfTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LfTag.__pulumiType;
    }

    /**
     * ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
     */
    public readonly catalogId!: pulumi.Output<string>;
    /**
     * Key-name for the tag.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * List of possible values an attribute can take.
     */
    public readonly values!: pulumi.Output<string[]>;

    /**
     * Create a LfTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LfTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LfTagArgs | LfTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LfTagState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as LfTagArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.values === undefined) && !opts.urn) {
                throw new Error("Missing required property 'values'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LfTag.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LfTag resources.
 */
export interface LfTagState {
    /**
     * ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * Key-name for the tag.
     */
    key?: pulumi.Input<string>;
    /**
     * List of possible values an attribute can take.
     */
    values?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a LfTag resource.
 */
export interface LfTagArgs {
    /**
     * ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * Key-name for the tag.
     */
    key: pulumi.Input<string>;
    /**
     * List of possible values an attribute can take.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}
