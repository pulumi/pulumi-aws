// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an attachment between one or more existing LF-tags and an existing Lake Formation resource.
 *
 * ## Example Usage
 * ### Database Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLfTag = new aws.lakeformation.LfTag("exampleLfTag", {
 *     key: "right",
 *     values: [
 *         "abbey",
 *         "village",
 *         "luffield",
 *         "woodcote",
 *         "copse",
 *         "chapel",
 *         "stowe",
 *         "club",
 *     ],
 * });
 * const exampleResourceLfTags = new aws.lakeformation.ResourceLfTags("exampleResourceLfTags", {
 *     database: {
 *         name: aws_glue_catalog_database.example.name,
 *     },
 *     lfTags: [{
 *         key: exampleLfTag.key,
 *         value: "stowe",
 *     }],
 * });
 * ```
 * ### Multiple Tags Example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLfTag = new aws.lakeformation.LfTag("exampleLfTag", {
 *     key: "right",
 *     values: [
 *         "abbey",
 *         "village",
 *         "luffield",
 *         "woodcote",
 *         "copse",
 *         "chapel",
 *         "stowe",
 *         "club",
 *     ],
 * });
 * const example2 = new aws.lakeformation.LfTag("example2", {
 *     key: "left",
 *     values: [
 *         "farm",
 *         "theloop",
 *         "aintree",
 *         "brooklands",
 *         "maggotts",
 *         "becketts",
 *         "vale",
 *     ],
 * });
 * const exampleResourceLfTags = new aws.lakeformation.ResourceLfTags("exampleResourceLfTags", {
 *     database: {
 *         name: aws_glue_catalog_database.example.name,
 *     },
 *     lfTags: [
 *         {
 *             key: "right",
 *             value: "luffield",
 *         },
 *         {
 *             key: "left",
 *             value: "aintree",
 *         },
 *     ],
 * });
 * ```
 */
export class ResourceLfTags extends pulumi.CustomResource {
    /**
     * Get an existing ResourceLfTags resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceLfTagsState, opts?: pulumi.CustomResourceOptions): ResourceLfTags {
        return new ResourceLfTags(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lakeformation/resourceLfTags:ResourceLfTags';

    /**
     * Returns true if the given object is an instance of ResourceLfTags.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourceLfTags {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceLfTags.__pulumiType;
    }

    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     */
    public readonly catalogId!: pulumi.Output<string>;
    /**
     * Configuration block for a database resource. See below.
     */
    public readonly database!: pulumi.Output<outputs.lakeformation.ResourceLfTagsDatabase>;
    /**
     * Set of LF-tags to attach to the resource. See below.
     *
     * Exactly one of the following is required:
     */
    public readonly lfTags!: pulumi.Output<outputs.lakeformation.ResourceLfTagsLfTag[]>;
    /**
     * Configuration block for a table resource. See below.
     */
    public readonly table!: pulumi.Output<outputs.lakeformation.ResourceLfTagsTable>;
    /**
     * Configuration block for a table with columns resource. See below.
     *
     * The following arguments are optional:
     */
    public readonly tableWithColumns!: pulumi.Output<outputs.lakeformation.ResourceLfTagsTableWithColumns>;

    /**
     * Create a ResourceLfTags resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceLfTagsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceLfTagsArgs | ResourceLfTagsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceLfTagsState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["lfTags"] = state ? state.lfTags : undefined;
            resourceInputs["table"] = state ? state.table : undefined;
            resourceInputs["tableWithColumns"] = state ? state.tableWithColumns : undefined;
        } else {
            const args = argsOrState as ResourceLfTagsArgs | undefined;
            if ((!args || args.lfTags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lfTags'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["lfTags"] = args ? args.lfTags : undefined;
            resourceInputs["table"] = args ? args.table : undefined;
            resourceInputs["tableWithColumns"] = args ? args.tableWithColumns : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceLfTags.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourceLfTags resources.
 */
export interface ResourceLfTagsState {
    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * Configuration block for a database resource. See below.
     */
    database?: pulumi.Input<inputs.lakeformation.ResourceLfTagsDatabase>;
    /**
     * Set of LF-tags to attach to the resource. See below.
     *
     * Exactly one of the following is required:
     */
    lfTags?: pulumi.Input<pulumi.Input<inputs.lakeformation.ResourceLfTagsLfTag>[]>;
    /**
     * Configuration block for a table resource. See below.
     */
    table?: pulumi.Input<inputs.lakeformation.ResourceLfTagsTable>;
    /**
     * Configuration block for a table with columns resource. See below.
     *
     * The following arguments are optional:
     */
    tableWithColumns?: pulumi.Input<inputs.lakeformation.ResourceLfTagsTableWithColumns>;
}

/**
 * The set of arguments for constructing a ResourceLfTags resource.
 */
export interface ResourceLfTagsArgs {
    /**
     * Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
     */
    catalogId?: pulumi.Input<string>;
    /**
     * Configuration block for a database resource. See below.
     */
    database?: pulumi.Input<inputs.lakeformation.ResourceLfTagsDatabase>;
    /**
     * Set of LF-tags to attach to the resource. See below.
     *
     * Exactly one of the following is required:
     */
    lfTags: pulumi.Input<pulumi.Input<inputs.lakeformation.ResourceLfTagsLfTag>[]>;
    /**
     * Configuration block for a table resource. See below.
     */
    table?: pulumi.Input<inputs.lakeformation.ResourceLfTagsTable>;
    /**
     * Configuration block for a table with columns resource. See below.
     *
     * The following arguments are optional:
     */
    tableWithColumns?: pulumi.Input<inputs.lakeformation.ResourceLfTagsTableWithColumns>;
}
