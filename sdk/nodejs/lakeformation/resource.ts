// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Registers a Lake Formation resource (e.g., S3 bucket) as managed by the Data Catalog. In other words, the S3 path is added to the data lake.
 *
 * Choose a role that has read/write access to the chosen Amazon S3 path or use the service-linked role.
 * When you register the S3 path, the service-linked role and a new inline policy are created on your behalf.
 * Lake Formation adds the first path to the inline policy and attaches it to the service-linked role.
 * When you register subsequent paths, Lake Formation adds the path to the existing policy.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.s3.getBucket({
 *     bucket: "an-example-bucket",
 * });
 * const exampleResource = new aws.lakeformation.Resource("example", {arn: example.then(example => example.arn)});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class Resource extends pulumi.CustomResource {
    /**
     * Get an existing Resource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourceState, opts?: pulumi.CustomResourceOptions): Resource {
        return new Resource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lakeformation/resource:Resource';

    /**
     * Returns true if the given object is an instance of Resource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Resource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Resource.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the resource.
     *
     * The following arguments are optional:
     */
    public readonly arn!: pulumi.Output<string>;
    /**
     * Flag to enable AWS LakeFormation hybrid access permission mode.
     *
     * > **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
     */
    public readonly hybridAccessEnabled!: pulumi.Output<boolean>;
    /**
     * Date and time the resource was last modified in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * Role that has read/write access to the resource.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
     */
    public readonly useServiceLinkedRole!: pulumi.Output<boolean | undefined>;
    public readonly withFederation!: pulumi.Output<boolean>;

    /**
     * Create a Resource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ResourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourceArgs | ResourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["hybridAccessEnabled"] = state ? state.hybridAccessEnabled : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["useServiceLinkedRole"] = state ? state.useServiceLinkedRole : undefined;
            resourceInputs["withFederation"] = state ? state.withFederation : undefined;
        } else {
            const args = argsOrState as ResourceArgs | undefined;
            if ((!args || args.arn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'arn'");
            }
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["hybridAccessEnabled"] = args ? args.hybridAccessEnabled : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["useServiceLinkedRole"] = args ? args.useServiceLinkedRole : undefined;
            resourceInputs["withFederation"] = args ? args.withFederation : undefined;
            resourceInputs["lastModified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Resource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Resource resources.
 */
export interface ResourceState {
    /**
     * Amazon Resource Name (ARN) of the resource.
     *
     * The following arguments are optional:
     */
    arn?: pulumi.Input<string>;
    /**
     * Flag to enable AWS LakeFormation hybrid access permission mode.
     *
     * > **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
     */
    hybridAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Date and time the resource was last modified in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    lastModified?: pulumi.Input<string>;
    /**
     * Role that has read/write access to the resource.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
     */
    useServiceLinkedRole?: pulumi.Input<boolean>;
    withFederation?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Resource resource.
 */
export interface ResourceArgs {
    /**
     * Amazon Resource Name (ARN) of the resource.
     *
     * The following arguments are optional:
     */
    arn: pulumi.Input<string>;
    /**
     * Flag to enable AWS LakeFormation hybrid access permission mode.
     *
     * > **NOTE:** AWS does not support registering an S3 location with an IAM role and subsequently updating the S3 location registration to a service-linked role.
     */
    hybridAccessEnabled?: pulumi.Input<boolean>;
    /**
     * Role that has read/write access to the resource.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * Designates an AWS Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog.
     */
    useServiceLinkedRole?: pulumi.Input<boolean>;
    withFederation?: pulumi.Input<boolean>;
}
