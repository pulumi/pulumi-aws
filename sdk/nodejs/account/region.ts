// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Enable (Opt-In) or Disable (Opt-Out) a particular Region for an AWS account.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.account.Region("example", {
 *     regionName: "ap-southeast-3",
 *     enabled: true,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`. For example:
 *
 * ```sh
 * $ pulumi import aws:account/region:Region example ap-southeast-3
 * ```
 */
export class Region extends pulumi.CustomResource {
    /**
     * Get an existing Region resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionState, opts?: pulumi.CustomResourceOptions): Region {
        return new Region(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:account/region:Region';

    /**
     * Returns true if the given object is an instance of Region.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Region {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Region.__pulumiType;
    }

    /**
     * The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
     */
    public readonly accountId!: pulumi.Output<string | undefined>;
    /**
     * Whether the region is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The region opt status.
     */
    public /*out*/ readonly optStatus!: pulumi.Output<string>;
    /**
     * The region name to manage.
     */
    public readonly regionName!: pulumi.Output<string>;

    /**
     * Create a Region resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionArgs | RegionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["optStatus"] = state ? state.optStatus : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
        } else {
            const args = argsOrState as RegionArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            resourceInputs["accountId"] = args ? args.accountId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["optStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Region.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Region resources.
 */
export interface RegionState {
    /**
     * The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Whether the region is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The region opt status.
     */
    optStatus?: pulumi.Input<string>;
    /**
     * The region name to manage.
     */
    regionName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Region resource.
 */
export interface RegionArgs {
    /**
     * The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Whether the region is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The region name to manage.
     */
    regionName: pulumi.Input<string>;
}
