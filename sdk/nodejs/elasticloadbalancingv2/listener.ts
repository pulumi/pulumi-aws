// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";

/**
 * Provides a Load Balancer Listener resource.
 * 
 * ~> **Note:** `aws_alb_listener` is known as `aws_lb_listener`. The functionality is identical.
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState): Listener {
        return new Listener(name, <any>state, { id });
    }

    /**
     * The ARN of the listener (matches `id`)
     */
    public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the [`aws_lb_listener_certificate` resource](/docs/providers/aws/r/lb_listener_certificate.html).
     */
    public readonly certificateArn: pulumi.Output<string | undefined>;
    /**
     * An Action block. Action blocks are documented below.
     */
    public readonly defaultAction: pulumi.Output<{ targetGroupArn: string, type: string }>;
    /**
     * The ARN of the load balancer.
     */
    public readonly loadBalancerArn: pulumi.Output<string>;
    /**
     * The port on which the load balancer is listening.
     */
    public readonly port: pulumi.Output<number>;
    /**
     * The protocol for connections from clients to the load balancer. Valid values are `TCP`, `HTTP` and `HTTPS`. Defaults to `HTTP`.
     */
    public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * The name of the SSL Policy for the listener. Required if `protocol` is `HTTPS`.
     */
    public readonly sslPolicy: pulumi.Output<string>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.ResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.ResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ListenerState = argsOrState as ListenerState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["certificateArn"] = state ? state.certificateArn : undefined;
            inputs["defaultAction"] = state ? state.defaultAction : undefined;
            inputs["loadBalancerArn"] = state ? state.loadBalancerArn : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["sslPolicy"] = state ? state.sslPolicy : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if (!args || args.defaultAction === undefined) {
                throw new Error("Missing required property 'defaultAction'");
            }
            if (!args || args.loadBalancerArn === undefined) {
                throw new Error("Missing required property 'loadBalancerArn'");
            }
            if (!args || args.port === undefined) {
                throw new Error("Missing required property 'port'");
            }
            inputs["certificateArn"] = args ? args.certificateArn : undefined;
            inputs["defaultAction"] = args ? args.defaultAction : undefined;
            inputs["loadBalancerArn"] = args ? args.loadBalancerArn : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["sslPolicy"] = args ? args.sslPolicy : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        super("aws:elasticloadbalancingv2/listener:Listener", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * The ARN of the listener (matches `id`)
     */
    readonly arn?: pulumi.Input<string>;
    /**
     * The ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the [`aws_lb_listener_certificate` resource](/docs/providers/aws/r/lb_listener_certificate.html).
     */
    readonly certificateArn?: pulumi.Input<string>;
    /**
     * An Action block. Action blocks are documented below.
     */
    readonly defaultAction?: pulumi.Input<{ targetGroupArn: pulumi.Input<string>, type: pulumi.Input<string> }>;
    /**
     * The ARN of the load balancer.
     */
    readonly loadBalancerArn?: pulumi.Input<string>;
    /**
     * The port on which the load balancer is listening.
     */
    readonly port?: pulumi.Input<number>;
    /**
     * The protocol for connections from clients to the load balancer. Valid values are `TCP`, `HTTP` and `HTTPS`. Defaults to `HTTP`.
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The name of the SSL Policy for the listener. Required if `protocol` is `HTTPS`.
     */
    readonly sslPolicy?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * The ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the [`aws_lb_listener_certificate` resource](/docs/providers/aws/r/lb_listener_certificate.html).
     */
    readonly certificateArn?: pulumi.Input<string>;
    /**
     * An Action block. Action blocks are documented below.
     */
    readonly defaultAction: pulumi.Input<{ targetGroupArn: pulumi.Input<string>, type: pulumi.Input<string> }>;
    /**
     * The ARN of the load balancer.
     */
    readonly loadBalancerArn: pulumi.Input<string>;
    /**
     * The port on which the load balancer is listening.
     */
    readonly port: pulumi.Input<number>;
    /**
     * The protocol for connections from clients to the load balancer. Valid values are `TCP`, `HTTP` and `HTTPS`. Defaults to `HTTP`.
     */
    readonly protocol?: pulumi.Input<string>;
    /**
     * The name of the SSL Policy for the listener. Required if `protocol` is `HTTPS`.
     */
    readonly sslPolicy?: pulumi.Input<string>;
}
