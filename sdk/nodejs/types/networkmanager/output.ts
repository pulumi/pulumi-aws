// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ConnectAttachmentOptions {
    protocol?: string;
}

export interface DeviceAwsLocation {
    /**
     * The Amazon Resource Name (ARN) of the subnet that the device is located in.
     */
    subnetArn?: string;
    /**
     * The Zone that the device is located in. Specify the ID of an Availability Zone, Local Zone, Wavelength Zone, or an Outpost.
     */
    zone?: string;
}

export interface DeviceLocation {
    /**
     * The physical address.
     */
    address?: string;
    /**
     * The latitude.
     */
    latitude?: string;
    /**
     * The longitude.
     */
    longitude?: string;
}

export interface GetCoreNetworkPolicyDocumentAttachmentPolicy {
    /**
     * Action to take for the chosen segment. Valid values `create-route` or `share`.
     */
    action: outputs.networkmanager.GetCoreNetworkPolicyDocumentAttachmentPolicyAction;
    /**
     * Valid values include `and` or `or`. This is a mandatory parameter only if you have more than one condition. The `conditionLogic` apply to all of the conditions for a rule, which also means nested conditions of `and` or `or` are not supported. Use `or` if you want to associate the attachment with the segment by either the segment name or attachment tag value, or by the chosen conditions. Use `and` if you want to associate the attachment with the segment by either the segment name or attachment tag value and by the chosen conditions. Detailed Below.
     */
    conditionLogic?: string;
    /**
     * A block argument. Detailed Below.
     */
    conditions: outputs.networkmanager.GetCoreNetworkPolicyDocumentAttachmentPolicyCondition[];
    /**
     * A user-defined string describing the segment action.
     */
    description?: string;
    /**
     * An integer from `1` to `65535` indicating the rule's order number. Rules are processed in order from the lowest numbered rule to the highest. Rules stop processing when a rule is matched. It's important to make sure that you number your rules in the exact order that you want them processed.
     */
    ruleNumber: number;
}

export interface GetCoreNetworkPolicyDocumentAttachmentPolicyAction {
    /**
     * Defines how a segment is mapped. Values can be `constant` or `tag`. `constant` statically defines the segment to associate the attachment to. `tag` uses the value of a tag to dynamically try to map to a segment.reference_policies_elements_condition_operators.html) to evaluate.
     */
    associationMethod: string;
    /**
     * Determines if this mapping should override the segment value for `requireAttachmentAcceptance`. You can only set this to `true`, indicating that this setting applies only to segments that have `requireAttachmentAcceptance` set to `false`. If the segment already has the default `requireAttachmentAcceptance`, you can set this to inherit segment’s acceptance value.
     */
    requireAcceptance?: boolean;
    /**
     * Name of the segment.
     */
    segment?: string;
    /**
     * Maps the attachment to the value of a known key. This is used with the `associationMethod` is `tag`. For example a `tag` of `stage = “test”`, will map to a segment named `test`. The value must exactly match the name of a segment. This allows you to have many segments, but use only a single rule without having to define multiple nearly identical conditions. This prevents creating many similar conditions that all use the same keys to map to segments.
     */
    tagValueOfKey?: string;
}

export interface GetCoreNetworkPolicyDocumentAttachmentPolicyCondition {
    /**
     * string value
     */
    key?: string;
    /**
     * Valid values include: `equals`, `not-equals`, `contains`, `begins-with`.
     */
    operator?: string;
    /**
     * Valid values include: `account-id`, `any`, `tag-value`, `tag-exists`, `resource-id`, `region`, `attachment-type`.
     */
    type: string;
    /**
     * string value
     */
    value?: string;
}

export interface GetCoreNetworkPolicyDocumentCoreNetworkConfiguration {
    /**
     * List of strings containing Autonomous System Numbers (ASNs) to assign to Core Network Edges. By default, the core network automatically assigns an ASN for each Core Network Edge but you can optionally define the ASN in the edge-locations for each Region. The ASN uses an array of integer ranges only from `64512` to `65534` and `4200000000` to `4294967294` expressed as a string like `"64512-65534"`. No other ASN ranges can be used.
     */
    asnRanges: string[];
    /**
     * A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
     */
    edgeLocations: outputs.networkmanager.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation[];
    /**
     * The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
     */
    insideCidrBlocks?: string[];
    /**
     * Indicates whether the core network forwards traffic over multiple equal-cost routes using VPN. The value can be either `true` or `false`. The default is `true`.
     */
    vpnEcmpSupport?: boolean;
}

export interface GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocation {
    /**
     * ASN of the Core Network Edge in an AWS Region. By default, the ASN will be a single integer automatically assigned from `asnRanges`
     */
    asn?: string;
    /**
     * The local CIDR blocks for this Core Network Edge for AWS Transit Gateway Connect attachments. By default, this CIDR block will be one or more optional IPv4 and IPv6 CIDR prefixes auto-assigned from `insideCidrBlocks`.
     */
    insideCidrBlocks?: string[];
    location: string;
}

export interface GetCoreNetworkPolicyDocumentSegment {
    /**
     * List of strings of segment names that explicitly allows only routes from the segments that are listed in the array. Use the `allowFilter` setting if a segment has a well-defined group of other segments that connectivity should be restricted to. It is applied after routes have been shared in `segmentActions`. If a segment is listed in `allowFilter`, attachments between the two segments will have routes if they are also shared in the segment-actions area. For example, you might have a segment named "video-producer" that should only ever share routes with a "video-distributor" segment, no matter how many other share statements are created.
     */
    allowFilters?: string[];
    /**
     * An array of segments that disallows routes from the segments listed in the array. It is applied only after routes have been shared in `segmentActions`. If a segment is listed in the `denyFilter`, attachments between the two segments will never have routes shared across them. For example, you might have a "financial" payment segment that should never share routes with a "development" segment, regardless of how many other share statements are created. Adding the payments segment to the deny-filter parameter prevents any shared routes from being created with other segments.
     */
    denyFilters?: string[];
    /**
     * A user-defined string describing the segment action.
     */
    description?: string;
    /**
     * A list of strings of AWS Region names. Allows you to define a more restrictive set of Regions for a segment. The edge location must be a subset of the locations that are defined for `edgeLocations` in the `coreNetworkConfiguration`.
     */
    edgeLocations?: string[];
    /**
     * This Boolean setting determines whether attachments on the same segment can communicate with each other. If set to `true`, the only routes available will be either shared routes through the share actions, which are attachments in other segments, or static routes. The default value is `false`. For example, you might have a segment dedicated to "development" that should never allow VPCs to talk to each other, even if they’re on the same segment. In this example, you would keep the default parameter of `false`.
     */
    isolateAttachments?: boolean;
    /**
     * Unique name for a segment. The name is a string used in other parts of the policy document, as well as in the console for metrics and other reference points. Valid characters are a–z, and 0–9.
     */
    name: string;
    /**
     * This Boolean setting determines whether attachment requests are automatically approved or require acceptance. The default is `true`, indicating that attachment requests require acceptance. For example, you might use this setting to allow a "sandbox" segment to allow any attachment request so that a core network or attachment administrator does not need to review and approve attachment requests. In this example, `requireAttachmentAcceptance` is set to `false`.
     */
    requireAttachmentAcceptance?: boolean;
}

export interface GetCoreNetworkPolicyDocumentSegmentAction {
    /**
     * Action to take for the chosen segment. Valid values `create-route` or `share`.
     */
    action: string;
    /**
     * A user-defined string describing the segment action.
     */
    description?: string;
    /**
     * List of strings containing CIDRs. You can define the IPv4 and IPv6 CIDR notation for each AWS Region. For example, `10.1.0.0/16` or `2001:db8::/56`. This is an array of CIDR notation strings.
     */
    destinationCidrBlocks?: string[];
    /**
     * A list of strings. Valid values include `["blackhole"]` or a list of attachment ids.
     */
    destinations?: string[];
    /**
     * String. This mode places the attachment and return routes in each of the `shareWith` segments. Valid values include: `attachment-route`.
     */
    mode?: string;
    /**
     * Name of the segment.
     */
    segment: string;
    /**
     * A set subtraction of segments to not share with.
     */
    shareWithExcepts?: string[];
    /**
     * A list of strings to share with. Must be a substring is all segments. Valid values include: `["*"]` or `["<segment-names>"]`.
     */
    shareWiths?: string[];
}

export interface GetDeviceAwsLocation {
    /**
     * ARN of the subnet that the device is located in.
     */
    subnetArn: string;
    /**
     * Zone that the device is located in.
     */
    zone: string;
}

export interface GetDeviceLocation {
    /**
     * Physical address.
     */
    address: string;
    /**
     * Latitude.
     */
    latitude: string;
    /**
     * Longitude.
     */
    longitude: string;
}

export interface GetLinkBandwidth {
    /**
     * Download speed in Mbps.
     */
    downloadSpeed: number;
    /**
     * Upload speed in Mbps.
     */
    uploadSpeed: number;
}

export interface GetSiteLocation {
    /**
     * Address of the location.
     */
    address: string;
    /**
     * Latitude of the location.
     */
    latitude: string;
    /**
     * Longitude of the location.
     */
    longitude: string;
}

export interface LinkBandwidth {
    /**
     * Download speed in Mbps.
     */
    downloadSpeed?: number;
    /**
     * Upload speed in Mbps.
     */
    uploadSpeed?: number;
}

export interface SiteLocation {
    /**
     * Address of the location.
     */
    address?: string;
    /**
     * Latitude of the location.
     */
    latitude?: string;
    /**
     * Longitude of the location.
     */
    longitude?: string;
}

export interface VpcAttachmentOptions {
    /**
     * Indicates whether IPv6 is supported.
     */
    ipv6Support: boolean;
}

