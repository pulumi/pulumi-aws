// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface DomainAdvancedSecurityOptions {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
     */
    internalUserDatabaseEnabled?: pulumi.Input<boolean>;
    /**
     * Configuration block for the main user. Detailed below.
     */
    masterUserOptions?: pulumi.Input<inputs.elasticsearch.DomainAdvancedSecurityOptionsMasterUserOptions>;
}

export interface DomainAdvancedSecurityOptionsMasterUserOptions {
    /**
     * ARN for the main user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`.
     */
    masterUserArn?: pulumi.Input<string>;
    /**
     * Main user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
     */
    masterUserName?: pulumi.Input<string>;
    /**
     * Main user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
     */
    masterUserPassword?: pulumi.Input<string>;
}

export interface DomainAutoTuneOptions {
    /**
     * The Auto-Tune desired state for the domain. Valid values: `ENABLED` or `DISABLED`.
     */
    desiredState: pulumi.Input<string>;
    /**
     * Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
     */
    maintenanceSchedules?: pulumi.Input<pulumi.Input<inputs.elasticsearch.DomainAutoTuneOptionsMaintenanceSchedule>[]>;
    /**
     * Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: `DEFAULT_ROLLBACK` or `NO_ROLLBACK`.
     */
    rollbackOnDisable?: pulumi.Input<string>;
}

export interface DomainAutoTuneOptionsMaintenanceSchedule {
    /**
     * A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
     */
    cronExpressionForRecurrence: pulumi.Input<string>;
    /**
     * Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
     */
    duration: pulumi.Input<inputs.elasticsearch.DomainAutoTuneOptionsMaintenanceScheduleDuration>;
    /**
     * Date and time at which to start the Auto-Tune maintenance schedule in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    startAt: pulumi.Input<string>;
}

export interface DomainAutoTuneOptionsMaintenanceScheduleDuration {
    /**
     * The unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: `HOURS`.
     */
    unit: pulumi.Input<string>;
    /**
     * An integer specifying the value of the duration of an Auto-Tune maintenance window.
     */
    value: pulumi.Input<number>;
}

export interface DomainClusterConfig {
    /**
     * Configuration block containing cold storage configuration. Detailed below.
     */
    coldStorageOptions?: pulumi.Input<inputs.elasticsearch.DomainClusterConfigColdStorageOptions>;
    /**
     * Number of dedicated main nodes in the cluster.
     */
    dedicatedMasterCount?: pulumi.Input<number>;
    /**
     * Whether dedicated main nodes are enabled for the cluster.
     */
    dedicatedMasterEnabled?: pulumi.Input<boolean>;
    /**
     * Instance type of the dedicated main nodes in the cluster.
     */
    dedicatedMasterType?: pulumi.Input<string>;
    /**
     * Number of instances in the cluster.
     */
    instanceCount?: pulumi.Input<number>;
    /**
     * Instance type of data nodes in the cluster.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
     */
    warmCount?: pulumi.Input<number>;
    /**
     * Whether to enable warm storage.
     */
    warmEnabled?: pulumi.Input<boolean>;
    /**
     * Instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
     */
    warmType?: pulumi.Input<string>;
    /**
     * Configuration block containing zone awareness settings. Detailed below.
     */
    zoneAwarenessConfig?: pulumi.Input<inputs.elasticsearch.DomainClusterConfigZoneAwarenessConfig>;
    /**
     * Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
     */
    zoneAwarenessEnabled?: pulumi.Input<boolean>;
}

export interface DomainClusterConfigColdStorageOptions {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
     */
    enabled?: pulumi.Input<boolean>;
}

export interface DomainClusterConfigZoneAwarenessConfig {
    /**
     * Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
     */
    availabilityZoneCount?: pulumi.Input<number>;
}

export interface DomainCognitoOptions {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * ID of the Cognito Identity Pool to use.
     */
    identityPoolId: pulumi.Input<string>;
    /**
     * ARN of the IAM role that has the AmazonESCognitoAccess policy attached.
     */
    roleArn: pulumi.Input<string>;
    /**
     * ID of the Cognito User Pool to use.
     */
    userPoolId: pulumi.Input<string>;
}

export interface DomainDomainEndpointOptions {
    /**
     * Fully qualified domain for your custom endpoint.
     */
    customEndpoint?: pulumi.Input<string>;
    /**
     * ACM certificate ARN for your custom endpoint.
     */
    customEndpointCertificateArn?: pulumi.Input<string>;
    /**
     * Whether to enable custom endpoint for the Elasticsearch domain.
     */
    customEndpointEnabled?: pulumi.Input<boolean>;
    /**
     * Whether or not to require HTTPS. Defaults to `true`.
     */
    enforceHttps?: pulumi.Input<boolean>;
    /**
     * Name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. The provider will only perform drift detection if a configuration value is provided.
     */
    tlsSecurityPolicy?: pulumi.Input<string>;
}

export interface DomainEbsOptions {
    /**
     * Whether EBS volumes are attached to data nodes in the domain.
     */
    ebsEnabled: pulumi.Input<boolean>;
    /**
     * Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
     */
    iops?: pulumi.Input<number>;
    /**
     * Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type. Valid values are between `125` and `1000`.
     */
    throughput?: pulumi.Input<number>;
    /**
     * Size of EBS volumes attached to data nodes (in GiB).
     */
    volumeSize?: pulumi.Input<number>;
    /**
     * Type of EBS volumes attached to data nodes.
     */
    volumeType?: pulumi.Input<string>;
}

export interface DomainEncryptAtRest {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN. To prevent the provider detecting unwanted changes, use the key ARN instead.
     */
    kmsKeyId?: pulumi.Input<string>;
}

export interface DomainLogPublishingOption {
    /**
     * ARN of the Cloudwatch log group to which log needs to be published.
     */
    cloudwatchLogGroupArn: pulumi.Input<string>;
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Type of Elasticsearch log. Valid values: `INDEX_SLOW_LOGS`, `SEARCH_SLOW_LOGS`, `ES_APPLICATION_LOGS`, `AUDIT_LOGS`.
     */
    logType: pulumi.Input<string>;
}

export interface DomainNodeToNodeEncryption {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `elasticsearchVersion` of `6.0` or greater.
     */
    enabled: pulumi.Input<boolean>;
}

export interface DomainSamlOptionsSamlOptions {
    /**
     * Whether SAML authentication is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Information from your identity provider.
     */
    idp?: pulumi.Input<inputs.elasticsearch.DomainSamlOptionsSamlOptionsIdp>;
    /**
     * This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     */
    masterBackendRole?: pulumi.Input<string>;
    /**
     * This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     */
    masterUserName?: pulumi.Input<string>;
    /**
     * Element of the SAML assertion to use for backend roles. Default is roles.
     */
    rolesKey?: pulumi.Input<string>;
    /**
     * Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
     */
    sessionTimeoutMinutes?: pulumi.Input<number>;
    /**
     * Custom SAML attribute to use for user names. Default is an empty string - `""`. This will cause Elasticsearch to use the `NameID` element of the `Subject`, which is the default location for name identifiers in the SAML specification.
     */
    subjectKey?: pulumi.Input<string>;
}

export interface DomainSamlOptionsSamlOptionsIdp {
    /**
     * The unique Entity ID of the application in SAML Identity Provider.
     */
    entityId: pulumi.Input<string>;
    /**
     * The Metadata of the SAML application in xml format.
     */
    metadataContent: pulumi.Input<string>;
}

export interface DomainSnapshotOptions {
    /**
     * Hour during which the service takes an automated daily snapshot of the indices in the domain.
     */
    automatedSnapshotStartHour: pulumi.Input<number>;
}

export interface DomainVpcOptions {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    vpcId?: pulumi.Input<string>;
}

