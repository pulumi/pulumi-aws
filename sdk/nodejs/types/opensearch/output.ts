// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface DomainAdvancedSecurityOptions {
    /**
     * Whether Anonymous auth is enabled. Enables fine-grained access control on an existing domain. Ignored unless `advancedSecurityOptions` are enabled. _Can only be enabled on an existing domain._
     */
    anonymousAuthEnabled: boolean;
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled: boolean;
    /**
     * Whether the internal user database is enabled. Default is `false`.
     */
    internalUserDatabaseEnabled?: boolean;
    /**
     * Configuration block for the main user. Detailed below.
     */
    masterUserOptions?: outputs.opensearch.DomainAdvancedSecurityOptionsMasterUserOptions;
}

export interface DomainAdvancedSecurityOptionsMasterUserOptions {
    /**
     * ARN for the main user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`.
     */
    masterUserArn?: string;
    /**
     * Main user's username, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
     */
    masterUserName?: string;
    /**
     * Main user's password, which is stored in the Amazon OpenSearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
     */
    masterUserPassword?: string;
}

export interface DomainAutoTuneOptions {
    /**
     * Auto-Tune desired state for the domain. Valid values: `ENABLED` or `DISABLED`.
     */
    desiredState: string;
    /**
     * Configuration block for Auto-Tune maintenance windows. Can be specified multiple times for each maintenance window. Detailed below.
     */
    maintenanceSchedules: outputs.opensearch.DomainAutoTuneOptionsMaintenanceSchedule[];
    /**
     * Whether to roll back to default Auto-Tune settings when disabling Auto-Tune. Valid values: `DEFAULT_ROLLBACK` or `NO_ROLLBACK`.
     */
    rollbackOnDisable: string;
}

export interface DomainAutoTuneOptionsMaintenanceSchedule {
    /**
     * A cron expression specifying the recurrence pattern for an Auto-Tune maintenance schedule.
     */
    cronExpressionForRecurrence: string;
    /**
     * Configuration block for the duration of the Auto-Tune maintenance window. Detailed below.
     */
    duration: outputs.opensearch.DomainAutoTuneOptionsMaintenanceScheduleDuration;
    /**
     * Date and time at which to start the Auto-Tune maintenance schedule in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    startAt: string;
}

export interface DomainAutoTuneOptionsMaintenanceScheduleDuration {
    /**
     * Unit of time specifying the duration of an Auto-Tune maintenance window. Valid values: `HOURS`.
     */
    unit: string;
    /**
     * An integer specifying the value of the duration of an Auto-Tune maintenance window.
     */
    value: number;
}

export interface DomainClusterConfig {
    /**
     * Configuration block containing cold storage configuration. Detailed below.
     */
    coldStorageOptions: outputs.opensearch.DomainClusterConfigColdStorageOptions;
    /**
     * Number of dedicated main nodes in the cluster.
     */
    dedicatedMasterCount?: number;
    /**
     * Whether dedicated main nodes are enabled for the cluster.
     */
    dedicatedMasterEnabled?: boolean;
    /**
     * Instance type of the dedicated main nodes in the cluster.
     */
    dedicatedMasterType?: string;
    /**
     * Number of instances in the cluster.
     */
    instanceCount?: number;
    /**
     * Instance type of data nodes in the cluster.
     */
    instanceType?: string;
    /**
     * Number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
     */
    warmCount?: number;
    /**
     * Whether to enable warm storage.
     */
    warmEnabled?: boolean;
    /**
     * Instance type for the OpenSearch cluster's warm nodes. Valid values are `ultrawarm1.medium.search`, `ultrawarm1.large.search` and `ultrawarm1.xlarge.search`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
     */
    warmType?: string;
    /**
     * Configuration block containing zone awareness settings. Detailed below.
     */
    zoneAwarenessConfig?: outputs.opensearch.DomainClusterConfigZoneAwarenessConfig;
    /**
     * Whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
     */
    zoneAwarenessEnabled?: boolean;
}

export interface DomainClusterConfigColdStorageOptions {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled: boolean;
}

export interface DomainClusterConfigZoneAwarenessConfig {
    /**
     * Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
     */
    availabilityZoneCount?: number;
}

export interface DomainCognitoOptions {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled?: boolean;
    /**
     * ID of the Cognito Identity Pool to use.
     */
    identityPoolId: string;
    /**
     * ARN of the IAM role that has the AmazonOpenSearchServiceCognitoAccess policy attached.
     */
    roleArn: string;
    /**
     * ID of the Cognito User Pool to use.
     */
    userPoolId: string;
}

export interface DomainDomainEndpointOptions {
    /**
     * Fully qualified domain for your custom endpoint.
     */
    customEndpoint?: string;
    /**
     * ACM certificate ARN for your custom endpoint.
     */
    customEndpointCertificateArn?: string;
    /**
     * Whether to enable custom endpoint for the OpenSearch domain.
     */
    customEndpointEnabled?: boolean;
    /**
     * Whether or not to require HTTPS. Defaults to `true`.
     */
    enforceHttps?: boolean;
    /**
     * Name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. The provider will only perform drift detection if a configuration value is provided.
     */
    tlsSecurityPolicy: string;
}

export interface DomainEbsOptions {
    /**
     * Whether EBS volumes are attached to data nodes in the domain.
     */
    ebsEnabled: boolean;
    /**
     * Baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the GP3 and Provisioned IOPS EBS volume types.
     */
    iops: number;
    /**
     * Specifies the throughput (in MiB/s) of the EBS volumes attached to data nodes. Applicable only for the gp3 volume type. Valid values are between `125` and `1000`.
     */
    throughput: number;
    /**
     * Size of EBS volumes attached to data nodes (in GiB).
     */
    volumeSize?: number;
    /**
     * Type of EBS volumes attached to data nodes.
     */
    volumeType: string;
}

export interface DomainEncryptAtRest {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled: boolean;
    /**
     * KMS key ARN to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key. Note that KMS will accept a KMS key ID but will return the key ARN. To prevent the provider detecting unwanted changes, use the key ARN instead.
     */
    kmsKeyId: string;
}

export interface DomainLogPublishingOption {
    /**
     * ARN of the Cloudwatch log group to which log needs to be published.
     */
    cloudwatchLogGroupArn: string;
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled?: boolean;
    /**
     * Type of OpenSearch log. Valid values: `INDEX_SLOW_LOGS`, `SEARCH_SLOW_LOGS`, `ES_APPLICATION_LOGS`, `AUDIT_LOGS`.
     */
    logType: string;
}

export interface DomainNodeToNodeEncryption {
    /**
     * Whether to enable node-to-node encryption. If the `nodeToNodeEncryption` block is not provided then this defaults to `false`. Enabling node-to-node encryption of a new domain requires an `engineVersion` of `OpenSearch_X.Y` or `Elasticsearch_6.0` or greater.
     */
    enabled: boolean;
}

export interface DomainSamlOptionsSamlOptions {
    /**
     * Whether SAML authentication is enabled.
     */
    enabled?: boolean;
    /**
     * Information from your identity provider.
     */
    idp?: outputs.opensearch.DomainSamlOptionsSamlOptionsIdp;
    /**
     * This backend role from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     */
    masterBackendRole?: string;
    /**
     * This username from the SAML IdP receives full permissions to the cluster, equivalent to a new master user.
     */
    masterUserName?: string;
    /**
     * Element of the SAML assertion to use for backend roles. Default is roles.
     */
    rolesKey?: string;
    /**
     * Duration of a session in minutes after a user logs in. Default is 60. Maximum value is 1,440.
     */
    sessionTimeoutMinutes?: number;
    /**
     * Element of the SAML assertion to use for username. Default is NameID.
     */
    subjectKey?: string;
}

export interface DomainSamlOptionsSamlOptionsIdp {
    /**
     * Unique Entity ID of the application in SAML Identity Provider.
     */
    entityId: string;
    /**
     * Metadata of the SAML application in xml format.
     */
    metadataContent: string;
}

export interface DomainSnapshotOptions {
    /**
     * Hour during which the service takes an automated daily snapshot of the indices in the domain.
     */
    automatedSnapshotStartHour: number;
}

export interface DomainVpcOptions {
    availabilityZones: string[];
    /**
     * List of VPC Security Group IDs to be applied to the OpenSearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
     */
    securityGroupIds?: string[];
    /**
     * List of VPC Subnet IDs for the OpenSearch domain endpoints to be created in.
     */
    subnetIds?: string[];
    vpcId: string;
}

export interface GetDomainAdvancedSecurityOption {
    /**
     * Whether node to node encryption is enabled.
     */
    enabled: boolean;
    /**
     * Whether the internal user database is enabled.
     */
    internalUserDatabaseEnabled: boolean;
}

export interface GetDomainAutoTuneOption {
    /**
     * Auto-Tune desired state for the domain.
     */
    desiredState: string;
    /**
     * A list of the nested configurations for the Auto-Tune maintenance windows of the domain.
     */
    maintenanceSchedules: outputs.opensearch.GetDomainAutoTuneOptionMaintenanceSchedule[];
    /**
     * Whether the domain is set to roll back to default Auto-Tune settings when disabling Auto-Tune.
     */
    rollbackOnDisable: string;
}

export interface GetDomainAutoTuneOptionMaintenanceSchedule {
    /**
     * Cron expression for an Auto-Tune maintenance schedule.
     */
    cronExpressionForRecurrence: string;
    /**
     * Configuration block for the duration of the Auto-Tune maintenance window.
     */
    durations: outputs.opensearch.GetDomainAutoTuneOptionMaintenanceScheduleDuration[];
    /**
     * Date and time at which the Auto-Tune maintenance schedule starts in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
     */
    startAt: string;
}

export interface GetDomainAutoTuneOptionMaintenanceScheduleDuration {
    /**
     * Unit of time.
     */
    unit: string;
    /**
     * Duration of an Auto-Tune maintenance window.
     */
    value: number;
}

export interface GetDomainClusterConfig {
    /**
     * Configuration block containing cold storage configuration.
     */
    coldStorageOptions: outputs.opensearch.GetDomainClusterConfigColdStorageOption[];
    /**
     * Number of dedicated master nodes in the cluster.
     */
    dedicatedMasterCount: number;
    /**
     * Indicates whether dedicated master nodes are enabled for the cluster.
     */
    dedicatedMasterEnabled: boolean;
    /**
     * Instance type of the dedicated master nodes in the cluster.
     */
    dedicatedMasterType: string;
    /**
     * Number of instances in the cluster.
     */
    instanceCount: number;
    /**
     * Instance type of data nodes in the cluster.
     */
    instanceType: string;
    /**
     * Number of warm nodes in the cluster.
     */
    warmCount: number;
    /**
     * Warm storage is enabled.
     */
    warmEnabled?: boolean;
    /**
     * Instance type for the OpenSearch cluster's warm nodes.
     */
    warmType: string;
    /**
     * Configuration block containing zone awareness settings.
     */
    zoneAwarenessConfigs: outputs.opensearch.GetDomainClusterConfigZoneAwarenessConfig[];
    /**
     * Indicates whether zone awareness is enabled.
     */
    zoneAwarenessEnabled: boolean;
}

export interface GetDomainClusterConfigColdStorageOption {
    /**
     * Whether node to node encryption is enabled.
     */
    enabled: boolean;
}

export interface GetDomainClusterConfigZoneAwarenessConfig {
    /**
     * Number of availability zones used.
     */
    availabilityZoneCount: number;
}

export interface GetDomainCognitoOption {
    /**
     * Whether node to node encryption is enabled.
     */
    enabled: boolean;
    /**
     * Cognito Identity pool used by the domain.
     */
    identityPoolId: string;
    /**
     * IAM Role with the AmazonOpenSearchServiceCognitoAccess policy attached.
     */
    roleArn: string;
    /**
     * Cognito User pool used by the domain.
     */
    userPoolId: string;
}

export interface GetDomainEbsOption {
    /**
     * Whether EBS volumes are attached to data nodes in the domain.
     */
    ebsEnabled: boolean;
    /**
     * Baseline input/output (I/O) performance of EBS volumes attached to data nodes.
     */
    iops: number;
    /**
     * The throughput (in MiB/s) of the EBS volumes attached to data nodes.
     */
    throughput: number;
    /**
     * Size of EBS volumes attached to data nodes (in GB).
     */
    volumeSize: number;
    /**
     * Type of EBS volumes attached to data nodes.
     */
    volumeType: string;
}

export interface GetDomainEncryptionAtRest {
    /**
     * Whether node to node encryption is enabled.
     */
    enabled: boolean;
    /**
     * KMS key id used to encrypt data at rest.
     */
    kmsKeyId: string;
}

export interface GetDomainLogPublishingOption {
    /**
     * CloudWatch Log Group where the logs are published.
     */
    cloudwatchLogGroupArn: string;
    /**
     * Whether node to node encryption is enabled.
     */
    enabled: boolean;
    /**
     * Type of OpenSearch log being published.
     */
    logType: string;
}

export interface GetDomainNodeToNodeEncryption {
    /**
     * Whether node to node encryption is enabled.
     */
    enabled: boolean;
}

export interface GetDomainSnapshotOption {
    /**
     * Hour during which the service takes an automated daily snapshot of the indices in the domain.
     */
    automatedSnapshotStartHour: number;
}

export interface GetDomainVpcOption {
    /**
     * Availability zones used by the domain.
     */
    availabilityZones: string[];
    /**
     * Security groups used by the domain.
     */
    securityGroupIds: string[];
    /**
     * Subnets used by the domain.
     */
    subnetIds: string[];
    /**
     * VPC used by the domain.
     */
    vpcId: string;
}

export interface OutboundConnectionLocalDomainInfo {
    /**
     * The name of the remote domain.
     */
    domainName: string;
    /**
     * The Account ID of the owner of the remote domain.
     */
    ownerId: string;
    /**
     * The region of the remote domain.
     */
    region: string;
}

export interface OutboundConnectionRemoteDomainInfo {
    /**
     * The name of the remote domain.
     */
    domainName: string;
    /**
     * The Account ID of the owner of the remote domain.
     */
    ownerId: string;
    /**
     * The region of the remote domain.
     */
    region: string;
}

