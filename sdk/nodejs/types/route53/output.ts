// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface GetResolverEndpointFilter {
    name: string;
    values: string[];
}

export interface GetResolverFirewallRulesFirewallRule {
    /**
     * The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
     */
    action: string;
    /**
     * The DNS record's type.
     */
    blockOverrideDnsType: string;
    /**
     * The custom DNS record to send back in response to the query.
     */
    blockOverrideDomain: string;
    /**
     * The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
     */
    blockOverrideTtl: number;
    /**
     * The way that you want DNS Firewall to block the request.
     */
    blockResponse: string;
    /**
     * The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
     */
    creationTime: string;
    /**
     * A unique string defined by you to identify the request.
     */
    creatorRequestId: string;
    /**
     * The ID of the domain list that's used in the rule.
     */
    firewallDomainListId: string;
    /**
     * The unique identifier of the firewall rule group that you want to retrieve the rules for.
     */
    firewallRuleGroupId: string;
    /**
     * The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
     */
    modificationTime: string;
    /**
     * The name of the rule.
     */
    name: string;
    /**
     * The setting that determines the processing order of the rules in a rule group.
     */
    priority: number;
}

export interface GetTrafficPolicyDocumentEndpoint {
    /**
     * ID of a rule you want to assign.
     */
    id: string;
    /**
     * Region code for the AWS Region that you created the resource in.
     */
    region?: string;
    /**
     * Type of the rule.
     */
    type?: string;
    /**
     * Value of the `type`.
     */
    value?: string;
}

export interface GetTrafficPolicyDocumentRule {
    /**
     * Configuration block for when you add a geoproximity rule, you configure Amazon Route 53 to route traffic to your resources based on the geographic location of your resources. Only valid for `geoproximity` type. See below
     */
    geoProximityLocations?: outputs.route53.GetTrafficPolicyDocumentRuleGeoProximityLocation[];
    /**
     * ID of a rule you want to assign.
     */
    id: string;
    /**
     * Configuration block for when you add a multivalue answer rule, you configure your traffic policy to route traffic approximately randomly to your healthy resources.  Only valid for `multivalue` type. See below
     */
    items?: outputs.route53.GetTrafficPolicyDocumentRuleItem[];
    /**
     * Configuration block for when you add a geolocation rule, you configure your traffic policy to route your traffic based on the geographic location of your users.  Only valid for `geo` type. See below
     */
    locations?: outputs.route53.GetTrafficPolicyDocumentRuleLocation[];
    /**
     * Configuration block for the settings for the rule or endpoint that you want to route traffic to whenever the corresponding resources are available. Only valid for `failover` type. See below
     */
    primary?: outputs.route53.GetTrafficPolicyDocumentRulePrimary;
    /**
     * Region code for the AWS Region that you created the resource in.
     */
    regions?: outputs.route53.GetTrafficPolicyDocumentRuleRegion[];
    /**
     * Configuration block for the rule or endpoint that you want to route traffic to whenever the primary resources are not available. Only valid for `failover` type. See below
     */
    secondary?: outputs.route53.GetTrafficPolicyDocumentRuleSecondary;
    /**
     * Type of the rule.
     */
    type?: string;
}

export interface GetTrafficPolicyDocumentRuleGeoProximityLocation {
    /**
     * Specify a value for `bias` if you want to route more traffic to an endpoint from nearby endpoints (positive values) or route less traffic to an endpoint (negative values).
     */
    bias?: string;
    /**
     * References to an endpoint.
     */
    endpointReference?: string;
    /**
     * Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
     */
    evaluateTargetHealth?: boolean;
    /**
     * If you want to associate a health check with the endpoint or rule.
     */
    healthCheck?: string;
    /**
     * Represents the location south (negative) or north (positive) of the equator. Valid values are -90 degrees to 90 degrees.
     */
    latitude?: string;
    /**
     * Represents the location west (negative) or east (positive) of the prime meridian. Valid values are -180 degrees to 180 degrees.
     */
    longitude?: string;
    /**
     * Region code for the AWS Region that you created the resource in.
     */
    region?: string;
    /**
     * References to a rule.
     */
    ruleReference?: string;
}

export interface GetTrafficPolicyDocumentRuleItem {
    /**
     * References to an endpoint.
     */
    endpointReference?: string;
    /**
     * If you want to associate a health check with the endpoint or rule.
     */
    healthCheck?: string;
}

export interface GetTrafficPolicyDocumentRuleLocation {
    /**
     * Value of a continent.
     */
    continent?: string;
    /**
     * Value of a country.
     */
    country?: string;
    /**
     * References to an endpoint.
     */
    endpointReference?: string;
    /**
     * Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
     */
    evaluateTargetHealth?: boolean;
    /**
     * If you want to associate a health check with the endpoint or rule.
     */
    healthCheck?: string;
    /**
     * Indicates whether this set of values represents the default location.
     */
    isDefault?: boolean;
    /**
     * References to a rule.
     */
    ruleReference?: string;
    /**
     * Value of a subdivision.
     */
    subdivision?: string;
}

export interface GetTrafficPolicyDocumentRulePrimary {
    /**
     * References to an endpoint.
     */
    endpointReference?: string;
    /**
     * Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
     */
    evaluateTargetHealth?: boolean;
    /**
     * If you want to associate a health check with the endpoint or rule.
     */
    healthCheck?: string;
    /**
     * References to a rule.
     */
    ruleReference?: string;
}

export interface GetTrafficPolicyDocumentRuleRegion {
    /**
     * References to an endpoint.
     */
    endpointReference?: string;
    /**
     * Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
     */
    evaluateTargetHealth?: boolean;
    /**
     * If you want to associate a health check with the endpoint or rule.
     */
    healthCheck?: string;
    /**
     * Region code for the AWS Region that you created the resource in.
     */
    region?: string;
    /**
     * References to a rule.
     */
    ruleReference?: string;
}

export interface GetTrafficPolicyDocumentRuleSecondary {
    /**
     * References to an endpoint.
     */
    endpointReference?: string;
    /**
     * Indicates whether you want Amazon Route 53 to evaluate the health of the endpoint and route traffic only to healthy endpoints.
     */
    evaluateTargetHealth?: boolean;
    /**
     * If you want to associate a health check with the endpoint or rule.
     */
    healthCheck?: string;
    /**
     * References to a rule.
     */
    ruleReference?: string;
}

export interface RecordAlias {
    /**
     * Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
     */
    evaluateTargetHealth: boolean;
    /**
     * DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
     */
    name: string;
    /**
     * Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
     */
    zoneId: string;
}

export interface RecordFailoverRoutingPolicy {
    /**
     * `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
     */
    type: string;
}

export interface RecordGeolocationRoutingPolicy {
    /**
     * A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
     */
    continent?: string;
    /**
     * A two-character country code or `*` to indicate a default resource record set.
     */
    country?: string;
    /**
     * A subdivision code for a country.
     */
    subdivision?: string;
}

export interface RecordLatencyRoutingPolicy {
    /**
     * An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
     */
    region: string;
}

export interface RecordWeightedRoutingPolicy {
    /**
     * A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
     */
    weight: number;
}

export interface ResolverEndpointIpAddress {
    /**
     * The IP address in the subnet that you want to use for DNS queries.
     */
    ip: string;
    ipId: string;
    /**
     * The ID of the subnet that contains the IP address.
     */
    subnetId: string;
}

export interface ResolverRuleTargetIp {
    /**
     * One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
     */
    ip: string;
    /**
     * The port at `ip` that you want to forward DNS queries to. Default value is `53`
     */
    port?: number;
}

export interface ZoneVpc {
    /**
     * ID of the VPC to associate.
     */
    vpcId: string;
    /**
     * Region of the VPC to associate. Defaults to AWS provider region.
     */
    vpcRegion: string;
}

