// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface GetKeyMultiRegionConfiguration {
    multiRegionKeyType: string;
    primaryKeys: outputs.kms.GetKeyMultiRegionConfigurationPrimaryKey[];
    replicaKeys: outputs.kms.GetKeyMultiRegionConfigurationReplicaKey[];
}

export interface GetKeyMultiRegionConfigurationPrimaryKey {
    arn: string;
    region: string;
}

export interface GetKeyMultiRegionConfigurationReplicaKey {
    arn: string;
    region: string;
}

export interface GetSecretSecret {
    context?: {[key: string]: string};
    grantTokens?: string[];
    name: string;
    payload: string;
}

export interface GetSecretsSecret {
    /**
     * An optional mapping that makes up the Encryption Context for the secret.
     */
    context?: {[key: string]: string};
    /**
     * An optional list of Grant Tokens for the secret.
     */
    grantTokens?: string[];
    /**
     * Name to export this secret under in the attributes.
     */
    name: string;
    /**
     * Base64 encoded payload, as returned from a KMS encrypt operation.
     */
    payload: string;
}

export interface GrantConstraint {
    /**
     * A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
     */
    encryptionContextEquals?: {[key: string]: string};
    /**
     * A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
     */
    encryptionContextSubset?: {[key: string]: string};
}

