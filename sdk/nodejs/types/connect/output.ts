// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface BotAssociationLexBot {
    /**
     * The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.
     */
    lexRegion: string;
    /**
     * The name of the Amazon Lex (V1) bot.
     */
    name: string;
}

export interface GetBotAssociationLexBot {
    /**
     * Region that the Amazon Lex (V1) bot was created in.
     */
    lexRegion: string;
    /**
     * Name of the Amazon Lex (V1) bot.
     */
    name: string;
}

export interface GetHoursOfOperationConfig {
    /**
     * Day that the hours of operation applies to.
     */
    day: string;
    /**
     * End time block specifies the time that your contact center closes. The `endTime` is documented below.
     */
    endTimes: outputs.connect.GetHoursOfOperationConfigEndTime[];
    /**
     * Start time block specifies the time that your contact center opens. The `startTime` is documented below.
     */
    startTimes: outputs.connect.GetHoursOfOperationConfigStartTime[];
}

export interface GetHoursOfOperationConfigEndTime {
    /**
     * Hour of opening.
     */
    hours: number;
    /**
     * Minute of opening.
     */
    minutes: number;
}

export interface GetHoursOfOperationConfigStartTime {
    /**
     * Hour of opening.
     */
    hours: number;
    /**
     * Minute of opening.
     */
    minutes: number;
}

export interface GetInstanceStorageConfigStorageConfig {
    /**
     * A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
     */
    kinesisFirehoseConfigs: outputs.connect.GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig[];
    /**
     * A block that specifies the configuration of the Kinesis data stream. Documented below.
     */
    kinesisStreamConfigs: outputs.connect.GetInstanceStorageConfigStorageConfigKinesisStreamConfig[];
    /**
     * A block that specifies the configuration of the Kinesis video stream. Documented below.
     */
    kinesisVideoStreamConfigs: outputs.connect.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig[];
    /**
     * A block that specifies the configuration of S3 Bucket. Documented below.
     */
    s3Configs: outputs.connect.GetInstanceStorageConfigStorageConfigS3Config[];
    /**
     * A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
     */
    storageType: string;
}

export interface GetInstanceStorageConfigStorageConfigKinesisFirehoseConfig {
    /**
     * The Amazon Resource Name (ARN) of the delivery stream.
     */
    firehoseArn: string;
}

export interface GetInstanceStorageConfigStorageConfigKinesisStreamConfig {
    /**
     * The Amazon Resource Name (ARN) of the data stream.
     */
    streamArn: string;
}

export interface GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfig {
    /**
     * The encryption configuration. Documented below.
     */
    encryptionConfigs: outputs.connect.GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig[];
    /**
     * The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
     */
    prefix: string;
    /**
     * The number of hours to retain the data in a data store associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0` indicates that the stream does not persist data.
     */
    retentionPeriodHours: number;
}

export interface GetInstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig {
    /**
     * The type of encryption. Valid Values: `KMS`.
     */
    encryptionType: string;
    /**
     * The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
     */
    keyId: string;
}

export interface GetInstanceStorageConfigStorageConfigS3Config {
    /**
     * The S3 bucket name.
     */
    bucketName: string;
    /**
     * The S3 bucket prefix.
     */
    bucketPrefix: string;
    /**
     * The encryption configuration. Documented below.
     */
    encryptionConfigs: outputs.connect.GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig[];
}

export interface GetInstanceStorageConfigStorageConfigS3ConfigEncryptionConfig {
    /**
     * The type of encryption. Valid Values: `KMS`.
     */
    encryptionType: string;
    /**
     * The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
     */
    keyId: string;
}

export interface GetQueueOutboundCallerConfig {
    /**
     * Specifies the caller ID name.
     */
    outboundCallerIdName: string;
    /**
     * Specifies the caller ID number.
     */
    outboundCallerIdNumberId: string;
    /**
     * Outbound whisper flow to be used during an outbound call.
     */
    outboundFlowId: string;
}

export interface GetQuickConnectQuickConnectConfig {
    /**
     * Phone configuration of the Quick Connect. This is returned only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
     */
    phoneConfigs: outputs.connect.GetQuickConnectQuickConnectConfigPhoneConfig[];
    /**
     * Queue configuration of the Quick Connect. This is returned only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
     */
    queueConfigs: outputs.connect.GetQuickConnectQuickConnectConfigQueueConfig[];
    /**
     * Configuration type of the Quick Connect. Valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
     */
    quickConnectType: string;
    /**
     * User configuration of the Quick Connect. This is returned only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
     */
    userConfigs: outputs.connect.GetQuickConnectQuickConnectConfigUserConfig[];
}

export interface GetQuickConnectQuickConnectConfigPhoneConfig {
    /**
     * Phone number in in E.164 format.
     */
    phoneNumber: string;
}

export interface GetQuickConnectQuickConnectConfigQueueConfig {
    /**
     * Identifier of the contact flow.
     */
    contactFlowId: string;
    /**
     * Identifier for the queue.
     */
    queueId: string;
}

export interface GetQuickConnectQuickConnectConfigUserConfig {
    /**
     * Identifier of the contact flow.
     */
    contactFlowId: string;
    /**
     * Identifier for the user.
     */
    userId: string;
}

export interface GetRoutingProfileMediaConcurrency {
    /**
     * Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
     */
    channel: string;
    /**
     * Number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
     */
    concurrency: number;
}

export interface GetRoutingProfileQueueConfig {
    /**
     * Channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
     */
    channel: string;
    /**
     * Delay, in seconds, that a contact should be in the queue before they are routed to an available agent
     */
    delay: number;
    /**
     * Order in which contacts are to be handled for the queue.
     */
    priority: number;
    /**
     * ARN for the queue.
     */
    queueArn: string;
    /**
     * Identifier for the queue.
     */
    queueId: string;
    /**
     * Name for the queue.
     */
    queueName: string;
}

export interface GetUserHierarchyGroupHierarchyPath {
    /**
     * Details of level five. See below.
     */
    levelFives: outputs.connect.GetUserHierarchyGroupHierarchyPathLevelFife[];
    /**
     * Details of level four. See below.
     */
    levelFours: outputs.connect.GetUserHierarchyGroupHierarchyPathLevelFour[];
    /**
     * Details of level one. See below.
     */
    levelOnes: outputs.connect.GetUserHierarchyGroupHierarchyPathLevelOne[];
    /**
     * Details of level three. See below.
     */
    levelThrees: outputs.connect.GetUserHierarchyGroupHierarchyPathLevelThree[];
    /**
     * Details of level two. See below.
     */
    levelTwos: outputs.connect.GetUserHierarchyGroupHierarchyPathLevelTwo[];
}

export interface GetUserHierarchyGroupHierarchyPathLevelFife {
    /**
     * ARN of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * Returns information on a specific hierarchy group by name
     */
    name: string;
}

export interface GetUserHierarchyGroupHierarchyPathLevelFour {
    /**
     * ARN of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * Returns information on a specific hierarchy group by name
     */
    name: string;
}

export interface GetUserHierarchyGroupHierarchyPathLevelOne {
    /**
     * ARN of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * Returns information on a specific hierarchy group by name
     */
    name: string;
}

export interface GetUserHierarchyGroupHierarchyPathLevelThree {
    /**
     * ARN of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * Returns information on a specific hierarchy group by name
     */
    name: string;
}

export interface GetUserHierarchyGroupHierarchyPathLevelTwo {
    /**
     * ARN of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * Returns information on a specific hierarchy group by name
     */
    name: string;
}

export interface GetUserHierarchyStructureHierarchyStructure {
    /**
     * Details of level five. See below.
     */
    levelFives: outputs.connect.GetUserHierarchyStructureHierarchyStructureLevelFife[];
    /**
     * Details of level four. See below.
     */
    levelFours: outputs.connect.GetUserHierarchyStructureHierarchyStructureLevelFour[];
    /**
     * Details of level one. See below.
     */
    levelOnes: outputs.connect.GetUserHierarchyStructureHierarchyStructureLevelOne[];
    /**
     * Details of level three. See below.
     */
    levelThrees: outputs.connect.GetUserHierarchyStructureHierarchyStructureLevelThree[];
    /**
     * Details of level two. See below.
     */
    levelTwos: outputs.connect.GetUserHierarchyStructureHierarchyStructureLevelTwo[];
}

export interface GetUserHierarchyStructureHierarchyStructureLevelFife {
    /**
     * ARN of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * Name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface GetUserHierarchyStructureHierarchyStructureLevelFour {
    /**
     * ARN of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * Name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface GetUserHierarchyStructureHierarchyStructureLevelOne {
    /**
     * ARN of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * Name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface GetUserHierarchyStructureHierarchyStructureLevelThree {
    /**
     * ARN of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * Name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface GetUserHierarchyStructureHierarchyStructureLevelTwo {
    /**
     * ARN of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * Name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface HoursOfOperationConfig {
    /**
     * Specifies the day that the hours of operation applies to.
     */
    day: string;
    /**
     * A end time block specifies the time that your contact center closes. The `endTime` is documented below.
     */
    endTime: outputs.connect.HoursOfOperationConfigEndTime;
    /**
     * A start time block specifies the time that your contact center opens. The `startTime` is documented below.
     */
    startTime: outputs.connect.HoursOfOperationConfigStartTime;
}

export interface HoursOfOperationConfigEndTime {
    /**
     * Specifies the hour of closing.
     */
    hours: number;
    /**
     * Specifies the minute of closing.
     */
    minutes: number;
}

export interface HoursOfOperationConfigStartTime {
    /**
     * Specifies the hour of opening.
     */
    hours: number;
    /**
     * Specifies the minute of opening.
     */
    minutes: number;
}

export interface InstanceStorageConfigStorageConfig {
    /**
     * A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
     */
    kinesisFirehoseConfig?: outputs.connect.InstanceStorageConfigStorageConfigKinesisFirehoseConfig;
    /**
     * A block that specifies the configuration of the Kinesis data stream. Documented below.
     */
    kinesisStreamConfig?: outputs.connect.InstanceStorageConfigStorageConfigKinesisStreamConfig;
    /**
     * A block that specifies the configuration of the Kinesis video stream. Documented below.
     */
    kinesisVideoStreamConfig?: outputs.connect.InstanceStorageConfigStorageConfigKinesisVideoStreamConfig;
    /**
     * A block that specifies the configuration of S3 Bucket. Documented below.
     */
    s3Config?: outputs.connect.InstanceStorageConfigStorageConfigS3Config;
    /**
     * A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.
     */
    storageType: string;
}

export interface InstanceStorageConfigStorageConfigKinesisFirehoseConfig {
    /**
     * The Amazon Resource Name (ARN) of the delivery stream.
     */
    firehoseArn: string;
}

export interface InstanceStorageConfigStorageConfigKinesisStreamConfig {
    /**
     * The Amazon Resource Name (ARN) of the data stream.
     */
    streamArn: string;
}

export interface InstanceStorageConfigStorageConfigKinesisVideoStreamConfig {
    /**
     * The encryption configuration. Documented below.
     */
    encryptionConfig: outputs.connect.InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig;
    /**
     * The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
     */
    prefix: string;
    /**
     * The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.
     */
    retentionPeriodHours: number;
}

export interface InstanceStorageConfigStorageConfigKinesisVideoStreamConfigEncryptionConfig {
    /**
     * The type of encryption. Valid Values: `KMS`.
     */
    encryptionType: string;
    /**
     * The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
     */
    keyId: string;
}

export interface InstanceStorageConfigStorageConfigS3Config {
    /**
     * The S3 bucket name.
     */
    bucketName: string;
    /**
     * The S3 bucket prefix.
     */
    bucketPrefix: string;
    /**
     * The encryption configuration. Documented below.
     */
    encryptionConfig?: outputs.connect.InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig;
}

export interface InstanceStorageConfigStorageConfigS3ConfigEncryptionConfig {
    /**
     * The type of encryption. Valid Values: `KMS`.
     */
    encryptionType: string;
    /**
     * The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
     */
    keyId: string;
}

export interface PhoneNumberStatus {
    /**
     * The status message.
     */
    message: string;
    /**
     * The status of the phone number. Valid Values: `CLAIMED` | `IN_PROGRESS` | `FAILED`.
     */
    status: string;
}

export interface QueueOutboundCallerConfig {
    /**
     * Specifies the caller ID name.
     */
    outboundCallerIdName?: string;
    /**
     * Specifies the caller ID number.
     */
    outboundCallerIdNumberId?: string;
    /**
     * Specifies outbound whisper flow to be used during an outbound call.
     */
    outboundFlowId?: string;
}

export interface QuickConnectQuickConnectConfig {
    /**
     * Specifies the phone configuration of the Quick Connect. This is required only if `quickConnectType` is `PHONE_NUMBER`. The `phoneConfig` block is documented below.
     */
    phoneConfigs?: outputs.connect.QuickConnectQuickConnectConfigPhoneConfig[];
    /**
     * Specifies the queue configuration of the Quick Connect. This is required only if `quickConnectType` is `QUEUE`. The `queueConfig` block is documented below.
     */
    queueConfigs?: outputs.connect.QuickConnectQuickConnectConfigQueueConfig[];
    /**
     * Specifies the configuration type of the quick connect. valid values are `PHONE_NUMBER`, `QUEUE`, `USER`.
     */
    quickConnectType: string;
    /**
     * Specifies the user configuration of the Quick Connect. This is required only if `quickConnectType` is `USER`. The `userConfig` block is documented below.
     */
    userConfigs?: outputs.connect.QuickConnectQuickConnectConfigUserConfig[];
}

export interface QuickConnectQuickConnectConfigPhoneConfig {
    /**
     * Specifies the phone number in in E.164 format.
     */
    phoneNumber: string;
}

export interface QuickConnectQuickConnectConfigQueueConfig {
    /**
     * Specifies the identifier of the contact flow.
     */
    contactFlowId: string;
    /**
     * Specifies the identifier for the queue.
     */
    queueId: string;
}

export interface QuickConnectQuickConnectConfigUserConfig {
    /**
     * Specifies the identifier of the contact flow.
     */
    contactFlowId: string;
    /**
     * Specifies the identifier for the user.
     */
    userId: string;
}

export interface RoutingProfileMediaConcurrency {
    /**
     * Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
     */
    channel: string;
    /**
     * Specifies the number of contacts an agent can have on a channel simultaneously. Valid Range for `VOICE`: Minimum value of 1. Maximum value of 1. Valid Range for `CHAT`: Minimum value of 1. Maximum value of 10. Valid Range for `TASK`: Minimum value of 1. Maximum value of 10.
     */
    concurrency: number;
}

export interface RoutingProfileQueueConfig {
    /**
     * Specifies the channels agents can handle in the Contact Control Panel (CCP) for this routing profile. Valid values are `VOICE`, `CHAT`, `TASK`.
     */
    channel: string;
    /**
     * Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
     */
    delay: number;
    /**
     * Specifies the order in which contacts are to be handled for the queue.
     */
    priority: number;
    /**
     * ARN for the queue.
     */
    queueArn: string;
    /**
     * Specifies the identifier for the queue.
     */
    queueId: string;
    /**
     * Name for the queue.
     */
    queueName: string;
}

export interface RoutingProfileQueueConfigsAssociated {
    /**
     * Specifies the channels that agents can handle in the Contact Control Panel (CCP). Valid values are `VOICE`, `CHAT`, `TASK`.
     */
    channel: string;
    /**
     * Specifies the delay, in seconds, that a contact should be in the queue before they are routed to an available agent
     */
    delay: number;
    /**
     * Specifies the order in which contacts are to be handled for the queue.
     */
    priority: number;
    /**
     * ARN for the queue.
     */
    queueArn: string;
    /**
     * Specifies the identifier for the queue.
     */
    queueId: string;
    /**
     * Name for the queue.
     */
    queueName: string;
}

export interface UserHierarchyGroupHierarchyPath {
    /**
     * A block that defines the details of level five. The level block is documented below.
     */
    levelFives: outputs.connect.UserHierarchyGroupHierarchyPathLevelFife[];
    /**
     * A block that defines the details of level four. The level block is documented below.
     */
    levelFours: outputs.connect.UserHierarchyGroupHierarchyPathLevelFour[];
    /**
     * A block that defines the details of level one. The level block is documented below.
     */
    levelOnes: outputs.connect.UserHierarchyGroupHierarchyPathLevelOne[];
    /**
     * A block that defines the details of level three. The level block is documented below.
     */
    levelThrees: outputs.connect.UserHierarchyGroupHierarchyPathLevelThree[];
    /**
     * A block that defines the details of level two. The level block is documented below.
     */
    levelTwos: outputs.connect.UserHierarchyGroupHierarchyPathLevelTwo[];
}

export interface UserHierarchyGroupHierarchyPathLevelFife {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * The name of the user hierarchy group. Must not be more than 100 characters.
     */
    name: string;
}

export interface UserHierarchyGroupHierarchyPathLevelFour {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * The name of the user hierarchy group. Must not be more than 100 characters.
     */
    name: string;
}

export interface UserHierarchyGroupHierarchyPathLevelOne {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * The name of the user hierarchy group. Must not be more than 100 characters.
     */
    name: string;
}

export interface UserHierarchyGroupHierarchyPathLevelThree {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * The name of the user hierarchy group. Must not be more than 100 characters.
     */
    name: string;
}

export interface UserHierarchyGroupHierarchyPathLevelTwo {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy group.
     */
    arn: string;
    /**
     * The identifier of the hierarchy group.
     */
    id: string;
    /**
     * The name of the user hierarchy group. Must not be more than 100 characters.
     */
    name: string;
}

export interface UserHierarchyStructureHierarchyStructure {
    /**
     * A block that defines the details of level five. The level block is documented below.
     */
    levelFive: outputs.connect.UserHierarchyStructureHierarchyStructureLevelFive;
    /**
     * A block that defines the details of level four. The level block is documented below.
     */
    levelFour: outputs.connect.UserHierarchyStructureHierarchyStructureLevelFour;
    /**
     * A block that defines the details of level one. The level block is documented below.
     */
    levelOne: outputs.connect.UserHierarchyStructureHierarchyStructureLevelOne;
    /**
     * A block that defines the details of level three. The level block is documented below.
     */
    levelThree: outputs.connect.UserHierarchyStructureHierarchyStructureLevelThree;
    /**
     * A block that defines the details of level two. The level block is documented below.
     */
    levelTwo: outputs.connect.UserHierarchyStructureHierarchyStructureLevelTwo;
}

export interface UserHierarchyStructureHierarchyStructureLevelFive {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * The name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface UserHierarchyStructureHierarchyStructureLevelFour {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * The name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface UserHierarchyStructureHierarchyStructureLevelOne {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * The name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface UserHierarchyStructureHierarchyStructureLevelThree {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * The name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface UserHierarchyStructureHierarchyStructureLevelTwo {
    /**
     * The Amazon Resource Name (ARN) of the hierarchy level.
     */
    arn: string;
    /**
     * The identifier of the hierarchy level.
     */
    id: string;
    /**
     * The name of the user hierarchy level. Must not be more than 50 characters.
     */
    name: string;
}

export interface UserIdentityInfo {
    /**
     * The email address. If you are using SAML for identity management and include this parameter, an error is returned. Note that updates to the `email` is supported. From the [UpdateUserIdentityInfo API documentation](https://docs.aws.amazon.com/connect/latest/APIReference/API_UpdateUserIdentityInfo.html) it is strongly recommended to limit who has the ability to invoke `UpdateUserIdentityInfo`. Someone with that ability can change the login credentials of other users by changing their email address. This poses a security risk to your organization. They can change the email address of a user to the attacker's email address, and then reset the password through email. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
     */
    email?: string;
    /**
     * The first name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
     */
    firstName?: string;
    /**
     * The last name. This is required if you are using Amazon Connect or SAML for identity management. Minimum length of 1. Maximum length of 100.
     */
    lastName?: string;
}

export interface UserPhoneConfig {
    /**
     * The After Call Work (ACW) timeout setting, in seconds. Minimum value of 0.
     */
    afterContactWorkTimeLimit?: number;
    /**
     * When Auto-Accept Call is enabled for an available agent, the agent connects to contacts automatically.
     */
    autoAccept?: boolean;
    /**
     * The phone number for the user's desk phone. Required if `phoneType` is set as `DESK_PHONE`.
     */
    deskPhoneNumber?: string;
    /**
     * The phone type. Valid values are `DESK_PHONE` and `SOFT_PHONE`.
     */
    phoneType: string;
}

