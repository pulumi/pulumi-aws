// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ApplicationApplicationConfiguration {
    /**
     * The code location and type parameters for the application.
     */
    applicationCodeConfiguration: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationCodeConfiguration>;
    /**
     * Describes whether snapshots are enabled for a Flink-based application.
     */
    applicationSnapshotConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationSnapshotConfiguration>;
    /**
     * Describes execution properties for a Flink-based application.
     */
    environmentProperties?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationEnvironmentProperties>;
    /**
     * The configuration of a Flink-based application.
     */
    flinkApplicationConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfiguration>;
    /**
     * Describes the starting properties for a Flink-based application.
     */
    runConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationRunConfiguration>;
    /**
     * The configuration of a SQL-based application.
     */
    sqlApplicationConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfiguration>;
    /**
     * The VPC configuration of a Flink-based application.
     */
    vpcConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationVpcConfiguration>;
}

export interface ApplicationApplicationConfigurationApplicationCodeConfiguration {
    /**
     * The location and type of the application code.
     */
    codeContent?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContent>;
    /**
     * Specifies whether the code content is in text or zip format. Valid values: `PLAINTEXT`, `ZIPFILE`.
     */
    codeContentType: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContent {
    /**
     * Information about the Amazon S3 bucket containing the application code.
     */
    s3ContentLocation?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocation>;
    /**
     * The text-format code for the application.
     */
    textContent?: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocation {
    /**
     * The ARN for the S3 bucket containing the application code.
     */
    bucketArn: pulumi.Input<string>;
    /**
     * The file key for the object containing the application code.
     */
    fileKey: pulumi.Input<string>;
    /**
     * The version of the object containing the application code.
     */
    objectVersion?: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationApplicationSnapshotConfiguration {
    /**
     * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
     */
    snapshotsEnabled: pulumi.Input<boolean>;
}

export interface ApplicationApplicationConfigurationEnvironmentProperties {
    /**
     * Describes the execution property groups.
     */
    propertyGroups: pulumi.Input<pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroup>[]>;
}

export interface ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroup {
    /**
     * The key of the application execution property key-value map.
     */
    propertyGroupId: pulumi.Input<string>;
    /**
     * Application execution property key-value map.
     */
    propertyMap: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface ApplicationApplicationConfigurationFlinkApplicationConfiguration {
    /**
     * Describes an application's checkpointing configuration.
     */
    checkpointConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration>;
    /**
     * Describes configuration parameters for CloudWatch logging for an application.
     */
    monitoringConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration>;
    /**
     * Describes parameters for how an application executes multiple tasks simultaneously.
     */
    parallelismConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfiguration>;
}

export interface ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration {
    /**
     * Describes the interval in milliseconds between checkpoint operations.
     */
    checkpointInterval?: pulumi.Input<number>;
    /**
     * Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
     */
    checkpointingEnabled?: pulumi.Input<boolean>;
    /**
     * Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `checkpointingEnabled`, `checkpointInterval`, or `minPauseBetweenCheckpoints` attribute values to be effective. If this attribute is set to `DEFAULT`, the application will always use the following values:
     * * `checkpointingEnabled = true`
     * * `checkpointInterval = 60000`
     * * `minPauseBetweenCheckpoints = 5000`
     */
    configurationType: pulumi.Input<string>;
    /**
     * Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
     */
    minPauseBetweenCheckpoints?: pulumi.Input<number>;
}

export interface ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration {
    /**
     * Describes whether to use the default CloudWatch logging configuration for an application. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `logLevel` or `metricsLevel` attribute values to be effective.
     */
    configurationType: pulumi.Input<string>;
    /**
     * Describes the verbosity of the CloudWatch Logs for an application. Valid values: `DEBUG`, `ERROR`, `INFO`, `WARN`.
     */
    logLevel?: pulumi.Input<string>;
    /**
     * Describes the granularity of the CloudWatch Logs for an application. Valid values: `APPLICATION`, `OPERATOR`, `PARALLELISM`, `TASK`.
     */
    metricsLevel?: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfiguration {
    /**
     * Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
     */
    autoScalingEnabled?: pulumi.Input<boolean>;
    /**
     * Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `autoScalingEnabled`, `parallelism`, or `parallelismPerKpu` attribute values to be effective.
     */
    configurationType: pulumi.Input<string>;
    /**
     * Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform.
     */
    parallelism?: pulumi.Input<number>;
    /**
     * Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.
     */
    parallelismPerKpu?: pulumi.Input<number>;
}

export interface ApplicationApplicationConfigurationRunConfiguration {
    /**
     * The restore behavior of a restarting application.
     */
    applicationRestoreConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfiguration>;
    /**
     * The starting parameters for a Flink-based Kinesis Data Analytics application.
     */
    flinkRunConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationRunConfigurationFlinkRunConfiguration>;
}

export interface ApplicationApplicationConfigurationRunConfigurationApplicationRestoreConfiguration {
    /**
     * Specifies how the application should be restored. Valid values: `RESTORE_FROM_CUSTOM_SNAPSHOT`, `RESTORE_FROM_LATEST_SNAPSHOT`, `SKIP_RESTORE_FROM_SNAPSHOT`.
     */
    applicationRestoreType?: pulumi.Input<string>;
    /**
     * The identifier of an existing snapshot of application state to use to restart an application. The application uses this value if `RESTORE_FROM_CUSTOM_SNAPSHOT` is specified for `applicationRestoreType`.
     */
    snapshotName?: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationRunConfigurationFlinkRunConfiguration {
    /**
     * When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. Default is `false`.
     */
    allowNonRestoredState?: pulumi.Input<boolean>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfiguration {
    /**
     * The input stream used by the application.
     */
    input?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInput>;
    /**
     * The destination streams used by the application.
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutput>[]>;
    /**
     * The reference data source used by the application.
     */
    referenceDataSource?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSource>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInput {
    inAppStreamNames?: pulumi.Input<pulumi.Input<string>[]>;
    inputId?: pulumi.Input<string>;
    /**
     * Describes the number of in-application streams to create.
     */
    inputParallelism?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism>;
    /**
     * The input processing configuration for the input.
     * An input processor transforms records as they are received from the stream, before the application's SQL code executes.
     */
    inputProcessingConfiguration?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration>;
    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
     */
    inputSchema: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema>;
    /**
     * The point at which the application starts processing records from the streaming source.
     */
    inputStartingPositionConfigurations?: pulumi.Input<pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration>[]>;
    /**
     * If the streaming source is a Kinesis Data Firehose delivery stream, identifies the delivery stream's ARN.
     */
    kinesisFirehoseInput?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput>;
    /**
     * If the streaming source is a Kinesis data stream, identifies the stream's Amazon Resource Name (ARN).
     */
    kinesisStreamsInput?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput>;
    /**
     * The name prefix to use when creating an in-application stream.
     */
    namePrefix: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism {
    /**
     * The number of in-application streams to create.
     */
    count?: pulumi.Input<number>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration {
    /**
     * Describes the Lambda function that is used to preprocess the records in the stream before being processed by your application code.
     */
    inputLambdaProcessor: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessor>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessor {
    /**
     * The ARN of the Lambda function that operates on records in the stream.
     */
    resourceArn: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema {
    /**
     * Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
     */
    recordColumns: pulumi.Input<pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumn>[]>;
    /**
     * Specifies the encoding of the records in the streaming source. For example, `UTF-8`.
     */
    recordEncoding?: pulumi.Input<string>;
    /**
     * Specifies the format of the records on the streaming source.
     */
    recordFormat: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormat>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumn {
    /**
     * A reference to the data element in the streaming input or the reference data source.
     */
    mapping?: pulumi.Input<string>;
    /**
     * The name of the column that is created in the in-application input stream or reference table.
     */
    name: pulumi.Input<string>;
    /**
     * The type of column created in the in-application input stream or reference table.
     */
    sqlType: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormat {
    /**
     * Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
     */
    mappingParameters: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParameters>;
    /**
     * The type of record format. Valid values: `CSV`, `JSON`.
     */
    recordFormatType: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParameters {
    /**
     * Provides additional mapping information when the record format uses delimiters (for example, CSV).
     */
    csvMappingParameters?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParameters>;
    /**
     * Provides additional mapping information when JSON is the record format on the streaming source.
     */
    jsonMappingParameters?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParameters>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParameters {
    /**
     * The column delimiter. For example, in a CSV format, a comma (`,`) is the typical column delimiter.
     */
    recordColumnDelimiter: pulumi.Input<string>;
    /**
     * The row delimiter. For example, in a CSV format, `\n` is the typical row delimiter.
     */
    recordRowDelimiter: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParameters {
    /**
     * The path to the top-level parent that contains the records.
     */
    recordRowPath: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration {
    /**
     * The starting position on the stream. Valid values: `LAST_STOPPED_POINT`, `NOW`, `TRIM_HORIZON`.
     */
    inputStartingPosition?: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput {
    /**
     * The ARN of the delivery stream.
     */
    resourceArn: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput {
    /**
     * The ARN of the input Kinesis data stream to read.
     */
    resourceArn: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutput {
    /**
     * Describes the data format when records are written to the destination.
     */
    destinationSchema: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchema>;
    /**
     * Identifies a Kinesis Data Firehose delivery stream as the destination.
     */
    kinesisFirehoseOutput?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutput>;
    /**
     * Identifies a Kinesis data stream as the destination.
     */
    kinesisStreamsOutput?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutput>;
    /**
     * Identifies a Lambda function as the destination.
     */
    lambdaOutput?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutput>;
    /**
     * The name of the in-application stream.
     */
    name: pulumi.Input<string>;
    outputId?: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchema {
    /**
     * Specifies the format of the records on the output stream. Valid values: `CSV`, `JSON`.
     */
    recordFormatType: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutput {
    /**
     * The ARN of the destination delivery stream to write to.
     */
    resourceArn: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutput {
    /**
     * The ARN of the destination Kinesis data stream to write to.
     */
    resourceArn: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutput {
    /**
     * The ARN of the destination Lambda function to write to.
     */
    resourceArn: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSource {
    referenceId?: pulumi.Input<string>;
    /**
     * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
     */
    referenceSchema: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchema>;
    /**
     * Identifies the S3 bucket and object that contains the reference data.
     */
    s3ReferenceDataSource: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSource>;
    /**
     * The name of the in-application table to create.
     */
    tableName: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchema {
    /**
     * Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
     */
    recordColumns: pulumi.Input<pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumn>[]>;
    /**
     * Specifies the encoding of the records in the streaming source. For example, `UTF-8`.
     */
    recordEncoding?: pulumi.Input<string>;
    /**
     * Specifies the format of the records on the streaming source.
     */
    recordFormat: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormat>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumn {
    /**
     * A reference to the data element in the streaming input or the reference data source.
     */
    mapping?: pulumi.Input<string>;
    /**
     * The name of the column that is created in the in-application input stream or reference table.
     */
    name: pulumi.Input<string>;
    /**
     * The type of column created in the in-application input stream or reference table.
     */
    sqlType: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormat {
    /**
     * Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
     */
    mappingParameters: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParameters>;
    /**
     * The type of record format. Valid values: `CSV`, `JSON`.
     */
    recordFormatType: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParameters {
    /**
     * Provides additional mapping information when the record format uses delimiters (for example, CSV).
     */
    csvMappingParameters?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParameters>;
    /**
     * Provides additional mapping information when JSON is the record format on the streaming source.
     */
    jsonMappingParameters?: pulumi.Input<inputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParameters>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParameters {
    /**
     * The column delimiter. For example, in a CSV format, a comma (`,`) is the typical column delimiter.
     */
    recordColumnDelimiter: pulumi.Input<string>;
    /**
     * The row delimiter. For example, in a CSV format, `\n` is the typical row delimiter.
     */
    recordRowDelimiter: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParameters {
    /**
     * The path to the top-level parent that contains the records.
     */
    recordRowPath: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSource {
    /**
     * The ARN for the S3 bucket containing the application code.
     */
    bucketArn: pulumi.Input<string>;
    /**
     * The file key for the object containing the application code.
     */
    fileKey: pulumi.Input<string>;
}

export interface ApplicationApplicationConfigurationVpcConfiguration {
    /**
     * The Security Group IDs used by the VPC configuration.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Subnet IDs used by the VPC configuration.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    vpcConfigurationId?: pulumi.Input<string>;
    vpcId?: pulumi.Input<string>;
}

export interface ApplicationCloudwatchLoggingOptions {
    cloudwatchLoggingOptionId?: pulumi.Input<string>;
    /**
     * The ARN of the CloudWatch log stream to receive application messages.
     */
    logStreamArn: pulumi.Input<string>;
}
