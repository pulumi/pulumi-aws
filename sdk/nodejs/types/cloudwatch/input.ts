// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface EventConnectionAuthParameters {
    /**
     * Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with `basic` and `oauth`. Documented below.
     */
    apiKey?: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersApiKey>;
    /**
     * Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with `apiKey` and `oauth`. Documented below.
     */
    basic?: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersBasic>;
    /**
     * Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     */
    invocationHttpParameters?: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersInvocationHttpParameters>;
    /**
     * Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with `basic` and `apiKey`. Documented below.
     */
    oauth?: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersOauth>;
}

export interface EventConnectionAuthParametersApiKey {
    /**
     * Header Name.
     */
    key: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersBasic {
    /**
     * A password for the authorization. Created and stored in AWS Secrets Manager.
     */
    password: pulumi.Input<string>;
    /**
     * A username for the authorization.
     */
    username: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersInvocationHttpParameters {
    /**
     * Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
     */
    bodies?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersInvocationHttpParametersBody>[]>;
    /**
     * Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
     */
    headers?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersInvocationHttpParametersHeader>[]>;
    /**
     * Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
     */
    queryStrings?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersInvocationHttpParametersQueryString>[]>;
}

export interface EventConnectionAuthParametersInvocationHttpParametersBody {
    /**
     * Specified whether the value is secret.
     */
    isValueSecret?: pulumi.Input<boolean>;
    /**
     * Header Name.
     */
    key?: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value?: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersInvocationHttpParametersHeader {
    /**
     * Specified whether the value is secret.
     */
    isValueSecret?: pulumi.Input<boolean>;
    /**
     * Header Name.
     */
    key?: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value?: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersInvocationHttpParametersQueryString {
    /**
     * Specified whether the value is secret.
     */
    isValueSecret?: pulumi.Input<boolean>;
    /**
     * Header Name.
     */
    key?: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value?: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersOauth {
    /**
     * The URL to the authorization endpoint.
     */
    authorizationEndpoint: pulumi.Input<string>;
    /**
     * Contains the client parameters for OAuth authorization. Contains the following two parameters.
     */
    clientParameters?: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersOauthClientParameters>;
    /**
     * A password for the authorization. Created and stored in AWS Secrets Manager.
     */
    httpMethod: pulumi.Input<string>;
    /**
     * OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
     */
    oauthHttpParameters: pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersOauthOauthHttpParameters>;
}

export interface EventConnectionAuthParametersOauthClientParameters {
    /**
     * The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
     */
    clientId: pulumi.Input<string>;
    /**
     * The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
     */
    clientSecret: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersOauthOauthHttpParameters {
    /**
     * Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
     */
    bodies?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersBody>[]>;
    /**
     * Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
     */
    headers?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersHeader>[]>;
    /**
     * Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
     */
    queryStrings?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventConnectionAuthParametersOauthOauthHttpParametersQueryString>[]>;
}

export interface EventConnectionAuthParametersOauthOauthHttpParametersBody {
    /**
     * Specified whether the value is secret.
     */
    isValueSecret?: pulumi.Input<boolean>;
    /**
     * Header Name.
     */
    key?: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value?: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersOauthOauthHttpParametersHeader {
    /**
     * Specified whether the value is secret.
     */
    isValueSecret?: pulumi.Input<boolean>;
    /**
     * Header Name.
     */
    key?: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value?: pulumi.Input<string>;
}

export interface EventConnectionAuthParametersOauthOauthHttpParametersQueryString {
    /**
     * Specified whether the value is secret.
     */
    isValueSecret?: pulumi.Input<boolean>;
    /**
     * Header Name.
     */
    key?: pulumi.Input<string>;
    /**
     * Header Value. Created and stored in AWS Secrets Manager.
     */
    value?: pulumi.Input<string>;
}

export interface EventPermissionCondition {
    /**
     * Key for the condition. Valid values: `aws:PrincipalOrgID`.
     */
    key: pulumi.Input<string>;
    /**
     * Type of condition. Value values: `StringEquals`.
     */
    type: pulumi.Input<string>;
    /**
     * Value for the key.
     */
    value: pulumi.Input<string>;
}

export interface EventTargetBatchTarget {
    /**
     * The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
     */
    arraySize?: pulumi.Input<number>;
    /**
     * The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
     */
    jobAttempts?: pulumi.Input<number>;
    /**
     * The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
     */
    jobDefinition: pulumi.Input<string>;
    /**
     * The name to use for this execution of the job, if the target is an AWS Batch job.
     */
    jobName: pulumi.Input<string>;
}

export interface EventTargetDeadLetterConfig {
    /**
     * - ARN of the SQS queue specified as the target for the dead-letter queue.
     */
    arn?: pulumi.Input<string>;
}

export interface EventTargetEcsTarget {
    /**
     * The capacity provider strategy to use for the task. If a `capacityProviderStrategy` specified, the `launchType` parameter must be omitted. If no `capacityProviderStrategy` or `launchType` is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
     */
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventTargetEcsTargetCapacityProviderStrategy>[]>;
    /**
     * Specifies whether to enable Amazon ECS managed tags for the task.
     */
    enableEcsManagedTags?: pulumi.Input<boolean>;
    /**
     * Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
     */
    enableExecuteCommand?: pulumi.Input<boolean>;
    /**
     * Specifies an ECS task group for the task. The maximum length is 255 characters.
     */
    group?: pulumi.Input<string>;
    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: `EC2`, `EXTERNAL`, or `FARGATE`.
     */
    launchType?: pulumi.Input<string>;
    /**
     * Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
     */
    networkConfiguration?: pulumi.Input<inputs.cloudwatch.EventTargetEcsTargetNetworkConfiguration>;
    /**
     * An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
     */
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.cloudwatch.EventTargetEcsTargetPlacementConstraint>[]>;
    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
     */
    platformVersion?: pulumi.Input<string>;
    /**
     * Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation.
     */
    propagateTags?: pulumi.Input<string>;
    /**
     * A map of tags to assign to ecs resources.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The number of tasks to create based on the TaskDefinition. The default is 1.
     */
    taskCount?: pulumi.Input<number>;
    /**
     * The ARN of the task definition to use if the event target is an Amazon ECS cluster.
     */
    taskDefinitionArn: pulumi.Input<string>;
}

export interface EventTargetEcsTargetCapacityProviderStrategy {
    /**
     * The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. If no value is specified, the default value of 0 is used.
     */
    base?: pulumi.Input<number>;
    /**
     * Short name of the capacity provider.
     */
    capacityProvider: pulumi.Input<string>;
    /**
     * The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
     */
    weight?: pulumi.Input<number>;
}

export interface EventTargetEcsTargetNetworkConfiguration {
    /**
     * Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
     */
    assignPublicIp?: pulumi.Input<boolean>;
    /**
     * The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
     */
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The subnets associated with the task or service.
     */
    subnets: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EventTargetEcsTargetPlacementConstraint {
    /**
     * Cluster Query Language expression to apply to the constraint. Does not need to be specified for the `distinctInstance` type. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
     */
    expression?: pulumi.Input<string>;
    /**
     * Type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
     */
    type: pulumi.Input<string>;
}

export interface EventTargetHttpTarget {
    /**
     * Enables you to specify HTTP headers to add to the request.
     */
    headerParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The list of values that correspond sequentially to any path variables in your endpoint ARN (for example `arn:aws:execute-api:us-east-1:123456:myapi/*&#47;POST/pets/*`).
     */
    pathParameterValues?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Represents keys/values of query string parameters that are appended to the invoked endpoint.
     */
    queryStringParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface EventTargetInputTransformer {
    /**
     * Key value pairs specified in the form of JSONPath (for example, time = $.time)
     * * You can have as many as 100 key-value pairs.
     * * You must use JSON dot notation, not bracket notation.
     * * The keys can't start with "AWS".
     */
    inputPaths?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.
     */
    inputTemplate: pulumi.Input<string>;
}

export interface EventTargetKinesisTarget {
    /**
     * The JSON path to be extracted from the event and used as the partition key.
     */
    partitionKeyPath?: pulumi.Input<string>;
}

export interface EventTargetRedshiftTarget {
    /**
     * The name of the database.
     */
    database: pulumi.Input<string>;
    /**
     * The database user name.
     */
    dbUser?: pulumi.Input<string>;
    /**
     * The name or ARN of the secret that enables access to the database.
     */
    secretsManagerArn?: pulumi.Input<string>;
    /**
     * The SQL statement text to run.
     */
    sql?: pulumi.Input<string>;
    /**
     * The name of the SQL statement.
     */
    statementName?: pulumi.Input<string>;
    /**
     * Indicates whether to send an event back to EventBridge after the SQL statement runs.
     */
    withEvent?: pulumi.Input<boolean>;
}

export interface EventTargetRetryPolicy {
    /**
     * The age in seconds to continue to make retry attempts.
     */
    maximumEventAgeInSeconds?: pulumi.Input<number>;
    /**
     * maximum number of retry attempts to make before the request fails
     */
    maximumRetryAttempts?: pulumi.Input<number>;
}

export interface EventTargetRunCommandTarget {
    /**
     * Can be either `tag:tag-key` or `InstanceIds`.
     */
    key: pulumi.Input<string>;
    /**
     * If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
     */
    values: pulumi.Input<pulumi.Input<string>[]>;
}

export interface EventTargetSqsTarget {
    /**
     * The FIFO message group ID to use as the target.
     */
    messageGroupId?: pulumi.Input<string>;
}

export interface LogMetricFilterMetricTransformation {
    /**
     * The value to emit when a filter pattern does not match a log event. Conflicts with `dimensions`.
     */
    defaultValue?: pulumi.Input<string>;
    /**
     * Map of fields to use as dimensions for the metric. Up to 3 dimensions are allowed. Conflicts with `defaultValue`.
     */
    dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the CloudWatch metric to which the monitored log information should be published (e.g., `ErrorCount`)
     */
    name: pulumi.Input<string>;
    /**
     * The destination namespace of the CloudWatch metric.
     */
    namespace: pulumi.Input<string>;
    /**
     * The unit to assign to the metric. If you omit this, the unit is set as `None`.
     */
    unit?: pulumi.Input<string>;
    /**
     * What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
     */
    value: pulumi.Input<string>;
}

export interface MetricAlarmMetricQuery {
    /**
     * The ID of the account where the metrics are located, if this is a cross-account alarm.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
     */
    expression?: pulumi.Input<string>;
    /**
     * A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
     */
    id: pulumi.Input<string>;
    /**
     * A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
     */
    label?: pulumi.Input<string>;
    /**
     * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
     */
    metric?: pulumi.Input<inputs.cloudwatch.MetricAlarmMetricQueryMetric>;
    /**
     * Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
     */
    returnData?: pulumi.Input<boolean>;
}

export interface MetricAlarmMetricQueryMetric {
    /**
     * The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     */
    dimensions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name for this metric.
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     */
    metricName: pulumi.Input<string>;
    /**
     * The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
     * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
     */
    namespace?: pulumi.Input<string>;
    /**
     * The period in seconds over which the specified `stat` is applied.
     */
    period: pulumi.Input<number>;
    /**
     * The statistic to apply to this metric.
     * See docs for [supported statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Statistics-definitions.html).
     */
    stat: pulumi.Input<string>;
    /**
     * The unit for this metric.
     */
    unit?: pulumi.Input<string>;
}

export interface MetricStreamExcludeFilter {
    /**
     * The namespace of the metric.
     */
    namespace: pulumi.Input<string>;
}

export interface MetricStreamIncludeFilter {
    /**
     * The namespace of the metric.
     */
    namespace: pulumi.Input<string>;
}

export interface MetricStreamStatisticsConfiguration {
    /**
     * The additional statistics to stream for the metrics listed in `includeMetrics`.
     */
    additionalStatistics: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array that defines the metrics that are to have additional statistics streamed. See details below.
     */
    includeMetrics: pulumi.Input<pulumi.Input<inputs.cloudwatch.MetricStreamStatisticsConfigurationIncludeMetric>[]>;
}

export interface MetricStreamStatisticsConfigurationIncludeMetric {
    /**
     * The name of the metric.
     */
    metricName: pulumi.Input<string>;
    /**
     * The namespace of the metric.
     */
    namespace: pulumi.Input<string>;
}
