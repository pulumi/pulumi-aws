// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ClusterClusterEndpoint {
    /**
     * DNS hostname of the node.
     */
    address: string;
    /**
     * The port number on which each of the nodes accepts connections. Defaults to `6379`.
     */
    port: number;
}

export interface ClusterShard {
    /**
     * Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name: string;
    /**
     * Set of nodes in this shard.
     */
    nodes: outputs.memorydb.ClusterShardNode[];
    /**
     * Number of individual nodes in this shard.
     */
    numNodes: number;
    /**
     * Keyspace for this shard. Example: `0-16383`.
     */
    slots: string;
}

export interface ClusterShardNode {
    /**
     * The Availability Zone in which the node resides.
     */
    availabilityZone: string;
    /**
     * The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
     */
    createTime: string;
    endpoints: outputs.memorydb.ClusterShardNodeEndpoint[];
    /**
     * Name of the cluster. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name: string;
}

export interface ClusterShardNodeEndpoint {
    /**
     * DNS hostname of the node.
     */
    address: string;
    /**
     * The port number on which each of the nodes accepts connections. Defaults to `6379`.
     */
    port: number;
}

export interface GetClusterClusterEndpoint {
    /**
     * DNS hostname of the node.
     */
    address: string;
    /**
     * Port number that this node is listening on.
     */
    port: number;
}

export interface GetClusterShard {
    /**
     * Name of the cluster.
     */
    name: string;
    /**
     * Set of nodes in this shard.
     */
    nodes: outputs.memorydb.GetClusterShardNode[];
    /**
     * Number of individual nodes in this shard.
     */
    numNodes: number;
    /**
     * Keyspace for this shard. Example: `0-16383`.
     */
    slots: string;
}

export interface GetClusterShardNode {
    /**
     * The Availability Zone in which the node resides.
     */
    availabilityZone: string;
    /**
     * The date and time when the node was created. Example: `2022-01-01T21:00:00Z`.
     */
    createTime: string;
    endpoints: outputs.memorydb.GetClusterShardNodeEndpoint[];
    /**
     * Name of the cluster.
     */
    name: string;
}

export interface GetClusterShardNodeEndpoint {
    /**
     * DNS hostname of the node.
     */
    address: string;
    /**
     * Port number that this node is listening on.
     */
    port: number;
}

export interface GetParameterGroupParameter {
    /**
     * Name of the parameter group.
     */
    name: string;
    /**
     * Value of the parameter.
     */
    value: string;
}

export interface GetSnapshotClusterConfiguration {
    /**
     * Description for the cluster.
     */
    description: string;
    /**
     * Version number of the Redis engine used by the cluster.
     */
    engineVersion: string;
    /**
     * The weekly time range during which maintenance on the cluster is performed.
     */
    maintenanceWindow: string;
    /**
     * Name of the snapshot.
     */
    name: string;
    /**
     * Compute and memory capacity of the nodes in the cluster.
     */
    nodeType: string;
    /**
     * Number of shards in the cluster.
     */
    numShards: number;
    /**
     * Name of the parameter group associated with the cluster.
     */
    parameterGroupName: string;
    /**
     * Port number on which the cluster accepts connections.
     */
    port: number;
    /**
     * Number of days for which MemoryDB retains automatic snapshots before deleting them.
     */
    snapshotRetentionLimit: number;
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     */
    snapshotWindow: string;
    /**
     * Name of the subnet group used by the cluster.
     */
    subnetGroupName: string;
    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     */
    topicArn: string;
    /**
     * The VPC in which the cluster exists.
     */
    vpcId: string;
}

export interface GetUserAuthenticationMode {
    /**
     * The number of passwords belonging to the user.
     */
    passwordCount: number;
    /**
     * Whether the user requires a password to authenticate.
     */
    type: string;
}

export interface ParameterGroupParameter {
    /**
     * The name of the parameter.
     */
    name: string;
    /**
     * The value of the parameter.
     */
    value: string;
}

export interface SnapshotClusterConfiguration {
    /**
     * Description for the cluster.
     */
    description: string;
    /**
     * Version number of the Redis engine used by the cluster.
     */
    engineVersion: string;
    /**
     * The weekly time range during which maintenance on the cluster is performed.
     */
    maintenanceWindow: string;
    /**
     * Name of the snapshot. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name: string;
    /**
     * Compute and memory capacity of the nodes in the cluster.
     */
    nodeType: string;
    /**
     * Number of shards in the cluster.
     */
    numShards: number;
    /**
     * Name of the parameter group associated with the cluster.
     */
    parameterGroupName: string;
    /**
     * Port number on which the cluster accepts connections.
     */
    port: number;
    /**
     * Number of days for which MemoryDB retains automatic snapshots before deleting them.
     */
    snapshotRetentionLimit: number;
    /**
     * The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
     */
    snapshotWindow: string;
    /**
     * Name of the subnet group used by the cluster.
     */
    subnetGroupName: string;
    /**
     * ARN of the SNS topic to which cluster notifications are sent.
     */
    topicArn: string;
    /**
     * The VPC in which the cluster exists.
     */
    vpcId: string;
}

export interface UserAuthenticationMode {
    /**
     * The number of passwords belonging to the user.
     */
    passwordCount: number;
    /**
     * The set of passwords used for authentication. You can create up to two passwords for each user.
     */
    passwords: string[];
    /**
     * Indicates whether the user requires a password to authenticate. Must be set to `password`.
     */
    type: string;
}

