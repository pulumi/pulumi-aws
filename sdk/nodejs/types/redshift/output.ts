// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ClusterClusterNode {
    /**
     * Whether the node is a leader node or a compute node
     */
    nodeRole: string;
    /**
     * The private IP address of a node within a cluster
     */
    privateIpAddress: string;
    /**
     * The public IP address of a node within a cluster
     */
    publicIpAddress: string;
}

export interface ClusterLogging {
    /**
     * The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
     * For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
     */
    bucketName: string;
    /**
     * Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
     */
    enable: boolean;
    /**
     * The log destination type. An enum with possible values of `s3` and `cloudwatch`.
     */
    logDestinationType?: string;
    /**
     * The collection of exported log types. Log types include the connection log, user log and user activity log. Required when `logDestinationType` is `cloudwatch`. Valid log types are `connectionlog`, `userlog`, and `useractivitylog`.
     */
    logExports?: string[];
    /**
     * The prefix applied to the log file names.
     */
    s3KeyPrefix: string;
}

export interface ClusterSnapshotCopy {
    /**
     * The destination region that you want to copy snapshots to.
     */
    destinationRegion: string;
    /**
     * The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
     */
    grantName?: string;
    /**
     * The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
     */
    retentionPeriod?: number;
}

export interface EndpointAccessVpcEndpoint {
    /**
     * One or more network interfaces of the endpoint. Also known as an interface endpoint. See details below.
     */
    networkInterfaces: outputs.redshift.EndpointAccessVpcEndpointNetworkInterface[];
    /**
     * The connection endpoint ID for connecting an Amazon Redshift cluster through the proxy.
     */
    vpcEndpointId: string;
    /**
     * The VPC identifier that the endpoint is associated.
     */
    vpcId: string;
}

export interface EndpointAccessVpcEndpointNetworkInterface {
    /**
     * The Availability Zone.
     */
    availabilityZone: string;
    /**
     * The network interface identifier.
     */
    networkInterfaceId: string;
    /**
     * The IPv4 address of the network interface within the subnet.
     */
    privateIpAddress: string;
    /**
     * The subnet identifier.
     */
    subnetId: string;
}

export interface GetClusterClusterNode {
    /**
     * Whether the node is a leader node or a compute node
     */
    nodeRole: string;
    /**
     * Private IP address of a node within a cluster
     */
    privateIpAddress: string;
    /**
     * Public IP address of a node within a cluster
     */
    publicIpAddress: string;
}

export interface ParameterGroupParameter {
    /**
     * The name of the Redshift parameter.
     */
    name: string;
    /**
     * The value of the Redshift parameter.
     */
    value: string;
}

export interface ScheduledActionTargetAction {
    /**
     * An action that runs a `PauseCluster` API operation. Documented below.
     */
    pauseCluster?: outputs.redshift.ScheduledActionTargetActionPauseCluster;
    /**
     * An action that runs a `ResizeCluster` API operation. Documented below.
     */
    resizeCluster?: outputs.redshift.ScheduledActionTargetActionResizeCluster;
    /**
     * An action that runs a `ResumeCluster` API operation. Documented below.
     */
    resumeCluster?: outputs.redshift.ScheduledActionTargetActionResumeCluster;
}

export interface ScheduledActionTargetActionPauseCluster {
    /**
     * The identifier of the cluster to be resumed.
     */
    clusterIdentifier: string;
}

export interface ScheduledActionTargetActionResizeCluster {
    /**
     * A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
     */
    classic?: boolean;
    /**
     * The identifier of the cluster to be resumed.
     */
    clusterIdentifier: string;
    /**
     * The new cluster type for the specified cluster.
     */
    clusterType?: string;
    /**
     * The new node type for the nodes you are adding.
     */
    nodeType?: string;
    /**
     * The new number of nodes for the cluster.
     */
    numberOfNodes?: number;
}

export interface ScheduledActionTargetActionResumeCluster {
    /**
     * The identifier of the cluster to be resumed.
     */
    clusterIdentifier: string;
}

export interface SecurityGroupIngress {
    /**
     * The CIDR block to accept
     */
    cidr?: string;
    /**
     * The name of the security group to authorize
     */
    securityGroupName: string;
    /**
     * The owner Id of the security group provided
     * by `securityGroupName`.
     */
    securityGroupOwnerId: string;
}

