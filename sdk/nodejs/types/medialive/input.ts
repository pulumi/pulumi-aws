// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ChannelCdiInputSpecification {
    /**
     * - Maximum CDI input resolution.
     */
    resolution: pulumi.Input<string>;
}

export interface ChannelDestination {
    /**
     * User-specified id. Ths is used in an output group or an output.
     */
    id: pulumi.Input<string>;
    /**
     * Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
     */
    mediaPackageSettings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelDestinationMediaPackageSetting>[]>;
    /**
     * Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
     */
    multiplexSettings?: pulumi.Input<inputs.medialive.ChannelDestinationMultiplexSettings>;
    /**
     * Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
     */
    settings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelDestinationSetting>[]>;
}

export interface ChannelDestinationMediaPackageSetting {
    /**
     * ID of the channel in MediaPackage that is the destination for this output group.
     */
    channelId: pulumi.Input<string>;
}

export interface ChannelDestinationMultiplexSettings {
    /**
     * The ID of the Multiplex that the encoder is providing output to.
     */
    multiplexId: pulumi.Input<string>;
    /**
     * The program name of the Multiplex program that the encoder is providing output to.
     */
    programName: pulumi.Input<string>;
}

export interface ChannelDestinationSetting {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam?: pulumi.Input<string>;
    /**
     * Stream name RTMP destinations (URLs of type rtmp://)
     */
    streamName?: pulumi.Input<string>;
    /**
     * A URL specifying a destination.
     */
    url?: pulumi.Input<string>;
    /**
     * . Username to be used.
     */
    username?: pulumi.Input<string>;
}

export interface ChannelEncoderSettings {
    /**
     * Audio descriptions for the channel. See Audio Descriptions for more details.
     */
    audioDescriptions?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescription>[]>;
    /**
     * Settings for ad avail blanking. See Avail Blanking for more details.
     */
    availBlanking?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAvailBlanking>;
    /**
     * Output groups for the channel. See Output Groups for more details.
     */
    outputGroups: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroup>[]>;
    /**
     * Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
     */
    timecodeConfig: pulumi.Input<inputs.medialive.ChannelEncoderSettingsTimecodeConfig>;
    /**
     * Video Descriptions. See Video Descriptions for more details.
     */
    videoDescriptions?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsVideoDescription>[]>;
}

export interface ChannelEncoderSettingsAudioDescription {
    /**
     * Advanced audio normalization settings. See Audio Normalization Settings for more details.
     */
    audioNormalizationSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings>;
    /**
     * The name of the audio selector used as the source for this AudioDescription.
     */
    audioSelectorName: pulumi.Input<string>;
    /**
     * Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
     */
    audioType?: pulumi.Input<string>;
    /**
     * Determined how audio type is determined.
     */
    audioTypeControl?: pulumi.Input<string>;
    /**
     * Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
     */
    audioWatermarkSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings>;
    /**
     * The video codec settings. See Video Codec Settings for more details.
     */
    codecSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettings>;
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode?: pulumi.Input<string>;
    languageCodeControl?: pulumi.Input<string>;
    /**
     * The name of the video description.
     */
    name: pulumi.Input<string>;
    remixSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionRemixSettings>;
    /**
     * Stream name RTMP destinations (URLs of type rtmp://)
     */
    streamName?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings {
    /**
     * Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
     */
    algorithm?: pulumi.Input<string>;
    /**
     * Algorithm control for the audio description.
     */
    algorithmControl?: pulumi.Input<string>;
    /**
     * Target LKFS (loudness) to adjust volume to.
     */
    targetLkfs?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings {
    nielsenWatermarksSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings>;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings {
    /**
     * Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
     */
    nielsenCbetSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings>;
    /**
     * Distribution types to assign to the watermarks. Options are `PROGRAM_CONTENT` and `FINAL_DISTRIBUTOR`.
     */
    nielsenDistributionType?: pulumi.Input<string>;
    /**
     * Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
     */
    nielsenNaesIiNwSettings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting>[]>;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings {
    cbetCheckDigitString: pulumi.Input<string>;
    /**
     * Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
     */
    cbetStepaside: pulumi.Input<string>;
    /**
     * CBET source ID to use in the watermark.
     */
    csid: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting {
    checkDigitString: pulumi.Input<string>;
    /**
     * The Nielsen Source ID to include in the watermark.
     */
    sid: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettings {
    /**
     * Aac Settings. See AAC Settings for more details.
     */
    aacSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings>;
    /**
     * Ac3 Settings. See AC3 Settings for more details.
     */
    ac3Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings>;
    /**
     * - Eac3 Atmos Settings. See EAC3 Atmos Settings
     */
    eac3AtmosSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings>;
    /**
     * - Eac3 Settings. See EAC3 Settings
     */
    eac3Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings>;
    mp2Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings>;
    passThroughSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings>;
    wavSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode?: pulumi.Input<string>;
    /**
     * Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
     */
    inputType?: pulumi.Input<string>;
    /**
     * H264 profile.
     */
    profile?: pulumi.Input<string>;
    /**
     * Sets LATM/LOAS AAC output for raw containers.
     */
    rawFormat?: pulumi.Input<string>;
    /**
     * Sample rate in Hz.
     */
    sampleRate?: pulumi.Input<number>;
    /**
     * Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
     */
    spec?: pulumi.Input<string>;
    /**
     * VBR Quality Level - Only used if rateControlMode is VBR.
     */
    vbrQuality?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     */
    bitstreamMode?: pulumi.Input<string>;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode?: pulumi.Input<string>;
    /**
     * Sets the dialnorm for the output.
     */
    dialnorm?: pulumi.Input<number>;
    /**
     * If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
     */
    drcProfile?: pulumi.Input<string>;
    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     */
    lfeFilter?: pulumi.Input<string>;
    /**
     * Metadata control.
     */
    metadataControl?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode?: pulumi.Input<string>;
    /**
     * Sets the dialnorm for the output.
     */
    dialnorm?: pulumi.Input<number>;
    /**
     * Sets the Dolby dynamic range compression profile.
     */
    drcLine?: pulumi.Input<string>;
    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     */
    drcRf?: pulumi.Input<string>;
    /**
     * Height dimensional trim.
     */
    heightTrim?: pulumi.Input<number>;
    /**
     * Surround dimensional trim.
     */
    surroundTrim?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings {
    /**
     * Sets the attenuation control.
     */
    attenuationControl?: pulumi.Input<string>;
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     */
    bitstreamMode?: pulumi.Input<string>;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode?: pulumi.Input<string>;
    dcFilter?: pulumi.Input<string>;
    /**
     * Sets the dialnorm for the output.
     */
    dialnorm?: pulumi.Input<number>;
    /**
     * Sets the Dolby dynamic range compression profile.
     */
    drcLine?: pulumi.Input<string>;
    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     */
    drcRf?: pulumi.Input<string>;
    lfeControl?: pulumi.Input<string>;
    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     */
    lfeFilter?: pulumi.Input<string>;
    loRoCenterMixLevel?: pulumi.Input<number>;
    loRoSurroundMixLevel?: pulumi.Input<number>;
    ltRtCenterMixLevel?: pulumi.Input<number>;
    ltRtSurroundMixLevel?: pulumi.Input<number>;
    /**
     * Metadata control.
     */
    metadataControl?: pulumi.Input<string>;
    passthroughControl?: pulumi.Input<string>;
    phaseControl?: pulumi.Input<string>;
    stereoDownmix?: pulumi.Input<string>;
    surroundExMode?: pulumi.Input<string>;
    surroundMode?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode?: pulumi.Input<string>;
    /**
     * Sample rate in Hz.
     */
    sampleRate?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings {
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings {
    bitDepth?: pulumi.Input<number>;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode?: pulumi.Input<string>;
    /**
     * Sample rate in Hz.
     */
    sampleRate?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionRemixSettings {
    channelMappings: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping>[]>;
    channelsIn?: pulumi.Input<number>;
    channelsOut?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping {
    inputChannelLevels: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel>[]>;
    outputChannel: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel {
    gain: pulumi.Input<number>;
    inputChannel: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsAvailBlanking {
    /**
     * Blanking image to be used. See Avail Blanking Image for more details.
     */
    availBlankingImage?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsAvailBlankingAvailBlankingImage>;
    /**
     * When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
     */
    state?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam?: pulumi.Input<string>;
    /**
     * Path to a file accessible to the live stream.
     */
    uri: pulumi.Input<string>;
    /**
     * . Username to be used.
     */
    username?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroup {
    /**
     * The name of the video description.
     */
    name?: pulumi.Input<string>;
    /**
     * Settings associated with the output group. See Output Group Settings for more details.
     */
    outputGroupSettings: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettings>;
    /**
     * List of outputs. See Outputs for more details.
     */
    outputs: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutput>[]>;
}

export interface ChannelEncoderSettingsOutputGroupOutput {
    /**
     * The names of the audio descriptions used as audio sources for the output.
     */
    audioDescriptionNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The names of the caption descriptions used as audio sources for the output.
     */
    captionDescriptionNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name used to identify an output.
     */
    outputName?: pulumi.Input<string>;
    /**
     * Settings for output. See Output Settings for more details.
     */
    outputSettings: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettings>;
    /**
     * The name of the video description used as audio sources for the output.
     */
    videoDescriptionName?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettings {
    /**
     * Archive group settings. See Archive Group Settings for more details.
     */
    archiveGroupSettings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting>[]>;
    frameCaptureGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings>;
    hlsGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings>;
    /**
     * Media package group settings. See Media Package Group Settings for more details.
     */
    mediaPackageGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings>;
    msSmoothGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings>;
    multiplexGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings>;
    /**
     * RTMP group settings. See RTMP Group Settings for more details.
     */
    rtmpGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings>;
    udpGroupSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting {
    /**
     * Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
     */
    archiveCdnSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings>;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination>;
    /**
     * Number of seconds to write to archive file before closing and starting a new one.
     */
    rolloverInterval?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings {
    /**
     * Archive S3 Settings. See Archive S3 Settings for more details.
     */
    archiveS3Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings {
    /**
     * Specify the canned ACL to apply to each S3 request.
     */
    cannedAcl?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings {
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination>;
    frameCaptureCdnSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings {
    frameCaptureS3Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings {
    /**
     * Specify the canned ACL to apply to each S3 request.
     */
    cannedAcl?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings {
    /**
     * The ad marker type for this output group.
     */
    adMarkers?: pulumi.Input<pulumi.Input<string>[]>;
    baseUrlContent?: pulumi.Input<string>;
    baseUrlContent1?: pulumi.Input<string>;
    baseUrlManifest?: pulumi.Input<string>;
    baseUrlManifest1?: pulumi.Input<string>;
    captionLanguageMappings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping>[]>;
    captionLanguageSetting?: pulumi.Input<string>;
    clientCache?: pulumi.Input<string>;
    codecSpecification?: pulumi.Input<string>;
    constantIv?: pulumi.Input<string>;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination>;
    directoryStructure?: pulumi.Input<string>;
    discontinuityTags?: pulumi.Input<string>;
    encryptionType?: pulumi.Input<string>;
    hlsCdnSettings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting>[]>;
    hlsId3SegmentTagging?: pulumi.Input<string>;
    iframeOnlyPlaylists?: pulumi.Input<string>;
    incompleteSegmentBehavior?: pulumi.Input<string>;
    indexNSegments?: pulumi.Input<number>;
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction?: pulumi.Input<string>;
    ivInManifest?: pulumi.Input<string>;
    ivSource?: pulumi.Input<string>;
    keepSegments?: pulumi.Input<number>;
    keyFormat?: pulumi.Input<string>;
    keyFormatVersions?: pulumi.Input<string>;
    keyProviderSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings>;
    manifestCompression?: pulumi.Input<string>;
    manifestDurationFormat?: pulumi.Input<string>;
    minSegmentLength?: pulumi.Input<number>;
    mode?: pulumi.Input<string>;
    outputSelection?: pulumi.Input<string>;
    programDateTime?: pulumi.Input<string>;
    programDateTimeClock?: pulumi.Input<string>;
    programDateTimePeriod?: pulumi.Input<number>;
    redundantManifest?: pulumi.Input<string>;
    segmentLength?: pulumi.Input<number>;
    segmentsPerSubdirectory?: pulumi.Input<number>;
    streamInfResolution?: pulumi.Input<string>;
    /**
     * Indicates ID3 frame that has the timecode.
     */
    timedMetadataId3Frame?: pulumi.Input<string>;
    timedMetadataId3Period?: pulumi.Input<number>;
    timestampDeltaMilliseconds?: pulumi.Input<number>;
    tsFileMode?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping {
    captionChannel: pulumi.Input<number>;
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode: pulumi.Input<string>;
    languageDescription: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting {
    hlsAkamaiSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings>;
    hlsBasicPutSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings>;
    hlsMediaStoreSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings>;
    hlsS3Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings>;
    hlsWebdavSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: pulumi.Input<number>;
    filecacheDuration?: pulumi.Input<number>;
    httpTransferMode?: pulumi.Input<string>;
    /**
     * Number of retry attempts.
     */
    numRetries?: pulumi.Input<number>;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: pulumi.Input<number>;
    salt?: pulumi.Input<string>;
    token?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: pulumi.Input<number>;
    filecacheDuration?: pulumi.Input<number>;
    /**
     * Number of retry attempts.
     */
    numRetries?: pulumi.Input<number>;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: pulumi.Input<number>;
    filecacheDuration?: pulumi.Input<number>;
    mediaStoreStorageClass?: pulumi.Input<string>;
    /**
     * Number of retry attempts.
     */
    numRetries?: pulumi.Input<number>;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings {
    /**
     * Specify the canned ACL to apply to each S3 request.
     */
    cannedAcl?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: pulumi.Input<number>;
    filecacheDuration?: pulumi.Input<number>;
    httpTransferMode?: pulumi.Input<string>;
    /**
     * Number of retry attempts.
     */
    numRetries?: pulumi.Input<number>;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings {
    staticKeySettings?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting>[]>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting {
    keyProviderServer?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer>;
    staticKeyValue: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam?: pulumi.Input<string>;
    /**
     * Path to a file accessible to the live stream.
     */
    uri: pulumi.Input<string>;
    /**
     * . Username to be used.
     */
    username?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings {
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings {
    acquisitionPointId?: pulumi.Input<string>;
    audioOnlyTimecodecControl?: pulumi.Input<string>;
    /**
     * Setting to allow self signed or verified RTMP certificates.
     */
    certificateMode?: pulumi.Input<string>;
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: pulumi.Input<number>;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination>;
    eventId?: pulumi.Input<number>;
    eventIdMode?: pulumi.Input<string>;
    eventStopBehavior?: pulumi.Input<string>;
    filecacheDuration?: pulumi.Input<number>;
    fragmentLength?: pulumi.Input<number>;
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction?: pulumi.Input<string>;
    /**
     * Number of retry attempts.
     */
    numRetries?: pulumi.Input<number>;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: pulumi.Input<number>;
    segmentationMode?: pulumi.Input<string>;
    sendDelayMs?: pulumi.Input<number>;
    sparseTrackType?: pulumi.Input<string>;
    streamManifestBehavior?: pulumi.Input<string>;
    timestampOffset?: pulumi.Input<string>;
    timestampOffsetMode?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings {
    /**
     * The ad marker type for this output group.
     */
    adMarkers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Authentication scheme to use when connecting with CDN.
     */
    authenticationScheme?: pulumi.Input<string>;
    /**
     * Controls behavior when content cache fills up.
     */
    cacheFullBehavior?: pulumi.Input<string>;
    /**
     * Cache length in seconds, is used to calculate buffer size.
     */
    cacheLength?: pulumi.Input<number>;
    /**
     * Controls the types of data that passes to onCaptionInfo outputs.
     */
    captionData?: pulumi.Input<string>;
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction?: pulumi.Input<string>;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings {
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction?: pulumi.Input<string>;
    /**
     * Indicates ID3 frame that has the timecode.
     */
    timedMetadataId3Frame?: pulumi.Input<string>;
    timedMetadataId3Period?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettings {
    /**
     * Archive output settings. See Archive Output Settings for more details.
     */
    archiveOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings>;
    frameCaptureOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings>;
    hlsOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings>;
    /**
     * Media package output settings. This can be set as an empty block.
     */
    mediaPackageOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings>;
    msSmoothOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings>;
    /**
     * Multiplex output settings. See Multiplex Output Settings for more details.
     */
    multiplexOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings>;
    /**
     * RTMP output settings. See RTMP Output Settings for more details.
     */
    rtmpOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings>;
    /**
     * UDP output settings. See UDP Output Settings for more details
     */
    udpOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings {
    /**
     * UDP container settings. See Container Settings for more details.
     */
    containerSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings>;
    /**
     * Output file extension.
     */
    extension?: pulumi.Input<string>;
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings {
    /**
     * M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
     */
    m2tsSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings>;
    /**
     * Raw Settings. This can be set as an empty block.
     */
    rawSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings {
    absentInputAudioBehavior?: pulumi.Input<string>;
    arib?: pulumi.Input<string>;
    aribCaptionsPid?: pulumi.Input<string>;
    aribCaptionsPidControl?: pulumi.Input<string>;
    audioBufferModel?: pulumi.Input<string>;
    audioFramesPerPes?: pulumi.Input<number>;
    audioPids?: pulumi.Input<string>;
    audioStreamType?: pulumi.Input<string>;
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    bufferModel?: pulumi.Input<string>;
    ccDescriptor?: pulumi.Input<string>;
    dvbNitSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>;
    dvbSdtSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>;
    dvbSubPids?: pulumi.Input<string>;
    dvbTdtSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>;
    dvbTeletextPid?: pulumi.Input<string>;
    ebif?: pulumi.Input<string>;
    ebpAudioInterval?: pulumi.Input<string>;
    ebpLookaheadMs?: pulumi.Input<number>;
    ebpPlacement?: pulumi.Input<string>;
    ecmPid?: pulumi.Input<string>;
    esRateInPes?: pulumi.Input<string>;
    etvPlatformPid?: pulumi.Input<string>;
    etvSignalPid?: pulumi.Input<string>;
    fragmentTime?: pulumi.Input<number>;
    klv?: pulumi.Input<string>;
    klvDataPids?: pulumi.Input<string>;
    nielsenId3Behavior?: pulumi.Input<string>;
    nullPacketBitrate?: pulumi.Input<number>;
    patInterval?: pulumi.Input<number>;
    pcrControl?: pulumi.Input<string>;
    pcrPeriod?: pulumi.Input<number>;
    pcrPid?: pulumi.Input<string>;
    pmtInterval?: pulumi.Input<number>;
    pmtPid?: pulumi.Input<string>;
    programNum?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    scte27Pids?: pulumi.Input<string>;
    scte35Control?: pulumi.Input<string>;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid?: pulumi.Input<string>;
    segmentationMarkers?: pulumi.Input<string>;
    segmentationStyle?: pulumi.Input<string>;
    segmentationTime?: pulumi.Input<number>;
    timedMetadataBehavior?: pulumi.Input<string>;
    timedMetadataPid?: pulumi.Input<string>;
    transportStreamId?: pulumi.Input<number>;
    videoPid?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings {
    networkId: pulumi.Input<number>;
    networkName: pulumi.Input<string>;
    repInterval?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings {
    outputSdt?: pulumi.Input<string>;
    repInterval?: pulumi.Input<number>;
    serviceName?: pulumi.Input<string>;
    serviceProviderName?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings {
    repInterval?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings {
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings {
    h265PackagingType?: pulumi.Input<string>;
    hlsSettings: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings>;
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier?: pulumi.Input<string>;
    segmentModifier?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings {
    audioOnlyHlsSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings>;
    fmp4HlsSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings>;
    frameCaptureHlsSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings>;
    standardHlsSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings {
    audioGroupId?: pulumi.Input<string>;
    audioOnlyImage?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage>;
    audioTrackType?: pulumi.Input<string>;
    segmentType?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam?: pulumi.Input<string>;
    /**
     * Path to a file accessible to the live stream.
     */
    uri: pulumi.Input<string>;
    /**
     * . Username to be used.
     */
    username?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings {
    audioRenditionSets?: pulumi.Input<string>;
    nielsenId3Behavior?: pulumi.Input<string>;
    timedMetadataBehavior?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings {
    audioRenditionSets?: pulumi.Input<string>;
    m3u8Settings: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings {
    audioFramesPerPes?: pulumi.Input<number>;
    audioPids?: pulumi.Input<string>;
    ecmPid?: pulumi.Input<string>;
    nielsenId3Behavior?: pulumi.Input<string>;
    patInterval?: pulumi.Input<number>;
    pcrControl?: pulumi.Input<string>;
    pcrPeriod?: pulumi.Input<number>;
    pcrPid?: pulumi.Input<string>;
    pmtInterval?: pulumi.Input<number>;
    pmtPid?: pulumi.Input<string>;
    programNum?: pulumi.Input<number>;
    scte35Behavior?: pulumi.Input<string>;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid?: pulumi.Input<string>;
    timedMetadataBehavior?: pulumi.Input<string>;
    timedMetadataPid?: pulumi.Input<string>;
    transportStreamId?: pulumi.Input<number>;
    videoPid?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings {
    h265PackagingType?: pulumi.Input<string>;
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings {
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings {
    certficateMode?: pulumi.Input<string>;
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: pulumi.Input<number>;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination>;
    /**
     * Number of retry attempts.
     */
    numRetries?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings {
    /**
     * UDP output buffering in milliseconds.
     */
    bufferMsec?: pulumi.Input<number>;
    /**
     * UDP container settings. See Container Settings for more details.
     */
    containerSettings: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings>;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination>;
    fecOutputSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings {
    /**
     * M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
     */
    m2tsSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings {
    absentInputAudioBehavior?: pulumi.Input<string>;
    arib?: pulumi.Input<string>;
    aribCaptionsPid?: pulumi.Input<string>;
    aribCaptionsPidControl?: pulumi.Input<string>;
    audioBufferModel?: pulumi.Input<string>;
    audioFramesPerPes?: pulumi.Input<number>;
    audioPids?: pulumi.Input<string>;
    audioStreamType?: pulumi.Input<string>;
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    bufferModel?: pulumi.Input<string>;
    ccDescriptor?: pulumi.Input<string>;
    dvbNitSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings>;
    dvbSdtSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings>;
    dvbSubPids?: pulumi.Input<string>;
    dvbTdtSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings>;
    dvbTeletextPid?: pulumi.Input<string>;
    ebif?: pulumi.Input<string>;
    ebpAudioInterval?: pulumi.Input<string>;
    ebpLookaheadMs?: pulumi.Input<number>;
    ebpPlacement?: pulumi.Input<string>;
    ecmPid?: pulumi.Input<string>;
    esRateInPes?: pulumi.Input<string>;
    etvPlatformPid?: pulumi.Input<string>;
    etvSignalPid?: pulumi.Input<string>;
    fragmentTime?: pulumi.Input<number>;
    klv?: pulumi.Input<string>;
    klvDataPids?: pulumi.Input<string>;
    nielsenId3Behavior?: pulumi.Input<string>;
    nullPacketBitrate?: pulumi.Input<number>;
    patInterval?: pulumi.Input<number>;
    pcrControl?: pulumi.Input<string>;
    pcrPeriod?: pulumi.Input<number>;
    pcrPid?: pulumi.Input<string>;
    pmtInterval?: pulumi.Input<number>;
    pmtPid?: pulumi.Input<string>;
    programNum?: pulumi.Input<number>;
    rateMode?: pulumi.Input<string>;
    scte27Pids?: pulumi.Input<string>;
    scte35Control?: pulumi.Input<string>;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid?: pulumi.Input<string>;
    segmentationMarkers?: pulumi.Input<string>;
    segmentationStyle?: pulumi.Input<string>;
    segmentationTime?: pulumi.Input<number>;
    timedMetadataBehavior?: pulumi.Input<string>;
    timedMetadataPid?: pulumi.Input<string>;
    transportStreamId?: pulumi.Input<number>;
    videoPid?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings {
    networkId: pulumi.Input<number>;
    networkName: pulumi.Input<string>;
    repInterval?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings {
    outputSdt?: pulumi.Input<string>;
    repInterval?: pulumi.Input<number>;
    serviceName?: pulumi.Input<string>;
    serviceProviderName?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings {
    repInterval?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings {
    /**
     * The height of the FEC protection matrix.
     */
    columnDepth?: pulumi.Input<number>;
    /**
     * Enables column oly or column and row based FEC.
     */
    includeFec?: pulumi.Input<string>;
    /**
     * The width of the FEC protection matrix.
     */
    rowLength?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsTimecodeConfig {
    /**
     * The source for the timecode that will be associated with the events outputs.
     */
    source: pulumi.Input<string>;
    /**
     * Threshold in frames beyond which output timecode is resynchronized to the input timecode.
     */
    syncThreshold?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsVideoDescription {
    /**
     * The video codec settings. See Video Codec Settings for more details.
     */
    codecSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettings>;
    /**
     * Output video height in pixels.
     */
    height?: pulumi.Input<number>;
    /**
     * The name of the video description.
     */
    name: pulumi.Input<string>;
    /**
     * Indicate how to respond to the AFD values that might be in the input video.
     */
    respondToAfd?: pulumi.Input<string>;
    /**
     * Behavior on how to scale.
     */
    scalingBehavior?: pulumi.Input<string>;
    /**
     * Changes the strength of the anti-alias filter used for scaling.
     */
    sharpness?: pulumi.Input<number>;
    /**
     * Output video width in pixels.
     */
    width?: pulumi.Input<number>;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettings {
    /**
     * Frame capture settings. See Frame Capture Settings for more details.
     */
    frameCaptureSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings>;
    /**
     * H264 settings. See H264 Settings for more details.
     */
    h264Settings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings>;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings {
    /**
     * The frequency at which to capture frames for inclusion in the output.
     */
    captureInterval?: pulumi.Input<number>;
    /**
     * Unit for the frame capture interval.
     */
    captureIntervalUnits?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings {
    /**
     * Enables or disables adaptive quantization.
     */
    adaptiveQuantization?: pulumi.Input<string>;
    /**
     * Indicates that AFD values will be written into the output stream.
     */
    afdSignaling?: pulumi.Input<string>;
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: pulumi.Input<number>;
    bufFillPct?: pulumi.Input<number>;
    /**
     * Size of buffer in bits.
     */
    bufSize?: pulumi.Input<number>;
    /**
     * Includes color space metadata in the output.
     */
    colorMetadata?: pulumi.Input<string>;
    /**
     * Entropy encoding mode.
     */
    entropyEncoding?: pulumi.Input<string>;
    /**
     * Filters to apply to an encode. See H264 Filter Settings for more details.
     */
    filterSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings>;
    /**
     * Four bit AFD value to write on all frames of video in the output stream.
     */
    fixedAfd?: pulumi.Input<string>;
    flickerAq?: pulumi.Input<string>;
    /**
     * Controls whether coding is performed on a field basis or on a frame basis.
     */
    forceFieldPictures?: pulumi.Input<string>;
    /**
     * Indicates how the output video frame rate is specified.
     */
    framerateControl?: pulumi.Input<string>;
    /**
     * Framerate denominator.
     */
    framerateDenominator?: pulumi.Input<number>;
    /**
     * Framerate numerator.
     */
    framerateNumerator?: pulumi.Input<number>;
    /**
     * GOP-B reference.
     */
    gopBReference?: pulumi.Input<string>;
    /**
     * Frequency of closed GOPs.
     */
    gopClosedCadence?: pulumi.Input<number>;
    /**
     * Number of B-frames between reference frames.
     */
    gopNumBFrames?: pulumi.Input<number>;
    /**
     * GOP size in units of either frames of seconds per `gopSizeUnits`.
     */
    gopSize?: pulumi.Input<number>;
    /**
     * Indicates if the `gopSize` is specified in frames or seconds.
     */
    gopSizeUnits?: pulumi.Input<string>;
    /**
     * H264 level.
     */
    level?: pulumi.Input<string>;
    /**
     * Amount of lookahead.
     */
    lookAheadRateControl?: pulumi.Input<string>;
    /**
     * Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
     */
    maxBitrate?: pulumi.Input<number>;
    minIInterval?: pulumi.Input<number>;
    /**
     * Number of reference frames to use.
     */
    numRefFrames?: pulumi.Input<number>;
    /**
     * Indicates how the output pixel aspect ratio is specified.
     */
    parControl?: pulumi.Input<string>;
    /**
     * Pixel Aspect Ratio denominator.
     */
    parDenominator?: pulumi.Input<number>;
    /**
     * Pixel Aspect Ratio numerator.
     */
    parNumerator?: pulumi.Input<number>;
    /**
     * H264 profile.
     */
    profile?: pulumi.Input<string>;
    /**
     * Quality level.
     */
    qualityLevel?: pulumi.Input<string>;
    /**
     * Controls the target quality for the video encode.
     */
    qvbrQualityLevel?: pulumi.Input<number>;
    /**
     * Rate control mode.
     */
    rateControlMode?: pulumi.Input<string>;
    /**
     * Sets the scan type of the output.
     */
    scanType?: pulumi.Input<string>;
    /**
     * Scene change detection.
     */
    sceneChangeDetect?: pulumi.Input<string>;
    /**
     * Number of slices per picture.
     */
    slices?: pulumi.Input<number>;
    /**
     * Softness.
     */
    softness?: pulumi.Input<number>;
    /**
     * Makes adjustments within each frame based on spatial variation of content complexity.
     */
    spatialAq?: pulumi.Input<string>;
    /**
     * Subgop length.
     */
    subgopLength?: pulumi.Input<string>;
    /**
     * Produces a bitstream compliant with SMPTE RP-2027.
     */
    syntax?: pulumi.Input<string>;
    /**
     * Makes adjustments within each frame based on temporal variation of content complexity.
     */
    temporalAq?: pulumi.Input<string>;
    /**
     * Determines how timecodes should be inserted into the video elementary stream.
     */
    timecodeInsertion?: pulumi.Input<string>;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings {
    /**
     * Temporal filter settings. See Temporal Filter Settings
     */
    temporalFilterSettings?: pulumi.Input<inputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings>;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings {
    /**
     * Post filter sharpening.
     */
    postFilterSharpening?: pulumi.Input<string>;
    /**
     * Filter strength.
     */
    strength?: pulumi.Input<string>;
}

export interface ChannelInputAttachment {
    automaticInputFailoverSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettings>;
    /**
     * User-specified name for the attachment.
     */
    inputAttachmentName: pulumi.Input<string>;
    /**
     * The ID of the input.
     */
    inputId: pulumi.Input<string>;
    /**
     * Settings of an input. See Input Settings for more details
     */
    inputSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettings>;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettings {
    errorClearTimeMsec?: pulumi.Input<number>;
    failoverConditions?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition>[]>;
    inputPreference?: pulumi.Input<string>;
    secondaryInputId: pulumi.Input<string>;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition {
    failoverConditionSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings>;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings {
    audioSilenceSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings>;
    inputLossSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings>;
    videoBlackSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings>;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings {
    /**
     * The name of the audio selector used as the source for this AudioDescription.
     */
    audioSelectorName: pulumi.Input<string>;
    audioSilenceThresholdMsec?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings {
    inputLossThresholdMsec?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings {
    blackDetectThreshold?: pulumi.Input<number>;
    videoBlackThresholdMsec?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettings {
    audioSelectors?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelector>[]>;
    captionSelectors?: pulumi.Input<pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelector>[]>;
    /**
     * Enable or disable the deblock filter when filtering.
     */
    deblockFilter?: pulumi.Input<string>;
    /**
     * Enable or disable the denoise filter when filtering.
     */
    denoiseFilter?: pulumi.Input<string>;
    /**
     * Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
     */
    filterStrength?: pulumi.Input<number>;
    /**
     * Turns on the filter for the input.
     */
    inputFilter?: pulumi.Input<string>;
    /**
     * Input settings. See Network Input Settings for more details.
     */
    networkInputSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsNetworkInputSettings>;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid?: pulumi.Input<number>;
    /**
     * Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
     */
    smpte2038DataPreference?: pulumi.Input<string>;
    /**
     * Loop input if it is a file.
     */
    sourceEndBehavior?: pulumi.Input<string>;
    videoSelector?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsVideoSelector>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelector {
    /**
     * The name of the video description.
     */
    name: pulumi.Input<string>;
    selectorSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings {
    audioHlsRenditionSelection?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection>;
    audioLanguageSelection?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection>;
    audioPidSelection?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection>;
    audioTrackSelection?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection {
    groupId: pulumi.Input<string>;
    /**
     * The name of the video description.
     */
    name: pulumi.Input<string>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection {
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode: pulumi.Input<string>;
    languageSelectionPolicy?: pulumi.Input<string>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection {
    pid: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection {
    tracks: pulumi.Input<pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack>[]>;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack {
    track: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelector {
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode?: pulumi.Input<string>;
    /**
     * The name of the video description.
     */
    name: pulumi.Input<string>;
    selectorSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings {
    ancillarySourceSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings>;
    dvbTdtSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings>;
    embeddedSourceSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings>;
    scte20SourceSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings>;
    scte27SourceSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings>;
    teletextSourceSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings {
    sourceAncillaryChannelNumber?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings {
    ocrLanguage?: pulumi.Input<string>;
    pid?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings {
    convert608To708?: pulumi.Input<string>;
    scte20Detection?: pulumi.Input<string>;
    source608ChannelNumber?: pulumi.Input<number>;
    source608TrackNumber?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings {
    convert608To708?: pulumi.Input<string>;
    source608ChannelNumber?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings {
    ocrLanguage?: pulumi.Input<string>;
    pid?: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings {
    outputRectangle?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle>;
    pageNumber?: pulumi.Input<string>;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle {
    /**
     * Output video height in pixels.
     */
    height: pulumi.Input<number>;
    leftOffset: pulumi.Input<number>;
    topOffset: pulumi.Input<number>;
    /**
     * Output video width in pixels.
     */
    width: pulumi.Input<number>;
}

export interface ChannelInputAttachmentInputSettingsNetworkInputSettings {
    /**
     * Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
     */
    hlsInputSettings?: pulumi.Input<inputs.medialive.ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings>;
    /**
     * Check HTTPS server certificates.
     */
    serverValidation?: pulumi.Input<string>;
}

export interface ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings {
    /**
     * The bitrate is specified in bits per second, as in an HLS manifest.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Buffer segments.
     */
    bufferSegments?: pulumi.Input<number>;
    /**
     * The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
     */
    retries?: pulumi.Input<number>;
    /**
     * The number of seconds between retries when an attempt to read a manifest or segment fails.
     */
    retryInterval?: pulumi.Input<number>;
    scte35Source?: pulumi.Input<string>;
}

export interface ChannelInputAttachmentInputSettingsVideoSelector {
    colorSpace?: pulumi.Input<string>;
    colorSpaceUsage?: pulumi.Input<string>;
}

export interface ChannelInputSpecification {
    codec: pulumi.Input<string>;
    inputResolution: pulumi.Input<string>;
    maximumBitrate: pulumi.Input<string>;
}

export interface ChannelMaintenance {
    /**
     * The day of the week to use for maintenance.
     */
    maintenanceDay: pulumi.Input<string>;
    /**
     * The hour maintenance will start.
     */
    maintenanceStartTime: pulumi.Input<string>;
}

export interface ChannelVpc {
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    publicAddressAllocationIds: pulumi.Input<pulumi.Input<string>[]>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface InputDestination {
    /**
     * A unique name for the location the RTMP stream is being pushed to.
     */
    streamName: pulumi.Input<string>;
}

export interface InputInputDevice {
    /**
     * The unique ID for the device.
     */
    id: pulumi.Input<string>;
}

export interface InputMediaConnectFlow {
    /**
     * The ARN of the MediaConnect Flow
     */
    flowArn: pulumi.Input<string>;
}

export interface InputSecurityGroupWhitelistRule {
    /**
     * The IPv4 CIDR that's whitelisted.
     */
    cidr: pulumi.Input<string>;
}

export interface InputSource {
    /**
     * The key used to extract the password from EC2 Parameter store.
     */
    passwordParam: pulumi.Input<string>;
    /**
     * The URL where the stream is pulled from.
     */
    url: pulumi.Input<string>;
    /**
     * The username for the input source.
     */
    username: pulumi.Input<string>;
}

export interface InputVpc {
    /**
     * A list of up to 5 EC2 VPC security group IDs to attach to the Input.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of 2 VPC subnet IDs from the same VPC.
     */
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
}

export interface MultiplexMultiplexSettings {
    /**
     * Maximum video buffer delay.
     */
    maximumVideoBufferDelayMilliseconds?: pulumi.Input<number>;
    /**
     * Transport stream bit rate.
     */
    transportStreamBitrate: pulumi.Input<number>;
    /**
     * Unique ID for each multiplex.
     */
    transportStreamId: pulumi.Input<number>;
    /**
     * Transport stream reserved bit rate.
     */
    transportStreamReservedBitrate?: pulumi.Input<number>;
}
