// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ChannelCdiInputSpecification {
    /**
     * - Maximum CDI input resolution.
     */
    resolution: string;
}

export interface ChannelDestination {
    /**
     * User-specified id. Ths is used in an output group or an output.
     */
    id: string;
    /**
     * Destination settings for a MediaPackage output; one destination for both encoders. See Media Package Settings for more details.
     */
    mediaPackageSettings?: outputs.medialive.ChannelDestinationMediaPackageSetting[];
    /**
     * Destination settings for a Multiplex output; one destination for both encoders. See Multiplex Settings for more details.
     */
    multiplexSettings?: outputs.medialive.ChannelDestinationMultiplexSettings;
    /**
     * Destination settings for a standard output; one destination for each redundant encoder. See Settings for more details.
     */
    settings?: outputs.medialive.ChannelDestinationSetting[];
}

export interface ChannelDestinationMediaPackageSetting {
    /**
     * ID of the channel in MediaPackage that is the destination for this output group.
     */
    channelId: string;
}

export interface ChannelDestinationMultiplexSettings {
    /**
     * The ID of the Multiplex that the encoder is providing output to.
     */
    multiplexId: string;
    /**
     * The program name of the Multiplex program that the encoder is providing output to.
     */
    programName: string;
}

export interface ChannelDestinationSetting {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam?: string;
    /**
     * Stream name RTMP destinations (URLs of type rtmp://)
     */
    streamName?: string;
    /**
     * A URL specifying a destination.
     */
    url?: string;
    /**
     * . Username to be used.
     */
    username?: string;
}

export interface ChannelEncoderSettings {
    /**
     * Audio descriptions for the channel. See Audio Descriptions for more details.
     */
    audioDescriptions?: outputs.medialive.ChannelEncoderSettingsAudioDescription[];
    /**
     * Settings for ad avail blanking. See Avail Blanking for more details.
     */
    availBlanking: outputs.medialive.ChannelEncoderSettingsAvailBlanking;
    /**
     * Output groups for the channel. See Output Groups for more details.
     */
    outputGroups: outputs.medialive.ChannelEncoderSettingsOutputGroup[];
    /**
     * Contains settings used to acquire and adjust timecode information from inputs. See Timecode Config for more details.
     */
    timecodeConfig: outputs.medialive.ChannelEncoderSettingsTimecodeConfig;
    /**
     * Video Descriptions. See Video Descriptions for more details.
     */
    videoDescriptions: outputs.medialive.ChannelEncoderSettingsVideoDescription[];
}

export interface ChannelEncoderSettingsAudioDescription {
    /**
     * Advanced audio normalization settings. See Audio Normalization Settings for more details.
     */
    audioNormalizationSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings;
    /**
     * The name of the audio selector used as the source for this AudioDescription.
     */
    audioSelectorName: string;
    /**
     * Applies only if audioTypeControl is useConfigured. The values for audioType are defined in ISO-IEC 13818-1.
     */
    audioType: string;
    /**
     * Determined how audio type is determined.
     */
    audioTypeControl: string;
    /**
     * Settings to configure one or more solutions that insert audio watermarks in the audio encode. See Audio Watermark Settings for more details.
     */
    audioWatermarkSettings?: outputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings;
    /**
     * The video codec settings. See Video Codec Settings for more details.
     */
    codecSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettings;
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode: string;
    languageCodeControl: string;
    /**
     * The name of the video description.
     */
    name: string;
    remixSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionRemixSettings;
    /**
     * Stream name RTMP destinations (URLs of type rtmp://)
     */
    streamName: string;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioNormalizationSettings {
    /**
     * Audio normalization algorithm to use. itu17701 conforms to the CALM Act specification, itu17702 to the EBU R-128 specification.
     */
    algorithm: string;
    /**
     * Algorithm control for the audio description.
     */
    algorithmControl: string;
    /**
     * Target LKFS (loudness) to adjust volume to.
     */
    targetLkfs: number;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettings {
    nielsenWatermarksSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettings {
    /**
     * Used to insert watermarks of type Nielsen CBET. See Nielsen CBET Settings for more details.
     */
    nielsenCbetSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings;
    /**
     * Distribution types to assign to the watermarks. Options are `PROGRAM_CONTENT` and `FINAL_DISTRIBUTOR`.
     */
    nielsenDistributionType: string;
    /**
     * Used to insert watermarks of type Nielsen NAES, II (N2) and Nielsen NAES VI (NW). See Nielsen NAES II NW Settings for more details.
     */
    nielsenNaesIiNwSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting[];
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings {
    cbetCheckDigitString: string;
    /**
     * Determines the method of CBET insertion mode when prior encoding is detected on the same layer.
     */
    cbetStepaside: string;
    /**
     * CBET source ID to use in the watermark.
     */
    csid: string;
}

export interface ChannelEncoderSettingsAudioDescriptionAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSetting {
    checkDigitString: string;
    /**
     * The Nielsen Source ID to include in the watermark.
     */
    sid: number;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettings {
    /**
     * Aac Settings. See AAC Settings for more details.
     */
    aacSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings;
    /**
     * Ac3 Settings. See AC3 Settings for more details.
     */
    ac3Settings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings;
    /**
     * - Eac3 Atmos Settings. See EAC3 Atmos Settings
     */
    eac3AtmosSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings;
    /**
     * - Eac3 Settings. See EAC3 Settings
     */
    eac3Settings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings;
    mp2Settings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings;
    passThroughSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings;
    wavSettings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsAacSettings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate: number;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode: string;
    /**
     * Set to "broadcasterMixedAd" when input contains pre-mixed main audio + AD (narration) as a stereo pair.
     */
    inputType: string;
    /**
     * H264 profile.
     */
    profile: string;
    /**
     * Sets LATM/LOAS AAC output for raw containers.
     */
    rawFormat: string;
    /**
     * Sample rate in Hz.
     */
    sampleRate: number;
    /**
     * Use MPEG-2 AAC audio instead of MPEG-4 AAC audio for raw or MPEG-2 Transport Stream containers.
     */
    spec: string;
    /**
     * VBR Quality Level - Only used if rateControlMode is VBR.
     */
    vbrQuality: string;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsAc3Settings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate: number;
    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     */
    bitstreamMode: string;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode: string;
    /**
     * Sets the dialnorm for the output.
     */
    dialnorm: number;
    /**
     * If set to filmStandard, adds dynamic range compression signaling to the output bitstream as defined in the Dolby Digital specification.
     */
    drcProfile: string;
    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     */
    lfeFilter: string;
    /**
     * Metadata control.
     */
    metadataControl: string;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3AtmosSettings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate: number;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode: string;
    /**
     * Sets the dialnorm for the output.
     */
    dialnorm: number;
    /**
     * Sets the Dolby dynamic range compression profile.
     */
    drcLine: string;
    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     */
    drcRf: string;
    /**
     * Height dimensional trim.
     */
    heightTrim: number;
    /**
     * Surround dimensional trim.
     */
    surroundTrim: number;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsEac3Settings {
    /**
     * Sets the attenuation control.
     */
    attenuationControl: string;
    /**
     * Average bitrate in bits/second.
     */
    bitrate: number;
    /**
     * Specifies the bitstream mode (bsmod) for the emitted AC-3 stream.
     */
    bitstreamMode: string;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode: string;
    dcFilter: string;
    /**
     * Sets the dialnorm for the output.
     */
    dialnorm: number;
    /**
     * Sets the Dolby dynamic range compression profile.
     */
    drcLine: string;
    /**
     * Sets the profile for heavy Dolby dynamic range compression.
     */
    drcRf: string;
    lfeControl: string;
    /**
     * When set to enabled, applies a 120Hz lowpass filter to the LFE channel prior to encoding.
     */
    lfeFilter: string;
    loRoCenterMixLevel: number;
    loRoSurroundMixLevel: number;
    ltRtCenterMixLevel: number;
    ltRtSurroundMixLevel: number;
    /**
     * Metadata control.
     */
    metadataControl: string;
    passthroughControl: string;
    phaseControl: string;
    stereoDownmix: string;
    surroundExMode: string;
    surroundMode: string;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsMp2Settings {
    /**
     * Average bitrate in bits/second.
     */
    bitrate: number;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode: string;
    /**
     * Sample rate in Hz.
     */
    sampleRate: number;
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsPassThroughSettings {
}

export interface ChannelEncoderSettingsAudioDescriptionCodecSettingsWavSettings {
    bitDepth: number;
    /**
     * Dolby Digital Plus coding mode.
     */
    codingMode: string;
    /**
     * Sample rate in Hz.
     */
    sampleRate: number;
}

export interface ChannelEncoderSettingsAudioDescriptionRemixSettings {
    channelMappings: outputs.medialive.ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping[];
    channelsIn: number;
    channelsOut: number;
}

export interface ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMapping {
    inputChannelLevels: outputs.medialive.ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel[];
    outputChannel: number;
}

export interface ChannelEncoderSettingsAudioDescriptionRemixSettingsChannelMappingInputChannelLevel {
    gain: number;
    inputChannel: number;
}

export interface ChannelEncoderSettingsAvailBlanking {
    /**
     * Blanking image to be used. See Avail Blanking Image for more details.
     */
    availBlankingImage?: outputs.medialive.ChannelEncoderSettingsAvailBlankingAvailBlankingImage;
    /**
     * When set to enabled, causes video, audio and captions to be blanked when insertion metadata is added.
     */
    state: string;
}

export interface ChannelEncoderSettingsAvailBlankingAvailBlankingImage {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam: string;
    /**
     * Path to a file accessible to the live stream.
     */
    uri: string;
    /**
     * . Username to be used.
     */
    username: string;
}

export interface ChannelEncoderSettingsOutputGroup {
    /**
     * The name of the video description.
     */
    name?: string;
    /**
     * Settings associated with the output group. See Output Group Settings for more details.
     */
    outputGroupSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettings;
    /**
     * List of outputs. See Outputs for more details.
     */
    outputs: outputs.medialive.ChannelEncoderSettingsOutputGroupOutput[];
}

export interface ChannelEncoderSettingsOutputGroupOutput {
    /**
     * The names of the audio descriptions used as audio sources for the output.
     */
    audioDescriptionNames?: string[];
    /**
     * The names of the caption descriptions used as audio sources for the output.
     */
    captionDescriptionNames: string[];
    /**
     * The name used to identify an output.
     */
    outputName?: string;
    /**
     * Settings for output. See Output Settings for more details.
     */
    outputSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettings;
    /**
     * The name of the video description used as audio sources for the output.
     */
    videoDescriptionName?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettings {
    /**
     * Archive group settings. See Archive Group Settings for more details.
     */
    archiveGroupSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting[];
    frameCaptureGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings;
    hlsGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings;
    /**
     * Media package group settings. See Media Package Group Settings for more details.
     */
    mediaPackageGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings;
    msSmoothGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings;
    multiplexGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings;
    /**
     * RTMP group settings. See RTMP Group Settings for more details.
     */
    rtmpGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings;
    udpGroupSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSetting {
    /**
     * Parameters that control the interactions with the CDN. See Archive CDN Settings for more details.
     */
    archiveCdnSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination;
    /**
     * Number of seconds to write to archive file before closing and starting a new one.
     */
    rolloverInterval?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettings {
    /**
     * Archive S3 Settings. See Archive S3 Settings for more details.
     */
    archiveS3Settings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingArchiveCdnSettingsArchiveS3Settings {
    /**
     * Specify the canned ACL to apply to each S3 request.
     */
    cannedAcl?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsArchiveGroupSettingDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettings {
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination;
    frameCaptureCdnSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings {
    frameCaptureS3Settings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings {
    /**
     * Specify the canned ACL to apply to each S3 request.
     */
    cannedAcl?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettings {
    /**
     * The ad marker type for this output group.
     */
    adMarkers: string[];
    baseUrlContent: string;
    baseUrlContent1: string;
    baseUrlManifest: string;
    baseUrlManifest1: string;
    captionLanguageMappings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping[];
    captionLanguageSetting: string;
    clientCache: string;
    codecSpecification: string;
    constantIv: string;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination;
    directoryStructure: string;
    discontinuityTags: string;
    encryptionType: string;
    hlsCdnSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting[];
    hlsId3SegmentTagging: string;
    iframeOnlyPlaylists: string;
    incompleteSegmentBehavior: string;
    indexNSegments: number;
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction: string;
    ivInManifest: string;
    ivSource: string;
    keepSegments: number;
    keyFormat: string;
    keyFormatVersions: string;
    keyProviderSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings;
    manifestCompression: string;
    manifestDurationFormat: string;
    minSegmentLength: number;
    mode: string;
    outputSelection: string;
    programDateTime: string;
    programDateTimeClock: string;
    programDateTimePeriod: number;
    redundantManifest: string;
    segmentLength: number;
    segmentsPerSubdirectory: number;
    streamInfResolution: string;
    /**
     * Indicates ID3 frame that has the timecode.
     */
    timedMetadataId3Frame: string;
    timedMetadataId3Period: number;
    timestampDeltaMilliseconds: number;
    tsFileMode: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsCaptionLanguageMapping {
    captionChannel: number;
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode: string;
    languageDescription: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSetting {
    hlsAkamaiSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings;
    hlsBasicPutSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings;
    hlsMediaStoreSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings;
    hlsS3Settings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings;
    hlsWebdavSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsAkamaiSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: number;
    filecacheDuration?: number;
    httpTransferMode: string;
    /**
     * Number of retry attempts.
     */
    numRetries?: number;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: number;
    salt: string;
    token: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsBasicPutSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: number;
    filecacheDuration?: number;
    /**
     * Number of retry attempts.
     */
    numRetries?: number;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsMediaStoreSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: number;
    filecacheDuration?: number;
    mediaStoreStorageClass: string;
    /**
     * Number of retry attempts.
     */
    numRetries?: number;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsS3Settings {
    /**
     * Specify the canned ACL to apply to each S3 request.
     */
    cannedAcl?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsHlsCdnSettingHlsWebdavSettings {
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval?: number;
    filecacheDuration?: number;
    httpTransferMode: string;
    /**
     * Number of retry attempts.
     */
    numRetries?: number;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettings {
    staticKeySettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting[];
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySetting {
    keyProviderServer?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer;
    staticKeyValue: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingKeyProviderServer {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam: string;
    /**
     * Path to a file accessible to the live stream.
     */
    uri: string;
    /**
     * . Username to be used.
     */
    username: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettings {
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMediaPackageGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings {
    acquisitionPointId: string;
    audioOnlyTimecodecControl: string;
    /**
     * Setting to allow self signed or verified RTMP certificates.
     */
    certificateMode: string;
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval: number;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination;
    eventId: number;
    eventIdMode: string;
    eventStopBehavior: string;
    filecacheDuration?: number;
    fragmentLength: number;
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction: string;
    /**
     * Number of retry attempts.
     */
    numRetries?: number;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: number;
    segmentationMode: string;
    sendDelayMs: number;
    sparseTrackType: string;
    streamManifestBehavior: string;
    timestampOffset: string;
    timestampOffsetMode: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsMultiplexGroupSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsRtmpGroupSettings {
    /**
     * The ad marker type for this output group.
     */
    adMarkers?: string[];
    /**
     * Authentication scheme to use when connecting with CDN.
     */
    authenticationScheme: string;
    /**
     * Controls behavior when content cache fills up.
     */
    cacheFullBehavior: string;
    /**
     * Cache length in seconds, is used to calculate buffer size.
     */
    cacheLength: number;
    /**
     * Controls the types of data that passes to onCaptionInfo outputs.
     */
    captionData: string;
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction: string;
    /**
     * Number of seconds to wait until a restart is initiated.
     */
    restartDelay?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputGroupSettingsUdpGroupSettings {
    /**
     * Specifies behavior of last resort when input video os lost.
     */
    inputLossAction: string;
    /**
     * Indicates ID3 frame that has the timecode.
     */
    timedMetadataId3Frame: string;
    timedMetadataId3Period: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettings {
    /**
     * Archive output settings. See Archive Output Settings for more details.
     */
    archiveOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings;
    frameCaptureOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings;
    hlsOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings;
    /**
     * Media package output settings. This can be set as an empty block.
     */
    mediaPackageOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings;
    msSmoothOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings;
    /**
     * Multiplex output settings. See Multiplex Output Settings for more details.
     */
    multiplexOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings;
    /**
     * RTMP output settings. See RTMP Output Settings for more details.
     */
    rtmpOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings;
    /**
     * UDP output settings. See UDP Output Settings for more details
     */
    udpOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettings {
    /**
     * UDP container settings. See Container Settings for more details.
     */
    containerSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings;
    /**
     * Output file extension.
     */
    extension?: string;
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettings {
    /**
     * M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
     */
    m2tsSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings;
    /**
     * Raw Settings. This can be set as an empty block.
     */
    rawSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettings {
    absentInputAudioBehavior: string;
    arib?: string;
    aribCaptionsPid: string;
    aribCaptionsPidControl?: string;
    audioBufferModel?: string;
    audioFramesPerPes?: number;
    audioPids: string;
    audioStreamType?: string;
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: number;
    bufferModel?: string;
    ccDescriptor?: string;
    dvbNitSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings;
    dvbSdtSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings;
    dvbSubPids: string;
    dvbTdtSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings;
    dvbTeletextPid: string;
    ebif?: string;
    ebpAudioInterval?: string;
    ebpLookaheadMs?: number;
    ebpPlacement?: string;
    ecmPid?: string;
    esRateInPes?: string;
    etvPlatformPid: string;
    etvSignalPid: string;
    fragmentTime?: number;
    klv?: string;
    klvDataPids: string;
    nielsenId3Behavior?: string;
    nullPacketBitrate?: number;
    patInterval?: number;
    pcrControl?: string;
    pcrPeriod?: number;
    pcrPid?: string;
    pmtInterval?: number;
    pmtPid: string;
    programNum?: number;
    rateMode?: string;
    scte27Pids: string;
    scte35Control?: string;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid: string;
    segmentationMarkers?: string;
    segmentationStyle?: string;
    segmentationTime?: number;
    timedMetadataBehavior?: string;
    timedMetadataPid: string;
    transportStreamId?: number;
    videoPid: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings {
    networkId: number;
    networkName: string;
    repInterval?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings {
    outputSdt?: string;
    repInterval?: number;
    serviceName?: string;
    serviceProviderName?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings {
    repInterval?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsFrameCaptureOutputSettings {
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettings {
    h265PackagingType: string;
    hlsSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings;
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier: string;
    segmentModifier: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettings {
    audioOnlyHlsSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings;
    fmp4HlsSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings;
    frameCaptureHlsSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings;
    standardHlsSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings {
    audioGroupId: string;
    audioOnlyImage?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage;
    audioTrackType: string;
    segmentType: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage {
    /**
     * Key used to extract the password from EC2 Parameter store.
     */
    passwordParam: string;
    /**
     * Path to a file accessible to the live stream.
     */
    uri: string;
    /**
     * . Username to be used.
     */
    username: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings {
    audioRenditionSets: string;
    nielsenId3Behavior: string;
    timedMetadataBehavior: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings {
    audioRenditionSets: string;
    m3u8Settings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3u8Settings {
    audioFramesPerPes: number;
    audioPids: string;
    ecmPid: string;
    nielsenId3Behavior: string;
    patInterval: number;
    pcrControl: string;
    pcrPeriod: number;
    pcrPid: string;
    pmtInterval: number;
    pmtPid: string;
    programNum: number;
    scte35Behavior: string;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid: string;
    timedMetadataBehavior: string;
    timedMetadataPid: string;
    transportStreamId: number;
    videoPid: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMediaPackageOutputSettings {
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMsSmoothOutputSettings {
    h265PackagingType: string;
    /**
     * String concatenated to the end of the destination filename. Required for multiple outputs of the same type.
     */
    nameModifier: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettings {
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsMultiplexOutputSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettings {
    certficateMode: string;
    /**
     * Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
     */
    connectionRetryInterval: number;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination;
    /**
     * Number of retry attempts.
     */
    numRetries: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsRtmpOutputSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettings {
    /**
     * UDP output buffering in milliseconds.
     */
    bufferMsec: number;
    /**
     * UDP container settings. See Container Settings for more details.
     */
    containerSettings: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings;
    /**
     * Destination address and port number for RTP or UDP packets. See Destination for more details.
     */
    destination: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination;
    fecOutputSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettings {
    /**
     * M2ts Settings. See [M2ts Settings](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-medialive-channel-m2tssettings.html) for more details.
     */
    m2tsSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettings {
    absentInputAudioBehavior: string;
    arib?: string;
    aribCaptionsPid: string;
    aribCaptionsPidControl?: string;
    audioBufferModel?: string;
    audioFramesPerPes?: number;
    audioPids: string;
    audioStreamType?: string;
    /**
     * Average bitrate in bits/second.
     */
    bitrate?: number;
    bufferModel?: string;
    ccDescriptor?: string;
    dvbNitSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings;
    dvbSdtSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings;
    dvbSubPids: string;
    dvbTdtSettings?: outputs.medialive.ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings;
    dvbTeletextPid: string;
    ebif?: string;
    ebpAudioInterval?: string;
    ebpLookaheadMs?: number;
    ebpPlacement?: string;
    ecmPid?: string;
    esRateInPes?: string;
    etvPlatformPid: string;
    etvSignalPid: string;
    fragmentTime?: number;
    klv?: string;
    klvDataPids: string;
    nielsenId3Behavior?: string;
    nullPacketBitrate?: number;
    patInterval?: number;
    pcrControl?: string;
    pcrPeriod?: number;
    pcrPid?: string;
    pmtInterval?: number;
    pmtPid: string;
    programNum?: number;
    rateMode?: string;
    scte27Pids: string;
    scte35Control?: string;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid: string;
    segmentationMarkers?: string;
    segmentationStyle?: string;
    segmentationTime?: number;
    timedMetadataBehavior?: string;
    timedMetadataPid: string;
    transportStreamId?: number;
    videoPid: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbNitSettings {
    networkId: number;
    networkName: string;
    repInterval?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbSdtSettings {
    outputSdt?: string;
    repInterval?: number;
    serviceName?: string;
    serviceProviderName?: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsContainerSettingsM2tsSettingsDvbTdtSettings {
    repInterval?: number;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsDestination {
    /**
     * Reference ID for the destination.
     */
    destinationRefId: string;
}

export interface ChannelEncoderSettingsOutputGroupOutputOutputSettingsUdpOutputSettingsFecOutputSettings {
    /**
     * The height of the FEC protection matrix.
     */
    columnDepth: number;
    /**
     * Enables column oly or column and row based FEC.
     */
    includeFec: string;
    /**
     * The width of the FEC protection matrix.
     */
    rowLength: number;
}

export interface ChannelEncoderSettingsTimecodeConfig {
    /**
     * The source for the timecode that will be associated with the events outputs.
     */
    source: string;
    /**
     * Threshold in frames beyond which output timecode is resynchronized to the input timecode.
     */
    syncThreshold: number;
}

export interface ChannelEncoderSettingsVideoDescription {
    /**
     * The video codec settings. See Video Codec Settings for more details.
     */
    codecSettings?: outputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettings;
    /**
     * Output video height in pixels.
     */
    height: number;
    /**
     * The name of the video description.
     */
    name: string;
    /**
     * Indicate how to respond to the AFD values that might be in the input video.
     */
    respondToAfd: string;
    /**
     * Behavior on how to scale.
     */
    scalingBehavior: string;
    /**
     * Changes the strength of the anti-alias filter used for scaling.
     */
    sharpness: number;
    /**
     * Output video width in pixels.
     */
    width: number;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettings {
    /**
     * Frame capture settings. See Frame Capture Settings for more details.
     */
    frameCaptureSettings?: outputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings;
    /**
     * H264 settings. See H264 Settings for more details.
     */
    h264Settings?: outputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsFrameCaptureSettings {
    /**
     * The frequency at which to capture frames for inclusion in the output.
     */
    captureInterval: number;
    /**
     * Unit for the frame capture interval.
     */
    captureIntervalUnits: string;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsH264Settings {
    /**
     * Enables or disables adaptive quantization.
     */
    adaptiveQuantization: string;
    /**
     * Indicates that AFD values will be written into the output stream.
     */
    afdSignaling: string;
    /**
     * Average bitrate in bits/second.
     */
    bitrate: number;
    bufFillPct: number;
    /**
     * Size of buffer in bits.
     */
    bufSize: number;
    /**
     * Includes color space metadata in the output.
     */
    colorMetadata: string;
    /**
     * Entropy encoding mode.
     */
    entropyEncoding: string;
    /**
     * Filters to apply to an encode. See H264 Filter Settings for more details.
     */
    filterSettings?: outputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings;
    /**
     * Four bit AFD value to write on all frames of video in the output stream.
     */
    fixedAfd: string;
    flickerAq: string;
    /**
     * Controls whether coding is performed on a field basis or on a frame basis.
     */
    forceFieldPictures: string;
    /**
     * Indicates how the output video frame rate is specified.
     */
    framerateControl: string;
    /**
     * Framerate denominator.
     */
    framerateDenominator: number;
    /**
     * Framerate numerator.
     */
    framerateNumerator: number;
    /**
     * GOP-B reference.
     */
    gopBReference: string;
    /**
     * Frequency of closed GOPs.
     */
    gopClosedCadence: number;
    /**
     * Number of B-frames between reference frames.
     */
    gopNumBFrames: number;
    /**
     * GOP size in units of either frames of seconds per `gopSizeUnits`.
     */
    gopSize: number;
    /**
     * Indicates if the `gopSize` is specified in frames or seconds.
     */
    gopSizeUnits: string;
    /**
     * H264 level.
     */
    level: string;
    /**
     * Amount of lookahead.
     */
    lookAheadRateControl: string;
    /**
     * Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
     */
    maxBitrate: number;
    minIInterval: number;
    /**
     * Number of reference frames to use.
     */
    numRefFrames: number;
    /**
     * Indicates how the output pixel aspect ratio is specified.
     */
    parControl: string;
    /**
     * Pixel Aspect Ratio denominator.
     */
    parDenominator: number;
    /**
     * Pixel Aspect Ratio numerator.
     */
    parNumerator: number;
    /**
     * H264 profile.
     */
    profile: string;
    /**
     * Quality level.
     */
    qualityLevel: string;
    /**
     * Controls the target quality for the video encode.
     */
    qvbrQualityLevel: number;
    /**
     * Rate control mode.
     */
    rateControlMode: string;
    /**
     * Sets the scan type of the output.
     */
    scanType: string;
    /**
     * Scene change detection.
     */
    sceneChangeDetect: string;
    /**
     * Number of slices per picture.
     */
    slices: number;
    /**
     * Softness.
     */
    softness: number;
    /**
     * Makes adjustments within each frame based on spatial variation of content complexity.
     */
    spatialAq: string;
    /**
     * Subgop length.
     */
    subgopLength: string;
    /**
     * Produces a bitstream compliant with SMPTE RP-2027.
     */
    syntax: string;
    /**
     * Makes adjustments within each frame based on temporal variation of content complexity.
     */
    temporalAq: string;
    /**
     * Determines how timecodes should be inserted into the video elementary stream.
     */
    timecodeInsertion: string;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettings {
    /**
     * Temporal filter settings. See Temporal Filter Settings
     */
    temporalFilterSettings?: outputs.medialive.ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings;
}

export interface ChannelEncoderSettingsVideoDescriptionCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings {
    /**
     * Post filter sharpening.
     */
    postFilterSharpening?: string;
    /**
     * Filter strength.
     */
    strength?: string;
}

export interface ChannelInputAttachment {
    automaticInputFailoverSettings?: outputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettings;
    /**
     * User-specified name for the attachment.
     */
    inputAttachmentName: string;
    /**
     * The ID of the input.
     */
    inputId: string;
    /**
     * Settings of an input. See Input Settings for more details
     */
    inputSettings: outputs.medialive.ChannelInputAttachmentInputSettings;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettings {
    errorClearTimeMsec?: number;
    failoverConditions?: outputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition[];
    inputPreference?: string;
    secondaryInputId: string;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverCondition {
    failoverConditionSettings?: outputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings {
    audioSilenceSettings?: outputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings;
    inputLossSettings?: outputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings;
    videoBlackSettings?: outputs.medialive.ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings {
    /**
     * The name of the audio selector used as the source for this AudioDescription.
     */
    audioSelectorName: string;
    audioSilenceThresholdMsec?: number;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings {
    inputLossThresholdMsec?: number;
}

export interface ChannelInputAttachmentAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings {
    blackDetectThreshold?: number;
    videoBlackThresholdMsec?: number;
}

export interface ChannelInputAttachmentInputSettings {
    audioSelectors?: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelector[];
    captionSelectors?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelector[];
    /**
     * Enable or disable the deblock filter when filtering.
     */
    deblockFilter?: string;
    /**
     * Enable or disable the denoise filter when filtering.
     */
    denoiseFilter?: string;
    /**
     * Adjusts the magnitude of filtering from 1 (minimal) to 5 (strongest).
     */
    filterStrength?: number;
    /**
     * Turns on the filter for the input.
     */
    inputFilter: string;
    /**
     * Input settings. See Network Input Settings for more details.
     */
    networkInputSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsNetworkInputSettings;
    /**
     * PID from which to read SCTE-35 messages.
     */
    scte35Pid?: number;
    /**
     * Specifies whether to extract applicable ancillary data from a SMPTE-2038 source in the input.
     */
    smpte2038DataPreference?: string;
    /**
     * Loop input if it is a file.
     */
    sourceEndBehavior?: string;
    videoSelector?: outputs.medialive.ChannelInputAttachmentInputSettingsVideoSelector;
}

export interface ChannelInputAttachmentInputSettingsAudioSelector {
    /**
     * The name of the video description.
     */
    name: string;
    selectorSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettings {
    audioHlsRenditionSelection?: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection;
    audioLanguageSelection?: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection;
    audioPidSelection?: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection;
    audioTrackSelection?: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection {
    groupId: string;
    /**
     * The name of the video description.
     */
    name: string;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection {
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode: string;
    languageSelectionPolicy?: string;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioPidSelection {
    pid: number;
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection {
    tracks: outputs.medialive.ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack[];
}

export interface ChannelInputAttachmentInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTrack {
    track: number;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelector {
    /**
     * When specified this field indicates the three letter language code of the caption track to extract from the source.
     */
    languageCode?: string;
    /**
     * The name of the video description.
     */
    name: string;
    selectorSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettings {
    ancillarySourceSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings;
    dvbTdtSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings;
    embeddedSourceSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings;
    scte20SourceSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings;
    scte27SourceSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings;
    teletextSourceSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings {
    sourceAncillaryChannelNumber?: number;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsDvbTdtSettings {
    ocrLanguage?: string;
    pid?: number;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings {
    convert608To708?: string;
    scte20Detection?: string;
    source608ChannelNumber?: number;
    source608TrackNumber?: number;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings {
    convert608To708?: string;
    source608ChannelNumber?: number;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings {
    ocrLanguage?: string;
    pid?: number;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings {
    outputRectangle?: outputs.medialive.ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle;
    pageNumber?: string;
}

export interface ChannelInputAttachmentInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle {
    /**
     * Output video height in pixels.
     */
    height: number;
    leftOffset: number;
    topOffset: number;
    /**
     * Output video width in pixels.
     */
    width: number;
}

export interface ChannelInputAttachmentInputSettingsNetworkInputSettings {
    /**
     * Specifies HLS input settings when the uri is for a HLS manifest. See HLS Input Settings for more details.
     */
    hlsInputSettings?: outputs.medialive.ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings;
    /**
     * Check HTTPS server certificates.
     */
    serverValidation?: string;
}

export interface ChannelInputAttachmentInputSettingsNetworkInputSettingsHlsInputSettings {
    /**
     * The bitrate is specified in bits per second, as in an HLS manifest.
     */
    bandwidth?: number;
    /**
     * Buffer segments.
     */
    bufferSegments?: number;
    /**
     * The number of consecutive times that attempts to read a manifest or segment must fail before the input is considered unavailable.
     */
    retries?: number;
    /**
     * The number of seconds between retries when an attempt to read a manifest or segment fails.
     */
    retryInterval?: number;
    scte35Source?: string;
}

export interface ChannelInputAttachmentInputSettingsVideoSelector {
    colorSpace?: string;
    colorSpaceUsage?: string;
}

export interface ChannelInputSpecification {
    codec: string;
    inputResolution: string;
    maximumBitrate: string;
}

export interface ChannelMaintenance {
    /**
     * The day of the week to use for maintenance.
     */
    maintenanceDay: string;
    /**
     * The hour maintenance will start.
     */
    maintenanceStartTime: string;
}

export interface ChannelVpc {
    availabilityZones: string[];
    publicAddressAllocationIds: string[];
    securityGroupIds: string[];
    subnetIds: string[];
}

export interface InputDestination {
    /**
     * A unique name for the location the RTMP stream is being pushed to.
     */
    streamName: string;
}

export interface InputInputDevice {
    /**
     * The unique ID for the device.
     */
    id: string;
}

export interface InputMediaConnectFlow {
    /**
     * The ARN of the MediaConnect Flow
     */
    flowArn: string;
}

export interface InputSecurityGroupWhitelistRule {
    /**
     * The IPv4 CIDR that's whitelisted.
     */
    cidr: string;
}

export interface InputSource {
    /**
     * The key used to extract the password from EC2 Parameter store.
     */
    passwordParam: string;
    /**
     * The URL where the stream is pulled from.
     */
    url: string;
    /**
     * The username for the input source.
     */
    username: string;
}

export interface InputVpc {
    /**
     * A list of up to 5 EC2 VPC security group IDs to attach to the Input.
     */
    securityGroupIds?: string[];
    /**
     * A list of 2 VPC subnet IDs from the same VPC.
     */
    subnetIds: string[];
}

export interface MultiplexMultiplexSettings {
    /**
     * Maximum video buffer delay.
     */
    maximumVideoBufferDelayMilliseconds: number;
    /**
     * Transport stream bit rate.
     */
    transportStreamBitrate: number;
    /**
     * Unique ID for each multiplex.
     */
    transportStreamId: number;
    /**
     * Transport stream reserved bit rate.
     */
    transportStreamReservedBitrate: number;
}

