// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ClusterAutoTerminationPolicy {
    /**
     * Specifies the amount of idle time in seconds after which the cluster automatically terminates. You can specify a minimum of `60` seconds and a maximum of `604800` seconds (seven days).
     */
    idleTimeout?: number;
}

export interface ClusterBootstrapAction {
    /**
     * List of command line arguments passed to the JAR file's main function when executed.
     */
    args?: string[];
    /**
     * Name of the step.
     */
    name: string;
    /**
     * Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system.
     */
    path: string;
}

export interface ClusterCoreInstanceFleet {
    /**
     * ID of the cluster.
     */
    id: string;
    /**
     * Configuration block for instance fleet.
     */
    instanceTypeConfigs?: outputs.emr.ClusterCoreInstanceFleetInstanceTypeConfig[];
    /**
     * Configuration block for launch specification.
     */
    launchSpecifications?: outputs.emr.ClusterCoreInstanceFleetLaunchSpecifications;
    /**
     * Name of the step.
     */
    name?: string;
    provisionedOnDemandCapacity: number;
    provisionedSpotCapacity: number;
    /**
     * Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
     */
    targetOnDemandCapacity?: number;
    /**
     * Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
     */
    targetSpotCapacity?: number;
}

export interface ClusterCoreInstanceFleetInstanceTypeConfig {
    /**
     * Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
     */
    bidPrice?: string;
    /**
     * Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
     */
    bidPriceAsPercentageOfOnDemandPrice?: number;
    /**
     * Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
     */
    configurations?: outputs.emr.ClusterCoreInstanceFleetInstanceTypeConfigConfiguration[];
    /**
     * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
     */
    ebsConfigs: outputs.emr.ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig[];
    /**
     * EC2 instance type for all instances in the instance group.
     */
    instanceType: string;
    /**
     * Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `aws.emr.InstanceFleet`.
     */
    weightedCapacity?: number;
}

export interface ClusterCoreInstanceFleetInstanceTypeConfigConfiguration {
    /**
     * Classification within a configuration.
     */
    classification?: string;
    /**
     * Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
     */
    properties?: {[key: string]: any};
}

export interface ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig {
    /**
     * Number of I/O operations per second (IOPS) that the volume supports.
     */
    iops?: number;
    /**
     * Volume size, in gibibytes (GiB).
     */
    size: number;
    /**
     * Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
     */
    type: string;
    /**
     * Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
     */
    volumesPerInstance?: number;
}

export interface ClusterCoreInstanceFleetLaunchSpecifications {
    /**
     * Configuration block for on demand instances launch specifications.
     */
    onDemandSpecifications?: outputs.emr.ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification[];
    /**
     * Configuration block for spot instances launch specifications.
     */
    spotSpecifications?: outputs.emr.ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification[];
}

export interface ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification {
    /**
     * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
     */
    allocationStrategy: string;
}

export interface ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification {
    /**
     * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
     */
    allocationStrategy: string;
    /**
     * Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
     */
    blockDurationMinutes?: number;
    /**
     * Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
     */
    timeoutAction: string;
    /**
     * Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
     */
    timeoutDurationMinutes: number;
}

export interface ClusterCoreInstanceGroup {
    /**
     * String containing the [EMR Auto Scaling Policy](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html) JSON.
     */
    autoscalingPolicy?: string;
    /**
     * Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
     */
    bidPrice?: string;
    /**
     * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
     */
    ebsConfigs: outputs.emr.ClusterCoreInstanceGroupEbsConfig[];
    /**
     * ID of the cluster.
     */
    id: string;
    /**
     * Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
     */
    instanceCount?: number;
    /**
     * EC2 instance type for all instances in the instance group.
     */
    instanceType: string;
    /**
     * Name of the step.
     */
    name?: string;
}

export interface ClusterCoreInstanceGroupEbsConfig {
    /**
     * Number of I/O operations per second (IOPS) that the volume supports.
     */
    iops?: number;
    /**
     * Volume size, in gibibytes (GiB).
     */
    size: number;
    /**
     * The throughput, in mebibyte per second (MiB/s).
     */
    throughput?: number;
    /**
     * Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
     */
    type: string;
    /**
     * Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
     */
    volumesPerInstance?: number;
}

export interface ClusterEc2Attributes {
    /**
     * String containing a comma separated list of additional Amazon EC2 security group IDs for the master node.
     */
    additionalMasterSecurityGroups?: string;
    /**
     * String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string.
     */
    additionalSlaveSecurityGroups?: string;
    /**
     * Identifier of the Amazon EC2 EMR-Managed security group for the master node.
     */
    emrManagedMasterSecurityGroup: string;
    /**
     * Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes.
     */
    emrManagedSlaveSecurityGroup: string;
    /**
     * Instance Profile for EC2 instances of the cluster assume this role.
     */
    instanceProfile: string;
    /**
     * Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`.
     */
    keyName?: string;
    /**
     * Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet.
     */
    serviceAccessSecurityGroup: string;
    /**
     * VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in an Amazon VPC.
     */
    subnetId: string;
    /**
     * List of VPC subnet id-s where you want the job flow to launch.  Amazon EMR identifies the best Availability Zone to launch instances according to your fleet specifications.
     */
    subnetIds: string[];
}

export interface ClusterKerberosAttributes {
    /**
     * Active Directory password for `adDomainJoinUser`. This provider cannot perform drift detection of this configuration.
     */
    adDomainJoinPassword?: string;
    /**
     * Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
     */
    adDomainJoinUser?: string;
    /**
     * Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
     */
    crossRealmTrustPrincipalPassword?: string;
    /**
     * Password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
     */
    kdcAdminPassword: string;
    /**
     * Name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
     */
    realm: string;
}

export interface ClusterMasterInstanceFleet {
    /**
     * ID of the cluster.
     */
    id: string;
    /**
     * Configuration block for instance fleet.
     */
    instanceTypeConfigs?: outputs.emr.ClusterMasterInstanceFleetInstanceTypeConfig[];
    /**
     * Configuration block for launch specification.
     */
    launchSpecifications?: outputs.emr.ClusterMasterInstanceFleetLaunchSpecifications;
    /**
     * Name of the step.
     */
    name?: string;
    provisionedOnDemandCapacity: number;
    provisionedSpotCapacity: number;
    /**
     * Target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
     */
    targetOnDemandCapacity?: number;
    /**
     * Target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
     */
    targetSpotCapacity?: number;
}

export interface ClusterMasterInstanceFleetInstanceTypeConfig {
    /**
     * Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
     */
    bidPrice?: string;
    /**
     * Bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
     */
    bidPriceAsPercentageOfOnDemandPrice?: number;
    /**
     * Configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
     */
    configurations?: outputs.emr.ClusterMasterInstanceFleetInstanceTypeConfigConfiguration[];
    /**
     * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
     */
    ebsConfigs: outputs.emr.ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig[];
    /**
     * EC2 instance type for all instances in the instance group.
     */
    instanceType: string;
    /**
     * Number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `aws.emr.InstanceFleet`.
     */
    weightedCapacity?: number;
}

export interface ClusterMasterInstanceFleetInstanceTypeConfigConfiguration {
    /**
     * Classification within a configuration.
     */
    classification?: string;
    /**
     * Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
     */
    properties?: {[key: string]: any};
}

export interface ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig {
    /**
     * Number of I/O operations per second (IOPS) that the volume supports.
     */
    iops?: number;
    /**
     * Volume size, in gibibytes (GiB).
     */
    size: number;
    /**
     * Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
     */
    type: string;
    /**
     * Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
     */
    volumesPerInstance?: number;
}

export interface ClusterMasterInstanceFleetLaunchSpecifications {
    /**
     * Configuration block for on demand instances launch specifications.
     */
    onDemandSpecifications?: outputs.emr.ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification[];
    /**
     * Configuration block for spot instances launch specifications.
     */
    spotSpecifications?: outputs.emr.ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification[];
}

export interface ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification {
    /**
     * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
     */
    allocationStrategy: string;
}

export interface ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification {
    /**
     * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
     */
    allocationStrategy: string;
    /**
     * Defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
     */
    blockDurationMinutes?: number;
    /**
     * Action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
     */
    timeoutAction: string;
    /**
     * Spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
     */
    timeoutDurationMinutes: number;
}

export interface ClusterMasterInstanceGroup {
    /**
     * Bid price for each EC2 instance in the instance group, expressed in USD. By setting this attribute, the instance group is being declared as a Spot Instance, and will implicitly create a Spot request. Leave this blank to use On-Demand Instances.
     */
    bidPrice?: string;
    /**
     * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
     */
    ebsConfigs: outputs.emr.ClusterMasterInstanceGroupEbsConfig[];
    /**
     * ID of the cluster.
     */
    id: string;
    /**
     * Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have map public IP on launch enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
     */
    instanceCount?: number;
    /**
     * EC2 instance type for all instances in the instance group.
     */
    instanceType: string;
    /**
     * Name of the step.
     */
    name?: string;
}

export interface ClusterMasterInstanceGroupEbsConfig {
    /**
     * Number of I/O operations per second (IOPS) that the volume supports.
     */
    iops?: number;
    /**
     * Volume size, in gibibytes (GiB).
     */
    size: number;
    /**
     * The throughput, in mebibyte per second (MiB/s).
     */
    throughput?: number;
    /**
     * Volume type. Valid options are `gp3`, `gp2`, `io1`, `standard`, `st1` and `sc1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
     */
    type: string;
    /**
     * Number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1).
     */
    volumesPerInstance?: number;
}

export interface ClusterStep {
    /**
     * Action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
     */
    actionOnFailure: string;
    /**
     * JAR file used for the step. See below.
     */
    hadoopJarStep: outputs.emr.ClusterStepHadoopJarStep;
    /**
     * Name of the step.
     */
    name: string;
}

export interface ClusterStepHadoopJarStep {
    /**
     * List of command line arguments passed to the JAR file's main function when executed.
     */
    args?: string[];
    /**
     * Path to a JAR file run during the step.
     */
    jar: string;
    /**
     * Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
     */
    mainClass?: string;
    /**
     * Key-Value map of Java properties that are set when the step runs. You can use these properties to pass key value pairs to your main function.
     */
    properties?: {[key: string]: string};
}

export interface GetReleaseLabelsFilters {
    /**
     * Optional release label application filter. For example, `Spark@2.1.0` or `Spark`.
     */
    application?: string;
    /**
     * Optional release label version prefix filter. For example, `emr-5`.
     */
    prefix?: string;
}

export interface InstanceFleetInstanceTypeConfig {
    /**
     * The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
     */
    bidPrice?: string;
    /**
     * The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
     */
    bidPriceAsPercentageOfOnDemandPrice?: number;
    /**
     * A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
     */
    configurations?: outputs.emr.InstanceFleetInstanceTypeConfigConfiguration[];
    /**
     * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
     */
    ebsConfigs: outputs.emr.InstanceFleetInstanceTypeConfigEbsConfig[];
    /**
     * An EC2 instance type, such as m4.xlarge.
     */
    instanceType: string;
    /**
     * The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `aws.emr.InstanceFleet`.
     */
    weightedCapacity?: number;
}

export interface InstanceFleetInstanceTypeConfigConfiguration {
    /**
     * The classification within a configuration.
     */
    classification?: string;
    /**
     * A map of properties specified within a configuration classification
     */
    properties?: {[key: string]: any};
}

export interface InstanceFleetInstanceTypeConfigEbsConfig {
    /**
     * The number of I/O operations per second (IOPS) that the volume supports
     */
    iops?: number;
    /**
     * The volume size, in gibibytes (GiB).
     */
    size: number;
    /**
     * The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
     */
    type: string;
    /**
     * The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
     */
    volumesPerInstance?: number;
}

export interface InstanceFleetLaunchSpecifications {
    /**
     * Configuration block for on demand instances launch specifications
     */
    onDemandSpecifications?: outputs.emr.InstanceFleetLaunchSpecificationsOnDemandSpecification[];
    /**
     * Configuration block for spot instances launch specifications
     */
    spotSpecifications?: outputs.emr.InstanceFleetLaunchSpecificationsSpotSpecification[];
}

export interface InstanceFleetLaunchSpecificationsOnDemandSpecification {
    /**
     * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
     */
    allocationStrategy: string;
}

export interface InstanceFleetLaunchSpecificationsSpotSpecification {
    /**
     * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
     */
    allocationStrategy: string;
    /**
     * The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
     */
    blockDurationMinutes?: number;
    /**
     * The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
     */
    timeoutAction: string;
    /**
     * The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
     */
    timeoutDurationMinutes: number;
}

export interface InstanceGroupEbsConfig {
    /**
     * The number of I/O operations per second (IOPS) that the volume supports.
     */
    iops?: number;
    /**
     * The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
     */
    size: number;
    /**
     * The volume type. Valid options are 'gp2', 'io1' and 'standard'.
     */
    type: string;
    /**
     * The number of EBS Volumes to attach per instance.
     */
    volumesPerInstance?: number;
}

export interface ManagedScalingPolicyComputeLimit {
    /**
     * The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     */
    maximumCapacityUnits: number;
    /**
     * The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
     */
    maximumCoreCapacityUnits?: number;
    /**
     * The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
     */
    maximumOndemandCapacityUnits?: number;
    /**
     * The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
     */
    minimumCapacityUnits: number;
    /**
     * The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
     */
    unitType: string;
}

