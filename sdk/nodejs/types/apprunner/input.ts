// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface CustomDomainAssociationCertificateValidationRecord {
    /**
     * Certificate CNAME record name.
     */
    name?: pulumi.Input<string>;
    /**
     * Current state of the certificate CNAME record validation. It should change to `SUCCESS` after App Runner completes validation with your DNS.
     */
    status?: pulumi.Input<string>;
    /**
     * Record type, always `CNAME`.
     */
    type?: pulumi.Input<string>;
    /**
     * Certificate CNAME record value.
     */
    value?: pulumi.Input<string>;
}

export interface ObservabilityConfigurationTraceConfiguration {
    /**
     * Implementation provider chosen for tracing App Runner services. Valid values: `AWSXRAY`.
     */
    vendor?: pulumi.Input<string>;
}

export interface ServiceEncryptionConfiguration {
    /**
     * ARN of the KMS key used for encryption.
     */
    kmsKey: pulumi.Input<string>;
}

export interface ServiceHealthCheckConfiguration {
    /**
     * Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
     */
    healthyThreshold?: pulumi.Input<number>;
    /**
     * Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
     */
    interval?: pulumi.Input<number>;
    /**
     * URL to send requests to for health checks. Defaults to `/`. Minimum length of 0. Maximum length of 51200.
     */
    path?: pulumi.Input<string>;
    /**
     * IP protocol that App Runner uses to perform health checks for your service. Valid values: `TCP`, `HTTP`. Defaults to `TCP`. If you set protocol to `HTTP`, App Runner sends health check requests to the HTTP path specified by `path`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
     */
    timeout?: pulumi.Input<number>;
    /**
     * Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
     */
    unhealthyThreshold?: pulumi.Input<number>;
}

export interface ServiceInstanceConfiguration {
    /**
     * Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to `1024`. Valid values: `1024|2048|(1|2) vCPU`.
     */
    cpu?: pulumi.Input<string>;
    /**
     * ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
     */
    instanceRoleArn?: pulumi.Input<string>;
    /**
     * Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to `2048`. Valid values: `2048|3072|4096|(2|3|4) GB`.
     */
    memory?: pulumi.Input<string>;
}

export interface ServiceNetworkConfiguration {
    /**
     * Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
     */
    egressConfiguration?: pulumi.Input<inputs.apprunner.ServiceNetworkConfigurationEgressConfiguration>;
    /**
     * Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
     */
    ingressConfiguration?: pulumi.Input<inputs.apprunner.ServiceNetworkConfigurationIngressConfiguration>;
}

export interface ServiceNetworkConfigurationEgressConfiguration {
    /**
     * The type of egress configuration. Valid values are: `DEFAULT` and `VPC`.
     */
    egressType?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when `EgressType = VPC`.
     */
    vpcConnectorArn?: pulumi.Input<string>;
}

export interface ServiceNetworkConfigurationIngressConfiguration {
    /**
     * Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
     */
    isPubliclyAccessible?: pulumi.Input<boolean>;
}

export interface ServiceObservabilityConfiguration {
    /**
     * ARN of the observability configuration that is associated with the service.
     */
    observabilityConfigurationArn: pulumi.Input<string>;
    /**
     * When `true`, an observability configuration resource is associated with the service.
     */
    observabilityEnabled: pulumi.Input<boolean>;
}

export interface ServiceSourceConfiguration {
    /**
     * Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
     */
    authenticationConfiguration?: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationAuthenticationConfiguration>;
    /**
     * Whether continuous integration from the source repository is enabled for the App Runner service. If set to `true`, each repository change (source code commit or new image version) starts a deployment. Defaults to `true`.
     */
    autoDeploymentsEnabled?: pulumi.Input<boolean>;
    /**
     * Description of a source code repository. See Code Repository below for more details.
     */
    codeRepository?: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationCodeRepository>;
    /**
     * Description of a source image repository. See Image Repository below for more details.
     */
    imageRepository?: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationImageRepository>;
}

export interface ServiceSourceConfigurationAuthenticationConfiguration {
    /**
     * ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
     */
    accessRoleArn?: pulumi.Input<string>;
    /**
     * ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
     */
    connectionArn?: pulumi.Input<string>;
}

export interface ServiceSourceConfigurationCodeRepository {
    /**
     * Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
     */
    codeConfiguration?: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationCodeRepositoryCodeConfiguration>;
    /**
     * Location of the repository that contains the source code.
     */
    repositoryUrl: pulumi.Input<string>;
    /**
     * Version that should be used within the source code repository. See Source Code Version below for more details.
     */
    sourceCodeVersion: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationCodeRepositorySourceCodeVersion>;
}

export interface ServiceSourceConfigurationCodeRepositoryCodeConfiguration {
    /**
     * Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
     */
    codeConfigurationValues?: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues>;
    /**
     * Source of the App Runner configuration. Valid values: `REPOSITORY`, `API`. Values are interpreted as follows:
     */
    configurationSource: pulumi.Input<string>;
}

export interface ServiceSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues {
    /**
     * Command App Runner runs to build your application.
     */
    buildCommand?: pulumi.Input<string>;
    /**
     * Port that your application listens to in the container. Defaults to `"8080"`.
     */
    port?: pulumi.Input<string>;
    /**
     * Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: `PYTHON_3`, `NODEJS_12`, `NODEJS_14`, `NODEJS_16`, `CORRETTO_8`, `CORRETTO_11`, `GO_1`, `DOTNET_6`, `PHP_81`, `RUBY_31`.
     */
    runtime: pulumi.Input<string>;
    /**
     * Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
     */
    runtimeEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Command App Runner runs to start your application.
     */
    startCommand?: pulumi.Input<string>;
}

export interface ServiceSourceConfigurationCodeRepositorySourceCodeVersion {
    /**
     * Type of version identifier. For a git-based repository, branches represent versions. Valid values: `BRANCH`.
     */
    type: pulumi.Input<string>;
    /**
     * Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
     */
    value: pulumi.Input<string>;
}

export interface ServiceSourceConfigurationImageRepository {
    /**
     * Configuration for running the identified image. See Image Configuration below for more details.
     */
    imageConfiguration?: pulumi.Input<inputs.apprunner.ServiceSourceConfigurationImageRepositoryImageConfiguration>;
    /**
     * Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
     * image name format, see Pulling an image in the Amazon ECR User Guide.
     */
    imageIdentifier: pulumi.Input<string>;
    /**
     * Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: `ECR` , `ECR_PUBLIC`.
     */
    imageRepositoryType: pulumi.Input<string>;
}

export interface ServiceSourceConfigurationImageRepositoryImageConfiguration {
    /**
     * Port that your application listens to in the container. Defaults to `"8080"`.
     */
    port?: pulumi.Input<string>;
    /**
     * Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of `AWSAPPRUNNER` are reserved for system use and aren't valid.
     */
    runtimeEnvironmentVariables?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
     */
    startCommand?: pulumi.Input<string>;
}

export interface VpcIngressConnectionIngressVpcConfiguration {
    /**
     * The ID of the VPC endpoint that your App Runner service connects to.
     */
    vpcEndpointId?: pulumi.Input<string>;
    /**
     * The ID of the VPC that is used for the VPC endpoint.
     */
    vpcId?: pulumi.Input<string>;
}
