// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface ScheduleFlexibleTimeWindow {
    /**
     * Maximum time window during which a schedule can be invoked. Ranges from `1` to `1440` minutes.
     */
    maximumWindowInMinutes?: number;
    /**
     * Determines whether the schedule is invoked within a flexible time window. One of: `OFF`, `FLEXIBLE`.
     */
    mode: string;
}

export interface ScheduleTarget {
    /**
     * ARN of the SQS queue specified as the destination for the dead-letter queue.
     */
    arn: string;
    /**
     * Information about an Amazon SQS queue that EventBridge Scheduler uses as a dead-letter queue for your schedule. If specified, EventBridge Scheduler delivers failed events that could not be successfully delivered to a target to the queue. Detailed below.
     */
    deadLetterConfig?: outputs.scheduler.ScheduleTargetDeadLetterConfig;
    /**
     * Templated target type for the Amazon ECS [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) API operation. Detailed below.
     */
    ecsParameters?: outputs.scheduler.ScheduleTargetEcsParameters;
    /**
     * Templated target type for the EventBridge [`PutEvents`](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html) API operation. Detailed below.
     */
    eventbridgeParameters?: outputs.scheduler.ScheduleTargetEventbridgeParameters;
    /**
     * Text, or well-formed JSON, passed to the target. Read more in [Universal target](https://docs.aws.amazon.com/scheduler/latest/UserGuide/managing-targets-universal.html).
     */
    input?: string;
    /**
     * Templated target type for the Amazon Kinesis [`PutRecord`](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecord.html) API operation. Detailed below.
     */
    kinesisParameters?: outputs.scheduler.ScheduleTargetKinesisParameters;
    /**
     * Information about the retry policy settings. Detailed below.
     */
    retryPolicy?: outputs.scheduler.ScheduleTargetRetryPolicy;
    /**
     * ARN of the IAM role that EventBridge Scheduler will use for this target when the schedule is invoked. Read more in [Set up the execution role](https://docs.aws.amazon.com/scheduler/latest/UserGuide/setting-up.html#setting-up-execution-role).
     */
    roleArn: string;
    /**
     * Templated target type for the Amazon SageMaker [`StartPipelineExecution`](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StartPipelineExecution.html) API operation. Detailed below.
     */
    sagemakerPipelineParameters?: outputs.scheduler.ScheduleTargetSagemakerPipelineParameters;
    /**
     * The templated target type for the Amazon SQS [`SendMessage`](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html) API operation. Detailed below.
     */
    sqsParameters?: outputs.scheduler.ScheduleTargetSqsParameters;
}

export interface ScheduleTargetDeadLetterConfig {
    /**
     * ARN of the SQS queue specified as the destination for the dead-letter queue.
     */
    arn?: string;
}

export interface ScheduleTargetEcsParameters {
    /**
     * Up to `6` capacity provider strategies to use for the task. Detailed below.
     */
    capacityProviderStrategies?: outputs.scheduler.ScheduleTargetEcsParametersCapacityProviderStrategy[];
    /**
     * Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
     */
    enableEcsManagedTags?: boolean;
    /**
     * Specifies whether to enable the execute command functionality for the containers in this task.
     */
    enableExecuteCommand?: boolean;
    /**
     * Specifies an ECS task group for the task. At most 255 characters.
     */
    group?: string;
    /**
     * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
     */
    launchType?: string;
    /**
     * Configures the networking associated with the task. Detailed below.
     */
    networkConfiguration?: outputs.scheduler.ScheduleTargetEcsParametersNetworkConfiguration;
    /**
     * A set of up to 10 placement constraints to use for the task. Detailed below.
     */
    placementConstraints?: outputs.scheduler.ScheduleTargetEcsParametersPlacementConstraint[];
    /**
     * A set of up to 5 placement strategies. Detailed below.
     */
    placementStrategies?: outputs.scheduler.ScheduleTargetEcsParametersPlacementStrategy[];
    /**
     * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
     */
    platformVersion?: string;
    /**
     * Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
     */
    propagateTags?: string;
    /**
     * Reference ID to use for the task.
     */
    referenceId?: string;
    /**
     * The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
     */
    tags?: {[key: string]: string};
    /**
     * The number of tasks to create. Ranges from `1` (default) to `10`.
     */
    taskCount?: number;
    /**
     * ARN of the task definition to use.
     */
    taskDefinitionArn: string;
}

export interface ScheduleTargetEcsParametersCapacityProviderStrategy {
    /**
     * How many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Ranges from `0` (default) to `100000`.
     */
    base?: number;
    /**
     * Short name of the capacity provider.
     */
    capacityProvider: string;
    /**
     * Designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied. Ranges from from `0` to `1000`.
     */
    weight?: number;
}

export interface ScheduleTargetEcsParametersNetworkConfiguration {
    /**
     * Specifies whether the task's elastic network interface receives a public IP address. You can specify `ENABLED` only when the `launchType` is set to `FARGATE`. One of: `ENABLED`, `DISABLED`.
     */
    assignPublicIp?: boolean;
    /**
     * Set of 1 to 5 Security Group ID-s to be associated with the task. These security groups must all be in the same VPC.
     */
    securityGroups?: string[];
    /**
     * Set of 1 to 16 subnets to be associated with the task. These subnets must all be in the same VPC.
     */
    subnets: string[];
}

export interface ScheduleTargetEcsParametersPlacementConstraint {
    /**
     * A cluster query language expression to apply to the constraint. You cannot specify an expression if the constraint type is `distinctInstance`. For more information, see [Cluster query language](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html) in the Amazon ECS Developer Guide.
     */
    expression?: string;
    /**
     * The type of placement strategy. One of: `random`, `spread`, `binpack`.
     */
    type: string;
}

export interface ScheduleTargetEcsParametersPlacementStrategy {
    /**
     * The field to apply the placement strategy against.
     */
    field?: string;
    /**
     * The type of placement strategy. One of: `random`, `spread`, `binpack`.
     */
    type: string;
}

export interface ScheduleTargetEventbridgeParameters {
    /**
     * Free-form string used to decide what fields to expect in the event detail. Up to 128 characters.
     */
    detailType: string;
    /**
     * Source of the event.
     */
    source: string;
}

export interface ScheduleTargetKinesisParameters {
    /**
     * Specifies the shard to which EventBridge Scheduler sends the event. Up to 256 characters.
     */
    partitionKey: string;
}

export interface ScheduleTargetRetryPolicy {
    /**
     * Maximum amount of time, in seconds, to continue to make retry attempts. Ranges from `60` to `86400` (default).
     */
    maximumEventAgeInSeconds?: number;
    /**
     * Maximum number of retry attempts to make before the request fails. Ranges from `0` to `185` (default).
     */
    maximumRetryAttempts?: number;
}

export interface ScheduleTargetSagemakerPipelineParameters {
    /**
     * Set of up to 200 parameter names and values to use when executing the SageMaker Model Building Pipeline. Detailed below.
     */
    pipelineParameters?: outputs.scheduler.ScheduleTargetSagemakerPipelineParametersPipelineParameter[];
}

export interface ScheduleTargetSagemakerPipelineParametersPipelineParameter {
    /**
     * Name of parameter to start execution of a SageMaker Model Building Pipeline.
     */
    name: string;
    /**
     * Value of parameter to start execution of a SageMaker Model Building Pipeline.
     */
    value: string;
}

export interface ScheduleTargetSqsParameters {
    /**
     * FIFO message group ID to use as the target.
     */
    messageGroupId?: string;
}

