// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as enums from "../../types/enums";
import * as utilities from "../../utilities";

import {RoutingRule} from "@/s3";

export interface AliasRoutingStrategy {
    /**
     * ID of the GameLift Fleet to point the alias to.
     */
    fleetId?: pulumi.Input<string>;
    /**
     * Message text to be used with the `TERMINAL` routing strategy.
     */
    message?: pulumi.Input<string>;
    /**
     * Type of routing strategyE.g., `SIMPLE` or `TERMINAL`
     */
    type: pulumi.Input<string>;
}

export interface BuildStorageLocation {
    /**
     * Name of your S3 bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Name of the zip file containing your build files.
     */
    key: pulumi.Input<string>;
    /**
     * A specific version of the file. If not set, the latest version of the file is retrieved.
     */
    objectVersion?: pulumi.Input<string>;
    /**
     * ARN of the access role that allows Amazon GameLift to access your S3 bucket.
     */
    roleArn: pulumi.Input<string>;
}

export interface FleetCertificateConfiguration {
    /**
     * Indicates whether a TLS/SSL certificate is generated for a fleet. Valid values are `DISABLED` and `GENERATED`. Default value is `DISABLED`.
     */
    certificateType?: pulumi.Input<string>;
}

export interface FleetEc2InboundPermission {
    /**
     * Starting value for a range of allowed port numbers.
     */
    fromPort: pulumi.Input<number>;
    /**
     * Range of allowed IP addresses expressed in CIDR notationE.g., `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
     */
    ipRange: pulumi.Input<string>;
    /**
     * Network communication protocol used by the fleetE.g., `TCP` or `UDP`
     */
    protocol: pulumi.Input<string>;
    /**
     * Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `fromPort`.
     */
    toPort: pulumi.Input<number>;
}

export interface FleetResourceCreationLimitPolicy {
    /**
     * Maximum number of game sessions that an individual can create during the policy period.
     */
    newGameSessionsPerCreator?: pulumi.Input<number>;
    /**
     * Time span used in evaluating the resource creation limit policy.
     */
    policyPeriodInMinutes?: pulumi.Input<number>;
}

export interface FleetRuntimeConfiguration {
    /**
     * Maximum amount of time (in seconds) that a game session can remain in status `ACTIVATING`.
     */
    gameSessionActivationTimeoutSeconds?: pulumi.Input<number>;
    /**
     * Maximum number of game sessions with status `ACTIVATING` to allow on an instance simultaneously.
     */
    maxConcurrentGameSessionActivations?: pulumi.Input<number>;
    /**
     * Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
     */
    serverProcesses?: pulumi.Input<pulumi.Input<inputs.gamelift.FleetRuntimeConfigurationServerProcess>[]>;
}

export interface FleetRuntimeConfigurationServerProcess {
    /**
     * Number of server processes using this configuration to run concurrently on an instance.
     */
    concurrentExecutions: pulumi.Input<number>;
    /**
     * Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances `C:\game`, and for Linux instances `/local/game`.
     */
    launchPath: pulumi.Input<string>;
    /**
     * Optional list of parameters to pass to the server executable on launch.
     */
    parameters?: pulumi.Input<string>;
}

export interface GameServerGroupAutoScalingPolicy {
    /**
     * Length of time, in seconds, it takes for a new instance to start
     * new game server processes and register with GameLift FleetIQ.
     * Specifying a warm-up time can be useful, particularly with game servers that take a long time to start up,
     * because it avoids prematurely starting new instances. Defaults to `60`.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    targetTrackingConfiguration: pulumi.Input<inputs.gamelift.GameServerGroupAutoScalingPolicyTargetTrackingConfiguration>;
}

export interface GameServerGroupAutoScalingPolicyTargetTrackingConfiguration {
    /**
     * Desired value to use with a game server group target-based scaling policy.
     */
    targetValue: pulumi.Input<number>;
}

export interface GameServerGroupInstanceDefinition {
    /**
     * An EC2 instance type.
     */
    instanceType: pulumi.Input<string>;
    /**
     * Instance weighting that indicates how much this instance type contributes
     * to the total capacity of a game server group.
     * Instance weights are used by GameLift FleetIQ to calculate the instance type's cost per unit hour and better identify
     * the most cost-effective options.
     */
    weightedCapacity?: pulumi.Input<string>;
}

export interface GameServerGroupLaunchTemplate {
    /**
     * A unique identifier for an existing EC2 launch template.
     */
    id?: pulumi.Input<string>;
    /**
     * A readable identifier for an existing EC2 launch template.
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the EC2 launch template to use. If none is set, the default is the first version created.
     */
    version?: pulumi.Input<string>;
}

export interface GameSessionQueuePlayerLatencyPolicy {
    /**
     * Maximum latency value that is allowed for any player.
     */
    maximumIndividualPlayerLatencyMilliseconds: pulumi.Input<number>;
    /**
     * Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
     */
    policyDurationSeconds?: pulumi.Input<number>;
}

export interface ScriptStorageLocation {
    /**
     * Name of your S3 bucket.
     */
    bucket: pulumi.Input<string>;
    /**
     * Name of the zip file containing your script files.
     */
    key: pulumi.Input<string>;
    /**
     * A specific version of the file. If not set, the latest version of the file is retrieved.
     */
    objectVersion?: pulumi.Input<string>;
    /**
     * ARN of the access role that allows Amazon GameLift to access your S3 bucket.
     */
    roleArn: pulumi.Input<string>;
}
