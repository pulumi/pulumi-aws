// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";

import {RoutingRule} from "../s3";

export interface GetAmiBlockDeviceMapping {
    deviceName: string;
    ebs: {[key: string]: string};
    noDevice: string;
    virtualName: string;
}

export interface GetAmiFilter {
    /**
     * The name of the AMI that was provided during image creation.
     */
    name: string;
    values: string[];
}

export interface GetAmiIdsFilter {
    name: string;
    values: string[];
}

export interface GetAmiProductCode {
    productCodeId: string;
    productCodeType: string;
}

export interface GetAutoscalingGroupsFilter {
    /**
     * The name of the filter. The valid values are: `auto-scaling-group`, `key`, `value`, and `propagate-at-launch`.
     */
    name: string;
    /**
     * The value of the filter.
     */
    values: string[];
}

export interface GetAvailabilityZoneFilter {
    /**
     * The name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
     */
    name: string;
    /**
     * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
     */
    values: string[];
}

export interface GetAvailabilityZonesFilter {
    /**
     * The name of the filter field. Valid values can be found in the [EC2 DescribeAvailabilityZones API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html).
     */
    name: string;
    /**
     * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
     */
    values: string[];
}

export interface GetElasticIpFilter {
    name: string;
    values: string[];
}

export interface GetPrefixListFilter {
    /**
     * The name of the filter field. Valid values can be found in the [EC2 DescribePrefixLists API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribePrefixLists.html).
     */
    name: string;
    /**
     * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
     */
    values: string[];
}

export interface GetRegionsFilter {
    /**
     * The name of the filter field. Valid values can be found in the [describe-regions AWS CLI Reference][1].
     */
    name: string;
    /**
     * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
     */
    values: string[];
}

export interface ProviderAssumeRole {
    durationSeconds?: number;
    externalId?: string;
    policy?: string;
    policyArns?: string[];
    roleArn?: string;
    sessionName?: string;
    tags?: {[key: string]: string};
    transitiveTagKeys?: string[];
}

export interface ProviderEndpoint {
    accessanalyzer?: string;
    acm?: string;
    acmpca?: string;
    amplify?: string;
    apigateway?: string;
    applicationautoscaling?: string;
    applicationinsights?: string;
    appmesh?: string;
    appstream?: string;
    appsync?: string;
    athena?: string;
    autoscaling?: string;
    autoscalingplans?: string;
    backup?: string;
    batch?: string;
    budgets?: string;
    cloud9?: string;
    cloudformation?: string;
    cloudfront?: string;
    cloudhsm?: string;
    cloudsearch?: string;
    cloudtrail?: string;
    cloudwatch?: string;
    cloudwatchevents?: string;
    cloudwatchlogs?: string;
    codeartifact?: string;
    codebuild?: string;
    codecommit?: string;
    codedeploy?: string;
    codepipeline?: string;
    codestarconnections?: string;
    cognitoidentity?: string;
    cognitoidp?: string;
    configservice?: string;
    cur?: string;
    dataexchange?: string;
    datapipeline?: string;
    datasync?: string;
    dax?: string;
    devicefarm?: string;
    directconnect?: string;
    dlm?: string;
    dms?: string;
    docdb?: string;
    ds?: string;
    dynamodb?: string;
    ec2?: string;
    ecr?: string;
    ecrpublic?: string;
    ecs?: string;
    efs?: string;
    eks?: string;
    elasticache?: string;
    elasticbeanstalk?: string;
    elastictranscoder?: string;
    elb?: string;
    emr?: string;
    es?: string;
    firehose?: string;
    fms?: string;
    forecast?: string;
    fsx?: string;
    gamelift?: string;
    glacier?: string;
    globalaccelerator?: string;
    glue?: string;
    greengrass?: string;
    guardduty?: string;
    iam?: string;
    identitystore?: string;
    imagebuilder?: string;
    inspector?: string;
    iot?: string;
    iotanalytics?: string;
    iotevents?: string;
    kafka?: string;
    kinesis?: string;
    kinesisanalytics?: string;
    kinesisanalyticsv2?: string;
    kinesisvideo?: string;
    kms?: string;
    lakeformation?: string;
    lambda?: string;
    lexmodels?: string;
    licensemanager?: string;
    lightsail?: string;
    macie?: string;
    macie2?: string;
    managedblockchain?: string;
    marketplacecatalog?: string;
    mediaconnect?: string;
    mediaconvert?: string;
    medialive?: string;
    mediapackage?: string;
    mediastore?: string;
    mediastoredata?: string;
    mq?: string;
    mwaa?: string;
    neptune?: string;
    networkfirewall?: string;
    networkmanager?: string;
    opsworks?: string;
    organizations?: string;
    outposts?: string;
    personalize?: string;
    pinpoint?: string;
    pricing?: string;
    qldb?: string;
    quicksight?: string;
    ram?: string;
    rds?: string;
    redshift?: string;
    resourcegroups?: string;
    resourcegroupstaggingapi?: string;
    route53?: string;
    route53domains?: string;
    route53resolver?: string;
    s3?: string;
    s3control?: string;
    s3outposts?: string;
    sagemaker?: string;
    sdb?: string;
    secretsmanager?: string;
    securityhub?: string;
    serverlessrepo?: string;
    servicecatalog?: string;
    servicediscovery?: string;
    servicequotas?: string;
    ses?: string;
    shield?: string;
    signer?: string;
    sns?: string;
    sqs?: string;
    ssm?: string;
    ssoadmin?: string;
    stepfunctions?: string;
    storagegateway?: string;
    sts?: string;
    swf?: string;
    synthetics?: string;
    timestreamwrite?: string;
    transfer?: string;
    waf?: string;
    wafregional?: string;
    wafv2?: string;
    worklink?: string;
    workmail?: string;
    workspaces?: string;
    xray?: string;
}

export interface ProviderIgnoreTags {
    keyPrefixes?: string[];
    keys?: string[];
}
export namespace acm {
    export interface CertificateDomainValidationOption {
        /**
         * A domain name for which the certificate should be issued
         */
        domainName: string;
        /**
         * The name of the DNS record to create to validate the certificate
         */
        resourceRecordName: string;
        /**
         * The type of DNS record to create
         */
        resourceRecordType: string;
        /**
         * The value the DNS record needs to have
         */
        resourceRecordValue: string;
    }

    export interface CertificateOptions {
        /**
         * Specifies whether certificate details should be added to a certificate transparency log. Valid values are `ENABLED` or `DISABLED`. See https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency for more details.
         */
        certificateTransparencyLoggingPreference?: string;
    }
}

export namespace acmpca {
    export interface CertificateAuthorityCertificateAuthorityConfiguration {
        /**
         * Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
         */
        keyAlgorithm: string;
        /**
         * Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the [ACM PCA Documentation](https://docs.aws.amazon.com/acm-pca/latest/APIReference/API_CertificateAuthorityConfiguration.html).
         */
        signingAlgorithm: string;
        /**
         * Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
         */
        subject: outputs.acmpca.CertificateAuthorityCertificateAuthorityConfigurationSubject;
    }

    export interface CertificateAuthorityCertificateAuthorityConfigurationSubject {
        /**
         * Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
         */
        commonName?: string;
        /**
         * Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
         */
        country?: string;
        /**
         * Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
         */
        distinguishedNameQualifier?: string;
        /**
         * Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
         */
        generationQualifier?: string;
        /**
         * First name. Must be less than or equal to 16 characters in length.
         */
        givenName?: string;
        /**
         * Concatenation that typically contains the first letter of the `givenName`, the first letter of the middle name if one exists, and the first letter of the `surname`. Must be less than or equal to 5 characters in length.
         */
        initials?: string;
        /**
         * The locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
         */
        locality?: string;
        /**
         * Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
         */
        organization?: string;
        /**
         * A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
         */
        organizationalUnit?: string;
        /**
         * Typically a shortened version of a longer `givenName`. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
         */
        pseudonym?: string;
        /**
         * State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
         */
        state?: string;
        /**
         * Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
         */
        surname?: string;
        /**
         * A title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
         */
        title?: string;
    }

    export interface CertificateAuthorityRevocationConfiguration {
        /**
         * Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
         */
        crlConfiguration?: outputs.acmpca.CertificateAuthorityRevocationConfigurationCrlConfiguration;
    }

    export interface CertificateAuthorityRevocationConfigurationCrlConfiguration {
        /**
         * Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
         */
        customCname?: string;
        /**
         * Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * Number of days until a certificate expires. Must be between 1 and 5000.
         */
        expirationInDays: number;
        /**
         * Name of the S3 bucket that contains the CRL. If you do not provide a value for the `customCname` argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be less than or equal to 255 characters in length.
         */
        s3BucketName?: string;
    }

    export interface GetCertificateAuthorityRevocationConfiguration {
        crlConfigurations: outputs.acmpca.GetCertificateAuthorityRevocationConfigurationCrlConfiguration[];
    }

    export interface GetCertificateAuthorityRevocationConfigurationCrlConfiguration {
        customCname: string;
        enabled: boolean;
        expirationInDays: number;
        s3BucketName: string;
    }
}

export namespace alb {
    export interface GetListenerDefaultAction {
        authenticateCognitos: outputs.alb.GetListenerDefaultActionAuthenticateCognito[];
        authenticateOidcs: outputs.alb.GetListenerDefaultActionAuthenticateOidc[];
        fixedResponses: outputs.alb.GetListenerDefaultActionFixedResponse[];
        order: number;
        redirects: outputs.alb.GetListenerDefaultActionRedirect[];
        targetGroupArn: string;
        type: string;
    }

    export interface GetListenerDefaultActionAuthenticateCognito {
        authenticationRequestExtraParams: {[key: string]: string};
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        userPoolArn: string;
        userPoolClientId: string;
        userPoolDomain: string;
    }

    export interface GetListenerDefaultActionAuthenticateOidc {
        authenticationRequestExtraParams: {[key: string]: string};
        authorizationEndpoint: string;
        clientId: string;
        clientSecret: string;
        issuer: string;
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        tokenEndpoint: string;
        userInfoEndpoint: string;
    }

    export interface GetListenerDefaultActionFixedResponse {
        contentType: string;
        messageBody: string;
        statusCode: string;
    }

    export interface GetListenerDefaultActionRedirect {
        host: string;
        path: string;
        /**
         * The port of the listener. Required if `arn` is not set.
         */
        port: string;
        protocol: string;
        query: string;
        statusCode: string;
    }

    export interface GetLoadBalancerAccessLogs {
        bucket: string;
        enabled: boolean;
        prefix: string;
    }

    export interface GetLoadBalancerSubnetMapping {
        allocationId: string;
        outpostId: string;
        privateIpv4Address: string;
        subnetId: string;
    }

    export interface GetTargetGroupHealthCheck {
        enabled: boolean;
        healthyThreshold: number;
        interval: number;
        matcher: string;
        path: string;
        port: string;
        protocol: string;
        timeout: number;
        unhealthyThreshold: number;
    }

    export interface GetTargetGroupStickiness {
        cookieDuration: number;
        enabled: boolean;
        type: string;
    }

    export interface ListenerDefaultAction {
        authenticateCognito?: outputs.alb.ListenerDefaultActionAuthenticateCognito;
        authenticateOidc?: outputs.alb.ListenerDefaultActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.alb.ListenerDefaultActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.alb.ListenerDefaultActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.alb.ListenerDefaultActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerDefaultActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerDefaultActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerDefaultActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerDefaultActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.alb.ListenerDefaultActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.alb.ListenerDefaultActionForwardTargetGroup[];
    }

    export interface ListenerDefaultActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerDefaultActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerDefaultActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleAction {
        /**
         * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
         */
        authenticateCognito?: outputs.alb.ListenerRuleActionAuthenticateCognito;
        /**
         * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
         */
        authenticateOidc?: outputs.alb.ListenerRuleActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.alb.ListenerRuleActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.alb.ListenerRuleActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.alb.ListenerRuleActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerRuleActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerRuleActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerRuleActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerRuleActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.alb.ListenerRuleActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.alb.ListenerRuleActionForwardTargetGroup[];
    }

    export interface ListenerRuleActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerRuleActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerRuleActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleCondition {
        /**
         * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
         */
        hostHeader?: outputs.alb.ListenerRuleConditionHostHeader;
        /**
         * HTTP headers to match. HTTP Header block fields documented below.
         */
        httpHeader?: outputs.alb.ListenerRuleConditionHttpHeader;
        /**
         * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
         */
        httpRequestMethod?: outputs.alb.ListenerRuleConditionHttpRequestMethod;
        /**
         * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
         */
        pathPattern?: outputs.alb.ListenerRuleConditionPathPattern;
        /**
         * Query strings to match. Query String block fields documented below.
         */
        queryStrings?: outputs.alb.ListenerRuleConditionQueryString[];
        /**
         * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
         */
        sourceIp?: outputs.alb.ListenerRuleConditionSourceIp;
    }

    export interface ListenerRuleConditionHostHeader {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpHeader {
        /**
         * Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
         */
        httpHeaderName: string;
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpRequestMethod {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionPathPattern {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionQueryString {
        /**
         * Query string key pattern to match.
         */
        key?: string;
        /**
         * Query string value pattern to match.
         */
        value: string;
    }

    export interface ListenerRuleConditionSourceIp {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface LoadBalancerAccessLogs {
        /**
         * The S3 bucket name to store the logs in.
         */
        bucket: string;
        /**
         * Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
         */
        enabled?: boolean;
        /**
         * The S3 bucket prefix. Logs are stored in the root if not configured.
         */
        prefix?: string;
    }

    export interface LoadBalancerSubnetMapping {
        /**
         * The allocation ID of the Elastic IP address.
         */
        allocationId?: string;
        outpostId: string;
        /**
         * A private ipv4 address within the subnet to assign to the internal-facing load balancer.
         */
        privateIpv4Address?: string;
        /**
         * The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
         */
        subnetId: string;
    }

    export interface TargetGroupHealthCheck {
        /**
         * Boolean to enable / disable `stickiness`. Default is `true`
         */
        enabled?: boolean;
        /**
         * The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
         */
        healthyThreshold?: number;
        /**
         * The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
         */
        interval?: number;
        /**
         * The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
         */
        matcher: string;
        /**
         * The destination for the health check request. Applies to only HTTP/HTTPS.
         */
        path: string;
        /**
         * The port on which targets receive traffic, unless overridden when registering a specific target. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        port?: string;
        /**
         * The protocol to use for routing traffic to the targets. Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        protocol?: string;
        /**
         * The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
         */
        timeout: number;
        /**
         * The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
         */
        unhealthyThreshold?: number;
    }

    export interface TargetGroupStickiness {
        /**
         * Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
         */
        cookieDuration?: number;
        /**
         * Indicates whether  health checks are enabled. Defaults to true.
         */
        enabled?: boolean;
        /**
         * The type of sticky sessions. The only current possible values are `lbCookie` for ALBs and `sourceIp` for NLBs.
         */
        type: string;
    }
}

export namespace apigateway {
    export interface AccountThrottleSettings {
        /**
         * The absolute maximum number of times API Gateway allows the API to be called per second (RPS).
         */
        burstLimit: number;
        /**
         * The number of times API Gateway allows the API to be called per second on average (RPS).
         */
        rateLimit: number;
    }

    export interface DocumentationPartLocation {
        /**
         * The HTTP verb of a method. The default value is `*` for any method.
         */
        method?: string;
        /**
         * The name of the targeted API entity.
         */
        name?: string;
        /**
         * The URL path of the target. The default value is `/` for the root resource.
         */
        path?: string;
        /**
         * The HTTP status code of a response. The default value is `*` for any status code.
         */
        statusCode?: string;
        /**
         * The type of API entity to which the documentation content applies. e.g. `API`, `METHOD` or `REQUEST_BODY`
         */
        type: string;
    }

    export interface DomainNameEndpointConfiguration {
        /**
         * A list of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE` or `REGIONAL`. If unspecified, defaults to `EDGE`. Must be declared as `REGIONAL` in non-Commercial partitions. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
         */
        types: string;
    }

    export interface GetRestApiEndpointConfiguration {
        types: string[];
        vpcEndpointIds: string[];
    }

    export interface MethodSettingsSettings {
        /**
         * Specifies whether the cached responses are encrypted.
         */
        cacheDataEncrypted: boolean;
        /**
         * Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
         */
        cacheTtlInSeconds: number;
        /**
         * Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
         */
        cachingEnabled: boolean;
        /**
         * Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
         */
        dataTraceEnabled: boolean;
        /**
         * Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
         */
        loggingLevel: string;
        /**
         * Specifies whether Amazon CloudWatch metrics are enabled for this method.
         */
        metricsEnabled: boolean;
        /**
         * Specifies whether authorization is required for a cache invalidation request.
         */
        requireAuthorizationForCacheControl: boolean;
        /**
         * Specifies the throttling burst limit. Default: `-1` (throttling disabled).
         */
        throttlingBurstLimit?: number;
        /**
         * Specifies the throttling rate limit. Default: `-1` (throttling disabled).
         */
        throttlingRateLimit?: number;
        /**
         * Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
         */
        unauthorizedCacheControlHeaderStrategy: string;
    }

    export interface RestApiEndpointConfiguration {
        /**
         * A list of endpoint types. This resource currently only supports managing a single value. Valid values: `EDGE`, `REGIONAL` or `PRIVATE`. If unspecified, defaults to `EDGE`. Must be declared as `REGIONAL` in non-Commercial partitions. Refer to the [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/create-regional-api.html) for more information on the difference between edge-optimized and regional APIs.
         */
        types: string;
        /**
         * A list of VPC Endpoint Ids. It is only supported for PRIVATE endpoint type.
         */
        vpcEndpointIds?: string[];
    }

    export interface StageAccessLogSettings {
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with `amazon-apigateway-`. Automatically removes trailing `:*` if present.
         */
        destinationArn: string;
        /**
         * The formatting and values recorded in the logs.
         * For more information on configuring the log format rules visit the AWS [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html)
         */
        format: string;
    }

    export interface UsagePlanApiStage {
        /**
         * API Id of the associated API stage in a usage plan.
         */
        apiId: string;
        /**
         * API stage name of the associated API stage in a usage plan.
         */
        stage: string;
    }

    export interface UsagePlanQuotaSettings {
        /**
         * The maximum number of requests that can be made in a given time period.
         */
        limit: number;
        /**
         * The number of requests subtracted from the given limit in the initial time period.
         */
        offset?: number;
        /**
         * The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
         */
        period: string;
    }

    export interface UsagePlanThrottleSettings {
        /**
         * The API request burst limit, the maximum rate limit over a time ranging from one to a few seconds, depending upon whether the underlying token bucket is at its full capacity.
         */
        burstLimit?: number;
        /**
         * The API request steady-state rate limit.
         */
        rateLimit?: number;
    }
}

export namespace apigatewayv2 {
    export interface ApiCorsConfiguration {
        /**
         * Whether credentials are included in the CORS request.
         */
        allowCredentials?: boolean;
        /**
         * The set of allowed HTTP headers.
         */
        allowHeaders?: string[];
        /**
         * The set of allowed HTTP methods.
         */
        allowMethods?: string[];
        /**
         * The set of allowed origins.
         */
        allowOrigins?: string[];
        /**
         * The set of exposed HTTP headers.
         */
        exposeHeaders?: string[];
        /**
         * The number of seconds that the browser should cache preflight request results.
         */
        maxAge?: number;
    }

    export interface AuthorizerJwtConfiguration {
        /**
         * A list of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
         */
        audiences?: string[];
        /**
         * The base domain of the identity provider that issues JSON Web Tokens, such as the `endpoint` attribute of the `aws.cognito.UserPool` resource.
         */
        issuer?: string;
    }

    export interface DomainNameDomainNameConfiguration {
        /**
         * The ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source.
         * Use the `aws.acm.Certificate` resource to configure an ACM certificate.
         */
        certificateArn: string;
        /**
         * The endpoint type. Valid values: `REGIONAL`.
         */
        endpointType: string;
        /**
         * The Amazon Route 53 Hosted Zone ID of the endpoint.
         */
        hostedZoneId: string;
        /**
         * The Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
         */
        securityPolicy: string;
        /**
         * The target domain name.
         */
        targetDomainName: string;
    }

    export interface DomainNameMutualTlsAuthentication {
        /**
         * An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`.
         * The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
         */
        truststoreUri: string;
        /**
         * The version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
         */
        truststoreVersion?: string;
    }

    export interface IntegrationTlsConfig {
        /**
         * If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
         */
        serverNameToVerify?: string;
    }

    export interface StageAccessLogSettings {
        /**
         * The ARN of the CloudWatch Logs log group to receive access logs. Any trailing `:*` is trimmed from the ARN.
         */
        destinationArn: string;
        /**
         * A single line [format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html#apigateway-cloudwatch-log-formats) of the access logs of data, as specified by [selected $context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-logging.html).
         */
        format: string;
    }

    export interface StageDefaultRouteSettings {
        /**
         * Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
         * Defaults to `false`. Supported only for WebSocket APIs.
         */
        dataTraceEnabled?: boolean;
        /**
         * Whether detailed metrics are enabled for the default route. Defaults to `false`.
         */
        detailedMetricsEnabled?: boolean;
        /**
         * The logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
         * Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
         */
        loggingLevel: string;
        /**
         * The throttling burst limit for the default route.
         */
        throttlingBurstLimit?: number;
        /**
         * The throttling rate limit for the default route.
         */
        throttlingRateLimit?: number;
    }

    export interface StageRouteSetting {
        /**
         * Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
         * Defaults to `false`. Supported only for WebSocket APIs.
         */
        dataTraceEnabled?: boolean;
        /**
         * Whether detailed metrics are enabled for the route. Defaults to `false`.
         */
        detailedMetricsEnabled?: boolean;
        /**
         * The logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
         * Valid values: `ERROR`, `INFO`, `OFF`. Defaults to `OFF`. Supported only for WebSocket APIs. This provider will only perform drift detection of its value when present in a configuration.
         */
        loggingLevel: string;
        /**
         * Route key.
         */
        routeKey: string;
        /**
         * The throttling burst limit for the route.
         */
        throttlingBurstLimit?: number;
        /**
         * The throttling rate limit for the route.
         */
        throttlingRateLimit?: number;
    }
}

export namespace appautoscaling {
    export interface PolicyStepScalingPolicyConfiguration {
        /**
         * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
         */
        adjustmentType?: string;
        /**
         * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
         */
        cooldown?: number;
        /**
         * The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
         */
        metricAggregationType?: string;
        /**
         * The minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
         */
        minAdjustmentMagnitude?: number;
        /**
         * A set of adjustments that manage scaling. These have the following structure:
         */
        stepAdjustments?: outputs.appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustment[];
    }

    export interface PolicyStepScalingPolicyConfigurationStepAdjustment {
        /**
         * The lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
         */
        metricIntervalLowerBound?: string;
        /**
         * The upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
         */
        metricIntervalUpperBound?: string;
        /**
         * The number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
         */
        scalingAdjustment: number;
    }

    export interface PolicyTargetTrackingScalingPolicyConfiguration {
        /**
         * A custom CloudWatch metric. Documentation can be found  at: [AWS Customized Metric Specification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CustomizedMetricSpecification.html). See supported fields below.
         */
        customizedMetricSpecification?: outputs.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification;
        /**
         * Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is `false`.
         */
        disableScaleIn?: boolean;
        /**
         * A predefined metric. See supported fields below.
         */
        predefinedMetricSpecification?: outputs.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification;
        /**
         * The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
         */
        scaleInCooldown?: number;
        /**
         * The amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
         */
        scaleOutCooldown?: number;
        /**
         * The target value for the metric.
         */
        targetValue: number;
    }

    export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification {
        /**
         * Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
         */
        dimensions?: outputs.appautoscaling.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension[];
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
        /**
         * The statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
         */
        statistic: string;
        /**
         * The unit of the metric.
         */
        unit?: string;
    }

    export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension {
        /**
         * The name of the policy. Must be between 1 and 255 characters in length.
         */
        name: string;
        /**
         * Value of the dimension.
         */
        value: string;
    }

    export interface PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification {
        /**
         * The metric type.
         */
        predefinedMetricType: string;
        /**
         * Reserved for future use. Must be less than or equal to 1023 characters in length.
         */
        resourceLabel?: string;
    }

    export interface ScheduledActionScalableTargetAction {
        /**
         * The maximum capacity.
         */
        maxCapacity?: number;
        /**
         * The minimum capacity.
         */
        minCapacity?: number;
    }
}

export namespace applicationloadbalancing {
    export interface GetListenerDefaultAction {
        authenticateCognitos: outputs.applicationloadbalancing.GetListenerDefaultActionAuthenticateCognito[];
        authenticateOidcs: outputs.applicationloadbalancing.GetListenerDefaultActionAuthenticateOidc[];
        fixedResponses: outputs.applicationloadbalancing.GetListenerDefaultActionFixedResponse[];
        order: number;
        redirects: outputs.applicationloadbalancing.GetListenerDefaultActionRedirect[];
        targetGroupArn: string;
        type: string;
    }

    export interface GetListenerDefaultActionAuthenticateCognito {
        authenticationRequestExtraParams: {[key: string]: string};
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        userPoolArn: string;
        userPoolClientId: string;
        userPoolDomain: string;
    }

    export interface GetListenerDefaultActionAuthenticateOidc {
        authenticationRequestExtraParams: {[key: string]: string};
        authorizationEndpoint: string;
        clientId: string;
        clientSecret: string;
        issuer: string;
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        tokenEndpoint: string;
        userInfoEndpoint: string;
    }

    export interface GetListenerDefaultActionFixedResponse {
        contentType: string;
        messageBody: string;
        statusCode: string;
    }

    export interface GetListenerDefaultActionRedirect {
        host: string;
        path: string;
        /**
         * The port of the listener. Required if `arn` is not set.
         */
        port: string;
        protocol: string;
        query: string;
        statusCode: string;
    }

    export interface GetLoadBalancerAccessLogs {
        bucket: string;
        enabled: boolean;
        prefix: string;
    }

    export interface GetLoadBalancerSubnetMapping {
        allocationId: string;
        outpostId: string;
        privateIpv4Address: string;
        subnetId: string;
    }

    export interface GetTargetGroupHealthCheck {
        enabled: boolean;
        healthyThreshold: number;
        interval: number;
        matcher: string;
        path: string;
        port: string;
        protocol: string;
        timeout: number;
        unhealthyThreshold: number;
    }

    export interface GetTargetGroupStickiness {
        cookieDuration: number;
        enabled: boolean;
        type: string;
    }

    export interface ListenerDefaultAction {
        authenticateCognito?: outputs.applicationloadbalancing.ListenerDefaultActionAuthenticateCognito;
        authenticateOidc?: outputs.applicationloadbalancing.ListenerDefaultActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.applicationloadbalancing.ListenerDefaultActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.applicationloadbalancing.ListenerDefaultActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.applicationloadbalancing.ListenerDefaultActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerDefaultActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerDefaultActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerDefaultActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerDefaultActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.applicationloadbalancing.ListenerDefaultActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.applicationloadbalancing.ListenerDefaultActionForwardTargetGroup[];
    }

    export interface ListenerDefaultActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerDefaultActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerDefaultActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleAction {
        /**
         * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
         */
        authenticateCognito?: outputs.applicationloadbalancing.ListenerRuleActionAuthenticateCognito;
        /**
         * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
         */
        authenticateOidc?: outputs.applicationloadbalancing.ListenerRuleActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.applicationloadbalancing.ListenerRuleActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.applicationloadbalancing.ListenerRuleActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.applicationloadbalancing.ListenerRuleActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerRuleActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerRuleActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerRuleActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerRuleActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.applicationloadbalancing.ListenerRuleActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.applicationloadbalancing.ListenerRuleActionForwardTargetGroup[];
    }

    export interface ListenerRuleActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerRuleActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerRuleActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleCondition {
        /**
         * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
         */
        hostHeader?: outputs.applicationloadbalancing.ListenerRuleConditionHostHeader;
        /**
         * HTTP headers to match. HTTP Header block fields documented below.
         */
        httpHeader?: outputs.applicationloadbalancing.ListenerRuleConditionHttpHeader;
        /**
         * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
         */
        httpRequestMethod?: outputs.applicationloadbalancing.ListenerRuleConditionHttpRequestMethod;
        /**
         * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
         */
        pathPattern?: outputs.applicationloadbalancing.ListenerRuleConditionPathPattern;
        /**
         * Query strings to match. Query String block fields documented below.
         */
        queryStrings?: outputs.applicationloadbalancing.ListenerRuleConditionQueryString[];
        /**
         * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
         */
        sourceIp?: outputs.applicationloadbalancing.ListenerRuleConditionSourceIp;
    }

    export interface ListenerRuleConditionHostHeader {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpHeader {
        /**
         * Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
         */
        httpHeaderName: string;
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpRequestMethod {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionPathPattern {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionQueryString {
        /**
         * Query string key pattern to match.
         */
        key?: string;
        /**
         * Query string value pattern to match.
         */
        value: string;
    }

    export interface ListenerRuleConditionSourceIp {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface LoadBalancerAccessLogs {
        /**
         * The S3 bucket name to store the logs in.
         */
        bucket: string;
        /**
         * Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
         */
        enabled?: boolean;
        /**
         * The S3 bucket prefix. Logs are stored in the root if not configured.
         */
        prefix?: string;
    }

    export interface LoadBalancerSubnetMapping {
        /**
         * The allocation ID of the Elastic IP address.
         */
        allocationId?: string;
        outpostId: string;
        /**
         * A private ipv4 address within the subnet to assign to the internal-facing load balancer.
         */
        privateIpv4Address?: string;
        /**
         * The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
         */
        subnetId: string;
    }

    export interface TargetGroupHealthCheck {
        /**
         * Boolean to enable / disable `stickiness`. Default is `true`
         */
        enabled?: boolean;
        /**
         * The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
         */
        healthyThreshold?: number;
        /**
         * The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
         */
        interval?: number;
        /**
         * The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
         */
        matcher: string;
        /**
         * The destination for the health check request. Applies to only HTTP/HTTPS.
         */
        path: string;
        /**
         * The port on which targets receive traffic, unless overridden when registering a specific target. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        port?: string;
        /**
         * The protocol to use for routing traffic to the targets. Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        protocol?: string;
        /**
         * The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
         */
        timeout: number;
        /**
         * The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
         */
        unhealthyThreshold?: number;
    }

    export interface TargetGroupStickiness {
        /**
         * Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
         */
        cookieDuration?: number;
        /**
         * Indicates whether  health checks are enabled. Defaults to true.
         */
        enabled?: boolean;
        /**
         * The type of sticky sessions. The only current possible values are `lbCookie` for ALBs and `sourceIp` for NLBs.
         */
        type: string;
    }
}

export namespace appmesh {
    export interface GatewayRouteSpec {
        /**
         * The specification of a gRPC gateway route.
         */
        grpcRoute?: outputs.appmesh.GatewayRouteSpecGrpcRoute;
        /**
         * The specification of an HTTP/2 gateway route.
         */
        http2Route?: outputs.appmesh.GatewayRouteSpecHttp2Route;
        /**
         * The specification of an HTTP gateway route.
         */
        httpRoute?: outputs.appmesh.GatewayRouteSpecHttpRoute;
    }

    export interface GatewayRouteSpecGrpcRoute {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.GatewayRouteSpecGrpcRouteAction;
        /**
         * The criteria for determining a request match.
         */
        match: outputs.appmesh.GatewayRouteSpecGrpcRouteMatch;
    }

    export interface GatewayRouteSpecGrpcRouteAction {
        /**
         * The target that traffic is routed to when a request matches the gateway route.
         */
        target: outputs.appmesh.GatewayRouteSpecGrpcRouteActionTarget;
    }

    export interface GatewayRouteSpecGrpcRouteActionTarget {
        /**
         * The virtual service gateway route target.
         */
        virtualService: outputs.appmesh.GatewayRouteSpecGrpcRouteActionTargetVirtualService;
    }

    export interface GatewayRouteSpecGrpcRouteActionTargetVirtualService {
        /**
         * The name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
         */
        virtualServiceName: string;
    }

    export interface GatewayRouteSpecGrpcRouteMatch {
        /**
         * The fully qualified domain name for the service to match from the request.
         */
        serviceName: string;
    }

    export interface GatewayRouteSpecHttp2Route {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.GatewayRouteSpecHttp2RouteAction;
        /**
         * The criteria for determining a request match.
         */
        match: outputs.appmesh.GatewayRouteSpecHttp2RouteMatch;
    }

    export interface GatewayRouteSpecHttp2RouteAction {
        /**
         * The target that traffic is routed to when a request matches the gateway route.
         */
        target: outputs.appmesh.GatewayRouteSpecHttp2RouteActionTarget;
    }

    export interface GatewayRouteSpecHttp2RouteActionTarget {
        /**
         * The virtual service gateway route target.
         */
        virtualService: outputs.appmesh.GatewayRouteSpecHttp2RouteActionTargetVirtualService;
    }

    export interface GatewayRouteSpecHttp2RouteActionTargetVirtualService {
        /**
         * The name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
         */
        virtualServiceName: string;
    }

    export interface GatewayRouteSpecHttp2RouteMatch {
        /**
         * Specifies the path to match requests with. This parameter must always start with `/`, which by itself matches all requests to the virtual service name.
         */
        prefix: string;
    }

    export interface GatewayRouteSpecHttpRoute {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.GatewayRouteSpecHttpRouteAction;
        /**
         * The criteria for determining a request match.
         */
        match: outputs.appmesh.GatewayRouteSpecHttpRouteMatch;
    }

    export interface GatewayRouteSpecHttpRouteAction {
        /**
         * The target that traffic is routed to when a request matches the gateway route.
         */
        target: outputs.appmesh.GatewayRouteSpecHttpRouteActionTarget;
    }

    export interface GatewayRouteSpecHttpRouteActionTarget {
        /**
         * The virtual service gateway route target.
         */
        virtualService: outputs.appmesh.GatewayRouteSpecHttpRouteActionTargetVirtualService;
    }

    export interface GatewayRouteSpecHttpRouteActionTargetVirtualService {
        /**
         * The name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
         */
        virtualServiceName: string;
    }

    export interface GatewayRouteSpecHttpRouteMatch {
        /**
         * Specifies the path to match requests with. This parameter must always start with `/`, which by itself matches all requests to the virtual service name.
         */
        prefix: string;
    }

    export interface MeshSpec {
        /**
         * The egress filter rules for the service mesh.
         */
        egressFilter?: outputs.appmesh.MeshSpecEgressFilter;
    }

    export interface MeshSpecEgressFilter {
        /**
         * The egress filter type. By default, the type is `DROP_ALL`.
         * Valid values are `ALLOW_ALL` and `DROP_ALL`.
         */
        type?: string;
    }

    export interface RouteSpec {
        /**
         * The gRPC routing information for the route.
         */
        grpcRoute?: outputs.appmesh.RouteSpecGrpcRoute;
        /**
         * The HTTP/2 routing information for the route.
         */
        http2Route?: outputs.appmesh.RouteSpecHttp2Route;
        /**
         * The HTTP routing information for the route.
         */
        httpRoute?: outputs.appmesh.RouteSpecHttpRoute;
        /**
         * The priority for the route, between `0` and `1000`.
         * Routes are matched based on the specified value, where `0` is the highest priority.
         */
        priority?: number;
        /**
         * The TCP routing information for the route.
         */
        tcpRoute?: outputs.appmesh.RouteSpecTcpRoute;
    }

    export interface RouteSpecGrpcRoute {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.RouteSpecGrpcRouteAction;
        /**
         * The criteria for determining an gRPC request match.
         */
        match: outputs.appmesh.RouteSpecGrpcRouteMatch;
        /**
         * The retry policy.
         */
        retryPolicy?: outputs.appmesh.RouteSpecGrpcRouteRetryPolicy;
        /**
         * The types of timeouts.
         */
        timeout?: outputs.appmesh.RouteSpecGrpcRouteTimeout;
    }

    export interface RouteSpecGrpcRouteAction {
        /**
         * The targets that traffic is routed to when a request matches the route.
         * You can specify one or more targets and their relative weights with which to distribute traffic.
         */
        weightedTargets: outputs.appmesh.RouteSpecGrpcRouteActionWeightedTarget[];
    }

    export interface RouteSpecGrpcRouteActionWeightedTarget {
        /**
         * The virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
         */
        virtualNode: string;
        /**
         * The relative weight of the weighted target. An integer between 0 and 100.
         */
        weight: number;
    }

    export interface RouteSpecGrpcRouteMatch {
        /**
         * The data to match from the gRPC request.
         */
        metadatas?: outputs.appmesh.RouteSpecGrpcRouteMatchMetadata[];
        /**
         * The method name to match from the request. If you specify a name, you must also specify a `serviceName`.
         */
        methodName?: string;
        /**
         * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         */
        prefix?: string;
        /**
         * The fully qualified domain name for the service to match from the request.
         */
        serviceName?: string;
    }

    export interface RouteSpecGrpcRouteMatchMetadata {
        /**
         * If `true`, the match is on the opposite of the `match` criteria. Default is `false`.
         */
        invert?: boolean;
        /**
         * The data to match from the request.
         */
        match?: outputs.appmesh.RouteSpecGrpcRouteMatchMetadataMatch;
        /**
         * The name of the route. Must be between 1 and 50 characters in length.
         */
        name: string;
    }

    export interface RouteSpecGrpcRouteMatchMetadataMatch {
        /**
         * The value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
         */
        exact?: string;
        /**
         * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         */
        prefix?: string;
        /**
         * The object that specifies the range of numbers that the value sent by the client must be included in.
         */
        range?: outputs.appmesh.RouteSpecGrpcRouteMatchMetadataMatchRange;
        /**
         * The value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
         */
        regex?: string;
        /**
         * The value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
         */
        suffix?: string;
    }

    export interface RouteSpecGrpcRouteMatchMetadataMatchRange {
        /**
         * The end of the range.
         */
        end: number;
        /**
         * The start of the range.
         */
        start: number;
    }

    export interface RouteSpecGrpcRouteRetryPolicy {
        /**
         * List of gRPC retry events.
         * Valid values: `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
         */
        grpcRetryEvents?: string[];
        /**
         * List of HTTP retry events.
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         */
        httpRetryEvents?: string[];
        /**
         * The maximum number of retries.
         */
        maxRetries: number;
        /**
         * The per-retry timeout.
         */
        perRetryTimeout: outputs.appmesh.RouteSpecGrpcRouteRetryPolicyPerRetryTimeout;
        /**
         * List of TCP retry events. The only valid value is `connection-error`.
         */
        tcpRetryEvents?: string[];
    }

    export interface RouteSpecGrpcRouteRetryPolicyPerRetryTimeout {
        /**
         * Retry unit. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * Retry value.
         */
        value: number;
    }

    export interface RouteSpecGrpcRouteTimeout {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.RouteSpecGrpcRouteTimeoutIdle;
        /**
         * The per request timeout.
         */
        perRequest?: outputs.appmesh.RouteSpecGrpcRouteTimeoutPerRequest;
    }

    export interface RouteSpecGrpcRouteTimeoutIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface RouteSpecGrpcRouteTimeoutPerRequest {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface RouteSpecHttp2Route {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.RouteSpecHttp2RouteAction;
        /**
         * The criteria for determining an gRPC request match.
         */
        match: outputs.appmesh.RouteSpecHttp2RouteMatch;
        /**
         * The retry policy.
         */
        retryPolicy?: outputs.appmesh.RouteSpecHttp2RouteRetryPolicy;
        /**
         * The types of timeouts.
         */
        timeout?: outputs.appmesh.RouteSpecHttp2RouteTimeout;
    }

    export interface RouteSpecHttp2RouteAction {
        /**
         * The targets that traffic is routed to when a request matches the route.
         * You can specify one or more targets and their relative weights with which to distribute traffic.
         */
        weightedTargets: outputs.appmesh.RouteSpecHttp2RouteActionWeightedTarget[];
    }

    export interface RouteSpecHttp2RouteActionWeightedTarget {
        /**
         * The virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
         */
        virtualNode: string;
        /**
         * The relative weight of the weighted target. An integer between 0 and 100.
         */
        weight: number;
    }

    export interface RouteSpecHttp2RouteMatch {
        /**
         * The client request headers to match on.
         */
        headers?: outputs.appmesh.RouteSpecHttp2RouteMatchHeader[];
        /**
         * The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
         */
        method?: string;
        /**
         * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         */
        prefix: string;
        /**
         * The client request header scheme to match on. Valid values: `http`, `https`.
         */
        scheme?: string;
    }

    export interface RouteSpecHttp2RouteMatchHeader {
        /**
         * If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
         */
        invert?: boolean;
        /**
         * The method and value to match the header value sent with a request. Specify one match method.
         */
        match?: outputs.appmesh.RouteSpecHttp2RouteMatchHeaderMatch;
        /**
         * A name for the HTTP header in the client request that will be matched on.
         */
        name: string;
    }

    export interface RouteSpecHttp2RouteMatchHeaderMatch {
        /**
         * The value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
         */
        exact?: string;
        /**
         * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         */
        prefix?: string;
        /**
         * The object that specifies the range of numbers that the value sent by the client must be included in.
         */
        range?: outputs.appmesh.RouteSpecHttp2RouteMatchHeaderMatchRange;
        /**
         * The value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
         */
        regex?: string;
        /**
         * The value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
         */
        suffix?: string;
    }

    export interface RouteSpecHttp2RouteMatchHeaderMatchRange {
        /**
         * The end of the range.
         */
        end: number;
        /**
         * The start of the range.
         */
        start: number;
    }

    export interface RouteSpecHttp2RouteRetryPolicy {
        /**
         * List of HTTP retry events.
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         */
        httpRetryEvents?: string[];
        /**
         * The maximum number of retries.
         */
        maxRetries: number;
        /**
         * The per-retry timeout.
         */
        perRetryTimeout: outputs.appmesh.RouteSpecHttp2RouteRetryPolicyPerRetryTimeout;
        /**
         * List of TCP retry events. The only valid value is `connection-error`.
         */
        tcpRetryEvents?: string[];
    }

    export interface RouteSpecHttp2RouteRetryPolicyPerRetryTimeout {
        /**
         * Retry unit. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * Retry value.
         */
        value: number;
    }

    export interface RouteSpecHttp2RouteTimeout {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.RouteSpecHttp2RouteTimeoutIdle;
        /**
         * The per request timeout.
         */
        perRequest?: outputs.appmesh.RouteSpecHttp2RouteTimeoutPerRequest;
    }

    export interface RouteSpecHttp2RouteTimeoutIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface RouteSpecHttp2RouteTimeoutPerRequest {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface RouteSpecHttpRoute {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.RouteSpecHttpRouteAction;
        /**
         * The criteria for determining an HTTP request match.
         */
        match: outputs.appmesh.RouteSpecHttpRouteMatch;
        /**
         * The retry policy.
         */
        retryPolicy?: outputs.appmesh.RouteSpecHttpRouteRetryPolicy;
        /**
         * The types of timeouts.
         */
        timeout?: outputs.appmesh.RouteSpecHttpRouteTimeout;
    }

    export interface RouteSpecHttpRouteAction {
        /**
         * The targets that traffic is routed to when a request matches the route.
         * You can specify one or more targets and their relative weights with which to distribute traffic.
         */
        weightedTargets: outputs.appmesh.RouteSpecHttpRouteActionWeightedTarget[];
    }

    export interface RouteSpecHttpRouteActionWeightedTarget {
        /**
         * The virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
         */
        virtualNode: string;
        /**
         * The relative weight of the weighted target. An integer between 0 and 100.
         */
        weight: number;
    }

    export interface RouteSpecHttpRouteMatch {
        /**
         * The client request headers to match on.
         */
        headers?: outputs.appmesh.RouteSpecHttpRouteMatchHeader[];
        /**
         * The client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
         */
        method?: string;
        /**
         * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         */
        prefix: string;
        /**
         * The client request header scheme to match on. Valid values: `http`, `https`.
         */
        scheme?: string;
    }

    export interface RouteSpecHttpRouteMatchHeader {
        /**
         * If `true`, the match is on the opposite of the `match` method and value. Default is `false`.
         */
        invert?: boolean;
        /**
         * The method and value to match the header value sent with a request. Specify one match method.
         */
        match?: outputs.appmesh.RouteSpecHttpRouteMatchHeaderMatch;
        /**
         * A name for the HTTP header in the client request that will be matched on.
         */
        name: string;
    }

    export interface RouteSpecHttpRouteMatchHeaderMatch {
        /**
         * The value sent by the client must match the specified value exactly. Must be between 1 and 255 characters in length.
         */
        exact?: string;
        /**
         * The value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
         * This parameter must always start with /, which by itself matches all requests to the virtual router service name.
         */
        prefix?: string;
        /**
         * The object that specifies the range of numbers that the value sent by the client must be included in.
         */
        range?: outputs.appmesh.RouteSpecHttpRouteMatchHeaderMatchRange;
        /**
         * The value sent by the client must include the specified characters. Must be between 1 and 255 characters in length.
         */
        regex?: string;
        /**
         * The value sent by the client must end with the specified characters. Must be between 1 and 255 characters in length.
         */
        suffix?: string;
    }

    export interface RouteSpecHttpRouteMatchHeaderMatchRange {
        /**
         * The end of the range.
         */
        end: number;
        /**
         * The start of the range.
         */
        start: number;
    }

    export interface RouteSpecHttpRouteRetryPolicy {
        /**
         * List of HTTP retry events.
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         * Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
         */
        httpRetryEvents?: string[];
        /**
         * The maximum number of retries.
         */
        maxRetries: number;
        /**
         * The per-retry timeout.
         */
        perRetryTimeout: outputs.appmesh.RouteSpecHttpRouteRetryPolicyPerRetryTimeout;
        /**
         * List of TCP retry events. The only valid value is `connection-error`.
         */
        tcpRetryEvents?: string[];
    }

    export interface RouteSpecHttpRouteRetryPolicyPerRetryTimeout {
        /**
         * Retry unit. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * Retry value.
         */
        value: number;
    }

    export interface RouteSpecHttpRouteTimeout {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.RouteSpecHttpRouteTimeoutIdle;
        /**
         * The per request timeout.
         */
        perRequest?: outputs.appmesh.RouteSpecHttpRouteTimeoutPerRequest;
    }

    export interface RouteSpecHttpRouteTimeoutIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface RouteSpecHttpRouteTimeoutPerRequest {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface RouteSpecTcpRoute {
        /**
         * The action to take if a match is determined.
         */
        action: outputs.appmesh.RouteSpecTcpRouteAction;
        /**
         * The types of timeouts.
         */
        timeout?: outputs.appmesh.RouteSpecTcpRouteTimeout;
    }

    export interface RouteSpecTcpRouteAction {
        /**
         * The targets that traffic is routed to when a request matches the route.
         * You can specify one or more targets and their relative weights with which to distribute traffic.
         */
        weightedTargets: outputs.appmesh.RouteSpecTcpRouteActionWeightedTarget[];
    }

    export interface RouteSpecTcpRouteActionWeightedTarget {
        /**
         * The virtual node to associate with the weighted target. Must be between 1 and 255 characters in length.
         */
        virtualNode: string;
        /**
         * The relative weight of the weighted target. An integer between 0 and 100.
         */
        weight: number;
    }

    export interface RouteSpecTcpRouteTimeout {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.RouteSpecTcpRouteTimeoutIdle;
    }

    export interface RouteSpecTcpRouteTimeoutIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualGatewaySpec {
        /**
         * The defaults for backends.
         */
        backendDefaults?: outputs.appmesh.VirtualGatewaySpecBackendDefaults;
        /**
         * The listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
         */
        listener: outputs.appmesh.VirtualGatewaySpecListener;
        /**
         * The inbound and outbound access logging information for the virtual gateway.
         */
        logging?: outputs.appmesh.VirtualGatewaySpecLogging;
    }

    export interface VirtualGatewaySpecBackendDefaults {
        /**
         * The default client policy for virtual gateway backends.
         */
        clientPolicy?: outputs.appmesh.VirtualGatewaySpecBackendDefaultsClientPolicy;
    }

    export interface VirtualGatewaySpecBackendDefaultsClientPolicy {
        /**
         * The Transport Layer Security (TLS) client policy.
         */
        tls?: outputs.appmesh.VirtualGatewaySpecBackendDefaultsClientPolicyTls;
    }

    export interface VirtualGatewaySpecBackendDefaultsClientPolicyTls {
        enforce?: boolean;
        /**
         * One or more ports that the policy is enforced for.
         */
        ports?: number[];
        /**
         * The TLS validation context.
         */
        validation: outputs.appmesh.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation;
    }

    export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidation {
        /**
         * The TLS validation context trust.
         */
        trust: outputs.appmesh.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust;
    }

    export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrust {
        /**
         * The TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
         */
        acm?: outputs.appmesh.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm;
        /**
         * The TLS validation context trust for a local file.
         */
        file?: outputs.appmesh.VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile;
    }

    export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
        /**
         * One or more ACM Amazon Resource Name (ARN)s.
         */
        certificateAuthorityArns: string[];
    }

    export interface VirtualGatewaySpecBackendDefaultsClientPolicyTlsValidationTrustFile {
        /**
         * The certificate chain for the certificate. Must be between 1 and 255 characters in length.
         */
        certificateChain: string;
    }

    export interface VirtualGatewaySpecListener {
        /**
         * The connection pool information for the listener.
         */
        connectionPool?: outputs.appmesh.VirtualGatewaySpecListenerConnectionPool;
        /**
         * The health check information for the listener.
         */
        healthCheck?: outputs.appmesh.VirtualGatewaySpecListenerHealthCheck;
        /**
         * The port mapping information for the listener.
         */
        portMapping: outputs.appmesh.VirtualGatewaySpecListenerPortMapping;
        /**
         * The Transport Layer Security (TLS) properties for the listener
         */
        tls?: outputs.appmesh.VirtualGatewaySpecListenerTls;
    }

    export interface VirtualGatewaySpecListenerConnectionPool {
        /**
         * Connection pool information for gRPC listeners.
         */
        grpc?: outputs.appmesh.VirtualGatewaySpecListenerConnectionPoolGrpc;
        /**
         * Connection pool information for HTTP listeners.
         */
        http?: outputs.appmesh.VirtualGatewaySpecListenerConnectionPoolHttp;
        /**
         * Connection pool information for HTTP2 listeners.
         */
        http2?: outputs.appmesh.VirtualGatewaySpecListenerConnectionPoolHttp2;
    }

    export interface VirtualGatewaySpecListenerConnectionPoolGrpc {
        /**
         * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
         */
        maxRequests: number;
    }

    export interface VirtualGatewaySpecListenerConnectionPoolHttp {
        /**
         * Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
         */
        maxConnections: number;
        /**
         * Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
         */
        maxPendingRequests?: number;
    }

    export interface VirtualGatewaySpecListenerConnectionPoolHttp2 {
        /**
         * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
         */
        maxRequests: number;
    }

    export interface VirtualGatewaySpecListenerHealthCheck {
        /**
         * The number of consecutive successful health checks that must occur before declaring listener healthy.
         */
        healthyThreshold: number;
        /**
         * The time period in milliseconds between each health check execution.
         */
        intervalMillis: number;
        /**
         * The destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
         */
        path?: string;
        /**
         * The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
         */
        port: number;
        /**
         * The protocol for the health check request. Valid values are `http`, `http2`, and `grpc`.
         */
        protocol: string;
        /**
         * The amount of time to wait when receiving a response from the health check, in milliseconds.
         */
        timeoutMillis: number;
        /**
         * The number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
         */
        unhealthyThreshold: number;
    }

    export interface VirtualGatewaySpecListenerPortMapping {
        /**
         * The port used for the port mapping.
         */
        port: number;
        /**
         * The protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
         */
        protocol: string;
    }

    export interface VirtualGatewaySpecListenerTls {
        /**
         * The listener's TLS certificate.
         */
        certificate: outputs.appmesh.VirtualGatewaySpecListenerTlsCertificate;
        /**
         * The listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
         */
        mode: string;
    }

    export interface VirtualGatewaySpecListenerTlsCertificate {
        /**
         * An AWS Certificate Manager (ACM) certificate.
         */
        acm?: outputs.appmesh.VirtualGatewaySpecListenerTlsCertificateAcm;
        /**
         * A local file certificate.
         */
        file?: outputs.appmesh.VirtualGatewaySpecListenerTlsCertificateFile;
    }

    export interface VirtualGatewaySpecListenerTlsCertificateAcm {
        /**
         * The Amazon Resource Name (ARN) for the certificate.
         */
        certificateArn: string;
    }

    export interface VirtualGatewaySpecListenerTlsCertificateFile {
        /**
         * The certificate chain for the certificate. Must be between 1 and 255 characters in length.
         */
        certificateChain: string;
        /**
         * The private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on. Must be between 1 and 255 characters in length.
         */
        privateKey: string;
    }

    export interface VirtualGatewaySpecLogging {
        /**
         * The access log configuration for a virtual gateway.
         */
        accessLog?: outputs.appmesh.VirtualGatewaySpecLoggingAccessLog;
    }

    export interface VirtualGatewaySpecLoggingAccessLog {
        /**
         * The file object to send virtual gateway access logs to.
         */
        file?: outputs.appmesh.VirtualGatewaySpecLoggingAccessLogFile;
    }

    export interface VirtualGatewaySpecLoggingAccessLogFile {
        /**
         * The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
         */
        path: string;
    }

    export interface VirtualNodeSpec {
        /**
         * The defaults for backends.
         */
        backendDefaults?: outputs.appmesh.VirtualNodeSpecBackendDefaults;
        /**
         * The backends to which the virtual node is expected to send outbound traffic.
         */
        backends?: outputs.appmesh.VirtualNodeSpecBackend[];
        /**
         * The listeners from which the virtual node is expected to receive inbound traffic.
         */
        listener?: outputs.appmesh.VirtualNodeSpecListener;
        /**
         * The inbound and outbound access logging information for the virtual node.
         */
        logging?: outputs.appmesh.VirtualNodeSpecLogging;
        /**
         * The service discovery information for the virtual node.
         */
        serviceDiscovery?: outputs.appmesh.VirtualNodeSpecServiceDiscovery;
    }

    export interface VirtualNodeSpecBackend {
        /**
         * Specifies a virtual service to use as a backend for a virtual node.
         */
        virtualService: outputs.appmesh.VirtualNodeSpecBackendVirtualService;
    }

    export interface VirtualNodeSpecBackendDefaults {
        /**
         * The default client policy for virtual service backends. See above for details.
         */
        clientPolicy?: outputs.appmesh.VirtualNodeSpecBackendDefaultsClientPolicy;
    }

    export interface VirtualNodeSpecBackendDefaultsClientPolicy {
        /**
         * The Transport Layer Security (TLS) client policy.
         */
        tls?: outputs.appmesh.VirtualNodeSpecBackendDefaultsClientPolicyTls;
    }

    export interface VirtualNodeSpecBackendDefaultsClientPolicyTls {
        enforce?: boolean;
        /**
         * One or more ports that the policy is enforced for.
         */
        ports?: number[];
        /**
         * The TLS validation context.
         */
        validation: outputs.appmesh.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation;
    }

    export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidation {
        /**
         * The TLS validation context trust.
         */
        trust: outputs.appmesh.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust;
    }

    export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrust {
        /**
         * The TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
         */
        acm?: outputs.appmesh.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm;
        /**
         * The TLS validation context trust for a local file.
         */
        file?: outputs.appmesh.VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile;
    }

    export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
        /**
         * One or more ACM Amazon Resource Name (ARN)s.
         */
        certificateAuthorityArns: string[];
    }

    export interface VirtualNodeSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
        /**
         * The certificate chain for the certificate. Must be between 1 and 255 characters in length.
         */
        certificateChain: string;
    }

    export interface VirtualNodeSpecBackendVirtualService {
        /**
         * The client policy for the backend.
         */
        clientPolicy?: outputs.appmesh.VirtualNodeSpecBackendVirtualServiceClientPolicy;
        /**
         * The name of the virtual service that is acting as a virtual node backend. Must be between 1 and 255 characters in length.
         */
        virtualServiceName: string;
    }

    export interface VirtualNodeSpecBackendVirtualServiceClientPolicy {
        /**
         * The Transport Layer Security (TLS) client policy.
         */
        tls?: outputs.appmesh.VirtualNodeSpecBackendVirtualServiceClientPolicyTls;
    }

    export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTls {
        enforce?: boolean;
        /**
         * One or more ports that the policy is enforced for.
         */
        ports?: number[];
        /**
         * The TLS validation context.
         */
        validation: outputs.appmesh.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation;
    }

    export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidation {
        /**
         * The TLS validation context trust.
         */
        trust: outputs.appmesh.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust;
    }

    export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrust {
        /**
         * The TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
         */
        acm?: outputs.appmesh.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm;
        /**
         * The TLS validation context trust for a local file.
         */
        file?: outputs.appmesh.VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile;
    }

    export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustAcm {
        /**
         * One or more ACM Amazon Resource Name (ARN)s.
         */
        certificateAuthorityArns: string[];
    }

    export interface VirtualNodeSpecBackendVirtualServiceClientPolicyTlsValidationTrustFile {
        /**
         * The certificate chain for the certificate. Must be between 1 and 255 characters in length.
         */
        certificateChain: string;
    }

    export interface VirtualNodeSpecListener {
        /**
         * The connection pool information for the listener.
         */
        connectionPool?: outputs.appmesh.VirtualNodeSpecListenerConnectionPool;
        /**
         * The health check information for the listener.
         */
        healthCheck?: outputs.appmesh.VirtualNodeSpecListenerHealthCheck;
        /**
         * The outlier detection information for the listener.
         */
        outlierDetection?: outputs.appmesh.VirtualNodeSpecListenerOutlierDetection;
        /**
         * The port mapping information for the listener.
         */
        portMapping: outputs.appmesh.VirtualNodeSpecListenerPortMapping;
        /**
         * Timeouts for different protocols.
         */
        timeout?: outputs.appmesh.VirtualNodeSpecListenerTimeout;
        /**
         * The Transport Layer Security (TLS) properties for the listener
         */
        tls?: outputs.appmesh.VirtualNodeSpecListenerTls;
    }

    export interface VirtualNodeSpecListenerConnectionPool {
        /**
         * Connection pool information for gRPC listeners.
         */
        grpc?: outputs.appmesh.VirtualNodeSpecListenerConnectionPoolGrpc;
        /**
         * Connection pool information for HTTP listeners.
         */
        http?: outputs.appmesh.VirtualNodeSpecListenerConnectionPoolHttp;
        /**
         * Connection pool information for HTTP2 listeners.
         */
        http2?: outputs.appmesh.VirtualNodeSpecListenerConnectionPoolHttp2;
        /**
         * Connection pool information for TCP listeners.
         */
        tcp?: outputs.appmesh.VirtualNodeSpecListenerConnectionPoolTcp;
    }

    export interface VirtualNodeSpecListenerConnectionPoolGrpc {
        /**
         * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
         */
        maxRequests: number;
    }

    export interface VirtualNodeSpecListenerConnectionPoolHttp {
        /**
         * Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
         */
        maxConnections: number;
        /**
         * Number of overflowing requests after `maxConnections` Envoy will queue to upstream cluster. Minimum value of `1`.
         */
        maxPendingRequests?: number;
    }

    export interface VirtualNodeSpecListenerConnectionPoolHttp2 {
        /**
         * Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of `1`.
         */
        maxRequests: number;
    }

    export interface VirtualNodeSpecListenerConnectionPoolTcp {
        /**
         * Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of `1`.
         */
        maxConnections: number;
    }

    export interface VirtualNodeSpecListenerHealthCheck {
        /**
         * The number of consecutive successful health checks that must occur before declaring listener healthy.
         */
        healthyThreshold: number;
        /**
         * The time period in milliseconds between each health check execution.
         */
        intervalMillis: number;
        /**
         * The destination path for the health check request. This is only required if the specified protocol is `http` or `http2`.
         */
        path?: string;
        /**
         * The destination port for the health check request. This port must match the port defined in the `portMapping` for the listener.
         */
        port: number;
        /**
         * The protocol for the health check request. Valid values are `http`, `http2`, `tcp` and `grpc`.
         */
        protocol: string;
        /**
         * The amount of time to wait when receiving a response from the health check, in milliseconds.
         */
        timeoutMillis: number;
        /**
         * The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
         */
        unhealthyThreshold: number;
    }

    export interface VirtualNodeSpecListenerOutlierDetection {
        /**
         * The base amount of time for which a host is ejected.
         */
        baseEjectionDuration: outputs.appmesh.VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration;
        /**
         * The time interval between ejection sweep analysis.
         */
        interval: outputs.appmesh.VirtualNodeSpecListenerOutlierDetectionInterval;
        /**
         * Maximum percentage of hosts in load balancing pool for upstream service that can be ejected. Will eject at least one host regardless of the value.
         * Minimum value of `0`. Maximum value of `100`.
         */
        maxEjectionPercent: number;
        /**
         * Number of consecutive `5xx` errors required for ejection. Minimum value of `1`.
         */
        maxServerErrors: number;
    }

    export interface VirtualNodeSpecListenerOutlierDetectionBaseEjectionDuration {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerOutlierDetectionInterval {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerPortMapping {
        /**
         * The port used for the port mapping.
         */
        port: number;
        /**
         * The protocol used for the port mapping. Valid values are `http`, `http2`, `tcp` and `grpc`.
         */
        protocol: string;
    }

    export interface VirtualNodeSpecListenerTimeout {
        /**
         * Timeouts for gRPC listeners.
         */
        grpc?: outputs.appmesh.VirtualNodeSpecListenerTimeoutGrpc;
        /**
         * Timeouts for HTTP listeners.
         */
        http?: outputs.appmesh.VirtualNodeSpecListenerTimeoutHttp;
        /**
         * Timeouts for HTTP2 listeners.
         */
        http2?: outputs.appmesh.VirtualNodeSpecListenerTimeoutHttp2;
        /**
         * Timeouts for TCP listeners.
         */
        tcp?: outputs.appmesh.VirtualNodeSpecListenerTimeoutTcp;
    }

    export interface VirtualNodeSpecListenerTimeoutGrpc {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.VirtualNodeSpecListenerTimeoutGrpcIdle;
        /**
         * The per request timeout.
         */
        perRequest?: outputs.appmesh.VirtualNodeSpecListenerTimeoutGrpcPerRequest;
    }

    export interface VirtualNodeSpecListenerTimeoutGrpcIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTimeoutGrpcPerRequest {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTimeoutHttp {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.VirtualNodeSpecListenerTimeoutHttpIdle;
        /**
         * The per request timeout.
         */
        perRequest?: outputs.appmesh.VirtualNodeSpecListenerTimeoutHttpPerRequest;
    }

    export interface VirtualNodeSpecListenerTimeoutHttp2 {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.VirtualNodeSpecListenerTimeoutHttp2Idle;
        /**
         * The per request timeout.
         */
        perRequest?: outputs.appmesh.VirtualNodeSpecListenerTimeoutHttp2PerRequest;
    }

    export interface VirtualNodeSpecListenerTimeoutHttp2Idle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTimeoutHttp2PerRequest {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTimeoutHttpIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTimeoutHttpPerRequest {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTimeoutTcp {
        /**
         * The idle timeout. An idle timeout bounds the amount of time that a connection may be idle.
         */
        idle?: outputs.appmesh.VirtualNodeSpecListenerTimeoutTcpIdle;
    }

    export interface VirtualNodeSpecListenerTimeoutTcpIdle {
        /**
         * The unit of time. Valid values: `ms`, `s`.
         */
        unit: string;
        /**
         * The number of time units. Minimum value of `0`.
         */
        value: number;
    }

    export interface VirtualNodeSpecListenerTls {
        /**
         * The listener's TLS certificate.
         */
        certificate: outputs.appmesh.VirtualNodeSpecListenerTlsCertificate;
        /**
         * The listener's TLS mode. Valid values: `DISABLED`, `PERMISSIVE`, `STRICT`.
         */
        mode: string;
    }

    export interface VirtualNodeSpecListenerTlsCertificate {
        /**
         * An AWS Certificate Manager (ACM) certificate.
         */
        acm?: outputs.appmesh.VirtualNodeSpecListenerTlsCertificateAcm;
        /**
         * A local file certificate.
         */
        file?: outputs.appmesh.VirtualNodeSpecListenerTlsCertificateFile;
    }

    export interface VirtualNodeSpecListenerTlsCertificateAcm {
        /**
         * The Amazon Resource Name (ARN) for the certificate.
         */
        certificateArn: string;
    }

    export interface VirtualNodeSpecListenerTlsCertificateFile {
        /**
         * The certificate chain for the certificate. Must be between 1 and 255 characters in length.
         */
        certificateChain: string;
        /**
         * The private key for a certificate stored on the file system of the virtual node that the proxy is running on. Must be between 1 and 255 characters in length.
         */
        privateKey: string;
    }

    export interface VirtualNodeSpecLogging {
        /**
         * The access log configuration for a virtual node.
         */
        accessLog?: outputs.appmesh.VirtualNodeSpecLoggingAccessLog;
    }

    export interface VirtualNodeSpecLoggingAccessLog {
        /**
         * The file object to send virtual node access logs to.
         */
        file?: outputs.appmesh.VirtualNodeSpecLoggingAccessLogFile;
    }

    export interface VirtualNodeSpecLoggingAccessLogFile {
        /**
         * The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out. Must be between 1 and 255 characters in length.
         */
        path: string;
    }

    export interface VirtualNodeSpecServiceDiscovery {
        /**
         * Specifies any AWS Cloud Map information for the virtual node.
         */
        awsCloudMap?: outputs.appmesh.VirtualNodeSpecServiceDiscoveryAwsCloudMap;
        /**
         * Specifies the DNS service name for the virtual node.
         */
        dns?: outputs.appmesh.VirtualNodeSpecServiceDiscoveryDns;
    }

    export interface VirtualNodeSpecServiceDiscoveryAwsCloudMap {
        /**
         * A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
         */
        attributes?: {[key: string]: string};
        /**
         * The name of the AWS Cloud Map namespace to use.
         * Use the `aws.servicediscovery.HttpNamespace` resource to configure a Cloud Map namespace. Must be between 1 and 1024 characters in length.
         */
        namespaceName: string;
        /**
         * The name of the AWS Cloud Map service to use. Use the `aws.servicediscovery.Service` resource to configure a Cloud Map service. Must be between 1 and 1024 characters in length.
         */
        serviceName: string;
    }

    export interface VirtualNodeSpecServiceDiscoveryDns {
        /**
         * The DNS host name for your virtual node.
         */
        hostname: string;
    }

    export interface VirtualRouterSpec {
        /**
         * The listeners that the virtual router is expected to receive inbound traffic from.
         * Currently only one listener is supported per virtual router.
         */
        listener: outputs.appmesh.VirtualRouterSpecListener;
    }

    export interface VirtualRouterSpecListener {
        /**
         * The port mapping information for the listener.
         */
        portMapping: outputs.appmesh.VirtualRouterSpecListenerPortMapping;
    }

    export interface VirtualRouterSpecListenerPortMapping {
        /**
         * The port used for the port mapping.
         */
        port: number;
        /**
         * The protocol used for the port mapping. Valid values are `http`,`http2`, `tcp` and `grpc`.
         */
        protocol: string;
    }

    export interface VirtualServiceSpec {
        /**
         * The App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
         */
        provider?: outputs.appmesh.VirtualServiceSpecProvider;
    }

    export interface VirtualServiceSpecProvider {
        /**
         * The virtual node associated with a virtual service.
         */
        virtualNode?: outputs.appmesh.VirtualServiceSpecProviderVirtualNode;
        /**
         * The virtual router associated with a virtual service.
         */
        virtualRouter?: outputs.appmesh.VirtualServiceSpecProviderVirtualRouter;
    }

    export interface VirtualServiceSpecProviderVirtualNode {
        /**
         * The name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
         */
        virtualNodeName: string;
    }

    export interface VirtualServiceSpecProviderVirtualRouter {
        /**
         * The name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
         */
        virtualRouterName: string;
    }
}

export namespace appsync {
    export interface DataSourceDynamodbConfig {
        /**
         * AWS region of Elasticsearch domain. Defaults to current region.
         */
        region: string;
        /**
         * Name of the DynamoDB table.
         */
        tableName: string;
        /**
         * Set to `true` to use Amazon Cognito credentials with this data source.
         */
        useCallerCredentials?: boolean;
    }

    export interface DataSourceElasticsearchConfig {
        /**
         * HTTP URL.
         */
        endpoint: string;
        /**
         * AWS region of Elasticsearch domain. Defaults to current region.
         */
        region: string;
    }

    export interface DataSourceHttpConfig {
        /**
         * HTTP URL.
         */
        endpoint: string;
    }

    export interface DataSourceLambdaConfig {
        /**
         * The ARN for the Lambda function.
         */
        functionArn: string;
    }

    export interface GraphQLApiAdditionalAuthenticationProvider {
        /**
         * The authentication type. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`
         */
        authenticationType: string;
        /**
         * Nested argument containing OpenID Connect configuration. Defined below.
         */
        openidConnectConfig?: outputs.appsync.GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig;
        /**
         * The Amazon Cognito User Pool configuration. Defined below.
         */
        userPoolConfig?: outputs.appsync.GraphQLApiAdditionalAuthenticationProviderUserPoolConfig;
    }

    export interface GraphQLApiAdditionalAuthenticationProviderOpenidConnectConfig {
        /**
         * Number of milliseconds a token is valid after being authenticated.
         */
        authTtl?: number;
        /**
         * Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
         */
        clientId?: string;
        /**
         * Number of milliseconds a token is valid after being issued to a user.
         */
        iatTtl?: number;
        /**
         * Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
         */
        issuer: string;
    }

    export interface GraphQLApiAdditionalAuthenticationProviderUserPoolConfig {
        /**
         * A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
         */
        appIdClientRegex?: string;
        /**
         * The AWS region in which the user pool was created.
         */
        awsRegion: string;
        /**
         * The user pool ID.
         */
        userPoolId: string;
    }

    export interface GraphQLApiLogConfig {
        /**
         * Amazon Resource Name of the service role that AWS AppSync will assume to publish to Amazon CloudWatch logs in your account.
         */
        cloudwatchLogsRoleArn: string;
        /**
         * Set to TRUE to exclude sections that contain information such as headers, context, and evaluated mapping templates, regardless of logging  level. Valid values: `true`, `false`. Default value: `false`
         */
        excludeVerboseContent?: boolean;
        /**
         * Field logging level. Valid values: `ALL`, `ERROR`, `NONE`.
         */
        fieldLogLevel: string;
    }

    export interface GraphQLApiOpenidConnectConfig {
        /**
         * Number of milliseconds a token is valid after being authenticated.
         */
        authTtl?: number;
        /**
         * Client identifier of the Relying party at the OpenID identity provider. This identifier is typically obtained when the Relying party is registered with the OpenID identity provider. You can specify a regular expression so the AWS AppSync can validate against multiple client identifiers at a time.
         */
        clientId?: string;
        /**
         * Number of milliseconds a token is valid after being issued to a user.
         */
        iatTtl?: number;
        /**
         * Issuer for the OpenID Connect configuration. The issuer returned by discovery MUST exactly match the value of iss in the ID Token.
         */
        issuer: string;
    }

    export interface GraphQLApiUserPoolConfig {
        /**
         * A regular expression for validating the incoming Amazon Cognito User Pool app client ID.
         */
        appIdClientRegex?: string;
        /**
         * The AWS region in which the user pool was created.
         */
        awsRegion: string;
        /**
         * The action that you want your GraphQL API to take when a request that uses Amazon Cognito User Pool authentication doesn't match the Amazon Cognito User Pool configuration. Valid: `ALLOW` and `DENY`
         */
        defaultAction: string;
        /**
         * The user pool ID.
         */
        userPoolId: string;
    }

    export interface ResolverCachingConfig {
        /**
         * The list of caching key.
         */
        cachingKeys?: string[];
        /**
         * The TTL in seconds.
         */
        ttl?: number;
    }

    export interface ResolverPipelineConfig {
        /**
         * The list of Function ID.
         */
        functions?: string[];
    }
}

export namespace athena {
    export interface DatabaseEncryptionConfiguration {
        /**
         * The type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
         */
        encryptionOption: string;
        /**
         * The KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.
         */
        kmsKey?: string;
    }

    export interface WorkgroupConfiguration {
        /**
         * Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least `10485760`.
         */
        bytesScannedCutoffPerQuery?: number;
        /**
         * Boolean whether the settings for the workgroup override client-side settings. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html). Defaults to `true`.
         */
        enforceWorkgroupConfiguration?: boolean;
        /**
         * Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to `true`.
         */
        publishCloudwatchMetricsEnabled?: boolean;
        /**
         * Configuration block with result settings. Documented below.
         */
        resultConfiguration?: outputs.athena.WorkgroupConfigurationResultConfiguration;
    }

    export interface WorkgroupConfigurationResultConfiguration {
        /**
         * Configuration block with encryption settings. Documented below.
         */
        encryptionConfiguration?: outputs.athena.WorkgroupConfigurationResultConfigurationEncryptionConfiguration;
        /**
         * The location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/`. For more information, see [Queries and Query Result Files](https://docs.aws.amazon.com/athena/latest/ug/querying.html).
         */
        outputLocation?: string;
    }

    export interface WorkgroupConfigurationResultConfigurationEncryptionConfiguration {
        /**
         * Indicates whether Amazon S3 server-side encryption with Amazon S3-managed keys (`SSE_S3`), server-side encryption with KMS-managed keys (`SSE_KMS`), or client-side encryption with KMS-managed keys (`CSE_KMS`) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
         */
        encryptionOption?: string;
        /**
         * For `SSE_KMS` and `CSE_KMS`, this is the KMS key Amazon Resource Name (ARN).
         */
        kmsKeyArn?: string;
    }
}

export namespace autoscaling {
    export interface GroupInitialLifecycleHook {
        defaultResult: string;
        heartbeatTimeout?: number;
        lifecycleTransition: string;
        /**
         * The name of the auto scaling group. By default generated by this provider.
         */
        name: string;
        notificationMetadata?: string;
        notificationTargetArn?: string;
        roleArn?: string;
    }

    export interface GroupLaunchTemplate {
        /**
         * The ID of the launch template. Conflicts with `name`.
         */
        id: string;
        /**
         * The name of the auto scaling group. By default generated by this provider.
         */
        name: string;
        /**
         * Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
         */
        version?: string;
    }

    export interface GroupMixedInstancesPolicy {
        /**
         * Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
         */
        instancesDistribution: outputs.autoscaling.GroupMixedInstancesPolicyInstancesDistribution;
        /**
         * Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
         */
        launchTemplate: outputs.autoscaling.GroupMixedInstancesPolicyLaunchTemplate;
    }

    export interface GroupMixedInstancesPolicyInstancesDistribution {
        /**
         * Strategy to use when launching on-demand instances. Valid values: `prioritized`. Default: `prioritized`.
         */
        onDemandAllocationStrategy: string;
        /**
         * Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: `0`.
         */
        onDemandBaseCapacity: number;
        /**
         * Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: `0`.
         */
        onDemandPercentageAboveBaseCapacity: number;
        /**
         * How to allocate capacity across the Spot pools. Valid values: `lowest-price`, `capacity-optimized`. Default: `lowest-price`.
         */
        spotAllocationStrategy: string;
        /**
         * Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Default: `2`.
         */
        spotInstancePools: number;
        /**
         * Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
         */
        spotMaxPrice?: string;
    }

    export interface GroupMixedInstancesPolicyLaunchTemplate {
        /**
         * Nested argument defines the Launch Template. Defined below.
         */
        launchTemplateSpecification: outputs.autoscaling.GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification;
        /**
         * List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.
         */
        overrides?: outputs.autoscaling.GroupMixedInstancesPolicyLaunchTemplateOverride[];
    }

    export interface GroupMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
        /**
         * The ID of the launch template. Conflicts with `launchTemplateName`.
         */
        launchTemplateId: string;
        /**
         * The name of the launch template. Conflicts with `launchTemplateId`.
         */
        launchTemplateName: string;
        /**
         * Template version. Can be version number, `$Latest`, or `$Default`. (Default: `$Default`).
         */
        version?: string;
    }

    export interface GroupMixedInstancesPolicyLaunchTemplateOverride {
        /**
         * Override the instance type in the Launch Template.
         */
        instanceType?: string;
        /**
         * The number of capacity units, which gives the instance type a proportional weight to other instance types.
         */
        weightedCapacity?: string;
    }

    export interface GroupTag {
        /**
         * Key
         */
        key: string;
        /**
         * Enables propagation of the tag to
         * Amazon EC2 instances launched via this ASG
         */
        propagateAtLaunch: boolean;
        /**
         * Value
         */
        value: string;
    }

    export interface PolicyStepAdjustment {
        /**
         * The lower bound for the
         * difference between the alarm threshold and the CloudWatch metric.
         * Without a value, AWS will treat this bound as infinity.
         */
        metricIntervalLowerBound?: string;
        /**
         * The upper bound for the
         * difference between the alarm threshold and the CloudWatch metric.
         * Without a value, AWS will treat this bound as infinity. The upper bound
         * must be greater than the lower bound.
         */
        metricIntervalUpperBound?: string;
        /**
         * The number of members by which to
         * scale, when the adjustment bounds are breached. A positive value scales
         * up. A negative value scales down.
         */
        scalingAdjustment: number;
    }

    export interface PolicyTargetTrackingConfiguration {
        /**
         * A customized metric. Conflicts with `predefinedMetricSpecification`.
         */
        customizedMetricSpecification?: outputs.autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecification;
        /**
         * Indicates whether scale in by the target tracking policy is disabled.
         */
        disableScaleIn?: boolean;
        /**
         * A predefined metric. Conflicts with `customizedMetricSpecification`.
         */
        predefinedMetricSpecification?: outputs.autoscaling.PolicyTargetTrackingConfigurationPredefinedMetricSpecification;
        /**
         * The target value for the metric.
         */
        targetValue: number;
    }

    export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecification {
        /**
         * The dimensions of the metric.
         */
        metricDimensions?: outputs.autoscaling.PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension[];
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
        /**
         * The statistic of the metric.
         */
        statistic: string;
        /**
         * The unit of the metric.
         */
        unit?: string;
    }

    export interface PolicyTargetTrackingConfigurationCustomizedMetricSpecificationMetricDimension {
        /**
         * The name of the dimension.
         */
        name: string;
        /**
         * The value of the dimension.
         */
        value: string;
    }

    export interface PolicyTargetTrackingConfigurationPredefinedMetricSpecification {
        /**
         * The metric type.
         */
        predefinedMetricType: string;
        /**
         * Identifies the resource associated with the metric type.
         */
        resourceLabel?: string;
    }
}

export namespace autoscalingplans {
    export interface ScalingPlanApplicationSource {
        /**
         * The Amazon Resource Name (ARN) of a AWS CloudFormation stack.
         */
        cloudformationStackArn?: string;
        /**
         * A set of tags.
         */
        tagFilters?: outputs.autoscalingplans.ScalingPlanApplicationSourceTagFilter[];
    }

    export interface ScalingPlanApplicationSourceTagFilter {
        /**
         * The tag key.
         */
        key: string;
        /**
         * The tag values.
         */
        values?: string[];
    }

    export interface ScalingPlanScalingInstruction {
        /**
         * The customized load metric to use for predictive scaling. You must specify either `customizedLoadMetricSpecification` or `predefinedLoadMetricSpecification` when configuring predictive scaling.
         * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_CustomizedLoadMetricSpecification.html).
         */
        customizedLoadMetricSpecification?: outputs.autoscalingplans.ScalingPlanScalingInstructionCustomizedLoadMetricSpecification;
        /**
         * Boolean controlling whether dynamic scaling by AWS Auto Scaling is disabled. Defaults to `false`.
         */
        disableDynamicScaling?: boolean;
        /**
         * The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for `predictiveScalingMaxCapacityBehavior`.
         */
        maxCapacity: number;
        /**
         * The minimum capacity of the resource.
         */
        minCapacity: number;
        /**
         * The predefined load metric to use for predictive scaling. You must specify either `predefinedLoadMetricSpecification` or `customizedLoadMetricSpecification` when configuring predictive scaling.
         * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_PredefinedLoadMetricSpecification.html).
         */
        predefinedLoadMetricSpecification?: outputs.autoscalingplans.ScalingPlanScalingInstructionPredefinedLoadMetricSpecification;
        /**
         * Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource.
         * Valid values: `SetForecastCapacityToMaxCapacity`, `SetMaxCapacityAboveForecastCapacity`, `SetMaxCapacityToForecastCapacity`.
         */
        predictiveScalingMaxCapacityBehavior?: string;
        /**
         * The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity.
         */
        predictiveScalingMaxCapacityBuffer?: number;
        /**
         * The predictive scaling mode. Valid values: `ForecastAndScale`, `ForecastOnly`.
         */
        predictiveScalingMode?: string;
        /**
         * The ID of the resource. This string consists of the resource type and unique identifier.
         */
        resourceId: string;
        /**
         * The scalable dimension associated with the resource. Valid values: `autoscaling:autoScalingGroup:DesiredCapacity`, `dynamodb:index:ReadCapacityUnits`, `dynamodb:index:WriteCapacityUnits`, `dynamodb:table:ReadCapacityUnits`, `dynamodb:table:WriteCapacityUnits`, `ecs:service:DesiredCount`, `ec2:spot-fleet-request:TargetCapacity`, `rds:cluster:ReadReplicaCount`.
         */
        scalableDimension: string;
        /**
         * Controls whether a resource's externally created scaling policies are kept or replaced. Valid values: `KeepExternalPolicies`, `ReplaceExternalPolicies`. Defaults to `KeepExternalPolicies`.
         */
        scalingPolicyUpdateBehavior?: string;
        /**
         * The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out.
         */
        scheduledActionBufferTime?: number;
        /**
         * The namespace of the AWS service. Valid values: `autoscaling`, `dynamodb`, `ecs`, `ec2`, `rds`.
         */
        serviceNamespace: string;
        /**
         * The structure that defines new target tracking configurations. Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.
         * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_TargetTrackingConfiguration.html).
         */
        targetTrackingConfigurations: outputs.autoscalingplans.ScalingPlanScalingInstructionTargetTrackingConfiguration[];
    }

    export interface ScalingPlanScalingInstructionCustomizedLoadMetricSpecification {
        /**
         * The dimensions of the metric.
         */
        dimensions?: {[key: string]: string};
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
        /**
         * The statistic of the metric. Currently, the value must always be `Sum`.
         */
        statistic: string;
        /**
         * The unit of the metric.
         */
        unit?: string;
    }

    export interface ScalingPlanScalingInstructionPredefinedLoadMetricSpecification {
        /**
         * The metric type. Valid values: `ALBTargetGroupRequestCount`, `ASGTotalCPUUtilization`, `ASGTotalNetworkIn`, `ASGTotalNetworkOut`.
         */
        predefinedLoadMetricType: string;
        /**
         * Identifies the resource associated with the metric type.
         */
        resourceLabel?: string;
    }

    export interface ScalingPlanScalingInstructionTargetTrackingConfiguration {
        /**
         * A customized metric. You can specify either `customizedScalingMetricSpecification` or `predefinedScalingMetricSpecification`.
         * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_CustomizedScalingMetricSpecification.html).
         */
        customizedScalingMetricSpecification?: outputs.autoscalingplans.ScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification;
        /**
         * Boolean indicating whether scale in by the target tracking scaling policy is disabled. Defaults to `false`.
         */
        disableScaleIn?: boolean;
        /**
         * The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
         * This value is used only if the resource is an Auto Scaling group.
         */
        estimatedInstanceWarmup?: number;
        /**
         * A predefined metric. You can specify either `predefinedScalingMetricSpecification` or `customizedScalingMetricSpecification`.
         * More details can be found in the [AWS Auto Scaling API Reference](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_PredefinedScalingMetricSpecification.html).
         */
        predefinedScalingMetricSpecification?: outputs.autoscalingplans.ScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification;
        /**
         * The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
         * This value is not used if the scalable resource is an Auto Scaling group.
         */
        scaleInCooldown?: number;
        /**
         * The amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start.
         * This value is not used if the scalable resource is an Auto Scaling group.
         */
        scaleOutCooldown?: number;
        /**
         * The target value for the metric.
         */
        targetValue: number;
    }

    export interface ScalingPlanScalingInstructionTargetTrackingConfigurationCustomizedScalingMetricSpecification {
        /**
         * The dimensions of the metric.
         */
        dimensions?: {[key: string]: string};
        /**
         * The name of the metric.
         */
        metricName: string;
        /**
         * The namespace of the metric.
         */
        namespace: string;
        /**
         * The statistic of the metric. Valid values: `Average`, `Maximum`, `Minimum`, `SampleCount`, `Sum`.
         */
        statistic: string;
        /**
         * The unit of the metric.
         */
        unit?: string;
    }

    export interface ScalingPlanScalingInstructionTargetTrackingConfigurationPredefinedScalingMetricSpecification {
        /**
         * The metric type. Valid values: `ALBRequestCountPerTarget`, `ASGAverageCPUUtilization`, `ASGAverageNetworkIn`, `ASGAverageNetworkOut`, `DynamoDBReadCapacityUtilization`, `DynamoDBWriteCapacityUtilization`, `ECSServiceAverageCPUUtilization`, `ECSServiceAverageMemoryUtilization`, `EC2SpotFleetRequestAverageCPUUtilization`, `EC2SpotFleetRequestAverageNetworkIn`, `EC2SpotFleetRequestAverageNetworkOut`, `RDSReaderAverageCPUUtilization`, `RDSReaderAverageDatabaseConnections`.
         */
        predefinedScalingMetricType: string;
        /**
         * Identifies the resource associated with the metric type.
         */
        resourceLabel?: string;
    }
}

export namespace backup {
    export interface PlanAdvancedBackupSetting {
        /**
         * Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to `{ WindowsVSS = "enabled" }` to enable Windows VSS backup option and create a VSS Windows backup.
         */
        backupOptions?: {[key: string]: string};
        /**
         * The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: `EC2`.
         */
        resourceType?: string;
    }

    export interface PlanRule {
        /**
         * The amount of time AWS Backup attempts a backup before canceling the job and returning an error.
         */
        completionWindow?: number;
        /**
         * Configuration block(s) with copy operation settings. Detailed below.
         */
        copyActions?: outputs.backup.PlanRuleCopyAction[];
        /**
         * The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
         */
        lifecycle?: outputs.backup.PlanRuleLifecycle;
        /**
         * Metadata that you can assign to help organize the resources that you create.
         */
        recoveryPointTags?: {[key: string]: string};
        /**
         * An display name for a backup rule.
         */
        ruleName: string;
        /**
         * A CRON expression specifying when AWS Backup initiates a backup job.
         */
        schedule?: string;
        /**
         * The amount of time in minutes before beginning a backup.
         */
        startWindow?: number;
        /**
         * The name of a logical container where backups are stored.
         */
        targetVaultName: string;
    }

    export interface PlanRuleCopyAction {
        /**
         * An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
         */
        destinationVaultArn: string;
        /**
         * The lifecycle defines when a protected resource is copied over to a backup vault and when it expires.  Fields documented above.
         */
        lifecycle?: outputs.backup.PlanRuleCopyActionLifecycle;
    }

    export interface PlanRuleCopyActionLifecycle {
        /**
         * Specifies the number of days after creation that a recovery point is moved to cold storage.
         */
        coldStorageAfter?: number;
        /**
         * Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
         */
        deleteAfter?: number;
    }

    export interface PlanRuleLifecycle {
        /**
         * Specifies the number of days after creation that a recovery point is moved to cold storage.
         */
        coldStorageAfter?: number;
        /**
         * Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than `coldStorageAfter`.
         */
        deleteAfter?: number;
    }

    export interface SelectionSelectionTag {
        /**
         * The key in a key-value pair.
         */
        key: string;
        /**
         * An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
         */
        type: string;
        /**
         * The value in a key-value pair.
         */
        value: string;
    }
}

export namespace batch {
    export interface ComputeEnvironmentComputeResources {
        /**
         * The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
         */
        allocationStrategy?: string;
        /**
         * Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
         */
        bidPercentage?: number;
        /**
         * The desired number of EC2 vCPUS in the compute environment.
         */
        desiredVcpus: number;
        /**
         * The EC2 key pair that is used for instances launched in the compute environment.
         */
        ec2KeyPair?: string;
        /**
         * The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
         */
        imageId?: string;
        /**
         * The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
         */
        instanceRole: string;
        /**
         * A list of instance types that may be launched.
         */
        instanceTypes: string[];
        /**
         * The launch template to use for your compute resources. See details below.
         */
        launchTemplate?: outputs.batch.ComputeEnvironmentComputeResourcesLaunchTemplate;
        /**
         * The maximum number of EC2 vCPUs that an environment can reach.
         */
        maxVcpus: number;
        /**
         * The minimum number of EC2 vCPUs that an environment should maintain.
         */
        minVcpus: number;
        /**
         * A list of EC2 security group that are associated with instances launched in the compute environment.
         */
        securityGroupIds: string[];
        /**
         * The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
         */
        spotIamFleetRole?: string;
        /**
         * A list of VPC subnets into which the compute resources are launched.
         */
        subnets: string[];
        /**
         * Key-value pair tags to be applied to resources that are launched in the compute environment.
         */
        tags?: {[key: string]: string};
        /**
         * The type of compute environment. Valid items are `EC2` or `SPOT`.
         */
        type: string;
    }

    export interface ComputeEnvironmentComputeResourcesLaunchTemplate {
        /**
         * ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
         */
        launchTemplateId?: string;
        /**
         * Name of the launch template.
         */
        launchTemplateName?: string;
        /**
         * The version number of the launch template. Default: The default version of the launch template.
         */
        version?: string;
    }

    export interface GetJobQueueComputeEnvironmentOrder {
        computeEnvironment: string;
        order: number;
    }

    export interface JobDefinitionRetryStrategy {
        /**
         * The number of times to move a job to the `RUNNABLE` status. You may specify between `1` and `10` attempts.
         */
        attempts?: number;
    }

    export interface JobDefinitionTimeout {
        /**
         * The time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is `60` seconds.
         */
        attemptDurationSeconds?: number;
    }
}

export namespace budgets {
    export interface BudgetCostTypes {
        /**
         * A boolean value whether to include credits in the cost budget. Defaults to `true`
         */
        includeCredit?: boolean;
        /**
         * Specifies whether a budget includes discounts. Defaults to `true`
         */
        includeDiscount?: boolean;
        /**
         * A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
         */
        includeOtherSubscription?: boolean;
        /**
         * A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
         */
        includeRecurring?: boolean;
        /**
         * A boolean value whether to include refunds in the cost budget. Defaults to `true`
         */
        includeRefund?: boolean;
        /**
         * A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
         */
        includeSubscription?: boolean;
        /**
         * A boolean value whether to include support costs in the cost budget. Defaults to `true`
         */
        includeSupport?: boolean;
        /**
         * A boolean value whether to include tax in the cost budget. Defaults to `true`
         */
        includeTax?: boolean;
        /**
         * A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
         */
        includeUpfront?: boolean;
        /**
         * Specifies whether a budget uses the amortized rate. Defaults to `false`
         */
        useAmortized?: boolean;
        /**
         * A boolean value whether to use blended costs in the cost budget. Defaults to `false`
         */
        useBlended?: boolean;
    }

    export interface BudgetNotification {
        /**
         * (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
         */
        comparisonOperator: string;
        /**
         * (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
         */
        notificationType: string;
        /**
         * (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
         */
        subscriberEmailAddresses?: string[];
        /**
         * (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
         */
        subscriberSnsTopicArns?: string[];
        /**
         * (Required) Threshold when the notification should be sent.
         */
        threshold: number;
        /**
         * (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
         */
        thresholdType: string;
    }
}

export namespace cfg {
    export interface ConfigurationAggregatorAccountAggregationSource {
        /**
         * List of 12-digit account IDs of the account(s) being aggregated.
         */
        accountIds: string[];
        /**
         * If true, aggregate existing AWS Config regions and future regions.
         */
        allRegions?: boolean;
        /**
         * List of source regions being aggregated.
         */
        regions?: string[];
    }

    export interface ConfigurationAggregatorOrganizationAggregationSource {
        /**
         * If true, aggregate existing AWS Config regions and future regions.
         */
        allRegions?: boolean;
        /**
         * List of source regions being aggregated.
         */
        regions?: string[];
        /**
         * ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.
         */
        roleArn: string;
    }

    export interface DeliveryChannelSnapshotDeliveryProperties {
        /**
         * - The frequency with which AWS Config recurringly delivers configuration snapshots. e.g. `One_Hour` or `Three_Hours`. Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).
         */
        deliveryFrequency?: string;
    }

    export interface RecorderRecordingGroup {
        /**
         * Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with `resourceTypes`. Defaults to `true`.
         */
        allSupported?: boolean;
        /**
         * Specifies whether AWS Config includes all supported types of *global resources* with the resources that it records. Requires `allSupported = true`. Conflicts with `resourceTypes`.
         */
        includeGlobalResourceTypes?: boolean;
        /**
         * A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
         */
        resourceTypes?: string[];
    }

    export interface RemediationConfigurationParameter {
        /**
         * The name of the attribute.
         */
        name: string;
        /**
         * The value is dynamic and changes at run-time.
         */
        resourceValue?: string;
        /**
         * The value is static and does not change at run-time.
         */
        staticValue?: string;
    }

    export interface RuleScope {
        /**
         * The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for `complianceResourceTypes`.
         */
        complianceResourceId?: string;
        /**
         * A list of resource types of only those AWS resources that you want to trigger an evaluation for the rule. e.g. `AWS::EC2::Instance`. You can only specify one type if you also specify a resource ID for `complianceResourceId`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
         */
        complianceResourceTypes?: string[];
        /**
         * The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
         */
        tagKey?: string;
        /**
         * The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
         */
        tagValue?: string;
    }

    export interface RuleSource {
        /**
         * Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS` or `CUSTOM_LAMBDA`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g. via the `aws.lambda.Permission` resource.
         */
        owner: string;
        /**
         * Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA`.
         */
        sourceDetails?: outputs.cfg.RuleSourceSourceDetail[];
        /**
         * For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the `arn` attribute of the `aws.lambda.Function` resource.
         */
        sourceIdentifier: string;
    }

    export interface RuleSourceSourceDetail {
        /**
         * The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWS resources. This defaults to `aws.config` and is the only valid value.
         */
        eventSource?: string;
        /**
         * The frequency that you want AWS Config to run evaluations for a rule that is triggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
         */
        maximumExecutionFrequency?: string;
        /**
         * The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
         */
        messageType?: string;
    }
}

export namespace cloudfront {
    export interface DistributionCustomErrorResponse {
        /**
         * The minimum amount of time you want
         * HTTP error codes to stay in CloudFront caches before CloudFront queries your
         * origin to see whether the object has been updated.
         */
        errorCachingMinTtl?: number;
        /**
         * The 4xx or 5xx HTTP status code that you want to
         * customize.
         */
        errorCode: number;
        /**
         * The HTTP status code that you want CloudFront
         * to return with the custom error page to the viewer.
         */
        responseCode?: number;
        /**
         * The path of the custom error page (for
         * example, `/custom_404.html`).
         */
        responsePagePath?: string;
    }

    export interface DistributionDefaultCacheBehavior {
        /**
         * Controls which HTTP methods CloudFront
         * processes and forwards to your Amazon S3 bucket or your custom origin.
         */
        allowedMethods: string[];
        /**
         * Controls whether CloudFront caches the
         * response to requests using the specified HTTP methods.
         */
        cachedMethods: string[];
        /**
         * Whether you want CloudFront to automatically
         * compress content for web requests that include `Accept-Encoding: gzip` in
         * the request header (default: `false`).
         */
        compress?: boolean;
        /**
         * The default amount of time (in seconds) that an
         * object is in a CloudFront cache before CloudFront forwards another request
         * in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
         * 1 day.
         */
        defaultTtl?: number;
        /**
         * Field level encryption configuration ID
         */
        fieldLevelEncryptionId?: string;
        /**
         * The forwarded values configuration that specifies how CloudFront
         * handles query strings, cookies and headers (maximum one).
         */
        forwardedValues: outputs.cloudfront.DistributionDefaultCacheBehaviorForwardedValues;
        /**
         * A config block that triggers a lambda function with
         * specific actions. Defined below, maximum 4.
         */
        lambdaFunctionAssociations?: outputs.cloudfront.DistributionDefaultCacheBehaviorLambdaFunctionAssociation[];
        /**
         * The maximum amount of time (in seconds) that an
         * object is in a CloudFront cache before CloudFront forwards another request
         * to your origin to determine whether the object has been updated. Only
         * effective in the presence of `Cache-Control max-age`, `Cache-Control
         * s-maxage`, and `Expires` headers. Defaults to 365 days.
         */
        maxTtl?: number;
        /**
         * The minimum amount of time that you want objects to
         * stay in CloudFront caches before CloudFront queries your origin to see
         * whether the object has been updated. Defaults to 0 seconds.
         */
        minTtl?: number;
        /**
         * Indicates whether you want to distribute
         * media files in Microsoft Smooth Streaming format using the origin that is
         * associated with this cache behavior.
         */
        smoothStreaming?: boolean;
        /**
         * The value of ID for the origin that you want
         * CloudFront to route requests to when a request matches the path pattern
         * either for a cache behavior or for the default cache behavior.
         */
        targetOriginId: string;
        /**
         * List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content.
         * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
         */
        trustedSigners?: string[];
        /**
         * Use this element to specify the
         * protocol that users can use to access the files in the origin specified by
         * TargetOriginId when a request matches the path pattern in PathPattern. One
         * of `allow-all`, `https-only`, or `redirect-to-https`.
         */
        viewerProtocolPolicy: string;
    }

    export interface DistributionDefaultCacheBehaviorForwardedValues {
        /**
         * The forwarded values cookies
         * that specifies how CloudFront handles cookies (maximum one).
         */
        cookies: outputs.cloudfront.DistributionDefaultCacheBehaviorForwardedValuesCookies;
        /**
         * Specifies the Headers, if any, that you want
         * CloudFront to vary upon for this cache behavior. Specify `*` to include all
         * headers.
         */
        headers?: string[];
        /**
         * Indicates whether you want CloudFront to forward
         * query strings to the origin that is associated with this cache behavior.
         */
        queryString: boolean;
        /**
         * When specified, along with a value of
         * `true` for `queryString`, all query strings are forwarded, however only the
         * query string keys listed in this argument are cached. When omitted with a
         * value of `true` for `queryString`, all query string keys are cached.
         */
        queryStringCacheKeys?: string[];
    }

    export interface DistributionDefaultCacheBehaviorForwardedValuesCookies {
        /**
         * Specifies whether you want CloudFront to forward
         * cookies to the origin that is associated with this cache behavior. You can
         * specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
         * subsequent `whitelistedNames`
         */
        forward: string;
        /**
         * If you have specified `whitelist` to
         * `forward`, the whitelisted cookies that you want CloudFront to forward to
         * your origin.
         */
        whitelistedNames?: string[];
    }

    export interface DistributionDefaultCacheBehaviorLambdaFunctionAssociation {
        /**
         * The specific event to trigger this function.
         * Valid values: `viewer-request`, `origin-request`, `viewer-response`,
         * `origin-response`
         */
        eventType: string;
        /**
         * When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
         */
        includeBody?: boolean;
        /**
         * ARN of the Lambda function.
         */
        lambdaArn: string;
    }

    export interface DistributionLoggingConfig {
        /**
         * The Amazon S3 bucket to store the access logs in, for
         * example, `myawslogbucket.s3.amazonaws.com`.
         */
        bucket: string;
        /**
         * Specifies whether you want CloudFront to
         * include cookies in access logs (default: `false`).
         */
        includeCookies?: boolean;
        /**
         * An optional string that you want CloudFront to prefix
         * to the access log filenames for this distribution, for example, `myprefix/`.
         */
        prefix?: string;
    }

    export interface DistributionOrderedCacheBehavior {
        /**
         * Controls which HTTP methods CloudFront
         * processes and forwards to your Amazon S3 bucket or your custom origin.
         */
        allowedMethods: string[];
        /**
         * Controls whether CloudFront caches the
         * response to requests using the specified HTTP methods.
         */
        cachedMethods: string[];
        /**
         * Whether you want CloudFront to automatically
         * compress content for web requests that include `Accept-Encoding: gzip` in
         * the request header (default: `false`).
         */
        compress?: boolean;
        /**
         * The default amount of time (in seconds) that an
         * object is in a CloudFront cache before CloudFront forwards another request
         * in the absence of an `Cache-Control max-age` or `Expires` header. Defaults to
         * 1 day.
         */
        defaultTtl?: number;
        /**
         * Field level encryption configuration ID
         */
        fieldLevelEncryptionId?: string;
        /**
         * The forwarded values configuration that specifies how CloudFront
         * handles query strings, cookies and headers (maximum one).
         */
        forwardedValues: outputs.cloudfront.DistributionOrderedCacheBehaviorForwardedValues;
        /**
         * A config block that triggers a lambda function with
         * specific actions. Defined below, maximum 4.
         */
        lambdaFunctionAssociations?: outputs.cloudfront.DistributionOrderedCacheBehaviorLambdaFunctionAssociation[];
        /**
         * The maximum amount of time (in seconds) that an
         * object is in a CloudFront cache before CloudFront forwards another request
         * to your origin to determine whether the object has been updated. Only
         * effective in the presence of `Cache-Control max-age`, `Cache-Control
         * s-maxage`, and `Expires` headers. Defaults to 365 days.
         */
        maxTtl?: number;
        /**
         * The minimum amount of time that you want objects to
         * stay in CloudFront caches before CloudFront queries your origin to see
         * whether the object has been updated. Defaults to 0 seconds.
         */
        minTtl?: number;
        /**
         * The pattern (for example, `images/*.jpg)` that
         * specifies which requests you want this cache behavior to apply to.
         */
        pathPattern: string;
        /**
         * Indicates whether you want to distribute
         * media files in Microsoft Smooth Streaming format using the origin that is
         * associated with this cache behavior.
         */
        smoothStreaming?: boolean;
        /**
         * The value of ID for the origin that you want
         * CloudFront to route requests to when a request matches the path pattern
         * either for a cache behavior or for the default cache behavior.
         */
        targetOriginId: string;
        /**
         * List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content.
         * See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
         */
        trustedSigners?: string[];
        /**
         * Use this element to specify the
         * protocol that users can use to access the files in the origin specified by
         * TargetOriginId when a request matches the path pattern in PathPattern. One
         * of `allow-all`, `https-only`, or `redirect-to-https`.
         */
        viewerProtocolPolicy: string;
    }

    export interface DistributionOrderedCacheBehaviorForwardedValues {
        /**
         * The forwarded values cookies
         * that specifies how CloudFront handles cookies (maximum one).
         */
        cookies: outputs.cloudfront.DistributionOrderedCacheBehaviorForwardedValuesCookies;
        /**
         * Specifies the Headers, if any, that you want
         * CloudFront to vary upon for this cache behavior. Specify `*` to include all
         * headers.
         */
        headers?: string[];
        /**
         * Indicates whether you want CloudFront to forward
         * query strings to the origin that is associated with this cache behavior.
         */
        queryString: boolean;
        /**
         * When specified, along with a value of
         * `true` for `queryString`, all query strings are forwarded, however only the
         * query string keys listed in this argument are cached. When omitted with a
         * value of `true` for `queryString`, all query string keys are cached.
         */
        queryStringCacheKeys?: string[];
    }

    export interface DistributionOrderedCacheBehaviorForwardedValuesCookies {
        /**
         * Specifies whether you want CloudFront to forward
         * cookies to the origin that is associated with this cache behavior. You can
         * specify `all`, `none` or `whitelist`. If `whitelist`, you must include the
         * subsequent `whitelistedNames`
         */
        forward: string;
        /**
         * If you have specified `whitelist` to
         * `forward`, the whitelisted cookies that you want CloudFront to forward to
         * your origin.
         */
        whitelistedNames?: string[];
    }

    export interface DistributionOrderedCacheBehaviorLambdaFunctionAssociation {
        /**
         * The specific event to trigger this function.
         * Valid values: `viewer-request`, `origin-request`, `viewer-response`,
         * `origin-response`
         */
        eventType: string;
        /**
         * When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.
         */
        includeBody?: boolean;
        /**
         * ARN of the Lambda function.
         */
        lambdaArn: string;
    }

    export interface DistributionOrigin {
        /**
         * One or more sub-resources with `name` and
         * `value` parameters that specify header data that will be sent to the origin
         * (multiples allowed).
         */
        customHeaders?: outputs.cloudfront.DistributionOriginCustomHeader[];
        /**
         * The CloudFront custom
         * origin configuration information. If an S3
         * origin is required, use `s3OriginConfig` instead.
         */
        customOriginConfig?: outputs.cloudfront.DistributionOriginCustomOriginConfig;
        /**
         * The DNS domain name of either the S3 bucket, or
         * web site of your custom origin.
         */
        domainName: string;
        /**
         * The unique identifier of the member origin
         */
        originId: string;
        /**
         * An optional element that causes CloudFront to
         * request your content from a directory in your Amazon S3 bucket or your
         * custom origin.
         */
        originPath?: string;
        /**
         * The CloudFront S3 origin
         * configuration information. If a custom origin is required, use
         * `customOriginConfig` instead.
         */
        s3OriginConfig?: outputs.cloudfront.DistributionOriginS3OriginConfig;
    }

    export interface DistributionOriginCustomHeader {
        name: string;
        value: string;
    }

    export interface DistributionOriginCustomOriginConfig {
        /**
         * The HTTP port the custom origin listens on.
         */
        httpPort: number;
        /**
         * The HTTPS port the custom origin listens on.
         */
        httpsPort: number;
        /**
         * The Custom KeepAlive timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
         */
        originKeepaliveTimeout?: number;
        /**
         * The origin protocol policy to apply to
         * your origin. One of `http-only`, `https-only`, or `match-viewer`.
         */
        originProtocolPolicy: string;
        /**
         * The Custom Read timeout, in seconds. By default, AWS enforces a limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout).
         */
        originReadTimeout?: number;
        /**
         * The SSL/TLS protocols that you want
         * CloudFront to use when communicating with your origin over HTTPS. A list of
         * one or more of `SSLv3`, `TLSv1`, `TLSv1.1`, and `TLSv1.2`.
         */
        originSslProtocols: string[];
    }

    export interface DistributionOriginGroup {
        /**
         * The failover criteria for when to failover to the secondary origin
         */
        failoverCriteria: outputs.cloudfront.DistributionOriginGroupFailoverCriteria;
        /**
         * Ordered member configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.
         */
        members: outputs.cloudfront.DistributionOriginGroupMember[];
        /**
         * The unique identifier of the member origin
         */
        originId: string;
    }

    export interface DistributionOriginGroupFailoverCriteria {
        /**
         * A list of HTTP status codes for the origin group
         */
        statusCodes: number[];
    }

    export interface DistributionOriginGroupMember {
        /**
         * The unique identifier of the member origin
         */
        originId: string;
    }

    export interface DistributionOriginS3OriginConfig {
        /**
         * The [CloudFront origin access
         * identity][5] to associate with the origin.
         */
        originAccessIdentity: string;
    }

    export interface DistributionRestrictions {
        geoRestriction: outputs.cloudfront.DistributionRestrictionsGeoRestriction;
    }

    export interface DistributionRestrictionsGeoRestriction {
        /**
         * The [ISO 3166-1-alpha-2 codes][4] for which you
         * want CloudFront either to distribute your content (`whitelist`) or not
         * distribute your content (`blacklist`).
         */
        locations?: string[];
        /**
         * The method that you want to use to restrict
         * distribution of your content by country: `none`, `whitelist`, or
         * `blacklist`.
         */
        restrictionType: string;
    }

    export interface DistributionTrustedSigner {
        /**
         * Whether the distribution is enabled to accept end
         * user requests for content.
         */
        enabled: boolean;
        /**
         * List of nested attributes for each trusted signer
         */
        items: outputs.cloudfront.DistributionTrustedSignerItem[];
    }

    export interface DistributionTrustedSignerItem {
        /**
         * AWS account ID or `self`
         */
        awsAccountNumber: string;
        /**
         * Set of active CloudFront key pairs associated with the signer account
         */
        keyPairIds: string[];
    }

    export interface DistributionViewerCertificate {
        /**
         * The ARN of the [AWS Certificate Manager](https://aws.amazon.com/certificate-manager/)
         * certificate that you wish to use with this distribution. Specify this,
         * `cloudfrontDefaultCertificate`, or `iamCertificateId`.  The ACM
         * certificate must be in  US-EAST-1.
         */
        acmCertificateArn?: string;
        /**
         * `true` if you want viewers to use HTTPS
         * to request your objects and you're using the CloudFront domain name for your
         * distribution. Specify this, `acmCertificateArn`, or `iamCertificateId`.
         */
        cloudfrontDefaultCertificate?: boolean;
        /**
         * The IAM certificate identifier of the custom viewer
         * certificate for this distribution if you are using a custom domain. Specify
         * this, `acmCertificateArn`, or `cloudfrontDefaultCertificate`.
         */
        iamCertificateId?: string;
        /**
         * The minimum version of the SSL protocol that
         * you want CloudFront to use for HTTPS connections. Can only be set if
         * `cloudfrontDefaultCertificate = false`. One of `SSLv3`, `TLSv1`,
         * `TLSv1_2016`, `TLSv1.1_2016`, `TLSv1.2_2018` or `TLSv1.2_2019`. Default: `TLSv1`. **NOTE**:
         * If you are using a custom certificate (specified with `acmCertificateArn`
         * or `iamCertificateId`), and have specified `sni-only` in
         * `sslSupportMethod`, `TLSv1` or later must be specified. If you have
         * specified `vip` in `sslSupportMethod`, only `SSLv3` or `TLSv1` can be
         * specified. If you have specified `cloudfrontDefaultCertificate`, `TLSv1`
         * must be specified.
         */
        minimumProtocolVersion?: string;
        sslSupportMethod?: string;
    }
}

export namespace cloudhsmv2 {
    export interface ClusterClusterCertificate {
        awsHardwareCertificate: string;
        clusterCertificate: string;
        clusterCsr: string;
        hsmCertificate: string;
        manufacturerHardwareCertificate: string;
    }

    export interface GetClusterClusterCertificates {
        awsHardwareCertificate: string;
        clusterCertificate: string;
        clusterCsr: string;
        hsmCertificate: string;
        manufacturerHardwareCertificate: string;
    }
}

export namespace cloudtrail {
    export interface TrailEventSelector {
        /**
         * Specifies logging data events. Fields documented below.
         */
        dataResources?: outputs.cloudtrail.TrailEventSelectorDataResource[];
        /**
         * Specify if you want your event selector to include management events for your trail.
         */
        includeManagementEvents?: boolean;
        /**
         * Specify if you want your trail to log read-only events, write-only events, or all. By default, the value is All. You can specify only the following value: "ReadOnly", "WriteOnly", "All". Defaults to `All`.
         */
        readWriteType?: string;
    }

    export interface TrailEventSelectorDataResource {
        /**
         * The resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function"
         */
        type: string;
        /**
         * A list of ARN for the specified S3 buckets and object prefixes..
         */
        values: string[];
    }

    export interface TrailInsightSelector {
        /**
         * The type of insights to log on a trail. In this release, only `ApiCallRateInsight` is supported as an insight type.
         */
        insightType: string;
    }
}

export namespace cloudwatch {
    export interface EventPermissionCondition {
        /**
         * Key for the condition. Valid values: `aws:PrincipalOrgID`.
         */
        key: string;
        /**
         * Type of condition. Value values: `StringEquals`.
         */
        type: string;
        /**
         * Value for the key.
         */
        value: string;
    }

    export interface EventTargetBatchTarget {
        /**
         * The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
         */
        arraySize?: number;
        /**
         * The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
         */
        jobAttempts?: number;
        /**
         * The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
         */
        jobDefinition: string;
        /**
         * The name to use for this execution of the job, if the target is an AWS Batch job.
         */
        jobName: string;
    }

    export interface EventTargetEcsTarget {
        /**
         * Specifies an ECS task group for the task. The maximum length is 255 characters.
         */
        group?: string;
        /**
         * Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values are `EC2` or `FARGATE`.
         */
        launchType?: string;
        /**
         * Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launchType is FARGATE because the awsvpc mode is required for Fargate tasks.
         */
        networkConfiguration?: outputs.cloudwatch.EventTargetEcsTargetNetworkConfiguration;
        /**
         * Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see [AWS Fargate Platform Versions](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
         */
        platformVersion?: string;
        /**
         * The number of tasks to create based on the TaskDefinition. The default is 1.
         */
        taskCount?: number;
        /**
         * The ARN of the task definition to use if the event target is an Amazon ECS cluster.
         */
        taskDefinitionArn: string;
    }

    export interface EventTargetEcsTargetNetworkConfiguration {
        /**
         * Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
         */
        assignPublicIp?: boolean;
        /**
         * The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
         */
        securityGroups?: string[];
        /**
         * The subnets associated with the task or service.
         */
        subnets: string[];
    }

    export interface EventTargetInputTransformer {
        /**
         * Key value pairs specified in the form of JSONPath (for example, time = $.time)
         * * You can have as many as 10 key-value pairs.
         * * You must use JSON dot notation, not bracket notation.
         * * The keys can't start with "AWS".
         */
        inputPaths?: {[key: string]: string};
        inputTemplate: string;
    }

    export interface EventTargetKinesisTarget {
        /**
         * The JSON path to be extracted from the event and used as the partition key.
         */
        partitionKeyPath?: string;
    }

    export interface EventTargetRunCommandTarget {
        /**
         * Can be either `tag:tag-key` or `InstanceIds`.
         */
        key: string;
        /**
         * If Key is `tag:tag-key`, Values is a list of tag values. If Key is `InstanceIds`, Values is a list of Amazon EC2 instance IDs.
         */
        values: string[];
    }

    export interface EventTargetSqsTarget {
        /**
         * The FIFO message group ID to use as the target.
         */
        messageGroupId?: string;
    }

    export interface LogMetricFilterMetricTransformation {
        /**
         * The value to emit when a filter pattern does not match a log event.
         */
        defaultValue?: string;
        /**
         * The name of the CloudWatch metric to which the monitored log information should be published (e.g. `ErrorCount`)
         */
        name: string;
        /**
         * The destination namespace of the CloudWatch metric.
         */
        namespace: string;
        /**
         * What to publish to the metric. For example, if you're counting the occurrences of a particular term like "Error", the value will be "1" for each occurrence. If you're counting the bytes transferred the published value will be the value in the log event.
         */
        value: string;
    }

    export interface MetricAlarmMetricQuery {
        /**
         * The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the [Amazon CloudWatch User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html#metric-math-syntax).
         */
        expression?: string;
        /**
         * A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
         */
        id: string;
        /**
         * A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
         */
        label?: string;
        /**
         * The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
         */
        metric?: outputs.cloudwatch.MetricAlarmMetricQueryMetric;
        /**
         * Specify exactly one `metricQuery` to be `true` to use that `metricQuery` result as the alarm.
         */
        returnData?: boolean;
    }

    export interface MetricAlarmMetricQueryMetric {
        /**
         * The dimensions for this metric.  For the list of available dimensions see the AWS documentation [here](http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
         */
        dimensions?: {[key: string]: string};
        /**
         * The name for this metric.
         * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
         */
        metricName: string;
        /**
         * The namespace for this metric. See docs for the [list of namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/aws-namespaces.html).
         * See docs for [supported metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/CW_Support_For_AWS.html).
         */
        namespace?: string;
        /**
         * The period in seconds over which the specified `stat` is applied.
         */
        period: number;
        /**
         * The statistic to apply to this metric.
         * Either of the following is supported: `SampleCount`, `Average`, `Sum`, `Minimum`, `Maximum`
         */
        stat: string;
        /**
         * The unit for this metric.
         */
        unit?: string;
    }
}

export namespace codeartifact {
    export interface RepositoryExternalConnections {
        /**
         * The name of the external connection associated with a repository.
         */
        externalConnectionName: string;
        packageFormat: string;
        status: string;
    }

    export interface RepositoryUpstream {
        /**
         * The name of an upstream repository.
         */
        repositoryName: string;
    }
}

export namespace codebuild {
    export interface ProjectArtifacts {
        /**
         * The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
         */
        artifactIdentifier?: string;
        /**
         * If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
         */
        encryptionDisabled?: boolean;
        /**
         * Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
         */
        location?: string;
        /**
         * The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
         */
        name?: string;
        /**
         * The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
         */
        namespaceType?: string;
        /**
         * If set to true, a name specified in the build spec file overrides the artifact name.
         */
        overrideArtifactName?: boolean;
        /**
         * The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
         */
        packaging?: string;
        /**
         * If `type` is set to `S3`, this is the path to the output artifact
         */
        path?: string;
        /**
         * The build output artifact's type. Valid values for this parameter are: `CODEPIPELINE`, `NO_ARTIFACTS` or `S3`.
         */
        type: string;
    }

    export interface ProjectCache {
        /**
         * The location where the AWS CodeBuild project stores cached resources. For type `S3` the value must be a valid S3 bucket name/prefix.
         */
        location?: string;
        /**
         * Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
         */
        modes?: string[];
        /**
         * The type of storage that will be used for the AWS CodeBuild project cache. Valid values: `NO_CACHE`, `LOCAL`, and `S3`. Defaults to `NO_CACHE`.
         */
        type?: string;
    }

    export interface ProjectEnvironment {
        /**
         * The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
         */
        certificate?: string;
        /**
         * Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `computeType` need to be `BUILD_GENERAL1_LARGE`.
         */
        computeType: string;
        /**
         * A set of environment variables to make available to builds for this build project.
         */
        environmentVariables?: outputs.codebuild.ProjectEnvironmentEnvironmentVariable[];
        /**
         * The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `pulumi/pulumi:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
         */
        image: string;
        /**
         * The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
         */
        imagePullCredentialsType?: string;
        /**
         * If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
         */
        privilegedMode?: boolean;
        /**
         * Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
         */
        registryCredential?: outputs.codebuild.ProjectEnvironmentRegistryCredential;
        /**
         * The type of build environment to use for related builds. Available values are: `LINUX_CONTAINER`, `LINUX_GPU_CONTAINER`, `WINDOWS_CONTAINER` (deprecated), `WINDOWS_SERVER_2019_CONTAINER` or `ARM_CONTAINER`. For additional information, see the [CodeBuild User Guide](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html).
         */
        type: string;
    }

    export interface ProjectEnvironmentEnvironmentVariable {
        /**
         * The environment variable's name or key.
         */
        name: string;
        /**
         * The type of environment variable. Valid values: `PARAMETER_STORE`, `PLAINTEXT`, and `SECRETS_MANAGER`.
         */
        type?: string;
        /**
         * The environment variable's value.
         */
        value: string;
    }

    export interface ProjectEnvironmentRegistryCredential {
        /**
         * The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
         */
        credential: string;
        /**
         * The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
         */
        credentialProvider: string;
    }

    export interface ProjectLogsConfig {
        /**
         * Configuration for the builds to store logs to CloudWatch
         */
        cloudwatchLogs?: outputs.codebuild.ProjectLogsConfigCloudwatchLogs;
        /**
         * Configuration for the builds to store logs to S3.
         */
        s3Logs?: outputs.codebuild.ProjectLogsConfigS3Logs;
    }

    export interface ProjectLogsConfigCloudwatchLogs {
        /**
         * The group name of the logs in CloudWatch Logs.
         */
        groupName?: string;
        /**
         * Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
         */
        status?: string;
        /**
         * The stream name of the logs in CloudWatch Logs.
         */
        streamName?: string;
    }

    export interface ProjectLogsConfigS3Logs {
        /**
         * If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
         */
        encryptionDisabled?: boolean;
        /**
         * Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket.
         */
        location?: string;
        /**
         * Current status of logs in CloudWatch Logs for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `ENABLED`.
         */
        status?: string;
    }

    export interface ProjectSecondaryArtifact {
        /**
         * The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
         */
        artifactIdentifier: string;
        /**
         * If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
         */
        encryptionDisabled?: boolean;
        /**
         * Information about the build output artifact location. If `type` is set to `CODEPIPELINE` or `NO_ARTIFACTS` then this value will be ignored. If `type` is set to `S3`, this is the name of the output bucket. If `path` is not also specified, then `location` can also specify the path of the output artifact in the output bucket.
         */
        location?: string;
        /**
         * The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
         */
        name?: string;
        /**
         * The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
         */
        namespaceType?: string;
        /**
         * If set to true, a name specified in the build spec file overrides the artifact name.
         */
        overrideArtifactName?: boolean;
        /**
         * The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
         */
        packaging?: string;
        /**
         * If `type` is set to `S3`, this is the path to the output artifact
         */
        path?: string;
        /**
         * The build output artifact's type. The only valid value is `S3`.
         */
        type: string;
    }

    export interface ProjectSecondarySource {
        /**
         * Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
         */
        auths?: outputs.codebuild.ProjectSecondarySourceAuth[];
        /**
         * The build spec declaration to use for this build project's related builds.
         */
        buildspec?: string;
        /**
         * Truncate git history to this many commits.
         */
        gitCloneDepth?: number;
        /**
         * Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
         */
        gitSubmodulesConfig?: outputs.codebuild.ProjectSecondarySourceGitSubmodulesConfig;
        /**
         * Ignore SSL warnings when connecting to source control.
         */
        insecureSsl?: boolean;
        /**
         * The location of the source code from git or s3.
         */
        location?: string;
        /**
         * Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
         */
        reportBuildStatus?: boolean;
        /**
         * The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
         */
        sourceIdentifier: string;
        /**
         * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
         */
        type: string;
    }

    export interface ProjectSecondarySourceAuth {
        /**
         * The resource value that applies to the specified authorization type.
         */
        resource?: string;
        /**
         * The authorization type to use. The only valid value is `OAUTH`
         */
        type: string;
    }

    export interface ProjectSecondarySourceGitSubmodulesConfig {
        /**
         * If set to true, fetches Git submodules for the AWS CodeBuild build project.
         */
        fetchSubmodules: boolean;
    }

    export interface ProjectSource {
        /**
         * Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
         */
        auths?: outputs.codebuild.ProjectSourceAuth[];
        /**
         * The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
         */
        buildspec?: string;
        /**
         * Truncate git history to this many commits.
         */
        gitCloneDepth?: number;
        /**
         * Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`, `GITHUB` or `GITHUB_ENTERPRISE`.
         */
        gitSubmodulesConfig?: outputs.codebuild.ProjectSourceGitSubmodulesConfig;
        /**
         * Ignore SSL warnings when connecting to source control.
         */
        insecureSsl?: boolean;
        /**
         * The location of the source code from git or s3.
         */
        location?: string;
        /**
         * Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
         */
        reportBuildStatus?: boolean;
        /**
         * The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
         */
        type: string;
    }

    export interface ProjectSourceAuth {
        /**
         * The resource value that applies to the specified authorization type.
         */
        resource?: string;
        /**
         * The authorization type to use. The only valid value is `OAUTH`
         */
        type: string;
    }

    export interface ProjectSourceGitSubmodulesConfig {
        /**
         * If set to true, fetches Git submodules for the AWS CodeBuild build project.
         */
        fetchSubmodules: boolean;
    }

    export interface ProjectVpcConfig {
        /**
         * The security group IDs to assign to running builds.
         */
        securityGroupIds: string[];
        /**
         * The subnet IDs within which to run builds.
         */
        subnets: string[];
        /**
         * The ID of the VPC within which to run builds.
         */
        vpcId: string;
    }

    export interface ReportGroupExportConfig {
        /**
         * contains information about the S3 bucket where the run of a report is exported. see S3 Destination documented below.
         */
        s3Destination?: outputs.codebuild.ReportGroupExportConfigS3Destination;
        /**
         * The export configuration type. Valid values are `S3` and `NO_EXPORT`.
         */
        type: string;
    }

    export interface ReportGroupExportConfigS3Destination {
        /**
         * The name of the S3 bucket where the raw data of a report are exported.
         */
        bucket: string;
        /**
         * A boolean value that specifies if the results of a report are encrypted.
         * **Note: the API does not currently allow setting encryption as disabled**
         */
        encryptionDisabled?: boolean;
        /**
         * The encryption key for the report's encrypted raw data. The KMS key ARN.
         */
        encryptionKey: string;
        /**
         * The type of build output artifact to create. Valid values are: `NONE` (default) and `ZIP`.
         */
        packaging?: string;
        /**
         * The path to the exported report's raw data results.
         */
        path?: string;
    }

    export interface WebhookFilterGroup {
        /**
         * A webhook filter for the group. Filter blocks are documented below.
         */
        filters?: outputs.codebuild.WebhookFilterGroupFilter[];
    }

    export interface WebhookFilterGroupFilter {
        /**
         * If set to `true`, the specified filter does *not* trigger a build. Defaults to `false`.
         */
        excludeMatchedPattern?: boolean;
        /**
         * For a filter that uses `EVENT` type, a comma-separated string that specifies one event: `PUSH`, `PULL_REQUEST_CREATED`, `PULL_REQUEST_UPDATED`, `PULL_REQUEST_REOPENED`. `PULL_REQUEST_MERGED` works with GitHub & GitHub Enterprise only. For a filter that uses any of the other filter types, a regular expression.
         */
        pattern: string;
        /**
         * The webhook filter group's type. Valid values for this parameter are: `EVENT`, `BASE_REF`, `HEAD_REF`, `ACTOR_ACCOUNT_ID`, `FILE_PATH`, `COMMIT_MESSAGE`. At least one filter group must specify `EVENT` as its type.
         */
        type: string;
    }
}

export namespace codecommit {
    export interface TriggerTrigger {
        /**
         * The branches that will be included in the trigger configuration. If no branches are specified, the trigger will apply to all branches.
         */
        branches?: string[];
        /**
         * Any custom data associated with the trigger that will be included in the information sent to the target of the trigger.
         */
        customData?: string;
        /**
         * The ARN of the resource that is the target for a trigger. For example, the ARN of a topic in Amazon Simple Notification Service (SNS).
         */
        destinationArn: string;
        /**
         * The repository events that will cause the trigger to run actions in another service, such as sending a notification through Amazon Simple Notification Service (SNS). If no events are specified, the trigger will run for all repository events. Event types include: `all`, `updateReference`, `createReference`, `deleteReference`.
         */
        events: string[];
        /**
         * The name of the trigger.
         */
        name: string;
    }
}

export namespace codedeploy {
    export interface DeploymentConfigMinimumHealthyHosts {
        /**
         * The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
         */
        type?: string;
        /**
         * The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
         * a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
         * deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
         * When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.
         */
        value?: number;
    }

    export interface DeploymentConfigTrafficRoutingConfig {
        /**
         * The time based canary configuration information. If `type` is `TimeBasedLinear`, use `timeBasedLinear` instead.
         */
        timeBasedCanary?: outputs.codedeploy.DeploymentConfigTrafficRoutingConfigTimeBasedCanary;
        /**
         * The time based linear configuration information. If `type` is `TimeBasedCanary`, use `timeBasedCanary` instead.
         */
        timeBasedLinear?: outputs.codedeploy.DeploymentConfigTrafficRoutingConfigTimeBasedLinear;
        /**
         * Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
         */
        type?: string;
    }

    export interface DeploymentConfigTrafficRoutingConfigTimeBasedCanary {
        /**
         * The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
         */
        interval?: number;
        /**
         * The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.
         */
        percentage?: number;
    }

    export interface DeploymentConfigTrafficRoutingConfigTimeBasedLinear {
        /**
         * The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
         */
        interval?: number;
        /**
         * The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.
         */
        percentage?: number;
    }

    export interface DeploymentGroupAlarmConfiguration {
        /**
         * A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
         */
        alarms?: string[];
        /**
         * Indicates whether the alarm configuration is enabled. This option is useful when you want to temporarily deactivate alarm monitoring for a deployment group without having to add the same alarms again later.
         */
        enabled?: boolean;
        /**
         * Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
         * * `true`: The deployment will proceed even if alarm status information can't be retrieved.
         * * `false`: The deployment will stop if alarm status information can't be retrieved.
         */
        ignorePollAlarmFailure?: boolean;
    }

    export interface DeploymentGroupAutoRollbackConfiguration {
        /**
         * Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
         */
        enabled?: boolean;
        /**
         * The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
         */
        events?: string[];
    }

    export interface DeploymentGroupBlueGreenDeploymentConfig {
        /**
         * Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
         */
        deploymentReadyOption?: outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption;
        /**
         * Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
         */
        greenFleetProvisioningOption: outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption;
        /**
         * Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
         */
        terminateBlueInstancesOnDeploymentSuccess?: outputs.codedeploy.DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess;
    }

    export interface DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption {
        /**
         * When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
         * * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
         * * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
         */
        actionOnTimeout?: string;
        /**
         * The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `actionOnTimeout`.
         */
        waitTimeInMinutes?: number;
    }

    export interface DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption {
        /**
         * The method used to add instances to a replacement environment.
         * * `DISCOVER_EXISTING`: Use instances that already exist or will be created manually.
         * * `COPY_AUTO_SCALING_GROUP`: Use settings from a specified **Auto Scaling** group to define and create instances in a new Auto Scaling group. _Exactly one Auto Scaling group must be specified_ when selecting `COPY_AUTO_SCALING_GROUP`. Use `autoscalingGroups` to specify the Auto Scaling group.
         */
        action?: string;
    }

    export interface DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess {
        /**
         * The action to take on instances in the original environment after a successful blue/green deployment.
         * * `TERMINATE`: Instances are terminated after a specified wait time.
         * * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
         */
        action?: string;
        /**
         * The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
         */
        terminationWaitTimeInMinutes?: number;
    }

    export interface DeploymentGroupDeploymentStyle {
        /**
         * Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
         */
        deploymentOption?: string;
        /**
         * Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
         */
        deploymentType?: string;
    }

    export interface DeploymentGroupEc2TagFilter {
        /**
         * The key of the tag filter.
         */
        key?: string;
        /**
         * The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
         */
        type?: string;
        /**
         * The value of the tag filter.
         */
        value?: string;
    }

    export interface DeploymentGroupEc2TagSet {
        /**
         * Tag filters associated with the deployment group. See the AWS docs for details.
         */
        ec2TagFilters?: outputs.codedeploy.DeploymentGroupEc2TagSetEc2TagFilter[];
    }

    export interface DeploymentGroupEc2TagSetEc2TagFilter {
        /**
         * The key of the tag filter.
         */
        key?: string;
        /**
         * The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
         */
        type?: string;
        /**
         * The value of the tag filter.
         */
        value?: string;
    }

    export interface DeploymentGroupEcsService {
        /**
         * The name of the ECS cluster.
         */
        clusterName: string;
        /**
         * The name of the ECS service.
         */
        serviceName: string;
    }

    export interface DeploymentGroupLoadBalancerInfo {
        /**
         * The Classic Elastic Load Balancer to use in a deployment. Conflicts with `targetGroupInfo` and `targetGroupPairInfo`.
         */
        elbInfos?: outputs.codedeploy.DeploymentGroupLoadBalancerInfoElbInfo[];
        /**
         * The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elbInfo` and `targetGroupPairInfo`.
         */
        targetGroupInfos?: outputs.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupInfo[];
        /**
         * The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elbInfo` and `targetGroupInfo`.
         */
        targetGroupPairInfo?: outputs.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfo;
    }

    export interface DeploymentGroupLoadBalancerInfoElbInfo {
        /**
         * The name of the load balancer that will be used to route traffic from original instances to replacement instances in a blue/green deployment. For in-place deployments, the name of the load balancer that instances are deregistered from so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
         */
        name?: string;
    }

    export interface DeploymentGroupLoadBalancerInfoTargetGroupInfo {
        /**
         * The name of the target group that instances in the original environment are deregistered from, and instances in the replacement environment registered with. For in-place deployments, the name of the target group that instances are deregistered from, so they are not serving traffic during a deployment, and then re-registered with after the deployment completes.
         */
        name?: string;
    }

    export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfo {
        /**
         * Configuration block for the production traffic route (documented below).
         */
        prodTrafficRoute: outputs.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute;
        /**
         * Configuration blocks for a target group within a target group pair (documented below).
         */
        targetGroups: outputs.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup[];
        /**
         * Configuration block for the test traffic route (documented below).
         */
        testTrafficRoute?: outputs.codedeploy.DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute;
    }

    export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute {
        /**
         * List of Amazon Resource Names (ARNs) of the load balancer listeners.
         */
        listenerArns: string[];
    }

    export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroup {
        /**
         * Name of the target group.
         */
        name: string;
    }

    export interface DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute {
        /**
         * List of Amazon Resource Names (ARNs) of the load balancer listeners.
         */
        listenerArns: string[];
    }

    export interface DeploymentGroupOnPremisesInstanceTagFilter {
        /**
         * The key of the tag filter.
         */
        key?: string;
        /**
         * The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
         */
        type?: string;
        /**
         * The value of the tag filter.
         */
        value?: string;
    }

    export interface DeploymentGroupTriggerConfiguration {
        /**
         * The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation](http://docs.aws.amazon.com/codedeploy/latest/userguide/monitoring-sns-event-notifications-create-trigger.html) for all possible values.
         */
        triggerEvents: string[];
        /**
         * The name of the notification trigger.
         */
        triggerName: string;
        /**
         * The ARN of the SNS topic through which notifications are sent.
         */
        triggerTargetArn: string;
    }
}

export namespace codepipeline {
    export interface PipelineArtifactStore {
        /**
         * The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An `encryptionKey` block is documented below.
         */
        encryptionKey?: outputs.codepipeline.PipelineArtifactStoreEncryptionKey;
        /**
         * The location where AWS CodePipeline stores artifacts for a pipeline; currently only `S3` is supported.
         */
        location: string;
        /**
         * The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
         */
        region: string;
        /**
         * The type of the artifact store, such as Amazon S3
         */
        type: string;
    }

    export interface PipelineArtifactStoreEncryptionKey {
        /**
         * The KMS key ARN or ID
         */
        id: string;
        /**
         * The type of key; currently only `KMS` is supported
         */
        type: string;
    }

    export interface PipelineStage {
        /**
         * The action(s) to include in the stage. Defined as an `action` block below
         */
        actions: outputs.codepipeline.PipelineStageAction[];
        /**
         * The name of the stage.
         */
        name: string;
    }

    export interface PipelineStageAction {
        /**
         * A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are `Approval`, `Build`, `Deploy`, `Invoke`, `Source` and `Test`.
         */
        category: string;
        /**
         * A map of the action declaration's configuration. Configurations options for action types and providers can be found in the [Pipeline Structure Reference](http://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html#action-requirements) and [Action Structure Reference](https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference.html) documentation.
         */
        configuration?: {[key: string]: string};
        /**
         * A list of artifact names to be worked on.
         */
        inputArtifacts?: string[];
        /**
         * The action declaration's name.
         */
        name: string;
        /**
         * The namespace all output variables will be accessed from.
         */
        namespace?: string;
        /**
         * A list of artifact names to output. Output artifact names must be unique within a pipeline.
         */
        outputArtifacts?: string[];
        /**
         * The creator of the action being called. Possible values are `AWS`, `Custom` and `ThirdParty`.
         */
        owner: string;
        /**
         * The provider of the service being called by the action. Valid providers are determined by the action category. For example, an action in the Deploy category type might have a provider of AWS CodeDeploy, which would be specified as CodeDeploy.
         */
        provider: string;
        /**
         * The region in which to run the action.
         */
        region: string;
        /**
         * The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
         */
        roleArn?: string;
        /**
         * The order in which actions are run.
         */
        runOrder: number;
        /**
         * A string that identifies the action type.
         */
        version: string;
    }

    export interface WebhookAuthenticationConfiguration {
        /**
         * A valid CIDR block for `IP` filtering. Required for `IP`.
         */
        allowedIpRange?: string;
        /**
         * The shared secret for the GitHub repository webhook. Set this as `secret` in your `githubRepositoryWebhook`'s `configuration` block. Required for `GITHUB_HMAC`.
         */
        secretToken?: string;
    }

    export interface WebhookFilter {
        /**
         * The [JSON path](https://github.com/json-path/JsonPath) to filter on.
         */
        jsonPath: string;
        /**
         * The value to match on (e.g. `refs/heads/{Branch}`). See [AWS docs](https://docs.aws.amazon.com/codepipeline/latest/APIReference/API_WebhookFilterRule.html) for details.
         */
        matchEquals: string;
    }
}

export namespace codestarnotifications {
    export interface NotificationRuleTarget {
        /**
         * The ARN of notification rule target. For example, a SNS Topic ARN.
         */
        address: string;
        /**
         * The status of the notification rule. Possible values are `ENABLED` and `DISABLED`, default is `ENABLED`.
         */
        status: string;
        /**
         * The type of the notification target. Default value is `SNS`.
         */
        type?: string;
    }
}

export namespace cognito {
    export interface IdentityPoolCognitoIdentityProvider {
        /**
         * The client ID for the Amazon Cognito Identity User Pool.
         */
        clientId?: string;
        /**
         * The provider name for an Amazon Cognito Identity User Pool.
         */
        providerName?: string;
        /**
         * Whether server-side token validation is enabled for the identity provider’s token or not.
         */
        serverSideTokenCheck?: boolean;
    }

    export interface IdentityPoolRoleAttachmentRoleMapping {
        /**
         * Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
         */
        ambiguousRoleResolution?: string;
        /**
         * A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".
         */
        identityProvider: string;
        /**
         * The Rules Configuration to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
         */
        mappingRules?: outputs.cognito.IdentityPoolRoleAttachmentRoleMappingMappingRule[];
        /**
         * The role mapping type.
         */
        type: string;
    }

    export interface IdentityPoolRoleAttachmentRoleMappingMappingRule {
        /**
         * The claim name that must be present in the token, for example, "isAdmin" or "paid".
         */
        claim: string;
        /**
         * The match condition that specifies how closely the claim value in the IdP token must match Value.
         */
        matchType: string;
        /**
         * The role ARN.
         */
        roleArn: string;
        /**
         * A brief string that the claim must match, for example, "paid" or "yes".
         */
        value: string;
    }

    export interface ResourceServerScope {
        /**
         * The scope description.
         */
        scopeDescription: string;
        /**
         * The scope name.
         */
        scopeName: string;
    }

    export interface UserPoolAccountRecoverySetting {
        /**
         * The list of Account Recovery Options of the following structure:
         */
        recoveryMechanisms: outputs.cognito.UserPoolAccountRecoverySettingRecoveryMechanism[];
    }

    export interface UserPoolAccountRecoverySettingRecoveryMechanism {
        /**
         * Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
         */
        name: string;
        /**
         * A positive integer specifying priority of a method with 1 being the highest priority.
         */
        priority: number;
    }

    export interface UserPoolAdminCreateUserConfig {
        /**
         * Set to True if only the administrator is allowed to create user profiles. Set to False if users can sign themselves up via an app.
         */
        allowAdminCreateUserOnly?: boolean;
        /**
         * The invite message template structure.
         */
        inviteMessageTemplate?: outputs.cognito.UserPoolAdminCreateUserConfigInviteMessageTemplate;
    }

    export interface UserPoolAdminCreateUserConfigInviteMessageTemplate {
        /**
         * The email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
         */
        emailMessage?: string;
        /**
         * The subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
         */
        emailSubject?: string;
        /**
         * The SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
         */
        smsMessage?: string;
    }

    export interface UserPoolClientAnalyticsConfiguration {
        /**
         * The application ID for an Amazon Pinpoint application.
         */
        applicationId: string;
        /**
         * An ID for the Analytics Configuration.
         */
        externalId: string;
        /**
         * The ARN of an IAM role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.
         */
        roleArn: string;
        /**
         * If set to `true`, Amazon Cognito will include user data in the events it publishes to Amazon Pinpoint analytics.
         */
        userDataShared?: boolean;
    }

    export interface UserPoolDeviceConfiguration {
        /**
         * Indicates whether a challenge is required on a new device. Only applicable to a new device.
         */
        challengeRequiredOnNewDevice?: boolean;
        /**
         * If true, a device is only remembered on user prompt.
         */
        deviceOnlyRememberedOnUserPrompt?: boolean;
    }

    export interface UserPoolEmailConfiguration {
        /**
         * The email delivery method to use. `COGNITO_DEFAULT` for the default email functionality built into Cognito or `DEVELOPER` to use your Amazon SES configuration.
         */
        emailSendingAccount?: string;
        /**
         * Sender’s email address or sender’s display name with their email address (e.g. `john@example.com`, `John Smith <john@example.com>` or `\"John Smith Ph.D.\" <john@example.com>`). Escaped double quotes are required around display names that contain certain characters as specified in [RFC 5322](https://tools.ietf.org/html/rfc5322).
         */
        fromEmailAddress?: string;
        /**
         * The REPLY-TO email address.
         */
        replyToEmailAddress?: string;
        /**
         * The ARN of the SES verified email identity to to use. Required if `emailSendingAccount` is set to `DEVELOPER`.
         */
        sourceArn?: string;
    }

    export interface UserPoolLambdaConfig {
        /**
         * The ARN of the lambda creating an authentication challenge.
         */
        createAuthChallenge?: string;
        /**
         * A custom Message AWS Lambda trigger.
         */
        customMessage?: string;
        /**
         * Defines the authentication challenge.
         */
        defineAuthChallenge?: string;
        /**
         * A post-authentication AWS Lambda trigger.
         */
        postAuthentication?: string;
        /**
         * A post-confirmation AWS Lambda trigger.
         */
        postConfirmation?: string;
        /**
         * A pre-authentication AWS Lambda trigger.
         */
        preAuthentication?: string;
        /**
         * A pre-registration AWS Lambda trigger.
         */
        preSignUp?: string;
        /**
         * Allow to customize identity token claims before token generation.
         */
        preTokenGeneration?: string;
        /**
         * The user migration Lambda config type.
         */
        userMigration?: string;
        /**
         * Verifies the authentication challenge response.
         */
        verifyAuthChallengeResponse?: string;
    }

    export interface UserPoolPasswordPolicy {
        /**
         * The minimum length of the password policy that you have set.
         */
        minimumLength?: number;
        /**
         * Whether you have required users to use at least one lowercase letter in their password.
         */
        requireLowercase?: boolean;
        /**
         * Whether you have required users to use at least one number in their password.
         */
        requireNumbers?: boolean;
        /**
         * Whether you have required users to use at least one symbol in their password.
         */
        requireSymbols?: boolean;
        /**
         * Whether you have required users to use at least one uppercase letter in their password.
         */
        requireUppercase?: boolean;
        /**
         * In the password policy you have set, refers to the number of days a temporary password is valid. If the user does not sign-in during this time, their password will need to be reset by an administrator.
         */
        temporaryPasswordValidityDays?: number;
    }

    export interface UserPoolSchema {
        /**
         * The attribute data type. Must be one of `Boolean`, `Number`, `String`, `DateTime`.
         */
        attributeDataType: string;
        /**
         * Specifies whether the attribute type is developer only.
         */
        developerOnlyAttribute?: boolean;
        /**
         * Specifies whether the attribute can be changed once it has been created.
         */
        mutable?: boolean;
        /**
         * Specifies the recovery method for a user. Can be of the following: `verifiedEmail`, `verifiedPhoneNumber`, and `adminOnly`.
         */
        name: string;
        /**
         * Specifies the constraints for an attribute of the number type.
         */
        numberAttributeConstraints?: outputs.cognito.UserPoolSchemaNumberAttributeConstraints;
        /**
         * Specifies whether a user pool attribute is required. If the attribute is required and the user does not provide a value, registration or sign-in will fail.
         */
        required?: boolean;
        /**
         * -Specifies the constraints for an attribute of the string type.
         */
        stringAttributeConstraints?: outputs.cognito.UserPoolSchemaStringAttributeConstraints;
    }

    export interface UserPoolSchemaNumberAttributeConstraints {
        /**
         * The maximum value of an attribute that is of the number data type.
         */
        maxValue?: string;
        /**
         * The minimum value of an attribute that is of the number data type.
         */
        minValue?: string;
    }

    export interface UserPoolSchemaStringAttributeConstraints {
        /**
         * The maximum length of an attribute value of the string type.
         */
        maxLength?: string;
        /**
         * The minimum length of an attribute value of the string type.
         */
        minLength?: string;
    }

    export interface UserPoolSmsConfiguration {
        /**
         * The external ID used in IAM role trust relationships. For more information about using external IDs, see [How to Use an External ID When Granting Access to Your AWS Resources to a Third Party](http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html).
         */
        externalId: string;
        /**
         * The ARN of the Amazon SNS caller. This is usually the IAM role that you've given Cognito permission to assume.
         */
        snsCallerArn: string;
    }

    export interface UserPoolSoftwareTokenMfaConfiguration {
        /**
         * Boolean whether to enable software token Multi-Factor (MFA) tokens, such as Time-based One-Time Password (TOTP). To disable software token MFA when `smsConfiguration` is not present, the `mfaConfiguration` argument must be set to `OFF` and the `softwareTokenMfaConfiguration` configuration block must be fully removed.
         */
        enabled: boolean;
    }

    export interface UserPoolUserPoolAddOns {
        /**
         * The mode for advanced security, must be one of `OFF`, `AUDIT` or `ENFORCED`.
         */
        advancedSecurityMode: string;
    }

    export interface UserPoolUsernameConfiguration {
        /**
         * Specifies whether username case sensitivity will be applied for all users in the user pool through Cognito APIs.
         */
        caseSensitive: boolean;
    }

    export interface UserPoolVerificationMessageTemplate {
        /**
         * The default email option. Must be either `CONFIRM_WITH_CODE` or `CONFIRM_WITH_LINK`. Defaults to `CONFIRM_WITH_CODE`.
         */
        defaultEmailOption?: string;
        /**
         * The email message template. Must contain the `{####}` placeholder. Conflicts with `emailVerificationMessage` argument.
         */
        emailMessage: string;
        /**
         * The email message template for sending a confirmation link to the user, it must contain the `{##Click Here##}` placeholder.
         */
        emailMessageByLink: string;
        /**
         * The subject line for the email message template. Conflicts with `emailVerificationSubject` argument.
         */
        emailSubject: string;
        /**
         * The subject line for the email message template for sending a confirmation link to the user.
         */
        emailSubjectByLink: string;
        /**
         * The SMS message template. Must contain the `{####}` placeholder. Conflicts with `smsVerificationMessage` argument.
         */
        smsMessage: string;
    }
}

export namespace config {
    export interface AssumeRole {
        durationSeconds?: number;
        externalId?: string;
        policy?: string;
        policyArns?: string[];
        roleArn?: string;
        sessionName?: string;
        tags?: {[key: string]: string};
        transitiveTagKeys?: string[];
    }

    export interface Endpoints {
        accessanalyzer?: string;
        acm?: string;
        acmpca?: string;
        amplify?: string;
        apigateway?: string;
        applicationautoscaling?: string;
        applicationinsights?: string;
        appmesh?: string;
        appstream?: string;
        appsync?: string;
        athena?: string;
        autoscaling?: string;
        autoscalingplans?: string;
        backup?: string;
        batch?: string;
        budgets?: string;
        cloud9?: string;
        cloudformation?: string;
        cloudfront?: string;
        cloudhsm?: string;
        cloudsearch?: string;
        cloudtrail?: string;
        cloudwatch?: string;
        cloudwatchevents?: string;
        cloudwatchlogs?: string;
        codeartifact?: string;
        codebuild?: string;
        codecommit?: string;
        codedeploy?: string;
        codepipeline?: string;
        codestarconnections?: string;
        cognitoidentity?: string;
        cognitoidp?: string;
        configservice?: string;
        cur?: string;
        dataexchange?: string;
        datapipeline?: string;
        datasync?: string;
        dax?: string;
        devicefarm?: string;
        directconnect?: string;
        dlm?: string;
        dms?: string;
        docdb?: string;
        ds?: string;
        dynamodb?: string;
        ec2?: string;
        ecr?: string;
        ecrpublic?: string;
        ecs?: string;
        efs?: string;
        eks?: string;
        elasticache?: string;
        elasticbeanstalk?: string;
        elastictranscoder?: string;
        elb?: string;
        emr?: string;
        es?: string;
        firehose?: string;
        fms?: string;
        forecast?: string;
        fsx?: string;
        gamelift?: string;
        glacier?: string;
        globalaccelerator?: string;
        glue?: string;
        greengrass?: string;
        guardduty?: string;
        iam?: string;
        identitystore?: string;
        imagebuilder?: string;
        inspector?: string;
        iot?: string;
        iotanalytics?: string;
        iotevents?: string;
        kafka?: string;
        kinesis?: string;
        kinesisanalytics?: string;
        kinesisanalyticsv2?: string;
        kinesisvideo?: string;
        kms?: string;
        lakeformation?: string;
        lambda?: string;
        lexmodels?: string;
        licensemanager?: string;
        lightsail?: string;
        macie?: string;
        macie2?: string;
        managedblockchain?: string;
        marketplacecatalog?: string;
        mediaconnect?: string;
        mediaconvert?: string;
        medialive?: string;
        mediapackage?: string;
        mediastore?: string;
        mediastoredata?: string;
        mq?: string;
        mwaa?: string;
        neptune?: string;
        networkfirewall?: string;
        networkmanager?: string;
        opsworks?: string;
        organizations?: string;
        outposts?: string;
        personalize?: string;
        pinpoint?: string;
        pricing?: string;
        qldb?: string;
        quicksight?: string;
        ram?: string;
        rds?: string;
        redshift?: string;
        resourcegroups?: string;
        resourcegroupstaggingapi?: string;
        route53?: string;
        route53domains?: string;
        route53resolver?: string;
        s3?: string;
        s3control?: string;
        s3outposts?: string;
        sagemaker?: string;
        sdb?: string;
        secretsmanager?: string;
        securityhub?: string;
        serverlessrepo?: string;
        servicecatalog?: string;
        servicediscovery?: string;
        servicequotas?: string;
        ses?: string;
        shield?: string;
        signer?: string;
        sns?: string;
        sqs?: string;
        ssm?: string;
        ssoadmin?: string;
        stepfunctions?: string;
        storagegateway?: string;
        sts?: string;
        swf?: string;
        synthetics?: string;
        timestreamwrite?: string;
        transfer?: string;
        waf?: string;
        wafregional?: string;
        wafv2?: string;
        worklink?: string;
        workmail?: string;
        workspaces?: string;
        xray?: string;
    }

    export interface IgnoreTags {
        keyPrefixes?: string[];
        keys?: string[];
    }
}

export namespace datasync {
    export interface EfsLocationEc2Config {
        /**
         * List of Amazon Resource Names (ARNs) of the EC2 Security Groups that are associated with the EFS Mount Target.
         */
        securityGroupArns: string[];
        /**
         * Amazon Resource Name (ARN) of the EC2 Subnet that is associated with the EFS Mount Target.
         */
        subnetArn: string;
    }

    export interface LocationSmbMountOptions {
        /**
         * The specific SMB version that you want DataSync to use for mounting your SMB share. Valid values: `AUTOMATIC`, `SMB2`, and `SMB3`. Default: `AUTOMATIC`
         */
        version?: string;
    }

    export interface NfsLocationOnPremConfig {
        /**
         * List of Amazon Resource Names (ARNs) of the DataSync Agents used to connect to the NFS server.
         */
        agentArns: string[];
    }

    export interface S3LocationS3Config {
        /**
         * Amazon Resource Names (ARN) of the IAM Role used to connect to the S3 Bucket.
         */
        bucketAccessRoleArn: string;
    }

    export interface TaskOptions {
        /**
         * A file metadata that shows the last time a file was accessed (that is when the file was read or written to). If set to `BEST_EFFORT`, the DataSync Task attempts to preserve the original (that is, the version before sync `PREPARING` phase) `atime` attribute on all source files. Valid values: `BEST_EFFORT`, `NONE`. Default: `BEST_EFFORT`.
         */
        atime?: string;
        /**
         * Limits the bandwidth utilized. For example, to set a maximum of 1 MB, set this value to `1048576`. Value values: `-1` or greater. Default: `-1` (unlimited).
         */
        bytesPerSecond?: number;
        /**
         * Group identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
         */
        gid?: string;
        /**
         * A file metadata that indicates the last time a file was modified (written to) before the sync `PREPARING` phase. Value values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
         */
        mtime?: string;
        /**
         * Determines which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. Valid values: `NONE`, `PRESERVE`. Default: `PRESERVE`.
         */
        posixPermissions?: string;
        /**
         * Whether files deleted in the source should be removed or preserved in the destination file system. Valid values: `PRESERVE`, `REMOVE`. Default: `PRESERVE`.
         */
        preserveDeletedFiles?: string;
        /**
         * Whether the DataSync Task should preserve the metadata of block and character devices in the source files system, and recreate the files with that device name and metadata on the destination. The DataSync Task can’t sync the actual contents of such devices, because many of the devices are non-terminal and don’t return an end of file (EOF) marker. Valid values: `NONE`, `PRESERVE`. Default: `NONE` (ignore special devices).
         */
        preserveDevices?: string;
        /**
         * User identifier of the file's owners. Valid values: `BOTH`, `INT_VALUE`, `NAME`, `NONE`. Default: `INT_VALUE` (preserve integer value of the ID).
         */
        uid?: string;
        /**
         * Whether a data integrity verification should be performed at the end of a task execution after all data and metadata have been transferred. Valid values: `NONE`, `POINT_IN_TIME_CONSISTENT`, `ONLY_FILES_TRANSFERRED`. Default: `POINT_IN_TIME_CONSISTENT`.
         */
        verifyMode?: string;
    }
}

export namespace dax {
    export interface ClusterNode {
        address: string;
        availabilityZone: string;
        id: string;
        /**
         * The port used by the configuration endpoint
         */
        port: number;
    }

    export interface ClusterServerSideEncryption {
        /**
         * Whether to enable encryption at rest. Defaults to `false`.
         */
        enabled?: boolean;
    }

    export interface ParameterGroupParameter {
        /**
         * The name of the parameter.
         */
        name: string;
        /**
         * The value for the parameter.
         */
        value: string;
    }
}

export namespace directoryservice {
    export interface DirectoryConnectSettings {
        availabilityZones: string[];
        /**
         * The IP addresses of the AD Connector servers.
         */
        connectIps: string[];
        /**
         * The DNS IP addresses of the domain to connect to.
         */
        customerDnsIps: string[];
        /**
         * The username corresponding to the password provided.
         */
        customerUsername: string;
        /**
         * The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
         */
        subnetIds: string[];
        /**
         * The identifier of the VPC that the directory is in.
         */
        vpcId: string;
    }

    export interface DirectoryVpcSettings {
        availabilityZones: string[];
        /**
         * The identifiers of the subnets for the directory servers (2 subnets in 2 different AZs).
         */
        subnetIds: string[];
        /**
         * The identifier of the VPC that the directory is in.
         */
        vpcId: string;
    }

    export interface GetDirectoryConnectSetting {
        availabilityZones: string[];
        /**
         * The IP addresses of the AD Connector servers.
         */
        connectIps: string[];
        /**
         * The DNS IP addresses of the domain to connect to.
         */
        customerDnsIps: string[];
        /**
         * The username corresponding to the password provided.
         */
        customerUsername: string;
        /**
         * The identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
         */
        subnetIds: string[];
        /**
         * The ID of the VPC that the connector is in.
         */
        vpcId: string;
    }

    export interface GetDirectoryVpcSetting {
        availabilityZones: string[];
        /**
         * The identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
         */
        subnetIds: string[];
        /**
         * The ID of the VPC that the connector is in.
         */
        vpcId: string;
    }
}

export namespace dlm {
    export interface LifecyclePolicyPolicyDetails {
        /**
         * A list of resource types that should be targeted by the lifecycle policy. `VOLUME` is currently the only allowed value.
         */
        resourceTypes: string[];
        /**
         * See the `schedule` configuration block.
         */
        schedules: outputs.dlm.LifecyclePolicyPolicyDetailsSchedule[];
        /**
         * A map of tag keys and their values. Any resources that match the `resourceTypes` and are tagged with _any_ of these tags will be targeted.
         */
        targetTags: {[key: string]: string};
    }

    export interface LifecyclePolicyPolicyDetailsSchedule {
        /**
         * Copy all user-defined tags on a source volume to snapshots of the volume created by this policy.
         */
        copyTags: boolean;
        /**
         * See the `createRule` block. Max of 1 per schedule.
         */
        createRule: outputs.dlm.LifecyclePolicyPolicyDetailsScheduleCreateRule;
        /**
         * A name for the schedule.
         */
        name: string;
        /**
         * See the `retainRule` block. Max of 1 per schedule.
         */
        retainRule: outputs.dlm.LifecyclePolicyPolicyDetailsScheduleRetainRule;
        /**
         * A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
         */
        tagsToAdd?: {[key: string]: string};
    }

    export interface LifecyclePolicyPolicyDetailsScheduleCreateRule {
        /**
         * How often this lifecycle policy should be evaluated. `1`, `2`,`3`,`4`,`6`,`8`,`12` or `24` are valid values.
         */
        interval: number;
        /**
         * The unit for how often the lifecycle policy should be evaluated. `HOURS` is currently the only allowed value and also the default value.
         */
        intervalUnit?: string;
        /**
         * A list of times in 24 hour clock format that sets when the lifecycle policy should be evaluated. Max of 1.
         */
        times: string;
    }

    export interface LifecyclePolicyPolicyDetailsScheduleRetainRule {
        /**
         * How many snapshots to keep. Must be an integer between 1 and 1000.
         */
        count: number;
    }
}

export namespace dms {
    export interface EndpointElasticsearchSettings {
        /**
         * Endpoint for the Elasticsearch cluster.
         */
        endpointUri: string;
        /**
         * Maximum number of seconds for which DMS retries failed API requests to the Elasticsearch cluster. Defaults to `300`.
         */
        errorRetryDuration?: number;
        /**
         * Maximum percentage of records that can fail to be written before a full load operation stops. Defaults to `10`.
         */
        fullLoadErrorPercentage?: number;
        /**
         * Amazon Resource Name (ARN) of the IAM Role with permissions to write to the Elasticsearch cluster.
         */
        serviceAccessRoleArn: string;
    }

    export interface EndpointKafkaSettings {
        /**
         * Kafka broker location. Specify in the form broker-hostname-or-ip:port.
         */
        broker: string;
        /**
         * Kafka topic for migration. Defaults to `kafka-default-topic`.
         */
        topic?: string;
    }

    export interface EndpointKinesisSettings {
        /**
         * Output format for the records created. Defaults to `json`. Valid values are `json` and `jsonUnformatted` (a single line with no tab).
         */
        messageFormat?: string;
        /**
         * Amazon Resource Name (ARN) of the IAM Role with permissions to write to the Kinesis data stream.
         */
        serviceAccessRoleArn?: string;
        /**
         * Amazon Resource Name (ARN) of the Kinesis data stream.
         */
        streamArn?: string;
    }

    export interface EndpointMongodbSettings {
        /**
         * Authentication mechanism to access the MongoDB source endpoint. Defaults to `default`.
         */
        authMechanism?: string;
        /**
         * Authentication database name. Not used when `authType` is `no`. Defaults to `admin`.
         */
        authSource?: string;
        /**
         * Authentication type to access the MongoDB source endpoint. Defaults to `password`.
         */
        authType?: string;
        /**
         * Number of documents to preview to determine the document organization. Use this setting when `nestingLevel` is set to `one`. Defaults to `1000`.
         */
        docsToInvestigate?: string;
        /**
         * Document ID. Use this setting when `nestingLevel` is set to `none`. Defaults to `false`.
         */
        extractDocId?: string;
        /**
         * Specifies either document or table mode. Defaults to `none`. Valid values are `one` (table mode) and `none` (document mode).
         */
        nestingLevel?: string;
    }

    export interface EndpointS3Settings {
        /**
         * S3 Bucket Object prefix.
         */
        bucketFolder?: string;
        /**
         * S3 Bucket name.
         */
        bucketName?: string;
        /**
         * Set to compress target files. Defaults to `NONE`. Valid values are `GZIP` and `NONE`.
         */
        compressionType?: string;
        /**
         * Delimiter used to separate columns in the source files. Defaults to `,`.
         */
        csvDelimiter?: string;
        /**
         * Delimiter used to separate rows in the source files. Defaults to `\n`.
         */
        csvRowDelimiter?: string;
        /**
         * JSON document that describes how AWS DMS should interpret the data.
         */
        externalTableDefinition?: string;
        /**
         * Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket.
         */
        serviceAccessRoleArn?: string;
    }
}

export namespace docdb {
    export interface ClusterParameterGroupParameter {
        /**
         * Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
         */
        applyMethod?: string;
        /**
         * The name of the documentDB parameter.
         */
        name: string;
        /**
         * The value of the documentDB parameter.
         */
        value: string;
    }
}

export namespace dynamodb {
    export interface GetTableAttribute {
        /**
         * The name of the DynamoDB table.
         */
        name: string;
        type: string;
    }

    export interface GetTableGlobalSecondaryIndex {
        hashKey: string;
        /**
         * The name of the DynamoDB table.
         */
        name: string;
        nonKeyAttributes: string[];
        projectionType: string;
        rangeKey: string;
        readCapacity: number;
        writeCapacity: number;
    }

    export interface GetTableLocalSecondaryIndex {
        /**
         * The name of the DynamoDB table.
         */
        name: string;
        nonKeyAttributes: string[];
        projectionType: string;
        rangeKey: string;
    }

    export interface GetTablePointInTimeRecovery {
        enabled: boolean;
    }

    export interface GetTableReplica {
        regionName: string;
    }

    export interface GetTableServerSideEncryption {
        enabled: boolean;
        kmsKeyArn: string;
    }

    export interface GetTableTtl {
        attributeName: string;
        enabled: boolean;
    }

    export interface GlobalTableReplica {
        /**
         * AWS region name of replica DynamoDB Table. e.g. `us-east-1`
         */
        regionName: string;
    }

    export interface TableAttribute {
        /**
         * The name of the index
         */
        name: string;
        /**
         * Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
         */
        type: string;
    }

    export interface TableGlobalSecondaryIndex {
        /**
         * The name of the hash key in the index; must be
         * defined as an attribute in the resource.
         */
        hashKey: string;
        /**
         * The name of the index
         */
        name: string;
        /**
         * Only required with `INCLUDE` as a
         * projection type; a list of attributes to project into the index. These
         * do not need to be defined as attributes on the table.
         */
        nonKeyAttributes?: string[];
        /**
         * One of `ALL`, `INCLUDE` or `KEYS_ONLY`
         * where `ALL` projects every attribute into the index, `KEYS_ONLY`
         * projects just the hash and range key into the index, and `INCLUDE`
         * projects only the keys specified in the _non_key_attributes_
         * parameter.
         */
        projectionType: string;
        /**
         * The name of the range key; must be defined
         */
        rangeKey?: string;
        /**
         * The number of read units for this index. Must be set if billingMode is set to PROVISIONED.
         */
        readCapacity?: number;
        /**
         * The number of write units for this index. Must be set if billingMode is set to PROVISIONED.
         */
        writeCapacity?: number;
    }

    export interface TableLocalSecondaryIndex {
        /**
         * The name of the index
         */
        name: string;
        /**
         * Only required with `INCLUDE` as a
         * projection type; a list of attributes to project into the index. These
         * do not need to be defined as attributes on the table.
         */
        nonKeyAttributes?: string[];
        /**
         * One of `ALL`, `INCLUDE` or `KEYS_ONLY`
         * where `ALL` projects every attribute into the index, `KEYS_ONLY`
         * projects just the hash and range key into the index, and `INCLUDE`
         * projects only the keys specified in the _non_key_attributes_
         * parameter.
         */
        projectionType: string;
        /**
         * The name of the range key; must be defined
         */
        rangeKey: string;
    }

    export interface TablePointInTimeRecovery {
        /**
         * Indicates whether ttl is enabled (true) or disabled (false).
         */
        enabled: boolean;
    }

    export interface TableReplica {
        /**
         * Region name of the replica.
         */
        regionName: string;
    }

    export interface TableServerSideEncryption {
        /**
         * Indicates whether ttl is enabled (true) or disabled (false).
         */
        enabled: boolean;
        /**
         * The ARN of the CMK that should be used for the AWS KMS encryption.
         * This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
         */
        kmsKeyArn: string;
    }

    export interface TableTtl {
        /**
         * The name of the table attribute to store the TTL timestamp in.
         */
        attributeName: string;
        /**
         * Indicates whether ttl is enabled (true) or disabled (false).
         */
        enabled?: boolean;
    }
}

export namespace ebs {
    export interface GetEbsVolumesFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVolumes.html).
         * For example, if matching against the `size` filter, use:
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * EBS Volume IDs will be selected if any one of the given values match.
         */
        values: string[];
    }

    export interface GetSnapshotFilter {
        name: string;
        values: string[];
    }

    export interface GetSnapshotIdsFilter {
        name: string;
        values: string[];
    }

    export interface GetVolumeFilter {
        name: string;
        values: string[];
    }
}

export namespace ec2 {
    export interface AmiCopyEbsBlockDevice {
        /**
         * Boolean controlling whether the EBS volumes created to
         * support each created instance will be deleted once that instance is terminated.
         */
        deleteOnTermination: boolean;
        /**
         * The path at which the device is exposed to created instances.
         */
        deviceName: string;
        /**
         * Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshotId`.
         */
        encrypted: boolean;
        /**
         * Number of I/O operations per second the
         * created volumes will support.
         */
        iops: number;
        /**
         * The id of an EBS snapshot that will be used to initialize the created
         * EBS volumes. If set, the `volumeSize` attribute must be at least as large as the referenced
         * snapshot.
         */
        snapshotId: string;
        /**
         * The size of created volumes in GiB.
         * If `snapshotId` is set and `volumeSize` is omitted then the volume will have the same size
         * as the selected snapshot.
         */
        volumeSize: number;
        /**
         * The type of EBS volume to create. Can be one of "standard" (the
         * default), "io1", "io2" or "gp2".
         */
        volumeType: string;
    }

    export interface AmiCopyEphemeralBlockDevice {
        /**
         * The path at which the device is exposed to created instances.
         */
        deviceName: string;
        /**
         * A name for the ephemeral device, of the form "ephemeralN" where
         * *N* is a volume number starting from zero.
         */
        virtualName: string;
    }

    export interface AmiEbsBlockDevice {
        /**
         * Boolean controlling whether the EBS volumes created to
         * support each created instance will be deleted once that instance is terminated.
         */
        deleteOnTermination?: boolean;
        /**
         * The path at which the device is exposed to created instances.
         */
        deviceName: string;
        /**
         * Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshotId`.
         */
        encrypted?: boolean;
        /**
         * Number of I/O operations per second the
         * created volumes will support.
         */
        iops?: number;
        /**
         * The id of an EBS snapshot that will be used to initialize the created
         * EBS volumes. If set, the `volumeSize` attribute must be at least as large as the referenced
         * snapshot.
         */
        snapshotId?: string;
        /**
         * The size of created volumes in GiB.
         * If `snapshotId` is set and `volumeSize` is omitted then the volume will have the same size
         * as the selected snapshot.
         */
        volumeSize: number;
        /**
         * The type of EBS volume to create. Can be one of "standard" (the
         * default), "io1", "io2" or "gp2".
         */
        volumeType?: string;
    }

    export interface AmiEphemeralBlockDevice {
        /**
         * The path at which the device is exposed to created instances.
         */
        deviceName: string;
        /**
         * A name for the ephemeral device, of the form "ephemeralN" where
         * *N* is a volume number starting from zero.
         */
        virtualName: string;
    }

    export interface AmiFromInstanceEbsBlockDevice {
        /**
         * Boolean controlling whether the EBS volumes created to
         * support each created instance will be deleted once that instance is terminated.
         */
        deleteOnTermination: boolean;
        /**
         * The path at which the device is exposed to created instances.
         */
        deviceName: string;
        /**
         * Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `snapshotId`.
         */
        encrypted: boolean;
        /**
         * Number of I/O operations per second the
         * created volumes will support.
         */
        iops: number;
        /**
         * The id of an EBS snapshot that will be used to initialize the created
         * EBS volumes. If set, the `volumeSize` attribute must be at least as large as the referenced
         * snapshot.
         */
        snapshotId: string;
        /**
         * The size of created volumes in GiB.
         * If `snapshotId` is set and `volumeSize` is omitted then the volume will have the same size
         * as the selected snapshot.
         */
        volumeSize: number;
        /**
         * The type of EBS volume to create. Can be one of "standard" (the
         * default), "io1", "io2" or "gp2".
         */
        volumeType: string;
    }

    export interface AmiFromInstanceEphemeralBlockDevice {
        /**
         * The path at which the device is exposed to created instances.
         */
        deviceName: string;
        /**
         * A name for the ephemeral device, of the form "ephemeralN" where
         * *N* is a volume number starting from zero.
         */
        virtualName: string;
    }

    export interface DefaultNetworkAclEgress {
        /**
         * The action to take.
         */
        action: string;
        /**
         * The CIDR block to match. This must be a
         * valid network mask.
         */
        cidrBlock?: string;
        /**
         * The from port to match.
         */
        fromPort: number;
        /**
         * The ICMP type code to be used. Default 0.
         */
        icmpCode?: number;
        /**
         * The ICMP type to be used. Default 0.
         */
        icmpType?: number;
        /**
         * The IPv6 CIDR block.
         */
        ipv6CidrBlock?: string;
        /**
         * The protocol to match. If using the -1 'all'
         * protocol, you must specify a from and to port of 0.
         */
        protocol: string;
        /**
         * The rule number. Used for ordering.
         */
        ruleNo: number;
        /**
         * The to port to match.
         */
        toPort: number;
    }

    export interface DefaultNetworkAclIngress {
        /**
         * The action to take.
         */
        action: string;
        /**
         * The CIDR block to match. This must be a
         * valid network mask.
         */
        cidrBlock?: string;
        /**
         * The from port to match.
         */
        fromPort: number;
        /**
         * The ICMP type code to be used. Default 0.
         */
        icmpCode?: number;
        /**
         * The ICMP type to be used. Default 0.
         */
        icmpType?: number;
        /**
         * The IPv6 CIDR block.
         */
        ipv6CidrBlock?: string;
        /**
         * The protocol to match. If using the -1 'all'
         * protocol, you must specify a from and to port of 0.
         */
        protocol: string;
        /**
         * The rule number. Used for ordering.
         */
        ruleNo: number;
        /**
         * The to port to match.
         */
        toPort: number;
    }

    export interface DefaultRouteTableRoute {
        /**
         * The CIDR block of the route.
         */
        cidrBlock?: string;
        /**
         * Identifier of a VPC Egress Only Internet Gateway.
         */
        egressOnlyGatewayId?: string;
        /**
         * Identifier of a VPC internet gateway or a virtual private gateway.
         */
        gatewayId?: string;
        /**
         * Identifier of an EC2 instance.
         */
        instanceId?: string;
        /**
         * The Ipv6 CIDR block of the route
         */
        ipv6CidrBlock?: string;
        /**
         * Identifier of a VPC NAT gateway.
         */
        natGatewayId?: string;
        /**
         * Identifier of an EC2 network interface.
         */
        networkInterfaceId?: string;
        /**
         * Identifier of an EC2 Transit Gateway.
         */
        transitGatewayId?: string;
        /**
         * Identifier of a VPC Endpoint. This route must be removed prior to VPC Endpoint deletion.
         */
        vpcEndpointId?: string;
        /**
         * Identifier of a VPC peering connection.
         */
        vpcPeeringConnectionId?: string;
    }

    export interface DefaultSecurityGroupEgress {
        /**
         * List of CIDR blocks.
         */
        cidrBlocks?: string[];
        /**
         * Description of this egress rule.
         */
        description?: string;
        /**
         * The start port (or ICMP type number if protocol is "icmp")
         */
        fromPort: number;
        /**
         * List of IPv6 CIDR blocks.
         */
        ipv6CidrBlocks?: string[];
        /**
         * List of prefix list IDs (for allowing access to VPC endpoints)
         */
        prefixListIds?: string[];
        /**
         * The protocol. If you select a protocol of "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "fromPort" and "toPort" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
         */
        protocol: string;
        /**
         * List of security group Group Names if using EC2-Classic, or Group IDs if using a VPC.
         */
        securityGroups?: string[];
        /**
         * If true, the security group itself will be added as a source to this egress rule.
         */
        self?: boolean;
        /**
         * The end range port (or ICMP code if protocol is "icmp").
         */
        toPort: number;
    }

    export interface DefaultSecurityGroupIngress {
        /**
         * List of CIDR blocks.
         */
        cidrBlocks?: string[];
        /**
         * Description of this egress rule.
         */
        description?: string;
        /**
         * The start port (or ICMP type number if protocol is "icmp")
         */
        fromPort: number;
        /**
         * List of IPv6 CIDR blocks.
         */
        ipv6CidrBlocks?: string[];
        /**
         * List of prefix list IDs (for allowing access to VPC endpoints)
         */
        prefixListIds?: string[];
        /**
         * The protocol. If you select a protocol of "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "fromPort" and "toPort" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
         */
        protocol: string;
        /**
         * List of security group Group Names if using EC2-Classic, or Group IDs if using a VPC.
         */
        securityGroups?: string[];
        /**
         * If true, the security group itself will be added as a source to this egress rule.
         */
        self?: boolean;
        /**
         * The end range port (or ICMP code if protocol is "icmp").
         */
        toPort: number;
    }

    export interface FleetLaunchTemplateConfig {
        /**
         * Nested argument containing EC2 Launch Template to use. Defined below.
         */
        launchTemplateSpecification: outputs.ec2.FleetLaunchTemplateConfigLaunchTemplateSpecification;
        /**
         * Nested argument(s) containing parameters to override the same parameters in the Launch Template. Defined below.
         */
        overrides?: outputs.ec2.FleetLaunchTemplateConfigOverride[];
    }

    export interface FleetLaunchTemplateConfigLaunchTemplateSpecification {
        /**
         * ID of the launch template.
         */
        launchTemplateId?: string;
        /**
         * Name of the launch template.
         */
        launchTemplateName?: string;
        /**
         * Version number of the launch template.
         */
        version: string;
    }

    export interface FleetLaunchTemplateConfigOverride {
        /**
         * Availability Zone in which to launch the instances.
         */
        availabilityZone?: string;
        /**
         * Instance type.
         */
        instanceType?: string;
        /**
         * Maximum price per unit hour that you are willing to pay for a Spot Instance.
         */
        maxPrice?: string;
        /**
         * Priority for the launch template override. If `onDemandOptions` `allocationStrategy` is set to `prioritized`, EC2 Fleet uses priority to determine which launch template override to use first in fulfilling On-Demand capacity. The highest priority is launched first. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority. Valid values are whole numbers starting at 0.
         */
        priority?: number;
        /**
         * ID of the subnet in which to launch the instances.
         */
        subnetId?: string;
        /**
         * Number of units provided by the specified instance type.
         */
        weightedCapacity?: number;
    }

    export interface FleetOnDemandOptions {
        /**
         * How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
         */
        allocationStrategy?: string;
    }

    export interface FleetSpotOptions {
        /**
         * How to allocate the target capacity across the Spot pools. Valid values: `diversified`, `lowestPrice`. Default: `lowestPrice`.
         */
        allocationStrategy?: string;
        /**
         * Behavior when a Spot Instance is interrupted. Valid values: `hibernate`, `stop`, `terminate`. Default: `terminate`.
         */
        instanceInterruptionBehavior?: string;
        /**
         * Number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot `allocationStrategy` is set to `lowestPrice`. Default: `1`.
         */
        instancePoolsToUseCount?: number;
        /**
         * Nested argument containing maintenance strategies for managing your Spot Instances that are at an elevated risk of being interrupted. Defined below.
         */
        maintenanceStrategies?: outputs.ec2.FleetSpotOptionsMaintenanceStrategies;
    }

    export interface FleetSpotOptionsMaintenanceStrategies {
        /**
         * Nested argument containing the capacity rebalance for your fleet request. Defined below.
         */
        capacityRebalance?: outputs.ec2.FleetSpotOptionsMaintenanceStrategiesCapacityRebalance;
    }

    export interface FleetSpotOptionsMaintenanceStrategiesCapacityRebalance {
        /**
         * The replacement strategy to use. Only available for fleets of `type` set to `maintain`. Valid values: `launch`.
         */
        replacementStrategy?: string;
    }

    export interface FleetTargetCapacitySpecification {
        /**
         * Default target capacity type. Valid values: `on-demand`, `spot`.
         */
        defaultTargetCapacityType: string;
        /**
         * The number of On-Demand units to request.
         */
        onDemandTargetCapacity?: number;
        /**
         * The number of Spot units to request.
         */
        spotTargetCapacity?: number;
        /**
         * The number of units to request, filled using `defaultTargetCapacityType`.
         */
        totalTargetCapacity: number;
    }

    export interface GetCoipPoolFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A COIP Pool will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetCoipPoolsFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCoipPools.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A COIP Pool will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetCustomerGatewayFilter {
        name: string;
        values: string[];
    }

    export interface GetInstanceCreditSpecification {
        cpuCredits: string;
    }

    export interface GetInstanceEbsBlockDevice {
        /**
         * If the root block device will be deleted on termination.
         */
        deleteOnTermination: boolean;
        /**
         * The physical name of the device.
         */
        deviceName: string;
        /**
         * If the EBS volume is encrypted.
         */
        encrypted: boolean;
        /**
         * `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
         */
        iops: number;
        kmsKeyId: string;
        /**
         * The ID of the snapshot.
         */
        snapshotId: string;
        volumeId: string;
        /**
         * The size of the volume, in GiB.
         */
        volumeSize: number;
        /**
         * The type of the volume.
         */
        volumeType: string;
    }

    export interface GetInstanceEphemeralBlockDevice {
        /**
         * The physical name of the device.
         */
        deviceName: string;
        /**
         * Whether the specified device included in the device mapping was suppressed or not (Boolean).
         */
        noDevice?: boolean;
        /**
         * The virtual device name.
         */
        virtualName?: string;
    }

    export interface GetInstanceFilter {
        name: string;
        values: string[];
    }

    export interface GetInstanceMetadataOption {
        /**
         * The state of the metadata service: `enabled`, `disabled`.
         */
        httpEndpoint: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests.
         */
        httpPutResponseHopLimit: number;
        /**
         * If session tokens are required: `optional`, `required`.
         */
        httpTokens: string;
    }

    export interface GetInstanceRootBlockDevice {
        /**
         * If the root block device will be deleted on termination.
         */
        deleteOnTermination: boolean;
        /**
         * The physical name of the device.
         */
        deviceName: string;
        /**
         * If the EBS volume is encrypted.
         */
        encrypted: boolean;
        /**
         * `0` If the volume is not a provisioned IOPS image, otherwise the supported IOPS count.
         */
        iops: number;
        kmsKeyId: string;
        volumeId: string;
        /**
         * The size of the volume, in GiB.
         */
        volumeSize: number;
        /**
         * The type of the volume.
         */
        volumeType: string;
    }

    export interface GetInstanceTypeFpga {
        count: number;
        manufacturer: string;
        /**
         * Size of the instance memory, in MiB.
         */
        memorySize: number;
        name: string;
    }

    export interface GetInstanceTypeGpus {
        count: number;
        manufacturer: string;
        /**
         * Size of the instance memory, in MiB.
         */
        memorySize: number;
        name: string;
    }

    export interface GetInstanceTypeInferenceAccelerator {
        count: number;
        manufacturer: string;
        name: string;
    }

    export interface GetInstanceTypeInstanceDisk {
        count: number;
        size: number;
        type: string;
    }

    export interface GetInstanceTypeOfferingFilter {
        /**
         * Name of the filter. The `location` filter depends on the top-level `locationType` argument and if not specified, defaults to the current region.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetInstanceTypeOfferingsFilter {
        /**
         * Name of the filter. The `location` filter depends on the top-level `locationType` argument and if not specified, defaults to the current region.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetInstancesFilter {
        name: string;
        values: string[];
    }

    export interface GetInternetGatewayAttachment {
        /**
         * The current state of the attachment between the gateway and the VPC. Present only if a VPC is attached
         */
        state: string;
        /**
         * The ID of an attached VPC.
         */
        vpcId: string;
    }

    export interface GetInternetGatewayFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInternetGateways.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * An Internet Gateway will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetLaunchConfigurationEbsBlockDevice {
        /**
         * Whether the EBS Volume will be deleted on instance termination.
         */
        deleteOnTermination: boolean;
        /**
         * The Name of the device.
         */
        deviceName: string;
        /**
         * Whether the volume is Encrypted.
         */
        encrypted: boolean;
        /**
         * The provisioned IOPs of the volume.
         */
        iops: number;
        /**
         * Whether the device in the block device mapping of the AMI is suppressed.
         */
        noDevice: boolean;
        /**
         * The Snapshot ID of the mount.
         */
        snapshotId: string;
        /**
         * The Size of the volume.
         */
        volumeSize: number;
        /**
         * The Type of the volume.
         */
        volumeType: string;
    }

    export interface GetLaunchConfigurationEphemeralBlockDevice {
        /**
         * The Name of the device.
         */
        deviceName: string;
        /**
         * The Virtual Name of the device.
         */
        virtualName: string;
    }

    export interface GetLaunchConfigurationRootBlockDevice {
        /**
         * Whether the EBS Volume will be deleted on instance termination.
         */
        deleteOnTermination: boolean;
        /**
         * Whether the volume is Encrypted.
         */
        encrypted: boolean;
        /**
         * The provisioned IOPs of the volume.
         */
        iops: number;
        /**
         * The Size of the volume.
         */
        volumeSize: number;
        /**
         * The Type of the volume.
         */
        volumeType: string;
    }

    export interface GetLaunchTemplateBlockDeviceMapping {
        deviceName: string;
        ebs: outputs.ec2.GetLaunchTemplateBlockDeviceMappingEb[];
        noDevice: string;
        virtualName: string;
    }

    export interface GetLaunchTemplateBlockDeviceMappingEb {
        deleteOnTermination: string;
        encrypted: string;
        iops: number;
        kmsKeyId: string;
        snapshotId: string;
        throughput: number;
        volumeSize: number;
        volumeType: string;
    }

    export interface GetLaunchTemplateCreditSpecification {
        cpuCredits: string;
    }

    export interface GetLaunchTemplateElasticGpuSpecification {
        type: string;
    }

    export interface GetLaunchTemplateFilter {
        /**
         * The name of the filter field. Valid values can be found in the [EC2 DescribeLaunchTemplates API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
         */
        values: string[];
    }

    export interface GetLaunchTemplateHibernationOption {
        configured: boolean;
    }

    export interface GetLaunchTemplateIamInstanceProfile {
        /**
         * Amazon Resource Name (ARN) of the launch template.
         */
        arn: string;
        /**
         * The name of the filter field. Valid values can be found in the [EC2 DescribeLaunchTemplates API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html).
         */
        name: string;
    }

    export interface GetLaunchTemplateInstanceMarketOption {
        marketType: string;
        spotOptions: outputs.ec2.GetLaunchTemplateInstanceMarketOptionSpotOption[];
    }

    export interface GetLaunchTemplateInstanceMarketOptionSpotOption {
        blockDurationMinutes: number;
        instanceInterruptionBehavior: string;
        maxPrice: string;
        spotInstanceType: string;
        validUntil: string;
    }

    export interface GetLaunchTemplateMetadataOption {
        /**
         * The state of the metadata service: `enabled`, `disabled`.
         */
        httpEndpoint: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests.
         */
        httpPutResponseHopLimit: number;
        /**
         * If session tokens are required: `optional`, `required`.
         */
        httpTokens: string;
    }

    export interface GetLaunchTemplateMonitoring {
        enabled: boolean;
    }

    export interface GetLaunchTemplateNetworkInterface {
        associateCarrierIpAddress: string;
        associatePublicIpAddress?: boolean;
        deleteOnTermination?: boolean;
        /**
         * Description of the launch template.
         */
        description: string;
        deviceIndex: number;
        ipv4AddressCount: number;
        ipv4Addresses: string[];
        ipv6AddressCount: number;
        ipv6Addresses: string[];
        networkInterfaceId: string;
        privateIpAddress: string;
        securityGroups: string[];
        subnetId: string;
    }

    export interface GetLaunchTemplatePlacement {
        affinity: string;
        availabilityZone: string;
        groupName: string;
        hostId: string;
        partitionNumber: number;
        spreadDomain: string;
        tenancy: string;
    }

    export interface GetLaunchTemplateTagSpecification {
        resourceType: string;
        /**
         * A map of tags, each pair of which must exactly match a pair on the desired Launch Template.
         */
        tags: {[key: string]: string};
    }

    export interface GetLocalGatewayFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGateways.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A Local Gateway will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetLocalGatewayRouteTableFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGatewayRouteTables.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A local gateway route table will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetLocalGatewayRouteTablesFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGatewayRouteTables.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A Local Gateway Route Table will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetLocalGatewayVirtualInterfaceFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetLocalGatewayVirtualInterfaceGroupFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetLocalGatewayVirtualInterfaceGroupsFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetLocalGatewaysFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLocalGateways.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A Local Gateway will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetNatGatewayFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNatGateways.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * An Nat Gateway will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetNetworkAclsFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkAcls.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPC will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetNetworkInterfaceAssociation {
        /**
         * The allocation ID.
         */
        allocationId: string;
        /**
         * The association ID.
         */
        associationId: string;
        /**
         * The ID of the Elastic IP address owner.
         */
        ipOwnerId: string;
        /**
         * The public DNS name.
         */
        publicDnsName: string;
        /**
         * The address of the Elastic IP address bound to the network interface.
         */
        publicIp: string;
    }

    export interface GetNetworkInterfaceAttachment {
        attachmentId: string;
        deviceIndex: number;
        instanceId: string;
        instanceOwnerId: string;
    }

    export interface GetNetworkInterfaceFilter {
        name: string;
        values: string[];
    }

    export interface GetNetworkInterfacesFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeNetworkInterfaces.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         */
        values: string[];
    }

    export interface GetRouteTableAssociation {
        /**
         * The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
         */
        gatewayId: string;
        /**
         * If the Association due to the Main Route Table.
         */
        main: boolean;
        /**
         * The Association ID.
         */
        routeTableAssociationId: string;
        /**
         * The id of the specific Route Table to retrieve.
         */
        routeTableId: string;
        /**
         * The id of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
         */
        subnetId: string;
    }

    export interface GetRouteTableFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A Route Table will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetRouteTableRoute {
        /**
         * The CIDR block of the route.
         */
        cidrBlock: string;
        /**
         * The ID of the Egress Only Internet Gateway.
         */
        egressOnlyGatewayId: string;
        /**
         * The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
         */
        gatewayId: string;
        /**
         * The EC2 instance ID.
         */
        instanceId: string;
        /**
         * The IPv6 CIDR block of the route.
         */
        ipv6CidrBlock: string;
        /**
         * The Local Gateway ID.
         */
        localGatewayId: string;
        /**
         * The NAT Gateway ID.
         */
        natGatewayId: string;
        /**
         * The ID of the elastic network interface (eni) to use.
         */
        networkInterfaceId: string;
        /**
         * The EC2 Transit Gateway ID.
         */
        transitGatewayId: string;
        /**
         * The VPC Endpoint ID.
         */
        vpcEndpointId: string;
        /**
         * The VPC Peering ID.
         */
        vpcPeeringConnectionId: string;
    }

    export interface GetRouteTablesFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A Route Table will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetSecurityGroupFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A Security Group will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetSecurityGroupsFilter {
        name: string;
        values: string[];
    }

    export interface GetSpotPriceFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetSubnetFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
         * For example, if matching against tag `Name`, use:
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A subnet will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetSubnetIdsFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
         * For example, if matching against tag `Name`, use:
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * Subnet IDs will be selected if any one of the given values match.
         */
        values: string[];
    }

    export interface GetVpcCidrBlockAssociation {
        /**
         * The association ID for the the IPv4 CIDR block.
         */
        associationId: string;
        /**
         * The cidr block of the desired VPC.
         */
        cidrBlock: string;
        /**
         * The current state of the desired VPC.
         * Can be either `"pending"` or `"available"`.
         */
        state: string;
    }

    export interface GetVpcDhcpOptionsFilter {
        /**
         * The name of the field to filter.
         */
        name: string;
        /**
         * Set of values for filtering.
         */
        values: string[];
    }

    export interface GetVpcEndpointDnsEntry {
        /**
         * The DNS name.
         */
        dnsName: string;
        /**
         * The ID of the private hosted zone.
         */
        hostedZoneId: string;
    }

    export interface GetVpcEndpointFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcEndpoints.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPC Endpoint will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetVpcEndpointServiceFilter {
        /**
         * The name of the filter field. Valid values can be found in the [EC2 DescribeVpcEndpointServices API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcEndpointServices.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
         */
        values: string[];
    }

    export interface GetVpcFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPC will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetVpcPeeringConnectionFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPC Peering Connection will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetVpcPeeringConnectionsFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPC Peering Connection will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetVpcsFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPC will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetVpnGatewayFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnGateways.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * A VPN Gateway will be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface InstanceCreditSpecification {
        /**
         * The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
         */
        cpuCredits?: string;
    }

    export interface InstanceEbsBlockDevice {
        /**
         * Whether the volume should be destroyed
         * on instance termination (Default: `true`).
         */
        deleteOnTermination?: boolean;
        /**
         * The name of the device to mount.
         */
        deviceName: string;
        /**
         * Enables [EBS
         * encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
         * on the volume (Default: `false`). Cannot be used with `snapshotId`. Must be configured to perform drift detection.
         */
        encrypted: boolean;
        /**
         * The amount of provisioned
         * [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
         * This must be set with a `volumeType` of `"io1/io2"`.
         */
        iops: number;
        /**
         * Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
         */
        kmsKeyId: string;
        /**
         * The Snapshot ID to mount.
         */
        snapshotId: string;
        volumeId: string;
        /**
         * The size of the volume in gibibytes (GiB).
         */
        volumeSize: number;
        /**
         * The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`
         * or `"io2"`. (Default: `"gp2"`).
         */
        volumeType: string;
    }

    export interface InstanceEphemeralBlockDevice {
        /**
         * The name of the block device to mount on the instance.
         */
        deviceName: string;
        /**
         * Suppresses the specified device included in the AMI's block device mapping.
         */
        noDevice?: boolean;
        /**
         * The [Instance Store Device
         * Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
         * (e.g. `"ephemeral0"`).
         */
        virtualName?: string;
    }

    export interface InstanceMetadataOptions {
        /**
         * Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
         */
        httpEndpoint: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
         */
        httpPutResponseHopLimit: number;
        /**
         * Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
         */
        httpTokens: string;
    }

    export interface InstanceNetworkInterface {
        /**
         * Whether or not to delete the network interface on instance termination. Defaults to `false`. Currently, the only valid value is `false`, as this is only supported when creating new network interfaces when launching an instance.
         */
        deleteOnTermination?: boolean;
        /**
         * The integer index of the network interface attachment. Limited by instance type.
         */
        deviceIndex: number;
        /**
         * The ID of the network interface to attach.
         */
        networkInterfaceId: string;
    }

    export interface InstanceRootBlockDevice {
        /**
         * Whether the volume should be destroyed
         * on instance termination (Default: `true`).
         */
        deleteOnTermination?: boolean;
        /**
         * The name of the device to mount.
         */
        deviceName: string;
        /**
         * Enable volume encryption. (Default: `false`). Must be configured to perform drift detection.
         */
        encrypted: boolean;
        /**
         * The amount of provisioned
         * [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
         * This is only valid for `volumeType` of `"io1/io2"`, and must be specified if
         * using that type
         */
        iops: number;
        /**
         * Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
         */
        kmsKeyId: string;
        volumeId: string;
        /**
         * The size of the volume in gibibytes (GiB).
         */
        volumeSize: number;
        /**
         * The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`, `"io2"`, `"sc1"`, or `"st1"`. (Default: `"gp2"`).
         */
        volumeType: string;
    }

    export interface LaunchConfigurationEbsBlockDevice {
        deleteOnTermination?: boolean;
        deviceName: string;
        encrypted: boolean;
        iops: number;
        noDevice?: boolean;
        snapshotId: string;
        volumeSize: number;
        volumeType: string;
    }

    export interface LaunchConfigurationEphemeralBlockDevice {
        deviceName: string;
        virtualName: string;
    }

    export interface LaunchConfigurationRootBlockDevice {
        deleteOnTermination?: boolean;
        encrypted: boolean;
        iops: number;
        volumeSize: number;
        volumeType: string;
    }

    export interface LaunchTemplateBlockDeviceMapping {
        /**
         * The name of the device to mount.
         */
        deviceName?: string;
        /**
         * Configure EBS volume properties.
         */
        ebs?: outputs.ec2.LaunchTemplateBlockDeviceMappingEbs;
        /**
         * Suppresses the specified device included in the AMI's block device mapping.
         */
        noDevice?: string;
        /**
         * The [Instance Store Device
         * Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
         * (e.g. `"ephemeral0"`).
         */
        virtualName?: string;
    }

    export interface LaunchTemplateBlockDeviceMappingEbs {
        /**
         * Whether the volume should be destroyed on instance termination. Defaults to `false` if not set. See [Preserving Amazon EBS Volumes on Instance Termination](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#preserving-volumes-on-termination) for more information.
         */
        deleteOnTermination?: string;
        /**
         * Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
         * on the volume (Default: `false`). Cannot be used with `snapshotId`.
         */
        encrypted?: string;
        /**
         * The amount of provisioned
         * [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
         * This must be set with a `volumeType` of `"io1/io2"`.
         */
        iops: number;
        /**
         * The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume.
         * `encrypted` must be set to `true` when this is set.
         */
        kmsKeyId?: string;
        /**
         * The Snapshot ID to mount.
         */
        snapshotId?: string;
        throughput: number;
        /**
         * The size of the volume in gigabytes.
         */
        volumeSize: number;
        /**
         * The volume type. Can be `standard`, `gp2`, `gp3`, `io1`, `io2`, `sc1` or `st1` (Default: `gp2`).
         */
        volumeType: string;
    }

    export interface LaunchTemplateCapacityReservationSpecification {
        /**
         * Indicates the instance's Capacity Reservation preferences. Can be `open` or `none`. (Default `none`).
         */
        capacityReservationPreference?: string;
        /**
         * Used to target a specific Capacity Reservation:
         */
        capacityReservationTarget?: outputs.ec2.LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget;
    }

    export interface LaunchTemplateCapacityReservationSpecificationCapacityReservationTarget {
        /**
         * The ID of the Capacity Reservation to target.
         */
        capacityReservationId?: string;
    }

    export interface LaunchTemplateCpuOptions {
        /**
         * The number of CPU cores for the instance.
         */
        coreCount?: number;
        /**
         * The number of threads per CPU core. To disable Intel Hyper-Threading Technology for the instance, specify a value of 1.
         * Otherwise, specify the default value of 2.
         */
        threadsPerCore?: number;
    }

    export interface LaunchTemplateCreditSpecification {
        /**
         * The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
         */
        cpuCredits?: string;
    }

    export interface LaunchTemplateElasticGpuSpecification {
        /**
         * The [Elastic GPU Type](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-gpus.html#elastic-gpus-basics)
         */
        type: string;
    }

    export interface LaunchTemplateElasticInferenceAccelerator {
        /**
         * Accelerator type.
         */
        type: string;
    }

    export interface LaunchTemplateHibernationOptions {
        /**
         * If set to `true`, the launched EC2 instance will hibernation enabled.
         */
        configured: boolean;
    }

    export interface LaunchTemplateIamInstanceProfile {
        /**
         * The Amazon Resource Name (ARN) of the instance profile.
         */
        arn?: string;
        /**
         * The name of the instance profile.
         */
        name?: string;
    }

    export interface LaunchTemplateInstanceMarketOptions {
        /**
         * The market type. Can be `spot`.
         */
        marketType?: string;
        /**
         * The options for [Spot Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances.html)
         */
        spotOptions?: outputs.ec2.LaunchTemplateInstanceMarketOptionsSpotOptions;
    }

    export interface LaunchTemplateInstanceMarketOptionsSpotOptions {
        /**
         * The required duration in minutes. This value must be a multiple of 60.
         */
        blockDurationMinutes?: number;
        /**
         * The behavior when a Spot Instance is interrupted. Can be `hibernate`,
         * `stop`, or `terminate`. (Default: `terminate`).
         */
        instanceInterruptionBehavior?: string;
        /**
         * The maximum hourly price you're willing to pay for the Spot Instances.
         */
        maxPrice?: string;
        /**
         * The Spot Instance request type. Can be `one-time`, or `persistent`.
         */
        spotInstanceType?: string;
        /**
         * The end date of the request.
         */
        validUntil: string;
    }

    export interface LaunchTemplateLicenseSpecification {
        /**
         * ARN of the license configuration.
         */
        licenseConfigurationArn: string;
    }

    export interface LaunchTemplateMetadataOptions {
        /**
         * Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
         */
        httpEndpoint: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
         */
        httpPutResponseHopLimit: number;
        /**
         * Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
         */
        httpTokens: string;
    }

    export interface LaunchTemplateMonitoring {
        /**
         * If `true`, the launched EC2 instance will have detailed monitoring enabled.
         */
        enabled?: boolean;
    }

    export interface LaunchTemplateNetworkInterface {
        /**
         * Associate a Carrier IP address with `eth0` for a new network interface. Use this option when you launch an instance in a Wavelength Zone and want to associate a Carrier IP address with the network interface. Boolean value.
         */
        associateCarrierIpAddress?: string;
        /**
         * Associate a public ip address with the network interface.  Boolean value.
         */
        associatePublicIpAddress?: string;
        /**
         * Whether the network interface should be destroyed on instance termination. Defaults to `false` if not set.
         */
        deleteOnTermination?: string;
        /**
         * Description of the network interface.
         */
        description?: string;
        /**
         * The integer index of the network interface attachment.
         */
        deviceIndex?: number;
        /**
         * The number of secondary private IPv4 addresses to assign to a network interface. Conflicts with `ipv4Addresses`
         */
        ipv4AddressCount?: number;
        /**
         * One or more private IPv4 addresses to associate. Conflicts with `ipv4AddressCount`
         */
        ipv4Addresses?: string[];
        /**
         * The number of IPv6 addresses to assign to a network interface. Conflicts with `ipv6Addresses`
         */
        ipv6AddressCount?: number;
        /**
         * One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. Conflicts with `ipv6AddressCount`
         */
        ipv6Addresses?: string[];
        /**
         * The ID of the network interface to attach.
         */
        networkInterfaceId?: string;
        /**
         * The primary private IPv4 address.
         */
        privateIpAddress?: string;
        /**
         * A list of security group IDs to associate.
         */
        securityGroups?: string[];
        /**
         * The VPC Subnet ID to associate.
         */
        subnetId?: string;
    }

    export interface LaunchTemplatePlacement {
        /**
         * The affinity setting for an instance on a Dedicated Host.
         */
        affinity?: string;
        /**
         * The Availability Zone for the instance.
         */
        availabilityZone?: string;
        /**
         * The name of the placement group for the instance.
         */
        groupName?: string;
        /**
         * The ID of the Dedicated Host for the instance.
         */
        hostId?: string;
        /**
         * The number of the partition the instance should launch in. Valid only if the placement group strategy is set to partition.
         */
        partitionNumber?: number;
        /**
         * Reserved for future use.
         */
        spreadDomain?: string;
        /**
         * The tenancy of the instance (if the instance is running in a VPC). Can be `default`, `dedicated`, or `host`.
         */
        tenancy?: string;
    }

    export interface LaunchTemplateTagSpecification {
        /**
         * The type of resource to tag. Valid values are `instance`, `volume`, `elastic-gpu` and `spot-instances-request`.
         */
        resourceType?: string;
        /**
         * A map of tags to assign to the resource.
         */
        tags?: {[key: string]: string};
    }

    export interface NetworkAclEgress {
        /**
         * The action to take.
         */
        action: string;
        /**
         * The CIDR block to match. This must be a
         * valid network mask.
         */
        cidrBlock?: string;
        /**
         * The from port to match.
         */
        fromPort: number;
        /**
         * The ICMP type code to be used. Default 0.
         */
        icmpCode?: number;
        /**
         * The ICMP type to be used. Default 0.
         */
        icmpType?: number;
        /**
         * The IPv6 CIDR block.
         */
        ipv6CidrBlock?: string;
        /**
         * The protocol to match. If using the -1 'all'
         * protocol, you must specify a from and to port of 0.
         */
        protocol: string;
        /**
         * The rule number. Used for ordering.
         */
        ruleNo: number;
        /**
         * The to port to match.
         */
        toPort: number;
    }

    export interface NetworkAclIngress {
        /**
         * The action to take.
         */
        action: string;
        /**
         * The CIDR block to match. This must be a
         * valid network mask.
         */
        cidrBlock?: string;
        /**
         * The from port to match.
         */
        fromPort: number;
        /**
         * The ICMP type code to be used. Default 0.
         */
        icmpCode?: number;
        /**
         * The ICMP type to be used. Default 0.
         */
        icmpType?: number;
        /**
         * The IPv6 CIDR block.
         */
        ipv6CidrBlock?: string;
        /**
         * The protocol to match. If using the -1 'all'
         * protocol, you must specify a from and to port of 0.
         */
        protocol: string;
        /**
         * The rule number. Used for ordering.
         */
        ruleNo: number;
        /**
         * The to port to match.
         */
        toPort: number;
    }

    export interface NetworkInterfaceAttachment {
        attachmentId: string;
        /**
         * Integer to define the devices index.
         */
        deviceIndex: number;
        /**
         * ID of the instance to attach to.
         */
        instance: string;
    }

    export interface PeeringConnectionOptionsAccepter {
        /**
         * Allow a local linked EC2-Classic instance to communicate
         * with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
         * to the remote VPC. This option is not supported for inter-region VPC peering.
         */
        allowClassicLinkToRemoteVpc?: boolean;
        /**
         * Allow a local VPC to resolve public DNS hostnames to
         * private IP addresses when queried from instances in the peer VPC.
         */
        allowRemoteVpcDnsResolution?: boolean;
        /**
         * Allow a local VPC to communicate with a linked EC2-Classic
         * instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
         * connection. This option is not supported for inter-region VPC peering.
         */
        allowVpcToRemoteClassicLink?: boolean;
    }

    export interface PeeringConnectionOptionsRequester {
        /**
         * Allow a local linked EC2-Classic instance to communicate
         * with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
         * to the remote VPC. This option is not supported for inter-region VPC peering.
         */
        allowClassicLinkToRemoteVpc?: boolean;
        /**
         * Allow a local VPC to resolve public DNS hostnames to
         * private IP addresses when queried from instances in the peer VPC.
         */
        allowRemoteVpcDnsResolution?: boolean;
        /**
         * Allow a local VPC to communicate with a linked EC2-Classic
         * instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
         * connection. This option is not supported for inter-region VPC peering.
         */
        allowVpcToRemoteClassicLink?: boolean;
    }

    export interface RouteTableRoute {
        /**
         * The CIDR block of the route.
         */
        cidrBlock?: string;
        /**
         * Identifier of a VPC Egress Only Internet Gateway.
         */
        egressOnlyGatewayId?: string;
        /**
         * Identifier of a VPC internet gateway or a virtual private gateway.
         */
        gatewayId?: string;
        /**
         * Identifier of an EC2 instance.
         */
        instanceId?: string;
        /**
         * The Ipv6 CIDR block of the route.
         */
        ipv6CidrBlock?: string;
        /**
         * Identifier of a Outpost local gateway.
         */
        localGatewayId?: string;
        /**
         * Identifier of a VPC NAT gateway.
         */
        natGatewayId?: string;
        /**
         * Identifier of an EC2 network interface.
         */
        networkInterfaceId?: string;
        /**
         * Identifier of an EC2 Transit Gateway.
         */
        transitGatewayId?: string;
        /**
         * Identifier of a VPC Endpoint.
         */
        vpcEndpointId?: string;
        /**
         * Identifier of a VPC peering connection.
         */
        vpcPeeringConnectionId?: string;
    }

    export interface SecurityGroupEgress {
        /**
         * List of CIDR blocks.
         */
        cidrBlocks?: string[];
        /**
         * Description of this egress rule.
         */
        description?: string;
        /**
         * The start port (or ICMP type number if protocol is "icmp")
         */
        fromPort: number;
        /**
         * List of IPv6 CIDR blocks.
         */
        ipv6CidrBlocks?: string[];
        /**
         * List of prefix list IDs (for allowing access to VPC endpoints)
         */
        prefixListIds?: string[];
        /**
         * The protocol. If you select a protocol of
         * "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "fromPort" and "toPort" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
         */
        protocol: string;
        /**
         * List of security group Group Names if using
         * EC2-Classic, or Group IDs if using a VPC.
         */
        securityGroups?: string[];
        /**
         * If true, the security group itself will be added as
         * a source to this egress rule.
         */
        self?: boolean;
        /**
         * The end range port (or ICMP code if protocol is "icmp").
         */
        toPort: number;
    }

    export interface SecurityGroupIngress {
        /**
         * List of CIDR blocks.
         */
        cidrBlocks?: string[];
        /**
         * Description of this egress rule.
         */
        description?: string;
        /**
         * The start port (or ICMP type number if protocol is "icmp")
         */
        fromPort: number;
        /**
         * List of IPv6 CIDR blocks.
         */
        ipv6CidrBlocks?: string[];
        /**
         * List of prefix list IDs (for allowing access to VPC endpoints)
         */
        prefixListIds?: string[];
        /**
         * The protocol. If you select a protocol of
         * "-1" (semantically equivalent to `"all"`, which is not a valid value here), you must specify a "fromPort" and "toPort" equal to 0. If not icmp, tcp, udp, or "-1" use the [protocol number](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)
         */
        protocol: string;
        /**
         * List of security group Group Names if using
         * EC2-Classic, or Group IDs if using a VPC.
         */
        securityGroups?: string[];
        /**
         * If true, the security group itself will be added as
         * a source to this egress rule.
         */
        self?: boolean;
        /**
         * The end range port (or ICMP code if protocol is "icmp").
         */
        toPort: number;
    }

    export interface SpotFleetRequestLaunchSpecification {
        ami: string;
        associatePublicIpAddress?: boolean;
        /**
         * The availability zone in which to place the request.
         */
        availabilityZone: string;
        ebsBlockDevices: outputs.ec2.SpotFleetRequestLaunchSpecificationEbsBlockDevice[];
        ebsOptimized?: boolean;
        ephemeralBlockDevices: outputs.ec2.SpotFleetRequestLaunchSpecificationEphemeralBlockDevice[];
        iamInstanceProfile?: string;
        iamInstanceProfileArn?: string;
        /**
         * The type of instance to request.
         */
        instanceType: string;
        keyName: string;
        monitoring?: boolean;
        placementGroup: string;
        placementTenancy?: string;
        rootBlockDevices: outputs.ec2.SpotFleetRequestLaunchSpecificationRootBlockDevice[];
        /**
         * The maximum spot bid for this override request.
         */
        spotPrice?: string;
        /**
         * The subnet in which to launch the requested instance.
         */
        subnetId: string;
        /**
         * A map of tags to assign to the resource.
         */
        tags?: {[key: string]: string};
        userData?: string;
        vpcSecurityGroupIds: string[];
        /**
         * The capacity added to the fleet by a fulfilled request.
         */
        weightedCapacity?: string;
    }

    export interface SpotFleetRequestLaunchSpecificationEbsBlockDevice {
        deleteOnTermination?: boolean;
        deviceName: string;
        encrypted: boolean;
        iops: number;
        kmsKeyId: string;
        snapshotId: string;
        throughput: number;
        volumeSize: number;
        volumeType: string;
    }

    export interface SpotFleetRequestLaunchSpecificationEphemeralBlockDevice {
        deviceName: string;
        virtualName: string;
    }

    export interface SpotFleetRequestLaunchSpecificationRootBlockDevice {
        deleteOnTermination?: boolean;
        encrypted: boolean;
        iops: number;
        kmsKeyId: string;
        throughput: number;
        volumeSize: number;
        volumeType: string;
    }

    export interface SpotFleetRequestLaunchTemplateConfig {
        /**
         * Launch template specification. See Launch Template Specification below for more details.
         */
        launchTemplateSpecification: outputs.ec2.SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification;
        /**
         * One or more override configurations. See Overrides below for more details.
         */
        overrides?: outputs.ec2.SpotFleetRequestLaunchTemplateConfigOverride[];
    }

    export interface SpotFleetRequestLaunchTemplateConfigLaunchTemplateSpecification {
        /**
         * The ID of the launch template. Conflicts with `name`.
         */
        id?: string;
        /**
         * The name of the launch template. Conflicts with `id`.
         */
        name?: string;
        /**
         * Template version. Unlike the autoscaling equivalent, does not support `$Latest` or `$Default`, so use the launchTemplate resource's attribute, e.g. `"${aws_launch_template.foo.latest_version}"`. It will use the default version if omitted.
         */
        version?: string;
    }

    export interface SpotFleetRequestLaunchTemplateConfigOverride {
        /**
         * The availability zone in which to place the request.
         */
        availabilityZone?: string;
        /**
         * The type of instance to request.
         */
        instanceType?: string;
        /**
         * The priority for the launch template override. The lower the number, the higher the priority. If no number is set, the launch template override has the lowest priority.
         */
        priority: number;
        /**
         * The maximum spot bid for this override request.
         */
        spotPrice: string;
        /**
         * The subnet in which to launch the requested instance.
         */
        subnetId: string;
        /**
         * The capacity added to the fleet by a fulfilled request.
         */
        weightedCapacity: number;
    }

    export interface SpotFleetRequestSpotMaintenanceStrategies {
        /**
         * Nested argument containing the capacity rebalance for your fleet request. Defined below.
         */
        capacityRebalance?: outputs.ec2.SpotFleetRequestSpotMaintenanceStrategiesCapacityRebalance;
    }

    export interface SpotFleetRequestSpotMaintenanceStrategiesCapacityRebalance {
        /**
         * The replacement strategy to use. Only available for spot fleets with `fleetType` set to `maintain`. Valid values: `launch`.
         */
        replacementStrategy?: string;
    }

    export interface SpotInstanceRequestCreditSpecification {
        /**
         * The credit option for CPU usage. Can be `"standard"` or `"unlimited"`. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
         */
        cpuCredits?: string;
    }

    export interface SpotInstanceRequestEbsBlockDevice {
        /**
         * Whether the volume should be destroyed
         * on instance termination (Default: `true`).
         */
        deleteOnTermination?: boolean;
        /**
         * The name of the device to mount.
         */
        deviceName: string;
        /**
         * Enables [EBS
         * encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html)
         * on the volume (Default: `false`). Cannot be used with `snapshotId`. Must be configured to perform drift detection.
         */
        encrypted: boolean;
        /**
         * The amount of provisioned
         * [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
         * This must be set with a `volumeType` of `"io1/io2"`.
         */
        iops: number;
        /**
         * Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
         */
        kmsKeyId: string;
        /**
         * The Snapshot ID to mount.
         */
        snapshotId: string;
        volumeId: string;
        /**
         * The size of the volume in gibibytes (GiB).
         */
        volumeSize: number;
        /**
         * The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`
         * or `"io2"`. (Default: `"gp2"`).
         */
        volumeType: string;
    }

    export interface SpotInstanceRequestEphemeralBlockDevice {
        /**
         * The name of the block device to mount on the instance.
         */
        deviceName: string;
        /**
         * Suppresses the specified device included in the AMI's block device mapping.
         */
        noDevice?: boolean;
        /**
         * The [Instance Store Device
         * Name](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames)
         * (e.g. `"ephemeral0"`).
         */
        virtualName?: string;
    }

    export interface SpotInstanceRequestMetadataOptions {
        /**
         * Whether the metadata service is available. Can be `"enabled"` or `"disabled"`. (Default: `"enabled"`).
         */
        httpEndpoint: string;
        /**
         * The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Can be an integer from `1` to `64`. (Default: `1`).
         */
        httpPutResponseHopLimit: number;
        /**
         * Whether or not the metadata service requires session tokens, also referred to as _Instance Metadata Service Version 2_. Can be `"optional"` or `"required"`. (Default: `"optional"`).
         */
        httpTokens: string;
    }

    export interface SpotInstanceRequestNetworkInterface {
        /**
         * Whether or not to delete the network interface on instance termination. Defaults to `false`. Currently, the only valid value is `false`, as this is only supported when creating new network interfaces when launching an instance.
         */
        deleteOnTermination?: boolean;
        /**
         * The integer index of the network interface attachment. Limited by instance type.
         */
        deviceIndex: number;
        /**
         * The ID of the network interface to attach.
         */
        networkInterfaceId: string;
    }

    export interface SpotInstanceRequestRootBlockDevice {
        /**
         * Whether the volume should be destroyed
         * on instance termination (Default: `true`).
         */
        deleteOnTermination?: boolean;
        /**
         * The name of the device to mount.
         */
        deviceName: string;
        /**
         * Enable volume encryption. (Default: `false`). Must be configured to perform drift detection.
         */
        encrypted: boolean;
        /**
         * The amount of provisioned
         * [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
         * This is only valid for `volumeType` of `"io1/io2"`, and must be specified if
         * using that type
         */
        iops: number;
        /**
         * Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
         */
        kmsKeyId: string;
        volumeId: string;
        /**
         * The size of the volume in gibibytes (GiB).
         */
        volumeSize: number;
        /**
         * The type of volume. Can be `"standard"`, `"gp2"`, `"io1"`, `"io2"`, `"sc1"`, or `"st1"`. (Default: `"gp2"`).
         */
        volumeType: string;
    }

    export interface TrafficMirrorFilterRuleDestinationPortRange {
        /**
         * Starting port of the range
         */
        fromPort?: number;
        /**
         * Ending port of the range
         */
        toPort?: number;
    }

    export interface TrafficMirrorFilterRuleSourcePortRange {
        /**
         * Starting port of the range
         */
        fromPort?: number;
        /**
         * Ending port of the range
         */
        toPort?: number;
    }

    export interface VpcEndpointDnsEntry {
        /**
         * The DNS name.
         */
        dnsName: string;
        /**
         * The ID of the private hosted zone.
         */
        hostedZoneId: string;
    }

    export interface VpcPeeringConnectionAccepter {
        /**
         * Allow a local linked EC2-Classic instance to communicate
         * with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
         * to the remote VPC.
         */
        allowClassicLinkToRemoteVpc?: boolean;
        /**
         * Allow a local VPC to resolve public DNS hostnames to
         * private IP addresses when queried from instances in the peer VPC. This is
         * [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
         * inter-region VPC peering.
         */
        allowRemoteVpcDnsResolution?: boolean;
        /**
         * Allow a local VPC to communicate with a linked EC2-Classic
         * instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
         * connection.
         */
        allowVpcToRemoteClassicLink?: boolean;
    }

    export interface VpcPeeringConnectionAccepterAccepter {
        /**
         * Indicates whether a local ClassicLink connection can communicate
         * with the peer VPC over the VPC Peering Connection.
         */
        allowClassicLinkToRemoteVpc?: boolean;
        /**
         * Indicates whether a local VPC can resolve public DNS hostnames to
         * private IP addresses when queried from instances in a peer VPC.
         */
        allowRemoteVpcDnsResolution?: boolean;
        /**
         * Indicates whether a local VPC can communicate with a ClassicLink
         * connection in the peer VPC over the VPC Peering Connection.
         */
        allowVpcToRemoteClassicLink?: boolean;
    }

    export interface VpcPeeringConnectionAccepterRequester {
        /**
         * Indicates whether a local ClassicLink connection can communicate
         * with the peer VPC over the VPC Peering Connection.
         */
        allowClassicLinkToRemoteVpc?: boolean;
        /**
         * Indicates whether a local VPC can resolve public DNS hostnames to
         * private IP addresses when queried from instances in a peer VPC.
         */
        allowRemoteVpcDnsResolution?: boolean;
        /**
         * Indicates whether a local VPC can communicate with a ClassicLink
         * connection in the peer VPC over the VPC Peering Connection.
         */
        allowVpcToRemoteClassicLink?: boolean;
    }

    export interface VpcPeeringConnectionRequester {
        /**
         * Allow a local linked EC2-Classic instance to communicate
         * with instances in a peer VPC. This enables an outbound communication from the local ClassicLink connection
         * to the remote VPC.
         */
        allowClassicLinkToRemoteVpc?: boolean;
        /**
         * Allow a local VPC to resolve public DNS hostnames to
         * private IP addresses when queried from instances in the peer VPC. This is
         * [not supported](https://docs.aws.amazon.com/vpc/latest/peering/modify-peering-connections.html) for
         * inter-region VPC peering.
         */
        allowRemoteVpcDnsResolution?: boolean;
        /**
         * Allow a local VPC to communicate with a linked EC2-Classic
         * instance in a peer VPC. This enables an outbound communication from the local VPC to the remote ClassicLink
         * connection.
         */
        allowVpcToRemoteClassicLink?: boolean;
    }

    export interface VpnConnectionRoute {
        destinationCidrBlock: string;
        source: string;
        state: string;
    }

    export interface VpnConnectionVgwTelemetry {
        acceptedRouteCount: number;
        lastStatusChange: string;
        outsideIpAddress: string;
        status: string;
        statusMessage: string;
    }
}

export namespace ec2clientvpn {
    export interface EndpointAuthenticationOption {
        /**
         * The ID of the Active Directory to be used for authentication if type is `directory-service-authentication`.
         */
        activeDirectoryId?: string;
        /**
         * The ARN of the client certificate. The certificate must be signed by a certificate authority (CA) and it must be provisioned in AWS Certificate Manager (ACM). Only necessary when type is set to `certificate-authentication`.
         */
        rootCertificateChainArn?: string;
        /**
         * The ARN of the IAM SAML identity provider if type is `federated-authentication`.
         */
        samlProviderArn?: string;
        /**
         * The type of client authentication to be used. Specify `certificate-authentication` to use certificate-based authentication, `directory-service-authentication` to use Active Directory authentication, or `federated-authentication` to use Federated Authentication via SAML 2.0.
         */
        type: string;
    }

    export interface EndpointConnectionLogOptions {
        /**
         * The name of the CloudWatch Logs log group.
         */
        cloudwatchLogGroup?: string;
        /**
         * The name of the CloudWatch Logs log stream to which the connection data is published.
         */
        cloudwatchLogStream?: string;
        /**
         * Indicates whether connection logging is enabled.
         */
        enabled: boolean;
    }
}

export namespace ec2transitgateway {
    export interface GetDirectConnectGatewayAttachmentFilter {
        /**
         * The name of the filter field. Valid values can be found in the [EC2 DescribeTransitGatewayAttachments API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
         */
        values: string[];
    }

    export interface GetPeeringAttachmentFilter {
        /**
         * The name of the field to filter by, as defined by
         * [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayPeeringAttachments.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given field.
         * An EC2 Transit Gateway Peering Attachment be selected if any one of the given values matches.
         */
        values: string[];
    }

    export interface GetRouteTableFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetTransitGatewayFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetVpcAttachmentFilter {
        /**
         * Name of the filter.
         */
        name: string;
        /**
         * List of one or more values for the filter.
         */
        values: string[];
    }

    export interface GetVpnAttachmentFilter {
        /**
         * The name of the filter field. Valid values can be found in the [EC2 DescribeTransitGatewayAttachments API Reference](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html).
         */
        name: string;
        /**
         * Set of values that are accepted for the given filter field. Results will be selected if any given value matches.
         */
        values: string[];
    }
}

export namespace ecr {
    export interface GetRepositoryEncryptionConfiguration {
        /**
         * The encryption type to use for the repository, either `AES256` or `KMS`.
         */
        encryptionType: string;
        /**
         * If `encryptionType` is `KMS`, the ARN of the KMS key used.
         */
        kmsKey: string;
    }

    export interface GetRepositoryImageScanningConfiguration {
        /**
         * Indicates whether images are scanned after being pushed to the repository.
         */
        scanOnPush: boolean;
    }

    export interface RepositoryEncryptionConfiguration {
        /**
         * The encryption type to use for the repository. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
         */
        encryptionType?: string;
        /**
         * The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.
         */
        kmsKey: string;
    }

    export interface RepositoryImageScanningConfiguration {
        /**
         * Indicates whether images are scanned after being pushed to the repository (true) or not scanned (false).
         */
        scanOnPush: boolean;
    }
}

export namespace ecs {
    export interface CapacityProviderAutoScalingGroupProvider {
        /**
         * - The Amazon Resource Name (ARN) of the associated auto scaling group.
         */
        autoScalingGroupArn: string;
        /**
         * - Nested argument defining the parameters of the auto scaling. Defined below.
         */
        managedScaling: outputs.ecs.CapacityProviderAutoScalingGroupProviderManagedScaling;
        /**
         * - Enables or disables container-aware termination of instances in the auto scaling group when scale-in happens. Valid values are `ENABLED` and `DISABLED`.
         */
        managedTerminationProtection: string;
    }

    export interface CapacityProviderAutoScalingGroupProviderManagedScaling {
        /**
         * The maximum step adjustment size. A number between 1 and 10,000.
         */
        maximumScalingStepSize: number;
        /**
         * The minimum step adjustment size. A number between 1 and 10,000.
         */
        minimumScalingStepSize: number;
        /**
         * Whether auto scaling is managed by ECS. Valid values are `ENABLED` and `DISABLED`.
         */
        status: string;
        /**
         * The target utilization for the capacity provider. A number between 1 and 100.
         */
        targetCapacity: number;
    }

    export interface ClusterDefaultCapacityProviderStrategy {
        /**
         * The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider: string;
        /**
         * The relative percentage of the total number of launched tasks that should use the specified capacity provider.
         */
        weight?: number;
    }

    export interface ClusterSetting {
        /**
         * Name of the setting to manage. Valid values: `containerInsights`.
         */
        name: string;
        /**
         * The value to assign to the setting. Value values are `enabled` and `disabled`.
         */
        value: string;
    }

    export interface GetClusterSetting {
        name: string;
        value: string;
    }

    export interface ServiceCapacityProviderStrategy {
        /**
         * The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.
         */
        base?: number;
        /**
         * The short name of the capacity provider.
         */
        capacityProvider: string;
        /**
         * The relative percentage of the total number of launched tasks that should use the specified capacity provider.
         */
        weight?: number;
    }

    export interface ServiceDeploymentController {
        /**
         * Type of deployment controller. Valid values: `CODE_DEPLOY`, `ECS`, `EXTERNAL`. Default: `ECS`.
         */
        type?: string;
    }

    export interface ServiceLoadBalancer {
        /**
         * The name of the container to associate with the load balancer (as it appears in a container definition).
         */
        containerName: string;
        /**
         * The port on the container to associate with the load balancer.
         */
        containerPort: number;
        /**
         * The name of the ELB (Classic) to associate with the service.
         */
        elbName?: string;
        /**
         * The ARN of the Load Balancer target group to associate with the service.
         */
        targetGroupArn?: string;
    }

    export interface ServiceNetworkConfiguration {
        /**
         * Assign a public IP address to the ENI (Fargate launch type only). Valid values are `true` or `false`. Default `false`.
         */
        assignPublicIp?: boolean;
        /**
         * The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
         */
        securityGroups?: string[];
        /**
         * The subnets associated with the task or service.
         */
        subnets: string[];
    }

    export interface ServiceOrderedPlacementStrategy {
        /**
         * For the `spread` placement strategy, valid values are `instanceId` (or `host`,
         * which has the same effect), or any platform or custom attribute that is applied to a container instance.
         * For the `binpack` type, valid values are `memory` and `cpu`. For the `random` type, this attribute is not
         * needed. For more information, see [Placement Strategy](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_PlacementStrategy.html).
         */
        field?: string;
        /**
         * The type of placement strategy. Must be one of: `binpack`, `random`, or `spread`
         */
        type: string;
    }

    export interface ServicePlacementConstraint {
        /**
         * Cluster Query Language expression to apply to the constraint. Does not need to be specified
         * for the `distinctInstance` type.
         * For more information, see [Cluster Query Language in the Amazon EC2 Container
         * Service Developer
         * Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
         */
        expression?: string;
        /**
         * The type of constraint. The only valid values at this time are `memberOf` and `distinctInstance`.
         */
        type: string;
    }

    export interface ServiceServiceRegistries {
        /**
         * The container name value, already specified in the task definition, to be used for your service discovery service.
         */
        containerName?: string;
        /**
         * The port value, already specified in the task definition, to be used for your service discovery service.
         */
        containerPort?: number;
        /**
         * The port value used if your Service Discovery service specified an SRV record.
         */
        port?: number;
        /**
         * The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service(`aws.servicediscovery.Service`). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html)
         */
        registryArn: string;
    }

    export interface TaskDefinitionInferenceAccelerator {
        /**
         * The Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
         */
        deviceName: string;
        /**
         * The Elastic Inference accelerator type to use.
         */
        deviceType: string;
    }

    export interface TaskDefinitionPlacementConstraint {
        /**
         * Cluster Query Language expression to apply to the constraint.
         * For more information, see [Cluster Query Language in the Amazon EC2 Container
         * Service Developer
         * Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
         */
        expression?: string;
        /**
         * The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
         */
        type: string;
    }

    export interface TaskDefinitionProxyConfiguration {
        /**
         * The name of the container that will serve as the App Mesh proxy.
         */
        containerName: string;
        /**
         * The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
         */
        properties?: {[key: string]: string};
        /**
         * The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
         */
        type?: string;
    }

    export interface TaskDefinitionVolume {
        /**
         * Used to configure a docker volume
         */
        dockerVolumeConfiguration?: outputs.ecs.TaskDefinitionVolumeDockerVolumeConfiguration;
        /**
         * Used to configure a EFS volume.
         */
        efsVolumeConfiguration?: outputs.ecs.TaskDefinitionVolumeEfsVolumeConfiguration;
        /**
         * The path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
         */
        hostPath?: string;
        /**
         * The name of the volume. This name is referenced in the `sourceVolume`
         * parameter of container definition in the `mountPoints` section.
         */
        name: string;
    }

    export interface TaskDefinitionVolumeDockerVolumeConfiguration {
        /**
         * If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
         */
        autoprovision?: boolean;
        /**
         * The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
         */
        driver?: string;
        /**
         * A map of Docker driver specific options.
         */
        driverOpts?: {[key: string]: string};
        /**
         * A map of custom metadata to add to your Docker volume.
         */
        labels?: {[key: string]: string};
        /**
         * The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
         */
        scope: string;
    }

    export interface TaskDefinitionVolumeEfsVolumeConfiguration {
        /**
         * The authorization configuration details for the Amazon EFS file system.
         */
        authorizationConfig?: outputs.ecs.TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig;
        /**
         * The ID of the EFS File System.
         */
        fileSystemId: string;
        /**
         * The directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorizationConfig`.
         */
        rootDirectory?: string;
        /**
         * Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
         */
        transitEncryption?: string;
        /**
         * The port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
         */
        transitEncryptionPort?: number;
    }

    export interface TaskDefinitionVolumeEfsVolumeConfigurationAuthorizationConfig {
        /**
         * The access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
         */
        accessPointId?: string;
        /**
         * Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
         */
        iam?: string;
    }
}

export namespace efs {
    export interface AccessPointPosixUser {
        /**
         * The POSIX group ID used for all file system operations using this access point.
         */
        gid: number;
        /**
         * Secondary POSIX group IDs used for all file system operations using this access point.
         */
        secondaryGids?: number[];
        /**
         * The POSIX user ID used for all file system operations using this access point.
         */
        uid: number;
    }

    export interface AccessPointRootDirectory {
        /**
         * Specifies the POSIX IDs and permissions to apply to the access point's Root Directory. See Creation Info below.
         */
        creationInfo: outputs.efs.AccessPointRootDirectoryCreationInfo;
        /**
         * Specifies the path on the EFS file system to expose as the root directory to NFS clients using the access point to access the EFS file system. A path can have up to four subdirectories. If the specified path does not exist, you are required to provide `creationInfo`.
         */
        path: string;
    }

    export interface AccessPointRootDirectoryCreationInfo {
        /**
         * Specifies the POSIX group ID to apply to the `rootDirectory`.
         */
        ownerGid: number;
        /**
         * Specifies the POSIX user ID to apply to the `rootDirectory`.
         */
        ownerUid: number;
        /**
         * Specifies the POSIX permissions to apply to the RootDirectory, in the format of an octal number representing the file's mode bits.
         */
        permissions: string;
    }

    export interface FileSystemLifecyclePolicy {
        /**
         * Indicates how long it takes to transition files to the IA storage class. Valid values: `AFTER_7_DAYS`, `AFTER_14_DAYS`, `AFTER_30_DAYS`, `AFTER_60_DAYS`, or `AFTER_90_DAYS`.
         */
        transitionToIa: string;
    }

    export interface GetAccessPointPosixUser {
        /**
         * Group ID
         */
        gid: number;
        /**
         * Secondary group IDs
         */
        secondaryGids: number[];
        /**
         * User Id
         * * `rootDirectory`- Single element list containing information on the directory on the Amazon EFS file system that the access point provides access to.
         */
        uid: number;
    }

    export interface GetAccessPointRootDirectory {
        /**
         * Single element list containing information on the creation permissions of the directory
         */
        creationInfos: outputs.efs.GetAccessPointRootDirectoryCreationInfo[];
        /**
         * Path exposed as the root directory
         */
        path: string;
    }

    export interface GetAccessPointRootDirectoryCreationInfo {
        /**
         * POSIX owner group ID
         */
        ownerGid: number;
        /**
         * POSIX owner user ID
         */
        ownerUid: number;
        /**
         * POSIX permissions mode
         */
        permissions: string;
    }

    export interface GetFileSystemLifecyclePolicy {
        transitionToIa: string;
    }
}

export namespace eks {
    export interface ClusterCertificateAuthority {
        /**
         * The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
         */
        data: string;
    }

    export interface ClusterEncryptionConfig {
        /**
         * Configuration block with provider for encryption. Detailed below.
         */
        provider: outputs.eks.ClusterEncryptionConfigProvider;
        /**
         * List of strings with resources to be encrypted. Valid values: `secrets`
         */
        resources: string[];
    }

    export interface ClusterEncryptionConfigProvider {
        /**
         * Amazon Resource Name (ARN) of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see [Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide](https://docs.aws.amazon.com/kms/latest/developerguide/key-policy-modifying-external-accounts.html).
         */
        keyArn: string;
    }

    export interface ClusterIdentity {
        /**
         * Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
         */
        oidcs: outputs.eks.ClusterIdentityOidc[];
    }

    export interface ClusterIdentityOidc {
        /**
         * Issuer URL for the OpenID Connect identity provider.
         */
        issuer: string;
    }

    export interface ClusterKubernetesNetworkConfig {
        /**
         * The CIDR block to assign Kubernetes service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
         */
        serviceIpv4Cidr: string;
    }

    export interface ClusterVpcConfig {
        /**
         * The cluster security group that was created by Amazon EKS for the cluster.
         */
        clusterSecurityGroupId: string;
        /**
         * Indicates whether or not the Amazon EKS private API server endpoint is enabled. Default is `false`.
         */
        endpointPrivateAccess?: boolean;
        /**
         * Indicates whether or not the Amazon EKS public API server endpoint is enabled. Default is `true`.
         */
        endpointPublicAccess?: boolean;
        /**
         * List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with `0.0.0.0/0`. This provider will only perform drift detection of its value when present in a configuration.
         */
        publicAccessCidrs: string[];
        /**
         * List of security group IDs for the cross-account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
         */
        securityGroupIds?: string[];
        /**
         * List of subnet IDs. Must be in at least two different availability zones. Amazon EKS creates cross-account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
         */
        subnetIds: string[];
        /**
         * The VPC associated with your cluster.
         */
        vpcId: string;
    }

    export interface FargateProfileSelector {
        /**
         * Key-value map of Kubernetes labels for selection.
         */
        labels?: {[key: string]: string};
        /**
         * Kubernetes namespace for selection.
         */
        namespace: string;
    }

    export interface GetClusterCertificateAuthority {
        /**
         * The base64 encoded certificate data required to communicate with your cluster. Add this to the `certificate-authority-data` section of the `kubeconfig` file for your cluster.
         */
        data: string;
    }

    export interface GetClusterIdentity {
        /**
         * Nested attribute containing [OpenID Connect](https://openid.net/connect/) identity provider information for the cluster.
         */
        oidcs: outputs.eks.GetClusterIdentityOidc[];
    }

    export interface GetClusterIdentityOidc {
        /**
         * Issuer URL for the OpenID Connect identity provider.
         */
        issuer: string;
    }

    export interface GetClusterKubernetesNetworkConfig {
        /**
         * The CIDR block to assign Kubernetes service IP addresses from.
         */
        serviceIpv4Cidr: string;
    }

    export interface GetClusterVpcConfig {
        /**
         * The cluster security group that was created by Amazon EKS for the cluster.
         */
        clusterSecurityGroupId: string;
        /**
         * Indicates whether or not the Amazon EKS private API server endpoint is enabled.
         */
        endpointPrivateAccess: boolean;
        /**
         * Indicates whether or not the Amazon EKS public API server endpoint is enabled.
         */
        endpointPublicAccess: boolean;
        /**
         * List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint.
         */
        publicAccessCidrs: string[];
        /**
         * List of security group IDs
         */
        securityGroupIds: string[];
        /**
         * List of subnet IDs
         */
        subnetIds: string[];
        /**
         * The VPC associated with your cluster.
         */
        vpcId: string;
    }

    export interface NodeGroupLaunchTemplate {
        /**
         * Identifier of the EC2 Launch Template. Conflicts with `name`.
         */
        id: string;
        /**
         * Name of the EC2 Launch Template. Conflicts with `id`.
         */
        name: string;
        /**
         * EC2 Launch Template version number. While the API accepts values like `$Default` and `$Latest`, the API will convert the value to the associated version number (e.g. `1`) on read and This provider will show a difference on next plan. Using the `defaultVersion` or `latestVersion` attribute of the `aws.ec2.LaunchTemplate` resource or data source is recommended for this argument.
         */
        version: string;
    }

    export interface NodeGroupRemoteAccess {
        /**
         * EC2 Key Pair name that provides access for SSH communication with the worker nodes in the EKS Node Group. If you specify this configuration, but do not specify `sourceSecurityGroupIds` when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
         */
        ec2SshKey?: string;
        /**
         * Set of EC2 Security Group IDs to allow SSH access (port 22) from on the worker nodes. If you specify `ec2SshKey`, but do not specify this configuration when you create an EKS Node Group, port 22 on the worker nodes is opened to the Internet (0.0.0.0/0).
         */
        sourceSecurityGroupIds?: string[];
    }

    export interface NodeGroupResource {
        /**
         * List of objects containing information about AutoScaling Groups.
         */
        autoscalingGroups: outputs.eks.NodeGroupResourceAutoscalingGroup[];
        /**
         * Identifier of the remote access EC2 Security Group.
         */
        remoteAccessSecurityGroupId: string;
    }

    export interface NodeGroupResourceAutoscalingGroup {
        /**
         * Name of the EC2 Launch Template. Conflicts with `id`.
         */
        name: string;
    }

    export interface NodeGroupScalingConfig {
        /**
         * Desired number of worker nodes.
         */
        desiredSize: number;
        /**
         * Maximum number of worker nodes.
         */
        maxSize: number;
        /**
         * Minimum number of worker nodes.
         */
        minSize: number;
    }
}

export namespace elasticache {
    export interface ClusterCacheNode {
        address: string;
        /**
         * The Availability Zone for the cache cluster. If you want to create cache nodes in multi-az, use `preferredAvailabilityZones` instead. Default: System chosen Availability Zone.
         */
        availabilityZone: string;
        id: string;
        /**
         * The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379. Cannot be provided with `replicationGroupId`.
         */
        port: number;
    }

    export interface GetClusterCacheNode {
        address: string;
        /**
         * The Availability Zone for the cache cluster.
         */
        availabilityZone: string;
        id: string;
        /**
         * The port number on which each of the cache nodes will
         * accept connections.
         */
        port: number;
    }

    export interface ParameterGroupParameter {
        /**
         * The name of the ElastiCache parameter.
         */
        name: string;
        /**
         * The value of the ElastiCache parameter.
         */
        value: string;
    }

    export interface ReplicationGroupClusterMode {
        /**
         * Specify the number of node groups (shards) for this Redis replication group. Changing this number will trigger an online resizing operation before other settings modifications.
         */
        numNodeGroups: number;
        /**
         * Specify the number of replica nodes in each node group. Valid values are 0 to 5. Changing this number will force a new resource.
         */
        replicasPerNodeGroup: number;
    }
}

export namespace elasticbeanstalk {
    export interface ApplicationAppversionLifecycle {
        /**
         * Set to `true` to delete a version's source bundle from S3 when the application version is deleted.
         */
        deleteSourceFromS3?: boolean;
        /**
         * The number of days to retain an application version ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
         */
        maxAgeInDays?: number;
        /**
         * The maximum number of application versions to retain ('max_age_in_days' and 'max_count' cannot be enabled simultaneously.).
         */
        maxCount?: number;
        /**
         * The ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
         */
        serviceRole: string;
    }

    export interface ConfigurationTemplateSetting {
        /**
         * A unique name for this Template.
         */
        name: string;
        namespace: string;
        resource?: string;
        value: string;
    }

    export interface EnvironmentAllSetting {
        /**
         * A unique name for this Environment. This name is used
         * in the application URL
         */
        name: string;
        namespace: string;
        resource?: string;
        value: string;
    }

    export interface EnvironmentSetting {
        /**
         * A unique name for this Environment. This name is used
         * in the application URL
         */
        name: string;
        namespace: string;
        resource?: string;
        value: string;
    }

    export interface GetApplicationAppversionLifecycle {
        /**
         * Specifies whether delete a version's source bundle from S3 when the application version is deleted.
         */
        deleteSourceFromS3: boolean;
        /**
         * The number of days to retain an application version.
         */
        maxAgeInDays: number;
        /**
         * The maximum number of application versions to retain.
         */
        maxCount: number;
        /**
         * The ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
         */
        serviceRole: string;
    }
}

export namespace elasticloadbalancing {
    export interface GetLoadBalancerAccessLogs {
        bucket: string;
        bucketPrefix: string;
        enabled: boolean;
        interval: number;
    }

    export interface GetLoadBalancerHealthCheck {
        healthyThreshold: number;
        interval: number;
        target: string;
        timeout: number;
        unhealthyThreshold: number;
    }

    export interface GetLoadBalancerListener {
        instancePort: number;
        instanceProtocol: string;
        lbPort: number;
        lbProtocol: string;
        sslCertificateId: string;
    }

    export interface LoadBalancerAccessLogs {
        /**
         * The S3 bucket name to store the logs in.
         */
        bucket: string;
        /**
         * The S3 bucket prefix. Logs are stored in the root if not configured.
         */
        bucketPrefix?: string;
        /**
         * Boolean to enable / disable `accessLogs`. Default is `true`
         */
        enabled?: boolean;
        /**
         * The publishing interval in minutes. Default: 60 minutes.
         */
        interval?: number;
    }

    export interface LoadBalancerHealthCheck {
        /**
         * The number of checks before the instance is declared healthy.
         */
        healthyThreshold: number;
        /**
         * The interval between checks.
         */
        interval: number;
        /**
         * The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
         * values are:
         * * `HTTP`, `HTTPS` - PORT and PATH are required
         * * `TCP`, `SSL` - PORT is required, PATH is not supported
         */
        target: string;
        /**
         * The length of time before the check times out.
         */
        timeout: number;
        /**
         * The number of checks before the instance is declared unhealthy.
         */
        unhealthyThreshold: number;
    }

    export interface LoadBalancerListener {
        /**
         * The port on the instance to route to
         */
        instancePort: number;
        /**
         * The protocol to use to the instance. Valid
         * values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
         */
        instanceProtocol: string;
        /**
         * The port to listen on for the load balancer
         */
        lbPort: number;
        /**
         * The protocol to listen on. Valid values are `HTTP`,
         * `HTTPS`, `TCP`, or `SSL`
         */
        lbProtocol: string;
        /**
         * The ARN of an SSL certificate you have
         * uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
         */
        sslCertificateId?: string;
    }

    export interface LoadBalancerPolicyPolicyAttribute {
        name?: string;
        value?: string;
    }

    export interface SslNegotiationPolicyAttribute {
        /**
         * The name of the attribute
         */
        name: string;
        /**
         * The value of the attribute
         */
        value: string;
    }
}

export namespace elasticloadbalancingv2 {
    export interface GetListenerDefaultAction {
        authenticateCognitos: outputs.elasticloadbalancingv2.GetListenerDefaultActionAuthenticateCognito[];
        authenticateOidcs: outputs.elasticloadbalancingv2.GetListenerDefaultActionAuthenticateOidc[];
        fixedResponses: outputs.elasticloadbalancingv2.GetListenerDefaultActionFixedResponse[];
        order: number;
        redirects: outputs.elasticloadbalancingv2.GetListenerDefaultActionRedirect[];
        targetGroupArn: string;
        type: string;
    }

    export interface GetListenerDefaultActionAuthenticateCognito {
        authenticationRequestExtraParams: {[key: string]: string};
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        userPoolArn: string;
        userPoolClientId: string;
        userPoolDomain: string;
    }

    export interface GetListenerDefaultActionAuthenticateOidc {
        authenticationRequestExtraParams: {[key: string]: string};
        authorizationEndpoint: string;
        clientId: string;
        clientSecret: string;
        issuer: string;
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        tokenEndpoint: string;
        userInfoEndpoint: string;
    }

    export interface GetListenerDefaultActionFixedResponse {
        contentType: string;
        messageBody: string;
        statusCode: string;
    }

    export interface GetListenerDefaultActionRedirect {
        host: string;
        path: string;
        /**
         * The port of the listener. Required if `arn` is not set.
         */
        port: string;
        protocol: string;
        query: string;
        statusCode: string;
    }

    export interface GetLoadBalancerAccessLogs {
        bucket: string;
        enabled: boolean;
        prefix: string;
    }

    export interface GetLoadBalancerSubnetMapping {
        allocationId: string;
        outpostId: string;
        privateIpv4Address: string;
        subnetId: string;
    }

    export interface GetTargetGroupHealthCheck {
        enabled: boolean;
        healthyThreshold: number;
        interval: number;
        matcher: string;
        path: string;
        port: string;
        protocol: string;
        timeout: number;
        unhealthyThreshold: number;
    }

    export interface GetTargetGroupStickiness {
        cookieDuration: number;
        enabled: boolean;
        type: string;
    }

    export interface ListenerDefaultAction {
        authenticateCognito?: outputs.elasticloadbalancingv2.ListenerDefaultActionAuthenticateCognito;
        authenticateOidc?: outputs.elasticloadbalancingv2.ListenerDefaultActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.elasticloadbalancingv2.ListenerDefaultActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.elasticloadbalancingv2.ListenerDefaultActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.elasticloadbalancingv2.ListenerDefaultActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerDefaultActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerDefaultActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerDefaultActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerDefaultActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.elasticloadbalancingv2.ListenerDefaultActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.elasticloadbalancingv2.ListenerDefaultActionForwardTargetGroup[];
    }

    export interface ListenerDefaultActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerDefaultActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerDefaultActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleAction {
        /**
         * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
         */
        authenticateCognito?: outputs.elasticloadbalancingv2.ListenerRuleActionAuthenticateCognito;
        /**
         * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
         */
        authenticateOidc?: outputs.elasticloadbalancingv2.ListenerRuleActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.elasticloadbalancingv2.ListenerRuleActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.elasticloadbalancingv2.ListenerRuleActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.elasticloadbalancingv2.ListenerRuleActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerRuleActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerRuleActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerRuleActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerRuleActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.elasticloadbalancingv2.ListenerRuleActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.elasticloadbalancingv2.ListenerRuleActionForwardTargetGroup[];
    }

    export interface ListenerRuleActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerRuleActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerRuleActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleCondition {
        /**
         * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
         */
        hostHeader?: outputs.elasticloadbalancingv2.ListenerRuleConditionHostHeader;
        /**
         * HTTP headers to match. HTTP Header block fields documented below.
         */
        httpHeader?: outputs.elasticloadbalancingv2.ListenerRuleConditionHttpHeader;
        /**
         * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
         */
        httpRequestMethod?: outputs.elasticloadbalancingv2.ListenerRuleConditionHttpRequestMethod;
        /**
         * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
         */
        pathPattern?: outputs.elasticloadbalancingv2.ListenerRuleConditionPathPattern;
        /**
         * Query strings to match. Query String block fields documented below.
         */
        queryStrings?: outputs.elasticloadbalancingv2.ListenerRuleConditionQueryString[];
        /**
         * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
         */
        sourceIp?: outputs.elasticloadbalancingv2.ListenerRuleConditionSourceIp;
    }

    export interface ListenerRuleConditionHostHeader {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpHeader {
        /**
         * Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
         */
        httpHeaderName: string;
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpRequestMethod {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionPathPattern {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionQueryString {
        /**
         * Query string key pattern to match.
         */
        key?: string;
        /**
         * Query string value pattern to match.
         */
        value: string;
    }

    export interface ListenerRuleConditionSourceIp {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface LoadBalancerAccessLogs {
        /**
         * The S3 bucket name to store the logs in.
         */
        bucket: string;
        /**
         * Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
         */
        enabled?: boolean;
        /**
         * The S3 bucket prefix. Logs are stored in the root if not configured.
         */
        prefix?: string;
    }

    export interface LoadBalancerSubnetMapping {
        /**
         * The allocation ID of the Elastic IP address.
         */
        allocationId?: string;
        outpostId: string;
        /**
         * A private ipv4 address within the subnet to assign to the internal-facing load balancer.
         */
        privateIpv4Address?: string;
        /**
         * The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
         */
        subnetId: string;
    }

    export interface TargetGroupHealthCheck {
        /**
         * Boolean to enable / disable `stickiness`. Default is `true`
         */
        enabled?: boolean;
        /**
         * The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
         */
        healthyThreshold?: number;
        /**
         * The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
         */
        interval?: number;
        /**
         * The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
         */
        matcher: string;
        /**
         * The destination for the health check request. Applies to only HTTP/HTTPS.
         */
        path: string;
        /**
         * The port on which targets receive traffic, unless overridden when registering a specific target. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        port?: string;
        /**
         * The protocol to use for routing traffic to the targets. Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        protocol?: string;
        /**
         * The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
         */
        timeout: number;
        /**
         * The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
         */
        unhealthyThreshold?: number;
    }

    export interface TargetGroupStickiness {
        /**
         * Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
         */
        cookieDuration?: number;
        /**
         * Indicates whether  health checks are enabled. Defaults to true.
         */
        enabled?: boolean;
        /**
         * The type of sticky sessions. The only current possible values are `lbCookie` for ALBs and `sourceIp` for NLBs.
         */
        type: string;
    }
}

export namespace elasticsearch {
    export interface DomainAdvancedSecurityOptions {
        /**
         * Specifies whether Amazon Cognito authentication with Kibana is enabled or not
         */
        enabled: boolean;
        /**
         * Whether the internal user database is enabled. If not set, defaults to `false` by the AWS API.
         */
        internalUserDatabaseEnabled?: boolean;
        /**
         * Credentials for the master user: username and password, or ARN
         */
        masterUserOptions?: outputs.elasticsearch.DomainAdvancedSecurityOptionsMasterUserOptions;
    }

    export interface DomainAdvancedSecurityOptionsMasterUserOptions {
        /**
         * ARN for the master user. Only specify if `internalUserDatabaseEnabled` is not set or set to `false`)
         */
        masterUserArn?: string;
        /**
         * The master user's username, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
         */
        masterUserName?: string;
        /**
         * The master user's password, which is stored in the Amazon Elasticsearch Service domain's internal database. Only specify if `internalUserDatabaseEnabled` is set to `true`.
         */
        masterUserPassword?: string;
    }

    export interface DomainClusterConfig {
        /**
         * Number of dedicated master nodes in the cluster
         */
        dedicatedMasterCount?: number;
        /**
         * Indicates whether dedicated master nodes are enabled for the cluster.
         */
        dedicatedMasterEnabled?: boolean;
        /**
         * Instance type of the dedicated master nodes in the cluster.
         */
        dedicatedMasterType?: string;
        /**
         * Number of instances in the cluster.
         */
        instanceCount?: number;
        /**
         * Instance type of data nodes in the cluster.
         */
        instanceType?: string;
        /**
         * The number of warm nodes in the cluster. Valid values are between `2` and `150`. `warmCount` can be only and must be set when `warmEnabled` is set to `true`.
         */
        warmCount?: number;
        /**
         * Indicates whether to enable warm storage.
         */
        warmEnabled?: boolean;
        /**
         * The instance type for the Elasticsearch cluster's warm nodes. Valid values are `ultrawarm1.medium.elasticsearch`, `ultrawarm1.large.elasticsearch` and `ultrawarm1.xlarge.elasticsearch`. `warmType` can be only and must be set when `warmEnabled` is set to `true`.
         */
        warmType?: string;
        /**
         * Configuration block containing zone awareness settings. Documented below.
         */
        zoneAwarenessConfig?: outputs.elasticsearch.DomainClusterConfigZoneAwarenessConfig;
        /**
         * Indicates whether zone awareness is enabled, set to `true` for multi-az deployment. To enable awareness with three Availability Zones, the `availabilityZoneCount` within the `zoneAwarenessConfig` must be set to `3`.
         */
        zoneAwarenessEnabled?: boolean;
    }

    export interface DomainClusterConfigZoneAwarenessConfig {
        /**
         * Number of Availability Zones for the domain to use with `zoneAwarenessEnabled`. Defaults to `2`. Valid values: `2` or `3`.
         */
        availabilityZoneCount?: number;
    }

    export interface DomainCognitoOptions {
        /**
         * Specifies whether Amazon Cognito authentication with Kibana is enabled or not
         */
        enabled?: boolean;
        /**
         * ID of the Cognito Identity Pool to use
         */
        identityPoolId: string;
        /**
         * ARN of the IAM role that has the AmazonESCognitoAccess policy attached
         */
        roleArn: string;
        /**
         * ID of the Cognito User Pool to use
         */
        userPoolId: string;
    }

    export interface DomainDomainEndpointOptions {
        /**
         * Whether or not to require HTTPS
         */
        enforceHttps: boolean;
        /**
         * The name of the TLS security policy that needs to be applied to the HTTPS endpoint. Valid values:  `Policy-Min-TLS-1-0-2019-07` and `Policy-Min-TLS-1-2-2019-07`. This provider will only perform drift detection if a configuration value is provided.
         */
        tlsSecurityPolicy: string;
    }

    export interface DomainEbsOptions {
        /**
         * Whether EBS volumes are attached to data nodes in the domain.
         */
        ebsEnabled: boolean;
        /**
         * The baseline input/output (I/O) performance of EBS volumes attached to data nodes. Applicable only for the Provisioned IOPS EBS volume type.
         */
        iops?: number;
        /**
         * The size of EBS volumes attached to data nodes (in GiB).
         * **Required** if `ebsEnabled` is set to `true`.
         */
        volumeSize?: number;
        /**
         * The type of EBS volumes attached to data nodes.
         */
        volumeType: string;
    }

    export interface DomainEncryptAtRest {
        /**
         * Specifies whether Amazon Cognito authentication with Kibana is enabled or not
         */
        enabled: boolean;
        /**
         * The KMS key id to encrypt the Elasticsearch domain with. If not specified then it defaults to using the `aws/es` service KMS key.
         */
        kmsKeyId: string;
    }

    export interface DomainLogPublishingOption {
        /**
         * ARN of the Cloudwatch log group to which log needs to be published.
         */
        cloudwatchLogGroupArn: string;
        /**
         * Specifies whether Amazon Cognito authentication with Kibana is enabled or not
         */
        enabled?: boolean;
        /**
         * A type of Elasticsearch log. Valid values: INDEX_SLOW_LOGS, SEARCH_SLOW_LOGS, ES_APPLICATION_LOGS, AUDIT_LOGS
         */
        logType: string;
    }

    export interface DomainNodeToNodeEncryption {
        /**
         * Specifies whether Amazon Cognito authentication with Kibana is enabled or not
         */
        enabled: boolean;
    }

    export interface DomainSnapshotOptions {
        /**
         * Hour during which the service takes an automated daily snapshot of the indices in the domain.
         */
        automatedSnapshotStartHour: number;
    }

    export interface DomainVpcOptions {
        availabilityZones: string[];
        /**
         * List of VPC Security Group IDs to be applied to the Elasticsearch domain endpoints. If omitted, the default Security Group for the VPC will be used.
         */
        securityGroupIds?: string[];
        /**
         * List of VPC Subnet IDs for the Elasticsearch domain endpoints to be created in.
         */
        subnetIds?: string[];
        vpcId: string;
    }

    export interface GetDomainAdvancedSecurityOption {
        /**
         * Whether node to node encryption is enabled.
         */
        enabled: boolean;
        /**
         * Whether the internal user database is enabled.
         */
        internalUserDatabaseEnabled: boolean;
    }

    export interface GetDomainClusterConfig {
        /**
         * Number of dedicated master nodes in the cluster.
         */
        dedicatedMasterCount: number;
        /**
         * Indicates whether dedicated master nodes are enabled for the cluster.
         */
        dedicatedMasterEnabled: boolean;
        /**
         * Instance type of the dedicated master nodes in the cluster.
         */
        dedicatedMasterType: string;
        /**
         * Number of instances in the cluster.
         */
        instanceCount: number;
        /**
         * Instance type of data nodes in the cluster.
         */
        instanceType: string;
        /**
         * The number of warm nodes in the cluster.
         */
        warmCount: number;
        /**
         * Indicates warm storage is enabled.
         */
        warmEnabled?: boolean;
        /**
         * The instance type for the Elasticsearch cluster's warm nodes.
         */
        warmType: string;
        /**
         * Configuration block containing zone awareness settings.
         */
        zoneAwarenessConfigs: outputs.elasticsearch.GetDomainClusterConfigZoneAwarenessConfig[];
        /**
         * Indicates whether zone awareness is enabled.
         */
        zoneAwarenessEnabled: boolean;
    }

    export interface GetDomainClusterConfigZoneAwarenessConfig {
        /**
         * Number of availability zones used.
         */
        availabilityZoneCount: number;
    }

    export interface GetDomainCognitoOption {
        /**
         * Whether node to node encryption is enabled.
         */
        enabled: boolean;
        /**
         * The Cognito Identity pool used by the domain.
         */
        identityPoolId: string;
        /**
         * The IAM Role with the AmazonESCognitoAccess policy attached.
         */
        roleArn: string;
        /**
         * The Cognito User pool used by the domain.
         */
        userPoolId: string;
    }

    export interface GetDomainEbsOption {
        /**
         * Whether EBS volumes are attached to data nodes in the domain.
         */
        ebsEnabled: boolean;
        /**
         * The baseline input/output (I/O) performance of EBS volumes attached to data nodes.
         */
        iops: number;
        /**
         * The size of EBS volumes attached to data nodes (in GB).
         */
        volumeSize: number;
        /**
         * The type of EBS volumes attached to data nodes.
         */
        volumeType: string;
    }

    export interface GetDomainEncryptionAtRest {
        /**
         * Whether node to node encryption is enabled.
         */
        enabled: boolean;
        /**
         * The KMS key id used to encrypt data at rest.
         */
        kmsKeyId: string;
    }

    export interface GetDomainLogPublishingOption {
        /**
         * The CloudWatch Log Group where the logs are published.
         */
        cloudwatchLogGroupArn: string;
        /**
         * Whether node to node encryption is enabled.
         */
        enabled: boolean;
        /**
         * The type of Elasticsearch log being published.
         */
        logType: string;
    }

    export interface GetDomainNodeToNodeEncryption {
        /**
         * Whether node to node encryption is enabled.
         */
        enabled: boolean;
    }

    export interface GetDomainSnapshotOption {
        /**
         * Hour during which the service takes an automated daily snapshot of the indices in the domain.
         */
        automatedSnapshotStartHour: number;
    }

    export interface GetDomainVpcOption {
        /**
         * The availability zones used by the domain.
         */
        availabilityZones: string[];
        /**
         * The security groups used by the domain.
         */
        securityGroupIds: string[];
        /**
         * The subnets used by the domain.
         */
        subnetIds: string[];
        /**
         * The VPC used by the domain.
         */
        vpcId: string;
    }
}

export namespace elastictranscoder {
    export interface PipelineContentConfig {
        /**
         * The Amazon S3 bucket in which you want Elastic Transcoder to save transcoded files and playlists.
         */
        bucket: string;
        /**
         * The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the files and playlists that it stores in your Amazon S3 bucket.
         */
        storageClass?: string;
    }

    export interface PipelineContentConfigPermission {
        /**
         * The permission that you want to give to the AWS user that you specified in `content_config_permissions.grantee`
         */
        accesses?: string[];
        /**
         * The AWS user or group that you want to have access to transcoded files and playlists.
         */
        grantee?: string;
        /**
         * Specify the type of value that appears in the `content_config_permissions.grantee` object. Valid values are `Canonical`, `Email` or `Group`.
         */
        granteeType?: string;
    }

    export interface PipelineNotifications {
        /**
         * The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder has finished processing a job in this pipeline.
         */
        completed?: string;
        /**
         * The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters an error condition while processing a job in this pipeline.
         */
        error?: string;
        /**
         * The topic ARN for the Amazon Simple Notification Service (Amazon SNS) topic that you want to notify when Elastic Transcoder has started to process a job in this pipeline.
         */
        progressing?: string;
        /**
         * The topic ARN for the Amazon SNS topic that you want to notify when Elastic Transcoder encounters a warning condition while processing a job in this pipeline.
         */
        warning?: string;
    }

    export interface PipelineThumbnailConfig {
        /**
         * The Amazon S3 bucket in which you want Elastic Transcoder to save thumbnail files.
         */
        bucket: string;
        /**
         * The Amazon S3 storage class, Standard or ReducedRedundancy, that you want Elastic Transcoder to assign to the thumbnails that it stores in your Amazon S3 bucket.
         */
        storageClass?: string;
    }

    export interface PipelineThumbnailConfigPermission {
        /**
         * The permission that you want to give to the AWS user that you specified in `thumbnail_config_permissions.grantee`.
         */
        accesses?: string[];
        /**
         * The AWS user or group that you want to have access to thumbnail files.
         */
        grantee?: string;
        /**
         * Specify the type of value that appears in the `thumbnail_config_permissions.grantee` object.
         */
        granteeType?: string;
    }

    export interface PresetAudio {
        /**
         * The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
         */
        audioPackingMode?: string;
        /**
         * The bit rate of the audio stream in the output file, in kilobits/second. Enter an integer between 64 and 320, inclusive.
         */
        bitRate?: string;
        /**
         * The number of audio channels in the output file
         */
        channels?: string;
        /**
         * The audio codec for the output file. Valid values are `AAC`, `flac`, `mp2`, `mp3`, `pcm`, and `vorbis`.
         */
        codec?: string;
        /**
         * The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
         */
        sampleRate?: string;
    }

    export interface PresetAudioCodecOptions {
        /**
         * The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
         */
        bitDepth?: string;
        /**
         * The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
         */
        bitOrder?: string;
        /**
         * If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
         */
        profile?: string;
        /**
         * Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
         */
        signed?: string;
    }

    export interface PresetThumbnails {
        /**
         * The aspect ratio of thumbnails. The following values are valid: auto, 1:1, 4:3, 3:2, 16:9
         */
        aspectRatio?: string;
        /**
         * The format of thumbnails, if any. Valid formats are jpg and png.
         */
        format?: string;
        /**
         * The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
         */
        interval?: string;
        /**
         * The maximum height of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 3072, inclusive.
         */
        maxHeight?: string;
        /**
         * The maximum width of thumbnails, in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 32 and 4096, inclusive.
         */
        maxWidth?: string;
        /**
         * When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of thumbnails to make the total size of the thumbnails match the values that you specified for thumbnail MaxWidth and MaxHeight settings.
         */
        paddingPolicy?: string;
        /**
         * The width and height of thumbnail files in pixels, in the format WidthxHeight, where both values are even integers. The values cannot exceed the width and height that you specified in the Video:Resolution object. (To better control resolution and aspect ratio of thumbnails, we recommend that you use the thumbnail values `maxWidth`, `maxHeight`, `sizingPolicy`, and `paddingPolicy` instead of `resolution` and `aspectRatio`. The two groups of settings are mutually exclusive. Do not use them together)
         */
        resolution?: string;
        /**
         * A value that controls scaling of thumbnails. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, and `ShrinkToFill`.
         */
        sizingPolicy?: string;
    }

    export interface PresetVideo {
        /**
         * The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `maxWidth`, `maxHeight`, `sizingPolicy`, `paddingPolicy`, and `displayAspectRatio` instead of `resolution` and `aspectRatio`.)
         */
        aspectRatio?: string;
        /**
         * The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
         */
        bitRate?: string;
        /**
         * The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
         */
        codec?: string;
        /**
         * The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
         */
        displayAspectRatio?: string;
        /**
         * Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
         */
        fixedGop?: string;
        /**
         * The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
         */
        frameRate?: string;
        /**
         * The maximum number of frames between key frames. Not applicable for containers of type gif.
         */
        keyframesMaxDist?: string;
        /**
         * If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
         */
        maxFrameRate: string;
        /**
         * The maximum height of the output video in pixels. If you specify auto, Elastic Transcoder uses 1080 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 96 and 3072, inclusive.
         */
        maxHeight?: string;
        /**
         * The maximum width of the output video in pixels. If you specify auto, Elastic Transcoder uses 1920 (Full HD) as the default value. If you specify a numeric value, enter an even integer between 128 and 4096, inclusive.
         */
        maxWidth?: string;
        /**
         * When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `maxWidth` and `maxHeight`.
         */
        paddingPolicy?: string;
        /**
         * The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspectRatio`)
         */
        resolution?: string;
        /**
         * A value that controls scaling of the output video. Valid values are: `Fit`, `Fill`, `Stretch`, `Keep`, `ShrinkToFit`, `ShrinkToFill`.
         */
        sizingPolicy?: string;
    }

    export interface PresetVideoWatermark {
        /**
         * The horizontal position of the watermark unless you specify a nonzero value for `horzontalOffset`.
         */
        horizontalAlign?: string;
        /**
         * The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontalAlign`.
         */
        horizontalOffset?: string;
        /**
         * A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
         */
        id?: string;
        /**
         * The maximum height of the watermark.
         */
        maxHeight?: string;
        /**
         * The maximum width of the watermark.
         */
        maxWidth?: string;
        /**
         * A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
         */
        opacity?: string;
        /**
         * A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
         */
        sizingPolicy?: string;
        /**
         * A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
         */
        target?: string;
        /**
         * The vertical position of the watermark unless you specify a nonzero value for `verticalAlign`. Valid values are `Top`, `Bottom`, `Center`.
         */
        verticalAlign?: string;
        /**
         * The amount by which you want the vertical position of the watermark to be offset from the position specified by `verticalAlign`
         */
        verticalOffset?: string;
    }
}

export namespace elb {
    export interface GetLoadBalancerAccessLogs {
        bucket: string;
        bucketPrefix: string;
        enabled: boolean;
        interval: number;
    }

    export interface GetLoadBalancerHealthCheck {
        healthyThreshold: number;
        interval: number;
        target: string;
        timeout: number;
        unhealthyThreshold: number;
    }

    export interface GetLoadBalancerListener {
        instancePort: number;
        instanceProtocol: string;
        lbPort: number;
        lbProtocol: string;
        sslCertificateId: string;
    }

    export interface LoadBalancerAccessLogs {
        /**
         * The S3 bucket name to store the logs in.
         */
        bucket: string;
        /**
         * The S3 bucket prefix. Logs are stored in the root if not configured.
         */
        bucketPrefix?: string;
        /**
         * Boolean to enable / disable `accessLogs`. Default is `true`
         */
        enabled?: boolean;
        /**
         * The publishing interval in minutes. Default: 60 minutes.
         */
        interval?: number;
    }

    export interface LoadBalancerHealthCheck {
        /**
         * The number of checks before the instance is declared healthy.
         */
        healthyThreshold: number;
        /**
         * The interval between checks.
         */
        interval: number;
        /**
         * The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
         * values are:
         * * `HTTP`, `HTTPS` - PORT and PATH are required
         * * `TCP`, `SSL` - PORT is required, PATH is not supported
         */
        target: string;
        /**
         * The length of time before the check times out.
         */
        timeout: number;
        /**
         * The number of checks before the instance is declared unhealthy.
         */
        unhealthyThreshold: number;
    }

    export interface LoadBalancerListener {
        /**
         * The port on the instance to route to
         */
        instancePort: number;
        /**
         * The protocol to use to the instance. Valid
         * values are `HTTP`, `HTTPS`, `TCP`, or `SSL`
         */
        instanceProtocol: string;
        /**
         * The port to listen on for the load balancer
         */
        lbPort: number;
        /**
         * The protocol to listen on. Valid values are `HTTP`,
         * `HTTPS`, `TCP`, or `SSL`
         */
        lbProtocol: string;
        /**
         * The ARN of an SSL certificate you have
         * uploaded to AWS IAM. **Note ECDSA-specific restrictions below.  Only valid when `lbProtocol` is either HTTPS or SSL**
         */
        sslCertificateId?: string;
    }

    export interface LoadBalancerPolicyPolicyAttribute {
        name?: string;
        value?: string;
    }

    export interface SslNegotiationPolicyAttribute {
        /**
         * The name of the attribute
         */
        name: string;
        /**
         * The value of the attribute
         */
        value: string;
    }
}

export namespace emr {
    export interface ClusterBootstrapAction {
        /**
         * List of command line arguments passed to the JAR file's main function when executed.
         */
        args?: string[];
        /**
         * Friendly name given to the instance fleet.
         */
        name: string;
        /**
         * Location of the script to run during a bootstrap action. Can be either a location in Amazon S3 or on a local file system
         */
        path: string;
    }

    export interface ClusterCoreInstanceFleet {
        /**
         * The ID of the EMR Cluster
         */
        id: string;
        /**
         * Configuration block for instance fleet
         */
        instanceTypeConfigs?: outputs.emr.ClusterCoreInstanceFleetInstanceTypeConfig[];
        /**
         * Configuration block for launch specification
         */
        launchSpecifications?: outputs.emr.ClusterCoreInstanceFleetLaunchSpecifications;
        /**
         * Friendly name given to the instance fleet.
         */
        name?: string;
        provisionedOnDemandCapacity: number;
        provisionedSpotCapacity: number;
        /**
         * The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
         */
        targetOnDemandCapacity?: number;
        /**
         * The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
         */
        targetSpotCapacity?: number;
    }

    export interface ClusterCoreInstanceFleetInstanceTypeConfig {
        /**
         * The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPrice?: string;
        /**
         * The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPriceAsPercentageOfOnDemandPrice?: number;
        /**
         * A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
         */
        configurations?: outputs.emr.ClusterCoreInstanceFleetInstanceTypeConfigConfiguration[];
        /**
         * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
         */
        ebsConfigs: outputs.emr.ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig[];
        /**
         * An EC2 instance type, such as m4.xlarge.
         */
        instanceType: string;
        /**
         * The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `aws.emr.InstanceFleet`.
         */
        weightedCapacity?: number;
    }

    export interface ClusterCoreInstanceFleetInstanceTypeConfigConfiguration {
        /**
         * The classification within a configuration.
         */
        classification?: string;
        /**
         * A map of properties specified within a configuration classification
         */
        properties?: {[key: string]: any};
    }

    export interface ClusterCoreInstanceFleetInstanceTypeConfigEbsConfig {
        /**
         * The number of I/O operations per second (IOPS) that the volume supports
         */
        iops?: number;
        /**
         * The volume size, in gibibytes (GiB).
         */
        size: number;
        /**
         * The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
         */
        type: string;
        /**
         * The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
         */
        volumesPerInstance?: number;
    }

    export interface ClusterCoreInstanceFleetLaunchSpecifications {
        /**
         * Configuration block for on demand instances launch specifications
         */
        onDemandSpecifications?: outputs.emr.ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification[];
        /**
         * Configuration block for spot instances launch specifications
         */
        spotSpecifications?: outputs.emr.ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification[];
    }

    export interface ClusterCoreInstanceFleetLaunchSpecificationsOnDemandSpecification {
        /**
         * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
         */
        allocationStrategy: string;
    }

    export interface ClusterCoreInstanceFleetLaunchSpecificationsSpotSpecification {
        /**
         * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
         */
        allocationStrategy: string;
        /**
         * The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
         */
        blockDurationMinutes?: number;
        /**
         * The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
         */
        timeoutAction: string;
        /**
         * The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
         */
        timeoutDurationMinutes: number;
    }

    export interface ClusterCoreInstanceGroup {
        /**
         * String containing the [EMR Auto Scaling Policy](https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-automatic-scaling.html) JSON.
         */
        autoscalingPolicy?: string;
        /**
         * The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPrice?: string;
        /**
         * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
         */
        ebsConfigs: outputs.emr.ClusterCoreInstanceGroupEbsConfig[];
        /**
         * The ID of the EMR Cluster
         */
        id: string;
        /**
         * Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
         */
        instanceCount?: number;
        /**
         * An EC2 instance type, such as m4.xlarge.
         */
        instanceType: string;
        /**
         * Friendly name given to the instance fleet.
         */
        name?: string;
    }

    export interface ClusterCoreInstanceGroupEbsConfig {
        /**
         * The number of I/O operations per second (IOPS) that the volume supports
         */
        iops?: number;
        /**
         * The volume size, in gibibytes (GiB).
         */
        size: number;
        /**
         * The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
         */
        type: string;
        /**
         * The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
         */
        volumesPerInstance?: number;
    }

    export interface ClusterEc2Attributes {
        /**
         * String containing a comma separated list of additional Amazon EC2 security group IDs for the master node
         */
        additionalMasterSecurityGroups?: string;
        /**
         * String containing a comma separated list of additional Amazon EC2 security group IDs for the slave nodes as a comma separated string
         */
        additionalSlaveSecurityGroups?: string;
        /**
         * Identifier of the Amazon EC2 EMR-Managed security group for the master node
         */
        emrManagedMasterSecurityGroup: string;
        /**
         * Identifier of the Amazon EC2 EMR-Managed security group for the slave nodes
         */
        emrManagedSlaveSecurityGroup: string;
        /**
         * Instance Profile for EC2 instances of the cluster assume this role
         */
        instanceProfile: string;
        /**
         * Amazon EC2 key pair that can be used to ssh to the master node as the user called `hadoop`
         */
        keyName?: string;
        /**
         * Identifier of the Amazon EC2 service-access security group - required when the cluster runs on a private subnet
         */
        serviceAccessSecurityGroup: string;
        /**
         * VPC subnet id where you want the job flow to launch. Cannot specify the `cc1.4xlarge` instance type for nodes of a job flow launched in a Amazon VPC
         */
        subnetId?: string;
    }

    export interface ClusterKerberosAttributes {
        /**
         * The Active Directory password for `adDomainJoinUser`. This provider cannot perform drift detection of this configuration.
         */
        adDomainJoinPassword?: string;
        /**
         * Required only when establishing a cross-realm trust with an Active Directory domain. A user with sufficient privileges to join resources to the domain. This provider cannot perform drift detection of this configuration.
         */
        adDomainJoinUser?: string;
        /**
         * Required only when establishing a cross-realm trust with a KDC in a different realm. The cross-realm principal password, which must be identical across realms. This provider cannot perform drift detection of this configuration.
         */
        crossRealmTrustPrincipalPassword?: string;
        /**
         * The password used within the cluster for the kadmin service on the cluster-dedicated KDC, which maintains Kerberos principals, password policies, and keytabs for the cluster. This provider cannot perform drift detection of this configuration.
         */
        kdcAdminPassword: string;
        /**
         * The name of the Kerberos realm to which all nodes in a cluster belong. For example, `EC2.INTERNAL`
         */
        realm: string;
    }

    export interface ClusterMasterInstanceFleet {
        /**
         * The ID of the EMR Cluster
         */
        id: string;
        /**
         * Configuration block for instance fleet
         */
        instanceTypeConfigs?: outputs.emr.ClusterMasterInstanceFleetInstanceTypeConfig[];
        /**
         * Configuration block for launch specification
         */
        launchSpecifications?: outputs.emr.ClusterMasterInstanceFleetLaunchSpecifications;
        /**
         * Friendly name given to the instance fleet.
         */
        name?: string;
        provisionedOnDemandCapacity: number;
        provisionedSpotCapacity: number;
        /**
         * The target capacity of On-Demand units for the instance fleet, which determines how many On-Demand instances to provision.
         */
        targetOnDemandCapacity?: number;
        /**
         * The target capacity of Spot units for the instance fleet, which determines how many Spot instances to provision.
         */
        targetSpotCapacity?: number;
    }

    export interface ClusterMasterInstanceFleetInstanceTypeConfig {
        /**
         * The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPrice?: string;
        /**
         * The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPriceAsPercentageOfOnDemandPrice?: number;
        /**
         * A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
         */
        configurations?: outputs.emr.ClusterMasterInstanceFleetInstanceTypeConfigConfiguration[];
        /**
         * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
         */
        ebsConfigs: outputs.emr.ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig[];
        /**
         * An EC2 instance type, such as m4.xlarge.
         */
        instanceType: string;
        /**
         * The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `aws.emr.InstanceFleet`.
         */
        weightedCapacity?: number;
    }

    export interface ClusterMasterInstanceFleetInstanceTypeConfigConfiguration {
        /**
         * The classification within a configuration.
         */
        classification?: string;
        /**
         * A map of properties specified within a configuration classification
         */
        properties?: {[key: string]: any};
    }

    export interface ClusterMasterInstanceFleetInstanceTypeConfigEbsConfig {
        /**
         * The number of I/O operations per second (IOPS) that the volume supports
         */
        iops?: number;
        /**
         * The volume size, in gibibytes (GiB).
         */
        size: number;
        /**
         * The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
         */
        type: string;
        /**
         * The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
         */
        volumesPerInstance?: number;
    }

    export interface ClusterMasterInstanceFleetLaunchSpecifications {
        /**
         * Configuration block for on demand instances launch specifications
         */
        onDemandSpecifications?: outputs.emr.ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification[];
        /**
         * Configuration block for spot instances launch specifications
         */
        spotSpecifications?: outputs.emr.ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification[];
    }

    export interface ClusterMasterInstanceFleetLaunchSpecificationsOnDemandSpecification {
        /**
         * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
         */
        allocationStrategy: string;
    }

    export interface ClusterMasterInstanceFleetLaunchSpecificationsSpotSpecification {
        /**
         * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
         */
        allocationStrategy: string;
        /**
         * The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
         */
        blockDurationMinutes?: number;
        /**
         * The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
         */
        timeoutAction: string;
        /**
         * The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
         */
        timeoutDurationMinutes: number;
    }

    export interface ClusterMasterInstanceGroup {
        /**
         * The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPrice?: string;
        /**
         * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
         */
        ebsConfigs: outputs.emr.ClusterMasterInstanceGroupEbsConfig[];
        /**
         * The ID of the EMR Cluster
         */
        id: string;
        /**
         * Target number of instances for the instance group. Must be 1 or 3. Defaults to 1. Launching with multiple master nodes is only supported in EMR version 5.23.0+, and requires this resource's `coreInstanceGroup` to be configured. Public (Internet accessible) instances must be created in VPC subnets that have `map public IP on launch` enabled. Termination protection is automatically enabled when launched with multiple master nodes and this provider must have the `terminationProtection = false` configuration applied before destroying this resource.
         */
        instanceCount?: number;
        /**
         * An EC2 instance type, such as m4.xlarge.
         */
        instanceType: string;
        /**
         * Friendly name given to the instance fleet.
         */
        name?: string;
    }

    export interface ClusterMasterInstanceGroupEbsConfig {
        /**
         * The number of I/O operations per second (IOPS) that the volume supports
         */
        iops?: number;
        /**
         * The volume size, in gibibytes (GiB).
         */
        size: number;
        /**
         * The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
         */
        type: string;
        /**
         * The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
         */
        volumesPerInstance?: number;
    }

    export interface ClusterStep {
        /**
         * The action to take if the step fails. Valid values: `TERMINATE_JOB_FLOW`, `TERMINATE_CLUSTER`, `CANCEL_AND_WAIT`, and `CONTINUE`
         */
        actionOnFailure: string;
        /**
         * The JAR file used for the step. Defined below.
         */
        hadoopJarStep: outputs.emr.ClusterStepHadoopJarStep;
        /**
         * Friendly name given to the instance fleet.
         */
        name: string;
    }

    export interface ClusterStepHadoopJarStep {
        /**
         * List of command line arguments passed to the JAR file's main function when executed.
         */
        args?: string[];
        /**
         * Path to a JAR file run during the step.
         */
        jar: string;
        /**
         * Name of the main class in the specified Java file. If not specified, the JAR file should specify a Main-Class in its manifest file.
         */
        mainClass?: string;
        /**
         * A map of properties specified within a configuration classification
         */
        properties?: {[key: string]: string};
    }

    export interface InstanceFleetInstanceTypeConfig {
        /**
         * The bid price for each EC2 Spot instance type as defined by `instanceType`. Expressed in USD. If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPrice?: string;
        /**
         * The bid price, as a percentage of On-Demand price, for each EC2 Spot instance as defined by `instanceType`. Expressed as a number (for example, 20 specifies 20%). If neither `bidPrice` nor `bidPriceAsPercentageOfOnDemandPrice` is provided, `bidPriceAsPercentageOfOnDemandPrice` defaults to 100%.
         */
        bidPriceAsPercentageOfOnDemandPrice?: number;
        /**
         * A configuration classification that applies when provisioning cluster instances, which can include configurations for applications and software that run on the cluster. List of `configuration` blocks.
         */
        configurations?: outputs.emr.InstanceFleetInstanceTypeConfigConfiguration[];
        /**
         * Configuration block(s) for EBS volumes attached to each instance in the instance group. Detailed below.
         */
        ebsConfigs: outputs.emr.InstanceFleetInstanceTypeConfigEbsConfig[];
        /**
         * An EC2 instance type, such as m4.xlarge.
         */
        instanceType: string;
        /**
         * The number of units that a provisioned instance of this type provides toward fulfilling the target capacities defined in `aws.emr.InstanceFleet`.
         */
        weightedCapacity?: number;
    }

    export interface InstanceFleetInstanceTypeConfigConfiguration {
        /**
         * The classification within a configuration.
         */
        classification?: string;
        /**
         * A map of properties specified within a configuration classification
         */
        properties?: {[key: string]: any};
    }

    export interface InstanceFleetInstanceTypeConfigEbsConfig {
        /**
         * The number of I/O operations per second (IOPS) that the volume supports
         */
        iops?: number;
        /**
         * The volume size, in gibibytes (GiB).
         */
        size: number;
        /**
         * The volume type. Valid options are `gp2`, `io1`, `standard` and `st1`. See [EBS Volume Types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html).
         */
        type: string;
        /**
         * The number of EBS volumes with this configuration to attach to each EC2 instance in the instance group (default is 1)
         */
        volumesPerInstance?: number;
    }

    export interface InstanceFleetLaunchSpecifications {
        /**
         * Configuration block for on demand instances launch specifications
         */
        onDemandSpecifications?: outputs.emr.InstanceFleetLaunchSpecificationsOnDemandSpecification[];
        /**
         * Configuration block for spot instances launch specifications
         */
        spotSpecifications?: outputs.emr.InstanceFleetLaunchSpecificationsSpotSpecification[];
    }

    export interface InstanceFleetLaunchSpecificationsOnDemandSpecification {
        /**
         * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
         */
        allocationStrategy: string;
    }

    export interface InstanceFleetLaunchSpecificationsSpotSpecification {
        /**
         * Specifies the strategy to use in launching Spot instance fleets. Currently, the only option is `capacity-optimized` (the default), which launches instances from Spot instance pools with optimal capacity for the number of instances that are launching.
         */
        allocationStrategy: string;
        /**
         * The defined duration for Spot instances (also known as Spot blocks) in minutes. When specified, the Spot instance does not terminate before the defined duration expires, and defined duration pricing for Spot instances applies. Valid values are 60, 120, 180, 240, 300, or 360. The duration period starts as soon as a Spot instance receives its instance ID. At the end of the duration, Amazon EC2 marks the Spot instance for termination and provides a Spot instance termination notice, which gives the instance a two-minute warning before it terminates.
         */
        blockDurationMinutes?: number;
        /**
         * The action to take when TargetSpotCapacity has not been fulfilled when the TimeoutDurationMinutes has expired; that is, when all Spot instances could not be provisioned within the Spot provisioning timeout. Valid values are `TERMINATE_CLUSTER` and `SWITCH_TO_ON_DEMAND`. SWITCH_TO_ON_DEMAND specifies that if no Spot instances are available, On-Demand Instances should be provisioned to fulfill any remaining Spot capacity.
         */
        timeoutAction: string;
        /**
         * The spot provisioning timeout period in minutes. If Spot instances are not provisioned within this time period, the TimeOutAction is taken. Minimum value is 5 and maximum value is 1440. The timeout applies only during initial provisioning, when the cluster is first created.
         */
        timeoutDurationMinutes: number;
    }

    export interface InstanceGroupEbsConfig {
        /**
         * The number of I/O operations per second (IOPS) that the volume supports.
         */
        iops?: number;
        /**
         * The volume size, in gibibytes (GiB). This can be a number from 1 - 1024. If the volume type is EBS-optimized, the minimum value is 10.
         */
        size: number;
        /**
         * The volume type. Valid options are 'gp2', 'io1' and 'standard'.
         */
        type: string;
        /**
         * The number of EBS Volumes to attach per instance.
         */
        volumesPerInstance?: number;
    }

    export interface ManagedScalingPolicyComputeLimit {
        /**
         * The upper boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
         */
        maximumCapacityUnits: number;
        /**
         * The upper boundary of EC2 units for core node type in a cluster. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The core units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between core and task nodes.
         */
        maximumCoreCapacityUnits?: number;
        /**
         * The upper boundary of On-Demand EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. The On-Demand units are not allowed to scale beyond this boundary. The parameter is used to split capacity allocation between On-Demand and Spot instances.
         */
        maximumOndemandCapacityUnits?: number;
        /**
         * The lower boundary of EC2 units. It is measured through VCPU cores or instances for instance groups and measured through units for instance fleets. Managed scaling activities are not allowed beyond this boundary. The limit only applies to the core and task nodes. The master node cannot be scaled after initial configuration.
         */
        minimumCapacityUnits: number;
        /**
         * The unit type used for specifying a managed scaling policy. Valid Values: `InstanceFleetUnits` | `Instances` | `VCPU`
         */
        unitType: string;
    }
}

export namespace fsx {
    export interface WindowsFileSystemSelfManagedActiveDirectory {
        /**
         * A list of up to two IP addresses of DNS servers or domain controllers in the self-managed AD directory. The IP addresses need to be either in the same VPC CIDR range as the file system or in the private IP version 4 (IPv4) address ranges as specified in [RFC 1918](https://tools.ietf.org/html/rfc1918).
         */
        dnsIps: string[];
        /**
         * The fully qualified domain name of the self-managed AD directory. For example, `corp.example.com`.
         */
        domainName: string;
        /**
         * The name of the domain group whose members are granted administrative privileges for the file system. Administrative privileges include taking ownership of files and folders, and setting audit controls (audit ACLs) on files and folders. The group that you specify must already exist in your domain. Defaults to `Domain Admins`.
         */
        fileSystemAdministratorsGroup?: string;
        /**
         * The fully qualified distinguished name of the organizational unit within your self-managed AD directory that the Windows File Server instance will join. For example, `OU=FSx,DC=yourdomain,DC=corp,DC=com`. Only accepts OU as the direct parent of the file system. If none is provided, the FSx file system is created in the default location of your self-managed AD directory. To learn more, see [RFC 2253](https://tools.ietf.org/html/rfc2253).
         */
        organizationalUnitDistinguishedName?: string;
        /**
         * The password for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
         */
        password: string;
        /**
         * The user name for the service account on your self-managed AD domain that Amazon FSx will use to join to your AD domain.
         */
        username: string;
    }
}

export namespace gamelift {
    export interface AliasRoutingStrategy {
        /**
         * ID of the Gamelift Fleet to point the alias to.
         */
        fleetId?: string;
        /**
         * Message text to be used with the `TERMINAL` routing strategy.
         */
        message?: string;
        /**
         * Type of routing strategy. e.g. `SIMPLE` or `TERMINAL`
         */
        type: string;
    }

    export interface BuildStorageLocation {
        /**
         * Name of your S3 bucket.
         */
        bucket: string;
        /**
         * Name of the zip file containing your build files.
         */
        key: string;
        /**
         * ARN of the access role that allows Amazon GameLift to access your S3 bucket.
         */
        roleArn: string;
    }

    export interface FleetEc2InboundPermission {
        /**
         * Starting value for a range of allowed port numbers.
         */
        fromPort: number;
        /**
         * Range of allowed IP addresses expressed in CIDR notation. e.g. `000.000.000.000/[subnet mask]` or `0.0.0.0/[subnet mask]`.
         */
        ipRange: string;
        /**
         * Network communication protocol used by the fleet. e.g. `TCP` or `UDP`
         */
        protocol: string;
        /**
         * Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than `fromPort`.
         */
        toPort: number;
    }

    export interface FleetResourceCreationLimitPolicy {
        /**
         * Maximum number of game sessions that an individual can create during the policy period.
         */
        newGameSessionsPerCreator?: number;
        /**
         * Time span used in evaluating the resource creation limit policy.
         */
        policyPeriodInMinutes?: number;
    }

    export interface FleetRuntimeConfiguration {
        /**
         * Maximum amount of time (in seconds) that a game session can remain in status `ACTIVATING`.
         */
        gameSessionActivationTimeoutSeconds?: number;
        /**
         * Maximum number of game sessions with status `ACTIVATING` to allow on an instance simultaneously.
         */
        maxConcurrentGameSessionActivations?: number;
        /**
         * Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
         */
        serverProcesses?: outputs.gamelift.FleetRuntimeConfigurationServerProcess[];
    }

    export interface FleetRuntimeConfigurationServerProcess {
        /**
         * Number of server processes using this configuration to run concurrently on an instance.
         */
        concurrentExecutions: number;
        /**
         * Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances `C:\game`, and for Linux instances `/local/game`.
         */
        launchPath: string;
        /**
         * Optional list of parameters to pass to the server executable on launch.
         */
        parameters?: string;
    }

    export interface GameSessionQueuePlayerLatencyPolicy {
        /**
         * Maximum latency value that is allowed for any player.
         */
        maximumIndividualPlayerLatencyMilliseconds: number;
        /**
         * Length of time that the policy is enforced while placing a new game session. Absence of value for this attribute means that the policy is enforced until the queue times out.
         */
        policyDurationSeconds?: number;
    }
}

export namespace glacier {
    export interface VaultNotification {
        /**
         * You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
         */
        events: string[];
        /**
         * The SNS Topic ARN.
         */
        snsTopic: string;
    }
}

export namespace globalaccelerator {
    export interface AcceleratorAttributes {
        /**
         * Indicates whether flow logs are enabled.
         */
        flowLogsEnabled?: boolean;
        /**
         * The name of the Amazon S3 bucket for the flow logs.
         */
        flowLogsS3Bucket?: string;
        /**
         * The prefix for the location in the Amazon S3 bucket for the flow logs.
         */
        flowLogsS3Prefix?: string;
    }

    export interface AcceleratorIpSet {
        /**
         * A list of IP addresses in the IP address set.
         */
        ipAddresses: string[];
        /**
         * The types of IP addresses included in this IP set.
         */
        ipFamily: string;
    }

    export interface EndpointGroupEndpointConfiguration {
        clientIpPreservationEnabled: boolean;
        /**
         * An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
         */
        endpointId?: string;
        /**
         * The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
         */
        weight?: number;
    }

    export interface EndpointGroupPortOverride {
        /**
         * The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
         */
        endpointPort: number;
        /**
         * The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
         */
        listenerPort: number;
    }

    export interface ListenerPortRange {
        /**
         * The first port in the range of ports, inclusive.
         */
        fromPort?: number;
        /**
         * The last port in the range of ports, inclusive.
         */
        toPort?: number;
    }
}

export namespace glue {
    export interface CatalogTablePartitionIndex {
        /**
         * The name of the partition index.
         */
        indexName: string;
        indexStatus: string;
        /**
         * The keys for the partition index.
         */
        keys: string[];
    }

    export interface CatalogTablePartitionKey {
        /**
         * Free-form text comment.
         */
        comment?: string;
        /**
         * Name of the SerDe.
         */
        name: string;
        /**
         * The datatype of data in the Column.
         */
        type?: string;
    }

    export interface CatalogTableStorageDescriptor {
        /**
         * A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
         */
        bucketColumns?: string[];
        /**
         * A list of the Columns in the table.
         */
        columns?: outputs.glue.CatalogTableStorageDescriptorColumn[];
        /**
         * True if the data in the table is compressed, or False if not.
         */
        compressed?: boolean;
        /**
         * The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
         */
        inputFormat?: string;
        /**
         * The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
         */
        location?: string;
        /**
         * Must be specified if the table contains any dimension columns.
         */
        numberOfBuckets?: number;
        /**
         * The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
         */
        outputFormat?: string;
        /**
         * A map of initialization parameters for the SerDe, in key-value form.
         */
        parameters?: {[key: string]: string};
        /**
         * Serialization/deserialization (SerDe) information.
         */
        serDeInfo?: outputs.glue.CatalogTableStorageDescriptorSerDeInfo;
        /**
         * Information about values that appear very frequently in a column (skewed values).
         */
        skewedInfo?: outputs.glue.CatalogTableStorageDescriptorSkewedInfo;
        /**
         * A list of Order objects specifying the sort order of each bucket in the table.
         */
        sortColumns?: outputs.glue.CatalogTableStorageDescriptorSortColumn[];
        /**
         * True if the table data is stored in subdirectories, or False if not.
         */
        storedAsSubDirectories?: boolean;
    }

    export interface CatalogTableStorageDescriptorColumn {
        /**
         * Free-form text comment.
         */
        comment?: string;
        /**
         * Name of the SerDe.
         */
        name: string;
        /**
         * A map of initialization parameters for the SerDe, in key-value form.
         */
        parameters?: {[key: string]: string};
        /**
         * The datatype of data in the Column.
         */
        type?: string;
    }

    export interface CatalogTableStorageDescriptorSerDeInfo {
        /**
         * Name of the SerDe.
         */
        name?: string;
        /**
         * A map of initialization parameters for the SerDe, in key-value form.
         */
        parameters?: {[key: string]: string};
        /**
         * Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
         */
        serializationLibrary?: string;
    }

    export interface CatalogTableStorageDescriptorSkewedInfo {
        /**
         * A list of names of columns that contain skewed values.
         */
        skewedColumnNames?: string[];
        /**
         * A list of values that appear so frequently as to be considered skewed.
         */
        skewedColumnValueLocationMaps?: {[key: string]: string};
        /**
         * A map of skewed values to the columns that contain them.
         */
        skewedColumnValues?: string[];
    }

    export interface CatalogTableStorageDescriptorSortColumn {
        /**
         * The name of the column.
         */
        column: string;
        /**
         * Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
         */
        sortOrder: number;
    }

    export interface ClassifierCsvClassifier {
        /**
         * Enables the processing of files that contain only one column.
         */
        allowSingleColumn?: boolean;
        /**
         * Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
         */
        containsHeader?: string;
        /**
         * The delimiter used in the Csv to separate columns.
         */
        delimiter?: string;
        /**
         * Specifies whether to trim column values.
         */
        disableValueTrimming?: boolean;
        /**
         * A list of strings representing column names.
         */
        headers?: string[];
        /**
         * A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
         */
        quoteSymbol?: string;
    }

    export interface ClassifierGrokClassifier {
        /**
         * An identifier of the data format that the classifier matches.
         */
        classification: string;
        /**
         * Custom grok patterns used by this classifier.
         */
        customPatterns?: string;
        /**
         * The grok pattern used by this classifier.
         */
        grokPattern: string;
    }

    export interface ClassifierJsonClassifier {
        /**
         * A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
         */
        jsonPath: string;
    }

    export interface ClassifierXmlClassifier {
        /**
         * An identifier of the data format that the classifier matches.
         */
        classification: string;
        /**
         * The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
         */
        rowTag: string;
    }

    export interface ConnectionPhysicalConnectionRequirements {
        /**
         * The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
         */
        availabilityZone?: string;
        /**
         * The security group ID list used by the connection.
         */
        securityGroupIdLists?: string[];
        /**
         * The subnet ID used by the connection.
         */
        subnetId?: string;
    }

    export interface CrawlerCatalogTarget {
        /**
         * The name of the Glue database to be synchronized.
         */
        databaseName: string;
        /**
         * A list of catalog tables to be synchronized.
         */
        tables: string[];
    }

    export interface CrawlerDynamodbTarget {
        /**
         * The name of the DynamoDB table to crawl.
         */
        path: string;
        /**
         * Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
         */
        scanAll?: boolean;
        /**
         * The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
         */
        scanRate?: number;
    }

    export interface CrawlerJdbcTarget {
        /**
         * The name of the connection to use to connect to the JDBC target.
         */
        connectionName: string;
        /**
         * A list of glob patterns used to exclude from the crawl.
         */
        exclusions?: string[];
        /**
         * The path of the JDBC target.
         */
        path: string;
    }

    export interface CrawlerMongodbTarget {
        /**
         * The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
         */
        connectionName: string;
        /**
         * The path of the Amazon DocumentDB or MongoDB target (database/collection).
         */
        path: string;
        /**
         * Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
         */
        scanAll?: boolean;
    }

    export interface CrawlerS3Target {
        /**
         * The name of the connection to use to connect to the JDBC target.
         */
        connectionName?: string;
        /**
         * A list of glob patterns used to exclude from the crawl.
         */
        exclusions?: string[];
        /**
         * The name of the DynamoDB table to crawl.
         */
        path: string;
    }

    export interface CrawlerSchemaChangePolicy {
        /**
         * The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
         */
        deleteBehavior?: string;
        /**
         * The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
         */
        updateBehavior?: string;
    }

    export interface DataCatalogEncryptionSettingsDataCatalogEncryptionSettings {
        /**
         * When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
         */
        connectionPasswordEncryption: outputs.glue.DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption;
        /**
         * Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
         */
        encryptionAtRest: outputs.glue.DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest;
    }

    export interface DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
        /**
         * A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
         */
        awsKmsKeyId?: string;
        /**
         * When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
         */
        returnConnectionPasswordEncrypted: boolean;
    }

    export interface DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
        /**
         * The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
         */
        catalogEncryptionMode: string;
        /**
         * The ARN of the AWS KMS key to use for encryption at rest.
         */
        sseAwsKmsKeyId?: string;
    }

    export interface GetScriptDagEdge {
        /**
         * The ID of the node at which the edge starts.
         */
        source: string;
        /**
         * The ID of the node at which the edge ends.
         */
        target: string;
        /**
         * The target of the edge.
         */
        targetParameter?: string;
    }

    export interface GetScriptDagNode {
        /**
         * Nested configuration an argument or property of a node. Defined below.
         */
        args: outputs.glue.GetScriptDagNodeArg[];
        /**
         * A node identifier that is unique within the node's graph.
         */
        id: string;
        /**
         * The line number of the node.
         */
        lineNumber?: number;
        /**
         * The type of node this is.
         */
        nodeType: string;
    }

    export interface GetScriptDagNodeArg {
        /**
         * The name of the argument or property.
         */
        name: string;
        /**
         * Boolean if the value is used as a parameter. Defaults to `false`.
         */
        param?: boolean;
        /**
         * The value of the argument or property.
         */
        value: string;
    }

    export interface JobCommand {
        /**
         * The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `maxCapacity` needs to be set if `pythonshell` is chosen.
         */
        name?: string;
        /**
         * The Python version being used to execute a Python shell job. Allowed values are 2 or 3.
         */
        pythonVersion: string;
        /**
         * Specifies the S3 path to a script that executes a job.
         */
        scriptLocation: string;
    }

    export interface JobExecutionProperty {
        /**
         * The maximum number of concurrent runs allowed for a job. The default is 1.
         */
        maxConcurrentRuns?: number;
    }

    export interface JobNotificationProperty {
        /**
         * After a job run starts, the number of minutes to wait before sending a job run delay notification.
         */
        notifyDelayAfter?: number;
    }

    export interface MLTransformInputRecordTable {
        /**
         * A unique identifier for the AWS Glue Data Catalog.
         */
        catalogId?: string;
        /**
         * The name of the connection to the AWS Glue Data Catalog.
         */
        connectionName?: string;
        /**
         * A database name in the AWS Glue Data Catalog.
         */
        databaseName: string;
        /**
         * A table name in the AWS Glue Data Catalog.
         */
        tableName: string;
    }

    export interface MLTransformParameters {
        /**
         * The parameters for the find matches algorithm. see Find Matches Parameters.
         */
        findMatchesParameters: outputs.glue.MLTransformParametersFindMatchesParameters;
        /**
         * The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
         */
        transformType: string;
    }

    export interface MLTransformParametersFindMatchesParameters {
        /**
         * The value that is selected when tuning your transform for a balance between accuracy and cost.
         */
        accuracyCostTradeOff?: number;
        /**
         * The value to switch on or off to force the output to match the provided labels from users.
         */
        enforceProvidedLabels?: boolean;
        /**
         * The value selected when tuning your transform for a balance between precision and recall.
         */
        precisionRecallTradeOff?: number;
        /**
         * The name of a column that uniquely identifies rows in the source table.
         */
        primaryKeyColumnName?: string;
    }

    export interface MLTransformSchema {
        /**
         * The type of data in the column.
         */
        dataType: string;
        /**
         * The name you assign to this ML Transform. It must be unique in your account.
         */
        name: string;
    }

    export interface PartitionStorageDescriptor {
        /**
         * A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
         */
        bucketColumns?: string[];
        /**
         * A list of the Columns in the table.
         */
        columns?: outputs.glue.PartitionStorageDescriptorColumn[];
        /**
         * True if the data in the table is compressed, or False if not.
         */
        compressed?: boolean;
        /**
         * The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
         */
        inputFormat?: string;
        /**
         * The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
         */
        location?: string;
        /**
         * Must be specified if the table contains any dimension columns.
         */
        numberOfBuckets?: number;
        /**
         * The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
         */
        outputFormat?: string;
        /**
         * A map of initialization parameters for the SerDe, in key-value form.
         */
        parameters?: {[key: string]: string};
        /**
         * Serialization/deserialization (SerDe) information.
         */
        serDeInfo?: outputs.glue.PartitionStorageDescriptorSerDeInfo;
        /**
         * Information about values that appear very frequently in a column (skewed values).
         */
        skewedInfo?: outputs.glue.PartitionStorageDescriptorSkewedInfo;
        /**
         * A list of Order objects specifying the sort order of each bucket in the table.
         */
        sortColumns?: outputs.glue.PartitionStorageDescriptorSortColumn[];
        /**
         * True if the table data is stored in subdirectories, or False if not.
         */
        storedAsSubDirectories?: boolean;
    }

    export interface PartitionStorageDescriptorColumn {
        /**
         * Free-form text comment.
         */
        comment?: string;
        /**
         * Name of the SerDe.
         */
        name: string;
        /**
         * The datatype of data in the Column.
         */
        type?: string;
    }

    export interface PartitionStorageDescriptorSerDeInfo {
        /**
         * Name of the SerDe.
         */
        name?: string;
        /**
         * A map of initialization parameters for the SerDe, in key-value form.
         */
        parameters?: {[key: string]: string};
        /**
         * Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
         */
        serializationLibrary?: string;
    }

    export interface PartitionStorageDescriptorSkewedInfo {
        /**
         * A list of names of columns that contain skewed values.
         */
        skewedColumnNames?: string[];
        /**
         * A list of values that appear so frequently as to be considered skewed.
         */
        skewedColumnValueLocationMaps?: {[key: string]: string};
        /**
         * A map of skewed values to the columns that contain them.
         */
        skewedColumnValues?: string[];
    }

    export interface PartitionStorageDescriptorSortColumn {
        /**
         * The name of the column.
         */
        column: string;
        /**
         * Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
         */
        sortOrder: number;
    }

    export interface SecurityConfigurationEncryptionConfiguration {
        cloudwatchEncryption: outputs.glue.SecurityConfigurationEncryptionConfigurationCloudwatchEncryption;
        jobBookmarksEncryption: outputs.glue.SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption;
        /**
         * A `s3Encryption ` block as described below, which contains encryption configuration for S3 data.
         */
        s3Encryption: outputs.glue.SecurityConfigurationEncryptionConfigurationS3Encryption;
    }

    export interface SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
        /**
         * Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
         */
        cloudwatchEncryptionMode?: string;
        /**
         * Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
         */
        kmsKeyArn?: string;
    }

    export interface SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
        /**
         * Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
         */
        jobBookmarksEncryptionMode?: string;
        /**
         * Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
         */
        kmsKeyArn?: string;
    }

    export interface SecurityConfigurationEncryptionConfigurationS3Encryption {
        /**
         * Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
         */
        kmsKeyArn?: string;
        /**
         * Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
         */
        s3EncryptionMode?: string;
    }

    export interface TriggerAction {
        /**
         * Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
         */
        arguments?: {[key: string]: string};
        /**
         * The name of the crawler to be executed. Conflicts with `jobName`.
         */
        crawlerName?: string;
        /**
         * The name of a job to be executed. Conflicts with `crawlerName`.
         */
        jobName?: string;
        /**
         * Specifies configuration properties of a job run notification. see Notification Property details below.
         */
        notificationProperty?: outputs.glue.TriggerActionNotificationProperty;
        /**
         * The name of the Security Configuration structure to be used with this action.
         */
        securityConfiguration?: string;
        /**
         * The job run timeout in minutes. It overrides the timeout value of the job.
         */
        timeout?: number;
    }

    export interface TriggerActionNotificationProperty {
        /**
         * After a job run starts, the number of minutes to wait before sending a job run delay notification.
         */
        notifyDelayAfter?: number;
    }

    export interface TriggerPredicate {
        /**
         * A list of the conditions that determine when the trigger will fire. Defined below.
         */
        conditions: outputs.glue.TriggerPredicateCondition[];
        /**
         * How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
         */
        logical?: string;
    }

    export interface TriggerPredicateCondition {
        /**
         * The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
         */
        crawlState?: string;
        /**
         * The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
         */
        crawlerName?: string;
        /**
         * The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
         */
        jobName?: string;
        /**
         * A logical operator. Defaults to `EQUALS`.
         */
        logicalOperator?: string;
        /**
         * The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
         */
        state?: string;
    }

    export interface UserDefinedFunctionResourceUri {
        /**
         * The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
         */
        resourceType: string;
        /**
         * The URI for accessing the resource.
         */
        uri: string;
    }
}

export namespace guardduty {
    export interface FilterFindingCriteria {
        criterions: outputs.guardduty.FilterFindingCriteriaCriterion[];
    }

    export interface FilterFindingCriteriaCriterion {
        /**
         * List of string values to be evaluated.
         */
        equals?: string[];
        /**
         * The name of the field to be evaluated. The full list of field names can be found in [AWS documentation](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_filter-findings.html#filter_criteria).
         */
        field: string;
        /**
         * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
         */
        greaterThan?: string;
        /**
         * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
         */
        greaterThanOrEqual?: string;
        /**
         * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
         */
        lessThan?: string;
        /**
         * A value to be evaluated. Accepts either an integer or a date in [RFC 3339 format](https://tools.ietf.org/html/rfc3339#section-5.8).
         */
        lessThanOrEqual?: string;
        /**
         * List of string values to be evaluated.
         */
        notEquals?: string[];
    }
}

export namespace iam {
    export interface GetGroupUser {
        /**
         * The Amazon Resource Name (ARN) specifying the iam user.
         */
        arn: string;
        /**
         * The path to the iam user.
         */
        path: string;
        /**
         * The stable and unique string identifying the iam user.
         */
        userId: string;
        /**
         * The name of the iam user.
         */
        userName: string;
    }

    export interface GetPolicyDocumentStatement {
        /**
         * A list of actions that this statement either allows
         * or denies. For example, ``["ec2:RunInstances", "s3:*"]``.
         */
        actions?: string[];
        /**
         * A nested configuration block (described below)
         * that defines a further, possibly-service-specific condition that constrains
         * whether this statement applies.
         */
        conditions?: outputs.iam.GetPolicyDocumentStatementCondition[];
        /**
         * Either "Allow" or "Deny", to specify whether this
         * statement allows or denies the given actions. The default is "Allow".
         */
        effect?: string;
        /**
         * A list of actions that this statement does *not*
         * apply to. Used to apply a policy statement to all actions *except* those
         * listed.
         */
        notActions?: string[];
        /**
         * Like `principals` except gives principals that
         * the statement does *not* apply to.
         */
        notPrincipals?: outputs.iam.GetPolicyDocumentStatementNotPrincipal[];
        /**
         * A list of resource ARNs that this statement
         * does *not* apply to. Used to apply a policy statement to all resources
         * *except* those listed.
         */
        notResources?: string[];
        /**
         * A nested configuration block (described below)
         * specifying a principal (or principal pattern) to which this statement applies.
         */
        principals?: outputs.iam.GetPolicyDocumentStatementPrincipal[];
        /**
         * A list of resource ARNs that this statement applies
         * to. This is required by AWS if used for an IAM policy.
         */
        resources?: string[];
        /**
         * An ID for the policy statement.
         */
        sid?: string;
    }

    export interface GetPolicyDocumentStatementCondition {
        /**
         * The name of the
         * [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html)
         * to evaluate.
         */
        test: string;
        /**
         * The values to evaluate the condition against. If multiple
         * values are provided, the condition matches if at least one of them applies.
         * (That is, the tests are combined with the "OR" boolean operation.)
         */
        values: string[];
        /**
         * The name of a
         * [Context Variable](http://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys)
         * to apply the condition to. Context variables may either be standard AWS
         * variables starting with `aws:`, or service-specific variables prefixed with
         * the service name.
         */
        variable: string;
    }

    export interface GetPolicyDocumentStatementNotPrincipal {
        /**
         * List of identifiers for principals. When `type`
         * is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
         */
        identifiers: string[];
        /**
         * The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
         */
        type: string;
    }

    export interface GetPolicyDocumentStatementPrincipal {
        /**
         * List of identifiers for principals. When `type`
         * is "AWS", these are IAM user or role ARNs.  When `type` is "Service", these are AWS Service roles e.g. `lambda.amazonaws.com`. When `type` is "Federated", these are web identity users or SAML provider ARNs.
         */
        identifiers: string[];
        /**
         * The type of principal. For AWS ARNs this is "AWS".  For AWS services (e.g. Lambda), this is "Service". For Federated access the type is "Federated".
         */
        type: string;
    }
}

export namespace imagebuilder {
    export interface DistributionConfigurationDistribution {
        /**
         * Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
         */
        amiDistributionConfiguration?: outputs.imagebuilder.DistributionConfigurationDistributionAmiDistributionConfiguration;
        /**
         * Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
         */
        licenseConfigurationArns?: string[];
        /**
         * AWS Region for the distribution.
         */
        region: string;
    }

    export interface DistributionConfigurationDistributionAmiDistributionConfiguration {
        /**
         * Key-value map of tags to apply to the distributed AMI.
         */
        amiTags?: {[key: string]: string};
        /**
         * Description to apply to the distributed AMI.
         */
        description?: string;
        /**
         * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
         */
        kmsKeyId?: string;
        /**
         * Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
         */
        launchPermission?: outputs.imagebuilder.DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission;
        /**
         * Name to apply to the distributed AMI.
         */
        name?: string;
        /**
         * Set of AWS Account identifiers to distribute the AMI.
         */
        targetAccountIds?: string[];
    }

    export interface DistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission {
        /**
         * Set of EC2 launch permission user groups to assign. Use `all` to distribute a public AMI.
         */
        userGroups?: string[];
        /**
         * Set of AWS Account identifiers to assign.
         */
        userIds?: string[];
    }

    export interface GetDistributionConfigurationDistribution {
        /**
         * Nested list of AMI distribution configuration.
         */
        amiDistributionConfigurations: outputs.imagebuilder.GetDistributionConfigurationDistributionAmiDistributionConfiguration[];
        /**
         * Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
         */
        licenseConfigurationArns: string[];
        /**
         * AWS Region of distribution.
         */
        region: string;
    }

    export interface GetDistributionConfigurationDistributionAmiDistributionConfiguration {
        /**
         * Key-value map of tags to apply to distributed AMI.
         */
        amiTags: {[key: string]: string};
        /**
         * Description to apply to distributed AMI.
         */
        description: string;
        /**
         * Amazon Resource Name (ARN) of Key Management Service (KMS) Key to encrypt AMI.
         */
        kmsKeyId: string;
        /**
         * Nested list of EC2 launch permissions.
         */
        launchPermissions: outputs.imagebuilder.GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission[];
        /**
         * Name of the distribution configuration.
         */
        name: string;
        /**
         * Set of target AWS Account identifiers.
         */
        targetAccountIds: string[];
    }

    export interface GetDistributionConfigurationDistributionAmiDistributionConfigurationLaunchPermission {
        /**
         * Set of EC2 launch permission user groups.
         */
        userGroups: string[];
        /**
         * Set of AWS Account identifiers.
         */
        userIds: string[];
    }

    export interface GetImagePipelineImageTestsConfiguration {
        /**
         * Whether image tests are enabled.
         */
        imageTestsEnabled: boolean;
        /**
         * Number of minutes before image tests time out.
         */
        timeoutMinutes: number;
    }

    export interface GetImagePipelineSchedule {
        /**
         * Condition when the pipeline should trigger a new image build.
         */
        pipelineExecutionStartCondition: string;
        /**
         * Cron expression of how often the pipeline start condition is evaluated.
         */
        scheduleExpression: string;
    }

    export interface GetImageRecipeBlockDeviceMapping {
        /**
         * Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
         */
        deviceName: string;
        /**
         * Single list of object with Elastic Block Storage (EBS) block device mapping settings.
         */
        ebs: outputs.imagebuilder.GetImageRecipeBlockDeviceMappingEb[];
        /**
         * Whether to remove a mapping from the parent image.
         */
        noDevice: string;
        /**
         * Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
         */
        virtualName: string;
    }

    export interface GetImageRecipeBlockDeviceMappingEb {
        /**
         * Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
         */
        deleteOnTermination: boolean;
        /**
         * Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
         */
        encrypted: boolean;
        /**
         * Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
         */
        iops: number;
        /**
         * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
         */
        kmsKeyId: string;
        /**
         * Identifier of the EC2 Volume Snapshot.
         */
        snapshotId: string;
        /**
         * Size of the volume, in GiB.
         */
        volumeSize: number;
        /**
         * Type of the volume. For example, `gp2` or `io2`.
         */
        volumeType: string;
    }

    export interface GetImageRecipeComponent {
        /**
         * Amazon Resource Name (ARN) of the Image Builder Component.
         */
        componentArn: string;
    }

    export interface GetInfrastructureConfigurationLogging {
        /**
         * Nested list of S3 logs settings.
         */
        s3Logs: outputs.imagebuilder.GetInfrastructureConfigurationLoggingS3Log[];
    }

    export interface GetInfrastructureConfigurationLoggingS3Log {
        /**
         * Name of the S3 Bucket for logging.
         */
        s3BucketName: string;
        /**
         * Key prefix for S3 Bucket logging.
         */
        s3KeyPrefix: string;
    }

    export interface ImagePipelineImageTestsConfiguration {
        /**
         * Whether image tests are enabled. Defaults to `true`.
         */
        imageTestsEnabled?: boolean;
        /**
         * Number of minutes before image tests time out. Valid values are between `60` and `1440`. Defaults to `720`.
         */
        timeoutMinutes?: number;
    }

    export interface ImagePipelineSchedule {
        /**
         * Condition when the pipeline should trigger a new image build. Valid values are `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE` and `EXPRESSION_MATCH_ONLY`. Defaults to `EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE`.
         */
        pipelineExecutionStartCondition?: string;
        /**
         * Cron expression of how often the pipeline start condition is evaluated. For example, `cron(0 0 * * *)` is evaluated every day at midnight UTC.
         */
        scheduleExpression: string;
    }

    export interface ImageRecipeBlockDeviceMapping {
        /**
         * Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
         */
        deviceName?: string;
        /**
         * Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
         */
        ebs?: outputs.imagebuilder.ImageRecipeBlockDeviceMappingEbs;
        /**
         * Set to `true` to remove a mapping from the parent image.
         */
        noDevice?: boolean;
        /**
         * Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.
         */
        virtualName?: string;
    }

    export interface ImageRecipeBlockDeviceMappingEbs {
        /**
         * Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
         */
        deleteOnTermination?: string;
        /**
         * Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
         */
        encrypted?: string;
        /**
         * Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
         */
        iops?: number;
        /**
         * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
         */
        kmsKeyId?: string;
        /**
         * Identifier of the EC2 Volume Snapshot.
         */
        snapshotId?: string;
        /**
         * Size of the volume, in GiB.
         */
        volumeSize?: number;
        /**
         * Type of the volume. For example, `gp2` or `io2`.
         */
        volumeType?: string;
    }

    export interface ImageRecipeComponent {
        /**
         * Amazon Resource Name (ARN) of the Image Builder Component to associate.
         */
        componentArn: string;
    }

    export interface InfrastructureConfigurationLogging {
        /**
         * Configuration block with S3 logging settings. Detailed below.
         */
        s3Logs: outputs.imagebuilder.InfrastructureConfigurationLoggingS3Logs;
    }

    export interface InfrastructureConfigurationLoggingS3Logs {
        /**
         * Name of the S3 Bucket.
         */
        s3BucketName: string;
        /**
         * Prefix to use for S3 logs. Defaults to `/`.
         */
        s3KeyPrefix?: string;
    }
}

export namespace iot {
    export interface ThingTypeProperties {
        /**
         * The description of the thing type.
         */
        description?: string;
        /**
         * A list of searchable thing attribute names.
         */
        searchableAttributes: string[];
    }

    export interface TopicRuleCloudwatchAlarm {
        /**
         * The CloudWatch alarm name.
         */
        alarmName: string;
        /**
         * The IAM role ARN that allows access to the CloudWatch alarm.
         */
        roleArn: string;
        /**
         * The reason for the alarm change.
         */
        stateReason: string;
        /**
         * The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
         */
        stateValue: string;
    }

    export interface TopicRuleCloudwatchMetric {
        /**
         * The CloudWatch metric name.
         */
        metricName: string;
        /**
         * The CloudWatch metric namespace name.
         */
        metricNamespace: string;
        /**
         * An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
         */
        metricTimestamp?: string;
        /**
         * The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
         */
        metricUnit: string;
        /**
         * The CloudWatch metric value.
         */
        metricValue: string;
        /**
         * The IAM role ARN that allows access to the CloudWatch metric.
         */
        roleArn: string;
    }

    export interface TopicRuleDynamodb {
        /**
         * The hash key name.
         */
        hashKeyField: string;
        /**
         * The hash key type. Valid values are "STRING" or "NUMBER".
         */
        hashKeyType?: string;
        /**
         * The hash key value.
         */
        hashKeyValue: string;
        /**
         * The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
         */
        operation?: string;
        /**
         * The action payload.
         */
        payloadField?: string;
        /**
         * The range key name.
         */
        rangeKeyField?: string;
        /**
         * The range key type. Valid values are "STRING" or "NUMBER".
         */
        rangeKeyType?: string;
        /**
         * The range key value.
         */
        rangeKeyValue?: string;
        /**
         * The ARN of the IAM role that grants access to the DynamoDB table.
         */
        roleArn: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    export interface TopicRuleDynamodbv2 {
        /**
         * Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
         */
        putItem?: outputs.iot.TopicRuleDynamodbv2PutItem;
        /**
         * The IAM role ARN that allows access to the CloudWatch alarm.
         */
        roleArn: string;
    }

    export interface TopicRuleDynamodbv2PutItem {
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    export interface TopicRuleElasticsearch {
        /**
         * The endpoint of your Elasticsearch domain.
         */
        endpoint: string;
        /**
         * The unique identifier for the document you are storing.
         */
        id: string;
        /**
         * The Elasticsearch index where you want to store your data.
         */
        index: string;
        /**
         * The IAM role ARN that has access to Elasticsearch.
         */
        roleArn: string;
        /**
         * The type of document you are storing.
         */
        type: string;
    }

    export interface TopicRuleErrorAction {
        cloudwatchAlarm?: outputs.iot.TopicRuleErrorActionCloudwatchAlarm;
        cloudwatchMetric?: outputs.iot.TopicRuleErrorActionCloudwatchMetric;
        dynamodb?: outputs.iot.TopicRuleErrorActionDynamodb;
        dynamodbv2?: outputs.iot.TopicRuleErrorActionDynamodbv2;
        elasticsearch?: outputs.iot.TopicRuleErrorActionElasticsearch;
        firehose?: outputs.iot.TopicRuleErrorActionFirehose;
        iotAnalytics?: outputs.iot.TopicRuleErrorActionIotAnalytics;
        iotEvents?: outputs.iot.TopicRuleErrorActionIotEvents;
        kinesis?: outputs.iot.TopicRuleErrorActionKinesis;
        lambda?: outputs.iot.TopicRuleErrorActionLambda;
        republish?: outputs.iot.TopicRuleErrorActionRepublish;
        s3?: outputs.iot.TopicRuleErrorActionS3;
        sns?: outputs.iot.TopicRuleErrorActionSns;
        sqs?: outputs.iot.TopicRuleErrorActionSqs;
        stepFunctions?: outputs.iot.TopicRuleErrorActionStepFunctions;
    }

    export interface TopicRuleErrorActionCloudwatchAlarm {
        /**
         * The CloudWatch alarm name.
         */
        alarmName: string;
        /**
         * The IAM role ARN that allows access to the CloudWatch alarm.
         */
        roleArn: string;
        /**
         * The reason for the alarm change.
         */
        stateReason: string;
        /**
         * The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
         */
        stateValue: string;
    }

    export interface TopicRuleErrorActionCloudwatchMetric {
        /**
         * The CloudWatch metric name.
         */
        metricName: string;
        /**
         * The CloudWatch metric namespace name.
         */
        metricNamespace: string;
        /**
         * An optional Unix timestamp (http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#about_timestamp).
         */
        metricTimestamp?: string;
        /**
         * The metric unit (supported units can be found here: http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/cloudwatch_concepts.html#Unit)
         */
        metricUnit: string;
        /**
         * The CloudWatch metric value.
         */
        metricValue: string;
        /**
         * The IAM role ARN that allows access to the CloudWatch metric.
         */
        roleArn: string;
    }

    export interface TopicRuleErrorActionDynamodb {
        /**
         * The hash key name.
         */
        hashKeyField: string;
        /**
         * The hash key type. Valid values are "STRING" or "NUMBER".
         */
        hashKeyType?: string;
        /**
         * The hash key value.
         */
        hashKeyValue: string;
        /**
         * The operation. Valid values are "INSERT", "UPDATE", or "DELETE".
         */
        operation?: string;
        /**
         * The action payload.
         */
        payloadField?: string;
        /**
         * The range key name.
         */
        rangeKeyField?: string;
        /**
         * The range key type. Valid values are "STRING" or "NUMBER".
         */
        rangeKeyType?: string;
        /**
         * The range key value.
         */
        rangeKeyValue?: string;
        /**
         * The ARN of the IAM role that grants access to the DynamoDB table.
         */
        roleArn: string;
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    export interface TopicRuleErrorActionDynamodbv2 {
        /**
         * Configuration block with DynamoDB Table to which the message will be written. Nested arguments below.
         */
        putItem?: outputs.iot.TopicRuleErrorActionDynamodbv2PutItem;
        /**
         * The IAM role ARN that allows access to the CloudWatch alarm.
         */
        roleArn: string;
    }

    export interface TopicRuleErrorActionDynamodbv2PutItem {
        /**
         * The name of the DynamoDB table.
         */
        tableName: string;
    }

    export interface TopicRuleErrorActionElasticsearch {
        /**
         * The endpoint of your Elasticsearch domain.
         */
        endpoint: string;
        /**
         * The unique identifier for the document you are storing.
         */
        id: string;
        /**
         * The Elasticsearch index where you want to store your data.
         */
        index: string;
        /**
         * The IAM role ARN that has access to Elasticsearch.
         */
        roleArn: string;
        /**
         * The type of document you are storing.
         */
        type: string;
    }

    export interface TopicRuleErrorActionFirehose {
        /**
         * The delivery stream name.
         */
        deliveryStreamName: string;
        /**
         * The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
         */
        roleArn: string;
        /**
         * A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    export interface TopicRuleErrorActionIotAnalytics {
        /**
         * Name of AWS IOT Analytics channel.
         */
        channelName: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
    }

    export interface TopicRuleErrorActionIotEvents {
        /**
         * The name of the AWS IoT Events input.
         */
        inputName: string;
        /**
         * Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
         */
        messageId?: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
    }

    export interface TopicRuleErrorActionKinesis {
        /**
         * The partition key.
         */
        partitionKey?: string;
        /**
         * The ARN of the IAM role that grants access to the Amazon Kinesis stream.
         */
        roleArn: string;
        /**
         * The name of the Amazon Kinesis stream.
         */
        streamName: string;
    }

    export interface TopicRuleErrorActionLambda {
        /**
         * The ARN of the Lambda function.
         */
        functionArn: string;
    }

    export interface TopicRuleErrorActionRepublish {
        /**
         * The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
         */
        qos?: number;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * The name of the MQTT topic the message should be republished to.
         */
        topic: string;
    }

    export interface TopicRuleErrorActionS3 {
        /**
         * The Amazon S3 bucket name.
         */
        bucketName: string;
        /**
         * The object key.
         */
        key: string;
        /**
         * The IAM role ARN that allows access to the CloudWatch alarm.
         */
        roleArn: string;
    }

    export interface TopicRuleErrorActionSns {
        /**
         * The message format of the message to publish. Accepted values are "JSON" and "RAW".
         */
        messageFormat?: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * The ARN of the SNS topic.
         */
        targetArn: string;
    }

    export interface TopicRuleErrorActionSqs {
        /**
         * The URL of the Amazon SQS queue.
         */
        queueUrl: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * Specifies whether to use Base64 encoding.
         */
        useBase64: boolean;
    }

    export interface TopicRuleErrorActionStepFunctions {
        /**
         * The prefix used to generate, along with a UUID, the unique state machine execution name.
         */
        executionNamePrefix?: string;
        /**
         * The ARN of the IAM role that grants access to start execution of the state machine.
         */
        roleArn: string;
        /**
         * The name of the Step Functions state machine whose execution will be started.
         */
        stateMachineName: string;
    }

    export interface TopicRuleFirehose {
        /**
         * The delivery stream name.
         */
        deliveryStreamName: string;
        /**
         * The IAM role ARN that grants access to the Amazon Kinesis Firehose stream.
         */
        roleArn: string;
        /**
         * A character separator that is used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
         */
        separator?: string;
    }

    export interface TopicRuleIotAnalytic {
        /**
         * Name of AWS IOT Analytics channel.
         */
        channelName: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
    }

    export interface TopicRuleIotEvent {
        /**
         * The name of the AWS IoT Events input.
         */
        inputName: string;
        /**
         * Use this to ensure that only one input (message) with a given messageId is processed by an AWS IoT Events detector.
         */
        messageId?: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
    }

    export interface TopicRuleKinesis {
        /**
         * The partition key.
         */
        partitionKey?: string;
        /**
         * The ARN of the IAM role that grants access to the Amazon Kinesis stream.
         */
        roleArn: string;
        /**
         * The name of the Amazon Kinesis stream.
         */
        streamName: string;
    }

    export interface TopicRuleLambda {
        /**
         * The ARN of the Lambda function.
         */
        functionArn: string;
    }

    export interface TopicRuleRepublish {
        /**
         * The Quality of Service (QoS) level to use when republishing messages. Valid values are 0 or 1. The default value is 0.
         */
        qos?: number;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * The name of the MQTT topic the message should be republished to.
         */
        topic: string;
    }

    export interface TopicRuleS3 {
        /**
         * The Amazon S3 bucket name.
         */
        bucketName: string;
        /**
         * The object key.
         */
        key: string;
        /**
         * The IAM role ARN that allows access to the CloudWatch alarm.
         */
        roleArn: string;
    }

    export interface TopicRuleSns {
        /**
         * The message format of the message to publish. Accepted values are "JSON" and "RAW".
         */
        messageFormat?: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * The ARN of the SNS topic.
         */
        targetArn: string;
    }

    export interface TopicRuleSqs {
        /**
         * The URL of the Amazon SQS queue.
         */
        queueUrl: string;
        /**
         * The ARN of the IAM role that grants access.
         */
        roleArn: string;
        /**
         * Specifies whether to use Base64 encoding.
         */
        useBase64: boolean;
    }

    export interface TopicRuleStepFunction {
        /**
         * The prefix used to generate, along with a UUID, the unique state machine execution name.
         */
        executionNamePrefix?: string;
        /**
         * The ARN of the IAM role that grants access to start execution of the state machine.
         */
        roleArn: string;
        /**
         * The name of the Step Functions state machine whose execution will be started.
         */
        stateMachineName: string;
    }
}

export namespace kinesis {
    export interface AnalyticsApplicationCloudwatchLoggingOptions {
        /**
         * The ARN of the Kinesis Analytics Application.
         */
        id: string;
        /**
         * The ARN of the CloudWatch Log Stream.
         */
        logStreamArn: string;
        /**
         * The ARN of the IAM Role used to send application messages.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationInputs {
        /**
         * The ARN of the Kinesis Analytics Application.
         */
        id: string;
        /**
         * The Kinesis Firehose configuration for the streaming source. Conflicts with `kinesisStream`.
         * See Kinesis Firehose below for more details.
         */
        kinesisFirehose?: outputs.kinesis.AnalyticsApplicationInputsKinesisFirehose;
        /**
         * The Kinesis Stream configuration for the streaming source. Conflicts with `kinesisFirehose`.
         * See Kinesis Stream below for more details.
         */
        kinesisStream?: outputs.kinesis.AnalyticsApplicationInputsKinesisStream;
        /**
         * The Name Prefix to use when creating an in-application stream.
         */
        namePrefix: string;
        /**
         * The number of Parallel in-application streams to create.
         * See Parallelism below for more details.
         */
        parallelism: outputs.kinesis.AnalyticsApplicationInputsParallelism;
        /**
         * The Processing Configuration to transform records as they are received from the stream.
         * See Processing Configuration below for more details.
         */
        processingConfiguration?: outputs.kinesis.AnalyticsApplicationInputsProcessingConfiguration;
        /**
         * The Schema format of the data in the streaming source. See Source Schema below for more details.
         */
        schema: outputs.kinesis.AnalyticsApplicationInputsSchema;
        startingPositionConfigurations: outputs.kinesis.AnalyticsApplicationInputsStartingPositionConfiguration[];
        streamNames: string[];
    }

    export interface AnalyticsApplicationInputsKinesisFirehose {
        /**
         * The ARN of the Kinesis Firehose delivery stream.
         */
        resourceArn: string;
        /**
         * The ARN of the IAM Role used to access the stream.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationInputsKinesisStream {
        /**
         * The ARN of the Kinesis Stream.
         */
        resourceArn: string;
        /**
         * The ARN of the IAM Role used to access the stream.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationInputsParallelism {
        /**
         * The Count of streams.
         */
        count: number;
    }

    export interface AnalyticsApplicationInputsProcessingConfiguration {
        /**
         * The Lambda function configuration. See Lambda below for more details.
         */
        lambda: outputs.kinesis.AnalyticsApplicationInputsProcessingConfigurationLambda;
    }

    export interface AnalyticsApplicationInputsProcessingConfigurationLambda {
        /**
         * The ARN of the Lambda function.
         */
        resourceArn: string;
        /**
         * The ARN of the IAM Role used to access the Lambda function.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationInputsSchema {
        /**
         * The Record Column mapping for the streaming source data element.
         * See Record Columns below for more details.
         */
        recordColumns: outputs.kinesis.AnalyticsApplicationInputsSchemaRecordColumn[];
        /**
         * The Encoding of the record in the streaming source.
         */
        recordEncoding?: string;
        /**
         * The Record Format and mapping information to schematize a record.
         * See Record Format below for more details.
         */
        recordFormat: outputs.kinesis.AnalyticsApplicationInputsSchemaRecordFormat;
    }

    export interface AnalyticsApplicationInputsSchemaRecordColumn {
        /**
         * The Mapping reference to the data element.
         */
        mapping?: string;
        /**
         * Name of the column.
         */
        name: string;
        /**
         * The SQL Type of the column.
         */
        sqlType: string;
    }

    export interface AnalyticsApplicationInputsSchemaRecordFormat {
        /**
         * The Mapping Information for the record format.
         * See Mapping Parameters below for more details.
         */
        mappingParameters?: outputs.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParameters;
        /**
         * The type of Record Format. Can be `CSV` or `JSON`.
         */
        recordFormatType: string;
    }

    export interface AnalyticsApplicationInputsSchemaRecordFormatMappingParameters {
        /**
         * Mapping information when the record format uses delimiters.
         * See CSV Mapping Parameters below for more details.
         */
        csv?: outputs.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv;
        /**
         * Mapping information when JSON is the record format on the streaming source.
         * See JSON Mapping Parameters below for more details.
         */
        json?: outputs.kinesis.AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson;
    }

    export interface AnalyticsApplicationInputsSchemaRecordFormatMappingParametersCsv {
        /**
         * The Column Delimiter.
         */
        recordColumnDelimiter: string;
        /**
         * The Row Delimiter.
         */
        recordRowDelimiter: string;
    }

    export interface AnalyticsApplicationInputsSchemaRecordFormatMappingParametersJson {
        /**
         * Path to the top-level parent that contains the records.
         */
        recordRowPath: string;
    }

    export interface AnalyticsApplicationInputsStartingPositionConfiguration {
        startingPosition: string;
    }

    export interface AnalyticsApplicationOutput {
        /**
         * The ARN of the Kinesis Analytics Application.
         */
        id: string;
        /**
         * The Kinesis Firehose configuration for the destination stream. Conflicts with `kinesisStream`.
         * See Kinesis Firehose below for more details.
         */
        kinesisFirehose?: outputs.kinesis.AnalyticsApplicationOutputKinesisFirehose;
        /**
         * The Kinesis Stream configuration for the destination stream. Conflicts with `kinesisFirehose`.
         * See Kinesis Stream below for more details.
         */
        kinesisStream?: outputs.kinesis.AnalyticsApplicationOutputKinesisStream;
        /**
         * The Lambda function destination. See Lambda below for more details.
         */
        lambda?: outputs.kinesis.AnalyticsApplicationOutputLambda;
        /**
         * The Name of the in-application stream.
         */
        name: string;
        /**
         * The Schema format of the data written to the destination. See Destination Schema below for more details.
         */
        schema: outputs.kinesis.AnalyticsApplicationOutputSchema;
    }

    export interface AnalyticsApplicationOutputKinesisFirehose {
        /**
         * The ARN of the Kinesis Firehose delivery stream.
         */
        resourceArn: string;
        /**
         * The ARN of the IAM Role used to access the stream.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationOutputKinesisStream {
        /**
         * The ARN of the Kinesis Stream.
         */
        resourceArn: string;
        /**
         * The ARN of the IAM Role used to access the stream.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationOutputLambda {
        /**
         * The ARN of the Lambda function.
         */
        resourceArn: string;
        /**
         * The ARN of the IAM Role used to access the Lambda function.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationOutputSchema {
        /**
         * The Format Type of the records on the output stream. Can be `CSV` or `JSON`.
         */
        recordFormatType?: string;
    }

    export interface AnalyticsApplicationReferenceDataSources {
        /**
         * The ARN of the Kinesis Analytics Application.
         */
        id: string;
        /**
         * The S3 configuration for the reference data source. See S3 Reference below for more details.
         */
        s3: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesS3;
        /**
         * The Schema format of the data in the streaming source. See Source Schema below for more details.
         */
        schema: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesSchema;
        /**
         * The in-application Table Name.
         */
        tableName: string;
    }

    export interface AnalyticsApplicationReferenceDataSourcesS3 {
        /**
         * The S3 Bucket ARN.
         */
        bucketArn: string;
        /**
         * The File Key name containing reference data.
         */
        fileKey: string;
        /**
         * The ARN of the IAM Role used to send application messages.
         */
        roleArn: string;
    }

    export interface AnalyticsApplicationReferenceDataSourcesSchema {
        /**
         * The Record Column mapping for the streaming source data element.
         * See Record Columns below for more details.
         */
        recordColumns: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn[];
        /**
         * The Encoding of the record in the streaming source.
         */
        recordEncoding?: string;
        /**
         * The Record Format and mapping information to schematize a record.
         * See Record Format below for more details.
         */
        recordFormat: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat;
    }

    export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordColumn {
        /**
         * The Mapping reference to the data element.
         */
        mapping?: string;
        /**
         * Name of the column.
         */
        name: string;
        /**
         * The SQL Type of the column.
         */
        sqlType: string;
    }

    export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormat {
        /**
         * The Mapping Information for the record format.
         * See Mapping Parameters below for more details.
         */
        mappingParameters?: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters;
        /**
         * The type of Record Format. Can be `CSV` or `JSON`.
         */
        recordFormatType: string;
    }

    export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParameters {
        /**
         * Mapping information when the record format uses delimiters.
         * See CSV Mapping Parameters below for more details.
         */
        csv?: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv;
        /**
         * Mapping information when JSON is the record format on the streaming source.
         * See JSON Mapping Parameters below for more details.
         */
        json?: outputs.kinesis.AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson;
    }

    export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersCsv {
        /**
         * The Column Delimiter.
         */
        recordColumnDelimiter: string;
        /**
         * The Row Delimiter.
         */
        recordRowDelimiter: string;
    }

    export interface AnalyticsApplicationReferenceDataSourcesSchemaRecordFormatMappingParametersJson {
        /**
         * Path to the top-level parent that contains the records.
         */
        recordRowPath: string;
    }

    export interface FirehoseDeliveryStreamElasticsearchConfiguration {
        /**
         * Buffer incoming data for the specified period of time, in seconds between 60 to 900, before delivering it to the destination.  The default value is 300s.
         */
        bufferingInterval?: number;
        /**
         * Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
         */
        bufferingSize?: number;
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions;
        /**
         * The endpoint to use when communicating with the cluster. Conflicts with `domainArn`.
         */
        clusterEndpoint?: string;
        /**
         * The ARN of the Amazon ES domain.  The IAM role must have permission for `DescribeElasticsearchDomain`, `DescribeElasticsearchDomains`, and `DescribeElasticsearchDomainConfig` after assuming `RoleARN`.  The pattern needs to be `arn:.*`. Conflicts with `clusterEndpoint`.
         */
        domainArn?: string;
        /**
         * The Elasticsearch index name.
         */
        indexName: string;
        /**
         * The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are `NoRotation`, `OneHour`, `OneDay`, `OneWeek`, and `OneMonth`.  The default value is `OneDay`.
         */
        indexRotationPeriod?: string;
        /**
         * The data processing configuration.  More details are given below.
         */
        processingConfiguration?: outputs.kinesis.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration;
        /**
         * After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
         */
        retryDuration?: number;
        /**
         * The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The pattern needs to be `arn:.*`.
         */
        roleArn: string;
        /**
         * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedDocumentsOnly` and `AllDocuments`.  Default value is `FailedDocumentsOnly`.
         */
        s3BackupMode?: string;
        /**
         * The Elasticsearch type name with maximum length of 100 characters.
         */
        typeName?: string;
        /**
         * The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. More details are given below
         */
        vpcConfig?: outputs.kinesis.FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig;
    }

    export interface FirehoseDeliveryStreamElasticsearchConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfiguration {
        /**
         * Enables or disables data processing.
         */
        enabled?: boolean;
        /**
         * Array of data processors. More details are given below
         */
        processors?: outputs.kinesis.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor[];
    }

    export interface FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessor {
        /**
         * Array of processor parameters. More details are given below
         */
        parameters?: outputs.kinesis.FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter[];
        /**
         * The type of processor. Valid Values: `Lambda`
         */
        type: string;
    }

    export interface FirehoseDeliveryStreamElasticsearchConfigurationProcessingConfigurationProcessorParameter {
        /**
         * Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
         */
        parameterName: string;
        /**
         * Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
         */
        parameterValue: string;
    }

    export interface FirehoseDeliveryStreamElasticsearchConfigurationVpcConfig {
        /**
         * The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary [IAM permissions](https://docs.aws.amazon.com/firehose/latest/dev/controlling-access.html#using-iam-es-vpc)
         */
        roleArn: string;
        /**
         * A list of security group IDs to associate with Kinesis Firehose.
         */
        securityGroupIds: string[];
        /**
         * A list of subnet IDs to associate with Kinesis Firehose.
         */
        subnetIds: string[];
        vpcId: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3Configuration {
        /**
         * The ARN of the S3 bucket
         */
        bucketArn: string;
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
         */
        bufferInterval?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         * We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
         */
        bufferSize?: number;
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions;
        /**
         * The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
         */
        compressionFormat?: string;
        /**
         * Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. More details given below.
         */
        dataFormatConversionConfiguration?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration;
        /**
         * Prefix added to failed records before writing them to S3. This prefix appears immediately following the bucket name.
         */
        errorOutputPrefix?: string;
        /**
         * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
         * be used.
         */
        kmsKeyArn?: string;
        /**
         * The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
         */
        prefix?: string;
        /**
         * The data processing configuration.  More details are given below.
         */
        processingConfiguration?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration;
        /**
         * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
         */
        roleArn: string;
        /**
         * The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
         */
        s3BackupConfiguration?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration;
        /**
         * The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
         */
        s3BackupMode?: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfiguration {
        /**
         * Defaults to `true`. Set it to `false` if you want to disable format conversion while preserving the configuration details.
         */
        enabled?: boolean;
        /**
         * Nested argument that specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. More details below.
         */
        inputFormatConfiguration: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration;
        /**
         * Nested argument that specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. More details below.
         */
        outputFormatConfiguration: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration;
        /**
         * Nested argument that specifies the AWS Glue Data Catalog table that contains the column information. More details below.
         */
        schemaConfiguration: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration {
        /**
         * Nested argument that specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. More details below.
         */
        deserializer: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer {
        /**
         * Nested argument that specifies the native Hive / HCatalog JsonSerDe. More details below.
         */
        hiveJsonSerDe?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe;
        /**
         * Nested argument that specifies the OpenX SerDe. More details below.
         */
        openXJsonSerDe?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe {
        /**
         * A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see [Class DateTimeFormat](https://www.joda.org/joda-time/apidocs/org/joda/time/format/DateTimeFormat.html). You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
         */
        timestampFormats?: string[];
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe {
        /**
         * When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
         */
        caseInsensitive?: boolean;
        /**
         * A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to `{ ts = "timestamp" }` to map this key to a column named ts.
         */
        columnToJsonKeyMappings?: {[key: string]: string};
        /**
         * When set to `true`, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "aB" when using this option. Defaults to `false`.
         */
        convertDotsInJsonKeysToUnderscores?: boolean;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration {
        /**
         * Nested argument that specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. More details below.
         */
        serializer: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer {
        /**
         * Nested argument that specifies converting data to the ORC format before storing it in Amazon S3. For more information, see [Apache ORC](https://orc.apache.org/docs/). More details below.
         */
        orcSerDe?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe;
        /**
         * Nested argument that specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see [Apache Parquet](https://parquet.apache.org/documentation/latest/). More details below.
         */
        parquetSerDe?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe {
        /**
         * The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
         */
        blockSizeBytes?: number;
        /**
         * A list of column names for which you want Kinesis Data Firehose to create bloom filters.
         */
        bloomFilterColumns?: string[];
        /**
         * The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is `0.05`, the minimum is `0`, and the maximum is `1`.
         */
        bloomFilterFalsePositiveProbability?: number;
        /**
         * The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
         */
        compression?: string;
        /**
         * A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to `1`.
         */
        dictionaryKeyThreshold?: number;
        /**
         * Set this to `true` to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `false`.
         */
        enablePadding?: boolean;
        /**
         * The version of the file to write. The possible values are `V0_11` and `V0_12`. The default is `V0_12`.
         */
        formatVersion?: string;
        /**
         * A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is `0.05`, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when `enablePadding` is `false`.
         */
        paddingTolerance?: number;
        /**
         * The number of rows between index entries. The default is `10000` and the minimum is `1000`.
         */
        rowIndexStride?: number;
        /**
         * The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
         */
        stripeSizeBytes?: number;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe {
        /**
         * The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
         */
        blockSizeBytes?: number;
        /**
         * The compression code to use over data blocks. The possible values are `UNCOMPRESSED`, `SNAPPY`, and `GZIP`, with the default being `SNAPPY`. Use `SNAPPY` for higher decompression speed. Use `GZIP` if the compression ratio is more important than speed.
         */
        compression?: string;
        /**
         * Indicates whether to enable dictionary compression.
         */
        enableDictionaryCompression?: boolean;
        /**
         * The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is `0`.
         */
        maxPaddingBytes?: number;
        /**
         * The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
         */
        pageSizeBytes?: number;
        /**
         * Indicates the version of row format to output. The possible values are `V1` and `V2`. The default is `V1`.
         */
        writerVersion?: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration {
        /**
         * The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
         */
        catalogId: string;
        /**
         * Specifies the name of the AWS Glue database that contains the schema for the output data.
         */
        databaseName: string;
        /**
         * If you don't specify an AWS Region, the default is the current region.
         */
        region: string;
        /**
         * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
         */
        roleArn: string;
        /**
         * Specifies the AWS Glue table that contains the column information that constitutes your data schema.
         */
        tableName: string;
        /**
         * Specifies the table version for the output data schema. Defaults to `LATEST`.
         */
        versionId?: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfiguration {
        /**
         * Enables or disables data processing.
         */
        enabled?: boolean;
        /**
         * Array of data processors. More details are given below
         */
        processors?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor[];
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessor {
        /**
         * Array of processor parameters. More details are given below
         */
        parameters?: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter[];
        /**
         * The type of processor. Valid Values: `Lambda`
         */
        type: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationProcessingConfigurationProcessorParameter {
        /**
         * Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
         */
        parameterName: string;
        /**
         * Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
         */
        parameterValue: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfiguration {
        /**
         * The ARN of the S3 bucket
         */
        bucketArn: string;
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
         */
        bufferInterval?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         * We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
         */
        bufferSize?: number;
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions;
        /**
         * The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
         */
        compressionFormat?: string;
        /**
         * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
         * be used.
         */
        kmsKeyArn?: string;
        /**
         * The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
         */
        prefix?: string;
        /**
         * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
         */
        roleArn: string;
    }

    export interface FirehoseDeliveryStreamExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfiguration {
        /**
         * The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
         */
        accessKey?: string;
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
         */
        bufferingInterval?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         */
        bufferingSize?: number;
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below.
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions;
        /**
         * The HTTP endpoint name.
         */
        name?: string;
        /**
         * The data processing configuration.  More details are given below.
         */
        processingConfiguration?: outputs.kinesis.FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration;
        /**
         * The request configuration.  More details are given below.
         */
        requestConfiguration: outputs.kinesis.FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration;
        /**
         * Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between `0` and `7200`. Default is `300`.
         */
        retryDuration?: number;
        /**
         * Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be `arn:.*`.
         */
        roleArn?: string;
        /**
         * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
         */
        s3BackupMode?: string;
        /**
         * The HTTP endpoint URL to which Kinesis Firehose sends your data.
         */
        url: string;
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfiguration {
        /**
         * Enables or disables data processing.
         */
        enabled?: boolean;
        /**
         * Array of data processors. More details are given below
         */
        processors?: outputs.kinesis.FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor[];
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessor {
        /**
         * Array of processor parameters. More details are given below
         */
        parameters?: outputs.kinesis.FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter[];
        /**
         * The type of processor. Valid Values: `Lambda`
         */
        type: string;
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfigurationProcessingConfigurationProcessorParameter {
        /**
         * Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
         */
        parameterName: string;
        /**
         * Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
         */
        parameterValue: string;
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfiguration {
        /**
         * Describes the metadata sent to the HTTP endpoint destination. More details are given below
         */
        commonAttributes?: outputs.kinesis.FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute[];
        /**
         * Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are `NONE` and `GZIP`.  Default value is `NONE`.
         */
        contentEncoding?: string;
    }

    export interface FirehoseDeliveryStreamHttpEndpointConfigurationRequestConfigurationCommonAttribute {
        /**
         * The name of the HTTP endpoint common attribute.
         */
        name: string;
        /**
         * The value of the HTTP endpoint common attribute.
         */
        value: string;
    }

    export interface FirehoseDeliveryStreamKinesisSourceConfiguration {
        /**
         * The kinesis stream used as the source of the firehose delivery stream.
         */
        kinesisStreamArn: string;
        /**
         * The ARN of the role that provides access to the source Kinesis stream.
         */
        roleArn: string;
    }

    export interface FirehoseDeliveryStreamRedshiftConfiguration {
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions;
        /**
         * The jdbcurl of the redshift cluster.
         */
        clusterJdbcurl: string;
        /**
         * Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the [AWS documentation](http://docs.aws.amazon.com/firehose/latest/APIReference/API_CopyCommand.html)
         */
        copyOptions?: string;
        /**
         * The data table columns that will be targeted by the copy command.
         */
        dataTableColumns?: string;
        /**
         * The name of the table in the redshift cluster that the s3 bucket will copy to.
         */
        dataTableName: string;
        /**
         * The password for the username above.
         */
        password: string;
        /**
         * The data processing configuration.  More details are given below.
         */
        processingConfiguration?: outputs.kinesis.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration;
        /**
         * The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
         */
        retryDuration?: number;
        /**
         * The arn of the role the stream assumes.
         */
        roleArn: string;
        /**
         * The configuration for backup in Amazon S3. Required if `s3BackupMode` is `Enabled`. Supports the same fields as `s3Configuration` object.
         */
        s3BackupConfiguration?: outputs.kinesis.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration;
        /**
         * The Amazon S3 backup mode.  Valid values are `Disabled` and `Enabled`.  Default value is `Disabled`.
         */
        s3BackupMode?: string;
        /**
         * The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions.
         */
        username: string;
    }

    export interface FirehoseDeliveryStreamRedshiftConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamRedshiftConfigurationProcessingConfiguration {
        /**
         * Enables or disables data processing.
         */
        enabled?: boolean;
        /**
         * Array of data processors. More details are given below
         */
        processors?: outputs.kinesis.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor[];
    }

    export interface FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessor {
        /**
         * Array of processor parameters. More details are given below
         */
        parameters?: outputs.kinesis.FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter[];
        /**
         * The type of processor. Valid Values: `Lambda`
         */
        type: string;
    }

    export interface FirehoseDeliveryStreamRedshiftConfigurationProcessingConfigurationProcessorParameter {
        /**
         * Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
         */
        parameterName: string;
        /**
         * Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
         */
        parameterValue: string;
    }

    export interface FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfiguration {
        /**
         * The ARN of the S3 bucket
         */
        bucketArn: string;
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
         */
        bufferInterval?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         * We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
         */
        bufferSize?: number;
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions;
        /**
         * The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
         */
        compressionFormat?: string;
        /**
         * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
         * be used.
         */
        kmsKeyArn?: string;
        /**
         * The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
         */
        prefix?: string;
        /**
         * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
         */
        roleArn: string;
    }

    export interface FirehoseDeliveryStreamRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamS3Configuration {
        /**
         * The ARN of the S3 bucket
         */
        bucketArn: string;
        /**
         * Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
         */
        bufferInterval?: number;
        /**
         * Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
         * We recommend setting SizeInMBs to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec set SizeInMBs to be 10 MB or higher.
         */
        bufferSize?: number;
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions;
        /**
         * The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP & Snappy. If the destination is redshift you cannot use ZIP or Snappy.
         */
        compressionFormat?: string;
        /**
         * Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
         * be used.
         */
        kmsKeyArn?: string;
        /**
         * The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
         */
        prefix?: string;
        /**
         * The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
         */
        roleArn: string;
    }

    export interface FirehoseDeliveryStreamS3ConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamServerSideEncryption {
        /**
         * Whether to enable encryption at rest. Default is `false`.
         */
        enabled?: boolean;
        /**
         * Amazon Resource Name (ARN) of the encryption key. Required when `keyType` is `CUSTOMER_MANAGED_CMK`.
         */
        keyArn?: string;
        /**
         * Type of encryption key. Default is `AWS_OWNED_CMK`. Valid values are `AWS_OWNED_CMK` and `CUSTOMER_MANAGED_CMK`
         */
        keyType?: string;
    }

    export interface FirehoseDeliveryStreamSplunkConfiguration {
        /**
         * The CloudWatch Logging Options for the delivery stream. More details are given below.
         */
        cloudwatchLoggingOptions: outputs.kinesis.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions;
        /**
         * The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
         */
        hecAcknowledgmentTimeout?: number;
        /**
         * The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
         */
        hecEndpoint: string;
        /**
         * The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
         */
        hecEndpointType?: string;
        /**
         * The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
         */
        hecToken: string;
        /**
         * The data processing configuration.  More details are given below.
         */
        processingConfiguration?: outputs.kinesis.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration;
        /**
         * After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
         */
        retryDuration?: number;
        /**
         * Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
         */
        s3BackupMode?: string;
    }

    export interface FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions {
        /**
         * Enables or disables the logging. Defaults to `false`.
         */
        enabled?: boolean;
        /**
         * The CloudWatch group name for logging. This value is required if `enabled` is true.
         */
        logGroupName?: string;
        /**
         * The CloudWatch log stream name for logging. This value is required if `enabled` is true.
         */
        logStreamName?: string;
    }

    export interface FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration {
        /**
         * Enables or disables data processing.
         */
        enabled?: boolean;
        /**
         * Array of data processors. More details are given below
         */
        processors?: outputs.kinesis.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor[];
    }

    export interface FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessor {
        /**
         * Array of processor parameters. More details are given below
         */
        parameters?: outputs.kinesis.FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter[];
        /**
         * The type of processor. Valid Values: `Lambda`
         */
        type: string;
    }

    export interface FirehoseDeliveryStreamSplunkConfigurationProcessingConfigurationProcessorParameter {
        /**
         * Parameter name. Valid Values: `LambdaArn`, `NumberOfRetries`, `RoleArn`, `BufferSizeInMBs`, `BufferIntervalInSeconds`
         */
        parameterName: string;
        /**
         * Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
         */
        parameterValue: string;
    }
}

export namespace kinesisanalyticsv2 {
    export interface ApplicationApplicationConfiguration {
        /**
         * The code location and type parameters for the application.
         */
        applicationCodeConfiguration: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationCodeConfiguration;
        /**
         * Describes whether snapshots are enabled for a Flink-based application.
         */
        applicationSnapshotConfiguration: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationSnapshotConfiguration;
        /**
         * Describes execution properties for a Flink-based application.
         */
        environmentProperties?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationEnvironmentProperties;
        /**
         * The configuration of a Flink-based application.
         */
        flinkApplicationConfiguration: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfiguration;
        /**
         * The configuration of a SQL-based application.
         */
        sqlApplicationConfiguration?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfiguration;
        /**
         * The VPC configuration of a Flink-based application.
         */
        vpcConfiguration?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationVpcConfiguration;
    }

    export interface ApplicationApplicationConfigurationApplicationCodeConfiguration {
        /**
         * The location and type of the application code.
         */
        codeContent?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContent;
        /**
         * Specifies whether the code content is in text or zip format. Valid values: `PLAINTEXT`, `ZIPFILE`.
         */
        codeContentType: string;
    }

    export interface ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContent {
        /**
         * Information about the Amazon S3 bucket containing the application code.
         */
        s3ContentLocation?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocation;
        /**
         * The text-format code for the application.
         */
        textContent?: string;
    }

    export interface ApplicationApplicationConfigurationApplicationCodeConfigurationCodeContentS3ContentLocation {
        /**
         * The ARN for the S3 bucket containing the application code.
         */
        bucketArn: string;
        /**
         * The file key for the object containing the application code.
         */
        fileKey: string;
        /**
         * The version of the object containing the application code.
         */
        objectVersion?: string;
    }

    export interface ApplicationApplicationConfigurationApplicationSnapshotConfiguration {
        /**
         * Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.
         */
        snapshotsEnabled: boolean;
    }

    export interface ApplicationApplicationConfigurationEnvironmentProperties {
        /**
         * Describes the execution property groups.
         */
        propertyGroups: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroup[];
    }

    export interface ApplicationApplicationConfigurationEnvironmentPropertiesPropertyGroup {
        /**
         * The key of the application execution property key-value map.
         */
        propertyGroupId: string;
        /**
         * Application execution property key-value map.
         */
        propertyMap: {[key: string]: string};
    }

    export interface ApplicationApplicationConfigurationFlinkApplicationConfiguration {
        /**
         * Describes an application's checkpointing configuration.
         */
        checkpointConfiguration: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration;
        /**
         * Describes configuration parameters for CloudWatch logging for an application.
         */
        monitoringConfiguration: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration;
        /**
         * Describes parameters for how an application executes multiple tasks simultaneously.
         */
        parallelismConfiguration: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfiguration;
    }

    export interface ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration {
        /**
         * Describes the interval in milliseconds between checkpoint operations.
         */
        checkpointInterval: number;
        /**
         * Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
         */
        checkpointingEnabled: boolean;
        /**
         * Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `checkpointingEnabled`, `checkpointInterval`, or `minPauseBetweenCheckpoints` attribute values to be effective. If this attribute is set to `DEFAULT`, the application will always use the following values:
         * * `checkpointingEnabled = true`
         * * `checkpointInterval = 60000`
         * * `minPauseBetweenCheckpoints = 5000`
         */
        configurationType: string;
        /**
         * Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
         */
        minPauseBetweenCheckpoints: number;
    }

    export interface ApplicationApplicationConfigurationFlinkApplicationConfigurationMonitoringConfiguration {
        /**
         * Describes whether to use the default CloudWatch logging configuration for an application. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `logLevel` or `metricsLevel` attribute values to be effective.
         */
        configurationType: string;
        /**
         * Describes the verbosity of the CloudWatch Logs for an application. Valid values: `DEBUG`, `ERROR`, `INFO`, `WARN`.
         */
        logLevel: string;
        /**
         * Describes the granularity of the CloudWatch Logs for an application. Valid values: `APPLICATION`, `OPERATOR`, `PARALLELISM`, `TASK`.
         */
        metricsLevel: string;
    }

    export interface ApplicationApplicationConfigurationFlinkApplicationConfigurationParallelismConfiguration {
        /**
         * Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.
         */
        autoScalingEnabled: boolean;
        /**
         * Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `autoScalingEnabled`, `parallelism`, or `parallelismPerKpu` attribute values to be effective.
         */
        configurationType: string;
        /**
         * Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform.
         */
        parallelism: number;
        /**
         * Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.
         */
        parallelismPerKpu: number;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfiguration {
        /**
         * The input stream used by the application.
         */
        input?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInput;
        /**
         * The destination streams used by the application.
         */
        outputs?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutput[];
        /**
         * The reference data source used by the application.
         */
        referenceDataSource?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSource;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInput {
        inAppStreamNames: string[];
        inputId: string;
        /**
         * Describes the number of in-application streams to create.
         */
        inputParallelism: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism;
        /**
         * The input processing configuration for the input.
         * An input processor transforms records as they are received from the stream, before the application's SQL code executes.
         */
        inputProcessingConfiguration?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration;
        /**
         * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created.
         */
        inputSchema: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema;
        inputStartingPositionConfigurations: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration[];
        /**
         * If the streaming source is a [Kinesis Data Firehose delivery stream](https://www.terraform.io/docs/providers/aws/r/kinesis_firehose_delivery_stream.html), identifies the delivery stream's ARN.
         */
        kinesisFirehoseInput?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput;
        /**
         * If the streaming source is a [Kinesis data stream](https://www.terraform.io/docs/providers/aws/r/kinesis_stream.html), identifies the stream's Amazon Resource Name (ARN).
         */
        kinesisStreamsInput?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput;
        /**
         * The name prefix to use when creating an in-application stream.
         */
        namePrefix: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputParallelism {
        /**
         * The number of in-application streams to create.
         */
        count: number;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfiguration {
        /**
         * Describes the [Lambda function](https://www.terraform.io/docs/providers/aws/r/lambda_function.html) that is used to preprocess the records in the stream before being processed by your application code.
         */
        inputLambdaProcessor: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessor;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputProcessingConfigurationInputLambdaProcessor {
        /**
         * The ARN of the Lambda function that operates on records in the stream.
         */
        resourceArn: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchema {
        /**
         * Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
         */
        recordColumns: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumn[];
        /**
         * Specifies the encoding of the records in the streaming source. For example, `UTF-8`.
         */
        recordEncoding?: string;
        /**
         * Specifies the format of the records on the streaming source.
         */
        recordFormat: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormat;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordColumn {
        /**
         * A reference to the data element in the streaming input or the reference data source.
         */
        mapping?: string;
        /**
         * The name of the column that is created in the in-application input stream or reference table.
         */
        name: string;
        /**
         * The type of column created in the in-application input stream or reference table.
         */
        sqlType: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormat {
        /**
         * Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
         */
        mappingParameters: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParameters;
        /**
         * The type of record format. Valid values: `CSV`, `JSON`.
         */
        recordFormatType: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParameters {
        /**
         * Provides additional mapping information when the record format uses delimiters (for example, CSV).
         */
        csvMappingParameters?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParameters;
        /**
         * Provides additional mapping information when JSON is the record format on the streaming source.
         */
        jsonMappingParameters?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParameters;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersCsvMappingParameters {
        /**
         * The column delimiter. For example, in a CSV format, a comma (`,`) is the typical column delimiter.
         */
        recordColumnDelimiter: string;
        /**
         * The row delimiter. For example, in a CSV format, `\n` is the typical row delimiter.
         */
        recordRowDelimiter: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputSchemaRecordFormatMappingParametersJsonMappingParameters {
        /**
         * The path to the top-level parent that contains the records.
         */
        recordRowPath: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputInputStartingPositionConfiguration {
        inputStartingPosition: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisFirehoseInput {
        /**
         * The ARN of the delivery stream.
         */
        resourceArn: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationInputKinesisStreamsInput {
        /**
         * The ARN of the input Kinesis data stream to read.
         */
        resourceArn: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutput {
        /**
         * Describes the data format when records are written to the destination.
         */
        destinationSchema: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchema;
        /**
         * Identifies a [Kinesis Data Firehose delivery stream](https://www.terraform.io/docs/providers/aws/r/kinesis_firehose_delivery_stream.html) as the destination.
         */
        kinesisFirehoseOutput?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutput;
        /**
         * Identifies a [Kinesis data stream](https://www.terraform.io/docs/providers/aws/r/kinesis_stream.html) as the destination.
         */
        kinesisStreamsOutput?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutput;
        /**
         * Identifies a [Lambda function](https://www.terraform.io/docs/providers/aws/r/lambda_function.html) as the destination.
         */
        lambdaOutput?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutput;
        /**
         * The name of the in-application stream.
         */
        name: string;
        outputId: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputDestinationSchema {
        /**
         * Specifies the format of the records on the output stream. Valid values: `CSV`, `JSON`.
         */
        recordFormatType: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisFirehoseOutput {
        /**
         * The ARN of the destination delivery stream to write to.
         */
        resourceArn: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputKinesisStreamsOutput {
        /**
         * The ARN of the destination Kinesis data stream to write to.
         */
        resourceArn: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationOutputLambdaOutput {
        /**
         * The ARN of the destination Lambda function to write to.
         */
        resourceArn: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSource {
        referenceId: string;
        /**
         * Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.
         */
        referenceSchema: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchema;
        /**
         * Identifies the S3 bucket and object that contains the reference data.
         */
        s3ReferenceDataSource: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSource;
        /**
         * The name of the in-application table to create.
         */
        tableName: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchema {
        /**
         * Describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.
         */
        recordColumns: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumn[];
        /**
         * Specifies the encoding of the records in the streaming source. For example, `UTF-8`.
         */
        recordEncoding?: string;
        /**
         * Specifies the format of the records on the streaming source.
         */
        recordFormat: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormat;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordColumn {
        /**
         * A reference to the data element in the streaming input or the reference data source.
         */
        mapping?: string;
        /**
         * The name of the column that is created in the in-application input stream or reference table.
         */
        name: string;
        /**
         * The type of column created in the in-application input stream or reference table.
         */
        sqlType: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormat {
        /**
         * Provides additional mapping information specific to the record format (such as JSON, CSV, or record fields delimited by some delimiter) on the streaming source.
         */
        mappingParameters: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParameters;
        /**
         * The type of record format. Valid values: `CSV`, `JSON`.
         */
        recordFormatType: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParameters {
        /**
         * Provides additional mapping information when the record format uses delimiters (for example, CSV).
         */
        csvMappingParameters?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParameters;
        /**
         * Provides additional mapping information when JSON is the record format on the streaming source.
         */
        jsonMappingParameters?: outputs.kinesisanalyticsv2.ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParameters;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersCsvMappingParameters {
        /**
         * The column delimiter. For example, in a CSV format, a comma (`,`) is the typical column delimiter.
         */
        recordColumnDelimiter: string;
        /**
         * The row delimiter. For example, in a CSV format, `\n` is the typical row delimiter.
         */
        recordRowDelimiter: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceReferenceSchemaRecordFormatMappingParametersJsonMappingParameters {
        /**
         * The path to the top-level parent that contains the records.
         */
        recordRowPath: string;
    }

    export interface ApplicationApplicationConfigurationSqlApplicationConfigurationReferenceDataSourceS3ReferenceDataSource {
        /**
         * The ARN for the S3 bucket containing the application code.
         */
        bucketArn: string;
        /**
         * The file key for the object containing the application code.
         */
        fileKey: string;
    }

    export interface ApplicationApplicationConfigurationVpcConfiguration {
        /**
         * The [Security Group](https://www.terraform.io/docs/providers/aws/r/security_group.html) IDs used by the VPC configuration.
         */
        securityGroupIds: string[];
        /**
         * The [Subnet](https://www.terraform.io/docs/providers/aws/r/subnet.html) IDs used by the VPC configuration.
         */
        subnetIds: string[];
        vpcConfigurationId: string;
        vpcId: string;
    }

    export interface ApplicationCloudwatchLoggingOptions {
        cloudwatchLoggingOptionId: string;
        /**
         * The ARN of the CloudWatch log stream to receive application messages.
         */
        logStreamArn: string;
    }
}

export namespace kms {
    export interface GetSecretSecret {
        context?: {[key: string]: string};
        grantTokens?: string[];
        name: string;
        payload: string;
    }

    export interface GetSecretsSecret {
        /**
         * An optional mapping that makes up the Encryption Context for the secret.
         */
        context?: {[key: string]: string};
        /**
         * An optional list of Grant Tokens for the secret.
         */
        grantTokens?: string[];
        /**
         * The name to export this secret under in the attributes.
         */
        name: string;
        /**
         * Base64 encoded payload, as returned from a KMS encrypt operation.
         */
        payload: string;
    }

    export interface GrantConstraint {
        /**
         * A list of key-value pairs that must match the encryption context in subsequent cryptographic operation requests. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint. Conflicts with `encryptionContextSubset`.
         */
        encryptionContextEquals?: {[key: string]: string};
        /**
         * A list of key-value pairs that must be included in the encryption context of subsequent cryptographic operation requests. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs. Conflicts with `encryptionContextEquals`.
         */
        encryptionContextSubset?: {[key: string]: string};
    }
}

export namespace lambda {
    export interface AliasRoutingConfig {
        /**
         * A map that defines the proportion of events that should be sent to different versions of a lambda function.
         */
        additionalVersionWeights?: {[key: string]: number};
    }

    export interface CodeSigningConfigAllowedPublishers {
        /**
         * The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
         */
        signingProfileVersionArns: string[];
    }

    export interface CodeSigningConfigPolicies {
        /**
         * Code signing configuration policy for deployment validation failure. If you set the policy to Enforce, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to Warn, Lambda allows the deployment and creates a CloudWatch log. Valid values: `Warn`, `Enforce`. Default value: `Warn`.
         */
        untrustedArtifactOnDeployment: string;
    }

    export interface EventSourceMappingDestinationConfig {
        /**
         * The destination configuration for failed invocations. Detailed below.
         */
        onFailure?: outputs.lambda.EventSourceMappingDestinationConfigOnFailure;
    }

    export interface EventSourceMappingDestinationConfigOnFailure {
        /**
         * The Amazon Resource Name (ARN) of the destination resource.
         */
        destinationArn: string;
    }

    export interface FunctionDeadLetterConfig {
        /**
         * The ARN of an SNS topic or SQS queue to notify when an invocation fails. If this
         * option is used, the function's IAM role must be granted suitable access to write to the target object,
         * which means allowing either the `sns:Publish` or `sqs:SendMessage` action on this ARN, depending on
         * which service is targeted.
         */
        targetArn: string;
    }

    export interface FunctionEnvironment {
        /**
         * A map that defines environment variables for the Lambda function.
         */
        variables?: {[key: string]: string};
    }

    export interface FunctionEventInvokeConfigDestinationConfig {
        /**
         * Configuration block with destination configuration for failed asynchronous invocations. See below for details.
         */
        onFailure?: outputs.lambda.FunctionEventInvokeConfigDestinationConfigOnFailure;
        /**
         * Configuration block with destination configuration for successful asynchronous invocations. See below for details.
         */
        onSuccess?: outputs.lambda.FunctionEventInvokeConfigDestinationConfigOnSuccess;
    }

    export interface FunctionEventInvokeConfigDestinationConfigOnFailure {
        /**
         * Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
         */
        destination: string;
    }

    export interface FunctionEventInvokeConfigDestinationConfigOnSuccess {
        /**
         * Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.
         */
        destination: string;
    }

    export interface FunctionFileSystemConfig {
        /**
         * The Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
         */
        arn: string;
        /**
         * The path where the function can access the file system, starting with /mnt/.
         */
        localMountPath: string;
    }

    export interface FunctionImageConfig {
        /**
         * The CMD for the docker image.
         */
        commands?: string[];
        /**
         * The ENTRYPOINT for the docker image.
         */
        entryPoints?: string[];
        /**
         * The working directory for the docker image.
         */
        workingDirectory?: string;
    }

    export interface FunctionTracingConfig {
        /**
         * Can be either `PassThrough` or `Active`. If PassThrough, Lambda will only trace
         * the request from an upstream service if it contains a tracing header with
         * "sampled=1". If Active, Lambda will respect any tracing header it receives
         * from an upstream service. If no tracing header is received, Lambda will call
         * X-Ray for a tracing decision.
         */
        mode: string;
    }

    export interface FunctionVpcConfig {
        /**
         * A list of security group IDs associated with the Lambda function.
         */
        securityGroupIds: string[];
        /**
         * A list of subnet IDs associated with the Lambda function.
         */
        subnetIds: string[];
        vpcId: string;
    }

    export interface GetCodeSigningConfigAllowedPublisher {
        /**
         * The Amazon Resource Name (ARN) for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.
         */
        signingProfileVersionArns: string[];
    }

    export interface GetCodeSigningConfigPolicy {
        /**
         * Code signing configuration policy for deployment validation failure.
         */
        untrustedArtifactOnDeployment: string;
    }

    export interface GetFunctionDeadLetterConfig {
        targetArn: string;
    }

    export interface GetFunctionEnvironment {
        variables: {[key: string]: string};
    }

    export interface GetFunctionFileSystemConfig {
        /**
         * Unqualified (no `:QUALIFIER` or `:VERSION` suffix) Amazon Resource Name (ARN) identifying your Lambda Function. See also `qualifiedArn`.
         */
        arn: string;
        localMountPath: string;
    }

    export interface GetFunctionTracingConfig {
        mode: string;
    }

    export interface GetFunctionVpcConfig {
        securityGroupIds: string[];
        subnetIds: string[];
        vpcId: string;
    }
}

export namespace lb {
    export interface GetListenerDefaultAction {
        authenticateCognitos: outputs.lb.GetListenerDefaultActionAuthenticateCognito[];
        authenticateOidcs: outputs.lb.GetListenerDefaultActionAuthenticateOidc[];
        fixedResponses: outputs.lb.GetListenerDefaultActionFixedResponse[];
        order: number;
        redirects: outputs.lb.GetListenerDefaultActionRedirect[];
        targetGroupArn: string;
        type: string;
    }

    export interface GetListenerDefaultActionAuthenticateCognito {
        authenticationRequestExtraParams: {[key: string]: string};
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        userPoolArn: string;
        userPoolClientId: string;
        userPoolDomain: string;
    }

    export interface GetListenerDefaultActionAuthenticateOidc {
        authenticationRequestExtraParams: {[key: string]: string};
        authorizationEndpoint: string;
        clientId: string;
        clientSecret: string;
        issuer: string;
        onUnauthenticatedRequest: string;
        scope: string;
        sessionCookieName: string;
        sessionTimeout: number;
        tokenEndpoint: string;
        userInfoEndpoint: string;
    }

    export interface GetListenerDefaultActionFixedResponse {
        contentType: string;
        messageBody: string;
        statusCode: string;
    }

    export interface GetListenerDefaultActionRedirect {
        host: string;
        path: string;
        /**
         * The port of the listener. Required if `arn` is not set.
         */
        port: string;
        protocol: string;
        query: string;
        statusCode: string;
    }

    export interface GetLoadBalancerAccessLogs {
        bucket: string;
        enabled: boolean;
        prefix: string;
    }

    export interface GetLoadBalancerSubnetMapping {
        allocationId: string;
        outpostId: string;
        privateIpv4Address: string;
        subnetId: string;
    }

    export interface GetTargetGroupHealthCheck {
        enabled: boolean;
        healthyThreshold: number;
        interval: number;
        matcher: string;
        path: string;
        port: string;
        protocol: string;
        timeout: number;
        unhealthyThreshold: number;
    }

    export interface GetTargetGroupStickiness {
        cookieDuration: number;
        enabled: boolean;
        type: string;
    }

    export interface ListenerDefaultAction {
        authenticateCognito?: outputs.lb.ListenerDefaultActionAuthenticateCognito;
        authenticateOidc?: outputs.lb.ListenerDefaultActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.lb.ListenerDefaultActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.lb.ListenerDefaultActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.lb.ListenerDefaultActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerDefaultActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerDefaultActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerDefaultActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerDefaultActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.lb.ListenerDefaultActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.lb.ListenerDefaultActionForwardTargetGroup[];
    }

    export interface ListenerDefaultActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerDefaultActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerDefaultActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleAction {
        /**
         * Information for creating an authenticate action using Cognito. Required if `type` is `authenticate-cognito`.
         */
        authenticateCognito?: outputs.lb.ListenerRuleActionAuthenticateCognito;
        /**
         * Information for creating an authenticate action using OIDC. Required if `type` is `authenticate-oidc`.
         */
        authenticateOidc?: outputs.lb.ListenerRuleActionAuthenticateOidc;
        /**
         * Information for creating an action that returns a custom HTTP response. Required if `type` is `fixed-response`.
         */
        fixedResponse?: outputs.lb.ListenerRuleActionFixedResponse;
        /**
         * Information for creating an action that distributes requests among one or more target groups. Specify only if `type` is `forward`. If you specify both `forward` block and `targetGroupArn` attribute, you can specify only one target group using `forward` and it must be the same target group specified in `targetGroupArn`.
         */
        forward?: outputs.lb.ListenerRuleActionForward;
        order: number;
        /**
         * Information for creating a redirect action. Required if `type` is `redirect`.
         */
        redirect?: outputs.lb.ListenerRuleActionRedirect;
        /**
         * The ARN of the Target Group to which to route traffic. Specify only if `type` is `forward` and you want to route to a single target group. To route to one or more target groups, use a `forward` block instead.
         */
        targetGroupArn?: string;
        /**
         * The type of routing action. Valid values are `forward`, `redirect`, `fixed-response`, `authenticate-cognito` and `authenticate-oidc`.
         */
        type: string;
    }

    export interface ListenerRuleActionAuthenticateCognito {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The ARN of the Cognito user pool.
         */
        userPoolArn: string;
        /**
         * The ID of the Cognito user pool client.
         */
        userPoolClientId: string;
        /**
         * The domain prefix or fully-qualified domain name of the Cognito user pool.
         */
        userPoolDomain: string;
    }

    export interface ListenerRuleActionAuthenticateOidc {
        /**
         * The query parameters to include in the redirect request to the authorization endpoint. Max: 10.
         */
        authenticationRequestExtraParams?: {[key: string]: string};
        /**
         * The authorization endpoint of the IdP.
         */
        authorizationEndpoint: string;
        /**
         * The OAuth 2.0 client identifier.
         */
        clientId: string;
        /**
         * The OAuth 2.0 client secret.
         */
        clientSecret: string;
        /**
         * The OIDC issuer identifier of the IdP.
         */
        issuer: string;
        /**
         * The behavior if the user is not authenticated. Valid values: `deny`, `allow` and `authenticate`
         */
        onUnauthenticatedRequest: string;
        /**
         * The set of user claims to be requested from the IdP.
         */
        scope: string;
        /**
         * The name of the cookie used to maintain session information.
         */
        sessionCookieName: string;
        /**
         * The maximum duration of the authentication session, in seconds.
         */
        sessionTimeout: number;
        /**
         * The token endpoint of the IdP.
         */
        tokenEndpoint: string;
        /**
         * The user info endpoint of the IdP.
         */
        userInfoEndpoint: string;
    }

    export interface ListenerRuleActionFixedResponse {
        /**
         * The content type. Valid values are `text/plain`, `text/css`, `text/html`, `application/javascript` and `application/json`.
         */
        contentType: string;
        /**
         * The message body.
         */
        messageBody?: string;
        /**
         * The HTTP response code. Valid values are `2XX`, `4XX`, or `5XX`.
         */
        statusCode: string;
    }

    export interface ListenerRuleActionForward {
        /**
         * The target group stickiness for the rule.
         */
        stickiness?: outputs.lb.ListenerRuleActionForwardStickiness;
        /**
         * One or more target groups block.
         */
        targetGroups: outputs.lb.ListenerRuleActionForwardTargetGroup[];
    }

    export interface ListenerRuleActionForwardStickiness {
        /**
         * The time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
         */
        duration: number;
        /**
         * Indicates whether target group stickiness is enabled.
         */
        enabled?: boolean;
    }

    export interface ListenerRuleActionForwardTargetGroup {
        /**
         * The Amazon Resource Name (ARN) of the target group.
         */
        arn: string;
        /**
         * The weight. The range is 0 to 999.
         */
        weight?: number;
    }

    export interface ListenerRuleActionRedirect {
        /**
         * The hostname. This component is not percent-encoded. The hostname can contain `#{host}`. Defaults to `#{host}`.
         */
        host?: string;
        /**
         * The absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to `/#{path}`.
         */
        path?: string;
        /**
         * The port. Specify a value from `1` to `65535` or `#{port}`. Defaults to `#{port}`.
         */
        port?: string;
        /**
         * The protocol. Valid values are `HTTP`, `HTTPS`, or `#{protocol}`. Defaults to `#{protocol}`.
         */
        protocol?: string;
        /**
         * The query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to `#{query}`.
         */
        query?: string;
        /**
         * The HTTP redirect code. The redirect is either permanent (`HTTP_301`) or temporary (`HTTP_302`).
         */
        statusCode: string;
    }

    export interface ListenerRuleCondition {
        /**
         * Contains a single `values` item which is a list of host header patterns to match. The maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied.
         */
        hostHeader?: outputs.lb.ListenerRuleConditionHostHeader;
        /**
         * HTTP headers to match. HTTP Header block fields documented below.
         */
        httpHeader?: outputs.lb.ListenerRuleConditionHttpHeader;
        /**
         * Contains a single `values` item which is a list of HTTP request methods or verbs to match. Maximum size is 40 characters. Only allowed characters are A-Z, hyphen (-) and underscore (\_). Comparison is case sensitive. Wildcards are not supported. Only one needs to match for the condition to be satisfied. AWS recommends that GET and HEAD requests are routed in the same way because the response to a HEAD request may be cached.
         */
        httpRequestMethod?: outputs.lb.ListenerRuleConditionHttpRequestMethod;
        /**
         * Contains a single `values` item which is a list of path patterns to match against the request URL. Maximum size of each pattern is 128 characters. Comparison is case sensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). Only one pattern needs to match for the condition to be satisfied. Path pattern is compared only to the path of the URL, not to its query string. To compare against the query string, use a `queryString` condition.
         */
        pathPattern?: outputs.lb.ListenerRuleConditionPathPattern;
        /**
         * Query strings to match. Query String block fields documented below.
         */
        queryStrings?: outputs.lb.ListenerRuleConditionQueryString[];
        /**
         * Contains a single `values` item which is a list of source IP CIDR notations to match. You can use both IPv4 and IPv6 addresses. Wildcards are not supported. Condition is satisfied if the source IP address of the request matches one of the CIDR blocks. Condition is not satisfied by the addresses in the `X-Forwarded-For` header, use `httpHeader` condition instead.
         */
        sourceIp?: outputs.lb.ListenerRuleConditionSourceIp;
    }

    export interface ListenerRuleConditionHostHeader {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpHeader {
        /**
         * Name of HTTP header to search. The maximum size is 40 characters. Comparison is case insensitive. Only RFC7240 characters are supported. Wildcards are not supported. You cannot use HTTP header condition to specify the host header, use a `host-header` condition instead.
         */
        httpHeaderName: string;
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionHttpRequestMethod {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionPathPattern {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface ListenerRuleConditionQueryString {
        /**
         * Query string key pattern to match.
         */
        key?: string;
        /**
         * Query string value pattern to match.
         */
        value: string;
    }

    export interface ListenerRuleConditionSourceIp {
        /**
         * List of header value patterns to match. Maximum size of each pattern is 128 characters. Comparison is case insensitive. Wildcard characters supported: * (matches 0 or more characters) and ? (matches exactly 1 character). If the same header appears multiple times in the request they will be searched in order until a match is found. Only one pattern needs to match for the condition to be satisfied. To require that all of the strings are a match, create one condition block per string.
         */
        values: string[];
    }

    export interface LoadBalancerAccessLogs {
        /**
         * The S3 bucket name to store the logs in.
         */
        bucket: string;
        /**
         * Boolean to enable / disable `accessLogs`. Defaults to `false`, even when `bucket` is specified.
         */
        enabled?: boolean;
        /**
         * The S3 bucket prefix. Logs are stored in the root if not configured.
         */
        prefix?: string;
    }

    export interface LoadBalancerSubnetMapping {
        /**
         * The allocation ID of the Elastic IP address.
         */
        allocationId?: string;
        outpostId: string;
        /**
         * A private ipv4 address within the subnet to assign to the internal-facing load balancer.
         */
        privateIpv4Address?: string;
        /**
         * The id of the subnet of which to attach to the load balancer. You can specify only one subnet per Availability Zone.
         */
        subnetId: string;
    }

    export interface TargetGroupHealthCheck {
        /**
         * Boolean to enable / disable `stickiness`. Default is `true`
         */
        enabled?: boolean;
        /**
         * The number of consecutive health checks successes required before considering an unhealthy target healthy. Defaults to 3.
         */
        healthyThreshold?: number;
        /**
         * The approximate amount of time, in seconds, between health checks of an individual target. Minimum value 5 seconds, Maximum value 300 seconds. For `lambda` target groups, it needs to be greater as the `timeout` of the underlying `lambda`. Default 30 seconds.
         */
        interval?: number;
        /**
         * The HTTP codes to use when checking for a successful response from a target. You can specify multiple values (for example, "200,202") or a range of values (for example, "200-299"). Applies to Application Load Balancers only (HTTP/HTTPS), not Network Load Balancers (TCP).
         */
        matcher: string;
        /**
         * The destination for the health check request. Applies to only HTTP/HTTPS.
         */
        path: string;
        /**
         * The port on which targets receive traffic, unless overridden when registering a specific target. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        port?: string;
        /**
         * The protocol to use for routing traffic to the targets. Should be one of `GENEVE`, `HTTP`, `HTTPS`, `TCP`, `TCP_UDP`, `TLS`, or `UDP`. Required when `targetType` is `instance` or `ip`. Does not apply when `targetType` is `lambda`.
         */
        protocol?: string;
        /**
         * The amount of time, in seconds, during which no response means a failed health check. For Application Load Balancers, the range is 2 to 120 seconds, and the default is 5 seconds for the `instance` target type and 30 seconds for the `lambda` target type. For Network Load Balancers, you cannot set a custom value, and the default is 10 seconds for TCP and HTTPS health checks and 6 seconds for HTTP health checks.
         */
        timeout: number;
        /**
         * The number of consecutive health check failures required before considering the target unhealthy . For Network Load Balancers, this value must be the same as the `healthyThreshold`. Defaults to 3.
         */
        unhealthyThreshold?: number;
    }

    export interface TargetGroupStickiness {
        /**
         * Only used when the type is `lbCookie`. The time period, in seconds, during which requests from a client should be routed to the same target. After this time period expires, the load balancer-generated cookie is considered stale. The range is 1 second to 1 week (604800 seconds). The default value is 1 day (86400 seconds).
         */
        cookieDuration?: number;
        /**
         * Indicates whether  health checks are enabled. Defaults to true.
         */
        enabled?: boolean;
        /**
         * The type of sticky sessions. The only current possible values are `lbCookie` for ALBs and `sourceIp` for NLBs.
         */
        type: string;
    }
}

export namespace lex {
    export interface BotAbortStatement {
        /**
         * A set of messages, each of which provides a message string and its type. You
         * can specify the message string in plain text or in Speech Synthesis Markup Language (SSML). Attributes
         * are documented under message.
         */
        messages: outputs.lex.BotAbortStatementMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).
         */
        responseCard?: string;
    }

    export interface BotAbortStatementMessage {
        /**
         * The text of the message.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response.
         */
        groupNumber?: number;
    }

    export interface BotAliasConversationLogs {
        /**
         * The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
         */
        iamRoleArn: string;
        /**
         * The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
         */
        logSettings?: outputs.lex.BotAliasConversationLogsLogSetting[];
    }

    export interface BotAliasConversationLogsLogSetting {
        /**
         * The destination where logs are delivered. Options are `CLOUDWATCH_LOGS` or `S3`.
         */
        destination: string;
        /**
         * The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when `destination` is set to `S3`. Must be between 20 and 2048 characters in length.
         */
        kmsKeyArn?: string;
        /**
         * The type of logging that is enabled. Options are `AUDIO` or `TEXT`.
         */
        logType: string;
        /**
         * The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
         */
        resourceArn: string;
        /**
         * The prefix of the S3 object key for `AUDIO` logs or the log stream name for `TEXT` logs.
         */
        resourcePrefix: string;
    }

    export interface BotClarificationPrompt {
        /**
         * The number of times to prompt the user for information.
         */
        maxAttempts: number;
        /**
         * A set of messages, each of which provides a message string and its type. You
         * can specify the message string in plain text or in Speech Synthesis Markup Language (SSML). Attributes
         * are documented under message.
         */
        messages: outputs.lex.BotClarificationPromptMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html).
         */
        responseCard?: string;
    }

    export interface BotClarificationPromptMessage {
        /**
         * The text of the message.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response.
         */
        groupNumber?: number;
    }

    export interface BotIntent {
        /**
         * The name of the intent. Must be less than or equal to 100 characters in length.
         */
        intentName: string;
        /**
         * The version of the intent. Must be less than or equal to 64 characters in length.
         */
        intentVersion: string;
    }

    export interface GetSlotTypeEnumerationValue {
        synonyms: string[];
        value: string;
    }

    export interface IntentConclusionStatement {
        /**
         * A set of messages, each of which provides a message string and its type.
         * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
         * Attributes are documented under message. Must contain between 1 and 15 messages.
         */
        messages: outputs.lex.IntentConclusionStatementMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
    }

    export interface IntentConclusionStatementMessage {
        /**
         * The text of the message. Must be less than or equal to 1000 characters in length.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
         */
        groupNumber?: number;
    }

    export interface IntentConfirmationPrompt {
        /**
         * The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
         */
        maxAttempts: number;
        /**
         * A set of messages, each of which provides a message string and its type.
         * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
         * Attributes are documented under message. Must contain between 1 and 15 messages.
         */
        messages: outputs.lex.IntentConfirmationPromptMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
    }

    export interface IntentConfirmationPromptMessage {
        /**
         * The text of the message. Must be less than or equal to 1000 characters in length.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
         */
        groupNumber?: number;
    }

    export interface IntentDialogCodeHook {
        /**
         * The version of the request-response that you want Amazon Lex to use
         * to invoke your Lambda function. For more information, see
         * [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
         */
        messageVersion: string;
        /**
         * The Amazon Resource Name (ARN) of the Lambda function.
         */
        uri: string;
    }

    export interface IntentFollowUpPrompt {
        /**
         * Prompts for information from the user. Attributes are documented under prompt.
         */
        prompt: outputs.lex.IntentFollowUpPromptPrompt;
        /**
         * If the user answers "no" to the question defined in the prompt field,
         * Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
         * documented below under statement.
         */
        rejectionStatement: outputs.lex.IntentFollowUpPromptRejectionStatement;
    }

    export interface IntentFollowUpPromptPrompt {
        /**
         * The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
         */
        maxAttempts: number;
        /**
         * A set of messages, each of which provides a message string and its type.
         * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
         * Attributes are documented under message. Must contain between 1 and 15 messages.
         */
        messages: outputs.lex.IntentFollowUpPromptPromptMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
    }

    export interface IntentFollowUpPromptPromptMessage {
        /**
         * The text of the message. Must be less than or equal to 1000 characters in length.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
         */
        groupNumber?: number;
    }

    export interface IntentFollowUpPromptRejectionStatement {
        /**
         * A set of messages, each of which provides a message string and its type.
         * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
         * Attributes are documented under message. Must contain between 1 and 15 messages.
         */
        messages: outputs.lex.IntentFollowUpPromptRejectionStatementMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
    }

    export interface IntentFollowUpPromptRejectionStatementMessage {
        /**
         * The text of the message. Must be less than or equal to 1000 characters in length.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
         */
        groupNumber?: number;
    }

    export interface IntentFulfillmentActivity {
        /**
         * A description of the Lambda function that is run to fulfill the intent.
         * Required if type is CodeHook. Attributes are documented under code_hook.
         */
        codeHook?: outputs.lex.IntentFulfillmentActivityCodeHook;
        /**
         * How the intent should be fulfilled, either by running a Lambda function or by
         * returning the slot data to the client application.
         */
        type: string;
    }

    export interface IntentFulfillmentActivityCodeHook {
        /**
         * The version of the request-response that you want Amazon Lex to use
         * to invoke your Lambda function. For more information, see
         * [Using Lambda Functions](https://docs.aws.amazon.com/lex/latest/dg/using-lambda.html). Must be less than or equal to 5 characters in length.
         */
        messageVersion: string;
        /**
         * The Amazon Resource Name (ARN) of the Lambda function.
         */
        uri: string;
    }

    export interface IntentRejectionStatement {
        /**
         * A set of messages, each of which provides a message string and its type.
         * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
         * Attributes are documented under message. Must contain between 1 and 15 messages.
         */
        messages: outputs.lex.IntentRejectionStatementMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
    }

    export interface IntentRejectionStatementMessage {
        /**
         * The text of the message. Must be less than or equal to 1000 characters in length.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
         */
        groupNumber?: number;
    }

    export interface IntentSlot {
        /**
         * A description of the bot. Must be less than or equal to 200 characters in length.
         */
        description?: string;
        /**
         * The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
         */
        name: string;
        /**
         * Directs Lex the order in which to elicit this slot value from the user.
         * For example, if the intent has two slots with priorities 1 and 2, AWS Lex first elicits a value for
         * the slot with priority 1. If multiple slots share the same priority, the order in which Lex elicits
         * values is arbitrary. Must be between 1 and 100.
         */
        priority?: number;
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
        /**
         * If you know a specific pattern with which users might respond to
         * an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
         * is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
         */
        sampleUtterances?: string[];
        /**
         * Specifies whether the slot is required or optional.
         */
        slotConstraint: string;
        /**
         * The type of the slot, either a custom slot type that you defined or one of
         * the built-in slot types. Must be less than or equal to 100 characters in length.
         */
        slotType: string;
        /**
         * The version of the slot type. Must be less than or equal to 64 characters in length.
         */
        slotTypeVersion?: string;
        /**
         * The prompt that Amazon Lex uses to elicit the slot value
         * from the user. Attributes are documented under prompt.
         */
        valueElicitationPrompt?: outputs.lex.IntentSlotValueElicitationPrompt;
    }

    export interface IntentSlotValueElicitationPrompt {
        /**
         * The number of times to prompt the user for information. Must be a number between 1 and 5 (inclusive).
         */
        maxAttempts: number;
        /**
         * A set of messages, each of which provides a message string and its type.
         * You can specify the message string in plain text or in Speech Synthesis Markup Language (SSML).
         * Attributes are documented under message. Must contain between 1 and 15 messages.
         */
        messages: outputs.lex.IntentSlotValueElicitationPromptMessage[];
        /**
         * The response card. Amazon Lex will substitute session attributes and
         * slot values into the response card. For more information, see
         * [Example: Using a Response Card](https://docs.aws.amazon.com/lex/latest/dg/ex-resp-card.html). Must be less than or equal to 50000 characters in length.
         */
        responseCard?: string;
    }

    export interface IntentSlotValueElicitationPromptMessage {
        /**
         * The text of the message. Must be less than or equal to 1000 characters in length.
         */
        content: string;
        /**
         * The content type of the message string.
         */
        contentType: string;
        /**
         * Identifies the message group that the message belongs to. When a group
         * is assigned to a message, Amazon Lex returns one message from each group in the response. Must be a number between 1 and 5 (inclusive).
         */
        groupNumber?: number;
    }

    export interface SlotTypeEnumerationValue {
        /**
         * Additional values related to the slot type value. Each item must be less than or equal to 140 characters in length.
         */
        synonyms?: string[];
        /**
         * The value of the slot type. Must be less than or equal to 140 characters in length.
         */
        value: string;
    }
}

export namespace macie {
    export interface S3BucketAssociationClassificationType {
        /**
         * A string value indicating that Macie perform a one-time classification of all of the existing objects in the bucket.
         * The only valid value is the default value, `FULL`.
         */
        continuous?: string;
        /**
         * A string value indicating whether or not Macie performs a one-time classification of all of the existing objects in the bucket.
         * Valid values are `NONE` and `FULL`. Defaults to `NONE` indicating that Macie only classifies objects that are added after the association was created.
         */
        oneTime?: string;
    }
}

export namespace mediaconvert {
    export interface QueueReservationPlanSettings {
        /**
         * The length of the term of your reserved queue pricing plan commitment. Valid value is `ONE_YEAR`.
         */
        commitment: string;
        /**
         * Specifies whether the term of your reserved queue pricing plan. Valid values are `AUTO_RENEW` or `EXPIRE`.
         */
        renewalType: string;
        /**
         * Specifies the number of reserved transcode slots (RTS) for queue.
         */
        reservedSlots: number;
    }
}

export namespace mediapackage {
    export interface ChannelHlsIngest {
        /**
         * A list of the ingest endpoints
         */
        ingestEndpoints: outputs.mediapackage.ChannelHlsIngestIngestEndpoint[];
    }

    export interface ChannelHlsIngestIngestEndpoint {
        /**
         * The password
         */
        password: string;
        /**
         * The URL
         */
        url: string;
        /**
         * The username
         */
        username: string;
    }
}

export namespace mq {
    export interface BrokerConfiguration {
        /**
         * The Configuration ID.
         */
        id: string;
        /**
         * Revision of the Configuration.
         */
        revision: number;
    }

    export interface BrokerEncryptionOptions {
        /**
         * Amazon Resource Name (ARN) of Key Management Service (KMS) Customer Master Key (CMK) to use for encryption at rest. Requires setting `useAwsOwnedKey` to `false`. To perform drift detection when AWS managed CMKs or customer managed CMKs are in use, this value must be configured.
         */
        kmsKeyId: string;
        /**
         * Boolean to enable an AWS owned Key Management Service (KMS) Customer Master Key (CMK) that is not in your account. Defaults to `true`. Setting to `false` without configuring `kmsKeyId` will create an AWS managed Customer Master Key (CMK) aliased to `aws/mq` in your account.
         */
        useAwsOwnedKey?: boolean;
    }

    export interface BrokerInstance {
        consoleUrl: string;
        endpoints: string[];
        ipAddress: string;
    }

    export interface BrokerLogs {
        /**
         * Enables audit logging. User management action made using JMX or the ActiveMQ Web Console is logged. Defaults to `false`.
         */
        audit?: boolean;
        /**
         * Enables general logging via CloudWatch. Defaults to `false`.
         */
        general?: boolean;
    }

    export interface BrokerMaintenanceWindowStartTime {
        /**
         * The day of the week. e.g. `MONDAY`, `TUESDAY`, or `WEDNESDAY`
         */
        dayOfWeek: string;
        /**
         * The time, in 24-hour format. e.g. `02:00`
         */
        timeOfDay: string;
        /**
         * The time zone, UTC by default, in either the Country/City format, or the UTC offset format. e.g. `CET`
         */
        timeZone: string;
    }

    export interface BrokerUser {
        /**
         * Whether to enable access to the [ActiveMQ Web Console](http://activemq.apache.org/web-console.html) for the user.
         */
        consoleAccess?: boolean;
        /**
         * The list of groups (20 maximum) to which the ActiveMQ user belongs.
         */
        groups?: string[];
        /**
         * The password of the user. It must be 12 to 250 characters long, at least 4 unique characters, and must not contain commas.
         */
        password: string;
        /**
         * The username of the user.
         */
        username: string;
    }

    export interface GetBrokerConfiguration {
        id: string;
        revision: number;
    }

    export interface GetBrokerEncryptionOption {
        kmsKeyId: string;
        useAwsOwnedKey: boolean;
    }

    export interface GetBrokerInstance {
        consoleUrl: string;
        endpoints: string[];
        ipAddress: string;
    }

    export interface GetBrokerLogs {
        audit: boolean;
        general: boolean;
    }

    export interface GetBrokerMaintenanceWindowStartTime {
        dayOfWeek: string;
        timeOfDay: string;
        timeZone: string;
    }

    export interface GetBrokerUser {
        consoleAccess: boolean;
        groups: string[];
        username: string;
    }
}

export namespace msk {
    export interface ClusterBrokerNodeGroupInfo {
        /**
         * The distribution of broker nodes across availability zones ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-model-brokerazdistribution)). Currently the only valid value is `DEFAULT`.
         */
        azDistribution?: string;
        /**
         * A list of subnets to connect to in client VPC ([documentation](https://docs.aws.amazon.com/msk/1.0/apireference/clusters.html#clusters-prop-brokernodegroupinfo-clientsubnets)).
         */
        clientSubnets: string[];
        /**
         * The size in GiB of the EBS volume for the data drive on each broker node.
         */
        ebsVolumeSize: number;
        /**
         * Specify the instance type to use for the kafka brokers. e.g. kafka.m5.large. ([Pricing info](https://aws.amazon.com/msk/pricing/))
         */
        instanceType: string;
        /**
         * A list of the security groups to associate with the elastic network interfaces to control who can communicate with the cluster.
         */
        securityGroups: string[];
    }

    export interface ClusterClientAuthentication {
        /**
         * Configuration block for specifying SASL client authentication. See below.
         */
        sasl?: outputs.msk.ClusterClientAuthenticationSasl;
        /**
         * Configuration block for specifying TLS client authentication. See below.
         */
        tls?: outputs.msk.ClusterClientAuthenticationTls;
    }

    export interface ClusterClientAuthenticationSasl {
        /**
         * Enables SCRAM client authentication via AWS Secrets Manager. Defaults to `false`.
         */
        scram?: boolean;
    }

    export interface ClusterClientAuthenticationTls {
        /**
         * List of ACM Certificate Authority Amazon Resource Names (ARNs).
         */
        certificateAuthorityArns?: string[];
    }

    export interface ClusterConfigurationInfo {
        /**
         * Amazon Resource Name (ARN) of the MSK Configuration to use in the cluster.
         */
        arn: string;
        /**
         * Revision of the MSK Configuration to use in the cluster.
         */
        revision: number;
    }

    export interface ClusterEncryptionInfo {
        /**
         * You may specify a KMS key short ID or ARN (it will always output an ARN) to use for encrypting your data at rest.  If no key is specified, an AWS managed KMS ('aws/msk' managed service) key will be used for encrypting the data at rest.
         */
        encryptionAtRestKmsKeyArn: string;
        /**
         * Configuration block to specify encryption in transit. See below.
         */
        encryptionInTransit?: outputs.msk.ClusterEncryptionInfoEncryptionInTransit;
    }

    export interface ClusterEncryptionInfoEncryptionInTransit {
        /**
         * Encryption setting for data in transit between clients and brokers. Valid values: `TLS`, `TLS_PLAINTEXT`, and `PLAINTEXT`. Default value is `TLS`.
         */
        clientBroker?: string;
        /**
         * Whether data communication among broker nodes is encrypted. Default value: `true`.
         */
        inCluster?: boolean;
    }

    export interface ClusterLoggingInfo {
        /**
         * Configuration block for Broker Logs settings for logging info. See below.
         */
        brokerLogs: outputs.msk.ClusterLoggingInfoBrokerLogs;
    }

    export interface ClusterLoggingInfoBrokerLogs {
        cloudwatchLogs?: outputs.msk.ClusterLoggingInfoBrokerLogsCloudwatchLogs;
        firehose?: outputs.msk.ClusterLoggingInfoBrokerLogsFirehose;
        s3?: outputs.msk.ClusterLoggingInfoBrokerLogsS3;
    }

    export interface ClusterLoggingInfoBrokerLogsCloudwatchLogs {
        /**
         * Indicates whether you want to enable or disable streaming broker logs to Cloudwatch Logs.
         */
        enabled: boolean;
        /**
         * Name of the Cloudwatch Log Group to deliver logs to.
         */
        logGroup?: string;
    }

    export interface ClusterLoggingInfoBrokerLogsFirehose {
        /**
         * Name of the Kinesis Data Firehose delivery stream to deliver logs to.
         */
        deliveryStream?: string;
        /**
         * Indicates whether you want to enable or disable streaming broker logs to Cloudwatch Logs.
         */
        enabled: boolean;
    }

    export interface ClusterLoggingInfoBrokerLogsS3 {
        /**
         * Name of the S3 bucket to deliver logs to.
         */
        bucket?: string;
        /**
         * Indicates whether you want to enable or disable streaming broker logs to Cloudwatch Logs.
         */
        enabled: boolean;
        /**
         * Prefix to append to the folder name.
         */
        prefix?: string;
    }

    export interface ClusterOpenMonitoring {
        /**
         * Configuration block for Prometheus settings for open monitoring. See below.
         */
        prometheus: outputs.msk.ClusterOpenMonitoringPrometheus;
    }

    export interface ClusterOpenMonitoringPrometheus {
        /**
         * Configuration block for JMX Exporter. See below.
         */
        jmxExporter?: outputs.msk.ClusterOpenMonitoringPrometheusJmxExporter;
        /**
         * Configuration block for Node Exporter. See below.
         */
        nodeExporter?: outputs.msk.ClusterOpenMonitoringPrometheusNodeExporter;
    }

    export interface ClusterOpenMonitoringPrometheusJmxExporter {
        /**
         * Indicates whether you want to enable or disable the JMX Exporter.
         */
        enabledInBroker: boolean;
    }

    export interface ClusterOpenMonitoringPrometheusNodeExporter {
        /**
         * Indicates whether you want to enable or disable the JMX Exporter.
         */
        enabledInBroker: boolean;
    }
}

export namespace neptune {
    export interface ClusterParameterGroupParameter {
        /**
         * Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
         */
        applyMethod?: string;
        /**
         * The name of the neptune parameter.
         */
        name: string;
        /**
         * The value of the neptune parameter.
         */
        value: string;
    }

    export interface ParameterGroupParameter {
        /**
         * The apply method of the Neptune parameter. Valid values are `immediate` and `pending-reboot`. Defaults to `pending-reboot`.
         */
        applyMethod?: string;
        /**
         * The name of the Neptune parameter.
         */
        name: string;
        /**
         * The value of the Neptune parameter.
         */
        value: string;
    }
}

export namespace networkfirewall {
    export interface FirewallFirewallStatus {
        /**
         * Set of subnets configured for use by the firewall.
         */
        syncStates: outputs.networkfirewall.FirewallFirewallStatusSyncState[];
    }

    export interface FirewallFirewallStatusSyncState {
        /**
         * Nested list describing the attachment status of the firewall's association with a single VPC subnet.
         */
        attachments: outputs.networkfirewall.FirewallFirewallStatusSyncStateAttachment[];
        /**
         * The Availability Zone where the subnet is configured.
         */
        availabilityZone: string;
    }

    export interface FirewallFirewallStatusSyncStateAttachment {
        /**
         * The identifier of the firewall endpoint that AWS Network Firewall has instantiated in the subnet. You use this to identify the firewall endpoint in the VPC route tables, when you redirect the VPC traffic through the endpoint.
         */
        endpointId: string;
        /**
         * The unique identifier for the subnet.
         */
        subnetId: string;
    }

    export interface FirewallPolicyFirewallPolicy {
        /**
         * Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
         */
        statefulRuleGroupReferences?: outputs.networkfirewall.FirewallPolicyFirewallPolicyStatefulRuleGroupReference[];
        /**
         * Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy's `statelessDefaultActions`. See Stateless Custom Action below for details.
         */
        statelessCustomActions?: outputs.networkfirewall.FirewallPolicyFirewallPolicyStatelessCustomAction[];
        /**
         * Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
         * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
         */
        statelessDefaultActions: string[];
        /**
         * Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: `aws:drop`, `aws:pass`, or `aws:forward_to_sfe`.
         * In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify `aws:forward_to_sfe`.
         */
        statelessFragmentDefaultActions: string[];
        /**
         * Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
         */
        statelessRuleGroupReferences?: outputs.networkfirewall.FirewallPolicyFirewallPolicyStatelessRuleGroupReference[];
    }

    export interface FirewallPolicyFirewallPolicyStatefulRuleGroupReference {
        /**
         * The Amazon Resource Name (ARN) of the stateful rule group.
         */
        resourceArn: string;
    }

    export interface FirewallPolicyFirewallPolicyStatelessCustomAction {
        /**
         * A configuration block describing the custom action associated with the `actionName`. See Action Definition below for details.
         */
        actionDefinition: outputs.networkfirewall.FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinition;
        /**
         * A friendly name of the custom action.
         */
        actionName: string;
    }

    export interface FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinition {
        /**
         * A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
         */
        publishMetricAction: outputs.networkfirewall.FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction;
    }

    export interface FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction {
        /**
         * Set of configuration blocks describing dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for more details.
         */
        dimensions: outputs.networkfirewall.FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension[];
    }

    export interface FirewallPolicyFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension {
        /**
         * The string value to use in the custom metric dimension.
         */
        value: string;
    }

    export interface FirewallPolicyFirewallPolicyStatelessRuleGroupReference {
        /**
         * An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
         */
        priority: number;
        /**
         * The Amazon Resource Name (ARN) of the stateless rule group.
         */
        resourceArn: string;
    }

    export interface FirewallSubnetMapping {
        /**
         * The unique identifier for the subnet.
         */
        subnetId: string;
    }

    export interface LoggingConfigurationLoggingConfiguration {
        /**
         * Set of configuration blocks describing the logging details for a firewall. See Log Destination Config below for details. At most, only two blocks can be specified; one for `FLOW` logs and one for `ALERT` logs.
         */
        logDestinationConfigs: outputs.networkfirewall.LoggingConfigurationLoggingConfigurationLogDestinationConfig[];
    }

    export interface LoggingConfigurationLoggingConfigurationLogDestinationConfig {
        /**
         * A map describing the logging destination for the chosen `logDestinationType`.
         * * For an Amazon S3 bucket, specify the key `bucketName` with the name of the bucket and optionally specify the key `prefix` with a path.
         * * For a CloudWatch log group, specify the key `logGroup` with the name of the CloudWatch log group.
         * * For a Kinesis Data Firehose delivery stream, specify the key `deliveryStream` with the name of the delivery stream.
         */
        logDestination: {[key: string]: string};
        /**
         * The location to send logs to. Valid values: `S3`, `CloudWatchLogs`, `KinesisDataFirehose`.
         */
        logDestinationType: string;
        /**
         * The type of log to send. Valid values: `ALERT` or `FLOW`. Alert logs report traffic that matches a `StatefulRule` with an action setting that sends a log message. Flow logs are standard network traffic flow logs.
         */
        logType: string;
    }

    export interface RuleGroupRuleGroup {
        /**
         * A configuration block that defines additional settings available to use in the rules defined in the rule group. See Rule Variables below for details.
         */
        ruleVariables?: outputs.networkfirewall.RuleGroupRuleGroupRuleVariables;
        /**
         * A configuration block that defines the stateful or stateless rules for the rule group. See Rules Source below for details.
         */
        rulesSource: outputs.networkfirewall.RuleGroupRuleGroupRulesSource;
    }

    export interface RuleGroupRuleGroupRuleVariables {
        /**
         * Set of configuration blocks that define IP address information. See IP Sets below for details.
         */
        ipSets?: outputs.networkfirewall.RuleGroupRuleGroupRuleVariablesIpSet[];
        /**
         * Set of configuration blocks that define port range information. See Port Sets below for details.
         */
        portSets?: outputs.networkfirewall.RuleGroupRuleGroupRuleVariablesPortSet[];
    }

    export interface RuleGroupRuleGroupRuleVariablesIpSet {
        /**
         * A configuration block that defines a set of IP addresses. See IP Set below for details.
         */
        ipSet: outputs.networkfirewall.RuleGroupRuleGroupRuleVariablesIpSetIpSet;
        /**
         * A unique alphanumeric string to identify the `ipSet`.
         */
        key: string;
    }

    export interface RuleGroupRuleGroupRuleVariablesIpSetIpSet {
        /**
         * Set of IP addresses and address ranges, in CIDR notation.
         */
        definitions: string[];
    }

    export interface RuleGroupRuleGroupRuleVariablesPortSet {
        /**
         * An unique alphanumeric string to identify the `portSet`.
         */
        key: string;
        /**
         * A configuration block that defines a set of port ranges. See Port Set below for details.
         */
        portSet: outputs.networkfirewall.RuleGroupRuleGroupRuleVariablesPortSetPortSet;
    }

    export interface RuleGroupRuleGroupRuleVariablesPortSetPortSet {
        /**
         * Set of port ranges.
         */
        definitions: string[];
    }

    export interface RuleGroupRuleGroupRulesSource {
        /**
         * A configuration block containing **stateful** inspection criteria for a domain list rule group. See Rules Source List below for details.
         */
        rulesSourceList?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceRulesSourceList;
        /**
         * The fully qualified name of a file in an S3 bucket that contains Suricata compatible intrusion preventions system (IPS) rules or the Suricata rules as a string. These rules contain **stateful** inspection criteria and the action to take for traffic that matches the criteria.
         */
        rulesString?: string;
        /**
         * Set of configuration blocks containing **stateful** inspection criteria for 5-tuple rules to be used together in a rule group. See Stateful Rule below for details.
         */
        statefulRules?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatefulRule[];
        /**
         * A configuration block containing **stateless** inspection criteria for a stateless rule group. See Stateless Rules and Custom Actions below for details.
         */
        statelessRulesAndCustomActions?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActions;
    }

    export interface RuleGroupRuleGroupRulesSourceRulesSourceList {
        /**
         * String value to specify whether domains in the target list are allowed or denied access. Valid values: `ALLOWLIST`, `DENYLIST`.
         */
        generatedRulesType: string;
        /**
         * Set of types of domain specifications that are provided in the `targets` argument. Valid values: `HTTP_HOST`, `TLS_SNI`.
         */
        targetTypes: string[];
        /**
         * Set of domains that you want to inspect for in your traffic flows.
         */
        targets: string[];
    }

    export interface RuleGroupRuleGroupRulesSourceStatefulRule {
        /**
         * Action to take with packets in a traffic flow when the flow matches the stateful rule criteria. For all actions, AWS Network Firewall performs the specified action and discontinues stateful inspection of the traffic flow. Valid values: `ALERT`, `DROP` or `PASS`.
         */
        action: string;
        /**
         * A configuration block containing the stateful 5-tuple inspection criteria for the rule, used to inspect traffic flows. See Header below for details.
         */
        header: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatefulRuleHeader;
        /**
         * Set of configuration blocks containing additional settings for a stateful rule. See Rule Option below for details.
         */
        ruleOptions: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatefulRuleRuleOption[];
    }

    export interface RuleGroupRuleGroupRulesSourceStatefulRuleHeader {
        /**
         * The destination IP address or address range to inspect for, in CIDR notation. To match with any address, specify `ANY`.
         */
        destination: string;
        /**
         * The destination port to inspect for. To match with any address, specify `ANY`.
         */
        destinationPort: string;
        /**
         * The direction of traffic flow to inspect. Valid values: `ANY` or `FORWARD`.
         */
        direction: string;
        /**
         * The protocol to inspect. Valid values: `IP`, `TCP`, `UDP`, `ICMP`, `HTTP`, `FTP`, `TLS`, `SMB`, `DNS`, `DCERPC`, `SSH`, `SMTP`, `IMAP`, `MSN`, `KRB5`, `IKEV2`, `TFTP`, `NTP`, `DHCP`.
         */
        protocol: string;
        /**
         * The source IP address or address range for, in CIDR notation. To match with any address, specify `ANY`.
         */
        source: string;
        /**
         * The source port to inspect for. To match with any address, specify `ANY`.
         */
        sourcePort: string;
    }

    export interface RuleGroupRuleGroupRulesSourceStatefulRuleRuleOption {
        /**
         * Keyword defined by open source detection systems like Snort or Suricata for stateful rule inspection.
         * See [Snort General Rule Options](http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node31.html) or [Suricata Rule Options](https://suricata.readthedocs.io/en/suricata-5.0.1/rules/intro.html#rule-options) for more details.
         */
        keyword: string;
        /**
         * Set of strings for additional settings to use in stateful rule inspection.
         */
        settings?: string[];
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActions {
        /**
         * Set of configuration blocks containing custom action definitions that are available for use by the set of `stateless rule`. See Custom Action below for details.
         */
        customActions?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction[];
        /**
         * Set of configuration blocks containing the stateless rules for use in the stateless rule group. See Stateless Rule below for details.
         */
        statelessRules: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule[];
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomAction {
        /**
         * A configuration block describing the custom action associated with the `actionName`. See Action Definition below for details.
         */
        actionDefinition: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition;
        /**
         * A friendly name of the custom action.
         */
        actionName: string;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinition {
        /**
         * A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
         */
        publishMetricAction: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricAction {
        /**
         * Set of configuration blocks containing the dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for details.
         */
        dimensions: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension[];
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsCustomActionActionDefinitionPublishMetricActionDimension {
        /**
         * The value to use in the custom metric dimension.
         */
        value: string;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRule {
        /**
         * A setting that indicates the order in which to run this rule relative to all of the rules that are defined for a stateless rule group. AWS Network Firewall evaluates the rules in a rule group starting with the lowest priority setting.
         */
        priority: number;
        /**
         * A configuration block defining the stateless 5-tuple packet inspection criteria and the action to take on a packet that matches the criteria. See Rule Definition below for details.
         */
        ruleDefinition: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinition {
        /**
         * Set of actions to take on a packet that matches one of the stateless rule definition's `matchAttributes`. For every rule you must specify 1 standard action, and you can add custom actions. Standard actions include: `aws:pass`, `aws:drop`, `aws:forward_to_sfe`.
         */
        actions: string[];
        /**
         * A configuration block containing criteria for AWS Network Firewall to use to inspect an individual packet in stateless rule inspection. See Match Attributes below for details.
         */
        matchAttributes: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributes {
        /**
         * Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See Destination Port below for details.
         */
        destinationPorts?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort[];
        /**
         * Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See Destination below for details.
         */
        destinations?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination[];
        /**
         * Set of protocols to inspect for, specified using the protocol's assigned internet protocol number (IANA). If not specified, this matches with any protocol.
         */
        protocols?: number[];
        /**
         * Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See Source Port below for details.
         */
        sourcePorts?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort[];
        /**
         * Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See Source below for details.
         */
        sources?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource[];
        /**
         * Set of configuration blocks containing the TCP flags and masks to inspect for. If not specified, this matches with any settings.
         */
        tcpFlags?: outputs.networkfirewall.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag[];
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestination {
        /**
         * An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
         */
        addressDefinition: string;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesDestinationPort {
        /**
         * The lower limit of the port range. This must be less than or equal to the `toPort`.
         */
        fromPort: number;
        /**
         * The upper limit of the port range. This must be greater than or equal to the `fromPort`.
         */
        toPort?: number;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSource {
        /**
         * An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.
         */
        addressDefinition: string;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesSourcePort {
        /**
         * The lower limit of the port range. This must be less than or equal to the `toPort`.
         */
        fromPort: number;
        /**
         * The upper limit of the port range. This must be greater than or equal to the `fromPort`.
         */
        toPort?: number;
    }

    export interface RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsStatelessRuleRuleDefinitionMatchAttributesTcpFlag {
        /**
         * Set of flags to look for in a packet. This setting can only specify values that are also specified in `masks`.
         * Valid values: `FIN`, `SYN`, `RST`, `PSH`, `ACK`, `URG`, `ECE`, `CWR`.
         */
        flags: string[];
        /**
         * Set of flags to consider in the inspection. To inspect all flags, leave this empty.
         * Valid values: `FIN`, `SYN`, `RST`, `PSH`, `ACK`, `URG`, `ECE`, `CWR`.
         */
        masks?: string[];
    }
}

export namespace opsworks {
    export interface ApplicationAppSource {
        /**
         * Password to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
         */
        password?: string;
        /**
         * For sources that are version-aware, the revision to use.
         */
        revision?: string;
        /**
         * SSH key to use when authenticating to the source. This provider cannot perform drift detection of this configuration.
         */
        sshKey?: string;
        /**
         * The type of source to use. For example, "archive".
         */
        type: string;
        /**
         * The URL where the app resource can be found.
         */
        url?: string;
        /**
         * Username to use when authenticating to the source.
         */
        username?: string;
    }

    export interface ApplicationEnvironment {
        /**
         * Variable name.
         */
        key: string;
        /**
         * Set visibility of the variable value to `true` or `false`.
         */
        secure?: boolean;
        /**
         * Variable value.
         */
        value: string;
    }

    export interface ApplicationSslConfiguration {
        /**
         * The contents of the certificate's domain.crt file.
         */
        certificate: string;
        /**
         * Can be used to specify an intermediate certificate authority key or client authentication.
         */
        chain?: string;
        /**
         * The private key; the contents of the certificate's domain.key file.
         */
        privateKey: string;
    }

    export interface CustomLayerEbsVolume {
        /**
         * Encrypt the volume.
         */
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface GangliaLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface HaproxyLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface InstanceEbsBlockDevice {
        deleteOnTermination?: boolean;
        deviceName: string;
        iops: number;
        snapshotId: string;
        volumeSize: number;
        volumeType: string;
    }

    export interface InstanceEphemeralBlockDevice {
        deviceName: string;
        virtualName: string;
    }

    export interface InstanceRootBlockDevice {
        deleteOnTermination?: boolean;
        iops: number;
        volumeSize: number;
        volumeType: string;
    }

    export interface JavaAppLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface MemcachedLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface MysqlLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface NodejsAppLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface PhpAppLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface RailsAppLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }

    export interface StackCustomCookbooksSource {
        /**
         * Password to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
         */
        password?: string;
        /**
         * For sources that are version-aware, the revision to use.
         */
        revision?: string;
        /**
         * SSH key to use when authenticating to the source. The provider cannot perform drift detection of this configuration.
         */
        sshKey?: string;
        /**
         * The type of source to use. For example, "archive".
         */
        type: string;
        /**
         * The URL where the cookbooks resource can be found.
         */
        url: string;
        /**
         * Username to use when authenticating to the source.
         */
        username?: string;
    }

    export interface StaticWebLayerEbsVolume {
        encrypted?: boolean;
        /**
         * For PIOPS volumes, the IOPS per disk.
         */
        iops?: number;
        /**
         * The path to mount the EBS volume on the layer's instances.
         */
        mountPoint: string;
        /**
         * The number of disks to use for the EBS volume.
         */
        numberOfDisks: number;
        /**
         * The RAID level to use for the volume.
         */
        raidLevel?: string;
        /**
         * The size of the volume in gigabytes.
         */
        size: number;
        /**
         * The type of volume to create. This may be `standard` (the default), `io1` or `gp2`.
         */
        type?: string;
    }
}

export namespace organizations {
    export interface GetOrganizationAccount {
        /**
         * ARN of the root
         */
        arn: string;
        /**
         * Email of the account
         */
        email: string;
        /**
         * Identifier of the root
         */
        id: string;
        /**
         * The name of the policy type
         */
        name: string;
        /**
         * The status of the policy type as it relates to the associated root
         */
        status: string;
    }

    export interface GetOrganizationNonMasterAccount {
        /**
         * ARN of the root
         */
        arn: string;
        /**
         * Email of the account
         */
        email: string;
        /**
         * Identifier of the root
         */
        id: string;
        /**
         * The name of the policy type
         */
        name: string;
        /**
         * The status of the policy type as it relates to the associated root
         */
        status: string;
    }

    export interface GetOrganizationRoot {
        /**
         * ARN of the root
         */
        arn: string;
        /**
         * Identifier of the root
         */
        id: string;
        /**
         * The name of the policy type
         */
        name: string;
        /**
         * List of policy types enabled for this root. All elements have these attributes:
         */
        policyTypes: outputs.organizations.GetOrganizationRootPolicyType[];
    }

    export interface GetOrganizationRootPolicyType {
        /**
         * The status of the policy type as it relates to the associated root
         */
        status: string;
        type: string;
    }

    export interface GetOrganizationalUnitsChildren {
        /**
         * ARN of the organizational unit
         */
        arn: string;
        /**
         * Parent identifier of the organizational units.
         */
        id: string;
        /**
         * Name of the organizational unit
         */
        name: string;
    }

    export interface OrganizationAccount {
        /**
         * ARN of the root
         */
        arn: string;
        /**
         * Email of the account
         */
        email: string;
        /**
         * Identifier of the root
         */
        id: string;
        /**
         * The name of the policy type
         */
        name: string;
        /**
         * The status of the policy type as it relates to the associated root
         */
        status: string;
    }

    export interface OrganizationNonMasterAccount {
        /**
         * ARN of the root
         */
        arn: string;
        /**
         * Email of the account
         */
        email: string;
        /**
         * Identifier of the root
         */
        id: string;
        /**
         * The name of the policy type
         */
        name: string;
        /**
         * The status of the policy type as it relates to the associated root
         */
        status: string;
    }

    export interface OrganizationRoot {
        /**
         * ARN of the root
         */
        arn: string;
        /**
         * Identifier of the root
         */
        id: string;
        /**
         * The name of the policy type
         */
        name: string;
        /**
         * List of policy types enabled for this root. All elements have these attributes:
         */
        policyTypes: outputs.organizations.OrganizationRootPolicyType[];
    }

    export interface OrganizationRootPolicyType {
        /**
         * The status of the policy type as it relates to the associated root
         */
        status: string;
        type: string;
    }

    export interface OrganizationalUnitAccount {
        /**
         * ARN of the organizational unit
         */
        arn: string;
        /**
         * Email of the account
         */
        email: string;
        /**
         * Identifier of the organization unit
         */
        id: string;
        /**
         * The name for the organizational unit
         */
        name: string;
    }
}

export namespace pinpoint {
    export interface AppCampaignHook {
        /**
         * Lambda function name or ARN to be called for delivery. Conflicts with `webUrl`
         */
        lambdaFunctionName?: string;
        /**
         * What mode Lambda should be invoked in. Valid values for this parameter are `DELIVERY`, `FILTER`.
         */
        mode?: string;
        /**
         * Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request. Conflicts with `lambdaFunctionName`
         */
        webUrl?: string;
    }

    export interface AppLimits {
        /**
         * The maximum number of messages that the campaign can send daily.
         */
        daily?: number;
        /**
         * The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
         */
        maximumDuration?: number;
        /**
         * The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
         */
        messagesPerSecond?: number;
        /**
         * The maximum total number of messages that the campaign can send.
         */
        total?: number;
    }

    export interface AppQuietTime {
        /**
         * The default end time for quiet time in ISO 8601 format. Required if `start` is set
         */
        end?: string;
        /**
         * The default start time for quiet time in ISO 8601 format. Required if `end` is set
         */
        start?: string;
    }
}

export namespace pricing {
    export interface GetProductFilter {
        /**
         * The product attribute name that you want to filter on.
         */
        field: string;
        /**
         * The product attribute value that you want to filter on.
         */
        value: string;
    }
}

export namespace ram {
    export interface GetResourceShareFilter {
        /**
         * The name of the tag key to filter on.
         */
        name: string;
        /**
         * The value of the tag key.
         */
        values: string[];
    }
}

export namespace rds {
    export interface ClusterParameterGroupParameter {
        /**
         * "immediate" (default), or "pending-reboot". Some
         * engines can't apply some parameters without a reboot, and you will need to
         * specify "pending-reboot" here.
         */
        applyMethod?: string;
        /**
         * The name of the DB parameter.
         */
        name: string;
        /**
         * The value of the DB parameter.
         */
        value: string;
    }

    export interface ClusterRestoreToPointInTime {
        /**
         * Date and time in UTC format to restore the database cluster to. Conflicts with `useLatestRestorableTime`.
         */
        restoreToTime?: string;
        /**
         * Type of restore to be performed.
         * Valid options are `full-copy` (default) and `copy-on-write`.
         */
        restoreType?: string;
        /**
         * The identifier of the source database cluster from which to restore.
         */
        sourceClusterIdentifier: string;
        /**
         * Set to true to restore the database cluster to the latest restorable backup time. Defaults to false. Conflicts with `restoreToTime`.
         */
        useLatestRestorableTime?: boolean;
    }

    export interface ClusterS3Import {
        /**
         * The bucket name where your backup is stored
         */
        bucketName: string;
        /**
         * Can be blank, but is the path to your backup
         */
        bucketPrefix?: string;
        /**
         * Role applied to load the data.
         */
        ingestionRole: string;
        /**
         * Source engine for the backup
         */
        sourceEngine: string;
        /**
         * Version of the source engine used to make the backup
         */
        sourceEngineVersion: string;
    }

    export interface ClusterScalingConfiguration {
        /**
         * Whether to enable automatic pause. A DB cluster can be paused only when it's idle (it has no connections). If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it. Defaults to `true`.
         */
        autoPause?: boolean;
        /**
         * The maximum capacity. The maximum capacity must be greater than or equal to the minimum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `16`.
         */
        maxCapacity?: number;
        /**
         * The minimum capacity. The minimum capacity must be lesser than or equal to the maximum capacity. Valid capacity values are `1`, `2`, `4`, `8`, `16`, `32`, `64`, `128`, and `256`. Defaults to `1`.
         */
        minCapacity?: number;
        /**
         * The time, in seconds, before an Aurora DB cluster in serverless mode is paused. Valid values are `300` through `86400`. Defaults to `300`.
         */
        secondsUntilAutoPause?: number;
        /**
         * The action to take when the timeout is reached. Valid values: `ForceApplyCapacityChange`, `RollbackCapacityChange`. Defaults to `RollbackCapacityChange`. See [documentation](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.timeout-action).
         */
        timeoutAction?: string;
    }

    export interface GlobalClusterGlobalClusterMember {
        /**
         * Amazon Resource Name (ARN) of member DB Cluster
         */
        dbClusterArn: string;
        /**
         * Whether the member is the primary DB Cluster
         */
        isWriter: boolean;
    }

    export interface InstanceRestoreToPointInTime {
        /**
         * The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with `useLatestRestorableTime`.
         */
        restoreTime?: string;
        /**
         * The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if `sourceDbiResourceId` is not specified.
         */
        sourceDbInstanceIdentifier?: string;
        /**
         * The resource ID of the source DB instance from which to restore. Required if `sourceDbInstanceIdentifier` is not specified.
         */
        sourceDbiResourceId?: string;
        /**
         * A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to `false`. Cannot be specified with `restoreTime`.
         */
        useLatestRestorableTime?: boolean;
    }

    export interface InstanceS3Import {
        /**
         * The bucket name where your backup is stored
         */
        bucketName: string;
        /**
         * Can be blank, but is the path to your backup
         */
        bucketPrefix?: string;
        /**
         * Role applied to load the data.
         */
        ingestionRole: string;
        /**
         * Source engine for the backup
         */
        sourceEngine: string;
        /**
         * Version of the source engine used to make the backup
         */
        sourceEngineVersion: string;
    }

    export interface OptionGroupOption {
        /**
         * A list of DB Security Groups for which the option is enabled.
         */
        dbSecurityGroupMemberships?: string[];
        /**
         * The Name of the Option (e.g. MEMCACHED).
         */
        optionName: string;
        /**
         * A list of option settings to apply.
         */
        optionSettings?: outputs.rds.OptionGroupOptionOptionSetting[];
        /**
         * The Port number when connecting to the Option (e.g. 11211).
         */
        port?: number;
        /**
         * The version of the option (e.g. 13.1.0.0).
         */
        version?: string;
        /**
         * A list of VPC Security Groups for which the option is enabled.
         */
        vpcSecurityGroupMemberships?: string[];
    }

    export interface OptionGroupOptionOptionSetting {
        /**
         * The Name of the setting.
         */
        name: string;
        /**
         * The Value of the setting.
         */
        value: string;
    }

    export interface ParameterGroupParameter {
        /**
         * "immediate" (default), or "pending-reboot". Some
         * engines can't apply some parameters without a reboot, and you will need to
         * specify "pending-reboot" here.
         */
        applyMethod?: string;
        /**
         * The name of the DB parameter.
         */
        name: string;
        /**
         * The value of the DB parameter.
         */
        value: string;
    }

    export interface ProxyAuth {
        /**
         * The type of authentication that the proxy uses for connections from the proxy to the underlying database. One of `SECRETS`.
         */
        authScheme?: string;
        /**
         * A user-specified description about the authentication used by a proxy to log in as a specific database user.
         */
        description?: string;
        /**
         * Whether to require or disallow AWS Identity and Access Management (IAM) authentication for connections to the proxy. One of `DISABLED`, `REQUIRED`.
         */
        iamAuth?: string;
        /**
         * The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.
         */
        secretArn?: string;
    }

    export interface ProxyDefaultTargetGroupConnectionPoolConfig {
        /**
         * The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.
         */
        connectionBorrowTimeout?: number;
        /**
         * One or more SQL statements for the proxy to run when opening each new database connection. Typically used with `SET` statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single `SET` statement, such as `SET x=1, y=2`.
         */
        initQuery?: string;
        /**
         * The maximum size of the connection pool for each target in a target group. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
         */
        maxConnectionsPercent?: number;
        /**
         * Controls how actively the proxy closes idle database connections in the connection pool. A high value enables the proxy to leave a high percentage of idle connections open. A low value causes the proxy to close idle client connections and return the underlying database connections to the connection pool. For Aurora MySQL, it is expressed as a percentage of the maxConnections setting for the RDS DB instance or Aurora DB cluster used by the target group.
         */
        maxIdleConnectionsPercent?: number;
        /**
         * Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. Currently, the only allowed value is `EXCLUDE_VARIABLE_SETS`.
         */
        sessionPinningFilters?: string[];
    }

    export interface SecurityGroupIngress {
        /**
         * The CIDR block to accept
         */
        cidr?: string;
        /**
         * The ID of the security group to authorize
         */
        securityGroupId: string;
        /**
         * The name of the security group to authorize
         */
        securityGroupName: string;
        /**
         * The owner Id of the security group provided
         * by `securityGroupName`.
         */
        securityGroupOwnerId: string;
    }
}

export namespace redshift {
    export interface ClusterLogging {
        /**
         * The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
         * For more information on the permissions required for the bucket, please read the AWS [documentation](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
         */
        bucketName: string;
        /**
         * Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
         */
        enable: boolean;
        /**
         * The prefix applied to the log file names.
         */
        s3KeyPrefix: string;
    }

    export interface ClusterSnapshotCopy {
        /**
         * The destination region that you want to copy snapshots to.
         */
        destinationRegion: string;
        /**
         * The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
         */
        grantName?: string;
        /**
         * The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to `7`.
         */
        retentionPeriod?: number;
    }

    export interface ParameterGroupParameter {
        /**
         * The name of the Redshift parameter.
         */
        name: string;
        /**
         * The value of the Redshift parameter.
         */
        value: string;
    }

    export interface SecurityGroupIngress {
        /**
         * The CIDR block to accept
         */
        cidr?: string;
        /**
         * The name of the security group to authorize
         */
        securityGroupName: string;
        /**
         * The owner Id of the security group provided
         * by `securityGroupName`.
         */
        securityGroupOwnerId: string;
    }
}

export namespace resourcegroups {
    export interface GroupResourceQuery {
        /**
         * The resource query as a JSON string.
         */
        query: string;
        /**
         * The type of the resource query. Defaults to `TAG_FILTERS_1_0`.
         */
        type?: string;
    }
}

export namespace route53 {
    export interface GetResolverEndpointFilter {
        name: string;
        values: string[];
    }

    export interface RecordAlias {
        /**
         * Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
         */
        evaluateTargetHealth: boolean;
        /**
         * DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
         */
        name: string;
        /**
         * Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
         */
        zoneId: string;
    }

    export interface RecordFailoverRoutingPolicy {
        /**
         * `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
         */
        type: string;
    }

    export interface RecordGeolocationRoutingPolicy {
        /**
         * A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
         */
        continent?: string;
        /**
         * A two-character country code or `*` to indicate a default resource record set.
         */
        country?: string;
        /**
         * A subdivision code for a country.
         */
        subdivision?: string;
    }

    export interface RecordLatencyRoutingPolicy {
        /**
         * An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
         */
        region: string;
    }

    export interface RecordWeightedRoutingPolicy {
        /**
         * A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
         */
        weight: number;
    }

    export interface ResolverEndpointIpAddress {
        /**
         * The IP address in the subnet that you want to use for DNS queries.
         */
        ip: string;
        ipId: string;
        /**
         * The ID of the subnet that contains the IP address.
         */
        subnetId: string;
    }

    export interface ResolverRuleTargetIp {
        /**
         * One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
         */
        ip: string;
        /**
         * The port at `ip` that you want to forward DNS queries to. Default value is `53`
         */
        port?: number;
    }

    export interface ZoneVpc {
        /**
         * ID of the VPC to associate.
         */
        vpcId: string;
        /**
         * Region of the VPC to associate. Defaults to AWS provider region.
         */
        vpcRegion: string;
    }
}

export namespace s3 {
    export interface AccessPointPublicAccessBlockConfiguration {
        /**
         * Whether Amazon S3 should block public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing policies or ACLs. When set to `true` causes the following behavior:
         * * PUT Bucket acl and PUT Object acl calls fail if the specified ACL is public.
         * * PUT Object calls fail if the request includes a public ACL.
         * * PUT Bucket calls fail if the request includes a public ACL.
         */
        blockPublicAcls?: boolean;
        /**
         * Whether Amazon S3 should block public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect existing bucket policies. When set to `true` causes Amazon S3 to:
         * * Reject calls to PUT Bucket policy if the specified bucket policy allows public access.
         */
        blockPublicPolicy?: boolean;
        /**
         * Whether Amazon S3 should ignore public ACLs for buckets in this account. Defaults to `true`. Enabling this setting does not affect the persistence of any existing ACLs and doesn't prevent new public ACLs from being set. When set to `true` causes Amazon S3 to:
         * * Ignore all public ACLs on buckets in this account and any objects that they contain.
         */
        ignorePublicAcls?: boolean;
        /**
         * Whether Amazon S3 should restrict public bucket policies for buckets in this account. Defaults to `true`. Enabling this setting does not affect previously stored bucket policies, except that public and cross-account access within any public bucket policy, including non-public delegation to specific accounts, is blocked. When set to `true`:
         * * Only the bucket owner and AWS Services can access buckets with public policies.
         */
        restrictPublicBuckets?: boolean;
    }

    export interface AccessPointVpcConfiguration {
        /**
         * This access point will only allow connections from the specified VPC ID.
         */
        vpcId: string;
    }

    export interface AnalyticsConfigurationFilter {
        /**
         * Object prefix for filtering.
         */
        prefix?: string;
        /**
         * Set of object tags for filtering.
         */
        tags?: {[key: string]: string};
    }

    export interface AnalyticsConfigurationStorageClassAnalysis {
        /**
         * Data export configuration (documented below).
         */
        dataExport: outputs.s3.AnalyticsConfigurationStorageClassAnalysisDataExport;
    }

    export interface AnalyticsConfigurationStorageClassAnalysisDataExport {
        /**
         * Specifies the destination for the exported analytics data (documented below).
         */
        destination: outputs.s3.AnalyticsConfigurationStorageClassAnalysisDataExportDestination;
        /**
         * The schema version of exported analytics data. Allowed values: `V_1`. Default value: `V_1`.
         */
        outputSchemaVersion?: string;
    }

    export interface AnalyticsConfigurationStorageClassAnalysisDataExportDestination {
        /**
         * Analytics data export currently only supports an S3 bucket destination (documented below).
         */
        s3BucketDestination: outputs.s3.AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination;
    }

    export interface AnalyticsConfigurationStorageClassAnalysisDataExportDestinationS3BucketDestination {
        /**
         * The account ID that owns the destination bucket.
         */
        bucketAccountId?: string;
        /**
         * The ARN of the destination bucket.
         */
        bucketArn: string;
        /**
         * The output format of exported analytics data. Allowed values: `CSV`. Default value: `CSV`.
         */
        format?: string;
        /**
         * Object prefix for filtering.
         */
        prefix?: string;
    }

    export interface BucketCorsRule {
        /**
         * Specifies which headers are allowed.
         */
        allowedHeaders?: string[];
        /**
         * Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
         */
        allowedMethods: string[];
        /**
         * Specifies which origins are allowed.
         */
        allowedOrigins: string[];
        /**
         * Specifies expose header in the response.
         */
        exposeHeaders?: string[];
        /**
         * Specifies time in seconds that browser can cache the response for a preflight request.
         */
        maxAgeSeconds?: number;
    }

    export interface BucketGrant {
        /**
         * Canonical user id to grant for. Used only when `type` is `CanonicalUser`.
         */
        id?: string;
        /**
         * List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `READ_ACP`, `WRITE_ACP`, `FULL_CONTROL`.
         */
        permissions: string[];
        /**
         * - Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`. `AmazonCustomerByEmail` is not supported.
         */
        type: string;
        /**
         * Uri address to grant for. Used only when `type` is `Group`.
         */
        uri?: string;
    }

    export interface BucketLifecycleRule {
        /**
         * Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
         */
        abortIncompleteMultipartUploadDays?: number;
        /**
         * Specifies lifecycle rule status.
         */
        enabled: boolean;
        /**
         * Specifies a period in the object's expire (documented below).
         */
        expiration?: outputs.s3.BucketLifecycleRuleExpiration;
        /**
         * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
         */
        id: string;
        /**
         * Specifies when noncurrent object versions expire (documented below).
         */
        noncurrentVersionExpiration?: outputs.s3.BucketLifecycleRuleNoncurrentVersionExpiration;
        /**
         * Specifies when noncurrent object versions transitions (documented below).
         */
        noncurrentVersionTransitions?: outputs.s3.BucketLifecycleRuleNoncurrentVersionTransition[];
        /**
         * Object key prefix identifying one or more objects to which the rule applies.
         */
        prefix?: string;
        /**
         * Specifies object tags key and value.
         */
        tags?: {[key: string]: string};
        /**
         * Specifies a period in the object's transitions (documented below).
         */
        transitions?: outputs.s3.BucketLifecycleRuleTransition[];
    }

    export interface BucketLifecycleRuleExpiration {
        /**
         * Specifies the date after which you want the corresponding action to take effect.
         */
        date?: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days?: number;
        /**
         * On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Amazon S3 to delete expired object delete markers.
         */
        expiredObjectDeleteMarker?: boolean;
    }

    export interface BucketLifecycleRuleNoncurrentVersionExpiration {
        /**
         * Specifies the number of days noncurrent object versions expire.
         */
        days?: number;
    }

    export interface BucketLifecycleRuleNoncurrentVersionTransition {
        /**
         * Specifies the number of days noncurrent object versions transition.
         */
        days?: number;
        /**
         * Specifies the Amazon S3 storage class to which you want the noncurrent object versions to transition. Can be `ONEZONE_IA`, `STANDARD_IA`, `INTELLIGENT_TIERING`, `GLACIER`, or `DEEP_ARCHIVE`.
         */
        storageClass: string;
    }

    export interface BucketLifecycleRuleTransition {
        /**
         * Specifies the date after which you want the corresponding action to take effect.
         */
        date?: string;
        /**
         * Specifies the number of days after object creation when the specific rule action takes effect.
         */
        days?: number;
        /**
         * Specifies the Amazon S3 storage class to which you want the object to transition. Can be `ONEZONE_IA`, `STANDARD_IA`, `INTELLIGENT_TIERING`, `GLACIER`, or `DEEP_ARCHIVE`.
         */
        storageClass: string;
    }

    export interface BucketLogging {
        /**
         * The name of the bucket that will receive the log objects.
         */
        targetBucket: string;
        /**
         * To specify a key prefix for log objects.
         */
        targetPrefix?: string;
    }

    export interface BucketMetricFilter {
        /**
         * Object prefix for filtering (singular).
         */
        prefix?: string;
        /**
         * Object tags for filtering (up to 10).
         */
        tags?: {[key: string]: string};
    }

    export interface BucketNotificationLambdaFunction {
        /**
         * Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
         */
        events: string[];
        /**
         * Specifies object key name prefix.
         */
        filterPrefix?: string;
        /**
         * Specifies object key name suffix.
         */
        filterSuffix?: string;
        /**
         * Specifies unique identifier for each of the notification configurations.
         */
        id: string;
        /**
         * Specifies Amazon Lambda function ARN.
         */
        lambdaFunctionArn?: string;
    }

    export interface BucketNotificationQueue {
        /**
         * Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
         */
        events: string[];
        /**
         * Specifies object key name prefix.
         */
        filterPrefix?: string;
        /**
         * Specifies object key name suffix.
         */
        filterSuffix?: string;
        /**
         * Specifies unique identifier for each of the notification configurations.
         */
        id: string;
        /**
         * Specifies Amazon SQS queue ARN.
         */
        queueArn: string;
    }

    export interface BucketNotificationTopic {
        /**
         * Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
         */
        events: string[];
        /**
         * Specifies object key name prefix.
         */
        filterPrefix?: string;
        /**
         * Specifies object key name suffix.
         */
        filterSuffix?: string;
        /**
         * Specifies unique identifier for each of the notification configurations.
         */
        id: string;
        /**
         * Specifies Amazon SNS topic ARN.
         */
        topicArn: string;
    }

    export interface BucketObjectLockConfiguration {
        /**
         * Indicates whether this bucket has an Object Lock configuration enabled. Valid value is `Enabled`.
         */
        objectLockEnabled: string;
        /**
         * The Object Lock rule in place for this bucket.
         */
        rule?: outputs.s3.BucketObjectLockConfigurationRule;
    }

    export interface BucketObjectLockConfigurationRule {
        /**
         * The default retention period that you want to apply to new objects placed in this bucket.
         */
        defaultRetention: outputs.s3.BucketObjectLockConfigurationRuleDefaultRetention;
    }

    export interface BucketObjectLockConfigurationRuleDefaultRetention {
        /**
         * The number of days that you want to specify for the default retention period.
         */
        days?: number;
        /**
         * The default Object Lock retention mode you want to apply to new objects placed in this bucket. Valid values are `GOVERNANCE` and `COMPLIANCE`.
         */
        mode: string;
        /**
         * The number of years that you want to specify for the default retention period.
         */
        years?: number;
    }

    export interface BucketOwnershipControlsRule {
        /**
         * Object ownership. Valid values: `BucketOwnerPreferred` or `ObjectWriter`
         */
        objectOwnership: string;
    }

    export interface BucketReplicationConfiguration {
        /**
         * The ARN of the IAM role for Amazon S3 to assume when replicating the objects.
         */
        role: string;
        /**
         * Specifies the rules managing the replication (documented below).
         */
        rules: outputs.s3.BucketReplicationConfigurationRule[];
    }

    export interface BucketReplicationConfigurationRule {
        /**
         * Specifies the destination for the rule (documented below).
         */
        destination: outputs.s3.BucketReplicationConfigurationRuleDestination;
        /**
         * Filter that identifies subset of objects to which the replication rule applies (documented below).
         */
        filter?: outputs.s3.BucketReplicationConfigurationRuleFilter;
        /**
         * Unique identifier for the rule. Must be less than or equal to 255 characters in length.
         */
        id?: string;
        /**
         * Object keyname prefix identifying one or more objects to which the rule applies. Must be less than or equal to 1024 characters in length.
         */
        prefix?: string;
        /**
         * is optional (with a default value of `0`) but must be unique between multiple rules
         */
        priority?: number;
        /**
         * Specifies special object selection criteria (documented below).
         */
        sourceSelectionCriteria?: outputs.s3.BucketReplicationConfigurationRuleSourceSelectionCriteria;
        /**
         * The status of the rule. Either `Enabled` or `Disabled`. The rule is ignored if status is not Enabled.
         */
        status: string;
    }

    export interface BucketReplicationConfigurationRuleDestination {
        /**
         * Specifies the overrides to use for object owners on replication. Must be used in conjunction with `accountId` owner override configuration.
         */
        accessControlTranslation?: outputs.s3.BucketReplicationConfigurationRuleDestinationAccessControlTranslation;
        /**
         * The Account ID to use for overriding the object owner on replication. Must be used in conjunction with `accessControlTranslation` override configuration.
         */
        accountId?: string;
        /**
         * The ARN of the S3 bucket where you want Amazon S3 to store replicas of the object identified by the rule.
         */
        bucket: string;
        /**
         * Destination KMS encryption key ARN for SSE-KMS replication. Must be used in conjunction with
         * `sseKmsEncryptedObjects` source selection criteria.
         */
        replicaKmsKeyId?: string;
        /**
         * The class of storage used to store the object. Can be `STANDARD`, `REDUCED_REDUNDANCY`, `STANDARD_IA`, `ONEZONE_IA`, `INTELLIGENT_TIERING`, `GLACIER`, or `DEEP_ARCHIVE`.
         */
        storageClass?: string;
    }

    export interface BucketReplicationConfigurationRuleDestinationAccessControlTranslation {
        /**
         * The override value for the owner on replicated objects. Currently only `Destination` is supported.
         */
        owner: string;
    }

    export interface BucketReplicationConfigurationRuleFilter {
        /**
         * Object keyname prefix that identifies subset of objects to which the rule applies. Must be less than or equal to 1024 characters in length.
         */
        prefix?: string;
        /**
         * A map of tags that identifies subset of objects to which the rule applies.
         * The rule applies only to objects having all the tags in its tagset.
         */
        tags?: {[key: string]: string};
    }

    export interface BucketReplicationConfigurationRuleSourceSelectionCriteria {
        /**
         * Match SSE-KMS encrypted objects (documented below). If specified, `replicaKmsKeyId`
         * in `destination` must be specified as well.
         */
        sseKmsEncryptedObjects?: outputs.s3.BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects;
    }

    export interface BucketReplicationConfigurationRuleSourceSelectionCriteriaSseKmsEncryptedObjects {
        /**
         * Boolean which indicates if this criteria is enabled.
         */
        enabled: boolean;
    }

    export interface BucketServerSideEncryptionConfiguration {
        /**
         * A single object for server-side encryption by default configuration. (documented below)
         */
        rule: outputs.s3.BucketServerSideEncryptionConfigurationRule;
    }

    export interface BucketServerSideEncryptionConfigurationRule {
        /**
         * A single object for setting server-side encryption by default. (documented below)
         */
        applyServerSideEncryptionByDefault: outputs.s3.BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault;
    }

    export interface BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault {
        /**
         * The AWS KMS master key ID used for the SSE-KMS encryption. This can only be used when you set the value of `sseAlgorithm` as `aws:kms`. The default `aws/s3` AWS KMS master key is used if this element is absent while the `sseAlgorithm` is `aws:kms`.
         */
        kmsMasterKeyId?: string;
        /**
         * The server-side encryption algorithm to use. Valid values are `AES256` and `aws:kms`
         */
        sseAlgorithm: string;
    }

    export interface BucketVersioning {
        /**
         * Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
         */
        enabled?: boolean;
        /**
         * Enable MFA delete for either `Change the versioning state of your bucket` or `Permanently delete an object version`. Default is `false`. This cannot be used to toggle this setting but is available to allow managed buckets to reflect the state in AWS
         */
        mfaDelete?: boolean;
    }

    export interface BucketWebsite {
        /**
         * An absolute path to the document to return in case of a 4XX error.
         */
        errorDocument?: string;
        /**
         * Amazon S3 returns this index document when requests are made to the root domain or any of the subfolders.
         */
        indexDocument?: string;
        /**
         * A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
         */
        redirectAllRequestsTo?: string;
        /**
         * A json array containing [routing rules](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html)
         * describing redirect behavior and when redirects are applied.
         */
        routingRules?: string;
    }

    export interface InventoryDestination {
        /**
         * The S3 bucket configuration where inventory results are published (documented below).
         */
        bucket: outputs.s3.InventoryDestinationBucket;
    }

    export interface InventoryDestinationBucket {
        /**
         * The ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
         */
        accountId?: string;
        /**
         * The Amazon S3 bucket ARN of the destination.
         */
        bucketArn: string;
        /**
         * Contains the type of server-side encryption to use to encrypt the inventory (documented below).
         */
        encryption?: outputs.s3.InventoryDestinationBucketEncryption;
        /**
         * Specifies the output format of the inventory results. Can be `CSV`, [`ORC`](https://orc.apache.org/) or [`Parquet`](https://parquet.apache.org/).
         */
        format: string;
        /**
         * The prefix that is prepended to all inventory results.
         */
        prefix?: string;
    }

    export interface InventoryDestinationBucketEncryption {
        /**
         * Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
         */
        sseKms?: outputs.s3.InventoryDestinationBucketEncryptionSseKms;
        /**
         * Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
         */
        sseS3?: outputs.s3.InventoryDestinationBucketEncryptionSseS3;
    }

    export interface InventoryDestinationBucketEncryptionSseKms {
        /**
         * The ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
         */
        keyId: string;
    }

    export interface InventoryDestinationBucketEncryptionSseS3 {
    }

    export interface InventoryFilter {
        /**
         * The prefix that an object must have to be included in the inventory results.
         */
        prefix?: string;
    }

    export interface InventorySchedule {
        /**
         * Specifies how frequently inventory results are produced. Valid values: `Daily`, `Weekly`.
         */
        frequency: string;
    }
}

export namespace s3control {
    export interface BucketLifecycleConfigurationRule {
        /**
         * Configuration block containing settings for abort incomplete multipart upload.
         */
        abortIncompleteMultipartUpload?: outputs.s3control.BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload;
        /**
         * Configuration block containing settings for expiration of objects.
         */
        expiration?: outputs.s3control.BucketLifecycleConfigurationRuleExpiration;
        /**
         * Configuration block containing settings for filtering.
         */
        filter?: outputs.s3control.BucketLifecycleConfigurationRuleFilter;
        /**
         * Unique identifier for the rule.
         */
        id: string;
        /**
         * Status of the rule. Valid values: `Enabled` and `Disabled`. Defaults to `Enabled`.
         */
        status?: string;
    }

    export interface BucketLifecycleConfigurationRuleAbortIncompleteMultipartUpload {
        /**
         * Number of days after which Amazon S3 aborts an incomplete multipart upload.
         */
        daysAfterInitiation: number;
    }

    export interface BucketLifecycleConfigurationRuleExpiration {
        /**
         * Date the object is to be deleted. Should be in `YYYY-MM-DD` date format, e.g. `2020-09-30`.
         */
        date?: string;
        /**
         * Number of days before the object is to be deleted.
         */
        days?: number;
        /**
         * Enable to remove a delete marker with no noncurrent versions. Cannot be specified with `date` or `days`.
         */
        expiredObjectDeleteMarker?: boolean;
    }

    export interface BucketLifecycleConfigurationRuleFilter {
        /**
         * Object prefix for rule filtering.
         */
        prefix?: string;
        /**
         * Key-value map of object tags for rule filtering.
         */
        tags?: {[key: string]: string};
    }
}

export namespace s3outposts {
    export interface EndpointNetworkInterface {
        /**
         * Identifier of the Elastic Network Interface (ENI).
         */
        networkInterfaceId: string;
    }
}

export namespace sagemaker {
    export interface CodeRepositoryGitConfig {
        branch?: string;
        repositoryUrl: string;
        secretArn?: string;
    }

    export interface EndpointConfigurationDataCaptureConfig {
        /**
         * The content type headers to capture. Fields are documented below.
         */
        captureContentTypeHeader?: outputs.sagemaker.EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader;
        /**
         * Specifies what data to capture. Fields are documented below.
         */
        captureOptions: outputs.sagemaker.EndpointConfigurationDataCaptureConfigCaptureOption[];
        /**
         * The URL for S3 location where the captured data is stored.
         */
        destinationS3Uri: string;
        /**
         * Flag to enable data capture. Defaults to `false`.
         */
        enableCapture?: boolean;
        /**
         * Portion of data to capture. Should be between 0 and 100.
         */
        initialSamplingPercentage: number;
        /**
         * Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon SageMaker uses to encrypt the captured data on Amazon S3.
         */
        kmsKeyId?: string;
    }

    export interface EndpointConfigurationDataCaptureConfigCaptureContentTypeHeader {
        /**
         * The CSV content type headers to capture.
         */
        csvContentTypes?: string[];
        /**
         * The JSON content type headers to capture.
         */
        jsonContentTypes?: string[];
    }

    export interface EndpointConfigurationDataCaptureConfigCaptureOption {
        /**
         * Specifies the data to be captured. Should be one of `Input` or `Output`.
         */
        captureMode: string;
    }

    export interface EndpointConfigurationProductionVariant {
        /**
         * The size of the Elastic Inference (EI) instance to use for the production variant.
         */
        acceleratorType?: string;
        /**
         * Initial number of instances used for auto-scaling.
         */
        initialInstanceCount: number;
        /**
         * Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. If unspecified, it defaults to 1.0.
         */
        initialVariantWeight?: number;
        /**
         * The type of instance to start.
         */
        instanceType: string;
        /**
         * The name of the model to use.
         */
        modelName: string;
        /**
         * The name of the variant. If omitted, this provider will assign a random, unique name.
         */
        variantName: string;
    }

    export interface ModelContainer {
        /**
         * The DNS host name for the container.
         */
        containerHostname?: string;
        /**
         * Environment variables for the Docker container.
         * A list of key value pairs.
         */
        environment?: {[key: string]: string};
        /**
         * The registry path where the inference code image is stored in Amazon ECR.
         */
        image: string;
        /**
         * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
         */
        imageConfig?: outputs.sagemaker.ModelContainerImageConfig;
        /**
         * The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
         */
        mode?: string;
        /**
         * The URL for the S3 location where model artifacts are stored.
         */
        modelDataUrl?: string;
    }

    export interface ModelContainerImageConfig {
        /**
         * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
         */
        repositoryAccessMode: string;
    }

    export interface ModelPrimaryContainer {
        /**
         * The DNS host name for the container.
         */
        containerHostname?: string;
        /**
         * Environment variables for the Docker container.
         * A list of key value pairs.
         */
        environment?: {[key: string]: string};
        /**
         * The registry path where the inference code image is stored in Amazon ECR.
         */
        image: string;
        /**
         * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For more information see [Using a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). see Image Config.
         */
        imageConfig?: outputs.sagemaker.ModelPrimaryContainerImageConfig;
        /**
         * The container hosts value `SingleModel/MultiModel`. The default value is `SingleModel`.
         */
        mode?: string;
        /**
         * The URL for the S3 location where model artifacts are stored.
         */
        modelDataUrl?: string;
    }

    export interface ModelPrimaryContainerImageConfig {
        /**
         * Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). Allowed values are: `Platform` and `Vpc`.
         */
        repositoryAccessMode: string;
    }

    export interface ModelVpcConfig {
        securityGroupIds: string[];
        subnets: string[];
    }
}

export namespace secretsmanager {
    export interface GetSecretRotationRotationRule {
        automaticallyAfterDays: number;
    }

    export interface GetSecretRotationRule {
        automaticallyAfterDays: number;
    }

    export interface SecretRotationRotationRules {
        /**
         * Specifies the number of days between automatic scheduled rotations of the secret.
         */
        automaticallyAfterDays: number;
    }

    export interface SecretRotationRules {
        /**
         * Specifies the number of days between automatic scheduled rotations of the secret.
         */
        automaticallyAfterDays: number;
    }
}

export namespace servicediscovery {
    export interface ServiceDnsConfig {
        /**
         * An array that contains one DnsRecord object for each resource record set.
         */
        dnsRecords: outputs.servicediscovery.ServiceDnsConfigDnsRecord[];
        /**
         * The ID of the namespace to use for DNS configuration.
         */
        namespaceId: string;
        /**
         * The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED
         */
        routingPolicy?: string;
    }

    export interface ServiceDnsConfigDnsRecord {
        /**
         * The amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
         */
        ttl: number;
        /**
         * The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
         */
        type: string;
    }

    export interface ServiceHealthCheckConfig {
        /**
         * The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
         */
        failureThreshold?: number;
        /**
         * The path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
         */
        resourcePath?: string;
        /**
         * The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP
         */
        type?: string;
    }

    export interface ServiceHealthCheckCustomConfig {
        /**
         * The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.
         */
        failureThreshold?: number;
    }
}

export namespace ses {
    export interface EventDestinationCloudwatchDestination {
        /**
         * The default value for the event
         */
        defaultValue: string;
        /**
         * The name for the dimension
         */
        dimensionName: string;
        /**
         * The source for the value. It can be either `"messageTag"` or `"emailHeader"`
         */
        valueSource: string;
    }

    export interface EventDestinationKinesisDestination {
        /**
         * The ARN of the role that has permissions to access the Kinesis Stream
         */
        roleArn: string;
        /**
         * The ARN of the Kinesis Stream
         */
        streamArn: string;
    }

    export interface EventDestinationSnsDestination {
        /**
         * The ARN of the SNS topic
         */
        topicArn: string;
    }

    export interface ReceiptRuleAddHeaderAction {
        /**
         * The name of the header to add
         */
        headerName: string;
        /**
         * The value of the header to add
         */
        headerValue: string;
        /**
         * The position of the action in the receipt rule
         */
        position: number;
    }

    export interface ReceiptRuleBounceAction {
        /**
         * The message to send
         */
        message: string;
        /**
         * The position of the action in the receipt rule
         */
        position: number;
        /**
         * The email address of the sender
         */
        sender: string;
        /**
         * The RFC 5321 SMTP reply code
         */
        smtpReplyCode: string;
        /**
         * The RFC 3463 SMTP enhanced status code
         */
        statusCode?: string;
        /**
         * The ARN of an SNS topic to notify
         */
        topicArn?: string;
    }

    export interface ReceiptRuleLambdaAction {
        /**
         * The ARN of the Lambda function to invoke
         */
        functionArn: string;
        /**
         * Event or RequestResponse
         */
        invocationType: string;
        /**
         * The position of the action in the receipt rule
         */
        position: number;
        /**
         * The ARN of an SNS topic to notify
         */
        topicArn?: string;
    }

    export interface ReceiptRuleS3Action {
        /**
         * The name of the S3 bucket
         */
        bucketName: string;
        /**
         * The ARN of the KMS key
         */
        kmsKeyArn?: string;
        /**
         * The key prefix of the S3 bucket
         */
        objectKeyPrefix?: string;
        /**
         * The position of the action in the receipt rule
         */
        position: number;
        /**
         * The ARN of an SNS topic to notify
         */
        topicArn?: string;
    }

    export interface ReceiptRuleSnsAction {
        /**
         * The position of the action in the receipt rule
         */
        position: number;
        /**
         * The ARN of an SNS topic to notify
         */
        topicArn: string;
    }

    export interface ReceiptRuleStopAction {
        /**
         * The position of the action in the receipt rule
         */
        position: number;
        /**
         * The scope to apply
         */
        scope: string;
        /**
         * The ARN of an SNS topic to notify
         */
        topicArn?: string;
    }

    export interface ReceiptRuleWorkmailAction {
        /**
         * The ARN of the WorkMail organization
         */
        organizationArn: string;
        /**
         * The position of the action in the receipt rule
         */
        position: number;
        /**
         * The ARN of an SNS topic to notify
         */
        topicArn?: string;
    }
}

export namespace signer {
    export interface GetSigningJobRevocationRecord {
        reason: string;
        revokedAt: string;
        revokedBy: string;
    }

    export interface GetSigningJobSignedObject {
        s3s: outputs.signer.GetSigningJobSignedObjectS3[];
    }

    export interface GetSigningJobSignedObjectS3 {
        bucket: string;
        key: string;
    }

    export interface GetSigningJobSource {
        s3s: outputs.signer.GetSigningJobSourceS3[];
    }

    export interface GetSigningJobSourceS3 {
        bucket: string;
        key: string;
        version: string;
    }

    export interface GetSigningProfileRevocationRecord {
        revocationEffectiveFrom: string;
        revokedAt: string;
        revokedBy: string;
    }

    export interface GetSigningProfileSignatureValidityPeriod {
        type: string;
        value: number;
    }

    export interface SigningJobDestination {
        /**
         * A configuration block describing the S3 Destination object: See S3 Destination below for details.
         */
        s3: outputs.signer.SigningJobDestinationS3;
    }

    export interface SigningJobDestinationS3 {
        /**
         * Name of the S3 bucket.
         */
        bucket: string;
        /**
         * An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
         */
        prefix?: string;
    }

    export interface SigningJobRevocationRecord {
        reason: string;
        revokedAt: string;
        revokedBy: string;
    }

    export interface SigningJobSignedObject {
        /**
         * A configuration block describing the S3 Destination object: See S3 Destination below for details.
         */
        s3s: outputs.signer.SigningJobSignedObjectS3[];
    }

    export interface SigningJobSignedObjectS3 {
        /**
         * Name of the S3 bucket.
         */
        bucket: string;
        /**
         * Key name of the bucket object that contains your unsigned code.
         */
        key: string;
    }

    export interface SigningJobSource {
        /**
         * A configuration block describing the S3 Destination object: See S3 Destination below for details.
         */
        s3: outputs.signer.SigningJobSourceS3;
    }

    export interface SigningJobSourceS3 {
        /**
         * Name of the S3 bucket.
         */
        bucket: string;
        /**
         * Key name of the bucket object that contains your unsigned code.
         */
        key: string;
        /**
         * Version of your source image in your version enabled S3 bucket.
         */
        version: string;
    }

    export interface SigningProfileRevocationRecord {
        revocationEffectiveFrom: string;
        revokedAt: string;
        revokedBy: string;
    }

    export interface SigningProfileSignatureValidityPeriod {
        type: string;
        value: number;
    }
}

export namespace ssm {
    export interface AssociationOutputLocation {
        /**
         * The S3 bucket name.
         */
        s3BucketName: string;
        /**
         * The S3 bucket prefix. Results stored in the root if not configured.
         */
        s3KeyPrefix?: string;
    }

    export interface AssociationTarget {
        /**
         * Either `InstanceIds` or `tag:Tag Name` to specify an EC2 tag.
         */
        key: string;
        /**
         * A list of instance IDs or tag values. AWS currently limits this list size to one value.
         */
        values: string[];
    }

    export interface DocumentAttachmentsSource {
        /**
         * The key describing the location of an attachment to a document. Valid key types include: `SourceUrl` and `S3FileUrl`
         */
        key: string;
        /**
         * The name of the document attachment file
         */
        name?: string;
        /**
         * The value describing the location of an attachment to a document
         */
        values: string[];
    }

    export interface DocumentParameter {
        defaultValue?: string;
        /**
         * The description of the document.
         */
        description?: string;
        /**
         * The name of the document.
         */
        name?: string;
        type?: string;
    }

    export interface MaintenanceWindowTargetTarget {
        key: string;
        values: string[];
    }

    export interface MaintenanceWindowTaskTarget {
        key: string;
        /**
         * The array of strings.
         */
        values: string[];
    }

    export interface MaintenanceWindowTaskTaskInvocationParameters {
        /**
         * The parameters for an AUTOMATION task type. Documented below.
         */
        automationParameters?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParameters;
        /**
         * The parameters for a LAMBDA task type. Documented below.
         */
        lambdaParameters?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersLambdaParameters;
        /**
         * The parameters for a RUN_COMMAND task type. Documented below.
         */
        runCommandParameters?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters;
        /**
         * The parameters for a STEP_FUNCTIONS task type. Documented below.
         */
        stepFunctionsParameters?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters;
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersAutomationParameters {
        /**
         * The version of an Automation document to use during task execution.
         */
        documentVersion?: string;
        /**
         * The parameters for the RUN_COMMAND task execution. Documented below.
         */
        parameters?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter[];
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersAutomationParametersParameter {
        /**
         * The parameter name.
         */
        name: string;
        /**
         * The array of strings.
         */
        values: string[];
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersLambdaParameters {
        /**
         * Pass client-specific information to the Lambda function that you are invoking.
         */
        clientContext?: string;
        /**
         * JSON to provide to your Lambda function as input.
         */
        payload?: string;
        /**
         * Specify a Lambda function version or alias name.
         */
        qualifier?: string;
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersRunCommandParameters {
        /**
         * Information about the command(s) to execute.
         */
        comment?: string;
        /**
         * The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
         */
        documentHash?: string;
        /**
         * SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: `Sha256` and `Sha1`
         */
        documentHashType?: string;
        /**
         * Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
         */
        notificationConfig?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig;
        /**
         * The name of the Amazon S3 bucket.
         */
        outputS3Bucket?: string;
        /**
         * The Amazon S3 bucket subfolder.
         */
        outputS3KeyPrefix?: string;
        /**
         * The parameters for the RUN_COMMAND task execution. Documented below.
         */
        parameters?: outputs.ssm.MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter[];
        /**
         * The IAM service role to assume during task execution.
         */
        serviceRoleArn?: string;
        /**
         * If this time is reached and the command has not already started executing, it doesn't run.
         */
        timeoutSeconds?: number;
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersNotificationConfig {
        /**
         * An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
         */
        notificationArn?: string;
        /**
         * The different events for which you can receive notifications. Valid values: `All`, `InProgress`, `Success`, `TimedOut`, `Cancelled`, and `Failed`
         */
        notificationEvents?: string[];
        /**
         * When specified with `Command`, receive notification when the status of a command changes. When specified with `Invocation`, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: `Command` and `Invocation`
         */
        notificationType?: string;
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersRunCommandParametersParameter {
        /**
         * The parameter name.
         */
        name: string;
        /**
         * The array of strings.
         */
        values: string[];
    }

    export interface MaintenanceWindowTaskTaskInvocationParametersStepFunctionsParameters {
        /**
         * The inputs for the STEP_FUNCTION task.
         */
        input?: string;
        /**
         * The name of the STEP_FUNCTION task.
         */
        name?: string;
    }

    export interface PatchBaselineApprovalRule {
        /**
         * The number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 100.
         */
        approveAfterDays: number;
        /**
         * Defines the compliance level for patches approved by this rule. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
         */
        complianceLevel?: string;
        /**
         * Boolean enabling the application of non-security updates. The default value is 'false'. Valid for Linux instances only.
         */
        enableNonSecurity?: boolean;
        /**
         * The patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid Keys are `PATCH_SET | PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
         */
        patchFilters: outputs.ssm.PatchBaselineApprovalRulePatchFilter[];
    }

    export interface PatchBaselineApprovalRulePatchFilter {
        key: string;
        values: string[];
    }

    export interface PatchBaselineGlobalFilter {
        key: string;
        values: string[];
    }

    export interface ResourceDataSyncS3Destination {
        /**
         * Name of S3 bucket where the aggregated data is stored.
         */
        bucketName: string;
        /**
         * ARN of an encryption key for a destination in Amazon S3.
         */
        kmsKeyArn?: string;
        /**
         * Prefix for the bucket.
         */
        prefix?: string;
        /**
         * Region with the bucket targeted by the Resource Data Sync.
         */
        region: string;
        /**
         * A supported sync format. Only JsonSerDe is currently supported. Defaults to JsonSerDe.
         */
        syncFormat?: string;
    }
}

export namespace storagegateway {
    export interface GatewayGatewayNetworkInterface {
        /**
         * The Internet Protocol version 4 (IPv4) address of the interface.
         */
        ipv4Address: string;
    }

    export interface GatewaySmbActiveDirectorySettings {
        activeDirectoryStatus: string;
        /**
         * List of IPv4 addresses, NetBIOS names, or host names of your domain server.
         * If you need to specify the port number include it after the colon (“:”). For example, `mydc.mydomain.com:389`.
         */
        domainControllers?: string[];
        /**
         * The name of the domain that you want the gateway to join.
         */
        domainName: string;
        /**
         * The organizational unit (OU) is a container in an Active Directory that can hold users, groups,
         * computers, and other OUs and this parameter specifies the OU that the gateway will join within the AD domain.
         */
        organizationalUnit?: string;
        /**
         * The password of the user who has permission to add the gateway to the Active Directory domain.
         */
        password: string;
        /**
         * Specifies the time in seconds, in which the JoinDomain operation must complete. The default is `20` seconds.
         */
        timeoutInSeconds?: number;
        /**
         * The user name of user who has permission to add the gateway to the Active Directory domain.
         */
        username: string;
    }

    export interface NfsFileShareCacheAttributes {
        /**
         * Refreshes a file share's cache by using Time To Live (TTL).
         * TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
         * to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
         */
        cacheStaleTimeoutInSeconds?: number;
    }

    export interface NfsFileShareNfsFileShareDefaults {
        /**
         * The Unix directory mode in the string form "nnnn". Defaults to `"0777"`.
         */
        directoryMode?: string;
        /**
         * The Unix file mode in the string form "nnnn". Defaults to `"0666"`.
         */
        fileMode?: string;
        /**
         * The default group ID for the file share (unless the files have another group ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
         */
        groupId?: string;
        /**
         * The default owner ID for the file share (unless the files have another owner ID specified). Defaults to `65534` (`nfsnobody`). Valid values: `0` through `4294967294`.
         */
        ownerId?: string;
    }

    export interface SmbFileShareCacheAttributes {
        /**
         * Refreshes a file share's cache by using Time To Live (TTL).
         * TTL is the length of time since the last refresh after which access to the directory would cause the file gateway
         * to first refresh that directory's contents from the Amazon S3 bucket. Valid Values: 300 to 2,592,000 seconds (5 minutes to 30 days)
         */
        cacheStaleTimeoutInSeconds?: number;
    }
}

export namespace transfer {
    export interface ServerEndpointDetails {
        /**
         * A list of address allocation IDs that are required to attach an Elastic IP address to your SFTP server's endpoint. This property can only be used when `endpointType` is set to `VPC`.
         */
        addressAllocationIds?: string[];
        /**
         * A list of subnet IDs that are required to host your SFTP server endpoint in your VPC. This property can only be used when `endpointType` is set to `VPC`.
         */
        subnetIds?: string[];
        /**
         * The ID of the VPC endpoint. This property can only be used when `endpointType` is set to `VPC_ENDPOINT`
         */
        vpcEndpointId: string;
        /**
         * The VPC ID of the virtual private cloud in which the SFTP server's endpoint will be hosted. This property can only be used when `endpointType` is set to `VPC`.
         */
        vpcId?: string;
    }

    export interface UserHomeDirectoryMapping {
        /**
         * Represents an entry and a target.
         */
        entry: string;
        /**
         * Represents the map target.
         */
        target: string;
    }
}

export namespace waf {
    export interface ByteMatchSetByteMatchTuple {
        /**
         * The part of a web request that you want to search, such as a specified header or a query string.
         */
        fieldToMatch: outputs.waf.ByteMatchSetByteMatchTupleFieldToMatch;
        /**
         * Within the portion of a web request that you want to search
         * (for example, in the query string, if any), specify where you want to search.
         * e.g. `CONTAINS`, `CONTAINS_WORD` or `EXACTLY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchTuple.html#WAF-Type-ByteMatchTuple-PositionalConstraint)
         * for all supported values.
         */
        positionalConstraint: string;
        /**
         * The value that you want to search for. e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchTuple.html#WAF-Type-ByteMatchTuple-TargetString)
         * for all supported values.
         */
        targetString?: string;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `targetString` before inspecting a request for a match.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchTuple.html#WAF-Type-ByteMatchTuple-TextTransformation)
         * for all supported values.
         */
        textTransformation: string;
    }

    export interface ByteMatchSetByteMatchTupleFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface GeoMatchSetGeoMatchConstraint {
        /**
         * The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
         */
        type: string;
        /**
         * The country that you want AWS WAF to search for.
         * This is the two-letter country code, e.g. `US`, `CA`, `RU`, `CN`, etc.
         * See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchConstraint.html) for all supported values.
         */
        value: string;
    }

    export interface IpSetIpSetDescriptor {
        /**
         * Type of the IP address - `IPV4` or `IPV6`.
         */
        type: string;
        /**
         * An IPv4 or IPv6 address specified via CIDR notation. e.g. `192.0.2.44/32` or `1111:0000:0000:0000:0000:0000:0000:0000/64`
         */
        value: string;
    }

    export interface RateBasedRulePredicate {
        /**
         * A unique identifier for a predicate in the rule, such as Byte Match Set ID or IPSet ID.
         */
        dataId: string;
        /**
         * Set this to `false` if you want to allow, block, or count requests
         * based on the settings in the specified `ByteMatchSet`, `IPSet`, `SqlInjectionMatchSet`, `XssMatchSet`, or `SizeConstraintSet`.
         * For example, if an IPSet includes the IP address `192.0.2.44`, AWS WAF will allow or block requests based on that IP address.
         * If set to `true`, AWS WAF will allow, block, or count requests based on all IP addresses _except_ `192.0.2.44`.
         */
        negated: boolean;
        /**
         * The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`.
         */
        type: string;
    }

    export interface RegexMatchSetRegexMatchTuple {
        /**
         * The part of a web request that you want to search, such as a specified header or a query string.
         */
        fieldToMatch: outputs.waf.RegexMatchSetRegexMatchTupleFieldToMatch;
        /**
         * The ID of a `WAF Regex Pattern Set`.
         */
        regexPatternSetId: string;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchTuple.html#WAF-Type-ByteMatchTuple-TextTransformation)
         * for all supported values.
         */
        textTransformation: string;
    }

    export interface RegexMatchSetRegexMatchTupleFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface RuleGroupActivatedRule {
        /**
         * Specifies the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.
         */
        action: outputs.waf.RuleGroupActivatedRuleAction;
        /**
         * Specifies the order in which the rules are evaluated. Rules with a lower value are evaluated before rules with a higher value.
         */
        priority: number;
        /**
         * The ID of a `wafRule`
         */
        ruleId: string;
        /**
         * The rule type, either `REGULAR`, `RATE_BASED`, or `GROUP`. Defaults to `REGULAR`.
         */
        type?: string;
    }

    export interface RuleGroupActivatedRuleAction {
        /**
         * The rule type, either `REGULAR`, `RATE_BASED`, or `GROUP`. Defaults to `REGULAR`.
         */
        type: string;
    }

    export interface RulePredicate {
        /**
         * A unique identifier for a predicate in the rule, such as Byte Match Set ID or IPSet ID.
         */
        dataId: string;
        /**
         * Set this to `false` if you want to allow, block, or count requests
         * based on the settings in the specified `wafByteMatchSet`, `wafIpset`, `aws.waf.SizeConstraintSet`, `aws.waf.SqlInjectionMatchSet` or `aws.waf.XssMatchSet`.
         * For example, if an IPSet includes the IP address `192.0.2.44`, AWS WAF will allow or block requests based on that IP address.
         * If set to `true`, AWS WAF will allow, block, or count requests based on all IP addresses except `192.0.2.44`.
         */
        negated: boolean;
        /**
         * The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`.
         */
        type: string;
    }

    export interface SizeConstraintSetSizeConstraint {
        /**
         * The type of comparison you want to perform.
         * e.g. `EQ`, `NE`, `LT`, `GT`.
         * See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_wafRegional_SizeConstraint.html) for all supported values.
         */
        comparisonOperator: string;
        /**
         * Specifies where in a web request to look for the size constraint.
         */
        fieldToMatch: outputs.waf.SizeConstraintSetSizeConstraintFieldToMatch;
        /**
         * The size in bytes that you want to compare against the size of the specified `fieldToMatch`.
         * Valid values are between 0 - 21474836480 bytes (0 - 20 GB).
         */
        size: number;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `fieldToMatch` before inspecting a request for a match.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SizeConstraint.html#WAF-Type-SizeConstraint-TextTransformation)
         * for all supported values.
         * **Note:** if you choose `BODY` as `type`, you must choose `NONE` because CloudFront forwards only the first 8192 bytes for inspection.
         */
        textTransformation: string;
    }

    export interface SizeConstraintSetSizeConstraintFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface SqlInjectionMatchSetSqlInjectionMatchTuple {
        /**
         * Specifies where in a web request to look for snippets of malicious SQL code.
         */
        fieldToMatch: outputs.waf.SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatch;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `fieldToMatch` before inspecting a request for a match.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SqlInjectionMatchTuple.html#WAF-Type-SqlInjectionMatchTuple-TextTransformation)
         * for all supported values.
         */
        textTransformation: string;
    }

    export interface SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface WebAclDefaultAction {
        /**
         * The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.
         */
        type: string;
    }

    export interface WebAclLoggingConfiguration {
        /**
         * Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
         */
        logDestination: string;
        /**
         * Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
         */
        redactedFields?: outputs.waf.WebAclLoggingConfigurationRedactedFields;
    }

    export interface WebAclLoggingConfigurationRedactedFields {
        /**
         * Set of configuration blocks for fields to redact. Detailed below.
         */
        fieldToMatches: outputs.waf.WebAclLoggingConfigurationRedactedFieldsFieldToMatch[];
    }

    export interface WebAclLoggingConfigurationRedactedFieldsFieldToMatch {
        /**
         * When the value of `type` is `HEADER`, enter the name of the header that you want the WAF to search, for example, `User-Agent` or `Referer`. If the value of `type` is any other value, omit `data`.
         */
        data?: string;
        /**
         * The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.
         */
        type: string;
    }

    export interface WebAclRule {
        /**
         * The action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Not used if `type` is `GROUP`.
         */
        action?: outputs.waf.WebAclRuleAction;
        /**
         * Override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Only used if `type` is `GROUP`.
         */
        overrideAction?: outputs.waf.WebAclRuleOverrideAction;
        /**
         * Specifies the order in which the rules in a WebACL are evaluated.
         * Rules with a lower value are evaluated before rules with a higher value.
         */
        priority: number;
        /**
         * ID of the associated WAF (Global) rule (e.g. `aws.waf.Rule`). WAF (Regional) rules cannot be used.
         */
        ruleId: string;
        /**
         * The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.
         */
        type?: string;
    }

    export interface WebAclRuleAction {
        /**
         * The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.
         */
        type: string;
    }

    export interface WebAclRuleOverrideAction {
        /**
         * The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.
         */
        type: string;
    }

    export interface XssMatchSetXssMatchTuple {
        /**
         * Specifies where in a web request to look for cross-site scripting attacks.
         */
        fieldToMatch: outputs.waf.XssMatchSetXssMatchTupleFieldToMatch;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `targetString` before inspecting a request for a match.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_XssMatchTuple.html#WAF-Type-XssMatchTuple-TextTransformation)
         * for all supported values.
         */
        textTransformation: string;
    }

    export interface XssMatchSetXssMatchTupleFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }
}

export namespace wafregional {
    export interface ByteMatchSetByteMatchTuple {
        /**
         * Settings for the ByteMatchTuple. FieldToMatch documented below.
         */
        fieldToMatch: outputs.wafregional.ByteMatchSetByteMatchTupleFieldToMatch;
        /**
         * Within the portion of a web request that you want to search.
         */
        positionalConstraint: string;
        /**
         * The value that you want AWS WAF to search for. The maximum length of the value is 50 bytes.
         */
        targetString?: string;
        /**
         * The formatting way for web request.
         */
        textTransformation: string;
    }

    export interface ByteMatchSetByteMatchTupleFieldToMatch {
        /**
         * When the value of Type is HEADER, enter the name of the header that you want AWS WAF to search, for example, User-Agent or Referer. If the value of Type is any other value, omit Data.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         */
        type: string;
    }

    export interface GeoMatchSetGeoMatchConstraint {
        /**
         * The type of geographical area you want AWS WAF to search for. Currently Country is the only valid value.
         */
        type: string;
        /**
         * The country that you want AWS WAF to search for.
         * This is the two-letter country code, e.g. `US`, `CA`, `RU`, `CN`, etc.
         * See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchConstraint.html) for all supported values.
         */
        value: string;
    }

    export interface IpSetIpSetDescriptor {
        /**
         * The string like IPV4 or IPV6.
         */
        type: string;
        /**
         * The CIDR notation.
         */
        value: string;
    }

    export interface RateBasedRulePredicate {
        /**
         * A unique identifier for a predicate in the rule, such as Byte Match Set ID or IPSet ID.
         */
        dataId: string;
        /**
         * Set this to `false` if you want to allow, block, or count requests
         * based on the settings in the specified `ByteMatchSet`, `IPSet`, `SqlInjectionMatchSet`, `XssMatchSet`, or `SizeConstraintSet`.
         * For example, if an IPSet includes the IP address `192.0.2.44`, AWS WAF will allow or block requests based on that IP address.
         * If set to `true`, AWS WAF will allow, block, or count requests based on all IP addresses _except_ `192.0.2.44`.
         */
        negated: boolean;
        /**
         * The type of predicate in a rule. Valid values: `ByteMatch`, `GeoMatch`, `IPMatch`, `RegexMatch`, `SizeConstraint`, `SqlInjectionMatch`, or `XssMatch`.
         */
        type: string;
    }

    export interface RegexMatchSetRegexMatchTuple {
        /**
         * The part of a web request that you want to search, such as a specified header or a query string.
         */
        fieldToMatch: outputs.wafregional.RegexMatchSetRegexMatchTupleFieldToMatch;
        /**
         * The ID of a `WAF Regex Pattern Set`.
         */
        regexPatternSetId: string;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchTuple.html#WAF-Type-ByteMatchTuple-TextTransformation)
         * for all supported values.
         */
        textTransformation: string;
    }

    export interface RegexMatchSetRegexMatchTupleFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface RuleGroupActivatedRule {
        /**
         * Specifies the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.
         */
        action: outputs.wafregional.RuleGroupActivatedRuleAction;
        /**
         * Specifies the order in which the rules are evaluated. Rules with a lower value are evaluated before rules with a higher value.
         */
        priority: number;
        /**
         * The ID of a `wafRegionalRule`
         */
        ruleId: string;
        /**
         * The rule type, either `REGULAR`, `RATE_BASED`, or `GROUP`. Defaults to `REGULAR`.
         */
        type?: string;
    }

    export interface RuleGroupActivatedRuleAction {
        /**
         * The rule type, either `REGULAR`, `RATE_BASED`, or `GROUP`. Defaults to `REGULAR`.
         */
        type: string;
    }

    export interface RulePredicate {
        dataId: string;
        negated: boolean;
        type: string;
    }

    export interface SizeConstraintSetSizeConstraint {
        /**
         * The type of comparison you want to perform.
         * e.g. `EQ`, `NE`, `LT`, `GT`.
         * See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_wafRegional_SizeConstraint.html) for all supported values.
         */
        comparisonOperator: string;
        /**
         * Specifies where in a web request to look for the size constraint.
         */
        fieldToMatch: outputs.wafregional.SizeConstraintSetSizeConstraintFieldToMatch;
        /**
         * The size in bytes that you want to compare against the size of the specified `fieldToMatch`.
         * Valid values are between 0 - 21474836480 bytes (0 - 20 GB).
         */
        size: number;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `fieldToMatch` before inspecting a request for a match.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_SizeConstraint.html#WAF-Type-SizeConstraint-TextTransformation)
         * for all supported values.
         * **Note:** if you choose `BODY` as `type`, you must choose `NONE` because CloudFront forwards only the first 8192 bytes for inspection.
         */
        textTransformation: string;
    }

    export interface SizeConstraintSetSizeConstraintFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface SqlInjectionMatchSetSqlInjectionMatchTuple {
        /**
         * Specifies where in a web request to look for snippets of malicious SQL code.
         */
        fieldToMatch: outputs.wafregional.SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatch;
        /**
         * Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
         * If you specify a transformation, AWS WAF performs the transformation on `fieldToMatch` before inspecting a request for a match.
         * e.g. `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
         * See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_SqlInjectionMatchTuple.html#WAF-Type-regional_SqlInjectionMatchTuple-TextTransformation)
         * for all supported values.
         */
        textTransformation: string;
    }

    export interface SqlInjectionMatchSetSqlInjectionMatchTupleFieldToMatch {
        /**
         * When `type` is `HEADER`, enter the name of the header that you want to search, e.g. `User-Agent` or `Referer`.
         * If `type` is any other value, omit this field.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string.
         * e.g. `HEADER`, `METHOD` or `BODY`.
         * See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_FieldToMatch.html)
         * for all supported values.
         */
        type: string;
    }

    export interface WebAclDefaultAction {
        /**
         * Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. e.g. `ALLOW`, `BLOCK` or `COUNT`
         */
        type: string;
    }

    export interface WebAclLoggingConfiguration {
        /**
         * Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
         */
        logDestination: string;
        /**
         * Configuration block containing parts of the request that you want redacted from the logs. Detailed below.
         */
        redactedFields?: outputs.wafregional.WebAclLoggingConfigurationRedactedFields;
    }

    export interface WebAclLoggingConfigurationRedactedFields {
        /**
         * Set of configuration blocks for fields to redact. Detailed below.
         */
        fieldToMatches: outputs.wafregional.WebAclLoggingConfigurationRedactedFieldsFieldToMatch[];
    }

    export interface WebAclLoggingConfigurationRedactedFieldsFieldToMatch {
        /**
         * When the value of `type` is `HEADER`, enter the name of the header that you want the WAF to search, for example, `User-Agent` or `Referer`. If the value of `type` is any other value, omit `data`.
         */
        data?: string;
        /**
         * Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. e.g. `ALLOW`, `BLOCK` or `COUNT`
         */
        type: string;
    }

    export interface WebAclRule {
        /**
         * Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if `type` is `GROUP`. Detailed below.
         */
        action?: outputs.wafregional.WebAclRuleAction;
        /**
         * Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if `type` is `GROUP`. Detailed below.
         */
        overrideAction?: outputs.wafregional.WebAclRuleOverrideAction;
        /**
         * Specifies the order in which the rules in a WebACL are evaluated.
         * Rules with a lower value are evaluated before rules with a higher value.
         */
        priority: number;
        /**
         * ID of the associated WAF (Regional) rule (e.g. `aws.wafregional.Rule`). WAF (Global) rules cannot be used.
         */
        ruleId: string;
        /**
         * Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. e.g. `ALLOW`, `BLOCK` or `COUNT`
         */
        type?: string;
    }

    export interface WebAclRuleAction {
        /**
         * Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. e.g. `ALLOW`, `BLOCK` or `COUNT`
         */
        type: string;
    }

    export interface WebAclRuleOverrideAction {
        /**
         * Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. e.g. `ALLOW`, `BLOCK` or `COUNT`
         */
        type: string;
    }

    export interface XssMatchSetXssMatchTuple {
        /**
         * Specifies where in a web request to look for cross-site scripting attacks.
         */
        fieldToMatch: outputs.wafregional.XssMatchSetXssMatchTupleFieldToMatch;
        /**
         * Which text transformation, if any, to perform on the web request before inspecting the request for cross-site scripting attacks.
         */
        textTransformation: string;
    }

    export interface XssMatchSetXssMatchTupleFieldToMatch {
        /**
         * When the value of `type` is `HEADER`, enter the name of the header that you want the WAF to search, for example, `User-Agent` or `Referer`. If the value of `type` is any other value, omit `data`.
         */
        data?: string;
        /**
         * The part of the web request that you want AWS WAF to search for a specified string. e.g. `HEADER` or `METHOD`
         */
        type: string;
    }
}

export namespace wafv2 {
    export interface GetRegexPatternSetRegularExpression {
        /**
         * (Required) The string representing the regular expression, see the AWS WAF [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-regex-pattern-set-creating.html) for more information.
         */
        regexString: string;
    }

    export interface RegexPatternSetRegularExpression {
        /**
         * The string representing the regular expression, see the AWS WAF [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/waf-regex-pattern-set-creating.html) for more information.
         */
        regexString: string;
    }

    export interface RuleGroupRule {
        /**
         * The action that AWS WAF should take on a web request when it matches the rule's statement. Settings at the `aws.wafv2.WebAcl` level can override the rule action setting. See Action below for details.
         */
        action: outputs.wafv2.RuleGroupRuleAction;
        /**
         * A friendly name of the rule.
         */
        name: string;
        /**
         * If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the `rules` in order based on the value of `priority`. AWS WAF processes rules with lower priority first.
         */
        priority: number;
        /**
         * The AWS WAF processing statement for the rule, for example `byteMatchStatement` or `geoMatchStatement`. See Statement below for details.
         */
        statement: outputs.wafv2.RuleGroupRuleStatement;
        /**
         * Defines and enables Amazon CloudWatch metrics and web request sample collection. See Visibility Configuration below for details.
         */
        visibilityConfig: outputs.wafv2.RuleGroupRuleVisibilityConfig;
    }

    export interface RuleGroupRuleAction {
        /**
         * Instructs AWS WAF to allow the web request.
         */
        allow?: outputs.wafv2.RuleGroupRuleActionAllow;
        /**
         * Instructs AWS WAF to block the web request.
         */
        block?: outputs.wafv2.RuleGroupRuleActionBlock;
        /**
         * Instructs AWS WAF to count the web request and allow it.
         */
        count?: outputs.wafv2.RuleGroupRuleActionCount;
    }

    export interface RuleGroupRuleActionAllow {
    }

    export interface RuleGroupRuleActionBlock {
    }

    export interface RuleGroupRuleActionCount {
    }

    export interface RuleGroupRuleStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementAndStatementStatement[];
    }

    export interface RuleGroupRuleStatementAndStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatement[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatement[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatement[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementNotStatementStatement[];
    }

    export interface RuleGroupRuleStatementNotStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatement[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatement[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatement[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementOrStatementStatement[];
    }

    export interface RuleGroupRuleStatementOrStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatement[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatement[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatement[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementTextTransformation[];
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.RuleGroupRuleStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchBody {
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface RuleGroupRuleStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface RuleGroupRuleStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface RuleGroupRuleVisibilityConfig {
        /**
         * A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
         */
        cloudwatchMetricsEnabled: boolean;
        /**
         * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
         */
        metricName: string;
        /**
         * A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
         */
        sampledRequestsEnabled: boolean;
    }

    export interface RuleGroupVisibilityConfig {
        /**
         * A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
         */
        cloudwatchMetricsEnabled: boolean;
        /**
         * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
         */
        metricName: string;
        /**
         * A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
         */
        sampledRequestsEnabled: boolean;
    }

    export interface WebAclDefaultAction {
        /**
         * Specifies that AWS WAF should allow requests by default.
         */
        allow?: outputs.wafv2.WebAclDefaultActionAllow;
        /**
         * Specifies that AWS WAF should block requests by default.
         */
        block?: outputs.wafv2.WebAclDefaultActionBlock;
    }

    export interface WebAclDefaultActionAllow {
    }

    export interface WebAclDefaultActionBlock {
    }

    export interface WebAclLoggingConfigurationRedactedField {
        /**
         * Redact all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldAllQueryArguments;
        /**
         * Redact the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldBody;
        /**
         * Redact the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldMethod;
        /**
         * Redact the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldQueryString;
        /**
         * Redact a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldSingleHeader;
        /**
         * Redact a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldSingleQueryArgument;
        /**
         * Redact the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclLoggingConfigurationRedactedFieldUriPath;
    }

    export interface WebAclLoggingConfigurationRedactedFieldAllQueryArguments {
    }

    export interface WebAclLoggingConfigurationRedactedFieldBody {
    }

    export interface WebAclLoggingConfigurationRedactedFieldMethod {
    }

    export interface WebAclLoggingConfigurationRedactedFieldQueryString {
    }

    export interface WebAclLoggingConfigurationRedactedFieldSingleHeader {
        /**
         * The name of the query header to redact. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclLoggingConfigurationRedactedFieldSingleQueryArgument {
        /**
         * The name of the query header to redact. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclLoggingConfigurationRedactedFieldUriPath {
    }

    export interface WebAclRule {
        /**
         * The action that AWS WAF should take on a web request when it matches the rule's statement. This is used only for rules whose **statements do not reference a rule group**. See Action below for details.
         */
        action?: outputs.wafv2.WebAclRuleAction;
        /**
         * A friendly name of the rule.
         */
        name: string;
        /**
         * The override action to apply to the rules in a rule group. Used only for rule **statements that reference a rule group**, like `ruleGroupReferenceStatement` and `managedRuleGroupStatement`. See Override Action below for details.
         */
        overrideAction?: outputs.wafv2.WebAclRuleOverrideAction;
        /**
         * If you define more than one Rule in a WebACL, AWS WAF evaluates each request against the `rules` in order based on the value of `priority`. AWS WAF processes rules with lower priority first.
         */
        priority: number;
        /**
         * The AWS WAF processing statement for the rule, for example `byteMatchStatement` or `geoMatchStatement`. See Statement below for details.
         */
        statement: outputs.wafv2.WebAclRuleStatement;
        /**
         * Defines and enables Amazon CloudWatch metrics and web request sample collection. See Visibility Configuration below for details.
         */
        visibilityConfig: outputs.wafv2.WebAclRuleVisibilityConfig;
    }

    export interface WebAclRuleAction {
        /**
         * Instructs AWS WAF to allow the web request. Configure as an empty block `{}`.
         */
        allow?: outputs.wafv2.WebAclRuleActionAllow;
        /**
         * Instructs AWS WAF to block the web request. Configure as an empty block `{}`.
         */
        block?: outputs.wafv2.WebAclRuleActionBlock;
        /**
         * Instructs AWS WAF to count the web request and allow it. Configure as an empty block `{}`.
         */
        count?: outputs.wafv2.WebAclRuleActionCount;
    }

    export interface WebAclRuleActionAllow {
    }

    export interface WebAclRuleActionBlock {
    }

    export interface WebAclRuleActionCount {
    }

    export interface WebAclRuleOverrideAction {
        /**
         * Override the rule action setting to count (i.e. only count matches). Configured as an empty block `{}`.
         */
        count?: outputs.wafv2.WebAclRuleOverrideActionCount;
        /**
         * Don't override the rule action setting. Configured as an empty block `{}`.
         */
        none?: outputs.wafv2.WebAclRuleOverrideActionNone;
    }

    export interface WebAclRuleOverrideActionCount {
    }

    export interface WebAclRuleOverrideActionNone {
    }

    export interface WebAclRuleStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementIpSetReferenceStatement;
        /**
         * A rule statement used to run the rules that are defined in a managed rule group.  This statement can not be nested. See Managed Rule Group Statement below for details.
         */
        managedRuleGroupStatement?: outputs.wafv2.WebAclRuleStatementManagedRuleGroupStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementOrStatement;
        /**
         * A rate-based rule tracks the rate of requests for each originating `IP address`, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any `5-minute` time span. This statement can not be nested. See Rate Based Statement below for details.
         */
        rateBasedStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement used to run the rules that are defined in an WAFv2 Rule Group. See Rule Group Reference Statement below for details.
         */
        ruleGroupReferenceStatement?: outputs.wafv2.WebAclRuleStatementRuleGroupReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementManagedRuleGroupStatement {
        /**
         * The `rules` whose actions are set to `COUNT` by the web ACL, regardless of the action that is set on the rule. See Excluded Rule below for details.
         */
        excludedRules?: outputs.wafv2.WebAclRuleStatementManagedRuleGroupStatementExcludedRule[];
        /**
         * The name of the managed rule group.
         */
        name: string;
        /**
         * The name of the managed rule group vendor.
         */
        vendorName: string;
    }

    export interface WebAclRuleStatementManagedRuleGroupStatementExcludedRule {
        /**
         * The name of the rule to exclude. If the rule group is managed by AWS, see the [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html) for a list of names in the appropriate rule group in use.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatement {
        /**
         * Setting that indicates how to aggregate the request counts. Valid values include: `FORWARDED_IP` or `IP`. Default: `IP`.
         */
        aggregateKeyType?: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. If `aggregateKeyType` is set to `FORWARDED_IP`, this block is required. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementForwardedIpConfig;
        /**
         * The limit on requests per 5-minute period for a single originating IP address.
         */
        limit: number;
        /**
         * An optional nested statement that narrows the scope of the rate-based statement to matching web requests. This can be any nestable statement, and you can nest statements at any level below this scope-down statement. See Statement above for details.
         */
        scopeDownStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatement {
        /**
         * A logical rule statement used to combine other rule statements with AND logic. See AND Statement below for details.
         */
        andStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatement;
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A logical rule statement used to negate the results of another rule statement. See NOT Statement below for details.
         */
        notStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatement;
        /**
         * A logical rule statement used to combine other rule statements with OR logic. See OR Statement below for details.
         */
        orStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatement {
        /**
         * The statements to combine with `AND` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementAndStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatement {
        /**
         * The statement to negate. You can use any statement that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementNotStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatement {
        /**
         * The statements to combine with `OR` logic. You can use any statements that can be nested. See Statement above for details.
         */
        statements: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatement[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatement {
        /**
         * A rule statement that defines a string match search for AWS WAF to apply to web requests. See Byte Match Statement below for details.
         */
        byteMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatement;
        /**
         * A rule statement used to identify web requests based on country of origin. See GEO Match Statement below for details.
         */
        geoMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementGeoMatchStatement;
        /**
         * A rule statement used to detect web requests coming from particular IP addresses or address ranges. See IP Set Reference Statement below for details.
         */
        ipSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement;
        /**
         * A rule statement used to search web request components for matches with regular expressions. See Regex Pattern Set Reference Statement below for details.
         */
        regexPatternSetReferenceStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement;
        /**
         * A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). See Size Constraint Statement below for more details.
         */
        sizeConstraintStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatement;
        /**
         * An SQL injection match condition identifies the part of web requests, such as the URI or the query string, that you want AWS WAF to inspect. See SQL Injection Match Statement below for details.
         */
        sqliMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatement;
        /**
         * A rule statement that defines a cross-site scripting (XSS) match search for AWS WAF to apply to web requests. See XSS Match Statement below for details.
         */
        xssMatchStatement?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatement;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch;
        /**
         * The area within the portion of a web request that you want AWS WAF to search for `searchString`. Valid values include the following: `EXACTLY`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CONTAINS_WORD`. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_ByteMatchStatement.html) for more information.
         */
        positionalConstraint: string;
        /**
         * A string value that you want AWS WAF to search for. AWS WAF searches only in the part of web requests that you designate for inspection in `fieldToMatch`. The maximum length of the value is 50 bytes.
         */
        searchString: string;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementByteMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementGeoMatchStatement {
        /**
         * An array of two-character country codes, for example, [ "US", "CN" ], from the alpha-2 country ISO codes of the `ISO 3166` international standard. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_GeoMatchStatement.html) for valid values.
         */
        countryCodes: string[];
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See Forwarded IP Config below for details.
         */
        forwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementGeoMatchStatementForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementIpSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the IP Set that this statement references.
         */
        arn: string;
        /**
         * The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. See IPSet Forwarded IP Config below for more details.
         */
        ipSetForwardedIpConfig?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementIpSetReferenceStatementIpSetForwardedIpConfig {
        /**
         * - The match status to assign to the web request if the request doesn't have a valid IP address in the specified position. Valid values include: `MATCH` or `NO_MATCH`.
         */
        fallbackBehavior: string;
        /**
         * - The name of the HTTP header to use for the IP address.
         */
        headerName: string;
        /**
         * - The position in the header to search for the IP address. Valid values include: `FIRST`, `LAST`, or `ANY`. If `ANY` is specified and the header contains more than 10 IP addresses, AWS WAFv2 inspects the last 10.
         */
        position: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementOrStatementStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRateBasedStatementScopeDownStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the Regex Pattern Set that this statement references.
         */
        arn: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementTextTransformation[];
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementRegexPatternSetReferenceStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementRuleGroupReferenceStatement {
        /**
         * The Amazon Resource Name (ARN) of the `aws.wafv2.RuleGroup` resource.
         */
        arn: string;
        /**
         * The `rules` whose actions are set to `COUNT` by the web ACL, regardless of the action that is set on the rule. See Excluded Rule below for details.
         */
        excludedRules?: outputs.wafv2.WebAclRuleStatementRuleGroupReferenceStatementExcludedRule[];
    }

    export interface WebAclRuleStatementRuleGroupReferenceStatementExcludedRule {
        /**
         * The name of the rule to exclude. If the rule group is managed by AWS, see the [documentation](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html) for a list of names in the appropriate rule group in use.
         */
        name: string;
    }

    export interface WebAclRuleStatementSizeConstraintStatement {
        /**
         * The operator to use to compare the request part to the size setting. Valid values include: `EQ`, `NE`, `LE`, `LT`, `GE`, or `GT`.
         */
        comparisonOperator: string;
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatch;
        /**
         * The size, in bytes, to compare to the request part, after any transformations. Valid values are integers between 0 and 21474836480, inclusive.
         */
        size: number;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementTextTransformation[];
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementSizeConstraintStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementSizeConstraintStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementSizeConstraintStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementSqliMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementSqliMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementSqliMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementSqliMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementSqliMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleStatementXssMatchStatement {
        /**
         * The part of a web request that you want AWS WAF to inspect. See Field to Match below for details.
         */
        fieldToMatch?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatch;
        /**
         * Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection. See Text Transformation below for details.
         */
        textTransformations: outputs.wafv2.WebAclRuleStatementXssMatchStatementTextTransformation[];
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatch {
        /**
         * Inspect all query arguments.
         */
        allQueryArguments?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchAllQueryArguments;
        /**
         * Inspect the request body, which immediately follows the request headers.
         */
        body?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchBody;
        /**
         * Inspect the HTTP method. The method indicates the type of operation that the request is asking the origin to perform.
         */
        method?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchMethod;
        /**
         * Inspect the query string. This is the part of a URL that appears after a `?` character, if any.
         */
        queryString?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchQueryString;
        /**
         * Inspect a single header. See Single Header below for details.
         */
        singleHeader?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchSingleHeader;
        /**
         * Inspect a single query argument. See Single Query Argument below for details.
         */
        singleQueryArgument?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument;
        /**
         * Inspect the request URI path. This is the part of a web request that identifies a resource, for example, `/images/daily-ad.jpg`.
         */
        uriPath?: outputs.wafv2.WebAclRuleStatementXssMatchStatementFieldToMatchUriPath;
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchAllQueryArguments {
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchBody {
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchMethod {
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchQueryString {
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchSingleHeader {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchSingleQueryArgument {
        /**
         * The name of the query header to inspect. This setting must be provided as lower case characters.
         */
        name: string;
    }

    export interface WebAclRuleStatementXssMatchStatementFieldToMatchUriPath {
    }

    export interface WebAclRuleStatementXssMatchStatementTextTransformation {
        /**
         * The relative processing order for multiple transformations that are defined for a rule statement. AWS WAF processes all transformations, from lowest priority to highest, before inspecting the transformed content.
         */
        priority: number;
        /**
         * The transformation to apply, you can specify the following types: `NONE`, `COMPRESS_WHITE_SPACE`, `HTML_ENTITY_DECODE`, `LOWERCASE`, `CMD_LINE`, `URL_DECODE`. See the [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_TextTransformation.html) for more details.
         */
        type: string;
    }

    export interface WebAclRuleVisibilityConfig {
        /**
         * A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
         */
        cloudwatchMetricsEnabled: boolean;
        /**
         * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (\_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
         */
        metricName: string;
        /**
         * A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
         */
        sampledRequestsEnabled: boolean;
    }

    export interface WebAclVisibilityConfig {
        /**
         * A boolean indicating whether the associated resource sends metrics to CloudWatch. For the list of available metrics, see [AWS WAF Metrics](https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics).
         */
        cloudwatchMetricsEnabled: boolean;
        /**
         * A friendly name of the CloudWatch metric. The name can contain only alphanumeric characters (A-Z, a-z, 0-9) hyphen(-) and underscore (\_), with length from one to 128 characters. It can't contain whitespace or metric names reserved for AWS WAF, for example `All` and `Default_Action`.
         */
        metricName: string;
        /**
         * A boolean indicating whether AWS WAF should store a sampling of the web requests that match the rules. You can view the sampled requests through the AWS WAF console.
         */
        sampledRequestsEnabled: boolean;
    }
}

export namespace worklink {
    export interface FleetIdentityProvider {
        /**
         * The SAML metadata document provided by the customer’s identity provider.
         */
        samlMetadata: string;
        /**
         * The type of identity provider.
         */
        type: string;
    }

    export interface FleetNetwork {
        /**
         * A list of security group IDs associated with access to the provided subnets.
         */
        securityGroupIds: string[];
        /**
         * A list of subnet IDs used for X-ENI connections from Amazon WorkLink rendering containers.
         */
        subnetIds: string[];
        /**
         * The VPC ID with connectivity to associated websites.
         */
        vpcId: string;
    }
}

export namespace workspaces {
    export interface DirectorySelfServicePermissions {
        /**
         * Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default `false`.
         */
        changeComputeType?: boolean;
        /**
         * Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default `false`.
         */
        increaseVolumeSize?: boolean;
        /**
         * Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default `false`.
         */
        rebuildWorkspace?: boolean;
        /**
         * Whether WorkSpaces directory users can restart their workspace. Default `true`.
         */
        restartWorkspace?: boolean;
        /**
         * Whether WorkSpaces directory users can switch the running mode of their workspace. Default `false`.
         */
        switchRunningMode?: boolean;
    }

    export interface DirectoryWorkspaceCreationProperties {
        /**
         * The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
         */
        customSecurityGroupId?: string;
        /**
         * The default organizational unit (OU) for your WorkSpace directories. Should conform `"OU=<value>,DC=<value>,...,DC=<value>"` pattern.
         */
        defaultOu?: string;
        /**
         * Indicates whether internet access is enabled for your WorkSpaces.
         */
        enableInternetAccess?: boolean;
        /**
         * Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html)..
         */
        enableMaintenanceMode?: boolean;
        /**
         * Indicates whether users are local administrators of their WorkSpaces.
         */
        userEnabledAsLocalAdministrator?: boolean;
    }

    export interface GetBundleComputeType {
        /**
         * The name of the bundle. You cannot combine this parameter with `bundleId`.
         */
        name: string;
    }

    export interface GetBundleRootStorage {
        /**
         * The size of the user storage.
         */
        capacity: string;
    }

    export interface GetBundleUserStorage {
        /**
         * The size of the user storage.
         */
        capacity: string;
    }

    export interface GetDirectorySelfServicePermission {
        /**
         * Whether WorkSpaces directory users can change the compute type (bundle) for their workspace.
         */
        changeComputeType: boolean;
        /**
         * Whether WorkSpaces directory users can increase the volume size of the drives on their workspace.
         */
        increaseVolumeSize: boolean;
        /**
         * Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state.
         */
        rebuildWorkspace: boolean;
        /**
         * Whether WorkSpaces directory users can restart their workspace.
         */
        restartWorkspace: boolean;
        /**
         * Whether WorkSpaces directory users can switch the running mode of their workspace.
         */
        switchRunningMode: boolean;
    }

    export interface GetDirectoryWorkspaceCreationProperties {
        /**
         * The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
         */
        customSecurityGroupId: string;
        /**
         * The default organizational unit (OU) for your WorkSpace directories.
         */
        defaultOu?: string;
        /**
         * Indicates whether internet access is enabled for your WorkSpaces.
         */
        enableInternetAccess?: boolean;
        /**
         * Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html).
         */
        enableMaintenanceMode?: boolean;
        /**
         * Indicates whether users are local administrators of their WorkSpaces.
         */
        userEnabledAsLocalAdministrator?: boolean;
    }

    export interface GetWorkspaceWorkspaceProperty {
        /**
         * The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO` and `GRAPHICSPRO`.
         */
        computeTypeName: string;
        /**
         * The size of the root volume.
         */
        rootVolumeSizeGib: number;
        /**
         * The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
         */
        runningMode: string;
        /**
         * The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
         */
        runningModeAutoStopTimeoutInMinutes: number;
        /**
         * The size of the user storage.
         */
        userVolumeSizeGib: number;
    }

    export interface IpGroupRule {
        /**
         * The description.
         */
        description?: string;
        /**
         * The IP address range, in CIDR notation, e.g. `10.0.0.0/16`
         */
        source: string;
    }

    export interface WorkspaceWorkspaceProperties {
        /**
         * The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO` and `GRAPHICSPRO`.
         */
        computeTypeName?: string;
        /**
         * The size of the root volume.
         */
        rootVolumeSizeGib?: number;
        /**
         * The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
         */
        runningMode?: string;
        /**
         * The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
         */
        runningModeAutoStopTimeoutInMinutes: number;
        /**
         * The size of the user storage.
         */
        userVolumeSizeGib?: number;
    }
}
