// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./arn";
export * from "./awsMixins";
export { GetAmiArgs, GetAmiResult, GetAmiOutputArgs } from "./getAmi";
export const getAmi: typeof import("./getAmi").getAmi = null as any;
export const getAmiOutput: typeof import("./getAmi").getAmiOutput = null as any;

export { GetAmiIdsArgs, GetAmiIdsResult, GetAmiIdsOutputArgs } from "./getAmiIds";
export const getAmiIds: typeof import("./getAmiIds").getAmiIds = null as any;
export const getAmiIdsOutput: typeof import("./getAmiIds").getAmiIdsOutput = null as any;

export { GetArnArgs, GetArnResult, GetArnOutputArgs } from "./getArn";
export const getArn: typeof import("./getArn").getArn = null as any;
export const getArnOutput: typeof import("./getArn").getArnOutput = null as any;

export { GetAutoscalingGroupsArgs, GetAutoscalingGroupsResult, GetAutoscalingGroupsOutputArgs } from "./getAutoscalingGroups";
export const getAutoscalingGroups: typeof import("./getAutoscalingGroups").getAutoscalingGroups = null as any;
export const getAutoscalingGroupsOutput: typeof import("./getAutoscalingGroups").getAutoscalingGroupsOutput = null as any;

export { GetAvailabilityZoneArgs, GetAvailabilityZoneResult, GetAvailabilityZoneOutputArgs } from "./getAvailabilityZone";
export const getAvailabilityZone: typeof import("./getAvailabilityZone").getAvailabilityZone = null as any;
export const getAvailabilityZoneOutput: typeof import("./getAvailabilityZone").getAvailabilityZoneOutput = null as any;

export { GetAvailabilityZonesArgs, GetAvailabilityZonesResult, GetAvailabilityZonesOutputArgs } from "./getAvailabilityZones";
export const getAvailabilityZones: typeof import("./getAvailabilityZones").getAvailabilityZones = null as any;
export const getAvailabilityZonesOutput: typeof import("./getAvailabilityZones").getAvailabilityZonesOutput = null as any;

export { GetBillingServiceAccountResult } from "./getBillingServiceAccount";
export const getBillingServiceAccount: typeof import("./getBillingServiceAccount").getBillingServiceAccount = null as any;

export { GetCallerIdentityResult } from "./getCallerIdentity";
export const getCallerIdentity: typeof import("./getCallerIdentity").getCallerIdentity = null as any;

export { GetCanonicalUserIdResult } from "./getCanonicalUserId";
export const getCanonicalUserId: typeof import("./getCanonicalUserId").getCanonicalUserId = null as any;

export { GetDefaultTagsArgs, GetDefaultTagsResult, GetDefaultTagsOutputArgs } from "./getDefaultTags";
export const getDefaultTags: typeof import("./getDefaultTags").getDefaultTags = null as any;
export const getDefaultTagsOutput: typeof import("./getDefaultTags").getDefaultTagsOutput = null as any;

export { GetElasticIpArgs, GetElasticIpResult, GetElasticIpOutputArgs } from "./getElasticIp";
export const getElasticIp: typeof import("./getElasticIp").getElasticIp = null as any;
export const getElasticIpOutput: typeof import("./getElasticIp").getElasticIpOutput = null as any;

export { GetIpRangesArgs, GetIpRangesResult, GetIpRangesOutputArgs } from "./getIpRanges";
export const getIpRanges: typeof import("./getIpRanges").getIpRanges = null as any;
export const getIpRangesOutput: typeof import("./getIpRanges").getIpRangesOutput = null as any;

export { GetPartitionResult } from "./getPartition";
export const getPartition: typeof import("./getPartition").getPartition = null as any;

export { GetPrefixListArgs, GetPrefixListResult, GetPrefixListOutputArgs } from "./getPrefixList";
export const getPrefixList: typeof import("./getPrefixList").getPrefixList = null as any;
export const getPrefixListOutput: typeof import("./getPrefixList").getPrefixListOutput = null as any;

export { GetRegionArgs, GetRegionResult, GetRegionOutputArgs } from "./getRegion";
export const getRegion: typeof import("./getRegion").getRegion = null as any;
export const getRegionOutput: typeof import("./getRegion").getRegionOutput = null as any;

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;

export * from "./region";
export * from "./tags";
export * from "./utils";
utilities.lazyLoad(exports, ["getAmi","getAmiOutput"], () => require("./getAmi"));
utilities.lazyLoad(exports, ["getAmiIds","getAmiIdsOutput"], () => require("./getAmiIds"));
utilities.lazyLoad(exports, ["getArn","getArnOutput"], () => require("./getArn"));
utilities.lazyLoad(exports, ["getAutoscalingGroups","getAutoscalingGroupsOutput"], () => require("./getAutoscalingGroups"));
utilities.lazyLoad(exports, ["getAvailabilityZone","getAvailabilityZoneOutput"], () => require("./getAvailabilityZone"));
utilities.lazyLoad(exports, ["getAvailabilityZones","getAvailabilityZonesOutput"], () => require("./getAvailabilityZones"));
utilities.lazyLoad(exports, ["getBillingServiceAccount"], () => require("./getBillingServiceAccount"));
utilities.lazyLoad(exports, ["getCallerIdentity"], () => require("./getCallerIdentity"));
utilities.lazyLoad(exports, ["getCanonicalUserId"], () => require("./getCanonicalUserId"));
utilities.lazyLoad(exports, ["getDefaultTags","getDefaultTagsOutput"], () => require("./getDefaultTags"));
utilities.lazyLoad(exports, ["getElasticIp","getElasticIpOutput"], () => require("./getElasticIp"));
utilities.lazyLoad(exports, ["getIpRanges","getIpRangesOutput"], () => require("./getIpRanges"));
utilities.lazyLoad(exports, ["getPartition"], () => require("./getPartition"));
utilities.lazyLoad(exports, ["getPrefixList","getPrefixListOutput"], () => require("./getPrefixList"));
utilities.lazyLoad(exports, ["getRegion","getRegionOutput"], () => require("./getRegion"));
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

// Export enums:
export * from "./types/enums";

// Export sub-modules:
import * as accessanalyzer from "./accessanalyzer";
import * as account from "./account";
import * as acm from "./acm";
import * as acmpca from "./acmpca";
import * as alb from "./alb";
import * as amp from "./amp";
import * as amplify from "./amplify";
import * as apigateway from "./apigateway";
import * as apigatewayv2 from "./apigatewayv2";
import * as appautoscaling from "./appautoscaling";
import * as appconfig from "./appconfig";
import * as appflow from "./appflow";
import * as applicationinsights from "./applicationinsights";
import * as applicationloadbalancing from "./applicationloadbalancing";
import * as appmesh from "./appmesh";
import * as apprunner from "./apprunner";
import * as appstream from "./appstream";
import * as appsync from "./appsync";
import * as athena from "./athena";
import * as autoscaling from "./autoscaling";
import * as autoscalingplans from "./autoscalingplans";
import * as backup from "./backup";
import * as batch from "./batch";
import * as budgets from "./budgets";
import * as cfg from "./cfg";
import * as chime from "./chime";
import * as cloud9 from "./cloud9";
import * as cloudcontrol from "./cloudcontrol";
import * as cloudformation from "./cloudformation";
import * as cloudfront from "./cloudfront";
import * as cloudhsmv2 from "./cloudhsmv2";
import * as cloudsearch from "./cloudsearch";
import * as cloudtrail from "./cloudtrail";
import * as cloudwatch from "./cloudwatch";
import * as codeartifact from "./codeartifact";
import * as codebuild from "./codebuild";
import * as codecommit from "./codecommit";
import * as codedeploy from "./codedeploy";
import * as codepipeline from "./codepipeline";
import * as codestarconnections from "./codestarconnections";
import * as codestarnotifications from "./codestarnotifications";
import * as cognito from "./cognito";
import * as comprehend from "./comprehend";
import * as config from "./config";
import * as connect from "./connect";
import * as costexplorer from "./costexplorer";
import * as cur from "./cur";
import * as dataexchange from "./dataexchange";
import * as datapipeline from "./datapipeline";
import * as datasync from "./datasync";
import * as dax from "./dax";
import * as detective from "./detective";
import * as devicefarm from "./devicefarm";
import * as directconnect from "./directconnect";
import * as directoryservice from "./directoryservice";
import * as dlm from "./dlm";
import * as dms from "./dms";
import * as docdb from "./docdb";
import * as dynamodb from "./dynamodb";
import * as ebs from "./ebs";
import * as ec2 from "./ec2";
import * as ec2clientvpn from "./ec2clientvpn";
import * as ec2transitgateway from "./ec2transitgateway";
import * as ecr from "./ecr";
import * as ecrpublic from "./ecrpublic";
import * as ecs from "./ecs";
import * as efs from "./efs";
import * as eks from "./eks";
import * as elasticache from "./elasticache";
import * as elasticbeanstalk from "./elasticbeanstalk";
import * as elasticloadbalancing from "./elasticloadbalancing";
import * as elasticloadbalancingv2 from "./elasticloadbalancingv2";
import * as elasticsearch from "./elasticsearch";
import * as elastictranscoder from "./elastictranscoder";
import * as elb from "./elb";
import * as emr from "./emr";
import * as emrcontainers from "./emrcontainers";
import * as emrserverless from "./emrserverless";
import * as fis from "./fis";
import * as fms from "./fms";
import * as fsx from "./fsx";
import * as gamelift from "./gamelift";
import * as glacier from "./glacier";
import * as globalaccelerator from "./globalaccelerator";
import * as glue from "./glue";
import * as grafana from "./grafana";
import * as guardduty from "./guardduty";
import * as iam from "./iam";
import * as identitystore from "./identitystore";
import * as imagebuilder from "./imagebuilder";
import * as inspector from "./inspector";
import * as iot from "./iot";
import * as kendra from "./kendra";
import * as keyspaces from "./keyspaces";
import * as kinesis from "./kinesis";
import * as kinesisanalyticsv2 from "./kinesisanalyticsv2";
import * as kms from "./kms";
import * as lakeformation from "./lakeformation";
import * as lambda from "./lambda";
import * as lb from "./lb";
import * as lex from "./lex";
import * as licensemanager from "./licensemanager";
import * as lightsail from "./lightsail";
import * as location from "./location";
import * as macie from "./macie";
import * as macie2 from "./macie2";
import * as mediaconvert from "./mediaconvert";
import * as medialive from "./medialive";
import * as mediapackage from "./mediapackage";
import * as mediastore from "./mediastore";
import * as memorydb from "./memorydb";
import * as mq from "./mq";
import * as msk from "./msk";
import * as mskconnect from "./mskconnect";
import * as mwaa from "./mwaa";
import * as neptune from "./neptune";
import * as networkfirewall from "./networkfirewall";
import * as networkmanager from "./networkmanager";
import * as opensearch from "./opensearch";
import * as opsworks from "./opsworks";
import * as organizations from "./organizations";
import * as outposts from "./outposts";
import * as pinpoint from "./pinpoint";
import * as pricing from "./pricing";
import * as qldb from "./qldb";
import * as quicksight from "./quicksight";
import * as ram from "./ram";
import * as rds from "./rds";
import * as redshift from "./redshift";
import * as redshiftdata from "./redshiftdata";
import * as redshiftserverless from "./redshiftserverless";
import * as resourcegroups from "./resourcegroups";
import * as resourcegroupstaggingapi from "./resourcegroupstaggingapi";
import * as rolesanywhere from "./rolesanywhere";
import * as route53 from "./route53";
import * as route53domains from "./route53domains";
import * as route53recoverycontrol from "./route53recoverycontrol";
import * as route53recoveryreadiness from "./route53recoveryreadiness";
import * as rum from "./rum";
import * as s3 from "./s3";
import * as s3control from "./s3control";
import * as s3outposts from "./s3outposts";
import * as sagemaker from "./sagemaker";
import * as schemas from "./schemas";
import * as secretsmanager from "./secretsmanager";
import * as securityhub from "./securityhub";
import * as serverless from "./serverless";
import * as serverlessrepository from "./serverlessrepository";
import * as servicecatalog from "./servicecatalog";
import * as servicediscovery from "./servicediscovery";
import * as servicequotas from "./servicequotas";
import * as ses from "./ses";
import * as sfn from "./sfn";
import * as shield from "./shield";
import * as signer from "./signer";
import * as simpledb from "./simpledb";
import * as sns from "./sns";
import * as sqs from "./sqs";
import * as ssm from "./ssm";
import * as ssoadmin from "./ssoadmin";
import * as storagegateway from "./storagegateway";
import * as swf from "./swf";
import * as synthetics from "./synthetics";
import * as timestreamwrite from "./timestreamwrite";
import * as transcribe from "./transcribe";
import * as transfer from "./transfer";
import * as types from "./types";
import * as waf from "./waf";
import * as wafregional from "./wafregional";
import * as wafv2 from "./wafv2";
import * as worklink from "./worklink";
import * as workspaces from "./workspaces";
import * as xray from "./xray";

export {
    accessanalyzer,
    account,
    acm,
    acmpca,
    alb,
    amp,
    amplify,
    apigateway,
    apigatewayv2,
    appautoscaling,
    appconfig,
    appflow,
    applicationinsights,
    applicationloadbalancing,
    appmesh,
    apprunner,
    appstream,
    appsync,
    athena,
    autoscaling,
    autoscalingplans,
    backup,
    batch,
    budgets,
    cfg,
    chime,
    cloud9,
    cloudcontrol,
    cloudformation,
    cloudfront,
    cloudhsmv2,
    cloudsearch,
    cloudtrail,
    cloudwatch,
    codeartifact,
    codebuild,
    codecommit,
    codedeploy,
    codepipeline,
    codestarconnections,
    codestarnotifications,
    cognito,
    comprehend,
    config,
    connect,
    costexplorer,
    cur,
    dataexchange,
    datapipeline,
    datasync,
    dax,
    detective,
    devicefarm,
    directconnect,
    directoryservice,
    dlm,
    dms,
    docdb,
    dynamodb,
    ebs,
    ec2,
    ec2clientvpn,
    ec2transitgateway,
    ecr,
    ecrpublic,
    ecs,
    efs,
    eks,
    elasticache,
    elasticbeanstalk,
    elasticloadbalancing,
    elasticloadbalancingv2,
    elasticsearch,
    elastictranscoder,
    elb,
    emr,
    emrcontainers,
    emrserverless,
    fis,
    fms,
    fsx,
    gamelift,
    glacier,
    globalaccelerator,
    glue,
    grafana,
    guardduty,
    iam,
    identitystore,
    imagebuilder,
    inspector,
    iot,
    kendra,
    keyspaces,
    kinesis,
    kinesisanalyticsv2,
    kms,
    lakeformation,
    lambda,
    lb,
    lex,
    licensemanager,
    lightsail,
    location,
    macie,
    macie2,
    mediaconvert,
    medialive,
    mediapackage,
    mediastore,
    memorydb,
    mq,
    msk,
    mskconnect,
    mwaa,
    neptune,
    networkfirewall,
    networkmanager,
    opensearch,
    opsworks,
    organizations,
    outposts,
    pinpoint,
    pricing,
    qldb,
    quicksight,
    ram,
    rds,
    redshift,
    redshiftdata,
    redshiftserverless,
    resourcegroups,
    resourcegroupstaggingapi,
    rolesanywhere,
    route53,
    route53domains,
    route53recoverycontrol,
    route53recoveryreadiness,
    rum,
    s3,
    s3control,
    s3outposts,
    sagemaker,
    schemas,
    secretsmanager,
    securityhub,
    serverless,
    serverlessrepository,
    servicecatalog,
    servicediscovery,
    servicequotas,
    ses,
    sfn,
    shield,
    signer,
    simpledb,
    sns,
    sqs,
    ssm,
    ssoadmin,
    storagegateway,
    swf,
    synthetics,
    timestreamwrite,
    transcribe,
    transfer,
    types,
    waf,
    wafregional,
    wafv2,
    worklink,
    workspaces,
    xray,
};
pulumi.runtime.registerResourcePackage("aws", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aws") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
