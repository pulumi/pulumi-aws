// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages [Provisioned Throughput](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html) for an Amazon Bedrock model.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.bedrock.ProvisionedModelThroughput("example", {
 *     provisionedModelName: "example-model",
 *     modelArn: "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2",
 *     commitmentDuration: "SixMonths",
 *     modelUnits: 1,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Provisioned Throughput using the `provisioned_model_arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput example arn:aws:bedrock:us-west-2:123456789012:provisioned-model/1y5n57gh5y2e
 * ```
 */
export class ProvisionedModelThroughput extends pulumi.CustomResource {
    /**
     * Get an existing ProvisionedModelThroughput resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProvisionedModelThroughputState, opts?: pulumi.CustomResourceOptions): ProvisionedModelThroughput {
        return new ProvisionedModelThroughput(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput';

    /**
     * Returns true if the given object is an instance of ProvisionedModelThroughput.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProvisionedModelThroughput {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionedModelThroughput.__pulumiType;
    }

    /**
     * Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
     */
    public readonly commitmentDuration!: pulumi.Output<string | undefined>;
    /**
     * ARN of the model to associate with this Provisioned Throughput.
     */
    public readonly modelArn!: pulumi.Output<string>;
    /**
     * Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
     */
    public readonly modelUnits!: pulumi.Output<number>;
    /**
     * The ARN of the Provisioned Throughput.
     */
    public /*out*/ readonly provisionedModelArn!: pulumi.Output<string>;
    /**
     * Unique name for this Provisioned Throughput.
     */
    public readonly provisionedModelName!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.bedrock.ProvisionedModelThroughputTimeouts | undefined>;

    /**
     * Create a ProvisionedModelThroughput resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProvisionedModelThroughputArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProvisionedModelThroughputArgs | ProvisionedModelThroughputState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProvisionedModelThroughputState | undefined;
            resourceInputs["commitmentDuration"] = state ? state.commitmentDuration : undefined;
            resourceInputs["modelArn"] = state ? state.modelArn : undefined;
            resourceInputs["modelUnits"] = state ? state.modelUnits : undefined;
            resourceInputs["provisionedModelArn"] = state ? state.provisionedModelArn : undefined;
            resourceInputs["provisionedModelName"] = state ? state.provisionedModelName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as ProvisionedModelThroughputArgs | undefined;
            if ((!args || args.modelArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelArn'");
            }
            if ((!args || args.modelUnits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'modelUnits'");
            }
            if ((!args || args.provisionedModelName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'provisionedModelName'");
            }
            resourceInputs["commitmentDuration"] = args ? args.commitmentDuration : undefined;
            resourceInputs["modelArn"] = args ? args.modelArn : undefined;
            resourceInputs["modelUnits"] = args ? args.modelUnits : undefined;
            resourceInputs["provisionedModelName"] = args ? args.provisionedModelName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["provisionedModelArn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProvisionedModelThroughput.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProvisionedModelThroughput resources.
 */
export interface ProvisionedModelThroughputState {
    /**
     * Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
     */
    commitmentDuration?: pulumi.Input<string>;
    /**
     * ARN of the model to associate with this Provisioned Throughput.
     */
    modelArn?: pulumi.Input<string>;
    /**
     * Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
     */
    modelUnits?: pulumi.Input<number>;
    /**
     * The ARN of the Provisioned Throughput.
     */
    provisionedModelArn?: pulumi.Input<string>;
    /**
     * Unique name for this Provisioned Throughput.
     */
    provisionedModelName?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.bedrock.ProvisionedModelThroughputTimeouts>;
}

/**
 * The set of arguments for constructing a ProvisionedModelThroughput resource.
 */
export interface ProvisionedModelThroughputArgs {
    /**
     * Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
     */
    commitmentDuration?: pulumi.Input<string>;
    /**
     * ARN of the model to associate with this Provisioned Throughput.
     */
    modelArn: pulumi.Input<string>;
    /**
     * Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
     */
    modelUnits: pulumi.Input<number>;
    /**
     * Unique name for this Provisioned Throughput.
     */
    provisionedModelName: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.bedrock.ProvisionedModelThroughputTimeouts>;
}
