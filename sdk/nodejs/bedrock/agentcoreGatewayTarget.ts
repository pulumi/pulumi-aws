// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an AWS Bedrock AgentCore Gateway Target. Gateway targets define the endpoints and configurations that a gateway can invoke, such as Lambda functions or APIs, allowing agents to interact with external services through the Model Context Protocol (MCP).
 *
 * ## Example Usage
 *
 * ### Lambda Target with Gateway IAM Role
 *
 * ### Target with API Key Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const apiKeyExample = new aws.bedrock.AgentcoreGatewayTarget("api_key_example", {
 *     name: "api-target",
 *     gatewayIdentifier: exampleAwsBedrockagentcoreGateway.gatewayId,
 *     description: "External API target with API key authentication",
 *     credentialProviderConfiguration: {
 *         apiKey: {
 *             providerArn: "arn:aws:iam::123456789012:oidc-provider/example.com",
 *             credentialLocation: "HEADER",
 *             credentialParameterName: "X-API-Key",
 *             credentialPrefix: "Bearer",
 *         },
 *     },
 *     targetConfiguration: {
 *         mcp: {
 *             lambda: {
 *                 lambdaArn: example.arn,
 *                 toolSchema: {
 *                     inlinePayloads: [{
 *                         name: "api_tool",
 *                         description: "External API integration tool",
 *                         inputSchema: {
 *                             type: "string",
 *                             description: "Simple string input for API calls",
 *                         },
 *                     }],
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### Target with OAuth Authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const oauthExample = new aws.bedrock.AgentcoreGatewayTarget("oauth_example", {
 *     name: "oauth-target",
 *     gatewayIdentifier: exampleAwsBedrockagentcoreGateway.gatewayId,
 *     credentialProviderConfiguration: {
 *         oauth: {
 *             providerArn: "arn:aws:iam::123456789012:oidc-provider/oauth.example.com",
 *             scopes: [
 *                 "read",
 *                 "write",
 *             ],
 *             customParameters: {
 *                 client_type: "confidential",
 *                 grant_type: "authorization_code",
 *             },
 *         },
 *     },
 *     targetConfiguration: {
 *         mcp: {
 *             lambda: {
 *                 lambdaArn: example.arn,
 *                 toolSchema: {
 *                     inlinePayloads: [{
 *                         name: "oauth_tool",
 *                         description: "OAuth-authenticated service",
 *                         inputSchema: {
 *                             type: "array",
 *                             items: {
 *                                 type: "object",
 *                                 properties: [
 *                                     {
 *                                         name: "id",
 *                                         type: "string",
 *                                         required: true,
 *                                     },
 *                                     {
 *                                         name: "value",
 *                                         type: "number",
 *                                     },
 *                                 ],
 *                             },
 *                         },
 *                     }],
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ### Complex Schema with JSON Serialization
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const complexSchema = new aws.bedrock.AgentcoreGatewayTarget("complex_schema", {
 *     name: "complex-target",
 *     gatewayIdentifier: exampleAwsBedrockagentcoreGateway.gatewayId,
 *     credentialProviderConfiguration: {
 *         gatewayIamRole: {},
 *     },
 *     targetConfiguration: {
 *         mcp: {
 *             lambda: {
 *                 lambdaArn: example.arn,
 *                 toolSchema: {
 *                     inlinePayloads: [{
 *                         name: "complex_tool",
 *                         description: "Tool with complex nested schema",
 *                         inputSchema: {
 *                             type: "object",
 *                             properties: [{
 *                                 name: "profile",
 *                                 type: "object",
 *                                 properties: [
 *                                     {
 *                                         name: "nested_tags",
 *                                         type: "array",
 *                                         itemsJson: JSON.stringify({
 *                                             type: "string",
 *                                         }),
 *                                     },
 *                                     {
 *                                         name: "metadata",
 *                                         type: "object",
 *                                         propertiesJson: JSON.stringify({
 *                                             properties: {
 *                                                 created_at: {
 *                                                     type: "string",
 *                                                 },
 *                                                 version: {
 *                                                     type: "number",
 *                                                 },
 *                                             },
 *                                             required: ["created_at"],
 *                                         }),
 *                                     },
 *                                 ],
 *                             }],
 *                         },
 *                     }],
 *                 },
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Bedrock AgentCore Gateway Target using the gateway identifier and target ID separated by a comma. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/agentcoreGatewayTarget:AgentcoreGatewayTarget example GATEWAY1234567890,TARGET0987654321
 * ```
 */
export class AgentcoreGatewayTarget extends pulumi.CustomResource {
    /**
     * Get an existing AgentcoreGatewayTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgentcoreGatewayTargetState, opts?: pulumi.CustomResourceOptions): AgentcoreGatewayTarget {
        return new AgentcoreGatewayTarget(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:bedrock/agentcoreGatewayTarget:AgentcoreGatewayTarget';

    /**
     * Returns true if the given object is an instance of AgentcoreGatewayTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AgentcoreGatewayTarget {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AgentcoreGatewayTarget.__pulumiType;
    }

    /**
     * Configuration for authenticating requests to the target. See `credentialProviderConfiguration` below.
     */
    declare public readonly credentialProviderConfiguration: pulumi.Output<outputs.bedrock.AgentcoreGatewayTargetCredentialProviderConfiguration | undefined>;
    /**
     * Description of the gateway target.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Identifier of the gateway that this target belongs to.
     */
    declare public readonly gatewayIdentifier: pulumi.Output<string>;
    /**
     * Name of the gateway target.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * AWS region where the resource will be created. If not provided, the region from the provider configuration will be used.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Configuration for the target endpoint. See `targetConfiguration` below.
     *
     * The following arguments are optional:
     */
    declare public readonly targetConfiguration: pulumi.Output<outputs.bedrock.AgentcoreGatewayTargetTargetConfiguration | undefined>;
    /**
     * Unique identifier of the gateway target.
     */
    declare public /*out*/ readonly targetId: pulumi.Output<string>;
    declare public readonly timeouts: pulumi.Output<outputs.bedrock.AgentcoreGatewayTargetTimeouts | undefined>;

    /**
     * Create a AgentcoreGatewayTarget resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgentcoreGatewayTargetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AgentcoreGatewayTargetArgs | AgentcoreGatewayTargetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AgentcoreGatewayTargetState | undefined;
            resourceInputs["credentialProviderConfiguration"] = state?.credentialProviderConfiguration;
            resourceInputs["description"] = state?.description;
            resourceInputs["gatewayIdentifier"] = state?.gatewayIdentifier;
            resourceInputs["name"] = state?.name;
            resourceInputs["region"] = state?.region;
            resourceInputs["targetConfiguration"] = state?.targetConfiguration;
            resourceInputs["targetId"] = state?.targetId;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as AgentcoreGatewayTargetArgs | undefined;
            if (args?.gatewayIdentifier === undefined && !opts.urn) {
                throw new Error("Missing required property 'gatewayIdentifier'");
            }
            resourceInputs["credentialProviderConfiguration"] = args?.credentialProviderConfiguration;
            resourceInputs["description"] = args?.description;
            resourceInputs["gatewayIdentifier"] = args?.gatewayIdentifier;
            resourceInputs["name"] = args?.name;
            resourceInputs["region"] = args?.region;
            resourceInputs["targetConfiguration"] = args?.targetConfiguration;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["targetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AgentcoreGatewayTarget.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AgentcoreGatewayTarget resources.
 */
export interface AgentcoreGatewayTargetState {
    /**
     * Configuration for authenticating requests to the target. See `credentialProviderConfiguration` below.
     */
    credentialProviderConfiguration?: pulumi.Input<inputs.bedrock.AgentcoreGatewayTargetCredentialProviderConfiguration>;
    /**
     * Description of the gateway target.
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the gateway that this target belongs to.
     */
    gatewayIdentifier?: pulumi.Input<string>;
    /**
     * Name of the gateway target.
     */
    name?: pulumi.Input<string>;
    /**
     * AWS region where the resource will be created. If not provided, the region from the provider configuration will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Configuration for the target endpoint. See `targetConfiguration` below.
     *
     * The following arguments are optional:
     */
    targetConfiguration?: pulumi.Input<inputs.bedrock.AgentcoreGatewayTargetTargetConfiguration>;
    /**
     * Unique identifier of the gateway target.
     */
    targetId?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.bedrock.AgentcoreGatewayTargetTimeouts>;
}

/**
 * The set of arguments for constructing a AgentcoreGatewayTarget resource.
 */
export interface AgentcoreGatewayTargetArgs {
    /**
     * Configuration for authenticating requests to the target. See `credentialProviderConfiguration` below.
     */
    credentialProviderConfiguration?: pulumi.Input<inputs.bedrock.AgentcoreGatewayTargetCredentialProviderConfiguration>;
    /**
     * Description of the gateway target.
     */
    description?: pulumi.Input<string>;
    /**
     * Identifier of the gateway that this target belongs to.
     */
    gatewayIdentifier: pulumi.Input<string>;
    /**
     * Name of the gateway target.
     */
    name?: pulumi.Input<string>;
    /**
     * AWS region where the resource will be created. If not provided, the region from the provider configuration will be used.
     */
    region?: pulumi.Input<string>;
    /**
     * Configuration for the target endpoint. See `targetConfiguration` below.
     *
     * The following arguments are optional:
     */
    targetConfiguration?: pulumi.Input<inputs.bedrock.AgentcoreGatewayTargetTargetConfiguration>;
    timeouts?: pulumi.Input<inputs.bedrock.AgentcoreGatewayTargetTimeouts>;
}
