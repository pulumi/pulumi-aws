// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Agents for Amazon Bedrock Agent.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const currentGetPartition = aws.getPartition({});
 * const currentGetRegion = aws.getRegion({});
 * const exampleAgentTrust = Promise.all([current, currentGetPartition, currentGetRegion, current]).then(([current, currentGetPartition, currentGetRegion, current1]) => aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             identifiers: ["bedrock.amazonaws.com"],
 *             type: "Service",
 *         }],
 *         conditions: [
 *             {
 *                 test: "StringEquals",
 *                 values: [current.accountId],
 *                 variable: "aws:SourceAccount",
 *             },
 *             {
 *                 test: "ArnLike",
 *                 values: [`arn:${currentGetPartition.partition}:bedrock:${currentGetRegion.name}:${current1.accountId}:agent/*`],
 *                 variable: "AWS:SourceArn",
 *             },
 *         ],
 *     }],
 * }));
 * const exampleAgentPermissions = Promise.all([currentGetPartition, currentGetRegion]).then(([currentGetPartition, currentGetRegion]) => aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["bedrock:InvokeModel"],
 *         resources: [`arn:${currentGetPartition.partition}:bedrock:${currentGetRegion.name}::foundation-model/anthropic.claude-v2`],
 *     }],
 * }));
 * const example = new aws.iam.Role("example", {
 *     assumeRolePolicy: exampleAgentTrust.then(exampleAgentTrust => exampleAgentTrust.json),
 *     namePrefix: "AmazonBedrockExecutionRoleForAgents_",
 * });
 * const exampleRolePolicy = new aws.iam.RolePolicy("example", {
 *     policy: exampleAgentPermissions.then(exampleAgentPermissions => exampleAgentPermissions.json),
 *     role: example.id,
 * });
 * const exampleAgentAgent = new aws.bedrock.AgentAgent("example", {
 *     agentName: "my-agent-name",
 *     agentResourceRoleArn: example.arn,
 *     idleSessionTtlInSeconds: 500,
 *     foundationModel: "anthropic.claude-v2",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Agents for Amazon Bedrock Agent using the agent ID. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/agentAgent:AgentAgent example GGRRAED6JP
 * ```
 */
export class AgentAgent extends pulumi.CustomResource {
    /**
     * Get an existing AgentAgent resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgentAgentState, opts?: pulumi.CustomResourceOptions): AgentAgent {
        return new AgentAgent(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:bedrock/agentAgent:AgentAgent';

    /**
     * Returns true if the given object is an instance of AgentAgent.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AgentAgent {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AgentAgent.__pulumiType;
    }

    /**
     * ARN of the agent.
     */
    public /*out*/ readonly agentArn!: pulumi.Output<string>;
    /**
     * Unique identifier of the agent.
     */
    public /*out*/ readonly agentId!: pulumi.Output<string>;
    /**
     * Name of the agent.
     */
    public readonly agentName!: pulumi.Output<string>;
    /**
     * ARN of the IAM role with permissions to invoke API operations on the agent.
     */
    public readonly agentResourceRoleArn!: pulumi.Output<string>;
    /**
     * Version of the agent.
     */
    public /*out*/ readonly agentVersion!: pulumi.Output<string>;
    /**
     * ARN of the AWS KMS key that encrypts the agent.
     */
    public readonly customerEncryptionKeyArn!: pulumi.Output<string | undefined>;
    /**
     * Description of the agent.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Foundation model used for orchestration by the agent.
     *
     * The following arguments are optional:
     */
    public readonly foundationModel!: pulumi.Output<string>;
    /**
     * Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
     */
    public readonly idleSessionTtlInSeconds!: pulumi.Output<number>;
    /**
     * Instructions that tell the agent what it should do and how it should interact with users.
     */
    public readonly instruction!: pulumi.Output<string>;
    /**
     * Whether to prepare the agent after creation or modification. Defaults to `true`.
     */
    public readonly prepareAgent!: pulumi.Output<boolean>;
    /**
     * Configurations to override prompt templates in different parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html). See `promptOverrideConfiguration` block for details.
     */
    public readonly promptOverrideConfigurations!: pulumi.Output<outputs.bedrock.AgentAgentPromptOverrideConfiguration[]>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.bedrock.AgentAgentTimeouts | undefined>;

    /**
     * Create a AgentAgent resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgentAgentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AgentAgentArgs | AgentAgentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AgentAgentState | undefined;
            resourceInputs["agentArn"] = state ? state.agentArn : undefined;
            resourceInputs["agentId"] = state ? state.agentId : undefined;
            resourceInputs["agentName"] = state ? state.agentName : undefined;
            resourceInputs["agentResourceRoleArn"] = state ? state.agentResourceRoleArn : undefined;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["customerEncryptionKeyArn"] = state ? state.customerEncryptionKeyArn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["foundationModel"] = state ? state.foundationModel : undefined;
            resourceInputs["idleSessionTtlInSeconds"] = state ? state.idleSessionTtlInSeconds : undefined;
            resourceInputs["instruction"] = state ? state.instruction : undefined;
            resourceInputs["prepareAgent"] = state ? state.prepareAgent : undefined;
            resourceInputs["promptOverrideConfigurations"] = state ? state.promptOverrideConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        } else {
            const args = argsOrState as AgentAgentArgs | undefined;
            if ((!args || args.agentName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentName'");
            }
            if ((!args || args.agentResourceRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'agentResourceRoleArn'");
            }
            if ((!args || args.foundationModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'foundationModel'");
            }
            resourceInputs["agentName"] = args ? args.agentName : undefined;
            resourceInputs["agentResourceRoleArn"] = args ? args.agentResourceRoleArn : undefined;
            resourceInputs["customerEncryptionKeyArn"] = args ? args.customerEncryptionKeyArn : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["foundationModel"] = args ? args.foundationModel : undefined;
            resourceInputs["idleSessionTtlInSeconds"] = args ? args.idleSessionTtlInSeconds : undefined;
            resourceInputs["instruction"] = args ? args.instruction : undefined;
            resourceInputs["prepareAgent"] = args ? args.prepareAgent : undefined;
            resourceInputs["promptOverrideConfigurations"] = args ? args.promptOverrideConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["agentArn"] = undefined /*out*/;
            resourceInputs["agentId"] = undefined /*out*/;
            resourceInputs["agentVersion"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AgentAgent.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AgentAgent resources.
 */
export interface AgentAgentState {
    /**
     * ARN of the agent.
     */
    agentArn?: pulumi.Input<string>;
    /**
     * Unique identifier of the agent.
     */
    agentId?: pulumi.Input<string>;
    /**
     * Name of the agent.
     */
    agentName?: pulumi.Input<string>;
    /**
     * ARN of the IAM role with permissions to invoke API operations on the agent.
     */
    agentResourceRoleArn?: pulumi.Input<string>;
    /**
     * Version of the agent.
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * ARN of the AWS KMS key that encrypts the agent.
     */
    customerEncryptionKeyArn?: pulumi.Input<string>;
    /**
     * Description of the agent.
     */
    description?: pulumi.Input<string>;
    /**
     * Foundation model used for orchestration by the agent.
     *
     * The following arguments are optional:
     */
    foundationModel?: pulumi.Input<string>;
    /**
     * Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
     */
    idleSessionTtlInSeconds?: pulumi.Input<number>;
    /**
     * Instructions that tell the agent what it should do and how it should interact with users.
     */
    instruction?: pulumi.Input<string>;
    /**
     * Whether to prepare the agent after creation or modification. Defaults to `true`.
     */
    prepareAgent?: pulumi.Input<boolean>;
    /**
     * Configurations to override prompt templates in different parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html). See `promptOverrideConfiguration` block for details.
     */
    promptOverrideConfigurations?: pulumi.Input<pulumi.Input<inputs.bedrock.AgentAgentPromptOverrideConfiguration>[]>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.bedrock.AgentAgentTimeouts>;
}

/**
 * The set of arguments for constructing a AgentAgent resource.
 */
export interface AgentAgentArgs {
    /**
     * Name of the agent.
     */
    agentName: pulumi.Input<string>;
    /**
     * ARN of the IAM role with permissions to invoke API operations on the agent.
     */
    agentResourceRoleArn: pulumi.Input<string>;
    /**
     * ARN of the AWS KMS key that encrypts the agent.
     */
    customerEncryptionKeyArn?: pulumi.Input<string>;
    /**
     * Description of the agent.
     */
    description?: pulumi.Input<string>;
    /**
     * Foundation model used for orchestration by the agent.
     *
     * The following arguments are optional:
     */
    foundationModel: pulumi.Input<string>;
    /**
     * Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
     */
    idleSessionTtlInSeconds?: pulumi.Input<number>;
    /**
     * Instructions that tell the agent what it should do and how it should interact with users.
     */
    instruction?: pulumi.Input<string>;
    /**
     * Whether to prepare the agent after creation or modification. Defaults to `true`.
     */
    prepareAgent?: pulumi.Input<boolean>;
    /**
     * Configurations to override prompt templates in different parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html). See `promptOverrideConfiguration` block for details.
     */
    promptOverrideConfigurations?: pulumi.Input<pulumi.Input<inputs.bedrock.AgentAgentPromptOverrideConfiguration>[]>;
    /**
     * Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.bedrock.AgentAgentTimeouts>;
}
