// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Bedrock Inference Profile.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const example = new aws.bedrock.InferenceProfile("example", {
 *     name: "Claude Sonnet for Project 123",
 *     description: "Profile with tag for cost allocation tracking",
 *     modelSource: {
 *         copyFrom: "arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0",
 *     },
 *     tags: {
 *         ProjectID: "123",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Bedrock Inference Profile using the `example_id_arg`. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/inferenceProfile:InferenceProfile example inference_profile-id-12345678
 * ```
 */
export class InferenceProfile extends pulumi.CustomResource {
    /**
     * Get an existing InferenceProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InferenceProfileState, opts?: pulumi.CustomResourceOptions): InferenceProfile {
        return new InferenceProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:bedrock/inferenceProfile:InferenceProfile';

    /**
     * Returns true if the given object is an instance of InferenceProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InferenceProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InferenceProfile.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the inference profile.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The time at which the inference profile was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the inference profile.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The source of the model this inference profile will track metrics and cost for. See `modelSource`.
     *
     * The following arguments are optional:
     */
    public readonly modelSource!: pulumi.Output<outputs.bedrock.InferenceProfileModelSource | undefined>;
    /**
     * A list of information about each model in the inference profile. See `models`.
     */
    public /*out*/ readonly models!: pulumi.Output<outputs.bedrock.InferenceProfileModel[]>;
    /**
     * The name of the inference profile.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The status of the inference profile. `ACTIVE` means that the inference profile is available to use.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Key-value mapping of resource tags for the inference profile.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.bedrock.InferenceProfileTimeouts | undefined>;
    /**
     * The type of the inference profile. `SYSTEM_DEFINED` means that the inference profile is defined by Amazon Bedrock. `APPLICATION` means that the inference profile is defined by the user.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The time at which the inference profile was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a InferenceProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InferenceProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InferenceProfileArgs | InferenceProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InferenceProfileState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["modelSource"] = state ? state.modelSource : undefined;
            resourceInputs["models"] = state ? state.models : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as InferenceProfileArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["modelSource"] = args ? args.modelSource : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["models"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InferenceProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InferenceProfile resources.
 */
export interface InferenceProfileState {
    /**
     * The Amazon Resource Name (ARN) of the inference profile.
     */
    arn?: pulumi.Input<string>;
    /**
     * The time at which the inference profile was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the inference profile.
     */
    description?: pulumi.Input<string>;
    /**
     * The source of the model this inference profile will track metrics and cost for. See `modelSource`.
     *
     * The following arguments are optional:
     */
    modelSource?: pulumi.Input<inputs.bedrock.InferenceProfileModelSource>;
    /**
     * A list of information about each model in the inference profile. See `models`.
     */
    models?: pulumi.Input<pulumi.Input<inputs.bedrock.InferenceProfileModel>[]>;
    /**
     * The name of the inference profile.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of the inference profile. `ACTIVE` means that the inference profile is available to use.
     */
    status?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags for the inference profile.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.bedrock.InferenceProfileTimeouts>;
    /**
     * The type of the inference profile. `SYSTEM_DEFINED` means that the inference profile is defined by Amazon Bedrock. `APPLICATION` means that the inference profile is defined by the user.
     */
    type?: pulumi.Input<string>;
    /**
     * The time at which the inference profile was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InferenceProfile resource.
 */
export interface InferenceProfileArgs {
    /**
     * The description of the inference profile.
     */
    description?: pulumi.Input<string>;
    /**
     * The source of the model this inference profile will track metrics and cost for. See `modelSource`.
     *
     * The following arguments are optional:
     */
    modelSource?: pulumi.Input<inputs.bedrock.InferenceProfileModelSource>;
    /**
     * The name of the inference profile.
     */
    name?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags for the inference profile.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.bedrock.InferenceProfileTimeouts>;
}
