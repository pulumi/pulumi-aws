// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface AgentAgentActionGroupActionGroupExecutor {
    /**
     * ARN of the Lambda that defines the business logic for the action group.
     */
    lambda?: string;
}
export interface AgentAgentActionGroupApiSchema {
    /**
     * YAML or JSON OpenAPI Schema.
     */
    payload?: string;
    /**
     * Configuration of S3 schema location
     */
    s3?: outputs.AgentAgentActionGroupApiSchemaS3;
}
export interface AgentAgentActionGroupApiSchemaS3 {
    /**
     * The S3 bucket name that contains the OpenAPI Schema.
     */
    s3BucketName?: string;
    /**
     * The S3 Object Key for the OpenAPI Schema in the S3 Bucket.
     *
     * The following arguments are optional:
     */
    s3ObjectKey?: string;
}
export interface AgentAgentAliasRoutingConfiguration {
    /**
     * Version of the agent the alias routes to.
     */
    agentVersion: string;
}
export interface AgentAgentAliasTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface AgentAgentPromptOverrideConfiguration {
    /**
     * ARN of Lambda to use when parsing the raw foundation model output.
     */
    overrideLambda: string;
    /**
     * List of prompt configurations.
     *
     * The following arguments are optional:
     */
    promptConfigurations: any[];
}
export interface AgentAgentTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface AgentKnowledgeBaseKnowledgeBaseConfiguration {
    /**
     * The vector store service in which the knowledge base is stored.Valid Values: OPENSEARCH_SERVERLESS | PINECONE | REDIS_ENTERPRISE_CLOUD | RDS
     */
    type: string;
    /**
     * Contains details about the embeddings model that'sused to   convert the data source.
     */
    vectorKnowledgeBaseConfiguration?: outputs.AgentKnowledgeBaseKnowledgeBaseConfigurationVectorKnowledgeBaseConfiguration;
}
export interface AgentKnowledgeBaseKnowledgeBaseConfigurationVectorKnowledgeBaseConfiguration {
    /**
     * The ARN of the model used to create vector embeddings for the knowledge base.
     */
    embeddingModelArn: string;
}
export interface AgentKnowledgeBaseStorageConfiguration {
    /**
     * Contains the storage configuration of the knowledge base in Amazon OpenSearch Service.
     */
    opensearchServerlessConfiguration?: outputs.AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfiguration;
    /**
     * Contains the storage configuration of the knowledge base in Pinecone.
     */
    pineconeConfiguration?: outputs.AgentKnowledgeBaseStorageConfigurationPineconeConfiguration;
    /**
     * Contains details about the storage configuration of the knowledge base in Amazon RDS. For more information, see Create a vector index in Amazon RDS.
     */
    rdsConfiguration?: outputs.AgentKnowledgeBaseStorageConfigurationRdsConfiguration;
    /**
     * Contains the storage configuration of the knowledge base in Redis Enterprise Cloud.
     */
    redisEnterpriseCloudConfiguration?: outputs.AgentKnowledgeBaseStorageConfigurationRedisEnterpriseCloudConfiguration;
    /**
     * The vector store service in which the knowledge base is stored.Valid Values: OPENSEARCH_SERVERLESS | PINECONE | REDIS_ENTERPRISE_CLOUD | RDS
     */
    type: string;
}
export interface AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfiguration {
    /**
     * The ARN of the OpenSearch Service vector store.
     */
    collectionArn: string;
    /**
     * Contains the names of the fields to which to map information about the vector store.
     */
    fieldMapping?: outputs.AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMapping;
    /**
     * The name of the vector store.
     */
    vectorIndexName: string;
}
export interface AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMapping {
    /**
     * The name of the field in which Amazon Bedrock stores metadata about the vector store.
     */
    metadataField?: string;
    /**
     * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     */
    textField?: string;
    /**
     * The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     */
    vectorField?: string;
}
export interface AgentKnowledgeBaseStorageConfigurationPineconeConfiguration {
    /**
     * The endpoint URL for your index management page.
     */
    connectionString: string;
    /**
     * The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.
     */
    credentialsSecretArn: string;
    /**
     * Contains the names of the fields to which to map information about the vector store.
     */
    fieldMapping?: outputs.AgentKnowledgeBaseStorageConfigurationPineconeConfigurationFieldMapping;
    /**
     * The namespace to be used to write new data to your database.
     */
    namespace?: string;
}
export interface AgentKnowledgeBaseStorageConfigurationPineconeConfigurationFieldMapping {
    /**
     * The name of the field in which Amazon Bedrock stores metadata about the vector store.
     */
    metadataField?: string;
    /**
     * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     */
    textField?: string;
}
export interface AgentKnowledgeBaseStorageConfigurationRdsConfiguration {
    /**
     * The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.
     */
    credentialsSecretArn: string;
    /**
     * The name of your Amazon RDS database.
     */
    databaseName: string;
    /**
     * Contains the names of the fields to which to map information about the vector store.
     */
    fieldMapping?: outputs.AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMapping;
    /**
     * The namespace to be used to write new data to your database.
     */
    resourceArn: string;
    /**
     * The name of the table in the database.
     */
    tableName: string;
}
export interface AgentKnowledgeBaseStorageConfigurationRdsConfigurationFieldMapping {
    /**
     * The name of the field in which Amazon Bedrock stores metadata about the vector store.
     */
    metadataField: string;
    /**
     * The name of the field in which Amazon Bedrock stores the ID for each entry.
     */
    primaryKeyField: string;
    /**
     * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     */
    textField: string;
    /**
     * The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     */
    vectorField: string;
}
export interface AgentKnowledgeBaseStorageConfigurationRedisEnterpriseCloudConfiguration {
    /**
     * The ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.
     */
    credentialsSecretArn: string;
    /**
     * The endpoint URL of the Redis Enterprise Cloud database.
     */
    endpoint: string;
    /**
     * Contains the names of the fields to which to map information about the vector store.
     */
    fieldMapping?: outputs.AgentKnowledgeBaseStorageConfigurationRedisEnterpriseCloudConfigurationFieldMapping;
    /**
     * The name of the vector store.
     */
    vectorIndexName: string;
}
export interface AgentKnowledgeBaseStorageConfigurationRedisEnterpriseCloudConfigurationFieldMapping {
    /**
     * The name of the field in which Amazon Bedrock stores metadata about the vector store.
     */
    metadataField?: string;
    /**
     * The name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
     */
    textField?: string;
    /**
     * The name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
     */
    vectorField?: string;
}
export interface AgentKnowledgeBaseTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    update?: string;
}
export interface CustomModelOutputDataConfig {
    /**
     * The S3 URI where the output data is stored.
     */
    s3Uri: string;
}
export interface CustomModelTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours). Setting a timeout for a Delete operation is only applicable if changes are saved into state before the destroy operation occurs.
     */
    delete?: string;
}
export interface CustomModelTrainingDataConfig {
    /**
     * The S3 URI where the training data is stored.
     */
    s3Uri: string;
}
export interface CustomModelTrainingMetric {
    /**
     * Loss metric associated with the customization job.
     */
    trainingLoss: number;
}
export interface CustomModelValidationDataConfig {
    /**
     * Information about the validators.
     */
    validators?: outputs.CustomModelValidationDataConfigValidator[];
}
export interface CustomModelValidationDataConfigValidator {
    s3Uri: string;
}
export interface CustomModelValidationMetric {
    /**
     * The validation loss associated with the validator.
     */
    validationLoss: number;
}
export interface CustomModelVpcConfig {
    /**
     * VPC configuration security group IDs.
     */
    securityGroupIds: string[];
    /**
     * VPC configuration subnets.
     */
    subnetIds: string[];
}
export interface ProvisionedModelThroughputTimeouts {
    /**
     * A string that can be [parsed as a duration](https://pkg.go.dev/time#ParseDuration) consisting of numbers and unit suffixes, such as "30s" or "2h45m". Valid time units are "s" (seconds), "m" (minutes), "h" (hours).
     */
    create?: string;
}
export interface GetCustomModelOutputDataConfig {
    /**
     * The S3 URI where the validation data is stored..
     */
    s3Uri: string;
}
export interface GetCustomModelTrainingDataConfig {
    /**
     * The S3 URI where the validation data is stored..
     */
    s3Uri: string;
}
export interface GetCustomModelTrainingMetric {
    /**
     * Loss metric associated with the customization job.
     */
    trainingLoss: number;
}
export interface GetCustomModelValidationDataConfig {
    /**
     * Information about the validators.
     */
    validators: any[];
}
export interface GetCustomModelValidationMetric {
    /**
     * The validation loss associated with the validator.
     */
    validationLoss: number;
}
export interface GetCustomModelsModelSummary {
    /**
     * Creation time of the model.
     */
    creationTime: string;
    /**
     * The ARN of the custom model.
     */
    modelArn: string;
    /**
     * The name of the custom model.
     */
    modelName: string;
}
