// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Agents for Amazon Bedrock Data Source.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.bedrock.AgentDataSource("example", {});
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Agents for Amazon Bedrock Data Source using the `example_id_arg`. For example:
 *
 * ```sh
 * $ pulumi import aws:bedrock/agentDataSource:AgentDataSource example data_source-id-12345678
 * ```
 */
export class AgentDataSource extends pulumi.CustomResource {
    /**
     * Get an existing AgentDataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AgentDataSourceState, opts?: pulumi.CustomResourceOptions): AgentDataSource {
        return new AgentDataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:bedrock/agentDataSource:AgentDataSource';

    /**
     * Returns true if the given object is an instance of AgentDataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AgentDataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AgentDataSource.__pulumiType;
    }

    public readonly dataDeletionPolicy!: pulumi.Output<string>;
    public readonly dataSourceConfiguration!: pulumi.Output<outputs.bedrock.AgentDataSourceDataSourceConfiguration | undefined>;
    public /*out*/ readonly dataSourceId!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly knowledgeBaseId!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly serverSideEncryptionConfiguration!: pulumi.Output<outputs.bedrock.AgentDataSourceServerSideEncryptionConfiguration | undefined>;
    public readonly timeouts!: pulumi.Output<outputs.bedrock.AgentDataSourceTimeouts | undefined>;
    public readonly vectorIngestionConfiguration!: pulumi.Output<outputs.bedrock.AgentDataSourceVectorIngestionConfiguration | undefined>;

    /**
     * Create a AgentDataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AgentDataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AgentDataSourceArgs | AgentDataSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AgentDataSourceState | undefined;
            resourceInputs["dataDeletionPolicy"] = state ? state.dataDeletionPolicy : undefined;
            resourceInputs["dataSourceConfiguration"] = state ? state.dataSourceConfiguration : undefined;
            resourceInputs["dataSourceId"] = state ? state.dataSourceId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["knowledgeBaseId"] = state ? state.knowledgeBaseId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = state ? state.serverSideEncryptionConfiguration : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["vectorIngestionConfiguration"] = state ? state.vectorIngestionConfiguration : undefined;
        } else {
            const args = argsOrState as AgentDataSourceArgs | undefined;
            if ((!args || args.knowledgeBaseId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'knowledgeBaseId'");
            }
            resourceInputs["dataDeletionPolicy"] = args ? args.dataDeletionPolicy : undefined;
            resourceInputs["dataSourceConfiguration"] = args ? args.dataSourceConfiguration : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["knowledgeBaseId"] = args ? args.knowledgeBaseId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serverSideEncryptionConfiguration"] = args ? args.serverSideEncryptionConfiguration : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["vectorIngestionConfiguration"] = args ? args.vectorIngestionConfiguration : undefined;
            resourceInputs["dataSourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AgentDataSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AgentDataSource resources.
 */
export interface AgentDataSourceState {
    dataDeletionPolicy?: pulumi.Input<string>;
    dataSourceConfiguration?: pulumi.Input<inputs.bedrock.AgentDataSourceDataSourceConfiguration>;
    dataSourceId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    knowledgeBaseId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.bedrock.AgentDataSourceServerSideEncryptionConfiguration>;
    timeouts?: pulumi.Input<inputs.bedrock.AgentDataSourceTimeouts>;
    vectorIngestionConfiguration?: pulumi.Input<inputs.bedrock.AgentDataSourceVectorIngestionConfiguration>;
}

/**
 * The set of arguments for constructing a AgentDataSource resource.
 */
export interface AgentDataSourceArgs {
    dataDeletionPolicy?: pulumi.Input<string>;
    dataSourceConfiguration?: pulumi.Input<inputs.bedrock.AgentDataSourceDataSourceConfiguration>;
    description?: pulumi.Input<string>;
    knowledgeBaseId: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    serverSideEncryptionConfiguration?: pulumi.Input<inputs.bedrock.AgentDataSourceServerSideEncryptionConfiguration>;
    timeouts?: pulumi.Input<inputs.bedrock.AgentDataSourceTimeouts>;
    vectorIngestionConfiguration?: pulumi.Input<inputs.bedrock.AgentDataSourceVectorIngestionConfiguration>;
}
