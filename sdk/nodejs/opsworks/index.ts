// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { CustomLayerArgs, CustomLayerState } from "./customLayer";
export type CustomLayer = import("./customLayer").CustomLayer;
export const CustomLayer: typeof import("./customLayer").CustomLayer = null as any;
utilities.lazyLoad(exports, ["CustomLayer"], () => require("./customLayer"));

export { EcsClusterLayerArgs, EcsClusterLayerState } from "./ecsClusterLayer";
export type EcsClusterLayer = import("./ecsClusterLayer").EcsClusterLayer;
export const EcsClusterLayer: typeof import("./ecsClusterLayer").EcsClusterLayer = null as any;
utilities.lazyLoad(exports, ["EcsClusterLayer"], () => require("./ecsClusterLayer"));

export { GangliaLayerArgs, GangliaLayerState } from "./gangliaLayer";
export type GangliaLayer = import("./gangliaLayer").GangliaLayer;
export const GangliaLayer: typeof import("./gangliaLayer").GangliaLayer = null as any;
utilities.lazyLoad(exports, ["GangliaLayer"], () => require("./gangliaLayer"));

export { HaproxyLayerArgs, HaproxyLayerState } from "./haproxyLayer";
export type HaproxyLayer = import("./haproxyLayer").HaproxyLayer;
export const HaproxyLayer: typeof import("./haproxyLayer").HaproxyLayer = null as any;
utilities.lazyLoad(exports, ["HaproxyLayer"], () => require("./haproxyLayer"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { JavaAppLayerArgs, JavaAppLayerState } from "./javaAppLayer";
export type JavaAppLayer = import("./javaAppLayer").JavaAppLayer;
export const JavaAppLayer: typeof import("./javaAppLayer").JavaAppLayer = null as any;
utilities.lazyLoad(exports, ["JavaAppLayer"], () => require("./javaAppLayer"));

export { MemcachedLayerArgs, MemcachedLayerState } from "./memcachedLayer";
export type MemcachedLayer = import("./memcachedLayer").MemcachedLayer;
export const MemcachedLayer: typeof import("./memcachedLayer").MemcachedLayer = null as any;
utilities.lazyLoad(exports, ["MemcachedLayer"], () => require("./memcachedLayer"));

export { MysqlLayerArgs, MysqlLayerState } from "./mysqlLayer";
export type MysqlLayer = import("./mysqlLayer").MysqlLayer;
export const MysqlLayer: typeof import("./mysqlLayer").MysqlLayer = null as any;
utilities.lazyLoad(exports, ["MysqlLayer"], () => require("./mysqlLayer"));

export { NodejsAppLayerArgs, NodejsAppLayerState } from "./nodejsAppLayer";
export type NodejsAppLayer = import("./nodejsAppLayer").NodejsAppLayer;
export const NodejsAppLayer: typeof import("./nodejsAppLayer").NodejsAppLayer = null as any;
utilities.lazyLoad(exports, ["NodejsAppLayer"], () => require("./nodejsAppLayer"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PhpAppLayerArgs, PhpAppLayerState } from "./phpAppLayer";
export type PhpAppLayer = import("./phpAppLayer").PhpAppLayer;
export const PhpAppLayer: typeof import("./phpAppLayer").PhpAppLayer = null as any;
utilities.lazyLoad(exports, ["PhpAppLayer"], () => require("./phpAppLayer"));

export { RailsAppLayerArgs, RailsAppLayerState } from "./railsAppLayer";
export type RailsAppLayer = import("./railsAppLayer").RailsAppLayer;
export const RailsAppLayer: typeof import("./railsAppLayer").RailsAppLayer = null as any;
utilities.lazyLoad(exports, ["RailsAppLayer"], () => require("./railsAppLayer"));

export { RdsDbInstanceArgs, RdsDbInstanceState } from "./rdsDbInstance";
export type RdsDbInstance = import("./rdsDbInstance").RdsDbInstance;
export const RdsDbInstance: typeof import("./rdsDbInstance").RdsDbInstance = null as any;
utilities.lazyLoad(exports, ["RdsDbInstance"], () => require("./rdsDbInstance"));

export { StackArgs, StackState } from "./stack";
export type Stack = import("./stack").Stack;
export const Stack: typeof import("./stack").Stack = null as any;
utilities.lazyLoad(exports, ["Stack"], () => require("./stack"));

export { StaticWebLayerArgs, StaticWebLayerState } from "./staticWebLayer";
export type StaticWebLayer = import("./staticWebLayer").StaticWebLayer;
export const StaticWebLayer: typeof import("./staticWebLayer").StaticWebLayer = null as any;
utilities.lazyLoad(exports, ["StaticWebLayer"], () => require("./staticWebLayer"));

export { UserProfileArgs, UserProfileState } from "./userProfile";
export type UserProfile = import("./userProfile").UserProfile;
export const UserProfile: typeof import("./userProfile").UserProfile = null as any;
utilities.lazyLoad(exports, ["UserProfile"], () => require("./userProfile"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:opsworks/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "aws:opsworks/customLayer:CustomLayer":
                return new CustomLayer(name, <any>undefined, { urn })
            case "aws:opsworks/ecsClusterLayer:EcsClusterLayer":
                return new EcsClusterLayer(name, <any>undefined, { urn })
            case "aws:opsworks/gangliaLayer:GangliaLayer":
                return new GangliaLayer(name, <any>undefined, { urn })
            case "aws:opsworks/haproxyLayer:HaproxyLayer":
                return new HaproxyLayer(name, <any>undefined, { urn })
            case "aws:opsworks/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "aws:opsworks/javaAppLayer:JavaAppLayer":
                return new JavaAppLayer(name, <any>undefined, { urn })
            case "aws:opsworks/memcachedLayer:MemcachedLayer":
                return new MemcachedLayer(name, <any>undefined, { urn })
            case "aws:opsworks/mysqlLayer:MysqlLayer":
                return new MysqlLayer(name, <any>undefined, { urn })
            case "aws:opsworks/nodejsAppLayer:NodejsAppLayer":
                return new NodejsAppLayer(name, <any>undefined, { urn })
            case "aws:opsworks/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "aws:opsworks/phpAppLayer:PhpAppLayer":
                return new PhpAppLayer(name, <any>undefined, { urn })
            case "aws:opsworks/railsAppLayer:RailsAppLayer":
                return new RailsAppLayer(name, <any>undefined, { urn })
            case "aws:opsworks/rdsDbInstance:RdsDbInstance":
                return new RdsDbInstance(name, <any>undefined, { urn })
            case "aws:opsworks/stack:Stack":
                return new Stack(name, <any>undefined, { urn })
            case "aws:opsworks/staticWebLayer:StaticWebLayer":
                return new StaticWebLayer(name, <any>undefined, { urn })
            case "aws:opsworks/userProfile:UserProfile":
                return new UserProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "opsworks/application", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/customLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/ecsClusterLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/gangliaLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/haproxyLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/instance", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/javaAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/memcachedLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/mysqlLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/nodejsAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/permission", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/phpAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/railsAppLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/rdsDbInstance", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/stack", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/staticWebLayer", _module)
pulumi.runtime.registerResourceModule("aws", "opsworks/userProfile", _module)
