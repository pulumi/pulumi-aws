// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an OpsWorks application resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * from "fs";
 *
 * const foo_app = new aws.opsworks.Application("foo-app", {
 *     shortName: "foobar",
 *     stackId: aws_opsworks_stack.main.id,
 *     type: "rails",
 *     description: "This is a Rails application",
 *     domains: [
 *         "example.com",
 *         "sub.example.com",
 *     ],
 *     environments: [{
 *         key: "key",
 *         value: "value",
 *         secure: false,
 *     }],
 *     appSources: [{
 *         type: "git",
 *         revision: "master",
 *         url: "https://github.com/example.git",
 *     }],
 *     enableSsl: true,
 *     sslConfigurations: [{
 *         privateKey: fs.readFileSync("./foobar.key"),
 *         certificate: fs.readFileSync("./foobar.crt"),
 *     }],
 *     documentRoot: "public",
 *     autoBundleOnDeploy: true,
 *     railsEnv: "staging",
 * });
 * ```
 *
 * ## Import
 *
 * Opsworks Application can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:opsworks/application:Application test <id>
 * ```
 */
export class Application extends pulumi.CustomResource {
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationState, opts?: pulumi.CustomResourceOptions): Application {
        return new Application(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opsworks/application:Application';

    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Application {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }

    /**
     * SCM configuration of the app as described below.
     */
    public readonly appSources!: pulumi.Output<outputs.opsworks.ApplicationAppSource[]>;
    /**
     * Run bundle install when deploying for application of type `rails`.
     */
    public readonly autoBundleOnDeploy!: pulumi.Output<string | undefined>;
    /**
     * Specify activity and workflow workers for your app using the aws-flow gem.
     */
    public readonly awsFlowRubySettings!: pulumi.Output<string | undefined>;
    /**
     * The data source's ARN.
     */
    public readonly dataSourceArn!: pulumi.Output<string | undefined>;
    /**
     * The database name.
     */
    public readonly dataSourceDatabaseName!: pulumi.Output<string | undefined>;
    /**
     * The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     */
    public readonly dataSourceType!: pulumi.Output<string | undefined>;
    /**
     * A description of the app.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Subfolder for the document root for application of type `rails`.
     */
    public readonly documentRoot!: pulumi.Output<string | undefined>;
    /**
     * A list of virtual host alias.
     */
    public readonly domains!: pulumi.Output<string[] | undefined>;
    /**
     * Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     */
    public readonly enableSsl!: pulumi.Output<boolean | undefined>;
    /**
     * Object to define environment variables.  Object is described below.
     */
    public readonly environments!: pulumi.Output<outputs.opsworks.ApplicationEnvironment[] | undefined>;
    /**
     * A human-readable name for the application.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the Rails environment for application of type `rails`.
     */
    public readonly railsEnv!: pulumi.Output<string | undefined>;
    /**
     * A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     */
    public readonly shortName!: pulumi.Output<string>;
    /**
     * The SSL configuration of the app. Object is described below.
     */
    public readonly sslConfigurations!: pulumi.Output<outputs.opsworks.ApplicationSslConfiguration[] | undefined>;
    /**
     * The id of the stack the application will belong to.
     */
    public readonly stackId!: pulumi.Output<string>;
    /**
     * Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Application resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApplicationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationArgs | ApplicationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationState | undefined;
            resourceInputs["appSources"] = state ? state.appSources : undefined;
            resourceInputs["autoBundleOnDeploy"] = state ? state.autoBundleOnDeploy : undefined;
            resourceInputs["awsFlowRubySettings"] = state ? state.awsFlowRubySettings : undefined;
            resourceInputs["dataSourceArn"] = state ? state.dataSourceArn : undefined;
            resourceInputs["dataSourceDatabaseName"] = state ? state.dataSourceDatabaseName : undefined;
            resourceInputs["dataSourceType"] = state ? state.dataSourceType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["documentRoot"] = state ? state.documentRoot : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["enableSsl"] = state ? state.enableSsl : undefined;
            resourceInputs["environments"] = state ? state.environments : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["railsEnv"] = state ? state.railsEnv : undefined;
            resourceInputs["shortName"] = state ? state.shortName : undefined;
            resourceInputs["sslConfigurations"] = state ? state.sslConfigurations : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ApplicationArgs | undefined;
            if ((!args || args.stackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["appSources"] = args ? args.appSources : undefined;
            resourceInputs["autoBundleOnDeploy"] = args ? args.autoBundleOnDeploy : undefined;
            resourceInputs["awsFlowRubySettings"] = args ? args.awsFlowRubySettings : undefined;
            resourceInputs["dataSourceArn"] = args ? args.dataSourceArn : undefined;
            resourceInputs["dataSourceDatabaseName"] = args ? args.dataSourceDatabaseName : undefined;
            resourceInputs["dataSourceType"] = args ? args.dataSourceType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["documentRoot"] = args ? args.documentRoot : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["enableSsl"] = args ? args.enableSsl : undefined;
            resourceInputs["environments"] = args ? args.environments : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["railsEnv"] = args ? args.railsEnv : undefined;
            resourceInputs["shortName"] = args ? args.shortName : undefined;
            resourceInputs["sslConfigurations"] = args ? args.sslConfigurations : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Application resources.
 */
export interface ApplicationState {
    /**
     * SCM configuration of the app as described below.
     */
    appSources?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationAppSource>[]>;
    /**
     * Run bundle install when deploying for application of type `rails`.
     */
    autoBundleOnDeploy?: pulumi.Input<string>;
    /**
     * Specify activity and workflow workers for your app using the aws-flow gem.
     */
    awsFlowRubySettings?: pulumi.Input<string>;
    /**
     * The data source's ARN.
     */
    dataSourceArn?: pulumi.Input<string>;
    /**
     * The database name.
     */
    dataSourceDatabaseName?: pulumi.Input<string>;
    /**
     * The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     */
    dataSourceType?: pulumi.Input<string>;
    /**
     * A description of the app.
     */
    description?: pulumi.Input<string>;
    /**
     * Subfolder for the document root for application of type `rails`.
     */
    documentRoot?: pulumi.Input<string>;
    /**
     * A list of virtual host alias.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     */
    enableSsl?: pulumi.Input<boolean>;
    /**
     * Object to define environment variables.  Object is described below.
     */
    environments?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationEnvironment>[]>;
    /**
     * A human-readable name for the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Rails environment for application of type `rails`.
     */
    railsEnv?: pulumi.Input<string>;
    /**
     * A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     */
    shortName?: pulumi.Input<string>;
    /**
     * The SSL configuration of the app. Object is described below.
     */
    sslConfigurations?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationSslConfiguration>[]>;
    /**
     * The id of the stack the application will belong to.
     */
    stackId?: pulumi.Input<string>;
    /**
     * Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Application resource.
 */
export interface ApplicationArgs {
    /**
     * SCM configuration of the app as described below.
     */
    appSources?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationAppSource>[]>;
    /**
     * Run bundle install when deploying for application of type `rails`.
     */
    autoBundleOnDeploy?: pulumi.Input<string>;
    /**
     * Specify activity and workflow workers for your app using the aws-flow gem.
     */
    awsFlowRubySettings?: pulumi.Input<string>;
    /**
     * The data source's ARN.
     */
    dataSourceArn?: pulumi.Input<string>;
    /**
     * The database name.
     */
    dataSourceDatabaseName?: pulumi.Input<string>;
    /**
     * The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
     */
    dataSourceType?: pulumi.Input<string>;
    /**
     * A description of the app.
     */
    description?: pulumi.Input<string>;
    /**
     * Subfolder for the document root for application of type `rails`.
     */
    documentRoot?: pulumi.Input<string>;
    /**
     * A list of virtual host alias.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
     */
    enableSsl?: pulumi.Input<boolean>;
    /**
     * Object to define environment variables.  Object is described below.
     */
    environments?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationEnvironment>[]>;
    /**
     * A human-readable name for the application.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Rails environment for application of type `rails`.
     */
    railsEnv?: pulumi.Input<string>;
    /**
     * A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
     */
    shortName?: pulumi.Input<string>;
    /**
     * The SSL configuration of the app. Object is described below.
     */
    sslConfigurations?: pulumi.Input<pulumi.Input<inputs.opsworks.ApplicationSslConfiguration>[]>;
    /**
     * The id of the stack the application will belong to.
     */
    stackId: pulumi.Input<string>;
    /**
     * Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
     */
    type: pulumi.Input<string>;
}
