// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an OpsWorks instance resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const my_instance = new aws.opsworks.Instance("my-instance", {
 *     stackId: aws_opsworks_stack.main.id,
 *     layerIds: [aws_opsworks_custom_layer["my-layer"].id],
 *     instanceType: "t2.micro",
 *     os: "Amazon Linux 2015.09",
 *     state: "stopped",
 * });
 * ```
 * ## Block devices
 *
 * Each of the `*_block_device` attributes controls a portion of the AWS
 * Instance's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
 * Mapping docs](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
 * to understand the implications of using these attributes.
 *
 * ### `ebsBlockDevice`
 *
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed on instance termination. Default is `true`.
 * * `deviceName` - (Required) Name of the device to mount.
 * * `iops` - (Optional) Amount of provisioned [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `io1`.
 * * `snapshotId` - (Optional) Snapshot ID to mount.
 * * `volumeSize` - (Optional) Size of the volume in gigabytes.
 * * `volumeType` - (Optional) Type of volume. Valid values are `standard`, `gp2`, or `io1`. Default is `standard`.
 *
 * Modifying any `ebsBlockDevice` currently requires resource replacement.
 *
 * ### `ephemeralBlockDevice`
 *
 * * `deviceName` - Name of the block device to mount on the instance.
 * * `virtualName` - The [Instance Store Device Name](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames) (e.g., `ephemeral0`).
 *
 * Each AWS Instance type has a different set of Instance Store block devices
 * available for attachment. AWS [publishes a
 * list](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
 * of which ephemeral devices are available on each type. The devices are always
 * identified by the `virtualName` in the format `ephemeral{0..N}`.
 *
 * ### `rootBlockDevice`
 *
 * * `deleteOnTermination` - (Optional) Whether the volume should be destroyed on instance termination. Default is `true`.
 * * `iops` - (Optional) Amount of provisioned [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `io1`.
 * * `volumeSize` - (Optional) Size of the volume in gigabytes.
 * * `volumeType` - (Optional) Type of volume. Valid values are `standard`, `gp2`, or `io1`. Default is `standard`.
 *
 * Modifying any of the `rootBlockDevice` settings requires resource
 * replacement.
 *
 * > **NOTE:** Currently, changes to `*_block_device` configuration of _existing_
 * resources cannot be automatically detected by this provider. After making updates
 * to block device configuration, resource recreation can be manually triggered by
 * using the [`up` command with the --replace argument](https://www.pulumi.com/docs/reference/cli/pulumi_up/).
 *
 * ## Import
 *
 * Opsworks Instances can be imported using the `instance id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:opsworks/instance:Instance my_instance 4d6d1710-ded9-42a1-b08e-b043ad7af1e2
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:opsworks/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * OpsWorks agent to install. Default is `INHERIT`.
     */
    public readonly agentVersion!: pulumi.Output<string | undefined>;
    /**
     * AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
     */
    public readonly amiId!: pulumi.Output<string>;
    /**
     * Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
     */
    public readonly architecture!: pulumi.Output<string | undefined>;
    /**
     * Creates load-based or time-based instances.  Valid values are `load`, `timer`.
     */
    public readonly autoScalingType!: pulumi.Output<string | undefined>;
    /**
     * Name of the availability zone where instances will be created by default.
     */
    public readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Time that the instance was created.
     */
    public readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether to delete EBS volume on deletion. Default is `true`.
     */
    public readonly deleteEbs!: pulumi.Output<boolean | undefined>;
    /**
     * Whether to delete the Elastic IP on deletion.
     */
    public readonly deleteEip!: pulumi.Output<boolean | undefined>;
    /**
     * Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
     */
    public readonly ebsBlockDevices!: pulumi.Output<outputs.opsworks.InstanceEbsBlockDevice[]>;
    /**
     * Whether the launched EC2 instance will be EBS-optimized.
     */
    public readonly ebsOptimized!: pulumi.Output<boolean | undefined>;
    /**
     * EC2 instance ID.
     */
    public /*out*/ readonly ec2InstanceId!: pulumi.Output<string>;
    /**
     * ECS cluster's ARN for container instances.
     */
    public readonly ecsClusterArn!: pulumi.Output<string>;
    /**
     * Instance Elastic IP address.
     */
    public readonly elasticIp!: pulumi.Output<string>;
    /**
     * Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
     */
    public readonly ephemeralBlockDevices!: pulumi.Output<outputs.opsworks.InstanceEphemeralBlockDevice[]>;
    /**
     * Instance's host name.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * For registered instances, infrastructure class: ec2 or on-premises.
     */
    public readonly infrastructureClass!: pulumi.Output<string>;
    /**
     * Controls where to install OS and package updates when the instance boots.  Default is `true`.
     */
    public readonly installUpdatesOnBoot!: pulumi.Output<boolean | undefined>;
    /**
     * ARN of the instance's IAM profile.
     */
    public readonly instanceProfileArn!: pulumi.Output<string>;
    /**
     * Type of instance to start.
     */
    public readonly instanceType!: pulumi.Output<string | undefined>;
    /**
     * ID of the last service error.
     */
    public /*out*/ readonly lastServiceErrorId!: pulumi.Output<string>;
    /**
     * List of the layers the instance will belong to.
     */
    public readonly layerIds!: pulumi.Output<string[]>;
    /**
     * Name of operating system that will be installed.
     */
    public readonly os!: pulumi.Output<string>;
    /**
     * Instance's platform.
     */
    public /*out*/ readonly platform!: pulumi.Output<string>;
    /**
     * Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
     */
    public /*out*/ readonly privateDns!: pulumi.Output<string>;
    /**
     * Private IP address assigned to the instance.
     */
    public /*out*/ readonly privateIp!: pulumi.Output<string>;
    /**
     * Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
     */
    public /*out*/ readonly publicDns!: pulumi.Output<string>;
    /**
     * Public IP address assigned to the instance, if applicable.
     */
    public /*out*/ readonly publicIp!: pulumi.Output<string>;
    /**
     * For registered instances, who performed the registration.
     */
    public /*out*/ readonly registeredBy!: pulumi.Output<string>;
    /**
     * Instance's reported AWS OpsWorks Stacks agent version.
     */
    public /*out*/ readonly reportedAgentVersion!: pulumi.Output<string>;
    /**
     * For registered instances, the reported operating system family.
     */
    public /*out*/ readonly reportedOsFamily!: pulumi.Output<string>;
    /**
     * For registered instances, the reported operating system name.
     */
    public /*out*/ readonly reportedOsName!: pulumi.Output<string>;
    /**
     * For registered instances, the reported operating system version.
     */
    public /*out*/ readonly reportedOsVersion!: pulumi.Output<string>;
    /**
     * Configuration block for the root block device of the instance. See Block Devices below.
     */
    public readonly rootBlockDevices!: pulumi.Output<outputs.opsworks.InstanceRootBlockDevice[]>;
    /**
     * Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
     */
    public readonly rootDeviceType!: pulumi.Output<string>;
    /**
     * Root device volume ID.
     */
    public /*out*/ readonly rootDeviceVolumeId!: pulumi.Output<string>;
    /**
     * Associated security groups.
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * SSH key's Deep Security Agent (DSA) fingerprint.
     */
    public /*out*/ readonly sshHostDsaKeyFingerprint!: pulumi.Output<string>;
    /**
     * SSH key's RSA fingerprint.
     */
    public /*out*/ readonly sshHostRsaKeyFingerprint!: pulumi.Output<string>;
    /**
     * Name of the SSH keypair that instances will have by default.
     */
    public readonly sshKeyName!: pulumi.Output<string>;
    /**
     * Identifier of the stack the instance will belong to.
     */
    public readonly stackId!: pulumi.Output<string>;
    /**
     * Desired state of the instance. Valid values are `running` or `stopped`.
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * Subnet ID to attach to.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
     */
    public readonly tenancy!: pulumi.Output<string>;
    /**
     * Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
     */
    public readonly virtualizationType!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["agentVersion"] = state ? state.agentVersion : undefined;
            resourceInputs["amiId"] = state ? state.amiId : undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["autoScalingType"] = state ? state.autoScalingType : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deleteEbs"] = state ? state.deleteEbs : undefined;
            resourceInputs["deleteEip"] = state ? state.deleteEip : undefined;
            resourceInputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            resourceInputs["ebsOptimized"] = state ? state.ebsOptimized : undefined;
            resourceInputs["ec2InstanceId"] = state ? state.ec2InstanceId : undefined;
            resourceInputs["ecsClusterArn"] = state ? state.ecsClusterArn : undefined;
            resourceInputs["elasticIp"] = state ? state.elasticIp : undefined;
            resourceInputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["infrastructureClass"] = state ? state.infrastructureClass : undefined;
            resourceInputs["installUpdatesOnBoot"] = state ? state.installUpdatesOnBoot : undefined;
            resourceInputs["instanceProfileArn"] = state ? state.instanceProfileArn : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["lastServiceErrorId"] = state ? state.lastServiceErrorId : undefined;
            resourceInputs["layerIds"] = state ? state.layerIds : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["privateDns"] = state ? state.privateDns : undefined;
            resourceInputs["privateIp"] = state ? state.privateIp : undefined;
            resourceInputs["publicDns"] = state ? state.publicDns : undefined;
            resourceInputs["publicIp"] = state ? state.publicIp : undefined;
            resourceInputs["registeredBy"] = state ? state.registeredBy : undefined;
            resourceInputs["reportedAgentVersion"] = state ? state.reportedAgentVersion : undefined;
            resourceInputs["reportedOsFamily"] = state ? state.reportedOsFamily : undefined;
            resourceInputs["reportedOsName"] = state ? state.reportedOsName : undefined;
            resourceInputs["reportedOsVersion"] = state ? state.reportedOsVersion : undefined;
            resourceInputs["rootBlockDevices"] = state ? state.rootBlockDevices : undefined;
            resourceInputs["rootDeviceType"] = state ? state.rootDeviceType : undefined;
            resourceInputs["rootDeviceVolumeId"] = state ? state.rootDeviceVolumeId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["sshHostDsaKeyFingerprint"] = state ? state.sshHostDsaKeyFingerprint : undefined;
            resourceInputs["sshHostRsaKeyFingerprint"] = state ? state.sshHostRsaKeyFingerprint : undefined;
            resourceInputs["sshKeyName"] = state ? state.sshKeyName : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tenancy"] = state ? state.tenancy : undefined;
            resourceInputs["virtualizationType"] = state ? state.virtualizationType : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.layerIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerIds'");
            }
            if ((!args || args.stackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["agentVersion"] = args ? args.agentVersion : undefined;
            resourceInputs["amiId"] = args ? args.amiId : undefined;
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["autoScalingType"] = args ? args.autoScalingType : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["createdAt"] = args ? args.createdAt : undefined;
            resourceInputs["deleteEbs"] = args ? args.deleteEbs : undefined;
            resourceInputs["deleteEip"] = args ? args.deleteEip : undefined;
            resourceInputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            resourceInputs["ebsOptimized"] = args ? args.ebsOptimized : undefined;
            resourceInputs["ecsClusterArn"] = args ? args.ecsClusterArn : undefined;
            resourceInputs["elasticIp"] = args ? args.elasticIp : undefined;
            resourceInputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["infrastructureClass"] = args ? args.infrastructureClass : undefined;
            resourceInputs["installUpdatesOnBoot"] = args ? args.installUpdatesOnBoot : undefined;
            resourceInputs["instanceProfileArn"] = args ? args.instanceProfileArn : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["layerIds"] = args ? args.layerIds : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["rootBlockDevices"] = args ? args.rootBlockDevices : undefined;
            resourceInputs["rootDeviceType"] = args ? args.rootDeviceType : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["sshKeyName"] = args ? args.sshKeyName : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tenancy"] = args ? args.tenancy : undefined;
            resourceInputs["virtualizationType"] = args ? args.virtualizationType : undefined;
            resourceInputs["ec2InstanceId"] = undefined /*out*/;
            resourceInputs["lastServiceErrorId"] = undefined /*out*/;
            resourceInputs["platform"] = undefined /*out*/;
            resourceInputs["privateDns"] = undefined /*out*/;
            resourceInputs["privateIp"] = undefined /*out*/;
            resourceInputs["publicDns"] = undefined /*out*/;
            resourceInputs["publicIp"] = undefined /*out*/;
            resourceInputs["registeredBy"] = undefined /*out*/;
            resourceInputs["reportedAgentVersion"] = undefined /*out*/;
            resourceInputs["reportedOsFamily"] = undefined /*out*/;
            resourceInputs["reportedOsName"] = undefined /*out*/;
            resourceInputs["reportedOsVersion"] = undefined /*out*/;
            resourceInputs["rootDeviceVolumeId"] = undefined /*out*/;
            resourceInputs["sshHostDsaKeyFingerprint"] = undefined /*out*/;
            resourceInputs["sshHostRsaKeyFingerprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * OpsWorks agent to install. Default is `INHERIT`.
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
     */
    amiId?: pulumi.Input<string>;
    /**
     * Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * Creates load-based or time-based instances.  Valid values are `load`, `timer`.
     */
    autoScalingType?: pulumi.Input<string>;
    /**
     * Name of the availability zone where instances will be created by default.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Time that the instance was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to delete EBS volume on deletion. Default is `true`.
     */
    deleteEbs?: pulumi.Input<boolean>;
    /**
     * Whether to delete the Elastic IP on deletion.
     */
    deleteEip?: pulumi.Input<boolean>;
    /**
     * Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
     */
    ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.opsworks.InstanceEbsBlockDevice>[]>;
    /**
     * Whether the launched EC2 instance will be EBS-optimized.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * EC2 instance ID.
     */
    ec2InstanceId?: pulumi.Input<string>;
    /**
     * ECS cluster's ARN for container instances.
     */
    ecsClusterArn?: pulumi.Input<string>;
    /**
     * Instance Elastic IP address.
     */
    elasticIp?: pulumi.Input<string>;
    /**
     * Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
     */
    ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.opsworks.InstanceEphemeralBlockDevice>[]>;
    /**
     * Instance's host name.
     */
    hostname?: pulumi.Input<string>;
    /**
     * For registered instances, infrastructure class: ec2 or on-premises.
     */
    infrastructureClass?: pulumi.Input<string>;
    /**
     * Controls where to install OS and package updates when the instance boots.  Default is `true`.
     */
    installUpdatesOnBoot?: pulumi.Input<boolean>;
    /**
     * ARN of the instance's IAM profile.
     */
    instanceProfileArn?: pulumi.Input<string>;
    /**
     * Type of instance to start.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * ID of the last service error.
     */
    lastServiceErrorId?: pulumi.Input<string>;
    /**
     * List of the layers the instance will belong to.
     */
    layerIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of operating system that will be installed.
     */
    os?: pulumi.Input<string>;
    /**
     * Instance's platform.
     */
    platform?: pulumi.Input<string>;
    /**
     * Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
     */
    privateDns?: pulumi.Input<string>;
    /**
     * Private IP address assigned to the instance.
     */
    privateIp?: pulumi.Input<string>;
    /**
     * Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
     */
    publicDns?: pulumi.Input<string>;
    /**
     * Public IP address assigned to the instance, if applicable.
     */
    publicIp?: pulumi.Input<string>;
    /**
     * For registered instances, who performed the registration.
     */
    registeredBy?: pulumi.Input<string>;
    /**
     * Instance's reported AWS OpsWorks Stacks agent version.
     */
    reportedAgentVersion?: pulumi.Input<string>;
    /**
     * For registered instances, the reported operating system family.
     */
    reportedOsFamily?: pulumi.Input<string>;
    /**
     * For registered instances, the reported operating system name.
     */
    reportedOsName?: pulumi.Input<string>;
    /**
     * For registered instances, the reported operating system version.
     */
    reportedOsVersion?: pulumi.Input<string>;
    /**
     * Configuration block for the root block device of the instance. See Block Devices below.
     */
    rootBlockDevices?: pulumi.Input<pulumi.Input<inputs.opsworks.InstanceRootBlockDevice>[]>;
    /**
     * Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
     */
    rootDeviceType?: pulumi.Input<string>;
    /**
     * Root device volume ID.
     */
    rootDeviceVolumeId?: pulumi.Input<string>;
    /**
     * Associated security groups.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * SSH key's Deep Security Agent (DSA) fingerprint.
     */
    sshHostDsaKeyFingerprint?: pulumi.Input<string>;
    /**
     * SSH key's RSA fingerprint.
     */
    sshHostRsaKeyFingerprint?: pulumi.Input<string>;
    /**
     * Name of the SSH keypair that instances will have by default.
     */
    sshKeyName?: pulumi.Input<string>;
    /**
     * Identifier of the stack the instance will belong to.
     */
    stackId?: pulumi.Input<string>;
    /**
     * Desired state of the instance. Valid values are `running` or `stopped`.
     */
    state?: pulumi.Input<string>;
    /**
     * Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet ID to attach to.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
     */
    tenancy?: pulumi.Input<string>;
    /**
     * Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
     */
    virtualizationType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * OpsWorks agent to install. Default is `INHERIT`.
     */
    agentVersion?: pulumi.Input<string>;
    /**
     * AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
     */
    amiId?: pulumi.Input<string>;
    /**
     * Machine architecture for created instances.  Valid values are `x8664` or `i386`. The default is `x8664`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * Creates load-based or time-based instances.  Valid values are `load`, `timer`.
     */
    autoScalingType?: pulumi.Input<string>;
    /**
     * Name of the availability zone where instances will be created by default.
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Time that the instance was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether to delete EBS volume on deletion. Default is `true`.
     */
    deleteEbs?: pulumi.Input<boolean>;
    /**
     * Whether to delete the Elastic IP on deletion.
     */
    deleteEip?: pulumi.Input<boolean>;
    /**
     * Configuration block for additional EBS block devices to attach to the instance. See Block Devices below.
     */
    ebsBlockDevices?: pulumi.Input<pulumi.Input<inputs.opsworks.InstanceEbsBlockDevice>[]>;
    /**
     * Whether the launched EC2 instance will be EBS-optimized.
     */
    ebsOptimized?: pulumi.Input<boolean>;
    /**
     * ECS cluster's ARN for container instances.
     */
    ecsClusterArn?: pulumi.Input<string>;
    /**
     * Instance Elastic IP address.
     */
    elasticIp?: pulumi.Input<string>;
    /**
     * Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below.
     */
    ephemeralBlockDevices?: pulumi.Input<pulumi.Input<inputs.opsworks.InstanceEphemeralBlockDevice>[]>;
    /**
     * Instance's host name.
     */
    hostname?: pulumi.Input<string>;
    /**
     * For registered instances, infrastructure class: ec2 or on-premises.
     */
    infrastructureClass?: pulumi.Input<string>;
    /**
     * Controls where to install OS and package updates when the instance boots.  Default is `true`.
     */
    installUpdatesOnBoot?: pulumi.Input<boolean>;
    /**
     * ARN of the instance's IAM profile.
     */
    instanceProfileArn?: pulumi.Input<string>;
    /**
     * Type of instance to start.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * List of the layers the instance will belong to.
     */
    layerIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of operating system that will be installed.
     */
    os?: pulumi.Input<string>;
    /**
     * Configuration block for the root block device of the instance. See Block Devices below.
     */
    rootBlockDevices?: pulumi.Input<pulumi.Input<inputs.opsworks.InstanceRootBlockDevice>[]>;
    /**
     * Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
     */
    rootDeviceType?: pulumi.Input<string>;
    /**
     * Associated security groups.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the SSH keypair that instances will have by default.
     */
    sshKeyName?: pulumi.Input<string>;
    /**
     * Identifier of the stack the instance will belong to.
     */
    stackId: pulumi.Input<string>;
    /**
     * Desired state of the instance. Valid values are `running` or `stopped`.
     */
    state?: pulumi.Input<string>;
    /**
     * Instance status. Will be one of `booting`, `connectionLost`, `online`, `pending`, `rebooting`, `requested`, `runningSetup`, `setupFailed`, `shuttingDown`, `startFailed`, `stopFailed`, `stopped`, `stopping`, `terminated`, or `terminating`.
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet ID to attach to.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
     */
    tenancy?: pulumi.Input<string>;
    /**
     * Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.
     */
    virtualizationType?: pulumi.Input<string>;
}
