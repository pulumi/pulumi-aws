// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface PipeEnrichmentParameters {
    /**
     * Contains the HTTP parameters to use when the target is a API Gateway REST endpoint or EventBridge ApiDestination. If you specify an API Gateway REST API or EventBridge ApiDestination as a target, you can use this parameter to specify headers, path parameters, and query string keys/values as part of your target invoking request. If you're using ApiDestinations, the corresponding Connection can also have these values configured. In case of any conflicting keys, values from the Connection take precedence. Detailed below.
     */
    httpParameters?: pulumi.Input<inputs.PipeEnrichmentParametersHttpParameters>;
    /**
     * Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
     */
    inputTemplate?: pulumi.Input<string>;
}
export interface PipeEnrichmentParametersHttpParameters {
    headerParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pathParameterValues?: pulumi.Input<string>;
    queryStringParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
export interface PipeSourceParameters {
    /**
     * The parameters for using an Active MQ broker as a source. Detailed below.
     */
    activemqBrokerParameters?: pulumi.Input<inputs.PipeSourceParametersActivemqBrokerParameters>;
    /**
     * The parameters for using a DynamoDB stream as a source.  Detailed below.
     */
    dynamodbStreamParameters?: pulumi.Input<inputs.PipeSourceParametersDynamodbStreamParameters>;
    /**
     * The collection of event patterns used to [filter events](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-pipes-event-filtering.html). Detailed below.
     */
    filterCriteria?: pulumi.Input<inputs.PipeSourceParametersFilterCriteria>;
    /**
     * The parameters for using a Kinesis stream as a source. Detailed below.
     */
    kinesisStreamParameters?: pulumi.Input<inputs.PipeSourceParametersKinesisStreamParameters>;
    /**
     * The parameters for using an MSK stream as a source. Detailed below.
     */
    managedStreamingKafkaParameters?: pulumi.Input<inputs.PipeSourceParametersManagedStreamingKafkaParameters>;
    /**
     * The parameters for using a Rabbit MQ broker as a source. Detailed below.
     */
    rabbitmqBrokerParameters?: pulumi.Input<inputs.PipeSourceParametersRabbitmqBrokerParameters>;
    /**
     * The parameters for using a self-managed Apache Kafka stream as a source. Detailed below.
     */
    selfManagedKafkaParameters?: pulumi.Input<inputs.PipeSourceParametersSelfManagedKafkaParameters>;
    /**
     * The parameters for using a Amazon SQS stream as a source. Detailed below.
     */
    sqsQueueParameters?: pulumi.Input<inputs.PipeSourceParametersSqsQueueParameters>;
}
export interface PipeSourceParametersActivemqBrokerParameters {
    batchSize?: pulumi.Input<number>;
    credentials: pulumi.Input<inputs.PipeSourceParametersActivemqBrokerParametersCredentials>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    queueName: pulumi.Input<string>;
}
export interface PipeSourceParametersActivemqBrokerParametersCredentials {
    basicAuth: pulumi.Input<string>;
}
export interface PipeSourceParametersDynamodbStreamParameters {
    batchSize?: pulumi.Input<number>;
    deadLetterConfig?: pulumi.Input<inputs.PipeSourceParametersDynamodbStreamParametersDeadLetterConfig>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    maximumRecordAgeInSeconds?: pulumi.Input<number>;
    maximumRetryAttempts?: pulumi.Input<number>;
    onPartialBatchItemFailure?: pulumi.Input<string>;
    parallelizationFactor?: pulumi.Input<number>;
    startingPosition: pulumi.Input<string>;
}
export interface PipeSourceParametersDynamodbStreamParametersDeadLetterConfig {
    /**
     * ARN of this pipe.
     */
    arn?: pulumi.Input<string>;
}
export interface PipeSourceParametersFilterCriteria {
    filters?: pulumi.Input<pulumi.Input<inputs.PipeSourceParametersFilterCriteriaFilter>[]>;
}
export interface PipeSourceParametersFilterCriteriaFilter {
    pattern: pulumi.Input<string>;
}
export interface PipeSourceParametersKinesisStreamParameters {
    batchSize?: pulumi.Input<number>;
    deadLetterConfig?: pulumi.Input<inputs.PipeSourceParametersKinesisStreamParametersDeadLetterConfig>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    maximumRecordAgeInSeconds?: pulumi.Input<number>;
    maximumRetryAttempts?: pulumi.Input<number>;
    onPartialBatchItemFailure?: pulumi.Input<string>;
    parallelizationFactor?: pulumi.Input<number>;
    startingPosition: pulumi.Input<string>;
    startingPositionTimestamp?: pulumi.Input<string>;
}
export interface PipeSourceParametersKinesisStreamParametersDeadLetterConfig {
    /**
     * ARN of this pipe.
     */
    arn?: pulumi.Input<string>;
}
export interface PipeSourceParametersManagedStreamingKafkaParameters {
    batchSize?: pulumi.Input<number>;
    consumerGroupId?: pulumi.Input<string>;
    credentials?: pulumi.Input<inputs.PipeSourceParametersManagedStreamingKafkaParametersCredentials>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    startingPosition?: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
}
export interface PipeSourceParametersManagedStreamingKafkaParametersCredentials {
    clientCertificateTlsAuth?: pulumi.Input<string>;
    saslScram512Auth?: pulumi.Input<string>;
}
export interface PipeSourceParametersRabbitmqBrokerParameters {
    batchSize?: pulumi.Input<number>;
    credentials: pulumi.Input<inputs.PipeSourceParametersRabbitmqBrokerParametersCredentials>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    queueName: pulumi.Input<string>;
    virtualHost?: pulumi.Input<string>;
}
export interface PipeSourceParametersRabbitmqBrokerParametersCredentials {
    basicAuth: pulumi.Input<string>;
}
export interface PipeSourceParametersSelfManagedKafkaParameters {
    additionalBootstrapServers?: pulumi.Input<pulumi.Input<string>[]>;
    batchSize?: pulumi.Input<number>;
    consumerGroupId?: pulumi.Input<string>;
    credentials?: pulumi.Input<inputs.PipeSourceParametersSelfManagedKafkaParametersCredentials>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    serverRootCaCertificate?: pulumi.Input<string>;
    startingPosition?: pulumi.Input<string>;
    topicName: pulumi.Input<string>;
    vpc?: pulumi.Input<inputs.PipeSourceParametersSelfManagedKafkaParametersVpc>;
}
export interface PipeSourceParametersSelfManagedKafkaParametersCredentials {
    basicAuth: pulumi.Input<string>;
    clientCertificateTlsAuth?: pulumi.Input<string>;
    saslScram256Auth?: pulumi.Input<string>;
    saslScram512Auth?: pulumi.Input<string>;
}
export interface PipeSourceParametersSelfManagedKafkaParametersVpc {
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface PipeSourceParametersSqsQueueParameters {
    batchSize?: pulumi.Input<number>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
}
export interface PipeTargetParameters {
    /**
     * The parameters for using an AWS Batch job as a target. Detailed below.
     */
    batchJobParameters?: pulumi.Input<inputs.PipeTargetParametersBatchJobParameters>;
    /**
     * The parameters for using an CloudWatch Logs log stream as a target. Detailed below.
     */
    cloudwatchLogsParameters?: pulumi.Input<inputs.PipeTargetParametersCloudwatchLogsParameters>;
    /**
     * The parameters for using an Amazon ECS task as a target. Detailed below.
     */
    ecsTaskParameters?: pulumi.Input<inputs.PipeTargetParametersEcsTaskParameters>;
    /**
     * The parameters for using an EventBridge event bus as a target. Detailed below.
     */
    eventbridgeEventBusParameters?: pulumi.Input<inputs.PipeTargetParametersEventbridgeEventBusParameters>;
    /**
     * These are custom parameter to be used when the target is an API Gateway REST APIs or EventBridge ApiDestinations. Detailed below.
     */
    httpParameters?: pulumi.Input<inputs.PipeTargetParametersHttpParameters>;
    /**
     * Valid JSON text passed to the target. In this case, nothing from the event itself is passed to the target. Maximum length of 8192 characters.
     */
    inputTemplate?: pulumi.Input<string>;
    /**
     * The parameters for using a Kinesis stream as a source. Detailed below.
     */
    kinesisStreamParameters?: pulumi.Input<inputs.PipeTargetParametersKinesisStreamParameters>;
    /**
     * The parameters for using a Lambda function as a target. Detailed below.
     */
    lambdaFunctionParameters?: pulumi.Input<inputs.PipeTargetParametersLambdaFunctionParameters>;
    /**
     * These are custom parameters to be used when the target is a Amazon Redshift cluster to invoke the Amazon Redshift Data API BatchExecuteStatement. Detailed below.
     */
    redshiftDataParameters?: pulumi.Input<inputs.PipeTargetParametersRedshiftDataParameters>;
    /**
     * The parameters for using a SageMaker pipeline as a target. Detailed below.
     */
    sagemakerPipelineParameters?: pulumi.Input<inputs.PipeTargetParametersSagemakerPipelineParameters>;
    /**
     * The parameters for using a Amazon SQS stream as a target. Detailed below.
     */
    sqsQueueParameters?: pulumi.Input<inputs.PipeTargetParametersSqsQueueParameters>;
    /**
     * The parameters for using a Step Functions state machine as a target. Detailed below.
     */
    stepFunctionStateMachineParameters?: pulumi.Input<inputs.PipeTargetParametersStepFunctionStateMachineParameters>;
}
export interface PipeTargetParametersBatchJobParameters {
    arrayProperties?: pulumi.Input<inputs.PipeTargetParametersBatchJobParametersArrayProperties>;
    containerOverrides?: pulumi.Input<inputs.PipeTargetParametersBatchJobParametersContainerOverrides>;
    dependsOns?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersBatchJobParametersDependsOn>[]>;
    jobDefinition: pulumi.Input<string>;
    jobName: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    retryStrategy?: pulumi.Input<inputs.PipeTargetParametersBatchJobParametersRetryStrategy>;
}
export interface PipeTargetParametersBatchJobParametersArrayProperties {
    size?: pulumi.Input<number>;
}
export interface PipeTargetParametersBatchJobParametersContainerOverrides {
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    environments?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersBatchJobParametersContainerOverridesEnvironment>[]>;
    instanceType?: pulumi.Input<string>;
    resourceRequirements?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement>[]>;
}
export interface PipeTargetParametersBatchJobParametersContainerOverridesEnvironment {
    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
export interface PipeTargetParametersBatchJobParametersContainerOverridesResourceRequirement {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export interface PipeTargetParametersBatchJobParametersDependsOn {
    jobId?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
export interface PipeTargetParametersBatchJobParametersRetryStrategy {
    attempts?: pulumi.Input<number>;
}
export interface PipeTargetParametersCloudwatchLogsParameters {
    logStreamName?: pulumi.Input<string>;
    timestamp?: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParameters {
    capacityProviderStrategies?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersCapacityProviderStrategy>[]>;
    enableEcsManagedTags?: pulumi.Input<boolean>;
    enableExecuteCommand?: pulumi.Input<boolean>;
    group?: pulumi.Input<string>;
    launchType?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersNetworkConfiguration>;
    overrides?: pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverrides>;
    placementConstraints?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersPlacementConstraint>[]>;
    placementStrategies?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersPlacementStrategy>[]>;
    platformVersion?: pulumi.Input<string>;
    propagateTags?: pulumi.Input<string>;
    referenceId?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    taskCount?: pulumi.Input<number>;
    taskDefinitionArn: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersCapacityProviderStrategy {
    base?: pulumi.Input<number>;
    capacityProvider: pulumi.Input<string>;
    weight?: pulumi.Input<number>;
}
export interface PipeTargetParametersEcsTaskParametersNetworkConfiguration {
    awsVpcConfiguration?: pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration>;
}
export interface PipeTargetParametersEcsTaskParametersNetworkConfigurationAwsVpcConfiguration {
    assignPublicIp?: pulumi.Input<string>;
    securityGroups?: pulumi.Input<pulumi.Input<string>[]>;
    subnets?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface PipeTargetParametersEcsTaskParametersOverrides {
    containerOverrides?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverride>[]>;
    cpu?: pulumi.Input<string>;
    ephemeralStorage?: pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage>;
    executionRoleArn?: pulumi.Input<string>;
    inferenceAcceleratorOverrides?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride>[]>;
    memory?: pulumi.Input<string>;
    taskRoleArn?: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersOverridesContainerOverride {
    commands?: pulumi.Input<pulumi.Input<string>[]>;
    cpu?: pulumi.Input<number>;
    environmentFiles?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile>[]>;
    environments?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment>[]>;
    memory?: pulumi.Input<number>;
    memoryReservation?: pulumi.Input<number>;
    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name?: pulumi.Input<string>;
    resourceRequirements?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement>[]>;
}
export interface PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironment {
    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersOverridesContainerOverrideEnvironmentFile {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersOverridesContainerOverrideResourceRequirement {
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersOverridesEphemeralStorage {
    sizeInGib: pulumi.Input<number>;
}
export interface PipeTargetParametersEcsTaskParametersOverridesInferenceAcceleratorOverride {
    deviceName?: pulumi.Input<string>;
    deviceType?: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersPlacementConstraint {
    expression?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
export interface PipeTargetParametersEcsTaskParametersPlacementStrategy {
    field?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}
export interface PipeTargetParametersEventbridgeEventBusParameters {
    detailType?: pulumi.Input<string>;
    endpointId?: pulumi.Input<string>;
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Source resource of the pipe (typically an ARN).
     */
    source?: pulumi.Input<string>;
    time?: pulumi.Input<string>;
}
export interface PipeTargetParametersHttpParameters {
    headerParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    pathParameterValues?: pulumi.Input<string>;
    queryStringParameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
export interface PipeTargetParametersKinesisStreamParameters {
    partitionKey: pulumi.Input<string>;
}
export interface PipeTargetParametersLambdaFunctionParameters {
    invocationType: pulumi.Input<string>;
}
export interface PipeTargetParametersRedshiftDataParameters {
    database: pulumi.Input<string>;
    dbUser?: pulumi.Input<string>;
    secretManagerArn?: pulumi.Input<string>;
    sqls: pulumi.Input<pulumi.Input<string>[]>;
    statementName?: pulumi.Input<string>;
    withEvent?: pulumi.Input<boolean>;
}
export interface PipeTargetParametersSagemakerPipelineParameters {
    pipelineParameters?: pulumi.Input<pulumi.Input<inputs.PipeTargetParametersSagemakerPipelineParametersPipelineParameter>[]>;
}
export interface PipeTargetParametersSagemakerPipelineParametersPipelineParameter {
    /**
     * Name of the pipe. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
export interface PipeTargetParametersSqsQueueParameters {
    messageDeduplicationId?: pulumi.Input<string>;
    messageGroupId?: pulumi.Input<string>;
}
export interface PipeTargetParametersStepFunctionStateMachineParameters {
    invocationType: pulumi.Input<string>;
}
