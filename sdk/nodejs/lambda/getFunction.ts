// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides information about a Lambda Function.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const functionName = config.require("functionName");
 * const existing = aws.lambda.getFunction({
 *     functionName: functionName,
 * });
 * ```
 */
export function getFunction(args: GetFunctionArgs, opts?: pulumi.InvokeOptions): Promise<GetFunctionResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:lambda/getFunction:getFunction", {
        "functionName": args.functionName,
        "qualifier": args.qualifier,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getFunction.
 */
export interface GetFunctionArgs {
    /**
     * Name of the lambda function.
     */
    functionName: string;
    /**
     * Alias name or version number of the lambda functionE.g., `$LATEST`, `my-alias`, or `1`. When not included: the data source resolves to the most recent published version; if no published version exists: it resolves to the most recent unpublished version.
     */
    qualifier?: string;
    tags?: {[key: string]: string};
}

/**
 * A collection of values returned by getFunction.
 */
export interface GetFunctionResult {
    /**
     * Instruction set architecture for the Lambda function.
     */
    readonly architectures: string[];
    /**
     * Unqualified (no `:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `qualifiedArn`.
     */
    readonly arn: string;
    /**
     * ARN for a Code Signing Configuration.
     */
    readonly codeSigningConfigArn: string;
    /**
     * Configure the function's *dead letter queue*.
     */
    readonly deadLetterConfig: outputs.lambda.GetFunctionDeadLetterConfig;
    /**
     * Description of what your Lambda Function does.
     */
    readonly description: string;
    /**
     * Lambda environment's configuration settings.
     */
    readonly environment: outputs.lambda.GetFunctionEnvironment;
    /**
     * Amount of Ephemeral storage(`/tmp`) allocated for the Lambda Function.
     */
    readonly ephemeralStorages: outputs.lambda.GetFunctionEphemeralStorage[];
    /**
     * Connection settings for an Amazon EFS file system.
     */
    readonly fileSystemConfigs: outputs.lambda.GetFunctionFileSystemConfig[];
    readonly functionName: string;
    /**
     * Function entrypoint in your code.
     */
    readonly handler: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * URI of the container image.
     */
    readonly imageUri: string;
    /**
     * ARN to be used for invoking Lambda Function from API Gateway.
     */
    readonly invokeArn: string;
    /**
     * ARN for the KMS encryption key.
     */
    readonly kmsKeyArn: string;
    /**
     * Date this resource was last modified.
     */
    readonly lastModified: string;
    /**
     * List of Lambda Layer ARNs attached to your Lambda Function.
     */
    readonly layers: string[];
    /**
     * Amount of memory in MB your Lambda Function can use at runtime.
     */
    readonly memorySize: number;
    /**
     * Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `arn`.
     */
    readonly qualifiedArn: string;
    /**
     * Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN to be used for invoking Lambda Function from API Gateway. See also `invokeArn`.
     */
    readonly qualifiedInvokeArn: string;
    readonly qualifier?: string;
    /**
     * The amount of reserved concurrent executions for this lambda function or `-1` if unreserved.
     */
    readonly reservedConcurrentExecutions: number;
    /**
     * IAM role attached to the Lambda Function.
     */
    readonly role: string;
    /**
     * Runtime environment for the Lambda function.
     */
    readonly runtime: string;
    /**
     * ARN of a signing job.
     */
    readonly signingJobArn: string;
    /**
     * The ARN for a signing profile version.
     */
    readonly signingProfileVersionArn: string;
    /**
     * Base64-encoded representation of raw SHA-256 sum of the zip file.
     */
    readonly sourceCodeHash: string;
    /**
     * Size in bytes of the function .zip file.
     */
    readonly sourceCodeSize: number;
    readonly tags: {[key: string]: string};
    /**
     * Function execution time at which Lambda should terminate the function.
     */
    readonly timeout: number;
    /**
     * Tracing settings of the function.
     */
    readonly tracingConfig: outputs.lambda.GetFunctionTracingConfig;
    /**
     * The version of the Lambda function returned. If `qualifier` is not set, this will resolve to the most recent published version. If no published version of the function exists, `version` will resolve to `$LATEST`.
     */
    readonly version: string;
    /**
     * VPC configuration associated with your Lambda function.
     */
    readonly vpcConfig: outputs.lambda.GetFunctionVpcConfig;
}

export function getFunctionOutput(args: GetFunctionOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFunctionResult> {
    return pulumi.output(args).apply(a => getFunction(a, opts))
}

/**
 * A collection of arguments for invoking getFunction.
 */
export interface GetFunctionOutputArgs {
    /**
     * Name of the lambda function.
     */
    functionName: pulumi.Input<string>;
    /**
     * Alias name or version number of the lambda functionE.g., `$LATEST`, `my-alias`, or `1`. When not included: the data source resolves to the most recent published version; if no published version exists: it resolves to the most recent unpublished version.
     */
    qualifier?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
