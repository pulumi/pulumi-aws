// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AliasArgs, AliasState } from "./alias";
export type Alias = import("./alias").Alias;
export const Alias: typeof import("./alias").Alias = null as any;
utilities.lazyLoad(exports, ["Alias"], () => require("./alias"));

export { CodeSigningConfigArgs, CodeSigningConfigState } from "./codeSigningConfig";
export type CodeSigningConfig = import("./codeSigningConfig").CodeSigningConfig;
export const CodeSigningConfig: typeof import("./codeSigningConfig").CodeSigningConfig = null as any;
utilities.lazyLoad(exports, ["CodeSigningConfig"], () => require("./codeSigningConfig"));

export { EventSourceMappingArgs, EventSourceMappingState } from "./eventSourceMapping";
export type EventSourceMapping = import("./eventSourceMapping").EventSourceMapping;
export const EventSourceMapping: typeof import("./eventSourceMapping").EventSourceMapping = null as any;
utilities.lazyLoad(exports, ["EventSourceMapping"], () => require("./eventSourceMapping"));

export { FunctionArgs, FunctionState } from "./function";
export type Function = import("./function").Function;
export const Function: typeof import("./function").Function = null as any;
utilities.lazyLoad(exports, ["Function"], () => require("./function"));

export { FunctionEventInvokeConfigArgs, FunctionEventInvokeConfigState } from "./functionEventInvokeConfig";
export type FunctionEventInvokeConfig = import("./functionEventInvokeConfig").FunctionEventInvokeConfig;
export const FunctionEventInvokeConfig: typeof import("./functionEventInvokeConfig").FunctionEventInvokeConfig = null as any;
utilities.lazyLoad(exports, ["FunctionEventInvokeConfig"], () => require("./functionEventInvokeConfig"));

export { FunctionUrlArgs, FunctionUrlState } from "./functionUrl";
export type FunctionUrl = import("./functionUrl").FunctionUrl;
export const FunctionUrl: typeof import("./functionUrl").FunctionUrl = null as any;
utilities.lazyLoad(exports, ["FunctionUrl"], () => require("./functionUrl"));

export { GetAliasArgs, GetAliasResult, GetAliasOutputArgs } from "./getAlias";
export const getAlias: typeof import("./getAlias").getAlias = null as any;
export const getAliasOutput: typeof import("./getAlias").getAliasOutput = null as any;
utilities.lazyLoad(exports, ["getAlias","getAliasOutput"], () => require("./getAlias"));

export { GetCodeSigningConfigArgs, GetCodeSigningConfigResult, GetCodeSigningConfigOutputArgs } from "./getCodeSigningConfig";
export const getCodeSigningConfig: typeof import("./getCodeSigningConfig").getCodeSigningConfig = null as any;
export const getCodeSigningConfigOutput: typeof import("./getCodeSigningConfig").getCodeSigningConfigOutput = null as any;
utilities.lazyLoad(exports, ["getCodeSigningConfig","getCodeSigningConfigOutput"], () => require("./getCodeSigningConfig"));

export { GetFunctionArgs, GetFunctionResult, GetFunctionOutputArgs } from "./getFunction";
export const getFunction: typeof import("./getFunction").getFunction = null as any;
export const getFunctionOutput: typeof import("./getFunction").getFunctionOutput = null as any;
utilities.lazyLoad(exports, ["getFunction","getFunctionOutput"], () => require("./getFunction"));

export { GetFunctionUrlArgs, GetFunctionUrlResult, GetFunctionUrlOutputArgs } from "./getFunctionUrl";
export const getFunctionUrl: typeof import("./getFunctionUrl").getFunctionUrl = null as any;
export const getFunctionUrlOutput: typeof import("./getFunctionUrl").getFunctionUrlOutput = null as any;
utilities.lazyLoad(exports, ["getFunctionUrl","getFunctionUrlOutput"], () => require("./getFunctionUrl"));

export { GetInvocationArgs, GetInvocationResult, GetInvocationOutputArgs } from "./getInvocation";
export const getInvocation: typeof import("./getInvocation").getInvocation = null as any;
export const getInvocationOutput: typeof import("./getInvocation").getInvocationOutput = null as any;
utilities.lazyLoad(exports, ["getInvocation","getInvocationOutput"], () => require("./getInvocation"));

export { GetLayerVersionArgs, GetLayerVersionResult, GetLayerVersionOutputArgs } from "./getLayerVersion";
export const getLayerVersion: typeof import("./getLayerVersion").getLayerVersion = null as any;
export const getLayerVersionOutput: typeof import("./getLayerVersion").getLayerVersionOutput = null as any;
utilities.lazyLoad(exports, ["getLayerVersion","getLayerVersionOutput"], () => require("./getLayerVersion"));

export { InvocationArgs, InvocationState } from "./invocation";
export type Invocation = import("./invocation").Invocation;
export const Invocation: typeof import("./invocation").Invocation = null as any;
utilities.lazyLoad(exports, ["Invocation"], () => require("./invocation"));

export * from "./lambdaMixins";
export { LayerVersionArgs, LayerVersionState } from "./layerVersion";
export type LayerVersion = import("./layerVersion").LayerVersion;
export const LayerVersion: typeof import("./layerVersion").LayerVersion = null as any;
utilities.lazyLoad(exports, ["LayerVersion"], () => require("./layerVersion"));

export { LayerVersionPermissionArgs, LayerVersionPermissionState } from "./layerVersionPermission";
export type LayerVersionPermission = import("./layerVersionPermission").LayerVersionPermission;
export const LayerVersionPermission: typeof import("./layerVersionPermission").LayerVersionPermission = null as any;
utilities.lazyLoad(exports, ["LayerVersionPermission"], () => require("./layerVersionPermission"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { ProvisionedConcurrencyConfigArgs, ProvisionedConcurrencyConfigState } from "./provisionedConcurrencyConfig";
export type ProvisionedConcurrencyConfig = import("./provisionedConcurrencyConfig").ProvisionedConcurrencyConfig;
export const ProvisionedConcurrencyConfig: typeof import("./provisionedConcurrencyConfig").ProvisionedConcurrencyConfig = null as any;
utilities.lazyLoad(exports, ["ProvisionedConcurrencyConfig"], () => require("./provisionedConcurrencyConfig"));

export * from "./runtimes";

// Export enums:
export * from "../types/enums/lambda";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws:lambda/alias:Alias":
                return new Alias(name, <any>undefined, { urn })
            case "aws:lambda/codeSigningConfig:CodeSigningConfig":
                return new CodeSigningConfig(name, <any>undefined, { urn })
            case "aws:lambda/eventSourceMapping:EventSourceMapping":
                return new EventSourceMapping(name, <any>undefined, { urn })
            case "aws:lambda/function:Function":
                return new Function(name, <any>undefined, { urn })
            case "aws:lambda/functionEventInvokeConfig:FunctionEventInvokeConfig":
                return new FunctionEventInvokeConfig(name, <any>undefined, { urn })
            case "aws:lambda/functionUrl:FunctionUrl":
                return new FunctionUrl(name, <any>undefined, { urn })
            case "aws:lambda/invocation:Invocation":
                return new Invocation(name, <any>undefined, { urn })
            case "aws:lambda/layerVersion:LayerVersion":
                return new LayerVersion(name, <any>undefined, { urn })
            case "aws:lambda/layerVersionPermission:LayerVersionPermission":
                return new LayerVersionPermission(name, <any>undefined, { urn })
            case "aws:lambda/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            case "aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig":
                return new ProvisionedConcurrencyConfig(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "lambda/alias", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/codeSigningConfig", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/eventSourceMapping", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/function", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/functionEventInvokeConfig", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/functionUrl", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/invocation", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/layerVersion", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/layerVersionPermission", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/permission", _module)
pulumi.runtime.registerResourceModule("aws", "lambda/provisionedConcurrencyConfig", _module)
