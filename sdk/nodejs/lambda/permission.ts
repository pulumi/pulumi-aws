// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {Function} from "./index";

/**
 * Gives an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const iamForLambda = new aws.iam.Role("iam_for_lambda", {
 *     name: "iam_for_lambda",
 *     assumeRolePolicy: JSON.stringify({
 *         version: "2012-10-17",
 *         statement: [{
 *             action: "sts:AssumeRole",
 *             effect: "Allow",
 *             sid: "",
 *             principal: {
 *                 service: "lambda.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const testLambda = new aws.lambda.Function("test_lambda", {
 *     code: new pulumi.asset.FileArchive("lambdatest.zip"),
 *     name: "lambda_function_name",
 *     role: iamForLambda.arn,
 *     handler: "exports.handler",
 *     runtime: aws.lambda.Runtime.NodeJS16dX,
 * });
 * const testAlias = new aws.lambda.Alias("test_alias", {
 *     name: "testalias",
 *     description: "a sample description",
 *     functionName: testLambda.name,
 *     functionVersion: "$LATEST",
 * });
 * const allowCloudwatch = new aws.lambda.Permission("allow_cloudwatch", {
 *     statementId: "AllowExecutionFromCloudWatch",
 *     action: "lambda:InvokeFunction",
 *     "function": testLambda.name,
 *     principal: "events.amazonaws.com",
 *     sourceArn: "arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
 *     qualifier: testAlias.name,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### With SNS
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.sns.Topic("default", {name: "call-lambda-maybe"});
 * const defaultRole = new aws.iam.Role("default", {
 *     name: "iam_for_lambda_with_sns",
 *     assumeRolePolicy: JSON.stringify({
 *         version: "2012-10-17",
 *         statement: [{
 *             action: "sts:AssumeRole",
 *             effect: "Allow",
 *             sid: "",
 *             principal: {
 *                 service: "lambda.amazonaws.com",
 *             },
 *         }],
 *     }),
 * });
 * const func = new aws.lambda.Function("func", {
 *     code: new pulumi.asset.FileArchive("lambdatest.zip"),
 *     name: "lambda_called_from_sns",
 *     role: defaultRole.arn,
 *     handler: "exports.handler",
 *     runtime: aws.lambda.Runtime.Python3d7,
 * });
 * const withSns = new aws.lambda.Permission("with_sns", {
 *     statementId: "AllowExecutionFromSNS",
 *     action: "lambda:InvokeFunction",
 *     "function": func.name,
 *     principal: "sns.amazonaws.com",
 *     sourceArn: _default.arn,
 * });
 * const lambda = new aws.sns.TopicSubscription("lambda", {
 *     topic: _default.arn,
 *     protocol: "lambda",
 *     endpoint: func.arn,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### With API Gateway REST API
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myDemoAPI = new aws.apigateway.RestApi("MyDemoAPI", {
 *     name: "MyDemoAPI",
 *     description: "This is my API for demonstration purposes",
 * });
 * const lambdaPermission = new aws.lambda.Permission("lambda_permission", {
 *     statementId: "AllowMyDemoAPIInvoke",
 *     action: "lambda:InvokeFunction",
 *     "function": "MyDemoFunction",
 *     principal: "apigateway.amazonaws.com",
 *     sourceArn: pulumi.interpolate`${myDemoAPI.executionArn}/*`,
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### With CloudWatch Log Group
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.cloudwatch.LogGroup("default", {name: "/default"});
 * const assumeRole = aws.iam.getPolicyDocument({
 *     statements: [{
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["lambda.amazonaws.com"],
 *         }],
 *         actions: ["sts:AssumeRole"],
 *     }],
 * });
 * const defaultRole = new aws.iam.Role("default", {
 *     name: "iam_for_lambda_called_from_cloudwatch_logs",
 *     assumeRolePolicy: assumeRole.then(assumeRole => assumeRole.json),
 * });
 * const loggingFunction = new aws.lambda.Function("logging", {
 *     code: new pulumi.asset.FileArchive("lamba_logging.zip"),
 *     name: "lambda_called_from_cloudwatch_logs",
 *     handler: "exports.handler",
 *     role: defaultRole.arn,
 *     runtime: aws.lambda.Runtime.Python3d7,
 * });
 * const logging = new aws.lambda.Permission("logging", {
 *     action: "lambda:InvokeFunction",
 *     "function": loggingFunction.name,
 *     principal: "logs.eu-west-1.amazonaws.com",
 *     sourceArn: pulumi.interpolate`${_default.arn}:*`,
 * });
 * const loggingLogSubscriptionFilter = new aws.cloudwatch.LogSubscriptionFilter("logging", {
 *     destinationArn: loggingFunction.arn,
 *     filterPattern: "",
 *     logGroup: _default.name,
 *     name: "logging_default",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### With Cross-Account Invocation Policy
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const url = new aws.lambda.FunctionUrl("url", {
 *     functionName: example.functionName,
 *     authorizationType: "AWS_IAM",
 * });
 * const urlPermission = new aws.lambda.Permission("url", {
 *     action: "lambda:InvokeFunctionUrl",
 *     "function": example.functionName,
 *     principal: "arn:aws:iam::444455556666:role/example",
 *     sourceAccount: "444455556666",
 *     functionUrlAuthType: "AWS_IAM",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### With `replaceTriggeredBy` Lifecycle Configuration
 *
 * If omitting the `qualifier` argument (which forces re-creation each time a function version is published), a `lifecycle` block can be used to ensure permissions are re-applied on any change to the underlying function.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const logging = new aws.lambda.Permission("logging", {
 *     action: "lambda:InvokeFunction",
 *     "function": example.functionName,
 *     principal: "events.amazonaws.com",
 *     sourceArn: "arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Using `pulumi import`, import Lambda permission statements using function_name/statement_id with an optional qualifier. For example:
 *
 * ```sh
 * $ pulumi import aws:lambda/permission:Permission test_lambda_permission my_test_lambda_function/AllowExecutionFromCloudWatch
 * ```
 * ```sh
 * $ pulumi import aws:lambda/permission:Permission test_lambda_permission my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch
 * ```
 */
export class Permission extends pulumi.CustomResource {
    /**
     * Get an existing Permission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionState, opts?: pulumi.CustomResourceOptions): Permission {
        return new Permission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lambda/permission:Permission';

    /**
     * Returns true if the given object is an instance of Permission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Permission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Permission.__pulumiType;
    }

    /**
     * The AWS Lambda action you want to allow in this statement. (e.g., `lambda:InvokeFunction`)
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
     */
    public readonly eventSourceToken!: pulumi.Output<string | undefined>;
    /**
     * Name of the Lambda function whose resource policy you are updating
     */
    public readonly function!: pulumi.Output<string>;
    /**
     * Lambda Function URLs [authentication type](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html). Valid values are: `AWS_IAM` or `NONE`. Only supported for `lambda:InvokeFunctionUrl` action.
     */
    public readonly functionUrlAuthType!: pulumi.Output<string | undefined>;
    /**
     * The principal who is getting this permission e.g., `s3.amazonaws.com`, an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
     *
     * [1]: https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli
     * [2]: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
     * [3]: https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html
     */
    public readonly principalOrgId!: pulumi.Output<string | undefined>;
    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
     */
    public readonly qualifier!: pulumi.Output<string | undefined>;
    /**
     * This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     */
    public readonly sourceAccount!: pulumi.Output<string | undefined>;
    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     * Without this, any resource from `principal` will be granted permission – even if that resource is from another account.
     * For S3, this should be the ARN of the S3 Bucket.
     * For EventBridge events, this should be the ARN of the EventBridge Rule.
     * For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
     */
    public readonly sourceArn!: pulumi.Output<string | undefined>;
    /**
     * A unique statement identifier. By default generated by the provider.
     */
    public readonly statementId!: pulumi.Output<string>;
    /**
     * A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
     */
    public readonly statementIdPrefix!: pulumi.Output<string>;

    /**
     * Create a Permission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionArgs | PermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["eventSourceToken"] = state ? state.eventSourceToken : undefined;
            resourceInputs["function"] = state ? state.function : undefined;
            resourceInputs["functionUrlAuthType"] = state ? state.functionUrlAuthType : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["principalOrgId"] = state ? state.principalOrgId : undefined;
            resourceInputs["qualifier"] = state ? state.qualifier : undefined;
            resourceInputs["sourceAccount"] = state ? state.sourceAccount : undefined;
            resourceInputs["sourceArn"] = state ? state.sourceArn : undefined;
            resourceInputs["statementId"] = state ? state.statementId : undefined;
            resourceInputs["statementIdPrefix"] = state ? state.statementIdPrefix : undefined;
        } else {
            const args = argsOrState as PermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.function === undefined) && !opts.urn) {
                throw new Error("Missing required property 'function'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["eventSourceToken"] = args ? args.eventSourceToken : undefined;
            resourceInputs["function"] = args ? args.function : undefined;
            resourceInputs["functionUrlAuthType"] = args ? args.functionUrlAuthType : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["principalOrgId"] = args ? args.principalOrgId : undefined;
            resourceInputs["qualifier"] = args ? args.qualifier : undefined;
            resourceInputs["sourceAccount"] = args ? args.sourceAccount : undefined;
            resourceInputs["sourceArn"] = args ? args.sourceArn : undefined;
            resourceInputs["statementId"] = args ? args.statementId : undefined;
            resourceInputs["statementIdPrefix"] = args ? args.statementIdPrefix : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Permission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Permission resources.
 */
export interface PermissionState {
    /**
     * The AWS Lambda action you want to allow in this statement. (e.g., `lambda:InvokeFunction`)
     */
    action?: pulumi.Input<string>;
    /**
     * The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * Name of the Lambda function whose resource policy you are updating
     */
    function?: pulumi.Input<string | Function>;
    /**
     * Lambda Function URLs [authentication type](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html). Valid values are: `AWS_IAM` or `NONE`. Only supported for `lambda:InvokeFunctionUrl` action.
     */
    functionUrlAuthType?: pulumi.Input<string>;
    /**
     * The principal who is getting this permission e.g., `s3.amazonaws.com`, an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
     */
    principal?: pulumi.Input<string>;
    /**
     * The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
     *
     * [1]: https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli
     * [2]: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
     * [3]: https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html
     */
    principalOrgId?: pulumi.Input<string>;
    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
     */
    qualifier?: pulumi.Input<string>;
    /**
     * This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     * Without this, any resource from `principal` will be granted permission – even if that resource is from another account.
     * For S3, this should be the ARN of the S3 Bucket.
     * For EventBridge events, this should be the ARN of the EventBridge Rule.
     * For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * A unique statement identifier. By default generated by the provider.
     */
    statementId?: pulumi.Input<string>;
    /**
     * A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
     */
    statementIdPrefix?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Permission resource.
 */
export interface PermissionArgs {
    /**
     * The AWS Lambda action you want to allow in this statement. (e.g., `lambda:InvokeFunction`)
     */
    action: pulumi.Input<string>;
    /**
     * The Event Source Token to validate.  Used with [Alexa Skills](https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli).
     */
    eventSourceToken?: pulumi.Input<string>;
    /**
     * Name of the Lambda function whose resource policy you are updating
     */
    function: pulumi.Input<string | Function>;
    /**
     * Lambda Function URLs [authentication type](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html). Valid values are: `AWS_IAM` or `NONE`. Only supported for `lambda:InvokeFunctionUrl` action.
     */
    functionUrlAuthType?: pulumi.Input<string>;
    /**
     * The principal who is getting this permission e.g., `s3.amazonaws.com`, an AWS account ID, or AWS IAM principal, or AWS service principal such as `events.amazonaws.com` or `sns.amazonaws.com`.
     */
    principal: pulumi.Input<string>;
    /**
     * The identifier for your organization in AWS Organizations. Use this to grant permissions to all the AWS accounts under this organization.
     *
     * [1]: https://developer.amazon.com/docs/custom-skills/host-a-custom-skill-as-an-aws-lambda-function.html#use-aws-cli
     * [2]: https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html
     * [3]: https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html
     */
    principalOrgId?: pulumi.Input<string>;
    /**
     * Query parameter to specify function version or alias name. The permission will then apply to the specific qualified ARN e.g., `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
     */
    qualifier?: pulumi.Input<string>;
    /**
     * This parameter is used when allowing cross-account access, or for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
     */
    sourceAccount?: pulumi.Input<string>;
    /**
     * When the principal is an AWS service, the ARN of the specific resource within that service to grant permission to.
     * Without this, any resource from `principal` will be granted permission – even if that resource is from another account.
     * For S3, this should be the ARN of the S3 Bucket.
     * For EventBridge events, this should be the ARN of the EventBridge Rule.
     * For API Gateway, this should be the ARN of the API, as described [here](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
     */
    sourceArn?: pulumi.Input<string>;
    /**
     * A unique statement identifier. By default generated by the provider.
     */
    statementId?: pulumi.Input<string>;
    /**
     * A statement identifier prefix. The provider will generate a unique suffix. Conflicts with `statementId`.
     */
    statementIdPrefix?: pulumi.Input<string>;
}
