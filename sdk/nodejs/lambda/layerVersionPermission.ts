// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Lambda Layer Version Permission resource. It allows you to share you own Lambda Layers to another account by account ID, to all accounts in AWS organization or even to all AWS accounts.
 *
 * For information about Lambda Layer Permissions and how to use them, see [Using Resource-based Policies for AWS Lambda][1]
 *
 * > **NOTE:** Setting `skipDestroy` to `true` means that the AWS Provider will _not_ destroy any layer version permission, even when running `pulumi destroy`. Layer version permissions are thus intentional dangling resources that are _not_ managed by Pulumi and may incur extra expense in your AWS account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lambdaLayerPermission = new aws.lambda.LayerVersionPermission("lambdaLayerPermission", {
 *     action: "lambda:GetLayerVersion",
 *     layerName: "arn:aws:lambda:us-west-2:123456654321:layer:test_layer1",
 *     principal: "111111111111",
 *     statementId: "dev-account",
 *     versionNumber: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Lambda Layer Permissions can be imported using `layer_name` and `version_number`, separated by a comma (`,`).
 *
 * ```sh
 *  $ pulumi import aws:lambda/layerVersionPermission:LayerVersionPermission example arn:aws:lambda:us-west-2:123456654321:layer:test_layer1,1
 * ```
 *
 *  [1]https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-xaccountlayer
 */
export class LayerVersionPermission extends pulumi.CustomResource {
    /**
     * Get an existing LayerVersionPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LayerVersionPermissionState, opts?: pulumi.CustomResourceOptions): LayerVersionPermission {
        return new LayerVersionPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lambda/layerVersionPermission:LayerVersionPermission';

    /**
     * Returns true if the given object is an instance of LayerVersionPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LayerVersionPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LayerVersionPermission.__pulumiType;
    }

    /**
     * Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The name or ARN of the Lambda Layer, which you want to grant access to.
     */
    public readonly layerName!: pulumi.Output<string>;
    /**
     * An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
     */
    public readonly organizationId!: pulumi.Output<string | undefined>;
    /**
     * Full Lambda Layer Permission policy.
     */
    public /*out*/ readonly policy!: pulumi.Output<string>;
    /**
     * AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
     */
    public readonly principal!: pulumi.Output<string>;
    /**
     * A unique identifier for the current revision of the policy.
     */
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    /**
     * Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
     */
    public readonly skipDestroy!: pulumi.Output<boolean | undefined>;
    /**
     * The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
     */
    public readonly statementId!: pulumi.Output<string>;
    /**
     * Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
     */
    public readonly versionNumber!: pulumi.Output<number>;

    /**
     * Create a LayerVersionPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LayerVersionPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LayerVersionPermissionArgs | LayerVersionPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LayerVersionPermissionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["layerName"] = state ? state.layerName : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["skipDestroy"] = state ? state.skipDestroy : undefined;
            resourceInputs["statementId"] = state ? state.statementId : undefined;
            resourceInputs["versionNumber"] = state ? state.versionNumber : undefined;
        } else {
            const args = argsOrState as LayerVersionPermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.layerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerName'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.statementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statementId'");
            }
            if ((!args || args.versionNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionNumber'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["layerName"] = args ? args.layerName : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["skipDestroy"] = args ? args.skipDestroy : undefined;
            resourceInputs["statementId"] = args ? args.statementId : undefined;
            resourceInputs["versionNumber"] = args ? args.versionNumber : undefined;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LayerVersionPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LayerVersionPermission resources.
 */
export interface LayerVersionPermissionState {
    /**
     * Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
     */
    action?: pulumi.Input<string>;
    /**
     * The name or ARN of the Lambda Layer, which you want to grant access to.
     */
    layerName?: pulumi.Input<string>;
    /**
     * An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * Full Lambda Layer Permission policy.
     */
    policy?: pulumi.Input<string>;
    /**
     * AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
     */
    principal?: pulumi.Input<string>;
    /**
     * A unique identifier for the current revision of the policy.
     */
    revisionId?: pulumi.Input<string>;
    /**
     * Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
     */
    skipDestroy?: pulumi.Input<boolean>;
    /**
     * The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
     */
    statementId?: pulumi.Input<string>;
    /**
     * Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
     */
    versionNumber?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LayerVersionPermission resource.
 */
export interface LayerVersionPermissionArgs {
    /**
     * Action, which will be allowed. `lambda:GetLayerVersion` value is suggested by AWS documantation.
     */
    action: pulumi.Input<string>;
    /**
     * The name or ARN of the Lambda Layer, which you want to grant access to.
     */
    layerName: pulumi.Input<string>;
    /**
     * An identifier of AWS Organization, which should be able to use your Lambda Layer. `principal` should be equal to `*` if `organizationId` provided.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * AWS account ID which should be able to use your Lambda Layer. `*` can be used here, if you want to share your Lambda Layer widely.
     */
    principal: pulumi.Input<string>;
    /**
     * Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`. When this is not set to `true`, changing any of `compatibleArchitectures`, `compatibleRuntimes`, `description`, `filename`, `layerName`, `licenseInfo`, `s3Bucket`, `s3Key`, `s3ObjectVersion`, or `sourceCodeHash` forces deletion of the existing layer version and creation of a new layer version.
     */
    skipDestroy?: pulumi.Input<boolean>;
    /**
     * The name of Lambda Layer Permission, for example `dev-account` - human readable note about what is this permission for.
     */
    statementId: pulumi.Input<string>;
    /**
     * Version of Lambda Layer, which you want to grant access to. Note: permissions only apply to a single version of a layer.
     */
    versionNumber: pulumi.Input<number>;
}
