// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class LayerVersionPermission extends pulumi.CustomResource {
    /**
     * Get an existing LayerVersionPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LayerVersionPermissionState, opts?: pulumi.CustomResourceOptions): LayerVersionPermission {
        return new LayerVersionPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lambda/layerVersionPermission:LayerVersionPermission';

    /**
     * Returns true if the given object is an instance of LayerVersionPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LayerVersionPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LayerVersionPermission.__pulumiType;
    }

    public readonly action!: pulumi.Output<string>;
    public readonly layerName!: pulumi.Output<string>;
    public readonly organizationId!: pulumi.Output<string | undefined>;
    public /*out*/ readonly policy!: pulumi.Output<string>;
    public readonly principal!: pulumi.Output<string>;
    public /*out*/ readonly revisionId!: pulumi.Output<string>;
    public readonly statementId!: pulumi.Output<string>;
    public readonly versionNumber!: pulumi.Output<number>;

    /**
     * Create a LayerVersionPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LayerVersionPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LayerVersionPermissionArgs | LayerVersionPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LayerVersionPermissionState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["layerName"] = state ? state.layerName : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["principal"] = state ? state.principal : undefined;
            resourceInputs["revisionId"] = state ? state.revisionId : undefined;
            resourceInputs["statementId"] = state ? state.statementId : undefined;
            resourceInputs["versionNumber"] = state ? state.versionNumber : undefined;
        } else {
            const args = argsOrState as LayerVersionPermissionArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.layerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerName'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.statementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statementId'");
            }
            if ((!args || args.versionNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionNumber'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["layerName"] = args ? args.layerName : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["principal"] = args ? args.principal : undefined;
            resourceInputs["statementId"] = args ? args.statementId : undefined;
            resourceInputs["versionNumber"] = args ? args.versionNumber : undefined;
            resourceInputs["policy"] = undefined /*out*/;
            resourceInputs["revisionId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LayerVersionPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LayerVersionPermission resources.
 */
export interface LayerVersionPermissionState {
    action?: pulumi.Input<string>;
    layerName?: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
    principal?: pulumi.Input<string>;
    revisionId?: pulumi.Input<string>;
    statementId?: pulumi.Input<string>;
    versionNumber?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LayerVersionPermission resource.
 */
export interface LayerVersionPermissionArgs {
    action: pulumi.Input<string>;
    layerName: pulumi.Input<string>;
    organizationId?: pulumi.Input<string>;
    principal: pulumi.Input<string>;
    statementId: pulumi.Input<string>;
    versionNumber: pulumi.Input<number>;
}
