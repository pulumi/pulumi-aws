// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class EventSourceMapping extends pulumi.CustomResource {
    /**
     * Get an existing EventSourceMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EventSourceMappingState, opts?: pulumi.CustomResourceOptions): EventSourceMapping {
        return new EventSourceMapping(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lambda/eventSourceMapping:EventSourceMapping';

    /**
     * Returns true if the given object is an instance of EventSourceMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EventSourceMapping {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSourceMapping.__pulumiType;
    }

    public readonly amazonManagedKafkaEventSourceConfig!: pulumi.Output<outputs.lambda.EventSourceMappingAmazonManagedKafkaEventSourceConfig>;
    public readonly batchSize!: pulumi.Output<number | undefined>;
    public readonly bisectBatchOnFunctionError!: pulumi.Output<boolean | undefined>;
    public readonly destinationConfig!: pulumi.Output<outputs.lambda.EventSourceMappingDestinationConfig | undefined>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    public readonly eventSourceArn!: pulumi.Output<string | undefined>;
    public readonly filterCriteria!: pulumi.Output<outputs.lambda.EventSourceMappingFilterCriteria | undefined>;
    public /*out*/ readonly functionArn!: pulumi.Output<string>;
    public readonly functionName!: pulumi.Output<string>;
    public readonly functionResponseTypes!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    public /*out*/ readonly lastProcessingResult!: pulumi.Output<string>;
    public readonly maximumBatchingWindowInSeconds!: pulumi.Output<number | undefined>;
    public readonly maximumRecordAgeInSeconds!: pulumi.Output<number>;
    public readonly maximumRetryAttempts!: pulumi.Output<number>;
    public readonly parallelizationFactor!: pulumi.Output<number>;
    public readonly queues!: pulumi.Output<string[] | undefined>;
    public readonly selfManagedEventSource!: pulumi.Output<outputs.lambda.EventSourceMappingSelfManagedEventSource | undefined>;
    public readonly selfManagedKafkaEventSourceConfig!: pulumi.Output<outputs.lambda.EventSourceMappingSelfManagedKafkaEventSourceConfig>;
    public readonly sourceAccessConfigurations!: pulumi.Output<outputs.lambda.EventSourceMappingSourceAccessConfiguration[] | undefined>;
    public readonly startingPosition!: pulumi.Output<string | undefined>;
    public readonly startingPositionTimestamp!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public /*out*/ readonly stateTransitionReason!: pulumi.Output<string>;
    public readonly topics!: pulumi.Output<string[] | undefined>;
    public readonly tumblingWindowInSeconds!: pulumi.Output<number | undefined>;
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a EventSourceMapping resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EventSourceMappingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EventSourceMappingArgs | EventSourceMappingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EventSourceMappingState | undefined;
            resourceInputs["amazonManagedKafkaEventSourceConfig"] = state ? state.amazonManagedKafkaEventSourceConfig : undefined;
            resourceInputs["batchSize"] = state ? state.batchSize : undefined;
            resourceInputs["bisectBatchOnFunctionError"] = state ? state.bisectBatchOnFunctionError : undefined;
            resourceInputs["destinationConfig"] = state ? state.destinationConfig : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventSourceArn"] = state ? state.eventSourceArn : undefined;
            resourceInputs["filterCriteria"] = state ? state.filterCriteria : undefined;
            resourceInputs["functionArn"] = state ? state.functionArn : undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["functionResponseTypes"] = state ? state.functionResponseTypes : undefined;
            resourceInputs["lastModified"] = state ? state.lastModified : undefined;
            resourceInputs["lastProcessingResult"] = state ? state.lastProcessingResult : undefined;
            resourceInputs["maximumBatchingWindowInSeconds"] = state ? state.maximumBatchingWindowInSeconds : undefined;
            resourceInputs["maximumRecordAgeInSeconds"] = state ? state.maximumRecordAgeInSeconds : undefined;
            resourceInputs["maximumRetryAttempts"] = state ? state.maximumRetryAttempts : undefined;
            resourceInputs["parallelizationFactor"] = state ? state.parallelizationFactor : undefined;
            resourceInputs["queues"] = state ? state.queues : undefined;
            resourceInputs["selfManagedEventSource"] = state ? state.selfManagedEventSource : undefined;
            resourceInputs["selfManagedKafkaEventSourceConfig"] = state ? state.selfManagedKafkaEventSourceConfig : undefined;
            resourceInputs["sourceAccessConfigurations"] = state ? state.sourceAccessConfigurations : undefined;
            resourceInputs["startingPosition"] = state ? state.startingPosition : undefined;
            resourceInputs["startingPositionTimestamp"] = state ? state.startingPositionTimestamp : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stateTransitionReason"] = state ? state.stateTransitionReason : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["tumblingWindowInSeconds"] = state ? state.tumblingWindowInSeconds : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as EventSourceMappingArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            resourceInputs["amazonManagedKafkaEventSourceConfig"] = args ? args.amazonManagedKafkaEventSourceConfig : undefined;
            resourceInputs["batchSize"] = args ? args.batchSize : undefined;
            resourceInputs["bisectBatchOnFunctionError"] = args ? args.bisectBatchOnFunctionError : undefined;
            resourceInputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventSourceArn"] = args ? args.eventSourceArn : undefined;
            resourceInputs["filterCriteria"] = args ? args.filterCriteria : undefined;
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["functionResponseTypes"] = args ? args.functionResponseTypes : undefined;
            resourceInputs["maximumBatchingWindowInSeconds"] = args ? args.maximumBatchingWindowInSeconds : undefined;
            resourceInputs["maximumRecordAgeInSeconds"] = args ? args.maximumRecordAgeInSeconds : undefined;
            resourceInputs["maximumRetryAttempts"] = args ? args.maximumRetryAttempts : undefined;
            resourceInputs["parallelizationFactor"] = args ? args.parallelizationFactor : undefined;
            resourceInputs["queues"] = args ? args.queues : undefined;
            resourceInputs["selfManagedEventSource"] = args ? args.selfManagedEventSource : undefined;
            resourceInputs["selfManagedKafkaEventSourceConfig"] = args ? args.selfManagedKafkaEventSourceConfig : undefined;
            resourceInputs["sourceAccessConfigurations"] = args ? args.sourceAccessConfigurations : undefined;
            resourceInputs["startingPosition"] = args ? args.startingPosition : undefined;
            resourceInputs["startingPositionTimestamp"] = args ? args.startingPositionTimestamp : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["tumblingWindowInSeconds"] = args ? args.tumblingWindowInSeconds : undefined;
            resourceInputs["functionArn"] = undefined /*out*/;
            resourceInputs["lastModified"] = undefined /*out*/;
            resourceInputs["lastProcessingResult"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["stateTransitionReason"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventSourceMapping.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EventSourceMapping resources.
 */
export interface EventSourceMappingState {
    amazonManagedKafkaEventSourceConfig?: pulumi.Input<inputs.lambda.EventSourceMappingAmazonManagedKafkaEventSourceConfig>;
    batchSize?: pulumi.Input<number>;
    bisectBatchOnFunctionError?: pulumi.Input<boolean>;
    destinationConfig?: pulumi.Input<inputs.lambda.EventSourceMappingDestinationConfig>;
    enabled?: pulumi.Input<boolean>;
    eventSourceArn?: pulumi.Input<string>;
    filterCriteria?: pulumi.Input<inputs.lambda.EventSourceMappingFilterCriteria>;
    functionArn?: pulumi.Input<string>;
    functionName?: pulumi.Input<string>;
    functionResponseTypes?: pulumi.Input<pulumi.Input<string>[]>;
    lastModified?: pulumi.Input<string>;
    lastProcessingResult?: pulumi.Input<string>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    maximumRecordAgeInSeconds?: pulumi.Input<number>;
    maximumRetryAttempts?: pulumi.Input<number>;
    parallelizationFactor?: pulumi.Input<number>;
    queues?: pulumi.Input<pulumi.Input<string>[]>;
    selfManagedEventSource?: pulumi.Input<inputs.lambda.EventSourceMappingSelfManagedEventSource>;
    selfManagedKafkaEventSourceConfig?: pulumi.Input<inputs.lambda.EventSourceMappingSelfManagedKafkaEventSourceConfig>;
    sourceAccessConfigurations?: pulumi.Input<pulumi.Input<inputs.lambda.EventSourceMappingSourceAccessConfiguration>[]>;
    startingPosition?: pulumi.Input<string>;
    startingPositionTimestamp?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    stateTransitionReason?: pulumi.Input<string>;
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    tumblingWindowInSeconds?: pulumi.Input<number>;
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EventSourceMapping resource.
 */
export interface EventSourceMappingArgs {
    amazonManagedKafkaEventSourceConfig?: pulumi.Input<inputs.lambda.EventSourceMappingAmazonManagedKafkaEventSourceConfig>;
    batchSize?: pulumi.Input<number>;
    bisectBatchOnFunctionError?: pulumi.Input<boolean>;
    destinationConfig?: pulumi.Input<inputs.lambda.EventSourceMappingDestinationConfig>;
    enabled?: pulumi.Input<boolean>;
    eventSourceArn?: pulumi.Input<string>;
    filterCriteria?: pulumi.Input<inputs.lambda.EventSourceMappingFilterCriteria>;
    functionName: pulumi.Input<string>;
    functionResponseTypes?: pulumi.Input<pulumi.Input<string>[]>;
    maximumBatchingWindowInSeconds?: pulumi.Input<number>;
    maximumRecordAgeInSeconds?: pulumi.Input<number>;
    maximumRetryAttempts?: pulumi.Input<number>;
    parallelizationFactor?: pulumi.Input<number>;
    queues?: pulumi.Input<pulumi.Input<string>[]>;
    selfManagedEventSource?: pulumi.Input<inputs.lambda.EventSourceMappingSelfManagedEventSource>;
    selfManagedKafkaEventSourceConfig?: pulumi.Input<inputs.lambda.EventSourceMappingSelfManagedKafkaEventSourceConfig>;
    sourceAccessConfigurations?: pulumi.Input<pulumi.Input<inputs.lambda.EventSourceMappingSourceAccessConfiguration>[]>;
    startingPosition?: pulumi.Input<string>;
    startingPositionTimestamp?: pulumi.Input<string>;
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    tumblingWindowInSeconds?: pulumi.Input<number>;
}
