// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Lambda Function Recursion Config.
 *
 * > Destruction of this resource will return the `recursiveLoop` configuration back to the default value of `Terminate`.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.FunctionRecursionConfig("example", {
 *     functionName: "SomeFunction",
 *     recursiveLoop: "Allow",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import AWS Lambda Function Recursion Config using the `function_name`. For example:
 *
 * ```sh
 * $ pulumi import aws:lambda/functionRecursionConfig:FunctionRecursionConfig example SomeFunction
 * ```
 */
export class FunctionRecursionConfig extends pulumi.CustomResource {
    /**
     * Get an existing FunctionRecursionConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionRecursionConfigState, opts?: pulumi.CustomResourceOptions): FunctionRecursionConfig {
        return new FunctionRecursionConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:lambda/functionRecursionConfig:FunctionRecursionConfig';

    /**
     * Returns true if the given object is an instance of FunctionRecursionConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionRecursionConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionRecursionConfig.__pulumiType;
    }

    /**
     * Lambda function name.
     */
    public readonly functionName!: pulumi.Output<string>;
    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     */
    public readonly recursiveLoop!: pulumi.Output<string>;

    /**
     * Create a FunctionRecursionConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionRecursionConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionRecursionConfigArgs | FunctionRecursionConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionRecursionConfigState | undefined;
            resourceInputs["functionName"] = state ? state.functionName : undefined;
            resourceInputs["recursiveLoop"] = state ? state.recursiveLoop : undefined;
        } else {
            const args = argsOrState as FunctionRecursionConfigArgs | undefined;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            if ((!args || args.recursiveLoop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'recursiveLoop'");
            }
            resourceInputs["functionName"] = args ? args.functionName : undefined;
            resourceInputs["recursiveLoop"] = args ? args.recursiveLoop : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionRecursionConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionRecursionConfig resources.
 */
export interface FunctionRecursionConfigState {
    /**
     * Lambda function name.
     */
    functionName?: pulumi.Input<string>;
    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     */
    recursiveLoop?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FunctionRecursionConfig resource.
 */
export interface FunctionRecursionConfigArgs {
    /**
     * Lambda function name.
     */
    functionName: pulumi.Input<string>;
    /**
     * Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.
     */
    recursiveLoop: pulumi.Input<string>;
}
