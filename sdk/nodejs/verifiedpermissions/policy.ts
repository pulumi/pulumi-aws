// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Verified Permissions Policy.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.verifiedpermissions.Policy("test", {
 *     policyStoreId: testAwsVerifiedpermissionsPolicyStore.id,
 *     definition: {
 *         static: {
 *             statement: "permit (principal, action == Action::\"view\", resource in Album:: \"test_album\");",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Verified Permissions Policy using the `policy_id,policy_store_id`. For example:
 *
 * ```sh
 * $ pulumi import aws:verifiedpermissions/policy:Policy example policy-id-12345678,policy-store-id-12345678
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:verifiedpermissions/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * The definition of the policy. See Definition below.
     *
     * The following arguments are optional:
     */
    public readonly definition!: pulumi.Output<outputs.verifiedpermissions.PolicyDefinition | undefined>;
    public /*out*/ readonly policyId!: pulumi.Output<string>;
    /**
     * The Policy Store ID of the policy store.
     */
    public readonly policyStoreId!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["definition"] = state ? state.definition : undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["policyStoreId"] = state ? state.policyStoreId : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.policyStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyStoreId'");
            }
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["policyStoreId"] = args ? args.policyStoreId : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["policyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    createdDate?: pulumi.Input<string>;
    /**
     * The definition of the policy. See Definition below.
     *
     * The following arguments are optional:
     */
    definition?: pulumi.Input<inputs.verifiedpermissions.PolicyDefinition>;
    policyId?: pulumi.Input<string>;
    /**
     * The Policy Store ID of the policy store.
     */
    policyStoreId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * The definition of the policy. See Definition below.
     *
     * The following arguments are optional:
     */
    definition?: pulumi.Input<inputs.verifiedpermissions.PolicyDefinition>;
    /**
     * The Policy Store ID of the policy store.
     */
    policyStoreId: pulumi.Input<string>;
}
