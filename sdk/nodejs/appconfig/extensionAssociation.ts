// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Associates an AppConfig Extension with a Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testTopic = new aws.sns.Topic("testTopic", {});
 * const testPolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["appconfig.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const testRole = new aws.iam.Role("testRole", {assumeRolePolicy: testPolicyDocument.then(testPolicyDocument => testPolicyDocument.json)});
 * const testExtension = new aws.appconfig.Extension("testExtension", {
 *     description: "test description",
 *     actionPoints: [{
 *         point: "ON_DEPLOYMENT_COMPLETE",
 *         actions: [{
 *             name: "test",
 *             roleArn: testRole.arn,
 *             uri: testTopic.arn,
 *         }],
 *     }],
 *     tags: {
 *         Type: "AppConfig Extension",
 *     },
 * });
 * const testApplication = new aws.appconfig.Application("testApplication", {});
 * const testExtensionAssociation = new aws.appconfig.ExtensionAssociation("testExtensionAssociation", {
 *     extensionArn: testExtension.arn,
 *     resourceArn: testApplication.arn,
 * });
 * ```
 *
 * ## Import
 *
 * terraform import {
 *
 *  to = aws_appconfig_extension_association.example
 *
 *  id = "71rxuzt" } Using `pulumi import`, import AppConfig Extension Associations using their extension association ID. For exampleconsole % pulumi import aws_appconfig_extension_association.example 71rxuzt
 */
export class ExtensionAssociation extends pulumi.CustomResource {
    /**
     * Get an existing ExtensionAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExtensionAssociationState, opts?: pulumi.CustomResourceOptions): ExtensionAssociation {
        return new ExtensionAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:appconfig/extensionAssociation:ExtensionAssociation';

    /**
     * Returns true if the given object is an instance of ExtensionAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExtensionAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExtensionAssociation.__pulumiType;
    }

    /**
     * ARN of the AppConfig Extension Association.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN of the extension defined in the association.
     */
    public readonly extensionArn!: pulumi.Output<string>;
    /**
     * The version number for the extension defined in the association.
     */
    public /*out*/ readonly extensionVersion!: pulumi.Output<number>;
    /**
     * The parameter names and values defined for the association.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The ARN of the application, configuration profile, or environment to associate with the extension.
     */
    public readonly resourceArn!: pulumi.Output<string>;

    /**
     * Create a ExtensionAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExtensionAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExtensionAssociationArgs | ExtensionAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExtensionAssociationState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["extensionArn"] = state ? state.extensionArn : undefined;
            resourceInputs["extensionVersion"] = state ? state.extensionVersion : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
        } else {
            const args = argsOrState as ExtensionAssociationArgs | undefined;
            if ((!args || args.extensionArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'extensionArn'");
            }
            if ((!args || args.resourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceArn'");
            }
            resourceInputs["extensionArn"] = args ? args.extensionArn : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["resourceArn"] = args ? args.resourceArn : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["extensionVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ExtensionAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExtensionAssociation resources.
 */
export interface ExtensionAssociationState {
    /**
     * ARN of the AppConfig Extension Association.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN of the extension defined in the association.
     */
    extensionArn?: pulumi.Input<string>;
    /**
     * The version number for the extension defined in the association.
     */
    extensionVersion?: pulumi.Input<number>;
    /**
     * The parameter names and values defined for the association.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ARN of the application, configuration profile, or environment to associate with the extension.
     */
    resourceArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ExtensionAssociation resource.
 */
export interface ExtensionAssociationArgs {
    /**
     * The ARN of the extension defined in the association.
     */
    extensionArn: pulumi.Input<string>;
    /**
     * The parameter names and values defined for the association.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The ARN of the application, configuration profile, or environment to associate with the extension.
     */
    resourceArn: pulumi.Input<string>;
}
