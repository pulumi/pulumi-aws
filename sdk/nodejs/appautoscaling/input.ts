// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface PolicyStepScalingPolicyConfiguration {
    /**
     * Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     */
    metricAggregationType?: pulumi.Input<string>;
    /**
     * Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    /**
     * Set of adjustments that manage scaling. These have the following structure:
     *
     * ```typescript
     * import * as pulumi from "@pulumi/pulumi";
     * import * as aws from "@pulumi/aws";
     *
     * const ecsPolicy = new aws.appautoscaling.Policy("ecs_policy", {stepScalingPolicyConfiguration: {
     *     stepAdjustments: [
     *         {
     *             metricIntervalLowerBound: "1",
     *             metricIntervalUpperBound: "2",
     *             scalingAdjustment: -1,
     *         },
     *         {
     *             metricIntervalLowerBound: "2",
     *             metricIntervalUpperBound: "3",
     *             scalingAdjustment: 1,
     *         },
     *     ],
     * }});
     * ```
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.PolicyStepScalingPolicyConfigurationStepAdjustment>[]>;
}
export interface PolicyStepScalingPolicyConfigurationStepAdjustment {
    metricIntervalLowerBound?: pulumi.Input<string>;
    metricIntervalUpperBound?: pulumi.Input<string>;
    scalingAdjustment: pulumi.Input<number>;
}
export interface PolicyTargetTrackingScalingPolicyConfiguration {
    /**
     * Custom CloudWatch metric. Documentation can be found  at: [AWS Customized Metric Specification](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_CustomizedMetricSpecification.html). See supported fields below.
     */
    customizedMetricSpecification?: pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification>;
    /**
     * Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is `false`.
     */
    disableScaleIn?: pulumi.Input<boolean>;
    /**
     * Predefined metric. See supported fields below.
     */
    predefinedMetricSpecification?: pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification>;
    /**
     * Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
     */
    scaleInCooldown?: pulumi.Input<number>;
    /**
     * Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
     */
    scaleOutCooldown?: pulumi.Input<number>;
    /**
     * Target value for the metric.
     */
    targetValue: pulumi.Input<number>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification {
    /**
     * Dimensions of the metric.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension>[]>;
    /**
     * Name of the metric.
     */
    metricName?: pulumi.Input<string>;
    /**
     * Metrics to include, as a metric data query.
     */
    metrics?: pulumi.Input<pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetric>[]>;
    /**
     * Namespace of the metric.
     */
    namespace?: pulumi.Input<string>;
    /**
     * Statistic of the metric. Valid values: `Average`, `Minimum`, `Maximum`, `SampleCount`, and `Sum`.
     */
    statistic?: pulumi.Input<string>;
    /**
     * Unit of the metrics to return.
     */
    unit?: pulumi.Input<string>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimension {
    /**
     * Name of the dimension.
     */
    name: pulumi.Input<string>;
    /**
     * Value of the dimension.
     */
    value: pulumi.Input<string>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetric {
    /**
     * Math expression used on the returned metric. You must specify either `expression` or `metricStat`, but not both.
     */
    expression?: pulumi.Input<string>;
    /**
     * Short name for the metric used in target tracking scaling policy.
     */
    id: pulumi.Input<string>;
    /**
     * Human-readable label for this metric or expression.
     */
    label?: pulumi.Input<string>;
    /**
     * Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either `expression` or `metricStat`, but not both.
     */
    metricStat?: pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricMetricStat>;
    /**
     * Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
     */
    returnData?: pulumi.Input<boolean>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricMetricStat {
    /**
     * Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
     */
    metric: pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricMetricStatMetric>;
    /**
     * Statistic of the metrics to return.
     */
    stat: pulumi.Input<string>;
    /**
     * Unit of the metrics to return.
     */
    unit?: pulumi.Input<string>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricMetricStatMetric {
    /**
     * Dimensions of the metric.
     */
    dimensions?: pulumi.Input<pulumi.Input<inputs.PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimension>[]>;
    /**
     * Name of the metric.
     */
    metricName: pulumi.Input<string>;
    /**
     * Namespace of the metric.
     */
    namespace: pulumi.Input<string>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricMetricStatMetricDimension {
    /**
     * Name of the dimension.
     */
    name: pulumi.Input<string>;
    /**
     * Value of the dimension.
     */
    value: pulumi.Input<string>;
}
export interface PolicyTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification {
    /**
     * Metric type.
     */
    predefinedMetricType: pulumi.Input<string>;
    /**
     * Reserved for future use if the `predefinedMetricType` is not `ALBRequestCountPerTarget`. If the `predefinedMetricType` is `ALBRequestCountPerTarget`, you must specify this argument. Documentation can be found at: [AWS Predefined Scaling Metric Specification](https://docs.aws.amazon.com/autoscaling/plans/APIReference/API_PredefinedScalingMetricSpecification.html). Must be less than or equal to 1023 characters in length.
     */
    resourceLabel?: pulumi.Input<string>;
}
export interface ScheduledActionScalableTargetAction {
    maxCapacity?: pulumi.Input<number>;
    minCapacity?: pulumi.Input<number>;
}
