// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS EventBridge Schemas Registry Policy.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplePolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         sid: "example",
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["109876543210"],
 *         }],
 *         actions: ["schemas:*"],
 *         resources: [
 *             "arn:aws:schemas:us-east-1:012345678901:registry/example",
 *             "arn:aws:schemas:us-east-1:012345678901:schema/example*",
 *         ],
 *     }],
 * });
 * const exampleRegistryPolicy = new aws.schemas.RegistryPolicy("exampleRegistryPolicy", {
 *     registryName: "example",
 *     policy: examplePolicyDocument.then(examplePolicyDocument => examplePolicyDocument.json),
 * });
 * ```
 *
 * ## Import
 *
 * EventBridge Schema Registry Policy can be imported using the `registry_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:schemas/registryPolicy:RegistryPolicy example example
 * ```
 */
export class RegistryPolicy extends pulumi.CustomResource {
    /**
     * Get an existing RegistryPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryPolicyState, opts?: pulumi.CustomResourceOptions): RegistryPolicy {
        return new RegistryPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:schemas/registryPolicy:RegistryPolicy';

    /**
     * Returns true if the given object is an instance of RegistryPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegistryPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryPolicy.__pulumiType;
    }

    /**
     * Resource Policy for EventBridge Schema Registry
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * Name of EventBridge Schema Registry
     */
    public readonly registryName!: pulumi.Output<string>;

    /**
     * Create a RegistryPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegistryPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryPolicyArgs | RegistryPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryPolicyState | undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["registryName"] = state ? state.registryName : undefined;
        } else {
            const args = argsOrState as RegistryPolicyArgs | undefined;
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["registryName"] = args ? args.registryName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegistryPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegistryPolicy resources.
 */
export interface RegistryPolicyState {
    /**
     * Resource Policy for EventBridge Schema Registry
     */
    policy?: pulumi.Input<string>;
    /**
     * Name of EventBridge Schema Registry
     */
    registryName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegistryPolicy resource.
 */
export interface RegistryPolicyArgs {
    /**
     * Resource Policy for EventBridge Schema Registry
     */
    policy: pulumi.Input<string>;
    /**
     * Name of EventBridge Schema Registry
     */
    registryName: pulumi.Input<string>;
}
