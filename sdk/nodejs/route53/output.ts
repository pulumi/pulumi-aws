// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";
import * as enums from "./enums";

export interface RecordAlias {
    /**
     * Set to `true` if you want Route 53 to determine whether to respond to DNS queries using this resource record set by checking the health of the resource record set. Some resources have special requirements, see [related part of documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-values.html#rrsets-values-alias-evaluate-target-health).
     */
    evaluateTargetHealth: boolean;
    /**
     * DNS domain name for a CloudFront distribution, S3 bucket, ELB, or another resource record set in this hosted zone.
     */
    name: string;
    /**
     * Hosted zone ID for a CloudFront distribution, S3 bucket, ELB, or Route 53 hosted zone. See `resource_elb.zone_id` for example.
     */
    zoneId: string;
}
export interface RecordCidrRoutingPolicy {
    /**
     * The CIDR collection ID. See the `aws.route53.CidrCollection` resource for more details.
     */
    collectionId: string;
    /**
     * The CIDR collection location name. See the `aws.route53.CidrLocation` resource for more details. A `locationName` with an asterisk `"*"` can be used to create a default CIDR record. `collectionId` is still required for default record.
     */
    locationName: string;
}
export interface RecordFailoverRoutingPolicy {
    /**
     * `PRIMARY` or `SECONDARY`. A `PRIMARY` record will be served if its healthcheck is passing, otherwise the `SECONDARY` will be served. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-failover-configuring-options.html#dns-failover-failover-rrsets
     */
    type: string;
}
export interface RecordGeolocationRoutingPolicy {
    /**
     * A two-letter continent code. See http://docs.aws.amazon.com/Route53/latest/APIReference/API_GetGeoLocation.html for code details. Either `continent` or `country` must be specified.
     */
    continent?: string;
    /**
     * A two-character country code or `*` to indicate a default resource record set.
     */
    country?: string;
    /**
     * A subdivision code for a country.
     */
    subdivision?: string;
}
export interface RecordGeoproximityRoutingPolicy {
    awsRegion?: string;
    bias?: number;
    coordinates?: outputs.RecordGeoproximityRoutingPolicyCoordinate[];
    localZoneGroup?: string;
}
export interface RecordGeoproximityRoutingPolicyCoordinate {
    latitude: string;
    longitude: string;
}
export interface RecordLatencyRoutingPolicy {
    /**
     * An AWS region from which to measure latency. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-latency
     */
    region: string;
}
export interface RecordWeightedRoutingPolicy {
    /**
     * A numeric value indicating the relative weight of the record. See http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html#routing-policy-weighted.
     */
    weight: number;
}
export interface ResolverEndpointIpAddress {
    /**
     * The IP address in the subnet that you want to use for DNS queries.
     */
    ip: string;
    ipId: string;
    /**
     * The ID of the subnet that contains the IP address.
     */
    subnetId: string;
}
export interface ResolverRuleTargetIp {
    /**
     * One IP address that you want to forward DNS queries to. You can specify only IPv4 addresses.
     */
    ip: string;
    /**
     * The port at `ip` that you want to forward DNS queries to. Default value is `53`.
     */
    port?: number;
    /**
     * The protocol for the resolver endpoint. Valid values can be found in the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/APIReference/API_route53resolver_TargetAddress.html). Default value is `Do53`.
     */
    protocol?: string;
}
export interface ZoneVpc {
    /**
     * ID of the VPC to associate.
     */
    vpcId: string;
    /**
     * Region of the VPC to associate. Defaults to AWS provider region.
     */
    vpcRegion: string;
}
export interface GetResolverFirewallRulesFirewallRule {
    /**
     * The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list.
     */
    action: string;
    /**
     * The DNS record's type.
     */
    blockOverrideDnsType: string;
    /**
     * The custom DNS record to send back in response to the query.
     */
    blockOverrideDomain: string;
    /**
     * The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record.
     */
    blockOverrideTtl: number;
    /**
     * The way that you want DNS Firewall to block the request.
     */
    blockResponse: string;
    /**
     * The date and time that the rule was created, in Unix time format and Coordinated Universal Time (UTC).
     */
    creationTime: string;
    /**
     * A unique string defined by you to identify the request.
     */
    creatorRequestId: string;
    /**
     * The ID of the domain list that's used in the rule.
     */
    firewallDomainListId: string;
    /**
     * The unique identifier of the firewall rule group that you want to retrieve the rules for.
     */
    firewallRuleGroupId: string;
    /**
     * The date and time that the rule was last modified, in Unix time format and Coordinated Universal Time (UTC).
     */
    modificationTime: string;
    /**
     * The name of the rule.
     */
    name: string;
    /**
     * The setting that determines the processing order of the rules in a rule group.
     */
    priority: number;
}
