// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS Route 53 Profiles Association.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ## Import
 *
 * Using `pulumi import`, import Route 53 Profiles Association using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:route53/profilesAssociation:ProfilesAssociation example rpa-id-12345678
 * ```
 */
export class ProfilesAssociation extends pulumi.CustomResource {
    /**
     * Get an existing ProfilesAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProfilesAssociationState, opts?: pulumi.CustomResourceOptions): ProfilesAssociation {
        return new ProfilesAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:route53/profilesAssociation:ProfilesAssociation';

    /**
     * Returns true if the given object is an instance of ProfilesAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProfilesAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProfilesAssociation.__pulumiType;
    }

    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public /*out*/ readonly ownerId: pulumi.Output<string>;
    /**
     * ID of the profile associated with the VPC.
     */
    declare public readonly profileId: pulumi.Output<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * Resource ID of the VPC the profile to be associated with.
     */
    declare public readonly resourceId: pulumi.Output<string>;
    /**
     * Status of the Profile Association.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Status message of the Profile Association.
     */
    declare public /*out*/ readonly statusMessage: pulumi.Output<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;
    declare public readonly timeouts: pulumi.Output<outputs.route53.ProfilesAssociationTimeouts | undefined>;

    /**
     * Create a ProfilesAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProfilesAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProfilesAssociationArgs | ProfilesAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProfilesAssociationState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["name"] = state?.name;
            resourceInputs["ownerId"] = state?.ownerId;
            resourceInputs["profileId"] = state?.profileId;
            resourceInputs["region"] = state?.region;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["status"] = state?.status;
            resourceInputs["statusMessage"] = state?.statusMessage;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
            resourceInputs["timeouts"] = state?.timeouts;
        } else {
            const args = argsOrState as ProfilesAssociationArgs | undefined;
            if (args?.profileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            if (args?.resourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["profileId"] = args?.profileId;
            resourceInputs["region"] = args?.region;
            resourceInputs["resourceId"] = args?.resourceId;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["timeouts"] = args?.timeouts;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["ownerId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProfilesAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProfilesAssociation resources.
 */
export interface ProfilesAssociationState {
    arn?: pulumi.Input<string>;
    /**
     * Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
     */
    name?: pulumi.Input<string>;
    ownerId?: pulumi.Input<string>;
    /**
     * ID of the profile associated with the VPC.
     */
    profileId?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Resource ID of the VPC the profile to be associated with.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Status of the Profile Association.
     */
    status?: pulumi.Input<string>;
    /**
     * Status message of the Profile Association.
     */
    statusMessage?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.route53.ProfilesAssociationTimeouts>;
}

/**
 * The set of arguments for constructing a ProfilesAssociation resource.
 */
export interface ProfilesAssociationArgs {
    /**
     * Name of the Profile Association. Must match a regex of `(?!^[0-9]+$)([a-zA-Z0-9\\-_' ']+)`.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the profile associated with the VPC.
     */
    profileId: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * Resource ID of the VPC the profile to be associated with.
     */
    resourceId: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.route53.ProfilesAssociationTimeouts>;
}
