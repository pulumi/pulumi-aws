// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class KeySigningKey extends pulumi.CustomResource {
    /**
     * Get an existing KeySigningKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeySigningKeyState, opts?: pulumi.CustomResourceOptions): KeySigningKey {
        return new KeySigningKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:route53/keySigningKey:KeySigningKey';

    /**
     * Returns true if the given object is an instance of KeySigningKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeySigningKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeySigningKey.__pulumiType;
    }

    public /*out*/ readonly digestAlgorithmMnemonic!: pulumi.Output<string>;
    public /*out*/ readonly digestAlgorithmType!: pulumi.Output<number>;
    public /*out*/ readonly digestValue!: pulumi.Output<string>;
    public /*out*/ readonly dnskeyRecord!: pulumi.Output<string>;
    public /*out*/ readonly dsRecord!: pulumi.Output<string>;
    public /*out*/ readonly flag!: pulumi.Output<number>;
    public readonly hostedZoneId!: pulumi.Output<string>;
    public readonly keyManagementServiceArn!: pulumi.Output<string>;
    public /*out*/ readonly keyTag!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    public /*out*/ readonly signingAlgorithmMnemonic!: pulumi.Output<string>;
    public /*out*/ readonly signingAlgorithmType!: pulumi.Output<number>;
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a KeySigningKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeySigningKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeySigningKeyArgs | KeySigningKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeySigningKeyState | undefined;
            resourceInputs["digestAlgorithmMnemonic"] = state ? state.digestAlgorithmMnemonic : undefined;
            resourceInputs["digestAlgorithmType"] = state ? state.digestAlgorithmType : undefined;
            resourceInputs["digestValue"] = state ? state.digestValue : undefined;
            resourceInputs["dnskeyRecord"] = state ? state.dnskeyRecord : undefined;
            resourceInputs["dsRecord"] = state ? state.dsRecord : undefined;
            resourceInputs["flag"] = state ? state.flag : undefined;
            resourceInputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            resourceInputs["keyManagementServiceArn"] = state ? state.keyManagementServiceArn : undefined;
            resourceInputs["keyTag"] = state ? state.keyTag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["signingAlgorithmMnemonic"] = state ? state.signingAlgorithmMnemonic : undefined;
            resourceInputs["signingAlgorithmType"] = state ? state.signingAlgorithmType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as KeySigningKeyArgs | undefined;
            if ((!args || args.hostedZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostedZoneId'");
            }
            if ((!args || args.keyManagementServiceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyManagementServiceArn'");
            }
            resourceInputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            resourceInputs["keyManagementServiceArn"] = args ? args.keyManagementServiceArn : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["digestAlgorithmMnemonic"] = undefined /*out*/;
            resourceInputs["digestAlgorithmType"] = undefined /*out*/;
            resourceInputs["digestValue"] = undefined /*out*/;
            resourceInputs["dnskeyRecord"] = undefined /*out*/;
            resourceInputs["dsRecord"] = undefined /*out*/;
            resourceInputs["flag"] = undefined /*out*/;
            resourceInputs["keyTag"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
            resourceInputs["signingAlgorithmMnemonic"] = undefined /*out*/;
            resourceInputs["signingAlgorithmType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeySigningKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeySigningKey resources.
 */
export interface KeySigningKeyState {
    digestAlgorithmMnemonic?: pulumi.Input<string>;
    digestAlgorithmType?: pulumi.Input<number>;
    digestValue?: pulumi.Input<string>;
    dnskeyRecord?: pulumi.Input<string>;
    dsRecord?: pulumi.Input<string>;
    flag?: pulumi.Input<number>;
    hostedZoneId?: pulumi.Input<string>;
    keyManagementServiceArn?: pulumi.Input<string>;
    keyTag?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    signingAlgorithmMnemonic?: pulumi.Input<string>;
    signingAlgorithmType?: pulumi.Input<number>;
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeySigningKey resource.
 */
export interface KeySigningKeyArgs {
    hostedZoneId: pulumi.Input<string>;
    keyManagementServiceArn: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
}
