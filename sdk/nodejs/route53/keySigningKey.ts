// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages an Route 53 Key Signing Key. For more information about managing Domain Name System Security Extensions (DNSSEC)in Route 53, see the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleKey = new aws.kms.Key("exampleKey", {
 *     customerMasterKeySpec: "ECC_NIST_P256",
 *     deletionWindowInDays: 7,
 *     keyUsage: "SIGN_VERIFY",
 *     policy: JSON.stringify({
 *         Statement: [
 *             {
 *                 Action: [
 *                     "kms:DescribeKey",
 *                     "kms:GetPublicKey",
 *                     "kms:Sign",
 *                 ],
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "api-service.dnssec.route53.aws.internal",
 *                 },
 *                 Sid: "Route 53 DNSSEC Permissions",
 *             },
 *             {
 *                 Action: "kms:*",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: "*",
 *                 },
 *                 Resource: "*",
 *                 Sid: "IAM User Permissions",
 *             },
 *         ],
 *         Version: "2012-10-17",
 *     }),
 * });
 * const exampleZone = new aws.route53.Zone("exampleZone", {});
 * const exampleKeySigningKey = new aws.route53.KeySigningKey("exampleKeySigningKey", {
 *     hostedZoneId: aws_route53_zone.test.id,
 *     keyManagementServiceArn: aws_kms_key.test.arn,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_route53_key_signing_key` resources can be imported by using the Route 53 Hosted Zone identifier and KMS Key identifier, separated by a comma (`,`), e.g.
 *
 * ```sh
 *  $ pulumi import aws:route53/keySigningKey:KeySigningKey example Z1D633PJN98FT9,example
 * ```
 */
export class KeySigningKey extends pulumi.CustomResource {
    /**
     * Get an existing KeySigningKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeySigningKeyState, opts?: pulumi.CustomResourceOptions): KeySigningKey {
        return new KeySigningKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:route53/keySigningKey:KeySigningKey';

    /**
     * Returns true if the given object is an instance of KeySigningKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeySigningKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeySigningKey.__pulumiType;
    }

    /**
     * A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     */
    public /*out*/ readonly digestAlgorithmMnemonic!: pulumi.Output<string>;
    /**
     * An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     */
    public /*out*/ readonly digestAlgorithmType!: pulumi.Output<number>;
    /**
     * A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
     */
    public /*out*/ readonly digestValue!: pulumi.Output<string>;
    /**
     * A string that represents a DNSKEY record.
     */
    public /*out*/ readonly dnskeyRecord!: pulumi.Output<string>;
    /**
     * A string that represents a delegation signer (DS) record.
     */
    public /*out*/ readonly dsRecord!: pulumi.Output<string>;
    /**
     * An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
     */
    public /*out*/ readonly flag!: pulumi.Output<number>;
    /**
     * Identifier of the Route 53 Hosted Zone.
     */
    public readonly hostedZoneId!: pulumi.Output<string>;
    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
     */
    public readonly keyManagementServiceArn!: pulumi.Output<string>;
    /**
     * An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
     */
    public /*out*/ readonly keyTag!: pulumi.Output<number>;
    /**
     * Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
     */
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    /**
     * A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     */
    public /*out*/ readonly signingAlgorithmMnemonic!: pulumi.Output<string>;
    /**
     * An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     */
    public /*out*/ readonly signingAlgorithmType!: pulumi.Output<number>;
    /**
     * Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a KeySigningKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeySigningKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeySigningKeyArgs | KeySigningKeyState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeySigningKeyState | undefined;
            inputs["digestAlgorithmMnemonic"] = state ? state.digestAlgorithmMnemonic : undefined;
            inputs["digestAlgorithmType"] = state ? state.digestAlgorithmType : undefined;
            inputs["digestValue"] = state ? state.digestValue : undefined;
            inputs["dnskeyRecord"] = state ? state.dnskeyRecord : undefined;
            inputs["dsRecord"] = state ? state.dsRecord : undefined;
            inputs["flag"] = state ? state.flag : undefined;
            inputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            inputs["keyManagementServiceArn"] = state ? state.keyManagementServiceArn : undefined;
            inputs["keyTag"] = state ? state.keyTag : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["publicKey"] = state ? state.publicKey : undefined;
            inputs["signingAlgorithmMnemonic"] = state ? state.signingAlgorithmMnemonic : undefined;
            inputs["signingAlgorithmType"] = state ? state.signingAlgorithmType : undefined;
            inputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as KeySigningKeyArgs | undefined;
            if ((!args || args.hostedZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostedZoneId'");
            }
            if ((!args || args.keyManagementServiceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyManagementServiceArn'");
            }
            inputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            inputs["keyManagementServiceArn"] = args ? args.keyManagementServiceArn : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["digestAlgorithmMnemonic"] = undefined /*out*/;
            inputs["digestAlgorithmType"] = undefined /*out*/;
            inputs["digestValue"] = undefined /*out*/;
            inputs["dnskeyRecord"] = undefined /*out*/;
            inputs["dsRecord"] = undefined /*out*/;
            inputs["flag"] = undefined /*out*/;
            inputs["keyTag"] = undefined /*out*/;
            inputs["publicKey"] = undefined /*out*/;
            inputs["signingAlgorithmMnemonic"] = undefined /*out*/;
            inputs["signingAlgorithmType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(KeySigningKey.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeySigningKey resources.
 */
export interface KeySigningKeyState {
    /**
     * A string used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     */
    readonly digestAlgorithmMnemonic?: pulumi.Input<string>;
    /**
     * An integer used to represent the delegation signer digest algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.3](https://tools.ietf.org/html/rfc8624#section-3.3).
     */
    readonly digestAlgorithmType?: pulumi.Input<number>;
    /**
     * A cryptographic digest of a DNSKEY resource record (RR). DNSKEY records are used to publish the public key that resolvers can use to verify DNSSEC signatures that are used to secure certain kinds of information provided by the DNS system.
     */
    readonly digestValue?: pulumi.Input<string>;
    /**
     * A string that represents a DNSKEY record.
     */
    readonly dnskeyRecord?: pulumi.Input<string>;
    /**
     * A string that represents a delegation signer (DS) record.
     */
    readonly dsRecord?: pulumi.Input<string>;
    /**
     * An integer that specifies how the key is used. For key-signing key (KSK), this value is always 257.
     */
    readonly flag?: pulumi.Input<number>;
    /**
     * Identifier of the Route 53 Hosted Zone.
     */
    readonly hostedZoneId?: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
     */
    readonly keyManagementServiceArn?: pulumi.Input<string>;
    /**
     * An integer used to identify the DNSSEC record for the domain name. The process used to calculate the value is described in [RFC-4034 Appendix B](https://tools.ietf.org/rfc/rfc4034.txt).
     */
    readonly keyTag?: pulumi.Input<number>;
    /**
     * Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The public key, represented as a Base64 encoding, as required by [RFC-4034 Page 5](https://tools.ietf.org/rfc/rfc4034.txt).
     */
    readonly publicKey?: pulumi.Input<string>;
    /**
     * A string used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     */
    readonly signingAlgorithmMnemonic?: pulumi.Input<string>;
    /**
     * An integer used to represent the signing algorithm. This value must follow the guidelines provided by [RFC-8624 Section 3.1](https://tools.ietf.org/html/rfc8624#section-3.1).
     */
    readonly signingAlgorithmType?: pulumi.Input<number>;
    /**
     * Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
     */
    readonly status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeySigningKey resource.
 */
export interface KeySigningKeyArgs {
    /**
     * Identifier of the Route 53 Hosted Zone.
     */
    readonly hostedZoneId: pulumi.Input<string>;
    /**
     * Amazon Resource Name (ARN) of the Key Management Service (KMS) Key. This must be unique for each key-signing key (KSK) in a single hosted zone. This key must be in the `us-east-1` Region and meet certain requirements, which are described in the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-cmk-requirements.html) and [Route 53 API Reference](https://docs.aws.amazon.com/Route53/latest/APIReference/API_CreateKeySigningKey.html).
     */
    readonly keyManagementServiceArn: pulumi.Input<string>;
    /**
     * Name of the key-signing key (KSK). Must be unique for each key-singing key in the same hosted zone.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Status of the key-signing key (KSK). Valid values: `ACTIVE`, `INACTIVE`. Defaults to `ACTIVE`.
     */
    readonly status?: pulumi.Input<string>;
}
