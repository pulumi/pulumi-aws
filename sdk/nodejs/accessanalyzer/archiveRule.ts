// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.accessanalyzer.ArchiveRule("example", {
 *     analyzerName: "example-analyzer",
 *     filters: [
 *         {
 *             criteria: "condition.aws:UserId",
 *             eqs: ["userid"],
 *         },
 *         {
 *             criteria: "error",
 *             exists: "true",
 *         },
 *         {
 *             criteria: "isPublic",
 *             eqs: ["false"],
 *         },
 *     ],
 *     ruleName: "example-rule",
 * });
 * ```
 *
 * ## Import
 *
 * AccessAnalyzer ArchiveRule can be imported using the `analyzer_name/rule_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:accessanalyzer/archiveRule:ArchiveRule example example-analyzer/example-rule
 * ```
 */
export class ArchiveRule extends pulumi.CustomResource {
    /**
     * Get an existing ArchiveRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ArchiveRuleState, opts?: pulumi.CustomResourceOptions): ArchiveRule {
        return new ArchiveRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:accessanalyzer/archiveRule:ArchiveRule';

    /**
     * Returns true if the given object is an instance of ArchiveRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ArchiveRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ArchiveRule.__pulumiType;
    }

    /**
     * Analyzer name.
     */
    public readonly analyzerName!: pulumi.Output<string>;
    /**
     * Filter criteria for the archive rule. See Filter for more details.
     */
    public readonly filters!: pulumi.Output<outputs.accessanalyzer.ArchiveRuleFilter[]>;
    /**
     * Rule name.
     */
    public readonly ruleName!: pulumi.Output<string>;

    /**
     * Create a ArchiveRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ArchiveRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ArchiveRuleArgs | ArchiveRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ArchiveRuleState | undefined;
            resourceInputs["analyzerName"] = state ? state.analyzerName : undefined;
            resourceInputs["filters"] = state ? state.filters : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
        } else {
            const args = argsOrState as ArchiveRuleArgs | undefined;
            if ((!args || args.analyzerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'analyzerName'");
            }
            if ((!args || args.filters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filters'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            resourceInputs["analyzerName"] = args ? args.analyzerName : undefined;
            resourceInputs["filters"] = args ? args.filters : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ArchiveRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ArchiveRule resources.
 */
export interface ArchiveRuleState {
    /**
     * Analyzer name.
     */
    analyzerName?: pulumi.Input<string>;
    /**
     * Filter criteria for the archive rule. See Filter for more details.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.accessanalyzer.ArchiveRuleFilter>[]>;
    /**
     * Rule name.
     */
    ruleName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ArchiveRule resource.
 */
export interface ArchiveRuleArgs {
    /**
     * Analyzer name.
     */
    analyzerName: pulumi.Input<string>;
    /**
     * Filter criteria for the archive rule. See Filter for more details.
     */
    filters: pulumi.Input<pulumi.Input<inputs.accessanalyzer.ArchiveRuleFilter>[]>;
    /**
     * Rule name.
     */
    ruleName: pulumi.Input<string>;
}
