// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface BudgetActionActionThreshold {
    /**
     * The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
     */
    actionThresholdType: string;
    /**
     * The threshold of a notification.
     */
    actionThresholdValue: number;
}
export interface BudgetActionDefinition {
    /**
     * The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
     */
    iamActionDefinition?: outputs.BudgetActionDefinitionIamActionDefinition;
    /**
     * The service control policies (SCPs) action definition details. See SCP Action Definition.
     */
    scpActionDefinition?: outputs.BudgetActionDefinitionScpActionDefinition;
    /**
     * The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
     */
    ssmActionDefinition?: outputs.BudgetActionDefinitionSsmActionDefinition;
}
export interface BudgetActionDefinitionIamActionDefinition {
    /**
     * A list of groups to be attached. There must be at least one group.
     */
    groups?: string[];
    /**
     * The Amazon Resource Name (ARN) of the policy to be attached.
     */
    policyArn: string;
    /**
     * A list of roles to be attached. There must be at least one role.
     */
    roles?: string[];
    /**
     * A list of users to be attached. There must be at least one user.
     */
    users?: string[];
}
export interface BudgetActionDefinitionScpActionDefinition {
    /**
     * The policy ID attached.
     */
    policyId: string;
    /**
     * A list of target IDs.
     */
    targetIds: string[];
}
export interface BudgetActionDefinitionSsmActionDefinition {
    /**
     * The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
     */
    actionSubType: string;
    /**
     * The EC2 and RDS instance IDs.
     */
    instanceIds: string[];
    /**
     * The Region to run the SSM document.
     */
    region: string;
}
export interface BudgetActionSubscriber {
    /**
     * The address that AWS sends budget notifications to, either an SNS topic or an email.
     */
    address: string;
    /**
     * The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.
     */
    subscriptionType: string;
}
export interface BudgetAutoAdjustData {
    autoAdjustType: string;
    historicalOptions?: outputs.BudgetAutoAdjustDataHistoricalOptions;
    lastAutoAdjustTime: string;
}
export interface BudgetAutoAdjustDataHistoricalOptions {
    budgetAdjustmentPeriod: number;
    lookbackAvailablePeriods: number;
}
export interface BudgetCostFilter {
    /**
     * The name of a budget. Unique within accounts.
     */
    name: string;
    values: string[];
}
export interface BudgetCostTypes {
    /**
     * A boolean value whether to include credits in the cost budget. Defaults to `true`
     */
    includeCredit?: boolean;
    /**
     * Whether a budget includes discounts. Defaults to `true`
     */
    includeDiscount?: boolean;
    /**
     * A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
     */
    includeOtherSubscription?: boolean;
    /**
     * A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
     */
    includeRecurring?: boolean;
    /**
     * A boolean value whether to include refunds in the cost budget. Defaults to `true`
     */
    includeRefund?: boolean;
    /**
     * A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
     */
    includeSubscription?: boolean;
    /**
     * A boolean value whether to include support costs in the cost budget. Defaults to `true`
     */
    includeSupport?: boolean;
    /**
     * A boolean value whether to include tax in the cost budget. Defaults to `true`
     */
    includeTax?: boolean;
    /**
     * A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
     */
    includeUpfront?: boolean;
    /**
     * Whether a budget uses the amortized rate. Defaults to `false`
     */
    useAmortized?: boolean;
    /**
     * A boolean value whether to use blended costs in the cost budget. Defaults to `false`
     */
    useBlended?: boolean;
}
export interface BudgetNotification {
    /**
     * (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
     */
    comparisonOperator: string;
    /**
     * (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
     */
    notificationType: string;
    /**
     * (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
     */
    subscriberEmailAddresses?: string[];
    /**
     * (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
     */
    subscriberSnsTopicArns?: string[];
    /**
     * (Required) Threshold when the notification should be sent.
     */
    threshold: number;
    /**
     * (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
     */
    thresholdType: string;
}
export interface BudgetPlannedLimit {
    /**
     * (Required) The amount of cost or usage being measured for a budget.
     */
    amount: string;
    /**
     * (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     */
    startTime: string;
    /**
     * (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
     */
    unit: string;
}
export interface GetBudgetAutoAdjustData {
    /**
     * (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`.
     */
    autoAdjustType: string;
    /**
     * (Optional) - Configuration block of Historical Options. Required for `autoAdjustType` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
     */
    historicalOptions: outputs.GetBudgetAutoAdjustDataHistoricalOption[];
    /**
     * (Optional) - The last time that your budget was auto-adjusted.
     */
    lastAutoAdjustTime: string;
}
export interface GetBudgetAutoAdjustDataHistoricalOption {
    /**
     * (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
     */
    budgetAdjustmentPeriod: number;
    /**
     * (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budgetAdjustmentPeriod` and your historical cost data.
     */
    lookbackAvailablePeriods: number;
}
export interface GetBudgetBudgetLimit {
    /**
     * The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
     */
    amount: string;
    /**
     * The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
     */
    unit: string;
}
export interface GetBudgetCalculatedSpend {
    actualSpends: outputs.GetBudgetCalculatedSpendActualSpend[];
}
export interface GetBudgetCalculatedSpendActualSpend {
    /**
     * The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
     */
    amount: string;
    /**
     * The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
     */
    unit: string;
}
export interface GetBudgetCostFilter {
    /**
     * The name of a budget. Unique within accounts.
     *
     * The following arguments are optional:
     */
    name: string;
    values: string[];
}
export interface GetBudgetCostType {
    /**
     * A boolean value whether to include credits in the cost budget. Defaults to `true`.
     */
    includeCredit: boolean;
    /**
     * Whether a budget includes discounts. Defaults to `true`.
     */
    includeDiscount: boolean;
    /**
     * A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`.
     */
    includeOtherSubscription: boolean;
    /**
     * A boolean value whether to include recurring costs in the cost budget. Defaults to `true`.
     */
    includeRecurring: boolean;
    /**
     * A boolean value whether to include refunds in the cost budget. Defaults to `true`.
     */
    includeRefund: boolean;
    /**
     * A boolean value whether to include subscriptions in the cost budget. Defaults to `true`.
     */
    includeSubscription: boolean;
    /**
     * A boolean value whether to include support costs in the cost budget. Defaults to `true`.
     */
    includeSupport: boolean;
    /**
     * A boolean value whether to include tax in the cost budget. Defaults to `true`.
     */
    includeTax: boolean;
    /**
     * A boolean value whether to include upfront costs in the cost budget. Defaults to `true`.
     */
    includeUpfront: boolean;
    /**
     * Whether a budget uses the amortized rate. Defaults to `false`.
     */
    useAmortized: boolean;
    /**
     * A boolean value whether to use blended costs in the cost budget. Defaults to `false`.
     */
    useBlended: boolean;
}
export interface GetBudgetNotification {
    /**
     * (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
     */
    comparisonOperator: string;
    /**
     * (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`.
     */
    notificationType: string;
    /**
     * (Optional) E-Mail addresses to notify. Either this or `subscriberSnsTopicArns` is required.
     */
    subscriberEmailAddresses: string[];
    /**
     * (Optional) SNS topics to notify. Either this or `subscriberEmailAddresses` is required.
     */
    subscriberSnsTopicArns: string[];
    /**
     * (Required) Threshold when the notification should be sent.
     */
    threshold: number;
    /**
     * (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
     */
    thresholdType: string;
}
export interface GetBudgetPlannedLimit {
    /**
     * The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
     */
    amount: string;
    /**
     * (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
     */
    startTime: string;
    /**
     * The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP. Length Constraints: Minimum length of `1`. Maximum length of `2147483647`.
     */
    unit: string;
}
