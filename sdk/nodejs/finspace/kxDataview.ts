// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS FinSpace Kx Dataview.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.finspace.KxDataview("example", {
 *     environmentId: aws_finspace_kx_environment.example.id,
 *     databaseName: aws_finspace_kx_database.example.name,
 *     availabilityZoneId: "use1-az2",
 *     description: "Terraform managed Kx Dataview",
 *     azMode: "SINGLE",
 *     autoUpdate: true,
 *     segmentConfigurations: [{
 *         volumeName: aws_finspace_kx_volume.example.name,
 *         dbPaths: ["/*"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import an AWS FinSpace Kx Cluster using the `id` (environment ID and cluster name, comma-delimited). For example:
 *
 * ```sh
 *  $ pulumi import aws:finspace/kxDataview:KxDataview example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-database,my-tf-kx-dataview
 * ```
 */
export class KxDataview extends pulumi.CustomResource {
    /**
     * Get an existing KxDataview resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KxDataviewState, opts?: pulumi.CustomResourceOptions): KxDataview {
        return new KxDataview(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:finspace/kxDataview:KxDataview';

    /**
     * Returns true if the given object is an instance of KxDataview.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KxDataview {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KxDataview.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) identifier of the KX dataview.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     */
    public readonly autoUpdate!: pulumi.Output<boolean>;
    /**
     * The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     */
    public readonly availabilityZoneId!: pulumi.Output<string | undefined>;
    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     */
    public readonly azMode!: pulumi.Output<string>;
    /**
     * A unique identifier of the changeset of the database that you want to use to ingest data.
     */
    public readonly changesetId!: pulumi.Output<string | undefined>;
    /**
     * Timestamp at which the dataview was created in FinSpace. Value determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
     */
    public /*out*/ readonly createdTimestamp!: pulumi.Output<string>;
    /**
     * The name of the database where you want to create a dataview.
     */
    public readonly databaseName!: pulumi.Output<string>;
    /**
     * A description for the dataview.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Unique identifier for the KX environment.
     */
    public readonly environmentId!: pulumi.Output<string>;
    /**
     * The last time that the dataview was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
     */
    public /*out*/ readonly lastModifiedTimestamp!: pulumi.Output<string>;
    /**
     * A unique identifier for the dataview.
     *
     * The following arguments are optional:
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segmentConfigurations below.
     */
    public readonly segmentConfigurations!: pulumi.Output<outputs.finspace.KxDataviewSegmentConfiguration[] | undefined>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a KxDataview resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KxDataviewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KxDataviewArgs | KxDataviewState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KxDataviewState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoUpdate"] = state ? state.autoUpdate : undefined;
            resourceInputs["availabilityZoneId"] = state ? state.availabilityZoneId : undefined;
            resourceInputs["azMode"] = state ? state.azMode : undefined;
            resourceInputs["changesetId"] = state ? state.changesetId : undefined;
            resourceInputs["createdTimestamp"] = state ? state.createdTimestamp : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["environmentId"] = state ? state.environmentId : undefined;
            resourceInputs["lastModifiedTimestamp"] = state ? state.lastModifiedTimestamp : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["segmentConfigurations"] = state ? state.segmentConfigurations : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as KxDataviewArgs | undefined;
            if ((!args || args.autoUpdate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoUpdate'");
            }
            if ((!args || args.azMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'azMode'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            resourceInputs["autoUpdate"] = args ? args.autoUpdate : undefined;
            resourceInputs["availabilityZoneId"] = args ? args.availabilityZoneId : undefined;
            resourceInputs["azMode"] = args ? args.azMode : undefined;
            resourceInputs["changesetId"] = args ? args.changesetId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["environmentId"] = args ? args.environmentId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["segmentConfigurations"] = args ? args.segmentConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdTimestamp"] = undefined /*out*/;
            resourceInputs["lastModifiedTimestamp"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(KxDataview.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KxDataview resources.
 */
export interface KxDataviewState {
    /**
     * Amazon Resource Name (ARN) identifier of the KX dataview.
     */
    arn?: pulumi.Input<string>;
    /**
     * The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     */
    autoUpdate?: pulumi.Input<boolean>;
    /**
     * The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     */
    azMode?: pulumi.Input<string>;
    /**
     * A unique identifier of the changeset of the database that you want to use to ingest data.
     */
    changesetId?: pulumi.Input<string>;
    /**
     * Timestamp at which the dataview was created in FinSpace. Value determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
     */
    createdTimestamp?: pulumi.Input<string>;
    /**
     * The name of the database where you want to create a dataview.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * A description for the dataview.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier for the KX environment.
     */
    environmentId?: pulumi.Input<string>;
    /**
     * The last time that the dataview was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
     */
    lastModifiedTimestamp?: pulumi.Input<string>;
    /**
     * A unique identifier for the dataview.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segmentConfigurations below.
     */
    segmentConfigurations?: pulumi.Input<pulumi.Input<inputs.finspace.KxDataviewSegmentConfiguration>[]>;
    status?: pulumi.Input<string>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a KxDataview resource.
 */
export interface KxDataviewArgs {
    /**
     * The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.
     */
    autoUpdate: pulumi.Input<boolean>;
    /**
     * The identifier of the availability zones. If attaching a volume, the volume must be in the same availability zone as the dataview that you are attaching to.
     */
    availabilityZoneId?: pulumi.Input<string>;
    /**
     * The number of availability zones you want to assign per cluster. This can be one of the following:
     */
    azMode: pulumi.Input<string>;
    /**
     * A unique identifier of the changeset of the database that you want to use to ingest data.
     */
    changesetId?: pulumi.Input<string>;
    /**
     * The name of the database where you want to create a dataview.
     */
    databaseName: pulumi.Input<string>;
    /**
     * A description for the dataview.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier for the KX environment.
     */
    environmentId: pulumi.Input<string>;
    /**
     * A unique identifier for the dataview.
     *
     * The following arguments are optional:
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment. See segmentConfigurations below.
     */
    segmentConfigurations?: pulumi.Input<pulumi.Input<inputs.finspace.KxDataviewSegmentConfiguration>[]>;
    /**
     * Key-value mapping of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
