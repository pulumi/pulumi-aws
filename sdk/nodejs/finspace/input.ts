// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface KxClusterAutoScalingConfiguration {
    /**
     * Metric your cluster will track in order to scale in and out. For example, CPU_UTILIZATION_PERCENTAGE is the average CPU usage across all nodes in a cluster.
     */
    autoScalingMetric: pulumi.Input<string>;
    /**
     * Highest number of nodes to scale. Cannot be greater than 5
     */
    maxNodeCount: pulumi.Input<number>;
    /**
     * Desired value of chosen `autoScalingMetric`. When metric drops below this value, cluster will scale in. When metric goes above this value, cluster will scale out. Can be set between 0 and 100 percent.
     */
    metricTarget: pulumi.Input<number>;
    /**
     * Lowest number of nodes to scale. Must be at least 1 and less than the `maxNodeCount`. If nodes in cluster belong to multiple availability zones, then `minNodeCount` must be at least 3.
     */
    minNodeCount: pulumi.Input<number>;
    /**
     * Duration in seconds that FinSpace will wait after a scale in event before initiating another scaling event.
     */
    scaleInCooldownSeconds: pulumi.Input<number>;
    /**
     * Duration in seconds that FinSpace will wait after a scale out event before initiating another scaling event.
     */
    scaleOutCooldownSeconds: pulumi.Input<number>;
}
export interface KxClusterCacheStorageConfiguration {
    size: pulumi.Input<number>;
    /**
     * Type of KDB database. The following types are available:
     * * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
     * * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
     * * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
     * * GP - A general purpose cluster allows you to quickly iterate on code during development by granting greater access to system commands and enabling a fast reload of custom code. This cluster type can optionally mount databases including cache and savedown storage. For this cluster type, the node count is fixed at 1. It does not support autoscaling and supports only `SINGLE` AZ mode.
     * * Tickerplant – A tickerplant cluster allows you to subscribe to feed handlers based on IAM permissions. It can publish to RDBs, other Tickerplants, and real-time subscribers (RTS). Tickerplants can persist messages to log, which is readable by any RDB environment. It supports only single-node that is only one kdb process.
     */
    type: pulumi.Input<string>;
}
export interface KxClusterCapacityConfiguration {
    /**
     * Number of instances running in a cluster. Must be at least 1 and at most 5.
     */
    nodeCount: pulumi.Input<number>;
    /**
     * Determines the hardware of the host computer used for your cluster instance. Each node type offers different memory and storage capabilities. Choose a node type based on the requirements of the application or software that you plan to run on your instance.
     *
     * You can only specify one of the following values:
     * * kx.s.large – The node type with a configuration of 12 GiB memory and 2 vCPUs.
     * * kx.s.xlarge – The node type with a configuration of 27 GiB memory and 4 vCPUs.
     * * kx.s.2xlarge – The node type with a configuration of 54 GiB memory and 8 vCPUs.
     * * kx.s.4xlarge – The node type with a configuration of 108 GiB memory and 16 vCPUs.
     * * kx.s.8xlarge – The node type with a configuration of 216 GiB memory and 32 vCPUs.
     * * kx.s.16xlarge – The node type with a configuration of 432 GiB memory and 64 vCPUs.
     * * kx.s.32xlarge – The node type with a configuration of 864 GiB memory and 128 vCPUs.
     */
    nodeType: pulumi.Input<string>;
}
export interface KxClusterCode {
    /**
     * Unique name for the S3 bucket.
     */
    s3Bucket: pulumi.Input<string>;
    /**
     * Full S3 path (excluding bucket) to the .zip file that contains the code to be loaded onto the cluster when it’s started.
     */
    s3Key: pulumi.Input<string>;
    /**
     * Version of an S3 Object.
     */
    s3ObjectVersion?: pulumi.Input<string>;
}
export interface KxClusterDatabase {
    /**
     * Configuration details for the disk cache to increase performance reading from a KX database mounted to the cluster. See cache_configurations.
     */
    cacheConfigurations?: pulumi.Input<pulumi.Input<inputs.KxClusterDatabaseCacheConfiguration>[]>;
    /**
     * A unique identifier of the changeset that is associated with the cluster.
     */
    changesetId?: pulumi.Input<string>;
    /**
     * Name of the KX database.
     */
    databaseName: pulumi.Input<string>;
    /**
     * The name of the dataview to be used for caching historical data on disk. You cannot update to a different dataview name once a cluster is created. Use `lifecycle` `ignoreChanges` for database to prevent any undesirable behaviors.
     */
    dataviewName?: pulumi.Input<string>;
}
export interface KxClusterDatabaseCacheConfiguration {
    /**
     * Type of disk cache.
     */
    cacheType: pulumi.Input<string>;
    /**
     * Paths within the database to cache.
     */
    dbPaths?: pulumi.Input<pulumi.Input<string>[]>;
}
export interface KxClusterSavedownStorageConfiguration {
    /**
     * Size of temporary storage in gigabytes. Must be between 10 and 16000.
     */
    size?: pulumi.Input<number>;
    /**
     * Type of writeable storage space for temporarily storing your savedown data. The valid values are:
     * * SDS01 - This type represents 3000 IOPS and io2 ebs volume type.
     */
    type?: pulumi.Input<string>;
    /**
     * The name of the kdb volume that you want to use as writeable save-down storage for clusters.
     */
    volumeName?: pulumi.Input<string>;
}
export interface KxClusterScalingGroupConfiguration {
    /**
     * The number of vCPUs that you want to reserve for each node of this kdb cluster on the scaling group host.
     */
    cpu?: pulumi.Input<number>;
    /**
     * An optional hard limit on the amount of memory a kdb cluster can use.
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * A reservation of the minimum amount of memory that should be available on the scaling group for a kdb cluster to be successfully placed in a scaling group.
     */
    memoryReservation: pulumi.Input<number>;
    /**
     * The number of kdb cluster nodes.
     */
    nodeCount: pulumi.Input<number>;
    /**
     * A unique identifier for the kdb scaling group.
     */
    scalingGroupName: pulumi.Input<string>;
}
export interface KxClusterTickerplantLogConfiguration {
    tickerplantLogVolumes: pulumi.Input<pulumi.Input<string>[]>;
}
export interface KxClusterVpcConfiguration {
    /**
     * IP address type for cluster network configuration parameters. The following type is available: IP_V4 - IP address version 4.
     */
    ipAddressType: pulumi.Input<string>;
    /**
     * Unique identifier of the VPC security group applied to the VPC endpoint ENI for the cluster.
     * * `subnetIds `- (Required) Identifier of the subnet that the Privatelink VPC endpoint uses to connect to the cluster.
     */
    securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the VPC endpoint
     */
    vpcId: pulumi.Input<string>;
}
export interface KxDataviewSegmentConfiguration {
    /**
     * The database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume.
     */
    dbPaths: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enables on-demand caching on the selected database path when a particular file or a column of the database is accessed. When on demand caching is **True**, dataviews perform minimal loading of files on the filesystem as needed. When it is set to **False**, everything is cached. The default value is **False**.
     */
    onDemand?: pulumi.Input<boolean>;
    /**
     * The name of the volume that you want to attach to a dataview. This volume must be in the same availability zone as the dataview that you are attaching to.
     */
    volumeName: pulumi.Input<string>;
}
export interface KxEnvironmentCustomDnsConfiguration {
    /**
     * IP address of the DNS server.
     */
    customDnsServerIp: pulumi.Input<string>;
    /**
     * Name of the DNS server.
     */
    customDnsServerName: pulumi.Input<string>;
}
export interface KxEnvironmentTransitGatewayConfiguration {
    /**
     * Rules that define how you manage outbound traffic from kdb network to your internal network. Defined below.
     */
    attachmentNetworkAclConfigurations?: pulumi.Input<pulumi.Input<inputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration>[]>;
    /**
     * Routing CIDR on behalf of KX environment. It could be any “/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer’s transit gateway routing table so that the traffics could be routed to KX network.
     */
    routableCidrSpace: pulumi.Input<string>;
    /**
     * Identifier of the transit gateway created by the customer to connect outbound traffics from KX network to your internal network.
     */
    transitGatewayId: pulumi.Input<string>;
}
export interface KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfiguration {
    /**
     * The IPv4 network range to allow or deny, in CIDR notation. The specified CIDR block is modified to its canonical form. For example, `100.68.0.18/18` will be converted to `100.68.0.0/18`.
     */
    cidrBlock: pulumi.Input<string>;
    /**
     * Defines the ICMP protocol that consists of the ICMP type and code. Defined below.
     */
    icmpTypeCode?: pulumi.Input<inputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode>;
    /**
     * Range of ports the rule applies to. Defined below.
     */
    portRange?: pulumi.Input<inputs.KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange>;
    /**
     * Protocol number. A value of `1` means all the protocols.
     */
    protocol: pulumi.Input<string>;
    /**
     * Indicates whether to `allow` or `deny` the traffic that matches the rule.
     */
    ruleAction: pulumi.Input<string>;
    /**
     * Rule number for the entry. All the network ACL entries are processed in ascending order by rule number.
     */
    ruleNumber: pulumi.Input<number>;
}
export interface KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationIcmpTypeCode {
    /**
     * ICMP code. A value of `-1` means all codes for the specified ICMP type.
     */
    code: pulumi.Input<number>;
    /**
     * ICMP type. A value of `-1` means all types.
     */
    type: pulumi.Input<number>;
}
export interface KxEnvironmentTransitGatewayConfigurationAttachmentNetworkAclConfigurationPortRange {
    /**
     * First port in the range.
     */
    from: pulumi.Input<number>;
    /**
     * Last port in the range.
     */
    to: pulumi.Input<number>;
}
export interface KxVolumeAttachedCluster {
    clusterName: pulumi.Input<string>;
    clusterStatus: pulumi.Input<string>;
    clusterType: pulumi.Input<string>;
}
export interface KxVolumeNas1Configuration {
    /**
     * The size of the network attached storage.
     */
    size: pulumi.Input<number>;
    /**
     * The type of the network attached storage.
     */
    type: pulumi.Input<string>;
}
