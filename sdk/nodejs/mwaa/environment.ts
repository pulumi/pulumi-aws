// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Environment extends pulumi.CustomResource {
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentState, opts?: pulumi.CustomResourceOptions): Environment {
        return new Environment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:mwaa/environment:Environment';

    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Environment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }

    public readonly airflowConfigurationOptions!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly airflowVersion!: pulumi.Output<string>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly dagS3Path!: pulumi.Output<string>;
    public readonly environmentClass!: pulumi.Output<string>;
    public readonly executionRoleArn!: pulumi.Output<string>;
    public readonly kmsKey!: pulumi.Output<string | undefined>;
    public /*out*/ readonly lastUpdateds!: pulumi.Output<outputs.mwaa.EnvironmentLastUpdated[]>;
    public readonly loggingConfiguration!: pulumi.Output<outputs.mwaa.EnvironmentLoggingConfiguration>;
    public readonly maxWorkers!: pulumi.Output<number>;
    public readonly minWorkers!: pulumi.Output<number>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkConfiguration!: pulumi.Output<outputs.mwaa.EnvironmentNetworkConfiguration>;
    public readonly pluginsS3ObjectVersion!: pulumi.Output<string>;
    public readonly pluginsS3Path!: pulumi.Output<string | undefined>;
    public readonly requirementsS3ObjectVersion!: pulumi.Output<string>;
    public readonly requirementsS3Path!: pulumi.Output<string | undefined>;
    public readonly schedulers!: pulumi.Output<number>;
    public /*out*/ readonly serviceRoleArn!: pulumi.Output<string>;
    public readonly sourceBucketArn!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly webserverAccessMode!: pulumi.Output<string>;
    public /*out*/ readonly webserverUrl!: pulumi.Output<string>;
    public readonly weeklyMaintenanceWindowStart!: pulumi.Output<string>;

    /**
     * Create a Environment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentArgs | EnvironmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentState | undefined;
            resourceInputs["airflowConfigurationOptions"] = state ? state.airflowConfigurationOptions : undefined;
            resourceInputs["airflowVersion"] = state ? state.airflowVersion : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dagS3Path"] = state ? state.dagS3Path : undefined;
            resourceInputs["environmentClass"] = state ? state.environmentClass : undefined;
            resourceInputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            resourceInputs["kmsKey"] = state ? state.kmsKey : undefined;
            resourceInputs["lastUpdateds"] = state ? state.lastUpdateds : undefined;
            resourceInputs["loggingConfiguration"] = state ? state.loggingConfiguration : undefined;
            resourceInputs["maxWorkers"] = state ? state.maxWorkers : undefined;
            resourceInputs["minWorkers"] = state ? state.minWorkers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["pluginsS3ObjectVersion"] = state ? state.pluginsS3ObjectVersion : undefined;
            resourceInputs["pluginsS3Path"] = state ? state.pluginsS3Path : undefined;
            resourceInputs["requirementsS3ObjectVersion"] = state ? state.requirementsS3ObjectVersion : undefined;
            resourceInputs["requirementsS3Path"] = state ? state.requirementsS3Path : undefined;
            resourceInputs["schedulers"] = state ? state.schedulers : undefined;
            resourceInputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            resourceInputs["sourceBucketArn"] = state ? state.sourceBucketArn : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["webserverAccessMode"] = state ? state.webserverAccessMode : undefined;
            resourceInputs["webserverUrl"] = state ? state.webserverUrl : undefined;
            resourceInputs["weeklyMaintenanceWindowStart"] = state ? state.weeklyMaintenanceWindowStart : undefined;
        } else {
            const args = argsOrState as EnvironmentArgs | undefined;
            if ((!args || args.dagS3Path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dagS3Path'");
            }
            if ((!args || args.executionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if ((!args || args.sourceBucketArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceBucketArn'");
            }
            resourceInputs["airflowConfigurationOptions"] = args?.airflowConfigurationOptions ? pulumi.secret(args.airflowConfigurationOptions) : undefined;
            resourceInputs["airflowVersion"] = args ? args.airflowVersion : undefined;
            resourceInputs["dagS3Path"] = args ? args.dagS3Path : undefined;
            resourceInputs["environmentClass"] = args ? args.environmentClass : undefined;
            resourceInputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            resourceInputs["kmsKey"] = args ? args.kmsKey : undefined;
            resourceInputs["loggingConfiguration"] = args ? args.loggingConfiguration : undefined;
            resourceInputs["maxWorkers"] = args ? args.maxWorkers : undefined;
            resourceInputs["minWorkers"] = args ? args.minWorkers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["pluginsS3ObjectVersion"] = args ? args.pluginsS3ObjectVersion : undefined;
            resourceInputs["pluginsS3Path"] = args ? args.pluginsS3Path : undefined;
            resourceInputs["requirementsS3ObjectVersion"] = args ? args.requirementsS3ObjectVersion : undefined;
            resourceInputs["requirementsS3Path"] = args ? args.requirementsS3Path : undefined;
            resourceInputs["schedulers"] = args ? args.schedulers : undefined;
            resourceInputs["sourceBucketArn"] = args ? args.sourceBucketArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["webserverAccessMode"] = args ? args.webserverAccessMode : undefined;
            resourceInputs["weeklyMaintenanceWindowStart"] = args ? args.weeklyMaintenanceWindowStart : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lastUpdateds"] = undefined /*out*/;
            resourceInputs["serviceRoleArn"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["webserverUrl"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["airflowConfigurationOptions"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Environment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Environment resources.
 */
export interface EnvironmentState {
    airflowConfigurationOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    airflowVersion?: pulumi.Input<string>;
    arn?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    dagS3Path?: pulumi.Input<string>;
    environmentClass?: pulumi.Input<string>;
    executionRoleArn?: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    lastUpdateds?: pulumi.Input<pulumi.Input<inputs.mwaa.EnvironmentLastUpdated>[]>;
    loggingConfiguration?: pulumi.Input<inputs.mwaa.EnvironmentLoggingConfiguration>;
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkConfiguration?: pulumi.Input<inputs.mwaa.EnvironmentNetworkConfiguration>;
    pluginsS3ObjectVersion?: pulumi.Input<string>;
    pluginsS3Path?: pulumi.Input<string>;
    requirementsS3ObjectVersion?: pulumi.Input<string>;
    requirementsS3Path?: pulumi.Input<string>;
    schedulers?: pulumi.Input<number>;
    serviceRoleArn?: pulumi.Input<string>;
    sourceBucketArn?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    webserverAccessMode?: pulumi.Input<string>;
    webserverUrl?: pulumi.Input<string>;
    weeklyMaintenanceWindowStart?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Environment resource.
 */
export interface EnvironmentArgs {
    airflowConfigurationOptions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    airflowVersion?: pulumi.Input<string>;
    dagS3Path: pulumi.Input<string>;
    environmentClass?: pulumi.Input<string>;
    executionRoleArn: pulumi.Input<string>;
    kmsKey?: pulumi.Input<string>;
    loggingConfiguration?: pulumi.Input<inputs.mwaa.EnvironmentLoggingConfiguration>;
    maxWorkers?: pulumi.Input<number>;
    minWorkers?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    networkConfiguration: pulumi.Input<inputs.mwaa.EnvironmentNetworkConfiguration>;
    pluginsS3ObjectVersion?: pulumi.Input<string>;
    pluginsS3Path?: pulumi.Input<string>;
    requirementsS3ObjectVersion?: pulumi.Input<string>;
    requirementsS3Path?: pulumi.Input<string>;
    schedulers?: pulumi.Input<number>;
    sourceBucketArn: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    webserverAccessMode?: pulumi.Input<string>;
    weeklyMaintenanceWindowStart?: pulumi.Input<string>;
}
