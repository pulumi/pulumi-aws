// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an FIS Experiment Template, which can be used to run an experiment.
 * An experiment template contains one or more actions to run on specified targets during an experiment.
 * It also contains the stop conditions that prevent the experiment from going out of bounds.
 * See [Amazon Fault Injection Simulator](https://docs.aws.amazon.com/fis/index.html)
 * for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.fis.ExperimentTemplate("example", {
 *     description: "example",
 *     roleArn: aws_iam_role.example.arn,
 *     stopConditions: [{
 *         source: "none",
 *     }],
 *     actions: [{
 *         name: "example-action",
 *         actionId: "aws:ec2:terminate-instances",
 *         target: {
 *             key: "Instances",
 *             value: "example-target",
 *         },
 *     }],
 *     targets: [{
 *         name: "example-target",
 *         resourceType: "aws:ec2:instance",
 *         selectionMode: "COUNT(1)",
 *         resourceTags: [{
 *             key: "env",
 *             value: "example",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import FIS Experiment Templates using the `id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:fis/experimentTemplate:ExperimentTemplate template EXT123AbCdEfGhIjK
 * ```
 */
export class ExperimentTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ExperimentTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ExperimentTemplateState, opts?: pulumi.CustomResourceOptions): ExperimentTemplate {
        return new ExperimentTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:fis/experimentTemplate:ExperimentTemplate';

    /**
     * Returns true if the given object is an instance of ExperimentTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ExperimentTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ExperimentTemplate.__pulumiType;
    }

    /**
     * Action to be performed during an experiment. See below.
     */
    public readonly actions!: pulumi.Output<outputs.fis.ExperimentTemplateAction[]>;
    /**
     * Description for the experiment template.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The configuration for experiment logging. See below.
     */
    public readonly logConfiguration!: pulumi.Output<outputs.fis.ExperimentTemplateLogConfiguration | undefined>;
    /**
     * ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
     */
    public readonly roleArn!: pulumi.Output<string>;
    /**
     * When an ongoing experiment should be stopped. See below.
     *
     * The following arguments are optional:
     */
    public readonly stopConditions!: pulumi.Output<outputs.fis.ExperimentTemplateStopCondition[]>;
    /**
     * Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Target of an action. See below.
     */
    public readonly targets!: pulumi.Output<outputs.fis.ExperimentTemplateTarget[] | undefined>;

    /**
     * Create a ExperimentTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ExperimentTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ExperimentTemplateArgs | ExperimentTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ExperimentTemplateState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["logConfiguration"] = state ? state.logConfiguration : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
            resourceInputs["stopConditions"] = state ? state.stopConditions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["targets"] = state ? state.targets : undefined;
        } else {
            const args = argsOrState as ExperimentTemplateArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.stopConditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stopConditions'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["logConfiguration"] = args ? args.logConfiguration : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
            resourceInputs["stopConditions"] = args ? args.stopConditions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targets"] = args ? args.targets : undefined;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ExperimentTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ExperimentTemplate resources.
 */
export interface ExperimentTemplateState {
    /**
     * Action to be performed during an experiment. See below.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.fis.ExperimentTemplateAction>[]>;
    /**
     * Description for the experiment template.
     */
    description?: pulumi.Input<string>;
    /**
     * The configuration for experiment logging. See below.
     */
    logConfiguration?: pulumi.Input<inputs.fis.ExperimentTemplateLogConfiguration>;
    /**
     * ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
     */
    roleArn?: pulumi.Input<string>;
    /**
     * When an ongoing experiment should be stopped. See below.
     *
     * The following arguments are optional:
     */
    stopConditions?: pulumi.Input<pulumi.Input<inputs.fis.ExperimentTemplateStopCondition>[]>;
    /**
     * Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Target of an action. See below.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.fis.ExperimentTemplateTarget>[]>;
}

/**
 * The set of arguments for constructing a ExperimentTemplate resource.
 */
export interface ExperimentTemplateArgs {
    /**
     * Action to be performed during an experiment. See below.
     */
    actions: pulumi.Input<pulumi.Input<inputs.fis.ExperimentTemplateAction>[]>;
    /**
     * Description for the experiment template.
     */
    description: pulumi.Input<string>;
    /**
     * The configuration for experiment logging. See below.
     */
    logConfiguration?: pulumi.Input<inputs.fis.ExperimentTemplateLogConfiguration>;
    /**
     * ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
     */
    roleArn: pulumi.Input<string>;
    /**
     * When an ongoing experiment should be stopped. See below.
     *
     * The following arguments are optional:
     */
    stopConditions: pulumi.Input<pulumi.Input<inputs.fis.ExperimentTemplateStopCondition>[]>;
    /**
     * Key-value mapping of tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Target of an action. See below.
     */
    targets?: pulumi.Input<pulumi.Input<inputs.fis.ExperimentTemplateTarget>[]>;
}
