// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const _default = new aws.elasticache.User("default", {
 *     userId: "defaultUserID",
 *     userName: "default",
 *     accessString: "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
 *     engine: "REDIS",
 *     passwords: ["password123456789"],
 * });
 * const exampleUserGroup = new aws.elasticache.UserGroup("exampleUserGroup", {
 *     engine: "REDIS",
 *     userGroupId: "userGroupId",
 *     userIds: [_default.userId],
 * });
 * const exampleUser = new aws.elasticache.User("exampleUser", {
 *     userId: "exampleUserID",
 *     userName: "exampleuser",
 *     accessString: "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
 *     engine: "REDIS",
 *     passwords: ["password123456789"],
 * });
 * const exampleUserGroupAssociation = new aws.elasticache.UserGroupAssociation("exampleUserGroupAssociation", {
 *     userGroupId: exampleUserGroup.userGroupId,
 *     userId: exampleUser.userId,
 * });
 * ```
 *
 * ## Import
 *
 * ElastiCache user group associations can be imported using the `user_group_id` and `user_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticache/userGroupAssociation:UserGroupAssociation example userGoupId1,userId
 * ```
 */
export class UserGroupAssociation extends pulumi.CustomResource {
    /**
     * Get an existing UserGroupAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserGroupAssociationState, opts?: pulumi.CustomResourceOptions): UserGroupAssociation {
        return new UserGroupAssociation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/userGroupAssociation:UserGroupAssociation';

    /**
     * Returns true if the given object is an instance of UserGroupAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserGroupAssociation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserGroupAssociation.__pulumiType;
    }

    /**
     * ID of the user group.
     */
    public readonly userGroupId!: pulumi.Output<string>;
    /**
     * ID of the user to associated with the user group.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a UserGroupAssociation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserGroupAssociationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserGroupAssociationArgs | UserGroupAssociationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserGroupAssociationState | undefined;
            resourceInputs["userGroupId"] = state ? state.userGroupId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as UserGroupAssociationArgs | undefined;
            if ((!args || args.userGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userGroupId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["userGroupId"] = args ? args.userGroupId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserGroupAssociation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserGroupAssociation resources.
 */
export interface UserGroupAssociationState {
    /**
     * ID of the user group.
     */
    userGroupId?: pulumi.Input<string>;
    /**
     * ID of the user to associated with the user group.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserGroupAssociation resource.
 */
export interface UserGroupAssociationArgs {
    /**
     * ID of the user group.
     */
    userGroupId: pulumi.Input<string>;
    /**
     * ID of the user to associated with the user group.
     */
    userId: pulumi.Input<string>;
}
