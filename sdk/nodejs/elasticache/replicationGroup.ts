// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

/**
 * Provides an ElastiCache Replication Group resource.
 *
 * For working with a [Memcached cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/WhatIs.html) or a
 * [single-node Redis instance (Cluster Mode Disabled)](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.html),
 * see the `aws.elasticache.Cluster` resource.
 *
 * > **Note:** When you change an attribute, such as `engineVersion`, by
 * default the ElastiCache API applies it in the next maintenance window. Because
 * of this, this provider may report a difference in its planning phase because the
 * actual modification has not yet taken place. You can use the
 * `applyImmediately` flag to instruct the service to apply the change
 * immediately. Using `applyImmediately` can result in a brief downtime as
 * servers reboots.
 * See the AWS Documentation on
 * [Modifying an ElastiCache Cache Cluster](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Modify.html)
 * for more information.
 *
 * > **Note:** Any attribute changes that re-create the resource will be applied immediately, regardless of the value of `applyImmediately`.
 *
 * > **Note:** Be aware of the terminology collision around "cluster" for `aws.elasticache.ReplicationGroup`. For example, it is possible to create a ["Cluster Mode Disabled [Redis] Cluster"](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Clusters.Create.CON.Redis.html). With "Cluster Mode Enabled", the data will be stored in shards (called "node groups"). See [Redis Cluster Configuration](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/cluster-create-determine-requirements.html#redis-cluster-configuration) for a diagram of the differences. To enable cluster mode, use a parameter group that has cluster mode enabled. The default parameter groups provided by AWS end with ".cluster.on", for example `default.redis6.x.cluster.on`.
 *
 * ## Example Usage
 * ### Redis Cluster Mode Disabled
 *
 * To create a single shard primary with single read replica:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.elasticache.ReplicationGroup("example", {
 *     automaticFailoverEnabled: true,
 *     availabilityZones: [
 *         "us-west-2a",
 *         "us-west-2b",
 *     ],
 *     nodeType: "cache.m4.large",
 *     numberCacheClusters: 2,
 *     parameterGroupName: "default.redis3.2",
 *     port: 6379,
 *     replicationGroupDescription: "test description",
 * });
 * ```
 *
 * You have two options for adjusting the number of replicas:
 *
 * * Adjusting `numberCacheClusters` directly. This will attempt to automatically add or remove replicas, but provides no granular control (e.g. preferred availability zone, cache cluster ID) for the added or removed replicas. This also currently expects cache cluster IDs in the form of `replication_group_id-00#`.
 * * Otherwise for fine grained control of the underlying cache clusters, they can be added or removed with the `aws.elasticache.Cluster` resource and its `replicationGroupId` attribute. In this situation, you will need to utilize [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to prevent perpetual differences with the `numberCacheCluster` attribute.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.elasticache.ReplicationGroup("example", {
 *     automaticFailoverEnabled: true,
 *     availabilityZones: [
 *         "us-west-2a",
 *         "us-west-2b",
 *     ],
 *     replicationGroupDescription: "test description",
 *     nodeType: "cache.m4.large",
 *     numberCacheClusters: 2,
 *     parameterGroupName: "default.redis3.2",
 *     port: 6379,
 * });
 * let replica: aws.elasticache.Cluster | undefined;
 * if (1 == true) {
 *     replica = new aws.elasticache.Cluster("replica", {replicationGroupId: example.id});
 * }
 * ```
 * ### Redis Cluster Mode Enabled
 *
 * To create two shards with a primary and a single read replica each:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const baz = new aws.elasticache.ReplicationGroup("baz", {
 *     automaticFailoverEnabled: true,
 *     clusterMode: {
 *         numNodeGroups: 2,
 *         replicasPerNodeGroup: 1,
 *     },
 *     nodeType: "cache.t2.small",
 *     parameterGroupName: "default.redis3.2.cluster.on",
 *     port: 6379,
 *     replicationGroupDescription: "test description",
 * });
 * ```
 *
 * > **Note:** We currently do not support passing a `primaryClusterId` in order to create the Replication Group.
 *
 * > **Note:** Automatic Failover is unavailable for Redis versions earlier than 2.8.6,
 * and unavailable on T1 node types. For T2 node types, it is only available on Redis version 3.2.4 or later with cluster mode enabled. See the [High Availability Using Replication Groups](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Replication.html) guide
 * for full details on using Replication Groups.
 * ### Creating a secondary replication group for a global replication group
 *
 * A Global Replication Group can have one one two secondary Replication Groups in different regions. These are added to an existing Global Replication Group.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.elasticache.ReplicationGroup("primary", {
 *     replicationGroupDescription: "primary replication group",
 *     engine: "redis",
 *     engineVersion: "5.0.6",
 *     nodeType: "cache.m5.large",
 *     numberCacheClusters: 1,
 * }, {
 *     provider: aws.other_region,
 * });
 * const example = new aws.elasticache.GlobalReplicationGroup("example", {
 *     globalReplicationGroupIdSuffix: "example",
 *     primaryReplicationGroupId: primary.id,
 * }, {
 *     provider: aws.other_region,
 * });
 * const secondary = new aws.elasticache.ReplicationGroup("secondary", {
 *     replicationGroupDescription: "secondary replication group",
 *     globalReplicationGroupId: example.globalReplicationGroupId,
 *     numberCacheClusters: 1,
 * });
 * ```
 *
 * ## Import
 *
 * ElastiCache Replication Groups can be imported using the `replication_group_id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:elasticache/replicationGroup:ReplicationGroup my_replication_group replication-group-1
 * ```
 */
export class ReplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReplicationGroupState, opts?: pulumi.CustomResourceOptions): ReplicationGroup {
        return new ReplicationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/replicationGroup:ReplicationGroup';

    /**
     * Returns true if the given object is an instance of ReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReplicationGroup.__pulumiType;
    }

    /**
     * Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
     */
    public readonly applyImmediately!: pulumi.Output<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the created ElastiCache Replication Group.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Whether to enable encryption at rest.
     */
    public readonly atRestEncryptionEnabled!: pulumi.Output<boolean>;
    /**
     * The password used to access a password protected server. Can be specified only if `transitEncryptionEnabled = true`.
     */
    public readonly authToken!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. This parameter is currently not supported by the AWS API. Defaults to `true`.
     */
    public readonly autoMinorVersionUpgrade!: pulumi.Output<boolean | undefined>;
    /**
     * Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If enabled, `numberCacheClusters` must be greater than 1. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
     */
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important.
     */
    public readonly availabilityZones!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates if cluster mode is enabled.
     */
    public /*out*/ readonly clusterEnabled!: pulumi.Output<boolean>;
    /**
     * Create a native Redis cluster. `automaticFailoverEnabled` must be set to true. Cluster Mode documented below. Only 1 `clusterMode` block is allowed. One of `numberCacheClusters` or `clusterMode` is required. Note that configuring this block does not enable cluster mode, i.e. data sharding, this requires using a parameter group that has the parameter `cluster-enabled` set to true.
     */
    public readonly clusterMode!: pulumi.Output<outputs.elasticache.ReplicationGroupClusterMode>;
    /**
     * The address of the replication group configuration endpoint when cluster mode is enabled.
     */
    public /*out*/ readonly configurationEndpointAddress!: pulumi.Output<string>;
    /**
     * The name of the cache engine to be used for the clusters in this replication group. The only valid value is `redis`.
     */
    public readonly engine!: pulumi.Output<string | undefined>;
    /**
     * The version number of the cache engine to be used for the cache clusters in this replication group. If the version is 6 or higher, only the major version can be set, e.g. `6.x`, otherwise, specify the full version desired, e.g. `5.0.6`. The actual engine version used is returned in the attribute `engineVersionActual`, defined below.
     */
    public readonly engineVersion!: pulumi.Output<string>;
    /**
     * The running version of the cache engine.
     */
    public /*out*/ readonly engineVersionActual!: pulumi.Output<string>;
    /**
     * The name of your final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster. If omitted, no final snapshot will be made.
     */
    public readonly finalSnapshotIdentifier!: pulumi.Output<string | undefined>;
    /**
     * The ID of the global replication group to which this replication group should belong. If this parameter is specified, the replication group is added to the specified global replication group as a secondary replication group; otherwise, the replication group is not part of any global replication group.
     */
    public readonly globalReplicationGroupId!: pulumi.Output<string>;
    /**
     * The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `atRestEncryptionEnabled = true`.
     */
    public readonly kmsKeyId!: pulumi.Output<string | undefined>;
    /**
     * Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
     */
    public readonly maintenanceWindow!: pulumi.Output<string>;
    /**
     * The identifiers of all the nodes that are part of this replication group.
     */
    public /*out*/ readonly memberClusters!: pulumi.Output<string[]>;
    /**
     * Specifies whether to enable Multi-AZ Support for the replication group. If `true`, `automaticFailoverEnabled` must also be enabled. Defaults to `false`.
     */
    public readonly multiAzEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The instance class to be used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html). Required unless `globalReplicationGroupId` is set. Cannot be set if `globalReplicationGroupId` is set.
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     */
    public readonly notificationTopicArn!: pulumi.Output<string | undefined>;
    /**
     * The number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications. One of `numberCacheClusters` or `clusterMode` is required.
     */
    public readonly numberCacheClusters!: pulumi.Output<number>;
    /**
     * The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. To enable "cluster mode", i.e. data sharding, use a parameter group that has the parameter `cluster-enabled` set to true.
     */
    public readonly parameterGroupName!: pulumi.Output<string>;
    /**
     * The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * (Redis only) The address of the endpoint for the primary node in the replication group, if the cluster mode is disabled.
     */
    public /*out*/ readonly primaryEndpointAddress!: pulumi.Output<string>;
    /**
     * (Redis only) The address of the endpoint for the reader node in the replication group, if the cluster mode is disabled.
     */
    public /*out*/ readonly readerEndpointAddress!: pulumi.Output<string>;
    /**
     * A user-created description for the replication group.
     */
    public readonly replicationGroupDescription!: pulumi.Output<string>;
    /**
     * The replication group identifier. This parameter is stored as a lowercase string.
     */
    public readonly replicationGroupId!: pulumi.Output<string>;
    /**
     * One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud
     */
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * A list of cache security group names to associate with this replication group.
     */
    public readonly securityGroupNames!: pulumi.Output<string[]>;
    /**
     * A list of Amazon Resource Names (ARNs) that identify Redis RDB snapshot files stored in Amazon S3. The names object names cannot contain any commas.
     */
    public readonly snapshotArns!: pulumi.Output<string[] | undefined>;
    /**
     * The name of a snapshot from which to restore data into the new node group. Changing the `snapshotName` forces a new resource.
     */
    public readonly snapshotName!: pulumi.Output<string | undefined>;
    /**
     * The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a `snapshotRetentionLimit` is not supported on cache.t1.micro cache nodes
     */
    public readonly snapshotRetentionLimit!: pulumi.Output<number | undefined>;
    /**
     * The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
     */
    public readonly snapshotWindow!: pulumi.Output<string>;
    /**
     * The name of the cache subnet group to be used for the replication group.
     */
    public readonly subnetGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * Whether to enable encryption in transit.
     */
    public readonly transitEncryptionEnabled!: pulumi.Output<boolean>;

    /**
     * Create a ReplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReplicationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReplicationGroupArgs | ReplicationGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReplicationGroupState | undefined;
            inputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            inputs["authToken"] = state ? state.authToken : undefined;
            inputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            inputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            inputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            inputs["clusterEnabled"] = state ? state.clusterEnabled : undefined;
            inputs["clusterMode"] = state ? state.clusterMode : undefined;
            inputs["configurationEndpointAddress"] = state ? state.configurationEndpointAddress : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            inputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            inputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            inputs["memberClusters"] = state ? state.memberClusters : undefined;
            inputs["multiAzEnabled"] = state ? state.multiAzEnabled : undefined;
            inputs["nodeType"] = state ? state.nodeType : undefined;
            inputs["notificationTopicArn"] = state ? state.notificationTopicArn : undefined;
            inputs["numberCacheClusters"] = state ? state.numberCacheClusters : undefined;
            inputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["primaryEndpointAddress"] = state ? state.primaryEndpointAddress : undefined;
            inputs["readerEndpointAddress"] = state ? state.readerEndpointAddress : undefined;
            inputs["replicationGroupDescription"] = state ? state.replicationGroupDescription : undefined;
            inputs["replicationGroupId"] = state ? state.replicationGroupId : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            inputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            inputs["snapshotName"] = state ? state.snapshotName : undefined;
            inputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            inputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            inputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
        } else {
            const args = argsOrState as ReplicationGroupArgs | undefined;
            if ((!args || args.replicationGroupDescription === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationGroupDescription'");
            }
            inputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            inputs["atRestEncryptionEnabled"] = args ? args.atRestEncryptionEnabled : undefined;
            inputs["authToken"] = args ? args.authToken : undefined;
            inputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            inputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            inputs["availabilityZones"] = args ? args.availabilityZones : undefined;
            inputs["clusterMode"] = args ? args.clusterMode : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            inputs["globalReplicationGroupId"] = args ? args.globalReplicationGroupId : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            inputs["multiAzEnabled"] = args ? args.multiAzEnabled : undefined;
            inputs["nodeType"] = args ? args.nodeType : undefined;
            inputs["notificationTopicArn"] = args ? args.notificationTopicArn : undefined;
            inputs["numberCacheClusters"] = args ? args.numberCacheClusters : undefined;
            inputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["replicationGroupDescription"] = args ? args.replicationGroupDescription : undefined;
            inputs["replicationGroupId"] = args ? args.replicationGroupId : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            inputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            inputs["snapshotName"] = args ? args.snapshotName : undefined;
            inputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            inputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            inputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tagsAll"] = args ? args.tagsAll : undefined;
            inputs["transitEncryptionEnabled"] = args ? args.transitEncryptionEnabled : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["clusterEnabled"] = undefined /*out*/;
            inputs["configurationEndpointAddress"] = undefined /*out*/;
            inputs["engineVersionActual"] = undefined /*out*/;
            inputs["memberClusters"] = undefined /*out*/;
            inputs["primaryEndpointAddress"] = undefined /*out*/;
            inputs["readerEndpointAddress"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ReplicationGroup.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReplicationGroup resources.
 */
export interface ReplicationGroupState {
    /**
     * Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
     */
    applyImmediately?: pulumi.Input<boolean>;
    /**
     * The Amazon Resource Name (ARN) of the created ElastiCache Replication Group.
     */
    arn?: pulumi.Input<string>;
    /**
     * Whether to enable encryption at rest.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The password used to access a password protected server. Can be specified only if `transitEncryptionEnabled = true`.
     */
    authToken?: pulumi.Input<string>;
    /**
     * Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. This parameter is currently not supported by the AWS API. Defaults to `true`.
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If enabled, `numberCacheClusters` must be greater than 1. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if cluster mode is enabled.
     */
    clusterEnabled?: pulumi.Input<boolean>;
    /**
     * Create a native Redis cluster. `automaticFailoverEnabled` must be set to true. Cluster Mode documented below. Only 1 `clusterMode` block is allowed. One of `numberCacheClusters` or `clusterMode` is required. Note that configuring this block does not enable cluster mode, i.e. data sharding, this requires using a parameter group that has the parameter `cluster-enabled` set to true.
     */
    clusterMode?: pulumi.Input<inputs.elasticache.ReplicationGroupClusterMode>;
    /**
     * The address of the replication group configuration endpoint when cluster mode is enabled.
     */
    configurationEndpointAddress?: pulumi.Input<string>;
    /**
     * The name of the cache engine to be used for the clusters in this replication group. The only valid value is `redis`.
     */
    engine?: pulumi.Input<string>;
    /**
     * The version number of the cache engine to be used for the cache clusters in this replication group. If the version is 6 or higher, only the major version can be set, e.g. `6.x`, otherwise, specify the full version desired, e.g. `5.0.6`. The actual engine version used is returned in the attribute `engineVersionActual`, defined below.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The running version of the cache engine.
     */
    engineVersionActual?: pulumi.Input<string>;
    /**
     * The name of your final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster. If omitted, no final snapshot will be made.
     */
    finalSnapshotIdentifier?: pulumi.Input<string>;
    /**
     * The ID of the global replication group to which this replication group should belong. If this parameter is specified, the replication group is added to the specified global replication group as a secondary replication group; otherwise, the replication group is not part of any global replication group.
     */
    globalReplicationGroupId?: pulumi.Input<string>;
    /**
     * The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `atRestEncryptionEnabled = true`.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
     */
    maintenanceWindow?: pulumi.Input<string>;
    /**
     * The identifiers of all the nodes that are part of this replication group.
     */
    memberClusters?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to enable Multi-AZ Support for the replication group. If `true`, `automaticFailoverEnabled` must also be enabled. Defaults to `false`.
     */
    multiAzEnabled?: pulumi.Input<boolean>;
    /**
     * The instance class to be used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html). Required unless `globalReplicationGroupId` is set. Cannot be set if `globalReplicationGroupId` is set.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     */
    notificationTopicArn?: pulumi.Input<string>;
    /**
     * The number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications. One of `numberCacheClusters` or `clusterMode` is required.
     */
    numberCacheClusters?: pulumi.Input<number>;
    /**
     * The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. To enable "cluster mode", i.e. data sharding, use a parameter group that has the parameter `cluster-enabled` set to true.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
     */
    port?: pulumi.Input<number>;
    /**
     * (Redis only) The address of the endpoint for the primary node in the replication group, if the cluster mode is disabled.
     */
    primaryEndpointAddress?: pulumi.Input<string>;
    /**
     * (Redis only) The address of the endpoint for the reader node in the replication group, if the cluster mode is disabled.
     */
    readerEndpointAddress?: pulumi.Input<string>;
    /**
     * A user-created description for the replication group.
     */
    replicationGroupDescription?: pulumi.Input<string>;
    /**
     * The replication group identifier. This parameter is stored as a lowercase string.
     */
    replicationGroupId?: pulumi.Input<string>;
    /**
     * One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of cache security group names to associate with this replication group.
     */
    securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Amazon Resource Names (ARNs) that identify Redis RDB snapshot files stored in Amazon S3. The names object names cannot contain any commas.
     */
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of a snapshot from which to restore data into the new node group. Changing the `snapshotName` forces a new resource.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a `snapshotRetentionLimit` is not supported on cache.t1.micro cache nodes
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
     */
    snapshotWindow?: pulumi.Input<string>;
    /**
     * The name of the cache subnet group to be used for the replication group.
     */
    subnetGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to enable encryption in transit.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ReplicationGroup resource.
 */
export interface ReplicationGroupArgs {
    /**
     * Specifies whether any modifications are applied immediately, or during the next maintenance window. Default is `false`.
     */
    applyImmediately?: pulumi.Input<boolean>;
    /**
     * Whether to enable encryption at rest.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * The password used to access a password protected server. Can be specified only if `transitEncryptionEnabled = true`.
     */
    authToken?: pulumi.Input<string>;
    /**
     * Specifies whether a minor engine upgrades will be applied automatically to the underlying Cache Cluster instances during the maintenance window. This parameter is currently not supported by the AWS API. Defaults to `true`.
     */
    autoMinorVersionUpgrade?: pulumi.Input<boolean>;
    /**
     * Specifies whether a read-only replica will be automatically promoted to read/write primary if the existing primary fails. If enabled, `numberCacheClusters` must be greater than 1. Must be enabled for Redis (cluster mode enabled) replication groups. Defaults to `false`.
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * A list of EC2 availability zones in which the replication group's cache clusters will be created. The order of the availability zones in the list is not important.
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Create a native Redis cluster. `automaticFailoverEnabled` must be set to true. Cluster Mode documented below. Only 1 `clusterMode` block is allowed. One of `numberCacheClusters` or `clusterMode` is required. Note that configuring this block does not enable cluster mode, i.e. data sharding, this requires using a parameter group that has the parameter `cluster-enabled` set to true.
     */
    clusterMode?: pulumi.Input<inputs.elasticache.ReplicationGroupClusterMode>;
    /**
     * The name of the cache engine to be used for the clusters in this replication group. The only valid value is `redis`.
     */
    engine?: pulumi.Input<string>;
    /**
     * The version number of the cache engine to be used for the cache clusters in this replication group. If the version is 6 or higher, only the major version can be set, e.g. `6.x`, otherwise, specify the full version desired, e.g. `5.0.6`. The actual engine version used is returned in the attribute `engineVersionActual`, defined below.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The name of your final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster. If omitted, no final snapshot will be made.
     */
    finalSnapshotIdentifier?: pulumi.Input<string>;
    /**
     * The ID of the global replication group to which this replication group should belong. If this parameter is specified, the replication group is added to the specified global replication group as a secondary replication group; otherwise, the replication group is not part of any global replication group.
     */
    globalReplicationGroupId?: pulumi.Input<string>;
    /**
     * The ARN of the key that you wish to use if encrypting at rest. If not supplied, uses service managed encryption. Can be specified only if `atRestEncryptionEnabled = true`.
     */
    kmsKeyId?: pulumi.Input<string>;
    /**
     * Specifies the weekly time range for when maintenance on the cache cluster is performed. The format is `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). The minimum maintenance window is a 60 minute period. Example: `sun:05:00-sun:09:00`
     */
    maintenanceWindow?: pulumi.Input<string>;
    /**
     * Specifies whether to enable Multi-AZ Support for the replication group. If `true`, `automaticFailoverEnabled` must also be enabled. Defaults to `false`.
     */
    multiAzEnabled?: pulumi.Input<boolean>;
    /**
     * The instance class to be used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html). Required unless `globalReplicationGroupId` is set. Cannot be set if `globalReplicationGroupId` is set.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * An Amazon Resource Name (ARN) of an SNS topic to send ElastiCache notifications to. Example: `arn:aws:sns:us-east-1:012345678999:my_sns_topic`
     */
    notificationTopicArn?: pulumi.Input<string>;
    /**
     * The number of cache clusters (primary and replicas) this replication group will have. If Multi-AZ is enabled, the value of this parameter must be at least 2. Updates will occur before other modifications. One of `numberCacheClusters` or `clusterMode` is required.
     */
    numberCacheClusters?: pulumi.Input<number>;
    /**
     * The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. To enable "cluster mode", i.e. data sharding, use a parameter group that has the parameter `cluster-enabled` set to true.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The port number on which each of the cache nodes will accept connections. For Memcache the default is 11211, and for Redis the default port is 6379.
     */
    port?: pulumi.Input<number>;
    /**
     * A user-created description for the replication group.
     */
    replicationGroupDescription: pulumi.Input<string>;
    /**
     * The replication group identifier. This parameter is stored as a lowercase string.
     */
    replicationGroupId?: pulumi.Input<string>;
    /**
     * One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of cache security group names to associate with this replication group.
     */
    securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Amazon Resource Names (ARNs) that identify Redis RDB snapshot files stored in Amazon S3. The names object names cannot contain any commas.
     */
    snapshotArns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of a snapshot from which to restore data into the new node group. Changing the `snapshotName` forces a new resource.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * The number of days for which ElastiCache will retain automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, then a snapshot that was taken today will be retained for 5 days before being deleted. If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. Please note that setting a `snapshotRetentionLimit` is not supported on cache.t1.micro cache nodes
     */
    snapshotRetentionLimit?: pulumi.Input<number>;
    /**
     * The daily time range (in UTC) during which ElastiCache will begin taking a daily snapshot of your cache cluster. The minimum snapshot window is a 60 minute period. Example: `05:00-09:00`
     */
    snapshotWindow?: pulumi.Input<string>;
    /**
     * The name of the cache subnet group to be used for the replication group.
     */
    subnetGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Whether to enable encryption in transit.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
}
