// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages an ElastiCache Reserved Cache Node.
 *
 * > **NOTE:** Once created, a reservation is valid for the `duration` of the provided `offeringId` and cannot be deleted. Performing a `destroy` will only remove the resource from state. For more information see [ElastiCache Reserved Nodes Documentation](https://aws.amazon.com/elasticache/reserved-cache-nodes/) and [PurchaseReservedCacheNodesOffering](https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_PurchaseReservedCacheNodesOffering.html).
 *
 * > **NOTE:** Due to the expense of testing this resource, we provide it as best effort. If you find it useful, and have the ability to help test or notice issues, consider reaching out to us on GitHub.
 *
 * ## Import
 *
 * Using `pulumi import`, import ElastiCache Reserved Cache Node using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:elasticache/reservedCacheNode:ReservedCacheNode example CustomReservationID
 * ```
 */
export class ReservedCacheNode extends pulumi.CustomResource {
    /**
     * Get an existing ReservedCacheNode resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ReservedCacheNodeState, opts?: pulumi.CustomResourceOptions): ReservedCacheNode {
        return new ReservedCacheNode(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/reservedCacheNode:ReservedCacheNode';

    /**
     * Returns true if the given object is an instance of ReservedCacheNode.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ReservedCacheNode {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReservedCacheNode.__pulumiType;
    }

    /**
     * ARN for the reserved cache node.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     */
    public readonly cacheNodeCount!: pulumi.Output<number>;
    /**
     * Node type for the reserved cache nodes.
     */
    public /*out*/ readonly cacheNodeType!: pulumi.Output<string>;
    /**
     * Duration of the reservation as an RFC3339 duration.
     */
    public /*out*/ readonly duration!: pulumi.Output<string>;
    /**
     * Fixed price charged for this reserved cache node.
     */
    public /*out*/ readonly fixedPrice!: pulumi.Output<number>;
    /**
     * Offering type of this reserved cache node.
     */
    public /*out*/ readonly offeringType!: pulumi.Output<string>;
    /**
     * Engine type for the reserved cache node.
     */
    public /*out*/ readonly productDescription!: pulumi.Output<string>;
    /**
     * Recurring price charged to run this reserved cache node.
     */
    public /*out*/ readonly recurringCharges!: pulumi.Output<outputs.elasticache.ReservedCacheNodeRecurringCharge[]>;
    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reservedCacheNodesOfferingId`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     *
     * The following arguments are optional:
     */
    public readonly reservedCacheNodesOfferingId!: pulumi.Output<string>;
    /**
     * Time the reservation started.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * State of the reserved cache node.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    public readonly timeouts!: pulumi.Output<outputs.elasticache.ReservedCacheNodeTimeouts | undefined>;
    /**
     * Hourly price charged for this reserved cache node.
     */
    public /*out*/ readonly usagePrice!: pulumi.Output<number>;

    /**
     * Create a ReservedCacheNode resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ReservedCacheNodeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ReservedCacheNodeArgs | ReservedCacheNodeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ReservedCacheNodeState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["cacheNodeCount"] = state ? state.cacheNodeCount : undefined;
            resourceInputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            resourceInputs["duration"] = state ? state.duration : undefined;
            resourceInputs["fixedPrice"] = state ? state.fixedPrice : undefined;
            resourceInputs["offeringType"] = state ? state.offeringType : undefined;
            resourceInputs["productDescription"] = state ? state.productDescription : undefined;
            resourceInputs["recurringCharges"] = state ? state.recurringCharges : undefined;
            resourceInputs["reservedCacheNodesOfferingId"] = state ? state.reservedCacheNodesOfferingId : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
            resourceInputs["usagePrice"] = state ? state.usagePrice : undefined;
        } else {
            const args = argsOrState as ReservedCacheNodeArgs | undefined;
            if ((!args || args.reservedCacheNodesOfferingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reservedCacheNodesOfferingId'");
            }
            resourceInputs["cacheNodeCount"] = args ? args.cacheNodeCount : undefined;
            resourceInputs["reservedCacheNodesOfferingId"] = args ? args.reservedCacheNodesOfferingId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cacheNodeType"] = undefined /*out*/;
            resourceInputs["duration"] = undefined /*out*/;
            resourceInputs["fixedPrice"] = undefined /*out*/;
            resourceInputs["offeringType"] = undefined /*out*/;
            resourceInputs["productDescription"] = undefined /*out*/;
            resourceInputs["recurringCharges"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
            resourceInputs["usagePrice"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReservedCacheNode.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ReservedCacheNode resources.
 */
export interface ReservedCacheNodeState {
    /**
     * ARN for the reserved cache node.
     */
    arn?: pulumi.Input<string>;
    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     */
    cacheNodeCount?: pulumi.Input<number>;
    /**
     * Node type for the reserved cache nodes.
     */
    cacheNodeType?: pulumi.Input<string>;
    /**
     * Duration of the reservation as an RFC3339 duration.
     */
    duration?: pulumi.Input<string>;
    /**
     * Fixed price charged for this reserved cache node.
     */
    fixedPrice?: pulumi.Input<number>;
    /**
     * Offering type of this reserved cache node.
     */
    offeringType?: pulumi.Input<string>;
    /**
     * Engine type for the reserved cache node.
     */
    productDescription?: pulumi.Input<string>;
    /**
     * Recurring price charged to run this reserved cache node.
     */
    recurringCharges?: pulumi.Input<pulumi.Input<inputs.elasticache.ReservedCacheNodeRecurringCharge>[]>;
    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reservedCacheNodesOfferingId`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     *
     * The following arguments are optional:
     */
    reservedCacheNodesOfferingId?: pulumi.Input<string>;
    /**
     * Time the reservation started.
     */
    startTime?: pulumi.Input<string>;
    /**
     * State of the reserved cache node.
     */
    state?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.elasticache.ReservedCacheNodeTimeouts>;
    /**
     * Hourly price charged for this reserved cache node.
     */
    usagePrice?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ReservedCacheNode resource.
 */
export interface ReservedCacheNodeArgs {
    /**
     * Number of cache node instances to reserve.
     * Default value is `1`.
     */
    cacheNodeCount?: pulumi.Input<number>;
    /**
     * ID of the reserved cache node offering to purchase.
     * To determine an `reservedCacheNodesOfferingId`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
     *
     * The following arguments are optional:
     */
    reservedCacheNodesOfferingId: pulumi.Input<string>;
    /**
     * Map of tags to assign to the reservation. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    timeouts?: pulumi.Input<inputs.elasticache.ReservedCacheNodeTimeouts>;
}
