// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    public readonly applyImmediately!: pulumi.Output<boolean>;
    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly autoMinorVersionUpgrade!: pulumi.Output<string | undefined>;
    public readonly availabilityZone!: pulumi.Output<string>;
    public readonly azMode!: pulumi.Output<string>;
    public /*out*/ readonly cacheNodes!: pulumi.Output<outputs.elasticache.ClusterCacheNode[]>;
    public /*out*/ readonly clusterAddress!: pulumi.Output<string>;
    public readonly clusterId!: pulumi.Output<string>;
    public /*out*/ readonly configurationEndpoint!: pulumi.Output<string>;
    public readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly engineVersionActual!: pulumi.Output<string>;
    public readonly finalSnapshotIdentifier!: pulumi.Output<string | undefined>;
    public readonly ipDiscovery!: pulumi.Output<string>;
    public readonly logDeliveryConfigurations!: pulumi.Output<outputs.elasticache.ClusterLogDeliveryConfiguration[] | undefined>;
    public readonly maintenanceWindow!: pulumi.Output<string>;
    public readonly networkType!: pulumi.Output<string>;
    public readonly nodeType!: pulumi.Output<string>;
    public readonly notificationTopicArn!: pulumi.Output<string | undefined>;
    public readonly numCacheNodes!: pulumi.Output<number>;
    public readonly outpostMode!: pulumi.Output<string | undefined>;
    public readonly parameterGroupName!: pulumi.Output<string>;
    public readonly port!: pulumi.Output<number>;
    public readonly preferredAvailabilityZones!: pulumi.Output<string[] | undefined>;
    public readonly preferredOutpostArn!: pulumi.Output<string>;
    public readonly replicationGroupId!: pulumi.Output<string>;
    public readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * @deprecated With the retirement of EC2-Classic the security_group_names attribute has been deprecated and will be removed in a future version.
     */
    public readonly securityGroupNames!: pulumi.Output<string[]>;
    public readonly snapshotArns!: pulumi.Output<string | undefined>;
    public readonly snapshotName!: pulumi.Output<string | undefined>;
    public readonly snapshotRetentionLimit!: pulumi.Output<number | undefined>;
    public readonly snapshotWindow!: pulumi.Output<string>;
    public readonly subnetGroupName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["applyImmediately"] = state ? state.applyImmediately : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = state ? state.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["azMode"] = state ? state.azMode : undefined;
            resourceInputs["cacheNodes"] = state ? state.cacheNodes : undefined;
            resourceInputs["clusterAddress"] = state ? state.clusterAddress : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["configurationEndpoint"] = state ? state.configurationEndpoint : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["finalSnapshotIdentifier"] = state ? state.finalSnapshotIdentifier : undefined;
            resourceInputs["ipDiscovery"] = state ? state.ipDiscovery : undefined;
            resourceInputs["logDeliveryConfigurations"] = state ? state.logDeliveryConfigurations : undefined;
            resourceInputs["maintenanceWindow"] = state ? state.maintenanceWindow : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["notificationTopicArn"] = state ? state.notificationTopicArn : undefined;
            resourceInputs["numCacheNodes"] = state ? state.numCacheNodes : undefined;
            resourceInputs["outpostMode"] = state ? state.outpostMode : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["preferredAvailabilityZones"] = state ? state.preferredAvailabilityZones : undefined;
            resourceInputs["preferredOutpostArn"] = state ? state.preferredOutpostArn : undefined;
            resourceInputs["replicationGroupId"] = state ? state.replicationGroupId : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["securityGroupNames"] = state ? state.securityGroupNames : undefined;
            resourceInputs["snapshotArns"] = state ? state.snapshotArns : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = state ? state.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = state ? state.snapshotWindow : undefined;
            resourceInputs["subnetGroupName"] = state ? state.subnetGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            resourceInputs["applyImmediately"] = args ? args.applyImmediately : undefined;
            resourceInputs["autoMinorVersionUpgrade"] = args ? args.autoMinorVersionUpgrade : undefined;
            resourceInputs["availabilityZone"] = args ? args.availabilityZone : undefined;
            resourceInputs["azMode"] = args ? args.azMode : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["finalSnapshotIdentifier"] = args ? args.finalSnapshotIdentifier : undefined;
            resourceInputs["ipDiscovery"] = args ? args.ipDiscovery : undefined;
            resourceInputs["logDeliveryConfigurations"] = args ? args.logDeliveryConfigurations : undefined;
            resourceInputs["maintenanceWindow"] = args ? args.maintenanceWindow : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["notificationTopicArn"] = args ? args.notificationTopicArn : undefined;
            resourceInputs["numCacheNodes"] = args ? args.numCacheNodes : undefined;
            resourceInputs["outpostMode"] = args ? args.outpostMode : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["preferredAvailabilityZones"] = args ? args.preferredAvailabilityZones : undefined;
            resourceInputs["preferredOutpostArn"] = args ? args.preferredOutpostArn : undefined;
            resourceInputs["replicationGroupId"] = args ? args.replicationGroupId : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["securityGroupNames"] = args ? args.securityGroupNames : undefined;
            resourceInputs["snapshotArns"] = args ? args.snapshotArns : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["snapshotRetentionLimit"] = args ? args.snapshotRetentionLimit : undefined;
            resourceInputs["snapshotWindow"] = args ? args.snapshotWindow : undefined;
            resourceInputs["subnetGroupName"] = args ? args.subnetGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["cacheNodes"] = undefined /*out*/;
            resourceInputs["clusterAddress"] = undefined /*out*/;
            resourceInputs["configurationEndpoint"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    applyImmediately?: pulumi.Input<boolean>;
    arn?: pulumi.Input<string>;
    autoMinorVersionUpgrade?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    azMode?: pulumi.Input<string>;
    cacheNodes?: pulumi.Input<pulumi.Input<inputs.elasticache.ClusterCacheNode>[]>;
    clusterAddress?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    configurationEndpoint?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    engineVersionActual?: pulumi.Input<string>;
    finalSnapshotIdentifier?: pulumi.Input<string>;
    ipDiscovery?: pulumi.Input<string>;
    logDeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.elasticache.ClusterLogDeliveryConfiguration>[]>;
    maintenanceWindow?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    notificationTopicArn?: pulumi.Input<string>;
    numCacheNodes?: pulumi.Input<number>;
    outpostMode?: pulumi.Input<string>;
    parameterGroupName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    preferredOutpostArn?: pulumi.Input<string>;
    replicationGroupId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated With the retirement of EC2-Classic the security_group_names attribute has been deprecated and will be removed in a future version.
     */
    securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotArns?: pulumi.Input<string>;
    snapshotName?: pulumi.Input<string>;
    snapshotRetentionLimit?: pulumi.Input<number>;
    snapshotWindow?: pulumi.Input<string>;
    subnetGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    applyImmediately?: pulumi.Input<boolean>;
    autoMinorVersionUpgrade?: pulumi.Input<string>;
    availabilityZone?: pulumi.Input<string>;
    azMode?: pulumi.Input<string>;
    clusterId?: pulumi.Input<string>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    finalSnapshotIdentifier?: pulumi.Input<string>;
    ipDiscovery?: pulumi.Input<string>;
    logDeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.elasticache.ClusterLogDeliveryConfiguration>[]>;
    maintenanceWindow?: pulumi.Input<string>;
    networkType?: pulumi.Input<string>;
    nodeType?: pulumi.Input<string>;
    notificationTopicArn?: pulumi.Input<string>;
    numCacheNodes?: pulumi.Input<number>;
    outpostMode?: pulumi.Input<string>;
    parameterGroupName?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    preferredAvailabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    preferredOutpostArn?: pulumi.Input<string>;
    replicationGroupId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * @deprecated With the retirement of EC2-Classic the security_group_names attribute has been deprecated and will be removed in a future version.
     */
    securityGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    snapshotArns?: pulumi.Input<string>;
    snapshotName?: pulumi.Input<string>;
    snapshotRetentionLimit?: pulumi.Input<number>;
    snapshotWindow?: pulumi.Input<string>;
    subnetGroupName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
