// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Information about a single ElastiCache Reserved Cache Node Offering.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.elasticache.getReservedCacheNodeOffering({
 *     cacheNodeType: "cache.t4g.small",
 *     duration: "P1Y",
 *     offeringType: "No Upfront",
 *     productDescription: "redis",
 * });
 * ```
 */
export function getReservedCacheNodeOffering(args: GetReservedCacheNodeOfferingArgs, opts?: pulumi.InvokeOptions): Promise<GetReservedCacheNodeOfferingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("aws:elasticache/getReservedCacheNodeOffering:getReservedCacheNodeOffering", {
        "cacheNodeType": args.cacheNodeType,
        "duration": args.duration,
        "offeringType": args.offeringType,
        "productDescription": args.productDescription,
    }, opts);
}

/**
 * A collection of arguments for invoking getReservedCacheNodeOffering.
 */
export interface GetReservedCacheNodeOfferingArgs {
    /**
     * Node type for the reserved cache node.
     * See AWS documentation for information on [supported node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * See AWS documentation for information on [supported node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/nodes-select-size.html).
     */
    cacheNodeType: string;
    /**
     * Duration of the reservation in RFC3339 duration format.
     * Valid values are `P1Y` (one year) and `P3Y` (three years).
     */
    duration: string;
    /**
     * Offering type of this reserved cache node.
     * For the latest generation of nodes (e.g. M5, R5, T4 and newer) valid values are `No Upfront`, `Partial Upfront`, and `All Upfront`.
     * For other current generation nodes (i.e. T2, M3, M4, R3, or R4) the only valid value is `Heavy Utilization`.
     * For previous generation modes (i.e. T1, M1, M2, or C1) valid values are `Heavy Utilization`, `Medium Utilization`, and `Light Utilization`.
     */
    offeringType: string;
    /**
     * Engine type for the reserved cache node.
     * Valid values are `redis`, `valkey` and `memcached`.
     */
    productDescription: string;
}

/**
 * A collection of values returned by getReservedCacheNodeOffering.
 */
export interface GetReservedCacheNodeOfferingResult {
    readonly cacheNodeType: string;
    readonly duration: string;
    /**
     * Fixed price charged for this reserved cache node.
     */
    readonly fixedPrice: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier for the reservation.
     */
    readonly offeringId: string;
    readonly offeringType: string;
    readonly productDescription: string;
}
/**
 * Information about a single ElastiCache Reserved Cache Node Offering.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = aws.elasticache.getReservedCacheNodeOffering({
 *     cacheNodeType: "cache.t4g.small",
 *     duration: "P1Y",
 *     offeringType: "No Upfront",
 *     productDescription: "redis",
 * });
 * ```
 */
export function getReservedCacheNodeOfferingOutput(args: GetReservedCacheNodeOfferingOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetReservedCacheNodeOfferingResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("aws:elasticache/getReservedCacheNodeOffering:getReservedCacheNodeOffering", {
        "cacheNodeType": args.cacheNodeType,
        "duration": args.duration,
        "offeringType": args.offeringType,
        "productDescription": args.productDescription,
    }, opts);
}

/**
 * A collection of arguments for invoking getReservedCacheNodeOffering.
 */
export interface GetReservedCacheNodeOfferingOutputArgs {
    /**
     * Node type for the reserved cache node.
     * See AWS documentation for information on [supported node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Redis](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * See AWS documentation for information on [supported node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types for Memcached](https://docs.aws.amazon.com/AmazonElastiCache/latest/mem-ug/nodes-select-size.html).
     */
    cacheNodeType: pulumi.Input<string>;
    /**
     * Duration of the reservation in RFC3339 duration format.
     * Valid values are `P1Y` (one year) and `P3Y` (three years).
     */
    duration: pulumi.Input<string>;
    /**
     * Offering type of this reserved cache node.
     * For the latest generation of nodes (e.g. M5, R5, T4 and newer) valid values are `No Upfront`, `Partial Upfront`, and `All Upfront`.
     * For other current generation nodes (i.e. T2, M3, M4, R3, or R4) the only valid value is `Heavy Utilization`.
     * For previous generation modes (i.e. T1, M1, M2, or C1) valid values are `Heavy Utilization`, `Medium Utilization`, and `Light Utilization`.
     */
    offeringType: pulumi.Input<string>;
    /**
     * Engine type for the reserved cache node.
     * Valid values are `redis`, `valkey` and `memcached`.
     */
    productDescription: pulumi.Input<string>;
}
