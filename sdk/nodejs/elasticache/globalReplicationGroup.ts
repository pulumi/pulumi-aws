// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides an ElastiCache Global Replication Group resource, which manages replication between two or more Replication Groups in different regions. For more information, see the [ElastiCache User Guide](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html).
 *
 * ## Example Usage
 * ### Global replication group with one secondary replication group
 *
 * The global replication group depends on the primary group existing. Secondary replication groups depend on the global replication group. the provider dependency management will handle this transparently using resource value references.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.elasticache.ReplicationGroup("primary", {
 *     description: "primary replication group",
 *     engine: "redis",
 *     engineVersion: "5.0.6",
 *     nodeType: "cache.m5.large",
 *     numCacheClusters: 1,
 * });
 * const example = new aws.elasticache.GlobalReplicationGroup("example", {
 *     globalReplicationGroupIdSuffix: "example",
 *     primaryReplicationGroupId: primary.id,
 * });
 * const secondary = new aws.elasticache.ReplicationGroup("secondary", {
 *     description: "secondary replication group",
 *     globalReplicationGroupId: example.globalReplicationGroupId,
 *     numCacheClusters: 1,
 * }, {
 *     provider: aws.other_region,
 * });
 * ```
 * ### Managing Redis Engine Versions
 *
 * The initial Redis version is determined by the version set on the primary replication group.
 * However, once it is part of a Global Replication Group,
 * the Global Replication Group manages the version of all member replication groups.
 *
 * The member replication groups must have `lifecycle.ignore_changes[engineVersion]` set,
 * or the provider will always return a diff.
 *
 * In this example,
 * the primary replication group will be created with Redis 6.0,
 * and then upgraded to Redis 6.2 once added to the Global Replication Group.
 * The secondary replication group will be created with Redis 6.2.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.elasticache.ReplicationGroup("primary", {
 *     description: "primary replication group",
 *     engine: "redis",
 *     engineVersion: "6.0",
 *     nodeType: "cache.m5.large",
 *     numCacheClusters: 1,
 * });
 * const example = new aws.elasticache.GlobalReplicationGroup("example", {
 *     globalReplicationGroupIdSuffix: "example",
 *     primaryReplicationGroupId: primary.id,
 *     engineVersion: "6.2",
 * });
 * const secondary = new aws.elasticache.ReplicationGroup("secondary", {
 *     description: "secondary replication group",
 *     globalReplicationGroupId: example.globalReplicationGroupId,
 *     numCacheClusters: 1,
 * }, {
 *     provider: aws.other_region,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import ElastiCache Global Replication Groups using the `global_replication_group_id`. For example:
 *
 * ```sh
 *  $ pulumi import aws:elasticache/globalReplicationGroup:GlobalReplicationGroup my_global_replication_group okuqm-global-replication-group-1
 * ```
 */
export class GlobalReplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalReplicationGroupState, opts?: pulumi.CustomResourceOptions): GlobalReplicationGroup {
        return new GlobalReplicationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/globalReplicationGroup:GlobalReplicationGroup';

    /**
     * Returns true if the given object is an instance of GlobalReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalReplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalReplicationGroup.__pulumiType;
    }

    /**
     * The ARN of the ElastiCache Global Replication Group.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A flag that indicate whether the encryption at rest is enabled.
     */
    public /*out*/ readonly atRestEncryptionEnabled!: pulumi.Output<boolean>;
    /**
     * A flag that indicate whether AuthToken (password) is enabled.
     */
    public /*out*/ readonly authTokenEnabled!: pulumi.Output<boolean>;
    /**
     * Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
     * When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
     */
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean>;
    /**
     * The instance class used.
     * See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
     * and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * When creating, by default the Global Replication Group inherits the node type of the primary replication group.
     */
    public readonly cacheNodeType!: pulumi.Output<string>;
    /**
     * Indicates whether the Global Datastore is cluster enabled.
     */
    public /*out*/ readonly clusterEnabled!: pulumi.Output<boolean>;
    /**
     * The name of the cache engine to be used for the clusters in this global replication group.
     */
    public /*out*/ readonly engine!: pulumi.Output<string>;
    /**
     * Redis version to use for the Global Replication Group.
     * When creating, by default the Global Replication Group inherits the version of the primary replication group.
     * If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
     * Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
     * When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
     * When the version is 6, the major and minor version can be set, e.g., `6.2`,
     * or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
     * The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
     */
    public readonly engineVersion!: pulumi.Output<string>;
    /**
     * The full version number of the cache engine running on the members of this global replication group.
     */
    public /*out*/ readonly engineVersionActual!: pulumi.Output<string>;
    /**
     * Set of node groups (shards) on the global replication group.
     * Has the values:
     */
    public /*out*/ readonly globalNodeGroups!: pulumi.Output<outputs.elasticache.GlobalReplicationGroupGlobalNodeGroup[]>;
    /**
     * A user-created description for the global replication group.
     */
    public readonly globalReplicationGroupDescription!: pulumi.Output<string | undefined>;
    /**
     * The full ID of the global replication group.
     */
    public /*out*/ readonly globalReplicationGroupId!: pulumi.Output<string>;
    /**
     * The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
     */
    public readonly globalReplicationGroupIdSuffix!: pulumi.Output<string>;
    /**
     * The number of node groups (shards) on the global replication group.
     */
    public readonly numNodeGroups!: pulumi.Output<number>;
    /**
     * An ElastiCache Parameter Group to use for the Global Replication Group.
     * Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
     * Specifying without a major version upgrade will fail.
     * Note that ElastiCache creates a copy of this parameter group for each member replication group.
     */
    public readonly parameterGroupName!: pulumi.Output<string | undefined>;
    /**
     * The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
     */
    public readonly primaryReplicationGroupId!: pulumi.Output<string>;
    /**
     * A flag that indicates whether the encryption in transit is enabled.
     */
    public /*out*/ readonly transitEncryptionEnabled!: pulumi.Output<boolean>;

    /**
     * Create a GlobalReplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalReplicationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalReplicationGroupArgs | GlobalReplicationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalReplicationGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            resourceInputs["authTokenEnabled"] = state ? state.authTokenEnabled : undefined;
            resourceInputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            resourceInputs["clusterEnabled"] = state ? state.clusterEnabled : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["globalNodeGroups"] = state ? state.globalNodeGroups : undefined;
            resourceInputs["globalReplicationGroupDescription"] = state ? state.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = state ? state.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["numNodeGroups"] = state ? state.numNodeGroups : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["primaryReplicationGroupId"] = state ? state.primaryReplicationGroupId : undefined;
            resourceInputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
        } else {
            const args = argsOrState as GlobalReplicationGroupArgs | undefined;
            if ((!args || args.globalReplicationGroupIdSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalReplicationGroupIdSuffix'");
            }
            if ((!args || args.primaryReplicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryReplicationGroupId'");
            }
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = args ? args.cacheNodeType : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["globalReplicationGroupDescription"] = args ? args.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = args ? args.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["numNodeGroups"] = args ? args.numNodeGroups : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["primaryReplicationGroupId"] = args ? args.primaryReplicationGroupId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["atRestEncryptionEnabled"] = undefined /*out*/;
            resourceInputs["authTokenEnabled"] = undefined /*out*/;
            resourceInputs["clusterEnabled"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["globalNodeGroups"] = undefined /*out*/;
            resourceInputs["globalReplicationGroupId"] = undefined /*out*/;
            resourceInputs["transitEncryptionEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalReplicationGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalReplicationGroup resources.
 */
export interface GlobalReplicationGroupState {
    /**
     * The ARN of the ElastiCache Global Replication Group.
     */
    arn?: pulumi.Input<string>;
    /**
     * A flag that indicate whether the encryption at rest is enabled.
     */
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    /**
     * A flag that indicate whether AuthToken (password) is enabled.
     */
    authTokenEnabled?: pulumi.Input<boolean>;
    /**
     * Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
     * When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * The instance class used.
     * See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
     * and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * When creating, by default the Global Replication Group inherits the node type of the primary replication group.
     */
    cacheNodeType?: pulumi.Input<string>;
    /**
     * Indicates whether the Global Datastore is cluster enabled.
     */
    clusterEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the cache engine to be used for the clusters in this global replication group.
     */
    engine?: pulumi.Input<string>;
    /**
     * Redis version to use for the Global Replication Group.
     * When creating, by default the Global Replication Group inherits the version of the primary replication group.
     * If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
     * Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
     * When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
     * When the version is 6, the major and minor version can be set, e.g., `6.2`,
     * or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
     * The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The full version number of the cache engine running on the members of this global replication group.
     */
    engineVersionActual?: pulumi.Input<string>;
    /**
     * Set of node groups (shards) on the global replication group.
     * Has the values:
     */
    globalNodeGroups?: pulumi.Input<pulumi.Input<inputs.elasticache.GlobalReplicationGroupGlobalNodeGroup>[]>;
    /**
     * A user-created description for the global replication group.
     */
    globalReplicationGroupDescription?: pulumi.Input<string>;
    /**
     * The full ID of the global replication group.
     */
    globalReplicationGroupId?: pulumi.Input<string>;
    /**
     * The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
     */
    globalReplicationGroupIdSuffix?: pulumi.Input<string>;
    /**
     * The number of node groups (shards) on the global replication group.
     */
    numNodeGroups?: pulumi.Input<number>;
    /**
     * An ElastiCache Parameter Group to use for the Global Replication Group.
     * Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
     * Specifying without a major version upgrade will fail.
     * Note that ElastiCache creates a copy of this parameter group for each member replication group.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
     */
    primaryReplicationGroupId?: pulumi.Input<string>;
    /**
     * A flag that indicates whether the encryption in transit is enabled.
     */
    transitEncryptionEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GlobalReplicationGroup resource.
 */
export interface GlobalReplicationGroupArgs {
    /**
     * Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
     * When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
     */
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    /**
     * The instance class used.
     * See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
     * and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
     * When creating, by default the Global Replication Group inherits the node type of the primary replication group.
     */
    cacheNodeType?: pulumi.Input<string>;
    /**
     * Redis version to use for the Global Replication Group.
     * When creating, by default the Global Replication Group inherits the version of the primary replication group.
     * If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
     * Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
     * When the version is 7 or higher, the major and minor version should be set, e.g., `7.2`.
     * When the version is 6, the major and minor version can be set, e.g., `6.2`,
     * or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
     * The actual engine version used is returned in the attribute `engineVersionActual`, see Attribute Reference below.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * A user-created description for the global replication group.
     */
    globalReplicationGroupDescription?: pulumi.Input<string>;
    /**
     * The suffix name of a Global Datastore. If `globalReplicationGroupIdSuffix` is changed, creates a new resource.
     */
    globalReplicationGroupIdSuffix: pulumi.Input<string>;
    /**
     * The number of node groups (shards) on the global replication group.
     */
    numNodeGroups?: pulumi.Input<number>;
    /**
     * An ElastiCache Parameter Group to use for the Global Replication Group.
     * Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
     * Specifying without a major version upgrade will fail.
     * Note that ElastiCache creates a copy of this parameter group for each member replication group.
     */
    parameterGroupName?: pulumi.Input<string>;
    /**
     * The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primaryReplicationGroupId` is changed, creates a new resource.
     */
    primaryReplicationGroupId: pulumi.Input<string>;
}
