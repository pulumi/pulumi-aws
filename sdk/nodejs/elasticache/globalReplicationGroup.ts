// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class GlobalReplicationGroup extends pulumi.CustomResource {
    /**
     * Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GlobalReplicationGroupState, opts?: pulumi.CustomResourceOptions): GlobalReplicationGroup {
        return new GlobalReplicationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:elasticache/globalReplicationGroup:GlobalReplicationGroup';

    /**
     * Returns true if the given object is an instance of GlobalReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GlobalReplicationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalReplicationGroup.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public /*out*/ readonly atRestEncryptionEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly authTokenEnabled!: pulumi.Output<boolean>;
    public readonly automaticFailoverEnabled!: pulumi.Output<boolean>;
    public readonly cacheNodeType!: pulumi.Output<string>;
    public /*out*/ readonly clusterEnabled!: pulumi.Output<boolean>;
    public /*out*/ readonly engine!: pulumi.Output<string>;
    public readonly engineVersion!: pulumi.Output<string>;
    public /*out*/ readonly engineVersionActual!: pulumi.Output<string>;
    public /*out*/ readonly globalNodeGroups!: pulumi.Output<outputs.elasticache.GlobalReplicationGroupGlobalNodeGroup[]>;
    public readonly globalReplicationGroupDescription!: pulumi.Output<string | undefined>;
    public /*out*/ readonly globalReplicationGroupId!: pulumi.Output<string>;
    public readonly globalReplicationGroupIdSuffix!: pulumi.Output<string>;
    public readonly numNodeGroups!: pulumi.Output<number>;
    public readonly parameterGroupName!: pulumi.Output<string | undefined>;
    public readonly primaryReplicationGroupId!: pulumi.Output<string>;
    public /*out*/ readonly transitEncryptionEnabled!: pulumi.Output<boolean>;

    /**
     * Create a GlobalReplicationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GlobalReplicationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GlobalReplicationGroupArgs | GlobalReplicationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GlobalReplicationGroupState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            resourceInputs["authTokenEnabled"] = state ? state.authTokenEnabled : undefined;
            resourceInputs["automaticFailoverEnabled"] = state ? state.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            resourceInputs["clusterEnabled"] = state ? state.clusterEnabled : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["engineVersion"] = state ? state.engineVersion : undefined;
            resourceInputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            resourceInputs["globalNodeGroups"] = state ? state.globalNodeGroups : undefined;
            resourceInputs["globalReplicationGroupDescription"] = state ? state.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = state ? state.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["numNodeGroups"] = state ? state.numNodeGroups : undefined;
            resourceInputs["parameterGroupName"] = state ? state.parameterGroupName : undefined;
            resourceInputs["primaryReplicationGroupId"] = state ? state.primaryReplicationGroupId : undefined;
            resourceInputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
        } else {
            const args = argsOrState as GlobalReplicationGroupArgs | undefined;
            if ((!args || args.globalReplicationGroupIdSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalReplicationGroupIdSuffix'");
            }
            if ((!args || args.primaryReplicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryReplicationGroupId'");
            }
            resourceInputs["automaticFailoverEnabled"] = args ? args.automaticFailoverEnabled : undefined;
            resourceInputs["cacheNodeType"] = args ? args.cacheNodeType : undefined;
            resourceInputs["engineVersion"] = args ? args.engineVersion : undefined;
            resourceInputs["globalReplicationGroupDescription"] = args ? args.globalReplicationGroupDescription : undefined;
            resourceInputs["globalReplicationGroupIdSuffix"] = args ? args.globalReplicationGroupIdSuffix : undefined;
            resourceInputs["numNodeGroups"] = args ? args.numNodeGroups : undefined;
            resourceInputs["parameterGroupName"] = args ? args.parameterGroupName : undefined;
            resourceInputs["primaryReplicationGroupId"] = args ? args.primaryReplicationGroupId : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["atRestEncryptionEnabled"] = undefined /*out*/;
            resourceInputs["authTokenEnabled"] = undefined /*out*/;
            resourceInputs["clusterEnabled"] = undefined /*out*/;
            resourceInputs["engine"] = undefined /*out*/;
            resourceInputs["engineVersionActual"] = undefined /*out*/;
            resourceInputs["globalNodeGroups"] = undefined /*out*/;
            resourceInputs["globalReplicationGroupId"] = undefined /*out*/;
            resourceInputs["transitEncryptionEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GlobalReplicationGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GlobalReplicationGroup resources.
 */
export interface GlobalReplicationGroupState {
    arn?: pulumi.Input<string>;
    atRestEncryptionEnabled?: pulumi.Input<boolean>;
    authTokenEnabled?: pulumi.Input<boolean>;
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    cacheNodeType?: pulumi.Input<string>;
    clusterEnabled?: pulumi.Input<boolean>;
    engine?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    engineVersionActual?: pulumi.Input<string>;
    globalNodeGroups?: pulumi.Input<pulumi.Input<inputs.elasticache.GlobalReplicationGroupGlobalNodeGroup>[]>;
    globalReplicationGroupDescription?: pulumi.Input<string>;
    globalReplicationGroupId?: pulumi.Input<string>;
    globalReplicationGroupIdSuffix?: pulumi.Input<string>;
    numNodeGroups?: pulumi.Input<number>;
    parameterGroupName?: pulumi.Input<string>;
    primaryReplicationGroupId?: pulumi.Input<string>;
    transitEncryptionEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GlobalReplicationGroup resource.
 */
export interface GlobalReplicationGroupArgs {
    automaticFailoverEnabled?: pulumi.Input<boolean>;
    cacheNodeType?: pulumi.Input<string>;
    engineVersion?: pulumi.Input<string>;
    globalReplicationGroupDescription?: pulumi.Input<string>;
    globalReplicationGroupIdSuffix: pulumi.Input<string>;
    numNodeGroups?: pulumi.Input<number>;
    parameterGroupName?: pulumi.Input<string>;
    primaryReplicationGroupId: pulumi.Input<string>;
}
