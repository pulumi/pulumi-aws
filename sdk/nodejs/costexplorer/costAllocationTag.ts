// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CE Cost Allocation Tag.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.costexplorer.CostAllocationTag("example", {
 *     status: "Active",
 *     tagKey: "example",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_ce_cost_allocation_tag` can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:costexplorer/costAllocationTag:CostAllocationTag example key
 * ```
 */
export class CostAllocationTag extends pulumi.CustomResource {
    /**
     * Get an existing CostAllocationTag resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CostAllocationTagState, opts?: pulumi.CustomResourceOptions): CostAllocationTag {
        return new CostAllocationTag(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:costexplorer/costAllocationTag:CostAllocationTag';

    /**
     * Returns true if the given object is an instance of CostAllocationTag.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CostAllocationTag {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CostAllocationTag.__pulumiType;
    }

    /**
     * The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
     */
    public readonly status!: pulumi.Output<string>;
    /**
     * The key for the cost allocation tag.
     */
    public readonly tagKey!: pulumi.Output<string>;
    /**
     * The type of cost allocation tag.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a CostAllocationTag resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CostAllocationTagArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CostAllocationTagArgs | CostAllocationTagState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CostAllocationTagState | undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tagKey"] = state ? state.tagKey : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as CostAllocationTagArgs | undefined;
            if ((!args || args.status === undefined) && !opts.urn) {
                throw new Error("Missing required property 'status'");
            }
            if ((!args || args.tagKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tagKey'");
            }
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tagKey"] = args ? args.tagKey : undefined;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CostAllocationTag.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CostAllocationTag resources.
 */
export interface CostAllocationTagState {
    /**
     * The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
     */
    status?: pulumi.Input<string>;
    /**
     * The key for the cost allocation tag.
     */
    tagKey?: pulumi.Input<string>;
    /**
     * The type of cost allocation tag.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CostAllocationTag resource.
 */
export interface CostAllocationTagArgs {
    /**
     * The status of a cost allocation tag. Valid values are `Active` and `Inactive`.
     */
    status: pulumi.Input<string>;
    /**
     * The key for the cost allocation tag.
     */
    tagKey: pulumi.Input<string>;
}
