// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./input";
import * as outputs from "./output";

export interface CatalogDatabaseCreateTableDefaultPermission {
    /**
     * The permissions that are granted to the principal.
     */
    permissions?: string[];
    /**
     * The principal who is granted permissions.. See `principal` below.
     */
    principal?: outputs.CatalogDatabaseCreateTableDefaultPermissionPrincipal;
}
export interface CatalogDatabaseCreateTableDefaultPermissionPrincipal {
    /**
     * An identifier for the Lake Formation principal.
     */
    dataLakePrincipalIdentifier?: string;
}
export interface CatalogDatabaseFederatedDatabase {
    /**
     * Name of the connection to the external metastore.
     */
    connectionName?: string;
    /**
     * Unique identifier for the federated database.
     */
    identifier?: string;
}
export interface CatalogDatabaseTargetDatabase {
    /**
     * ID of the Data Catalog in which the database resides.
     */
    catalogId: string;
    /**
     * Name of the catalog database.
     */
    databaseName: string;
    /**
     * Region of the target database.
     */
    region?: string;
}
export interface CatalogTableOpenTableFormatInput {
    /**
     * Configuration block for iceberg table config. See `icebergInput` below.
     */
    icebergInput: outputs.CatalogTableOpenTableFormatInputIcebergInput;
}
export interface CatalogTableOpenTableFormatInputIcebergInput {
    /**
     * A required metadata operation. Can only be set to CREATE.
     */
    metadataOperation: string;
    /**
     * The table version for the Iceberg table. Defaults to 2.
     */
    version?: string;
}
export interface CatalogTablePartitionIndex {
    /**
     * Name of the partition index.
     */
    indexName: string;
    indexStatus: string;
    /**
     * Keys for the partition index.
     */
    keys: string[];
}
export interface CatalogTablePartitionKey {
    /**
     * Free-form text comment.
     */
    comment?: string;
    /**
     * Name of the Partition Key.
     */
    name: string;
    /**
     * Datatype of data in the Partition Key.
     */
    type?: string;
}
export interface CatalogTableStorageDescriptor {
    /**
     * List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     */
    bucketColumns?: string[];
    /**
     * Configuration block for columns in the table. See `columns` below.
     */
    columns: outputs.CatalogTableStorageDescriptorColumn[];
    /**
     * Whether the data in the table is compressed.
     */
    compressed?: boolean;
    /**
     * Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     */
    inputFormat?: string;
    /**
     * Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     */
    location?: string;
    /**
     * Must be specified if the table contains any dimension columns.
     */
    numberOfBuckets?: number;
    /**
     * Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     */
    outputFormat?: string;
    /**
     * User-supplied properties in key-value form.
     */
    parameters?: {[key: string]: string};
    /**
     * Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
     */
    schemaReference?: outputs.CatalogTableStorageDescriptorSchemaReference;
    /**
     * Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
     */
    serDeInfo?: outputs.CatalogTableStorageDescriptorSerDeInfo;
    /**
     * Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
     */
    skewedInfo?: outputs.CatalogTableStorageDescriptorSkewedInfo;
    /**
     * Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
     */
    sortColumns?: outputs.CatalogTableStorageDescriptorSortColumn[];
    /**
     * Whether the table data is stored in subdirectories.
     */
    storedAsSubDirectories?: boolean;
}
export interface CatalogTableStorageDescriptorColumn {
    /**
     * Free-form text comment.
     */
    comment?: string;
    /**
     * Name of the Column.
     */
    name: string;
    /**
     * Key-value pairs defining properties associated with the column.
     */
    parameters?: {[key: string]: string};
    /**
     * Datatype of data in the Column.
     */
    type?: string;
}
export interface CatalogTableStorageDescriptorSchemaReference {
    /**
     * Configuration block that contains schema identity fields. Either this or the `schemaVersionId` has to be provided. See `schemaId` below.
     */
    schemaId?: outputs.CatalogTableStorageDescriptorSchemaReferenceSchemaId;
    /**
     * Unique ID assigned to a version of the schema. Either this or the `schemaId` has to be provided.
     */
    schemaVersionId?: string;
    /**
     * Version number of the schema.
     */
    schemaVersionNumber: number;
}
export interface CatalogTableStorageDescriptorSchemaReferenceSchemaId {
    /**
     * Name of the schema registry that contains the schema. Must be provided when `schemaName` is specified and conflicts with `schemaArn`.
     */
    registryName?: string;
    /**
     * ARN of the schema. One of `schemaArn` or `schemaName` has to be provided.
     */
    schemaArn?: string;
    /**
     * Name of the schema. One of `schemaArn` or `schemaName` has to be provided.
     */
    schemaName?: string;
}
export interface CatalogTableStorageDescriptorSerDeInfo {
    /**
     * Name of the SerDe.
     */
    name?: string;
    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     */
    parameters?: {[key: string]: string};
    /**
     * Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
     */
    serializationLibrary?: string;
}
export interface CatalogTableStorageDescriptorSkewedInfo {
    /**
     * List of names of columns that contain skewed values.
     */
    skewedColumnNames?: string[];
    /**
     * List of values that appear so frequently as to be considered skewed.
     */
    skewedColumnValueLocationMaps?: {[key: string]: string};
    /**
     * Map of skewed values to the columns that contain them.
     */
    skewedColumnValues?: string[];
}
export interface CatalogTableStorageDescriptorSortColumn {
    /**
     * Name of the column.
     */
    column: string;
    /**
     * Whether the column is sorted in ascending (`1`) or descending order (`0`).
     */
    sortOrder: number;
}
export interface CatalogTableTargetTable {
    /**
     * ID of the Data Catalog in which the table resides.
     */
    catalogId: string;
    /**
     * Name of the catalog database that contains the target table.
     */
    databaseName: string;
    /**
     * Name of the target table.
     */
    name: string;
    /**
     * Region of the target table.
     */
    region?: string;
}
export interface ClassifierCsvClassifier {
    /**
     * Enables the processing of files that contain only one column.
     */
    allowSingleColumn?: boolean;
    /**
     * Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
     */
    containsHeader?: string;
    /**
     * Enables the custom datatype to be configured.
     */
    customDatatypeConfigured?: boolean;
    /**
     * A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
     */
    customDatatypes?: string[];
    /**
     * The delimiter used in the Csv to separate columns.
     */
    delimiter?: string;
    /**
     * Specifies whether to trim column values.
     */
    disableValueTrimming?: boolean;
    /**
     * A list of strings representing column names.
     */
    headers?: string[];
    /**
     * A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
     */
    quoteSymbol?: string;
    serde: string;
}
export interface ClassifierGrokClassifier {
    /**
     * An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
     */
    classification: string;
    /**
     * Custom grok patterns used by this classifier.
     */
    customPatterns?: string;
    /**
     * The grok pattern used by this classifier.
     */
    grokPattern: string;
}
export interface ClassifierJsonClassifier {
    /**
     * A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
     */
    jsonPath: string;
}
export interface ClassifierXmlClassifier {
    /**
     * An identifier of the data format that the classifier matches.
     */
    classification: string;
    /**
     * The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).
     */
    rowTag: string;
}
export interface ConnectionPhysicalConnectionRequirements {
    /**
     * The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
     */
    availabilityZone?: string;
    /**
     * The security group ID list used by the connection.
     */
    securityGroupIdLists?: string[];
    /**
     * The subnet ID used by the connection.
     */
    subnetId?: string;
}
export interface CrawlerCatalogTarget {
    /**
     * The name of the connection for an Amazon S3-backed Data Catalog table to be a target of the crawl when using a Catalog connection type paired with a `NETWORK` Connection type.
     */
    connectionName?: string;
    /**
     * The name of the Glue database to be synchronized.
     */
    databaseName: string;
    /**
     * A valid Amazon SQS ARN.
     *
     * > **Note:** `deletionBehavior` of catalog target doesn't support `DEPRECATE_IN_DATABASE`.
     *
     * > **Note:** `configuration` for catalog target crawlers will have `{ ... "Grouping": { "TableGroupingPolicy": "CombineCompatibleSchemas"} }` by default.
     */
    dlqEventQueueArn?: string;
    /**
     * A valid Amazon SQS ARN.
     */
    eventQueueArn?: string;
    /**
     * A list of catalog tables to be synchronized.
     */
    tables: string[];
}
export interface CrawlerDeltaTarget {
    /**
     * The name of the connection to use to connect to the Delta table target.
     */
    connectionName?: string;
    /**
     * Specifies whether the crawler will create native tables, to allow integration with query engines that support querying of the Delta transaction log directly.
     */
    createNativeDeltaTable?: boolean;
    /**
     * A list of the Amazon S3 paths to the Delta tables.
     */
    deltaTables: string[];
    /**
     * Specifies whether to write the manifest files to the Delta table path.
     */
    writeManifest: boolean;
}
export interface CrawlerDynamodbTarget {
    /**
     * The name of the DynamoDB table to crawl.
     */
    path: string;
    /**
     * Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table.  defaults to `true`.
     */
    scanAll?: boolean;
    /**
     * The percentage of the configured read capacity units to use by the AWS Glue crawler. The valid values are null or a value between 0.1 to 1.5.
     */
    scanRate?: number;
}
export interface CrawlerHudiTarget {
    /**
     * The name of the connection to use to connect to the Hudi target.
     */
    connectionName?: string;
    /**
     * A list of glob patterns used to exclude from the crawl.
     */
    exclusions?: string[];
    /**
     * The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Hudi metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
     */
    maximumTraversalDepth: number;
    /**
     * One or more Amazon S3 paths that contains Hudi metadata folders as s3://bucket/prefix.
     */
    paths: string[];
}
export interface CrawlerIcebergTarget {
    /**
     * The name of the connection to use to connect to the Iceberg target.
     */
    connectionName?: string;
    /**
     * A list of glob patterns used to exclude from the crawl.
     */
    exclusions?: string[];
    /**
     * The maximum depth of Amazon S3 paths that the crawler can traverse to discover the Iceberg metadata folder in your Amazon S3 path. Used to limit the crawler run time. Valid values are between `1` and `20`.
     */
    maximumTraversalDepth: number;
    /**
     * One or more Amazon S3 paths that contains Iceberg metadata folders as s3://bucket/prefix.
     */
    paths: string[];
}
export interface CrawlerJdbcTarget {
    /**
     * The name of the connection to use to connect to the JDBC target.
     */
    connectionName: string;
    /**
     * Specify a value of `RAWTYPES` or `COMMENTS` to enable additional metadata intable responses. `RAWTYPES` provides the native-level datatype. `COMMENTS` provides comments associated with a column or table in the database.
     */
    enableAdditionalMetadatas?: string[];
    /**
     * A list of glob patterns used to exclude from the crawl.
     */
    exclusions?: string[];
    /**
     * The path of the JDBC target.
     */
    path: string;
}
export interface CrawlerLakeFormationConfiguration {
    /**
     * Required for cross account crawls. For same account crawls as the target data, this can omitted.
     */
    accountId: string;
    /**
     * Specifies whether to use Lake Formation credentials for the crawler instead of the IAM role credentials.
     */
    useLakeFormationCredentials?: boolean;
}
export interface CrawlerLineageConfiguration {
    /**
     * Specifies whether data lineage is enabled for the crawler. Valid values are: `ENABLE` and `DISABLE`. Default value is `DISABLE`.
     */
    crawlerLineageSettings?: string;
}
export interface CrawlerMongodbTarget {
    /**
     * The name of the connection to use to connect to the Amazon DocumentDB or MongoDB target.
     */
    connectionName: string;
    /**
     * The path of the Amazon DocumentDB or MongoDB target (database/collection).
     */
    path: string;
    /**
     * Indicates whether to scan all the records, or to sample rows from the table. Scanning all the records can take a long time when the table is not a high throughput table. Default value is `true`.
     */
    scanAll?: boolean;
}
export interface CrawlerRecrawlPolicy {
    /**
     * Specifies whether to crawl the entire dataset again, crawl only folders that were added since the last crawler run, or crawl what S3 notifies the crawler of via SQS. Valid Values are: `CRAWL_EVENT_MODE`, `CRAWL_EVERYTHING` and `CRAWL_NEW_FOLDERS_ONLY`. Default value is `CRAWL_EVERYTHING`.
     */
    recrawlBehavior?: string;
}
export interface CrawlerS3Target {
    /**
     * The name of a connection which allows crawler to access data in S3 within a VPC.
     */
    connectionName?: string;
    /**
     * The ARN of the dead-letter SQS queue.
     */
    dlqEventQueueArn?: string;
    /**
     * The ARN of the SQS queue to receive S3 notifications from.
     */
    eventQueueArn?: string;
    /**
     * A list of glob patterns used to exclude from the crawl.
     */
    exclusions?: string[];
    /**
     * The path to the Amazon S3 target.
     */
    path: string;
    /**
     * Sets the number of files in each leaf folder to be crawled when crawling sample files in a dataset. If not set, all the files are crawled. A valid value is an integer between 1 and 249.
     */
    sampleSize?: number;
}
export interface CrawlerSchemaChangePolicy {
    /**
     * The deletion behavior when the crawler finds a deleted object. Valid values: `LOG`, `DELETE_FROM_DATABASE`, or `DEPRECATE_IN_DATABASE`. Defaults to `DEPRECATE_IN_DATABASE`.
     */
    deleteBehavior?: string;
    /**
     * The update behavior when the crawler finds a changed schema. Valid values: `LOG` or `UPDATE_IN_DATABASE`. Defaults to `UPDATE_IN_DATABASE`.
     */
    updateBehavior?: string;
}
export interface DataCatalogEncryptionSettingsDataCatalogEncryptionSettings {
    /**
     * When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
     */
    connectionPasswordEncryption: outputs.DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption;
    /**
     * Specifies the encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
     */
    encryptionAtRest: outputs.DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest;
}
export interface DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsConnectionPasswordEncryption {
    /**
     * A KMS key ARN that is used to encrypt the connection password. If connection password protection is enabled, the caller of CreateConnection and UpdateConnection needs at least `kms:Encrypt` permission on the specified AWS KMS key, to encrypt passwords before storing them in the Data Catalog.
     */
    awsKmsKeyId?: string;
    /**
     * When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
     */
    returnConnectionPasswordEncrypted: boolean;
}
export interface DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsEncryptionAtRest {
    /**
     * The encryption-at-rest mode for encrypting Data Catalog data. Valid values are `DISABLED` and `SSE-KMS`.
     */
    catalogEncryptionMode: string;
    /**
     * The ARN of the AWS IAM role used for accessing encrypted Data Catalog data.
     */
    catalogEncryptionServiceRole?: string;
    /**
     * The ARN of the AWS KMS key to use for encryption at rest.
     */
    sseAwsKmsKeyId?: string;
}
export interface DataQualityRulesetTargetTable {
    /**
     * The catalog id where the AWS Glue table exists.
     */
    catalogId?: string;
    /**
     * Name of the database where the AWS Glue table exists.
     */
    databaseName: string;
    /**
     * Name of the AWS Glue table.
     */
    tableName: string;
}
export interface JobCommand {
    /**
     * The name of the job command. Defaults to `glueetl`. Use `pythonshell` for Python Shell Job Type, `glueray` for Ray Job Type, or `gluestreaming` for Streaming Job Type. `maxCapacity` needs to be set if `pythonshell` is chosen.
     */
    name?: string;
    /**
     * The Python version being used to execute a Python shell job. Allowed values are 2, 3 or 3.9. Version 3 refers to Python 3.6.
     */
    pythonVersion: string;
    /**
     * In Ray jobs, runtime is used to specify the versions of Ray, Python and additional libraries available in your environment. This field is not used in other job types. For supported runtime environment values, see [Working with Ray jobs](https://docs.aws.amazon.com/glue/latest/dg/ray-jobs-section.html#author-job-ray-runtimes) in the Glue Developer Guide.
     */
    runtime: string;
    /**
     * Specifies the S3 path to a script that executes a job.
     */
    scriptLocation: string;
}
export interface JobExecutionProperty {
    /**
     * The maximum number of concurrent runs allowed for a job. The default is 1.
     */
    maxConcurrentRuns?: number;
}
export interface JobNotificationProperty {
    /**
     * After a job run starts, the number of minutes to wait before sending a job run delay notification.
     */
    notifyDelayAfter?: number;
}
export interface MLTransformInputRecordTable {
    /**
     * A unique identifier for the AWS Glue Data Catalog.
     */
    catalogId?: string;
    /**
     * The name of the connection to the AWS Glue Data Catalog.
     */
    connectionName?: string;
    /**
     * A database name in the AWS Glue Data Catalog.
     */
    databaseName: string;
    /**
     * A table name in the AWS Glue Data Catalog.
     */
    tableName: string;
}
export interface MLTransformParameters {
    /**
     * The parameters for the find matches algorithm. see Find Matches Parameters.
     */
    findMatchesParameters: outputs.MLTransformParametersFindMatchesParameters;
    /**
     * The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
     */
    transformType: string;
}
export interface MLTransformParametersFindMatchesParameters {
    /**
     * The value that is selected when tuning your transform for a balance between accuracy and cost.
     */
    accuracyCostTradeOff?: number;
    /**
     * The value to switch on or off to force the output to match the provided labels from users.
     */
    enforceProvidedLabels?: boolean;
    /**
     * The value selected when tuning your transform for a balance between precision and recall.
     */
    precisionRecallTradeOff?: number;
    /**
     * The name of a column that uniquely identifies rows in the source table.
     */
    primaryKeyColumnName?: string;
}
export interface MLTransformSchema {
    /**
     * The type of data in the column.
     */
    dataType: string;
    /**
     * The name you assign to this ML Transform. It must be unique in your account.
     */
    name: string;
}
export interface PartitionIndexPartitionIndex {
    /**
     * Name of the partition index.
     */
    indexName?: string;
    indexStatus: string;
    /**
     * Keys for the partition index.
     */
    keys?: string[];
}
export interface PartitionStorageDescriptor {
    /**
     * A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
     */
    bucketColumns?: string[];
    /**
     * A list of the Columns in the table.
     */
    columns?: outputs.PartitionStorageDescriptorColumn[];
    /**
     * True if the data in the table is compressed, or False if not.
     */
    compressed?: boolean;
    /**
     * The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     */
    inputFormat?: string;
    /**
     * The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     */
    location?: string;
    /**
     * Must be specified if the table contains any dimension columns.
     */
    numberOfBuckets?: number;
    /**
     * The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     */
    outputFormat?: string;
    /**
     * User-supplied properties in key-value form.
     */
    parameters?: {[key: string]: string};
    /**
     * Serialization/deserialization (SerDe) information.
     */
    serDeInfo?: outputs.PartitionStorageDescriptorSerDeInfo;
    /**
     * Information about values that appear very frequently in a column (skewed values).
     */
    skewedInfo?: outputs.PartitionStorageDescriptorSkewedInfo;
    /**
     * A list of Order objects specifying the sort order of each bucket in the table.
     */
    sortColumns?: outputs.PartitionStorageDescriptorSortColumn[];
    /**
     * True if the table data is stored in subdirectories, or False if not.
     */
    storedAsSubDirectories?: boolean;
}
export interface PartitionStorageDescriptorColumn {
    comment?: string;
    name: string;
    type?: string;
}
export interface PartitionStorageDescriptorSerDeInfo {
    /**
     * Name of the SerDe.
     */
    name?: string;
    /**
     * A map of initialization parameters for the SerDe, in key-value form.
     */
    parameters?: {[key: string]: string};
    /**
     * Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
     */
    serializationLibrary?: string;
}
export interface PartitionStorageDescriptorSkewedInfo {
    /**
     * A list of names of columns that contain skewed values.
     */
    skewedColumnNames?: string[];
    /**
     * A list of values that appear so frequently as to be considered skewed.
     */
    skewedColumnValueLocationMaps?: {[key: string]: string};
    /**
     * A map of skewed values to the columns that contain them.
     */
    skewedColumnValues?: string[];
}
export interface PartitionStorageDescriptorSortColumn {
    /**
     * The name of the column.
     */
    column: string;
    /**
     * Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).
     */
    sortOrder: number;
}
export interface SecurityConfigurationEncryptionConfiguration {
    cloudwatchEncryption: outputs.SecurityConfigurationEncryptionConfigurationCloudwatchEncryption;
    jobBookmarksEncryption: outputs.SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption;
    /**
     * A `s3Encryption ` block as described below, which contains encryption configuration for S3 data.
     */
    s3Encryption: outputs.SecurityConfigurationEncryptionConfigurationS3Encryption;
}
export interface SecurityConfigurationEncryptionConfigurationCloudwatchEncryption {
    /**
     * Encryption mode to use for CloudWatch data. Valid values: `DISABLED`, `SSE-KMS`. Default value: `DISABLED`.
     */
    cloudwatchEncryptionMode?: string;
    /**
     * Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
     */
    kmsKeyArn?: string;
}
export interface SecurityConfigurationEncryptionConfigurationJobBookmarksEncryption {
    /**
     * Encryption mode to use for job bookmarks data. Valid values: `CSE-KMS`, `DISABLED`. Default value: `DISABLED`.
     */
    jobBookmarksEncryptionMode?: string;
    /**
     * Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
     */
    kmsKeyArn?: string;
}
export interface SecurityConfigurationEncryptionConfigurationS3Encryption {
    /**
     * Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
     */
    kmsKeyArn?: string;
    /**
     * Encryption mode to use for S3 data. Valid values: `DISABLED`, `SSE-KMS`, `SSE-S3`. Default value: `DISABLED`.
     */
    s3EncryptionMode?: string;
}
export interface TriggerAction {
    /**
     * Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
     */
    arguments?: {[key: string]: string};
    /**
     * The name of the crawler to be executed. Conflicts with `jobName`.
     */
    crawlerName?: string;
    /**
     * The name of a job to be executed. Conflicts with `crawlerName`.
     */
    jobName?: string;
    /**
     * Specifies configuration properties of a job run notification. See Notification Property details below.
     */
    notificationProperty?: outputs.TriggerActionNotificationProperty;
    /**
     * The name of the Security Configuration structure to be used with this action.
     */
    securityConfiguration?: string;
    /**
     * The job run timeout in minutes. It overrides the timeout value of the job.
     */
    timeout?: number;
}
export interface TriggerActionNotificationProperty {
    /**
     * After a job run starts, the number of minutes to wait before sending a job run delay notification.
     */
    notifyDelayAfter?: number;
}
export interface TriggerEventBatchingCondition {
    /**
     * Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
     */
    batchSize: number;
    /**
     * Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.
     */
    batchWindow?: number;
}
export interface TriggerPredicate {
    /**
     * A list of the conditions that determine when the trigger will fire. See Conditions.
     */
    conditions: outputs.TriggerPredicateCondition[];
    /**
     * How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.
     */
    logical?: string;
}
export interface TriggerPredicateCondition {
    /**
     * The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
     */
    crawlState?: string;
    /**
     * The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
     */
    crawlerName?: string;
    /**
     * The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
     */
    jobName?: string;
    /**
     * A logical operator. Defaults to `EQUALS`.
     */
    logicalOperator?: string;
    /**
     * The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
     */
    state?: string;
}
export interface UserDefinedFunctionResourceUri {
    /**
     * The type of the resource. can be one of `JAR`, `FILE`, and `ARCHIVE`.
     */
    resourceType: string;
    /**
     * The URI for accessing the resource.
     */
    uri: string;
}
export interface GetCatalogTablePartitionIndex {
    /**
     * Name of the partition index.
     */
    indexName: string;
    indexStatus: string;
    /**
     * Keys for the partition index.
     */
    keys: string[];
}
export interface GetCatalogTablePartitionKey {
    /**
     * Free-form text comment.
     */
    comment: string;
    /**
     * Name of the table.
     */
    name: string;
    /**
     * Datatype of data in the Column.
     */
    type: string;
}
export interface GetCatalogTableStorageDescriptor {
    /**
     * List of reducer grouping columns, clustering columns, and bucketing columns in the table.
     */
    bucketColumns: string[];
    /**
     * Configuration block for columns in the table. See `columns` below.
     */
    columns: outputs.GetCatalogTableStorageDescriptorColumn[];
    /**
     * Whether the data in the table is compressed.
     */
    compressed: boolean;
    /**
     * Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
     */
    inputFormat: string;
    /**
     * Physical location of the table. By default, this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
     */
    location: string;
    /**
     * Is if the table contains any dimension columns.
     */
    numberOfBuckets: number;
    /**
     * Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
     */
    outputFormat: string;
    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     */
    parameters: {[key: string]: string};
    /**
     * Object that references a schema stored in the AWS Glue Schema Registry. See `schemaReference` below.
     */
    schemaReferences: outputs.GetCatalogTableStorageDescriptorSchemaReference[];
    /**
     * Configuration block for serialization and deserialization ("SerDe") information. See `serDeInfo` below.
     */
    serDeInfos: outputs.GetCatalogTableStorageDescriptorSerDeInfo[];
    /**
     * Configuration block with information about values that appear very frequently in a column (skewed values). See `skewedInfo` below.
     */
    skewedInfos: outputs.GetCatalogTableStorageDescriptorSkewedInfo[];
    /**
     * Configuration block for the sort order of each bucket in the table. See `sortColumns` below.
     */
    sortColumns: outputs.GetCatalogTableStorageDescriptorSortColumn[];
    /**
     * Whether the table data is stored in subdirectories.
     */
    storedAsSubDirectories: boolean;
}
export interface GetCatalogTableStorageDescriptorColumn {
    /**
     * Free-form text comment.
     */
    comment: string;
    /**
     * Name of the table.
     */
    name: string;
    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     */
    parameters: {[key: string]: string};
    /**
     * Datatype of data in the Column.
     */
    type: string;
}
export interface GetCatalogTableStorageDescriptorSchemaReference {
    /**
     * Configuration block that contains schema identity fields. See `schemaId` below.
     */
    schemaIds: outputs.GetCatalogTableStorageDescriptorSchemaReferenceSchemaId[];
    /**
     * Unique ID assigned to a version of the schema.
     */
    schemaVersionId: string;
    /**
     * Version number of the schema.
     */
    schemaVersionNumber: number;
}
export interface GetCatalogTableStorageDescriptorSchemaReferenceSchemaId {
    /**
     * Name of the schema registry that contains the schema.
     */
    registryName: string;
    /**
     * ARN of the schema.
     */
    schemaArn: string;
    /**
     * Name of the schema.
     */
    schemaName: string;
}
export interface GetCatalogTableStorageDescriptorSerDeInfo {
    /**
     * Name of the table.
     */
    name: string;
    /**
     * Map of initialization parameters for the SerDe, in key-value form.
     */
    parameters: {[key: string]: string};
    /**
     * Usually the class that implements the SerDe. An example is `org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe`.
     */
    serializationLibrary: string;
}
export interface GetCatalogTableStorageDescriptorSkewedInfo {
    /**
     * List of names of columns that contain skewed values.
     */
    skewedColumnNames: string[];
    /**
     * List of values that appear so frequently as to be considered skewed.
     */
    skewedColumnValueLocationMaps: {[key: string]: string};
    /**
     * Map of skewed values to the columns that contain them.
     */
    skewedColumnValues: string[];
}
export interface GetCatalogTableStorageDescriptorSortColumn {
    /**
     * Name of the column.
     */
    column: string;
    /**
     * Whether the column is sorted in ascending (`1`) or descending order (`0`).
     */
    sortOrder: number;
}
export interface GetCatalogTableTargetTable {
    /**
     * ID of the Glue Catalog and database where the table metadata resides. If omitted, this defaults to the current AWS Account ID.
     */
    catalogId: string;
    /**
     * Name of the metadata database where the table metadata resides.
     */
    databaseName: string;
    /**
     * Name of the table.
     */
    name: string;
    /**
     * Region of the target table.
     */
    region: string;
}
export interface GetConnectionPhysicalConnectionRequirement {
    availabilityZone: string;
    securityGroupIdLists: string[];
    subnetId: string;
}
export interface GetDataCatalogEncryptionSettingsDataCatalogEncryptionSetting {
    /**
     * When connection password protection is enabled, the Data Catalog uses a customer-provided key to encrypt the password as part of CreateConnection or UpdateConnection and store it in the ENCRYPTED_PASSWORD field in the connection properties. You can enable catalog encryption or only password encryption. see Connection Password Encryption.
     */
    connectionPasswordEncryptions: outputs.GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption[];
    /**
     * Encryption-at-rest configuration for the Data Catalog. see Encryption At Rest.
     */
    encryptionAtRests: outputs.GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest[];
}
export interface GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingConnectionPasswordEncryption {
    /**
     * KMS key ARN that is used to encrypt the connection password.
     */
    awsKmsKeyId: string;
    /**
     * When set to `true`, passwords remain encrypted in the responses of GetConnection and GetConnections. This encryption takes effect independently of the catalog encryption.
     */
    returnConnectionPasswordEncrypted: boolean;
}
export interface GetDataCatalogEncryptionSettingsDataCatalogEncryptionSettingEncryptionAtRest {
    /**
     * The encryption-at-rest mode for encrypting Data Catalog data.
     */
    catalogEncryptionMode: string;
    /**
     * The ARN of the AWS IAM role used for accessing encrypted Data Catalog data.
     */
    catalogEncryptionServiceRole: string;
    /**
     * ARN of the AWS KMS key to use for encryption at rest.
     */
    sseAwsKmsKeyId: string;
}
