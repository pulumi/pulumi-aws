// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class Partition extends pulumi.CustomResource {
    /**
     * Get an existing Partition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PartitionState, opts?: pulumi.CustomResourceOptions): Partition {
        return new Partition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:glue/partition:Partition';

    /**
     * Returns true if the given object is an instance of Partition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Partition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Partition.__pulumiType;
    }

    public readonly catalogId!: pulumi.Output<string>;
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public /*out*/ readonly lastAccessedTime!: pulumi.Output<string>;
    public /*out*/ readonly lastAnalyzedTime!: pulumi.Output<string>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly partitionValues!: pulumi.Output<string[]>;
    public readonly storageDescriptor!: pulumi.Output<outputs.glue.PartitionStorageDescriptor | undefined>;
    public readonly tableName!: pulumi.Output<string>;

    /**
     * Create a Partition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PartitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PartitionArgs | PartitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PartitionState | undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["lastAccessedTime"] = state ? state.lastAccessedTime : undefined;
            resourceInputs["lastAnalyzedTime"] = state ? state.lastAnalyzedTime : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["partitionValues"] = state ? state.partitionValues : undefined;
            resourceInputs["storageDescriptor"] = state ? state.storageDescriptor : undefined;
            resourceInputs["tableName"] = state ? state.tableName : undefined;
        } else {
            const args = argsOrState as PartitionArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.partitionValues === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionValues'");
            }
            if ((!args || args.tableName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tableName'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["partitionValues"] = args ? args.partitionValues : undefined;
            resourceInputs["storageDescriptor"] = args ? args.storageDescriptor : undefined;
            resourceInputs["tableName"] = args ? args.tableName : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastAccessedTime"] = undefined /*out*/;
            resourceInputs["lastAnalyzedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Partition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Partition resources.
 */
export interface PartitionState {
    catalogId?: pulumi.Input<string>;
    creationTime?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    lastAccessedTime?: pulumi.Input<string>;
    lastAnalyzedTime?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partitionValues?: pulumi.Input<pulumi.Input<string>[]>;
    storageDescriptor?: pulumi.Input<inputs.glue.PartitionStorageDescriptor>;
    tableName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Partition resource.
 */
export interface PartitionArgs {
    catalogId?: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partitionValues: pulumi.Input<pulumi.Input<string>[]>;
    storageDescriptor?: pulumi.Input<inputs.glue.PartitionStorageDescriptor>;
    tableName: pulumi.Input<string>;
}
