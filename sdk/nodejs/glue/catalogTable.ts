// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

export class CatalogTable extends pulumi.CustomResource {
    /**
     * Get an existing CatalogTable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CatalogTableState, opts?: pulumi.CustomResourceOptions): CatalogTable {
        return new CatalogTable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:glue/catalogTable:CatalogTable';

    /**
     * Returns true if the given object is an instance of CatalogTable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CatalogTable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CatalogTable.__pulumiType;
    }

    public /*out*/ readonly arn!: pulumi.Output<string>;
    public readonly catalogId!: pulumi.Output<string>;
    public readonly databaseName!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly owner!: pulumi.Output<string | undefined>;
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly partitionIndices!: pulumi.Output<outputs.glue.CatalogTablePartitionIndex[]>;
    public readonly partitionKeys!: pulumi.Output<outputs.glue.CatalogTablePartitionKey[] | undefined>;
    public readonly retention!: pulumi.Output<number | undefined>;
    public readonly storageDescriptor!: pulumi.Output<outputs.glue.CatalogTableStorageDescriptor | undefined>;
    public readonly tableType!: pulumi.Output<string | undefined>;
    public readonly targetTable!: pulumi.Output<outputs.glue.CatalogTableTargetTable | undefined>;
    public readonly viewExpandedText!: pulumi.Output<string | undefined>;
    public readonly viewOriginalText!: pulumi.Output<string | undefined>;

    /**
     * Create a CatalogTable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CatalogTableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CatalogTableArgs | CatalogTableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CatalogTableState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["catalogId"] = state ? state.catalogId : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["partitionIndices"] = state ? state.partitionIndices : undefined;
            resourceInputs["partitionKeys"] = state ? state.partitionKeys : undefined;
            resourceInputs["retention"] = state ? state.retention : undefined;
            resourceInputs["storageDescriptor"] = state ? state.storageDescriptor : undefined;
            resourceInputs["tableType"] = state ? state.tableType : undefined;
            resourceInputs["targetTable"] = state ? state.targetTable : undefined;
            resourceInputs["viewExpandedText"] = state ? state.viewExpandedText : undefined;
            resourceInputs["viewOriginalText"] = state ? state.viewOriginalText : undefined;
        } else {
            const args = argsOrState as CatalogTableArgs | undefined;
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            resourceInputs["catalogId"] = args ? args.catalogId : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["partitionIndices"] = args ? args.partitionIndices : undefined;
            resourceInputs["partitionKeys"] = args ? args.partitionKeys : undefined;
            resourceInputs["retention"] = args ? args.retention : undefined;
            resourceInputs["storageDescriptor"] = args ? args.storageDescriptor : undefined;
            resourceInputs["tableType"] = args ? args.tableType : undefined;
            resourceInputs["targetTable"] = args ? args.targetTable : undefined;
            resourceInputs["viewExpandedText"] = args ? args.viewExpandedText : undefined;
            resourceInputs["viewOriginalText"] = args ? args.viewOriginalText : undefined;
            resourceInputs["arn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CatalogTable.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CatalogTable resources.
 */
export interface CatalogTableState {
    arn?: pulumi.Input<string>;
    catalogId?: pulumi.Input<string>;
    databaseName?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partitionIndices?: pulumi.Input<pulumi.Input<inputs.glue.CatalogTablePartitionIndex>[]>;
    partitionKeys?: pulumi.Input<pulumi.Input<inputs.glue.CatalogTablePartitionKey>[]>;
    retention?: pulumi.Input<number>;
    storageDescriptor?: pulumi.Input<inputs.glue.CatalogTableStorageDescriptor>;
    tableType?: pulumi.Input<string>;
    targetTable?: pulumi.Input<inputs.glue.CatalogTableTargetTable>;
    viewExpandedText?: pulumi.Input<string>;
    viewOriginalText?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CatalogTable resource.
 */
export interface CatalogTableArgs {
    catalogId?: pulumi.Input<string>;
    databaseName: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    partitionIndices?: pulumi.Input<pulumi.Input<inputs.glue.CatalogTablePartitionIndex>[]>;
    partitionKeys?: pulumi.Input<pulumi.Input<inputs.glue.CatalogTablePartitionKey>[]>;
    retention?: pulumi.Input<number>;
    storageDescriptor?: pulumi.Input<inputs.glue.CatalogTableStorageDescriptor>;
    tableType?: pulumi.Input<string>;
    targetTable?: pulumi.Input<inputs.glue.CatalogTableTargetTable>;
    viewExpandedText?: pulumi.Input<string>;
    viewOriginalText?: pulumi.Input<string>;
}
