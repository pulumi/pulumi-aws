// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Manages a Glue Trigger resource.
 *
 * ## Example Usage
 * ### Conditional Trigger
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Trigger("example", {
 *     type: "CONDITIONAL",
 *     actions: [{
 *         jobName: aws_glue_job.example1.name,
 *     }],
 *     predicate: {
 *         conditions: [{
 *             jobName: aws_glue_job.example2.name,
 *             state: "SUCCEEDED",
 *         }],
 *     },
 * });
 * ```
 * ### On-Demand Trigger
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Trigger("example", {
 *     type: "ON_DEMAND",
 *     actions: [{
 *         jobName: aws_glue_job.example.name,
 *     }],
 * });
 * ```
 * ### Scheduled Trigger
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Trigger("example", {
 *     schedule: "cron(15 12 * * ? *)",
 *     type: "SCHEDULED",
 *     actions: [{
 *         jobName: aws_glue_job.example.name,
 *     }],
 * });
 * ```
 * ### Conditional Trigger with Crawler Action
 *
 * **Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Trigger("example", {
 *     type: "CONDITIONAL",
 *     actions: [{
 *         crawlerName: aws_glue_crawler.example1.name,
 *     }],
 *     predicate: {
 *         conditions: [{
 *             jobName: aws_glue_job.example2.name,
 *             state: "SUCCEEDED",
 *         }],
 *     },
 * });
 * ```
 * ### Conditional Trigger with Crawler Condition
 *
 * **Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Trigger("example", {
 *     type: "CONDITIONAL",
 *     actions: [{
 *         jobName: aws_glue_job.example1.name,
 *     }],
 *     predicate: {
 *         conditions: [{
 *             crawlerName: aws_glue_crawler.example2.name,
 *             crawlState: "SUCCEEDED",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Glue Triggers using `name`. For example:
 *
 * ```sh
 *  $ pulumi import aws:glue/trigger:Trigger MyTrigger MyTrigger
 * ```
 */
export class Trigger extends pulumi.CustomResource {
    /**
     * Get an existing Trigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerState, opts?: pulumi.CustomResourceOptions): Trigger {
        return new Trigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:glue/trigger:Trigger';

    /**
     * Returns true if the given object is an instance of Trigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Trigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Trigger.__pulumiType;
    }

    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     */
    public readonly actions!: pulumi.Output<outputs.glue.TriggerAction[]>;
    /**
     * Amazon Resource Name (ARN) of Glue Trigger
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * A description of the new trigger.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Start the trigger. Defaults to `true`.
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
     */
    public readonly eventBatchingConditions!: pulumi.Output<outputs.glue.TriggerEventBatchingCondition[] | undefined>;
    /**
     * The name of the trigger.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     */
    public readonly predicate!: pulumi.Output<outputs.glue.TriggerPredicate | undefined>;
    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     */
    public readonly schedule!: pulumi.Output<string | undefined>;
    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     */
    public readonly startOnCreation!: pulumi.Output<boolean | undefined>;
    /**
     * The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     */
    public readonly workflowName!: pulumi.Output<string | undefined>;

    /**
     * Create a Trigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TriggerArgs | TriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TriggerState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventBatchingConditions"] = state ? state.eventBatchingConditions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["predicate"] = state ? state.predicate : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["startOnCreation"] = state ? state.startOnCreation : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["workflowName"] = state ? state.workflowName : undefined;
        } else {
            const args = argsOrState as TriggerArgs | undefined;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventBatchingConditions"] = args ? args.eventBatchingConditions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["predicate"] = args ? args.predicate : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["startOnCreation"] = args ? args.startOnCreation : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workflowName"] = args ? args.workflowName : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["tagsAll"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Trigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Trigger resources.
 */
export interface TriggerState {
    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.glue.TriggerAction>[]>;
    /**
     * Amazon Resource Name (ARN) of Glue Trigger
     */
    arn?: pulumi.Input<string>;
    /**
     * A description of the new trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Start the trigger. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
     */
    eventBatchingConditions?: pulumi.Input<pulumi.Input<inputs.glue.TriggerEventBatchingCondition>[]>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     */
    predicate?: pulumi.Input<inputs.glue.TriggerPredicate>;
    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     */
    schedule?: pulumi.Input<string>;
    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     */
    startOnCreation?: pulumi.Input<boolean>;
    /**
     * The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawlerState`.
     */
    state?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
     */
    type?: pulumi.Input<string>;
    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     */
    workflowName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Trigger resource.
 */
export interface TriggerArgs {
    /**
     * List of actions initiated by this trigger when it fires. See Actions Below.
     */
    actions: pulumi.Input<pulumi.Input<inputs.glue.TriggerAction>[]>;
    /**
     * A description of the new trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Start the trigger. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
     */
    eventBatchingConditions?: pulumi.Input<pulumi.Input<inputs.glue.TriggerEventBatchingCondition>[]>;
    /**
     * The name of the trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
     */
    predicate?: pulumi.Input<inputs.glue.TriggerPredicate>;
    /**
     * A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
     */
    schedule?: pulumi.Input<string>;
    /**
     * Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
     */
    startOnCreation?: pulumi.Input<boolean>;
    /**
     * Key-value map of resource tags. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
     */
    type: pulumi.Input<string>;
    /**
     * A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
     */
    workflowName?: pulumi.Input<string>;
}
