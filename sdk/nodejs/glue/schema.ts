// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Glue Schema resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Schema("example", {
 *     schemaName: "example",
 *     registryArn: test.arn,
 *     dataFormat: "AVRO",
 *     compatibility: "NONE",
 *     schemaDefinition: "{\"type\": \"record\", \"name\": \"r1\", \"fields\": [ {\"name\": \"f1\", \"type\": \"int\"}, {\"name\": \"f2\", \"type\": \"string\"} ]}",
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import Glue Registries using `arn`. For example:
 *
 * ```sh
 * $ pulumi import aws:glue/schema:Schema example arn:aws:glue:us-west-2:123456789012:schema/example/example
 * ```
 */
export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:glue/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the schema.
     */
    declare public /*out*/ readonly arn: pulumi.Output<string>;
    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     */
    declare public readonly compatibility: pulumi.Output<string>;
    /**
     * The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
     */
    declare public readonly dataFormat: pulumi.Output<string>;
    /**
     * A description of the schema.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The latest version of the schema associated with the returned schema definition.
     */
    declare public /*out*/ readonly latestSchemaVersion: pulumi.Output<number>;
    /**
     * The next version of the schema associated with the returned schema definition.
     */
    declare public /*out*/ readonly nextSchemaVersion: pulumi.Output<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    declare public readonly region: pulumi.Output<string>;
    /**
     * The ARN of the Glue Registry to create the schema in.
     */
    declare public readonly registryArn: pulumi.Output<string>;
    /**
     * The name of the Glue Registry.
     */
    declare public /*out*/ readonly registryName: pulumi.Output<string>;
    /**
     * The version number of the checkpoint (the last time the compatibility mode was changed).
     */
    declare public /*out*/ readonly schemaCheckpoint: pulumi.Output<number>;
    /**
     * The schema definition using the `dataFormat` setting for `schemaName`.
     */
    declare public readonly schemaDefinition: pulumi.Output<string>;
    /**
     * The Name of the schema.
     */
    declare public readonly schemaName: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    declare public /*out*/ readonly tagsAll: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["arn"] = state?.arn;
            resourceInputs["compatibility"] = state?.compatibility;
            resourceInputs["dataFormat"] = state?.dataFormat;
            resourceInputs["description"] = state?.description;
            resourceInputs["latestSchemaVersion"] = state?.latestSchemaVersion;
            resourceInputs["nextSchemaVersion"] = state?.nextSchemaVersion;
            resourceInputs["region"] = state?.region;
            resourceInputs["registryArn"] = state?.registryArn;
            resourceInputs["registryName"] = state?.registryName;
            resourceInputs["schemaCheckpoint"] = state?.schemaCheckpoint;
            resourceInputs["schemaDefinition"] = state?.schemaDefinition;
            resourceInputs["schemaName"] = state?.schemaName;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tagsAll"] = state?.tagsAll;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if (args?.compatibility === undefined && !opts.urn) {
                throw new Error("Missing required property 'compatibility'");
            }
            if (args?.dataFormat === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataFormat'");
            }
            if (args?.schemaDefinition === undefined && !opts.urn) {
                throw new Error("Missing required property 'schemaDefinition'");
            }
            if (args?.schemaName === undefined && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            resourceInputs["compatibility"] = args?.compatibility;
            resourceInputs["dataFormat"] = args?.dataFormat;
            resourceInputs["description"] = args?.description;
            resourceInputs["region"] = args?.region;
            resourceInputs["registryArn"] = args?.registryArn;
            resourceInputs["schemaDefinition"] = args?.schemaDefinition;
            resourceInputs["schemaName"] = args?.schemaName;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["latestSchemaVersion"] = undefined /*out*/;
            resourceInputs["nextSchemaVersion"] = undefined /*out*/;
            resourceInputs["registryName"] = undefined /*out*/;
            resourceInputs["schemaCheckpoint"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * Amazon Resource Name (ARN) of the schema.
     */
    arn?: pulumi.Input<string>;
    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     */
    compatibility?: pulumi.Input<string>;
    /**
     * The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
     */
    dataFormat?: pulumi.Input<string>;
    /**
     * A description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The latest version of the schema associated with the returned schema definition.
     */
    latestSchemaVersion?: pulumi.Input<number>;
    /**
     * The next version of the schema associated with the returned schema definition.
     */
    nextSchemaVersion?: pulumi.Input<number>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The ARN of the Glue Registry to create the schema in.
     */
    registryArn?: pulumi.Input<string>;
    /**
     * The name of the Glue Registry.
     */
    registryName?: pulumi.Input<string>;
    /**
     * The version number of the checkpoint (the last time the compatibility mode was changed).
     */
    schemaCheckpoint?: pulumi.Input<number>;
    /**
     * The schema definition using the `dataFormat` setting for `schemaName`.
     */
    schemaDefinition?: pulumi.Input<string>;
    /**
     * The Name of the schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     */
    compatibility: pulumi.Input<string>;
    /**
     * The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
     */
    dataFormat: pulumi.Input<string>;
    /**
     * A description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
     */
    region?: pulumi.Input<string>;
    /**
     * The ARN of the Glue Registry to create the schema in.
     */
    registryArn?: pulumi.Input<string>;
    /**
     * The schema definition using the `dataFormat` setting for `schemaName`.
     */
    schemaDefinition: pulumi.Input<string>;
    /**
     * The Name of the schema.
     */
    schemaName: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
