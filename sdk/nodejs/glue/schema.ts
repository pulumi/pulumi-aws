// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Glue Schema resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.glue.Schema("example", {
 *     schemaName: "example",
 *     registryArn: aws_glue_registry.test.arn,
 *     dataFormat: "AVRO",
 *     compatibility: "NONE",
 *     schemaDefinition: "{\"type\": \"record\", \"name\": \"r1\", \"fields\": [ {\"name\": \"f1\", \"type\": \"int\"}, {\"name\": \"f2\", \"type\": \"string\"} ]}",
 * });
 * ```
 *
 * ## Import
 *
 * Glue Registries can be imported using `arn`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:glue/schema:Schema example arn:aws:glue:us-west-2:123456789012:schema/example/example
 * ```
 */
export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:glue/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * Amazon Resource Name (ARN) of the schema.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     */
    public readonly compatibility!: pulumi.Output<string>;
    /**
     * The data format of the schema definition. Currently only `AVRO` is supported.
     */
    public readonly dataFormat!: pulumi.Output<string>;
    /**
     * A description of the schema.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The latest version of the schema associated with the returned schema definition.
     */
    public /*out*/ readonly latestSchemaVersion!: pulumi.Output<number>;
    /**
     * The next version of the schema associated with the returned schema definition.
     */
    public /*out*/ readonly nextSchemaVersion!: pulumi.Output<number>;
    /**
     * The ARN of the Glue Registry to create the schema in.
     */
    public readonly registryArn!: pulumi.Output<string>;
    /**
     * The name of the Glue Registry.
     */
    public /*out*/ readonly registryName!: pulumi.Output<string>;
    /**
     * The version number of the checkpoint (the last time the compatibility mode was changed).
     */
    public /*out*/ readonly schemaCheckpoint!: pulumi.Output<number>;
    /**
     * The schema definition using the `dataFormat` setting for `schemaName`.
     */
    public readonly schemaDefinition!: pulumi.Output<string>;
    /**
     * The Name of the schema.
     */
    public readonly schemaName!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    public readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["compatibility"] = state ? state.compatibility : undefined;
            inputs["dataFormat"] = state ? state.dataFormat : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["latestSchemaVersion"] = state ? state.latestSchemaVersion : undefined;
            inputs["nextSchemaVersion"] = state ? state.nextSchemaVersion : undefined;
            inputs["registryArn"] = state ? state.registryArn : undefined;
            inputs["registryName"] = state ? state.registryName : undefined;
            inputs["schemaCheckpoint"] = state ? state.schemaCheckpoint : undefined;
            inputs["schemaDefinition"] = state ? state.schemaDefinition : undefined;
            inputs["schemaName"] = state ? state.schemaName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if ((!args || args.compatibility === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compatibility'");
            }
            if ((!args || args.dataFormat === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFormat'");
            }
            if ((!args || args.schemaDefinition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaDefinition'");
            }
            if ((!args || args.schemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            inputs["compatibility"] = args ? args.compatibility : undefined;
            inputs["dataFormat"] = args ? args.dataFormat : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["registryArn"] = args ? args.registryArn : undefined;
            inputs["schemaDefinition"] = args ? args.schemaDefinition : undefined;
            inputs["schemaName"] = args ? args.schemaName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["tagsAll"] = args ? args.tagsAll : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["latestSchemaVersion"] = undefined /*out*/;
            inputs["nextSchemaVersion"] = undefined /*out*/;
            inputs["registryName"] = undefined /*out*/;
            inputs["schemaCheckpoint"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Schema.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * Amazon Resource Name (ARN) of the schema.
     */
    arn?: pulumi.Input<string>;
    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     */
    compatibility?: pulumi.Input<string>;
    /**
     * The data format of the schema definition. Currently only `AVRO` is supported.
     */
    dataFormat?: pulumi.Input<string>;
    /**
     * A description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The latest version of the schema associated with the returned schema definition.
     */
    latestSchemaVersion?: pulumi.Input<number>;
    /**
     * The next version of the schema associated with the returned schema definition.
     */
    nextSchemaVersion?: pulumi.Input<number>;
    /**
     * The ARN of the Glue Registry to create the schema in.
     */
    registryArn?: pulumi.Input<string>;
    /**
     * The name of the Glue Registry.
     */
    registryName?: pulumi.Input<string>;
    /**
     * The version number of the checkpoint (the last time the compatibility mode was changed).
     */
    schemaCheckpoint?: pulumi.Input<number>;
    /**
     * The schema definition using the `dataFormat` setting for `schemaName`.
     */
    schemaDefinition?: pulumi.Input<string>;
    /**
     * The Name of the schema.
     */
    schemaName?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
     */
    compatibility: pulumi.Input<string>;
    /**
     * The data format of the schema definition. Currently only `AVRO` is supported.
     */
    dataFormat: pulumi.Input<string>;
    /**
     * A description of the schema.
     */
    description?: pulumi.Input<string>;
    /**
     * The ARN of the Glue Registry to create the schema in.
     */
    registryArn?: pulumi.Input<string>;
    /**
     * The schema definition using the `dataFormat` setting for `schemaName`.
     */
    schemaDefinition: pulumi.Input<string>;
    /**
     * The Name of the schema.
     */
    schemaName: pulumi.Input<string>;
    /**
     * Key-value map of resource tags. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
