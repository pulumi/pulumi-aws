// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Provides a Internet Monitor Monitor resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.InternetMonitor("example", {monitorName: "exmple"});
 * ```
 *
 * ## Import
 *
 * Internet Monitor Monitors can be imported using the `monitor_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/internetMonitor:InternetMonitor some some-monitor
 * ```
 */
export class InternetMonitor extends pulumi.CustomResource {
    /**
     * Get an existing InternetMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InternetMonitorState, opts?: pulumi.CustomResourceOptions): InternetMonitor {
        return new InternetMonitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudwatch/internetMonitor:InternetMonitor';

    /**
     * Returns true if the given object is an instance of InternetMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InternetMonitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InternetMonitor.__pulumiType;
    }

    /**
     * ARN of the Monitor.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     */
    public readonly internetMeasurementsLogDelivery!: pulumi.Output<outputs.cloudwatch.InternetMonitorInternetMeasurementsLogDelivery | undefined>;
    /**
     * The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     */
    public readonly maxCityNetworksToMonitor!: pulumi.Output<number | undefined>;
    /**
     * The name of the monitor.
     *
     * The following arguments are optional:
     */
    public readonly monitorName!: pulumi.Output<string>;
    /**
     * The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     */
    public readonly resources!: pulumi.Output<string[] | undefined>;
    /**
     * The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;
    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     */
    public readonly trafficPercentageToMonitor!: pulumi.Output<number | undefined>;

    /**
     * Create a InternetMonitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InternetMonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InternetMonitorArgs | InternetMonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InternetMonitorState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["internetMeasurementsLogDelivery"] = state ? state.internetMeasurementsLogDelivery : undefined;
            resourceInputs["maxCityNetworksToMonitor"] = state ? state.maxCityNetworksToMonitor : undefined;
            resourceInputs["monitorName"] = state ? state.monitorName : undefined;
            resourceInputs["resources"] = state ? state.resources : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
            resourceInputs["trafficPercentageToMonitor"] = state ? state.trafficPercentageToMonitor : undefined;
        } else {
            const args = argsOrState as InternetMonitorArgs | undefined;
            if ((!args || args.monitorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorName'");
            }
            resourceInputs["internetMeasurementsLogDelivery"] = args ? args.internetMeasurementsLogDelivery : undefined;
            resourceInputs["maxCityNetworksToMonitor"] = args ? args.maxCityNetworksToMonitor : undefined;
            resourceInputs["monitorName"] = args ? args.monitorName : undefined;
            resourceInputs["resources"] = args ? args.resources : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficPercentageToMonitor"] = args ? args.trafficPercentageToMonitor : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InternetMonitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InternetMonitor resources.
 */
export interface InternetMonitorState {
    /**
     * ARN of the Monitor.
     */
    arn?: pulumi.Input<string>;
    /**
     * Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     */
    internetMeasurementsLogDelivery?: pulumi.Input<inputs.cloudwatch.InternetMonitorInternetMeasurementsLogDelivery>;
    /**
     * The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     */
    maxCityNetworksToMonitor?: pulumi.Input<number>;
    /**
     * The name of the monitor.
     *
     * The following arguments are optional:
     */
    monitorName?: pulumi.Input<string>;
    /**
     * The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     */
    status?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     */
    trafficPercentageToMonitor?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a InternetMonitor resource.
 */
export interface InternetMonitorArgs {
    /**
     * Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
     */
    internetMeasurementsLogDelivery?: pulumi.Input<inputs.cloudwatch.InternetMonitorInternetMeasurementsLogDelivery>;
    /**
     * The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
     */
    maxCityNetworksToMonitor?: pulumi.Input<number>;
    /**
     * The name of the monitor.
     *
     * The following arguments are optional:
     */
    monitorName: pulumi.Input<string>;
    /**
     * The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
     */
    resources?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
     */
    status?: pulumi.Input<string>;
    /**
     * Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
     */
    trafficPercentageToMonitor?: pulumi.Input<number>;
}
