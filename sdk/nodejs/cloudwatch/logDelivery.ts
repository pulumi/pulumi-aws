// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS CloudWatch Logs Delivery. A delivery is a connection between an `aws.cloudwatch.LogDeliverySource` and an `aws.cloudwatch.LogDeliveryDestination`.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.LogDelivery("example", {
 *     deliverySourceName: exampleAwsCloudwatchLogDeliverySource.name,
 *     deliveryDestinationArn: exampleAwsCloudwatchLogDeliveryDestination.arn,
 *     fieldDelimiter: ",",
 *     recordFields: [
 *         "event_timestamp",
 *         "event",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudWatch Logs Delivery using the `id`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudwatch/logDelivery:LogDelivery example jsoGVi4Zq8VlYp9n
 * ```
 */
export class LogDelivery extends pulumi.CustomResource {
    /**
     * Get an existing LogDelivery resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogDeliveryState, opts?: pulumi.CustomResourceOptions): LogDelivery {
        return new LogDelivery(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudwatch/logDelivery:LogDelivery';

    /**
     * Returns true if the given object is an instance of LogDelivery.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogDelivery {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDelivery.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the delivery.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The ARN of the delivery destination to use for this delivery.
     */
    public readonly deliveryDestinationArn!: pulumi.Output<string>;
    /**
     * The name of the delivery source to use for this delivery.
     */
    public readonly deliverySourceName!: pulumi.Output<string>;
    /**
     * The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
     */
    public readonly fieldDelimiter!: pulumi.Output<string>;
    /**
     * The list of record fields to be delivered to the destination, in order.
     */
    public readonly recordFields!: pulumi.Output<string[]>;
    /**
     * Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
     */
    public readonly s3DeliveryConfigurations!: pulumi.Output<outputs.cloudwatch.LogDeliveryS3DeliveryConfiguration[]>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a LogDelivery resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogDeliveryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogDeliveryArgs | LogDeliveryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogDeliveryState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["deliveryDestinationArn"] = state ? state.deliveryDestinationArn : undefined;
            resourceInputs["deliverySourceName"] = state ? state.deliverySourceName : undefined;
            resourceInputs["fieldDelimiter"] = state ? state.fieldDelimiter : undefined;
            resourceInputs["recordFields"] = state ? state.recordFields : undefined;
            resourceInputs["s3DeliveryConfigurations"] = state ? state.s3DeliveryConfigurations : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as LogDeliveryArgs | undefined;
            if ((!args || args.deliveryDestinationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliveryDestinationArn'");
            }
            if ((!args || args.deliverySourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deliverySourceName'");
            }
            resourceInputs["deliveryDestinationArn"] = args ? args.deliveryDestinationArn : undefined;
            resourceInputs["deliverySourceName"] = args ? args.deliverySourceName : undefined;
            resourceInputs["fieldDelimiter"] = args ? args.fieldDelimiter : undefined;
            resourceInputs["recordFields"] = args ? args.recordFields : undefined;
            resourceInputs["s3DeliveryConfigurations"] = args ? args.s3DeliveryConfigurations : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDelivery.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogDelivery resources.
 */
export interface LogDeliveryState {
    /**
     * The Amazon Resource Name (ARN) of the delivery.
     */
    arn?: pulumi.Input<string>;
    /**
     * The ARN of the delivery destination to use for this delivery.
     */
    deliveryDestinationArn?: pulumi.Input<string>;
    /**
     * The name of the delivery source to use for this delivery.
     */
    deliverySourceName?: pulumi.Input<string>;
    /**
     * The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
     */
    fieldDelimiter?: pulumi.Input<string>;
    /**
     * The list of record fields to be delivered to the destination, in order.
     */
    recordFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
     */
    s3DeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.cloudwatch.LogDeliveryS3DeliveryConfiguration>[]>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LogDelivery resource.
 */
export interface LogDeliveryArgs {
    /**
     * The ARN of the delivery destination to use for this delivery.
     */
    deliveryDestinationArn: pulumi.Input<string>;
    /**
     * The name of the delivery source to use for this delivery.
     */
    deliverySourceName: pulumi.Input<string>;
    /**
     * The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
     */
    fieldDelimiter?: pulumi.Input<string>;
    /**
     * The list of record fields to be delivered to the destination, in order.
     */
    recordFields?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
     */
    s3DeliveryConfigurations?: pulumi.Input<pulumi.Input<inputs.cloudwatch.LogDeliveryS3DeliveryConfiguration>[]>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
