// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Resource for managing an AWS CloudWatch Logs Delivery Source.
 *
 * ## Example Usage
 *
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.cloudwatch.LogDeliverySource("example", {
 *     name: "example",
 *     logType: "APPLICATION_LOGS",
 *     resourceArn: exampleAwsBedrockagentKnowledgeBase.arn,
 * });
 * ```
 *
 * ## Import
 *
 * Using `pulumi import`, import CloudWatch Logs Delivery Source using the `name`. For example:
 *
 * ```sh
 * $ pulumi import aws:cloudwatch/logDeliverySource:LogDeliverySource example example
 * ```
 */
export class LogDeliverySource extends pulumi.CustomResource {
    /**
     * Get an existing LogDeliverySource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogDeliverySourceState, opts?: pulumi.CustomResourceOptions): LogDeliverySource {
        return new LogDeliverySource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudwatch/logDeliverySource:LogDeliverySource';

    /**
     * Returns true if the given object is an instance of LogDeliverySource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogDeliverySource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDeliverySource.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the delivery source.
     */
    public /*out*/ readonly arn!: pulumi.Output<string>;
    /**
     * The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
     */
    public readonly logType!: pulumi.Output<string>;
    /**
     * The name for this delivery source.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ARN of the AWS resource that is generating and sending logs.
     */
    public readonly resourceArn!: pulumi.Output<string>;
    /**
     * The AWS service that is sending logs.
     */
    public /*out*/ readonly service!: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    public /*out*/ readonly tagsAll!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a LogDeliverySource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogDeliverySourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogDeliverySourceArgs | LogDeliverySourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogDeliverySourceState | undefined;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["logType"] = state ? state.logType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceArn"] = state ? state.resourceArn : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tagsAll"] = state ? state.tagsAll : undefined;
        } else {
            const args = argsOrState as LogDeliverySourceArgs | undefined;
            if ((!args || args.logType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logType'");
            }
            if ((!args || args.resourceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceArn'");
            }
            resourceInputs["logType"] = args ? args.logType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceArn"] = args ? args.resourceArn : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["arn"] = undefined /*out*/;
            resourceInputs["service"] = undefined /*out*/;
            resourceInputs["tagsAll"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDeliverySource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogDeliverySource resources.
 */
export interface LogDeliverySourceState {
    /**
     * The Amazon Resource Name (ARN) of the delivery source.
     */
    arn?: pulumi.Input<string>;
    /**
     * The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
     */
    logType?: pulumi.Input<string>;
    /**
     * The name for this delivery source.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the AWS resource that is generating and sending logs.
     */
    resourceArn?: pulumi.Input<string>;
    /**
     * The AWS service that is sending logs.
     */
    service?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     *
     * @deprecated Please use `tags` instead.
     */
    tagsAll?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a LogDeliverySource resource.
 */
export interface LogDeliverySourceArgs {
    /**
     * The type of log that the source is sending. For Amazon Bedrock, the valid value is `APPLICATION_LOGS`. For Amazon CodeWhisperer, the valid value is `EVENT_LOGS`. For IAM Identity Center, the valid value is `ERROR_LOGS`. For Amazon WorkMail, the valid values are `ACCESS_CONTROL_LOGS`, `AUTHENTICATION_LOGS`, `WORKMAIL_AVAILABILITY_PROVIDER_LOGS`, and `WORKMAIL_MAILBOX_ACCESS_LOGS`.
     */
    logType: pulumi.Input<string>;
    /**
     * The name for this delivery source.
     */
    name?: pulumi.Input<string>;
    /**
     * The ARN of the AWS resource that is generating and sending logs.
     */
    resourceArn: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
