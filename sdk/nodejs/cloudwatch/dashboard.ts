// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a CloudWatch Dashboard resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = new aws.cloudwatch.Dashboard("main", {
 *     dashboardBody: `{
 *   "widgets": [
 *     {
 *       "type": "metric",
 *       "x": 0,
 *       "y": 0,
 *       "width": 12,
 *       "height": 6,
 *       "properties": {
 *         "metrics": [
 *           [
 *             "AWS/EC2",
 *             "CPUUtilization",
 *             "InstanceId",
 *             "i-012345"
 *           ]
 *         ],
 *         "period": 300,
 *         "stat": "Average",
 *         "region": "us-east-1",
 *         "title": "EC2 Instance CPU"
 *       }
 *     },
 *     {
 *       "type": "text",
 *       "x": 0,
 *       "y": 7,
 *       "width": 3,
 *       "height": 3,
 *       "properties": {
 *         "markdown": "Hello world"
 *       }
 *     }
 *   ]
 * }
 * `,
 *     dashboardName: "my-dashboard",
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch dashboards can be imported using the `dashboard_name`, e.g.
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/dashboard:Dashboard sample <dashboard_name>
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudwatch/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * The Amazon Resource Name (ARN) of the dashboard.
     */
    public /*out*/ readonly dashboardArn!: pulumi.Output<string>;
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     */
    public readonly dashboardBody!: pulumi.Output<string>;
    /**
     * The name of the dashboard.
     */
    public readonly dashboardName!: pulumi.Output<string>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DashboardState | undefined;
            inputs["dashboardArn"] = state ? state.dashboardArn : undefined;
            inputs["dashboardBody"] = state ? state.dashboardBody : undefined;
            inputs["dashboardName"] = state ? state.dashboardName : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if ((!args || args.dashboardBody === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'dashboardBody'");
            }
            if ((!args || args.dashboardName === undefined) && !(opts && opts.urn)) {
                throw new Error("Missing required property 'dashboardName'");
            }
            inputs["dashboardBody"] = args ? args.dashboardBody : undefined;
            inputs["dashboardName"] = args ? args.dashboardName : undefined;
            inputs["dashboardArn"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Dashboard.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * The Amazon Resource Name (ARN) of the dashboard.
     */
    readonly dashboardArn?: pulumi.Input<string>;
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     */
    readonly dashboardBody?: pulumi.Input<string>;
    /**
     * The name of the dashboard.
     */
    readonly dashboardName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * The detailed information about the dashboard, including what widgets are included and their location on the dashboard. You can read more about the body structure in the [documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/CloudWatch-Dashboard-Body-Structure.html).
     */
    readonly dashboardBody: pulumi.Input<string>;
    /**
     * The name of the dashboard.
     */
    readonly dashboardName: pulumi.Input<string>;
}
