// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

import {LogGroup} from "./index";

export class LogSubscriptionFilter extends pulumi.CustomResource {
    /**
     * Get an existing LogSubscriptionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogSubscriptionFilterState, opts?: pulumi.CustomResourceOptions): LogSubscriptionFilter {
        return new LogSubscriptionFilter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter';

    /**
     * Returns true if the given object is an instance of LogSubscriptionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogSubscriptionFilter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogSubscriptionFilter.__pulumiType;
    }

    public readonly destinationArn!: pulumi.Output<string>;
    public readonly distribution!: pulumi.Output<string | undefined>;
    public readonly filterPattern!: pulumi.Output<string>;
    public readonly logGroup!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string>;
    public readonly roleArn!: pulumi.Output<string>;

    /**
     * Create a LogSubscriptionFilter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogSubscriptionFilterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogSubscriptionFilterArgs | LogSubscriptionFilterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogSubscriptionFilterState | undefined;
            resourceInputs["destinationArn"] = state ? state.destinationArn : undefined;
            resourceInputs["distribution"] = state ? state.distribution : undefined;
            resourceInputs["filterPattern"] = state ? state.filterPattern : undefined;
            resourceInputs["logGroup"] = state ? state.logGroup : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["roleArn"] = state ? state.roleArn : undefined;
        } else {
            const args = argsOrState as LogSubscriptionFilterArgs | undefined;
            if ((!args || args.destinationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationArn'");
            }
            if ((!args || args.filterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if ((!args || args.logGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logGroup'");
            }
            resourceInputs["destinationArn"] = args ? args.destinationArn : undefined;
            resourceInputs["distribution"] = args ? args.distribution : undefined;
            resourceInputs["filterPattern"] = args ? args.filterPattern : undefined;
            resourceInputs["logGroup"] = args ? args.logGroup : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["roleArn"] = args ? args.roleArn : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogSubscriptionFilter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogSubscriptionFilter resources.
 */
export interface LogSubscriptionFilterState {
    destinationArn?: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    filterPattern?: pulumi.Input<string>;
    logGroup?: pulumi.Input<string | LogGroup>;
    name?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogSubscriptionFilter resource.
 */
export interface LogSubscriptionFilterArgs {
    destinationArn: pulumi.Input<string>;
    distribution?: pulumi.Input<string>;
    filterPattern: pulumi.Input<string>;
    logGroup: pulumi.Input<string | LogGroup>;
    name?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
}
