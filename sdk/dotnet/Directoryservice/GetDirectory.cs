// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectoryService
{
    public static partial class Invokes
    {
        /// <summary>
        /// Get attributes of AWS Directory Service directory (SimpleAD, Managed AD, AD Connector). It's especially useful to refer AWS Managed AD or on-premise AD in AD Connector configuration. 
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/directory_service_directory.html.markdown.
        /// </summary>
        [Obsolete("Use GetDirectory.InvokeAsync() instead")]
        public static Task<GetDirectoryResult> GetDirectory(GetDirectoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryResult>("aws:directoryservice/getDirectory:getDirectory", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetDirectory
    {
        /// <summary>
        /// Get attributes of AWS Directory Service directory (SimpleAD, Managed AD, AD Connector). It's especially useful to refer AWS Managed AD or on-premise AD in AD Connector configuration. 
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/directory_service_directory.html.markdown.
        /// </summary>
        public static Task<GetDirectoryResult> InvokeAsync(GetDirectoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryResult>("aws:directoryservice/getDirectory:getDirectory", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetDirectoryArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public string DirectoryId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A mapping of tags assigned to the directory/connector.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        public GetDirectoryArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetDirectoryResult
    {
        /// <summary>
        /// The access URL for the directory/connector, such as http://alias.awsapps.com.
        /// </summary>
        public readonly string AccessUrl;
        /// <summary>
        /// The alias for the directory/connector, such as `d-991708b282.awsapps.com`.
        /// </summary>
        public readonly string Alias;
        public readonly ImmutableArray<Outputs.GetDirectoryConnectSettingsResult> ConnectSettings;
        /// <summary>
        /// A textual description for the directory/connector.
        /// </summary>
        public readonly string Description;
        public readonly string DirectoryId;
        /// <summary>
        /// A list of IP addresses of the DNS servers for the directory/connector.
        /// </summary>
        public readonly ImmutableArray<string> DnsIpAddresses;
        /// <summary>
        /// (for `MicrosoftAD`) The Microsoft AD edition (`Standard` or `Enterprise`).
        /// </summary>
        public readonly string Edition;
        /// <summary>
        /// The directory/connector single-sign on status.
        /// </summary>
        public readonly bool EnableSso;
        /// <summary>
        /// The fully qualified name for the directory/connector.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ID of the security group created by the directory/connector.
        /// </summary>
        public readonly string SecurityGroupId;
        /// <summary>
        /// The short name of the directory/connector, such as `CORP`.
        /// </summary>
        public readonly string ShortName;
        /// <summary>
        /// (for `SimpleAD` and `ADConnector`) The size of the directory/connector (`Small` or `Large`).
        /// </summary>
        public readonly string Size;
        /// <summary>
        /// A mapping of tags assigned to the directory/connector.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// The directory type (`SimpleAD`, `ADConnector` or `MicrosoftAD`).
        /// </summary>
        public readonly string Type;
        public readonly ImmutableArray<Outputs.GetDirectoryVpcSettingsResult> VpcSettings;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetDirectoryResult(
            string accessUrl,
            string alias,
            ImmutableArray<Outputs.GetDirectoryConnectSettingsResult> connectSettings,
            string description,
            string directoryId,
            ImmutableArray<string> dnsIpAddresses,
            string edition,
            bool enableSso,
            string name,
            string securityGroupId,
            string shortName,
            string size,
            ImmutableDictionary<string, object>? tags,
            string type,
            ImmutableArray<Outputs.GetDirectoryVpcSettingsResult> vpcSettings,
            string id)
        {
            AccessUrl = accessUrl;
            Alias = alias;
            ConnectSettings = connectSettings;
            Description = description;
            DirectoryId = directoryId;
            DnsIpAddresses = dnsIpAddresses;
            Edition = edition;
            EnableSso = enableSso;
            Name = name;
            SecurityGroupId = securityGroupId;
            ShortName = shortName;
            Size = size;
            Tags = tags;
            Type = type;
            VpcSettings = vpcSettings;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetDirectoryConnectSettingsResult
    {
        /// <summary>
        /// The DNS IP addresses of the domain to connect to.
        /// </summary>
        public readonly ImmutableArray<string> CustomerDnsIps;
        /// <summary>
        /// The username corresponding to the password provided.
        /// </summary>
        public readonly string CustomerUsername;
        /// <summary>
        /// The identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// The ID of the VPC that the connector is in.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetDirectoryConnectSettingsResult(
            ImmutableArray<string> customerDnsIps,
            string customerUsername,
            ImmutableArray<string> subnetIds,
            string vpcId)
        {
            CustomerDnsIps = customerDnsIps;
            CustomerUsername = customerUsername;
            SubnetIds = subnetIds;
            VpcId = vpcId;
        }
    }

    [OutputType]
    public sealed class GetDirectoryVpcSettingsResult
    {
        /// <summary>
        /// The identifiers of the subnets for the connector servers (2 subnets in 2 different AZs).
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// The ID of the VPC that the connector is in.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetDirectoryVpcSettingsResult(
            ImmutableArray<string> subnetIds,
            string vpcId)
        {
            SubnetIds = subnetIds;
            VpcId = vpcId;
        }
    }
    }
}
