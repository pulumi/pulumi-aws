// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SecurityLake
{
    /// <summary>
    /// Resource for managing an AWS Security Lake Subscriber.
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Security Lake subscriber using the subscriber ID. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:securitylake/subscriber:Subscriber example 9f3bfe79-d543-474d-a93c-f3846805d208
    /// ```
    /// </summary>
    [AwsResourceType("aws:securitylake/subscriber:Subscriber")]
    public partial class Subscriber : global::Pulumi.CustomResource
    {
        [Output("accessType")]
        public Output<string> AccessType { get; private set; } = null!;

        /// <summary>
        /// ARN of the Data Lake.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
        /// </summary>
        [Output("resourceShareArn")]
        public Output<string> ResourceShareArn { get; private set; } = null!;

        /// <summary>
        /// The name of the resource share.
        /// </summary>
        [Output("resourceShareName")]
        public Output<string> ResourceShareName { get; private set; } = null!;

        /// <summary>
        /// The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The ARN for the Amazon Security Lake Amazon S3 bucket.
        /// </summary>
        [Output("s3BucketArn")]
        public Output<string> S3BucketArn { get; private set; } = null!;

        /// <summary>
        /// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        /// </summary>
        [Output("source")]
        public Output<Outputs.SubscriberSource?> Source { get; private set; } = null!;

        /// <summary>
        /// The description for your subscriber account in Security Lake.
        /// </summary>
        [Output("subscriberDescription")]
        public Output<string?> SubscriberDescription { get; private set; } = null!;

        /// <summary>
        /// The subscriber endpoint to which exception messages are posted.
        /// </summary>
        [Output("subscriberEndpoint")]
        public Output<string> SubscriberEndpoint { get; private set; } = null!;

        /// <summary>
        /// The AWS identity used to access your data.
        /// </summary>
        [Output("subscriberIdentity")]
        public Output<Outputs.SubscriberSubscriberIdentity?> SubscriberIdentity { get; private set; } = null!;

        /// <summary>
        /// The name of your Security Lake subscriber account.
        /// </summary>
        [Output("subscriberName")]
        public Output<string?> SubscriberName { get; private set; } = null!;

        /// <summary>
        /// The subscriber status of the Amazon Security Lake subscriber account.
        /// </summary>
        [Output("subscriberStatus")]
        public Output<string> SubscriberStatus { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.SubscriberTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a Subscriber resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Subscriber(string name, SubscriberArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:securitylake/subscriber:Subscriber", name, args ?? new SubscriberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Subscriber(string name, Input<string> id, SubscriberState? state = null, CustomResourceOptions? options = null)
            : base("aws:securitylake/subscriber:Subscriber", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Subscriber resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Subscriber Get(string name, Input<string> id, SubscriberState? state = null, CustomResourceOptions? options = null)
        {
            return new Subscriber(name, id, state, options);
        }
    }

    public sealed class SubscriberArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        /// <summary>
        /// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        /// </summary>
        [Input("source")]
        public Input<Inputs.SubscriberSourceArgs>? Source { get; set; }

        /// <summary>
        /// The description for your subscriber account in Security Lake.
        /// </summary>
        [Input("subscriberDescription")]
        public Input<string>? SubscriberDescription { get; set; }

        /// <summary>
        /// The AWS identity used to access your data.
        /// </summary>
        [Input("subscriberIdentity")]
        public Input<Inputs.SubscriberSubscriberIdentityArgs>? SubscriberIdentity { get; set; }

        /// <summary>
        /// The name of your Security Lake subscriber account.
        /// </summary>
        [Input("subscriberName")]
        public Input<string>? SubscriberName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.SubscriberTimeoutsArgs>? Timeouts { get; set; }

        public SubscriberArgs()
        {
        }
        public static new SubscriberArgs Empty => new SubscriberArgs();
    }

    public sealed class SubscriberState : global::Pulumi.ResourceArgs
    {
        [Input("accessType")]
        public Input<string>? AccessType { get; set; }

        /// <summary>
        /// ARN of the Data Lake.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) which uniquely defines the AWS RAM resource share. Before accepting the RAM resource share invitation, you can view details related to the RAM resource share.
        /// </summary>
        [Input("resourceShareArn")]
        public Input<string>? ResourceShareArn { get; set; }

        /// <summary>
        /// The name of the resource share.
        /// </summary>
        [Input("resourceShareName")]
        public Input<string>? ResourceShareName { get; set; }

        /// <summary>
        /// The ARN of the IAM role to be used by the entity putting logs into your custom source partition.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// The ARN for the Amazon Security Lake Amazon S3 bucket.
        /// </summary>
        [Input("s3BucketArn")]
        public Input<string>? S3BucketArn { get; set; }

        /// <summary>
        /// The supported AWS services from which logs and events are collected. Security Lake supports log and event collection for natively supported AWS services.
        /// </summary>
        [Input("source")]
        public Input<Inputs.SubscriberSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// The description for your subscriber account in Security Lake.
        /// </summary>
        [Input("subscriberDescription")]
        public Input<string>? SubscriberDescription { get; set; }

        /// <summary>
        /// The subscriber endpoint to which exception messages are posted.
        /// </summary>
        [Input("subscriberEndpoint")]
        public Input<string>? SubscriberEndpoint { get; set; }

        /// <summary>
        /// The AWS identity used to access your data.
        /// </summary>
        [Input("subscriberIdentity")]
        public Input<Inputs.SubscriberSubscriberIdentityGetArgs>? SubscriberIdentity { get; set; }

        /// <summary>
        /// The name of your Security Lake subscriber account.
        /// </summary>
        [Input("subscriberName")]
        public Input<string>? SubscriberName { get; set; }

        /// <summary>
        /// The subscriber status of the Amazon Security Lake subscriber account.
        /// </summary>
        [Input("subscriberStatus")]
        public Input<string>? SubscriberStatus { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.SubscriberTimeoutsGetArgs>? Timeouts { get; set; }

        public SubscriberState()
        {
        }
        public static new SubscriberState Empty => new SubscriberState();
    }
}
