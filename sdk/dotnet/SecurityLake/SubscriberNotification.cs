// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SecurityLake
{
    /// <summary>
    /// Resource for managing an AWS Security Lake Subscriber Notification.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.SecurityLake.SubscriberNotification("test", new()
    ///     {
    ///         SubscriberId = testAwsSecuritylakeSubscriber.Id,
    ///         Configuration = new Aws.SecurityLake.Inputs.SubscriberNotificationConfigurationArgs
    ///         {
    ///             SqsNotificationConfiguration = null,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// </summary>
    [AwsResourceType("aws:securitylake/subscriberNotification:SubscriberNotification")]
    public partial class SubscriberNotification : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify the configuration using which you want to create the subscriber notification..
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.SubscriberNotificationConfiguration?> Configuration { get; private set; } = null!;

        [Output("endpointId")]
        public Output<string> EndpointId { get; private set; } = null!;

        /// <summary>
        /// The subscriber ID for the notification subscription.
        /// </summary>
        [Output("subscriberId")]
        public Output<string> SubscriberId { get; private set; } = null!;


        /// <summary>
        /// Create a SubscriberNotification resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SubscriberNotification(string name, SubscriberNotificationArgs args, CustomResourceOptions? options = null)
            : base("aws:securitylake/subscriberNotification:SubscriberNotification", name, args ?? new SubscriberNotificationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SubscriberNotification(string name, Input<string> id, SubscriberNotificationState? state = null, CustomResourceOptions? options = null)
            : base("aws:securitylake/subscriberNotification:SubscriberNotification", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SubscriberNotification resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SubscriberNotification Get(string name, Input<string> id, SubscriberNotificationState? state = null, CustomResourceOptions? options = null)
        {
            return new SubscriberNotification(name, id, state, options);
        }
    }

    public sealed class SubscriberNotificationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the configuration using which you want to create the subscriber notification..
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.SubscriberNotificationConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// The subscriber ID for the notification subscription.
        /// </summary>
        [Input("subscriberId", required: true)]
        public Input<string> SubscriberId { get; set; } = null!;

        public SubscriberNotificationArgs()
        {
        }
        public static new SubscriberNotificationArgs Empty => new SubscriberNotificationArgs();
    }

    public sealed class SubscriberNotificationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the configuration using which you want to create the subscriber notification..
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.SubscriberNotificationConfigurationGetArgs>? Configuration { get; set; }

        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// The subscriber ID for the notification subscription.
        /// </summary>
        [Input("subscriberId")]
        public Input<string>? SubscriberId { get; set; }

        public SubscriberNotificationState()
        {
        }
        public static new SubscriberNotificationState Empty => new SubscriberNotificationState();
    }
}
