// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Drs
{
    /// <summary>
    /// Provides an Elastic Disaster Recovery replication configuration template resource.
    /// 
    /// &gt; **NOTE:** This resource is provided on a best-effort basis and may not function as intended. Due to challenges with DRS permissions, it has not been fully tested. We are collaborating with AWS to enhance its functionality and welcome your feedback.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DRS Replication Configuration Template using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:drs/replicationConfigurationTemplate:ReplicationConfigurationTemplate example templateid
    /// ```
    /// </summary>
    [AwsResourceType("aws:drs/replicationConfigurationTemplate:ReplicationConfigurationTemplate")]
    public partial class ReplicationConfigurationTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Replication configuration template ARN.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
        /// </summary>
        [Output("associateDefaultSecurityGroup")]
        public Output<bool> AssociateDefaultSecurityGroup { get; private set; } = null!;

        /// <summary>
        /// Whether to allow the AWS replication agent to automatically replicate newly added disks.
        /// </summary>
        [Output("autoReplicateNewDisks")]
        public Output<bool?> AutoReplicateNewDisks { get; private set; } = null!;

        /// <summary>
        /// Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
        /// </summary>
        [Output("bandwidthThrottling")]
        public Output<int> BandwidthThrottling { get; private set; } = null!;

        /// <summary>
        /// Whether to create a Public IP for the Recovery Instance by default.
        /// </summary>
        [Output("createPublicIp")]
        public Output<bool> CreatePublicIp { get; private set; } = null!;

        /// <summary>
        /// Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
        /// </summary>
        [Output("dataPlaneRouting")]
        public Output<string> DataPlaneRouting { get; private set; } = null!;

        /// <summary>
        /// Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
        /// </summary>
        [Output("defaultLargeStagingDiskType")]
        public Output<string> DefaultLargeStagingDiskType { get; private set; } = null!;

        /// <summary>
        /// Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
        /// </summary>
        [Output("ebsEncryption")]
        public Output<string> EbsEncryption { get; private set; } = null!;

        /// <summary>
        /// ARN of the EBS encryption key to be used during replication.
        /// </summary>
        [Output("ebsEncryptionKeyArn")]
        public Output<string?> EbsEncryptionKeyArn { get; private set; } = null!;

        /// <summary>
        /// Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
        /// </summary>
        [Output("pitPolicies")]
        public Output<ImmutableArray<Outputs.ReplicationConfigurationTemplatePitPolicy>> PitPolicies { get; private set; } = null!;

        /// <summary>
        /// Instance type to be used for the replication server.
        /// </summary>
        [Output("replicationServerInstanceType")]
        public Output<string> ReplicationServerInstanceType { get; private set; } = null!;

        /// <summary>
        /// Security group IDs that will be used by the replication server.
        /// </summary>
        [Output("replicationServersSecurityGroupsIds")]
        public Output<ImmutableArray<string>> ReplicationServersSecurityGroupsIds { get; private set; } = null!;

        /// <summary>
        /// Subnet to be used by the replication staging area.
        /// </summary>
        [Output("stagingAreaSubnetId")]
        public Output<string> StagingAreaSubnetId { get; private set; } = null!;

        /// <summary>
        /// Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
        /// </summary>
        [Output("stagingAreaTags")]
        public Output<ImmutableDictionary<string, string>?> StagingAreaTags { get; private set; } = null!;

        /// <summary>
        /// Set of tags to be associated with the Replication Configuration Template resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ReplicationConfigurationTemplateTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Whether to use a dedicated Replication Server in the replication staging area.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("useDedicatedReplicationServer")]
        public Output<bool> UseDedicatedReplicationServer { get; private set; } = null!;


        /// <summary>
        /// Create a ReplicationConfigurationTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReplicationConfigurationTemplate(string name, ReplicationConfigurationTemplateArgs args, CustomResourceOptions? options = null)
            : base("aws:drs/replicationConfigurationTemplate:ReplicationConfigurationTemplate", name, args ?? new ReplicationConfigurationTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReplicationConfigurationTemplate(string name, Input<string> id, ReplicationConfigurationTemplateState? state = null, CustomResourceOptions? options = null)
            : base("aws:drs/replicationConfigurationTemplate:ReplicationConfigurationTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReplicationConfigurationTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReplicationConfigurationTemplate Get(string name, Input<string> id, ReplicationConfigurationTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new ReplicationConfigurationTemplate(name, id, state, options);
        }
    }

    public sealed class ReplicationConfigurationTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
        /// </summary>
        [Input("associateDefaultSecurityGroup", required: true)]
        public Input<bool> AssociateDefaultSecurityGroup { get; set; } = null!;

        /// <summary>
        /// Whether to allow the AWS replication agent to automatically replicate newly added disks.
        /// </summary>
        [Input("autoReplicateNewDisks")]
        public Input<bool>? AutoReplicateNewDisks { get; set; }

        /// <summary>
        /// Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
        /// </summary>
        [Input("bandwidthThrottling", required: true)]
        public Input<int> BandwidthThrottling { get; set; } = null!;

        /// <summary>
        /// Whether to create a Public IP for the Recovery Instance by default.
        /// </summary>
        [Input("createPublicIp", required: true)]
        public Input<bool> CreatePublicIp { get; set; } = null!;

        /// <summary>
        /// Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
        /// </summary>
        [Input("dataPlaneRouting", required: true)]
        public Input<string> DataPlaneRouting { get; set; } = null!;

        /// <summary>
        /// Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
        /// </summary>
        [Input("defaultLargeStagingDiskType", required: true)]
        public Input<string> DefaultLargeStagingDiskType { get; set; } = null!;

        /// <summary>
        /// Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
        /// </summary>
        [Input("ebsEncryption", required: true)]
        public Input<string> EbsEncryption { get; set; } = null!;

        /// <summary>
        /// ARN of the EBS encryption key to be used during replication.
        /// </summary>
        [Input("ebsEncryptionKeyArn")]
        public Input<string>? EbsEncryptionKeyArn { get; set; }

        [Input("pitPolicies")]
        private InputList<Inputs.ReplicationConfigurationTemplatePitPolicyArgs>? _pitPolicies;

        /// <summary>
        /// Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
        /// </summary>
        public InputList<Inputs.ReplicationConfigurationTemplatePitPolicyArgs> PitPolicies
        {
            get => _pitPolicies ?? (_pitPolicies = new InputList<Inputs.ReplicationConfigurationTemplatePitPolicyArgs>());
            set => _pitPolicies = value;
        }

        /// <summary>
        /// Instance type to be used for the replication server.
        /// </summary>
        [Input("replicationServerInstanceType", required: true)]
        public Input<string> ReplicationServerInstanceType { get; set; } = null!;

        [Input("replicationServersSecurityGroupsIds", required: true)]
        private InputList<string>? _replicationServersSecurityGroupsIds;

        /// <summary>
        /// Security group IDs that will be used by the replication server.
        /// </summary>
        public InputList<string> ReplicationServersSecurityGroupsIds
        {
            get => _replicationServersSecurityGroupsIds ?? (_replicationServersSecurityGroupsIds = new InputList<string>());
            set => _replicationServersSecurityGroupsIds = value;
        }

        /// <summary>
        /// Subnet to be used by the replication staging area.
        /// </summary>
        [Input("stagingAreaSubnetId", required: true)]
        public Input<string> StagingAreaSubnetId { get; set; } = null!;

        [Input("stagingAreaTags")]
        private InputMap<string>? _stagingAreaTags;

        /// <summary>
        /// Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
        /// </summary>
        public InputMap<string> StagingAreaTags
        {
            get => _stagingAreaTags ?? (_stagingAreaTags = new InputMap<string>());
            set => _stagingAreaTags = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Set of tags to be associated with the Replication Configuration Template resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ReplicationConfigurationTemplateTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Whether to use a dedicated Replication Server in the replication staging area.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("useDedicatedReplicationServer", required: true)]
        public Input<bool> UseDedicatedReplicationServer { get; set; } = null!;

        public ReplicationConfigurationTemplateArgs()
        {
        }
        public static new ReplicationConfigurationTemplateArgs Empty => new ReplicationConfigurationTemplateArgs();
    }

    public sealed class ReplicationConfigurationTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Replication configuration template ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.
        /// </summary>
        [Input("associateDefaultSecurityGroup")]
        public Input<bool>? AssociateDefaultSecurityGroup { get; set; }

        /// <summary>
        /// Whether to allow the AWS replication agent to automatically replicate newly added disks.
        /// </summary>
        [Input("autoReplicateNewDisks")]
        public Input<bool>? AutoReplicateNewDisks { get; set; }

        /// <summary>
        /// Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.
        /// </summary>
        [Input("bandwidthThrottling")]
        public Input<int>? BandwidthThrottling { get; set; }

        /// <summary>
        /// Whether to create a Public IP for the Recovery Instance by default.
        /// </summary>
        [Input("createPublicIp")]
        public Input<bool>? CreatePublicIp { get; set; }

        /// <summary>
        /// Data plane routing mechanism that will be used for replication. Valid values are `PUBLIC_IP` and `PRIVATE_IP`.
        /// </summary>
        [Input("dataPlaneRouting")]
        public Input<string>? DataPlaneRouting { get; set; }

        /// <summary>
        /// Staging Disk EBS volume type to be used during replication. Valid values are `GP2`, `GP3`, `ST1`, or `AUTO`.
        /// </summary>
        [Input("defaultLargeStagingDiskType")]
        public Input<string>? DefaultLargeStagingDiskType { get; set; }

        /// <summary>
        /// Type of EBS encryption to be used during replication. Valid values are `DEFAULT` and `CUSTOM`.
        /// </summary>
        [Input("ebsEncryption")]
        public Input<string>? EbsEncryption { get; set; }

        /// <summary>
        /// ARN of the EBS encryption key to be used during replication.
        /// </summary>
        [Input("ebsEncryptionKeyArn")]
        public Input<string>? EbsEncryptionKeyArn { get; set; }

        [Input("pitPolicies")]
        private InputList<Inputs.ReplicationConfigurationTemplatePitPolicyGetArgs>? _pitPolicies;

        /// <summary>
        /// Configuration block for Point in time (PIT) policy to manage snapshots taken during replication. See below.
        /// </summary>
        public InputList<Inputs.ReplicationConfigurationTemplatePitPolicyGetArgs> PitPolicies
        {
            get => _pitPolicies ?? (_pitPolicies = new InputList<Inputs.ReplicationConfigurationTemplatePitPolicyGetArgs>());
            set => _pitPolicies = value;
        }

        /// <summary>
        /// Instance type to be used for the replication server.
        /// </summary>
        [Input("replicationServerInstanceType")]
        public Input<string>? ReplicationServerInstanceType { get; set; }

        [Input("replicationServersSecurityGroupsIds")]
        private InputList<string>? _replicationServersSecurityGroupsIds;

        /// <summary>
        /// Security group IDs that will be used by the replication server.
        /// </summary>
        public InputList<string> ReplicationServersSecurityGroupsIds
        {
            get => _replicationServersSecurityGroupsIds ?? (_replicationServersSecurityGroupsIds = new InputList<string>());
            set => _replicationServersSecurityGroupsIds = value;
        }

        /// <summary>
        /// Subnet to be used by the replication staging area.
        /// </summary>
        [Input("stagingAreaSubnetId")]
        public Input<string>? StagingAreaSubnetId { get; set; }

        [Input("stagingAreaTags")]
        private InputMap<string>? _stagingAreaTags;

        /// <summary>
        /// Set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.
        /// </summary>
        public InputMap<string> StagingAreaTags
        {
            get => _stagingAreaTags ?? (_stagingAreaTags = new InputMap<string>());
            set => _stagingAreaTags = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Set of tags to be associated with the Replication Configuration Template resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ReplicationConfigurationTemplateTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Whether to use a dedicated Replication Server in the replication staging area.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("useDedicatedReplicationServer")]
        public Input<bool>? UseDedicatedReplicationServer { get; set; }

        public ReplicationConfigurationTemplateState()
        {
        }
        public static new ReplicationConfigurationTemplateState Empty => new ReplicationConfigurationTemplateState();
    }
}
