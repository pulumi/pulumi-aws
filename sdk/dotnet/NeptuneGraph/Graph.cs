// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NeptuneGraph
{
    /// <summary>
    /// The aws.neptunegraph.Graph resource creates an Amazon Analytics Graph.
    /// 
    /// ## Example Usage
    /// 
    /// ### Neptune Graph (with Vector Search configuration)
    /// 
    /// Creates a Neptune Graph with 16GB provisioned memory, vector search capability with 128 dimensions, and a single replica for high availability.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create Neptune Graph
    ///     var example = new Aws.NeptuneGraph.Graph("example", new()
    ///     {
    ///         GraphName = "example-graph-test-20250203",
    ///         ProvisionedMemory = 16,
    ///         DeletionProtection = false,
    ///         PublicConnectivity = false,
    ///         ReplicaCount = 1,
    ///         KmsKeyIdentifier = "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
    ///         VectorSearchConfiguration = new Aws.NeptuneGraph.Inputs.GraphVectorSearchConfigurationArgs
    ///         {
    ///             VectorSearchDimension = 128,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "Development" },
    ///             { "ModifiedBy", "AWS" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `aws_neptunegraph_graph` using the graph identifier. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:neptunegraph/graph:Graph example "graph_id"
    /// ```
    /// </summary>
    [AwsResourceType("aws:neptunegraph/graph:Graph")]
    public partial class Graph : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (String) Graph resource ARN
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
        /// </summary>
        [Output("deletionProtection")]
        public Output<bool> DeletionProtection { get; private set; } = null!;

        /// <summary>
        /// (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
        /// character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don't specify a graph
        /// name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
        /// UUID.
        /// </summary>
        [Output("graphName")]
        public Output<string> GraphName { get; private set; } = null!;

        /// <summary>
        /// Allows user to specify name prefix and have remainder of name automatically generated.
        /// </summary>
        [Output("graphNamePrefix")]
        public Output<string?> GraphNamePrefix { get; private set; } = null!;

        /// <summary>
        /// The ARN for the KMS encryption key. By Default, Neptune Analytics will use an AWS provided key ("AWS_OWNED_KEY"). This parameter is used if you want to encrypt the graph using a KMS Customer Managed Key (CMK).
        /// </summary>
        [Output("kmsKeyIdentifier")]
        public Output<string> KmsKeyIdentifier { get; private set; } = null!;

        /// <summary>
        /// The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("provisionedMemory")]
        public Output<int> ProvisionedMemory { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.  When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.  When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
        /// </summary>
        [Output("publicConnectivity")]
        public Output<bool> PublicConnectivity { get; private set; } = null!;

        /// <summary>
        /// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.  Replica Count should always be less than or equal to 2.
        /// </summary>
        [Output("replicaCount")]
        public Output<int> ReplicaCount { get; private set; } = null!;

        /// <summary>
        /// The tags associated with this graph. (see below for nested schema of tags)
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.GraphTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Vector Search Configuration (see below for nested schema of vector_search_configuration)
        /// </summary>
        [Output("vectorSearchConfiguration")]
        public Output<Outputs.GraphVectorSearchConfiguration?> VectorSearchConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a Graph resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Graph(string name, GraphArgs args, CustomResourceOptions? options = null)
            : base("aws:neptunegraph/graph:Graph", name, args ?? new GraphArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Graph(string name, Input<string> id, GraphState? state = null, CustomResourceOptions? options = null)
            : base("aws:neptunegraph/graph:Graph", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Graph resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Graph Get(string name, Input<string> id, GraphState? state = null, CustomResourceOptions? options = null)
        {
            return new Graph(name, id, state, options);
        }
    }

    public sealed class GraphArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
        /// character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don't specify a graph
        /// name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
        /// UUID.
        /// </summary>
        [Input("graphName")]
        public Input<string>? GraphName { get; set; }

        /// <summary>
        /// Allows user to specify name prefix and have remainder of name automatically generated.
        /// </summary>
        [Input("graphNamePrefix")]
        public Input<string>? GraphNamePrefix { get; set; }

        /// <summary>
        /// The ARN for the KMS encryption key. By Default, Neptune Analytics will use an AWS provided key ("AWS_OWNED_KEY"). This parameter is used if you want to encrypt the graph using a KMS Customer Managed Key (CMK).
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("provisionedMemory", required: true)]
        public Input<int> ProvisionedMemory { get; set; } = null!;

        /// <summary>
        /// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.  When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.  When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
        /// </summary>
        [Input("publicConnectivity")]
        public Input<bool>? PublicConnectivity { get; set; }

        /// <summary>
        /// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.  Replica Count should always be less than or equal to 2.
        /// </summary>
        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags associated with this graph. (see below for nested schema of tags)
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.GraphTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Vector Search Configuration (see below for nested schema of vector_search_configuration)
        /// </summary>
        [Input("vectorSearchConfiguration")]
        public Input<Inputs.GraphVectorSearchConfigurationArgs>? VectorSearchConfiguration { get; set; }

        public GraphArgs()
        {
        }
        public static new GraphArgs Empty => new GraphArgs();
    }

    public sealed class GraphState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (String) Graph resource ARN
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Value that indicates whether the Graph has deletion protection enabled. The graph can't be deleted when deletion protection is enabled.
        /// </summary>
        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        /// <summary>
        /// (String) The connection endpoint for the graph. For example: `g-12a3bcdef4.us-east-1.neptune-graph.amazonaws.com`
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The graph name. For example: my-graph-1. The name must contain from 1 to 63 letters, numbers, or hyphens, and its first
        /// character must be a letter. It cannot end with a hyphen or contain two consecutive hyphens. If you don't specify a graph
        /// name, a unique graph name is generated for you using the prefix graph-for, followed by a combination of Stack Name and a
        /// UUID.
        /// </summary>
        [Input("graphName")]
        public Input<string>? GraphName { get; set; }

        /// <summary>
        /// Allows user to specify name prefix and have remainder of name automatically generated.
        /// </summary>
        [Input("graphNamePrefix")]
        public Input<string>? GraphNamePrefix { get; set; }

        /// <summary>
        /// The ARN for the KMS encryption key. By Default, Neptune Analytics will use an AWS provided key ("AWS_OWNED_KEY"). This parameter is used if you want to encrypt the graph using a KMS Customer Managed Key (CMK).
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// The provisioned memory-optimized Neptune Capacity Units (m-NCUs) to use for the graph.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("provisionedMemory")]
        public Input<int>? ProvisionedMemory { get; set; }

        /// <summary>
        /// Specifies whether the Graph can be reached over the internet. Access to all graphs requires IAM authentication.  When the Graph is publicly reachable, its Domain Name System (DNS) endpoint resolves to the public IP address from the internet.  When the Graph isn't publicly reachable, you need to create a PrivateGraphEndpoint in a given VPC to ensure the DNS name resolves to a private IP address that is reachable from the VPC.
        /// </summary>
        [Input("publicConnectivity")]
        public Input<bool>? PublicConnectivity { get; set; }

        /// <summary>
        /// Specifies the number of replicas you want when finished. All replicas will be provisioned in different availability zones.  Replica Count should always be less than or equal to 2.
        /// </summary>
        [Input("replicaCount")]
        public Input<int>? ReplicaCount { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags associated with this graph. (see below for nested schema of tags)
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.GraphTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Vector Search Configuration (see below for nested schema of vector_search_configuration)
        /// </summary>
        [Input("vectorSearchConfiguration")]
        public Input<Inputs.GraphVectorSearchConfigurationGetArgs>? VectorSearchConfiguration { get; set; }

        public GraphState()
        {
        }
        public static new GraphState Empty => new GraphState();
    }
}
