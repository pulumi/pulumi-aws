// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Grafana
{
    /// <summary>
    /// Provides an Amazon Managed Grafana workspace API Key resource.
    /// 
    /// ## Example Usage
    /// ### Basic configuration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var key = new Aws.Grafana.WorkspaceApiKey("key", new()
    ///     {
    ///         KeyName = "test-key",
    ///         KeyRole = "VIEWER",
    ///         SecondsToLive = 3600,
    ///         WorkspaceId = aws_grafana_workspace.Test.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:grafana/workspaceApiKey:WorkspaceApiKey")]
    public partial class WorkspaceApiKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The key token in JSON format. Use this value as a bearer token to authenticate HTTP requests to the workspace.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the API key. Key names must be unique to the workspace.
        /// </summary>
        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        /// <summary>
        /// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
        /// </summary>
        [Output("keyRole")]
        public Output<string> KeyRole { get; private set; } = null!;

        /// <summary>
        /// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
        /// </summary>
        [Output("secondsToLive")]
        public Output<int> SecondsToLive { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace that the API key is valid for.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a WorkspaceApiKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkspaceApiKey(string name, WorkspaceApiKeyArgs args, CustomResourceOptions? options = null)
            : base("aws:grafana/workspaceApiKey:WorkspaceApiKey", name, args ?? new WorkspaceApiKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkspaceApiKey(string name, Input<string> id, WorkspaceApiKeyState? state = null, CustomResourceOptions? options = null)
            : base("aws:grafana/workspaceApiKey:WorkspaceApiKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkspaceApiKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkspaceApiKey Get(string name, Input<string> id, WorkspaceApiKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkspaceApiKey(name, id, state, options);
        }
    }

    public sealed class WorkspaceApiKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the name of the API key. Key names must be unique to the workspace.
        /// </summary>
        [Input("keyName", required: true)]
        public Input<string> KeyName { get; set; } = null!;

        /// <summary>
        /// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
        /// </summary>
        [Input("keyRole", required: true)]
        public Input<string> KeyRole { get; set; } = null!;

        /// <summary>
        /// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
        /// </summary>
        [Input("secondsToLive", required: true)]
        public Input<int> SecondsToLive { get; set; } = null!;

        /// <summary>
        /// The ID of the workspace that the API key is valid for.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public WorkspaceApiKeyArgs()
        {
        }
        public static new WorkspaceApiKeyArgs Empty => new WorkspaceApiKeyArgs();
    }

    public sealed class WorkspaceApiKeyState : global::Pulumi.ResourceArgs
    {
        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// The key token in JSON format. Use this value as a bearer token to authenticate HTTP requests to the workspace.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies the name of the API key. Key names must be unique to the workspace.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Specifies the permission level of the API key. Valid values are `VIEWER`, `EDITOR`, or `ADMIN`.
        /// </summary>
        [Input("keyRole")]
        public Input<string>? KeyRole { get; set; }

        /// <summary>
        /// Specifies the time in seconds until the API key expires. Keys can be valid for up to 30 days.
        /// </summary>
        [Input("secondsToLive")]
        public Input<int>? SecondsToLive { get; set; }

        /// <summary>
        /// The ID of the workspace that the API key is valid for.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public WorkspaceApiKeyState()
        {
        }
        public static new WorkspaceApiKeyState Empty => new WorkspaceApiKeyState();
    }
}
