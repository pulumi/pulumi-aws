// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DevOpsGuru
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.DevOpsGuru.EventSourcesConfig("example", new()
    ///     {
    ///         EventSources = new[]
    ///         {
    ///             new Aws.DevOpsGuru.Inputs.EventSourcesConfigEventSourceArgs
    ///             {
    ///                 AmazonCodeGuruProfilers = new[]
    ///                 {
    ///                     new Aws.DevOpsGuru.Inputs.EventSourcesConfigEventSourceAmazonCodeGuruProfilerArgs
    ///                     {
    ///                         Status = "ENABLED",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DevOps Guru Event Sources Config using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:devopsguru/eventSourcesConfig:EventSourcesConfig example us-east-1
    /// ```
    /// </summary>
    [AwsResourceType("aws:devopsguru/eventSourcesConfig:EventSourcesConfig")]
    public partial class EventSourcesConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `event_sources` below.
        /// </summary>
        [Output("eventSources")]
        public Output<ImmutableArray<Outputs.EventSourcesConfigEventSource>> EventSources { get; private set; } = null!;


        /// <summary>
        /// Create a EventSourcesConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventSourcesConfig(string name, EventSourcesConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:devopsguru/eventSourcesConfig:EventSourcesConfig", name, args ?? new EventSourcesConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventSourcesConfig(string name, Input<string> id, EventSourcesConfigState? state = null, CustomResourceOptions? options = null)
            : base("aws:devopsguru/eventSourcesConfig:EventSourcesConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventSourcesConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventSourcesConfig Get(string name, Input<string> id, EventSourcesConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new EventSourcesConfig(name, id, state, options);
        }
    }

    public sealed class EventSourcesConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("eventSources")]
        private InputList<Inputs.EventSourcesConfigEventSourceArgs>? _eventSources;

        /// <summary>
        /// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `event_sources` below.
        /// </summary>
        public InputList<Inputs.EventSourcesConfigEventSourceArgs> EventSources
        {
            get => _eventSources ?? (_eventSources = new InputList<Inputs.EventSourcesConfigEventSourceArgs>());
            set => _eventSources = value;
        }

        public EventSourcesConfigArgs()
        {
        }
        public static new EventSourcesConfigArgs Empty => new EventSourcesConfigArgs();
    }

    public sealed class EventSourcesConfigState : global::Pulumi.ResourceArgs
    {
        [Input("eventSources")]
        private InputList<Inputs.EventSourcesConfigEventSourceGetArgs>? _eventSources;

        /// <summary>
        /// Configuration information about the integration of DevOps Guru as the Consumer via EventBridge with another AWS Service. See `event_sources` below.
        /// </summary>
        public InputList<Inputs.EventSourcesConfigEventSourceGetArgs> EventSources
        {
            get => _eventSources ?? (_eventSources = new InputList<Inputs.EventSourcesConfigEventSourceGetArgs>());
            set => _eventSources = value;
        }

        public EventSourcesConfigState()
        {
        }
        public static new EventSourcesConfigState Empty => new EventSourcesConfigState();
    }
}
