// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Evidently
{
    /// <summary>
    /// Provides a CloudWatch Evidently Launch resource.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 0 },
    ///                     },
    ///                     StartTime = "2024-01-07 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With description
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         Description = "example description",
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 0 },
    ///                     },
    ///                     StartTime = "2024-01-07 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With multiple groups
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///                 Description = "first-group",
    ///             },
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation2",
    ///                 Variation = "Variation2",
    ///                 Description = "second-group",
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 0 },
    ///                         { "Variation2", 0 },
    ///                     },
    ///                     StartTime = "2024-01-07 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With metric_monitors
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///             },
    ///         },
    ///         MetricMonitors = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchMetricMonitorArgs
    ///             {
    ///                 MetricDefinition = new Aws.Evidently.Inputs.LaunchMetricMonitorMetricDefinitionArgs
    ///                 {
    ///                     EntityIdKey = "entity_id_key1",
    ///                     EventPattern = "{\"Price\":[{\"numeric\":[\"&gt;\",11,\"&lt;=\",22]}]}",
    ///                     Name = "name1",
    ///                     UnitLabel = "unit_label1",
    ///                     ValueKey = "value_key1",
    ///                 },
    ///             },
    ///             new Aws.Evidently.Inputs.LaunchMetricMonitorArgs
    ///             {
    ///                 MetricDefinition = new Aws.Evidently.Inputs.LaunchMetricMonitorMetricDefinitionArgs
    ///                 {
    ///                     EntityIdKey = "entity_id_key2",
    ///                     EventPattern = "{\"Price\":[{\"numeric\":[\"&gt;\",9,\"&lt;=\",19]}]}",
    ///                     Name = "name2",
    ///                     UnitLabel = "unit_label2",
    ///                     ValueKey = "value_key2",
    ///                 },
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 0 },
    ///                     },
    ///                     StartTime = "2024-01-07 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With randomization_salt
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         RandomizationSalt = "example randomization salt",
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 0 },
    ///                     },
    ///                     StartTime = "2024-01-07 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With multiple steps
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///             },
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation2",
    ///                 Variation = "Variation2",
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 15 },
    ///                         { "Variation2", 10 },
    ///                     },
    ///                     StartTime = "2024-01-07 01:43:59+00:00",
    ///                 },
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 20 },
    ///                         { "Variation2", 25 },
    ///                     },
    ///                     StartTime = "2024-01-08 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With segment overrides
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Launch("example", new()
    ///     {
    ///         Project = aws_evidently_project.Example.Name,
    ///         Groups = new[]
    ///         {
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation1",
    ///                 Variation = "Variation1",
    ///             },
    ///             new Aws.Evidently.Inputs.LaunchGroupArgs
    ///             {
    ///                 Feature = aws_evidently_feature.Example.Name,
    ///                 Name = "Variation2",
    ///                 Variation = "Variation2",
    ///             },
    ///         },
    ///         ScheduledSplitsConfig = new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigArgs
    ///         {
    ///             Steps = new[]
    ///             {
    ///                 new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepArgs
    ///                 {
    ///                     GroupWeights = 
    ///                     {
    ///                         { "Variation1", 0 },
    ///                         { "Variation2", 0 },
    ///                     },
    ///                     SegmentOverrides = new[]
    ///                     {
    ///                         new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepSegmentOverrideArgs
    ///                         {
    ///                             EvaluationOrder = 1,
    ///                             Segment = aws_evidently_segment.Example.Name,
    ///                             Weights = 
    ///                             {
    ///                                 { "Variation2", 10000 },
    ///                             },
    ///                         },
    ///                         new Aws.Evidently.Inputs.LaunchScheduledSplitsConfigStepSegmentOverrideArgs
    ///                         {
    ///                             EvaluationOrder = 2,
    ///                             Segment = aws_evidently_segment.Example.Name,
    ///                             Weights = 
    ///                             {
    ///                                 { "Variation1", 40000 },
    ///                                 { "Variation2", 30000 },
    ///                             },
    ///                         },
    ///                     },
    ///                     StartTime = "2024-01-08 01:43:59+00:00",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import using the `name` of the launch and `arn` of the project separated by a `:`:
    /// 
    /// __Using `pulumi import` to import__ CloudWatch Evidently Launch using the `name` of the launch and `name` of the project or `arn` of the hosting CloudWatch Evidently Project separated by a `:`. For example:
    /// 
    /// Import using the `name` of the launch and `name` of the project separated by a `:`:
    /// 
    /// ```sh
    ///  $ pulumi import aws:evidently/launch:Launch example exampleLaunchName:exampleProjectName
    /// ```
    ///  Import using the `name` of the launch and `arn` of the project separated by a `:`:
    /// 
    /// ```sh
    ///  $ pulumi import aws:evidently/launch:Launch example exampleLaunchName:arn:aws:evidently:us-east-1:123456789012:project/exampleProjectName
    /// ```
    /// </summary>
    [AwsResourceType("aws:evidently/launch:Launch")]
    public partial class Launch : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the launch.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The date and time that the launch is created.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the description of the launch.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A block that contains information about the start and end times of the launch. Detailed below
        /// </summary>
        [Output("executions")]
        public Output<ImmutableArray<Outputs.LaunchExecution>> Executions { get; private set; } = null!;

        /// <summary>
        /// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.LaunchGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// The date and time that the launch was most recently updated.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
        /// </summary>
        [Output("metricMonitors")]
        public Output<ImmutableArray<Outputs.LaunchMetricMonitor>> MetricMonitors { get; private set; } = null!;

        /// <summary>
        /// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name or ARN of the project that is to contain the new launch.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
        /// </summary>
        [Output("randomizationSalt")]
        public Output<string?> RandomizationSalt { get; private set; } = null!;

        /// <summary>
        /// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
        /// </summary>
        [Output("scheduledSplitsConfig")]
        public Output<Outputs.LaunchScheduledSplitsConfig?> ScheduledSplitsConfig { get; private set; } = null!;

        /// <summary>
        /// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
        /// </summary>
        [Output("statusReason")]
        public Output<string> StatusReason { get; private set; } = null!;

        /// <summary>
        /// Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The type of launch.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Launch resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Launch(string name, LaunchArgs args, CustomResourceOptions? options = null)
            : base("aws:evidently/launch:Launch", name, args ?? new LaunchArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Launch(string name, Input<string> id, LaunchState? state = null, CustomResourceOptions? options = null)
            : base("aws:evidently/launch:Launch", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Launch resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Launch Get(string name, Input<string> id, LaunchState? state = null, CustomResourceOptions? options = null)
        {
            return new Launch(name, id, state, options);
        }
    }

    public sealed class LaunchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the description of the launch.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups", required: true)]
        private InputList<Inputs.LaunchGroupArgs>? _groups;

        /// <summary>
        /// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
        /// </summary>
        public InputList<Inputs.LaunchGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.LaunchGroupArgs>());
            set => _groups = value;
        }

        [Input("metricMonitors")]
        private InputList<Inputs.LaunchMetricMonitorArgs>? _metricMonitors;

        /// <summary>
        /// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
        /// </summary>
        public InputList<Inputs.LaunchMetricMonitorArgs> MetricMonitors
        {
            get => _metricMonitors ?? (_metricMonitors = new InputList<Inputs.LaunchMetricMonitorArgs>());
            set => _metricMonitors = value;
        }

        /// <summary>
        /// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name or ARN of the project that is to contain the new launch.
        /// </summary>
        [Input("project", required: true)]
        public Input<string> Project { get; set; } = null!;

        /// <summary>
        /// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
        /// </summary>
        [Input("randomizationSalt")]
        public Input<string>? RandomizationSalt { get; set; }

        /// <summary>
        /// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
        /// </summary>
        [Input("scheduledSplitsConfig")]
        public Input<Inputs.LaunchScheduledSplitsConfigArgs>? ScheduledSplitsConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LaunchArgs()
        {
        }
        public static new LaunchArgs Empty => new LaunchArgs();
    }

    public sealed class LaunchState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the launch.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The date and time that the launch is created.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// Specifies the description of the launch.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("executions")]
        private InputList<Inputs.LaunchExecutionGetArgs>? _executions;

        /// <summary>
        /// A block that contains information about the start and end times of the launch. Detailed below
        /// </summary>
        public InputList<Inputs.LaunchExecutionGetArgs> Executions
        {
            get => _executions ?? (_executions = new InputList<Inputs.LaunchExecutionGetArgs>());
            set => _executions = value;
        }

        [Input("groups")]
        private InputList<Inputs.LaunchGroupGetArgs>? _groups;

        /// <summary>
        /// One or up to five blocks that contain the feature and variations that are to be used for the launch. Detailed below.
        /// </summary>
        public InputList<Inputs.LaunchGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.LaunchGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// The date and time that the launch was most recently updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        [Input("metricMonitors")]
        private InputList<Inputs.LaunchMetricMonitorGetArgs>? _metricMonitors;

        /// <summary>
        /// One or up to three blocks that define the metrics that will be used to monitor the launch performance. Detailed below.
        /// </summary>
        public InputList<Inputs.LaunchMetricMonitorGetArgs> MetricMonitors
        {
            get => _metricMonitors ?? (_metricMonitors = new InputList<Inputs.LaunchMetricMonitorGetArgs>());
            set => _metricMonitors = value;
        }

        /// <summary>
        /// The name for the new launch. Minimum length of `1`. Maximum length of `127`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name or ARN of the project that is to contain the new launch.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and randomizationSalt. If you omit randomizationSalt, Evidently uses the launch name as the randomizationSalt.
        /// </summary>
        [Input("randomizationSalt")]
        public Input<string>? RandomizationSalt { get; set; }

        /// <summary>
        /// A block that defines the traffic allocation percentages among the feature variations during each step of the launch. Detailed below.
        /// </summary>
        [Input("scheduledSplitsConfig")]
        public Input<Inputs.LaunchScheduledSplitsConfigGetArgs>? ScheduledSplitsConfig { get; set; }

        /// <summary>
        /// The current state of the launch. Valid values are `CREATED`, `UPDATING`, `RUNNING`, `COMPLETED`, and `CANCELLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// If the launch was stopped, this is the string that was entered by the person who stopped the launch, to explain why it was stopped.
        /// </summary>
        [Input("statusReason")]
        public Input<string>? StatusReason { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the launch. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The type of launch.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public LaunchState()
        {
        }
        public static new LaunchState Empty => new LaunchState();
    }
}
