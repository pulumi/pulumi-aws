// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Evidently
{
    /// <summary>
    /// Provides a CloudWatch Evidently Project resource.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Project("example", new()
    ///     {
    ///         Description = "Example Description",
    ///         Tags = 
    ///         {
    ///             { "Key1", "example Project" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Store evaluation events in a CloudWatch Log Group
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Project("example", new()
    ///     {
    ///         DataDelivery = new Aws.Evidently.Inputs.ProjectDataDeliveryArgs
    ///         {
    ///             CloudwatchLogs = new Aws.Evidently.Inputs.ProjectDataDeliveryCloudwatchLogsArgs
    ///             {
    ///                 LogGroup = "example-log-group-name",
    ///             },
    ///         },
    ///         Description = "Example Description",
    ///         Tags = 
    ///         {
    ///             { "Key1", "example Project" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Store evaluation events in an S3 bucket
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Project("example", new()
    ///     {
    ///         DataDelivery = new Aws.Evidently.Inputs.ProjectDataDeliveryArgs
    ///         {
    ///             S3Destination = new Aws.Evidently.Inputs.ProjectDataDeliveryS3DestinationArgs
    ///             {
    ///                 Bucket = "example-bucket-name",
    ///                 Prefix = "example",
    ///             },
    ///         },
    ///         Description = "Example Description",
    ///         Tags = 
    ///         {
    ///             { "Key1", "example Project" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_evidently_project.example
    /// 
    ///  id = "arn:aws:evidently:us-east-1:123456789012:segment/example" } Using `pulumi import`, import CloudWatch Evidently Project using the `arn`. For exampleconsole % pulumi import aws_evidently_project.example arn:aws:evidently:us-east-1:123456789012:segment/example
    /// </summary>
    [AwsResourceType("aws:evidently/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The number of ongoing experiments currently in the project.
        /// </summary>
        [Output("activeExperimentCount")]
        public Output<int> ActiveExperimentCount { get; private set; } = null!;

        /// <summary>
        /// The number of ongoing launches currently in the project.
        /// </summary>
        [Output("activeLaunchCount")]
        public Output<int> ActiveLaunchCount { get; private set; } = null!;

        /// <summary>
        /// The ARN of the project.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The date and time that the project is created.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
        /// </summary>
        [Output("dataDelivery")]
        public Output<Outputs.ProjectDataDelivery?> DataDelivery { get; private set; } = null!;

        /// <summary>
        /// Specifies the description of the project.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
        /// </summary>
        [Output("experimentCount")]
        public Output<int> ExperimentCount { get; private set; } = null!;

        /// <summary>
        /// The number of features currently in the project.
        /// </summary>
        [Output("featureCount")]
        public Output<int> FeatureCount { get; private set; } = null!;

        /// <summary>
        /// The date and time that the project was most recently updated.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
        /// </summary>
        [Output("launchCount")]
        public Output<int> LaunchCount { get; private set; } = null!;

        /// <summary>
        /// A name for the project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags to apply to the project. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:evidently/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("aws:evidently/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
        /// </summary>
        [Input("dataDelivery")]
        public Input<Inputs.ProjectDataDeliveryArgs>? DataDelivery { get; set; }

        /// <summary>
        /// Specifies the description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the project. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of ongoing experiments currently in the project.
        /// </summary>
        [Input("activeExperimentCount")]
        public Input<int>? ActiveExperimentCount { get; set; }

        /// <summary>
        /// The number of ongoing launches currently in the project.
        /// </summary>
        [Input("activeLaunchCount")]
        public Input<int>? ActiveLaunchCount { get; set; }

        /// <summary>
        /// The ARN of the project.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The date and time that the project is created.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// A block that contains information about where Evidently is to store evaluation events for longer term storage, if you choose to do so. If you choose not to store these events, Evidently deletes them after using them to produce metrics and other experiment results that you can view. See below.
        /// </summary>
        [Input("dataDelivery")]
        public Input<Inputs.ProjectDataDeliveryGetArgs>? DataDelivery { get; set; }

        /// <summary>
        /// Specifies the description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The number of experiments currently in the project. This includes all experiments that have been created and not deleted, whether they are ongoing or not.
        /// </summary>
        [Input("experimentCount")]
        public Input<int>? ExperimentCount { get; set; }

        /// <summary>
        /// The number of features currently in the project.
        /// </summary>
        [Input("featureCount")]
        public Input<int>? FeatureCount { get; set; }

        /// <summary>
        /// The date and time that the project was most recently updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// The number of launches currently in the project. This includes all launches that have been created and not deleted, whether they are ongoing or not.
        /// </summary>
        [Input("launchCount")]
        public Input<int>? LaunchCount { get; set; }

        /// <summary>
        /// A name for the project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The current state of the project. Valid values are `AVAILABLE` and `UPDATING`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the project. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
