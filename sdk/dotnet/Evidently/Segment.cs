// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Evidently
{
    /// <summary>
    /// Provides a CloudWatch Evidently Segment resource.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Segment("example", new()
    ///     {
    ///         Pattern = "{\"Price\":[{\"numeric\":[\"&gt;\",10,\"&lt;=\",20]}]}",
    ///         Tags = 
    ///         {
    ///             { "Key1", "example Segment" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With JSON object in pattern
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Segment("example", new()
    ///     {
    ///         Pattern = @"  {
    ///     ""Price"": [
    ///       {
    ///         ""numeric"": [""&gt;"",10,""&lt;="",20]
    ///       }
    ///     ]
    ///   }
    ///   
    /// ",
    ///         Tags = 
    ///         {
    ///             { "Key1", "example Segment" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With Description
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Evidently.Segment("example", new()
    ///     {
    ///         Description = "example",
    ///         Pattern = "{\"Price\":[{\"numeric\":[\"&gt;\",10,\"&lt;=\",20]}]}",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudWatch Evidently Segment using the `arn`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:evidently/segment:Segment example arn:aws:evidently:us-west-2:123456789012:segment/example
    /// ```
    /// </summary>
    [AwsResourceType("aws:evidently/segment:Segment")]
    public partial class Segment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the segment.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The date and time that the segment is created.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// Specifies the description of the segment.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
        /// </summary>
        [Output("experimentCount")]
        public Output<int> ExperimentCount { get; private set; } = null!;

        /// <summary>
        /// The date and time that this segment was most recently updated.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
        /// </summary>
        [Output("launchCount")]
        public Output<int> LaunchCount { get; private set; } = null!;

        /// <summary>
        /// A name for the segment.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
        /// </summary>
        [Output("pattern")]
        public Output<string> Pattern { get; private set; } = null!;

        /// <summary>
        /// Tags to apply to the segment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Segment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Segment(string name, SegmentArgs args, CustomResourceOptions? options = null)
            : base("aws:evidently/segment:Segment", name, args ?? new SegmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Segment(string name, Input<string> id, SegmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:evidently/segment:Segment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Segment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Segment Get(string name, Input<string> id, SegmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Segment(name, id, state, options);
        }
    }

    public sealed class SegmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the description of the segment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the segment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
        /// </summary>
        [Input("pattern", required: true)]
        public Input<string> Pattern { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the segment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SegmentArgs()
        {
        }
        public static new SegmentArgs Empty => new SegmentArgs();
    }

    public sealed class SegmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the segment.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The date and time that the segment is created.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// Specifies the description of the segment.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The number of experiments that this segment is used in. This count includes all current experiments, not just those that are currently running.
        /// </summary>
        [Input("experimentCount")]
        public Input<int>? ExperimentCount { get; set; }

        /// <summary>
        /// The date and time that this segment was most recently updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// The number of launches that this segment is used in. This count includes all current launches, not just those that are currently running.
        /// </summary>
        [Input("launchCount")]
        public Input<int>? LaunchCount { get; set; }

        /// <summary>
        /// A name for the segment.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The pattern to use for the segment. For more information about pattern syntax, see [Segment rule pattern syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html).
        /// </summary>
        [Input("pattern")]
        public Input<string>? Pattern { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the segment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public SegmentState()
        {
        }
        public static new SegmentState Empty => new SegmentState();
    }
}
