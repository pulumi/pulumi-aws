// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFormation
{
    public static class GetCloudFormationType
    {
        /// <summary>
        /// Provides details about a CloudFormation Type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.CloudFormation.GetCloudFormationType.Invoke(new()
        ///     {
        ///         Type = "RESOURCE",
        ///         TypeName = "AWS::Athena::WorkGroup",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCloudFormationTypeResult> InvokeAsync(GetCloudFormationTypeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCloudFormationTypeResult>("aws:cloudformation/getCloudFormationType:getCloudFormationType", args ?? new GetCloudFormationTypeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a CloudFormation Type.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.CloudFormation.GetCloudFormationType.Invoke(new()
        ///     {
        ///         Type = "RESOURCE",
        ///         TypeName = "AWS::Athena::WorkGroup",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCloudFormationTypeResult> Invoke(GetCloudFormationTypeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCloudFormationTypeResult>("aws:cloudformation/getCloudFormationType:getCloudFormationType", args ?? new GetCloudFormationTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCloudFormationTypeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
        /// </summary>
        [Input("arn")]
        public string? Arn { get; set; }

        /// <summary>
        /// CloudFormation Registry Type. For example, `RESOURCE`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// CloudFormation Type name. For example, `AWS::EC2::VPC`.
        /// </summary>
        [Input("typeName")]
        public string? TypeName { get; set; }

        /// <summary>
        /// Identifier of the CloudFormation Type version.
        /// </summary>
        [Input("versionId")]
        public string? VersionId { get; set; }

        public GetCloudFormationTypeArgs()
        {
        }
        public static new GetCloudFormationTypeArgs Empty => new GetCloudFormationTypeArgs();
    }

    public sealed class GetCloudFormationTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the CloudFormation Type. For example, `arn:aws:cloudformation:us-west-2::type/resource/AWS-EC2-VPC`.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// CloudFormation Registry Type. For example, `RESOURCE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// CloudFormation Type name. For example, `AWS::EC2::VPC`.
        /// </summary>
        [Input("typeName")]
        public Input<string>? TypeName { get; set; }

        /// <summary>
        /// Identifier of the CloudFormation Type version.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        public GetCloudFormationTypeInvokeArgs()
        {
        }
        public static new GetCloudFormationTypeInvokeArgs Empty => new GetCloudFormationTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetCloudFormationTypeResult
    {
        public readonly string Arn;
        /// <summary>
        /// Identifier of the CloudFormation Type default version.
        /// </summary>
        public readonly string DefaultVersionId;
        /// <summary>
        /// Deprecation status of the CloudFormation Type.
        /// </summary>
        public readonly string DeprecatedStatus;
        /// <summary>
        /// Description of the CloudFormation Type.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// URL of the documentation for the CloudFormation Type.
        /// </summary>
        public readonly string DocumentationUrl;
        /// <summary>
        /// ARN of the IAM Role used to register the CloudFormation Type.
        /// </summary>
        public readonly string ExecutionRoleArn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the CloudFormation Type version is the default version.
        /// </summary>
        public readonly bool IsDefaultVersion;
        /// <summary>
        /// List of objects containing logging configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCloudFormationTypeLoggingConfigResult> LoggingConfigs;
        /// <summary>
        /// Provisioning behavior of the CloudFormation Type.
        /// </summary>
        public readonly string ProvisioningType;
        /// <summary>
        /// JSON document of the CloudFormation Type schema.
        /// </summary>
        public readonly string Schema;
        /// <summary>
        /// URL of the source code for the CloudFormation Type.
        /// </summary>
        public readonly string SourceUrl;
        public readonly string Type;
        public readonly string TypeArn;
        public readonly string TypeName;
        public readonly string? VersionId;
        /// <summary>
        /// Scope of the CloudFormation Type.
        /// </summary>
        public readonly string Visibility;

        [OutputConstructor]
        private GetCloudFormationTypeResult(
            string arn,

            string defaultVersionId,

            string deprecatedStatus,

            string description,

            string documentationUrl,

            string executionRoleArn,

            string id,

            bool isDefaultVersion,

            ImmutableArray<Outputs.GetCloudFormationTypeLoggingConfigResult> loggingConfigs,

            string provisioningType,

            string schema,

            string sourceUrl,

            string type,

            string typeArn,

            string typeName,

            string? versionId,

            string visibility)
        {
            Arn = arn;
            DefaultVersionId = defaultVersionId;
            DeprecatedStatus = deprecatedStatus;
            Description = description;
            DocumentationUrl = documentationUrl;
            ExecutionRoleArn = executionRoleArn;
            Id = id;
            IsDefaultVersion = isDefaultVersion;
            LoggingConfigs = loggingConfigs;
            ProvisioningType = provisioningType;
            Schema = schema;
            SourceUrl = sourceUrl;
            Type = type;
            TypeArn = typeArn;
            TypeName = typeName;
            VersionId = versionId;
            Visibility = visibility;
        }
    }
}
