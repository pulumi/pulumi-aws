// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFormation.Inputs
{

    public sealed class StackInstancesOperationPreferencesGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// How the concurrency level behaves during the operation execution. Valid values are `STRICT_FAILURE_TOLERANCE` and `SOFT_FAILURE_TOLERANCE`.
        /// </summary>
        [Input("concurrencyMode")]
        public Input<string>? ConcurrencyMode { get; set; }

        /// <summary>
        /// Number of accounts, per region, for which this operation can fail before CloudFormation stops the operation in that region.
        /// </summary>
        [Input("failureToleranceCount")]
        public Input<int>? FailureToleranceCount { get; set; }

        /// <summary>
        /// Percentage of accounts, per region, for which this stack operation can fail before CloudFormation stops the operation in that region.
        /// </summary>
        [Input("failureTolerancePercentage")]
        public Input<int>? FailureTolerancePercentage { get; set; }

        /// <summary>
        /// Maximum number of accounts in which to perform this operation at one time.
        /// </summary>
        [Input("maxConcurrentCount")]
        public Input<int>? MaxConcurrentCount { get; set; }

        /// <summary>
        /// Maximum percentage of accounts in which to perform this operation at one time.
        /// </summary>
        [Input("maxConcurrentPercentage")]
        public Input<int>? MaxConcurrentPercentage { get; set; }

        /// <summary>
        /// Concurrency type of deploying stack sets operations in regions, could be in parallel or one region at a time. Valid values are `SEQUENTIAL` and `PARALLEL`.
        /// </summary>
        [Input("regionConcurrencyType")]
        public Input<string>? RegionConcurrencyType { get; set; }

        [Input("regionOrders")]
        private InputList<string>? _regionOrders;

        /// <summary>
        /// Order of the regions where you want to perform the stack operation.
        /// </summary>
        public InputList<string> RegionOrders
        {
            get => _regionOrders ?? (_regionOrders = new InputList<string>());
            set => _regionOrders = value;
        }

        public StackInstancesOperationPreferencesGetArgs()
        {
        }
        public static new StackInstancesOperationPreferencesGetArgs Empty => new StackInstancesOperationPreferencesGetArgs();
    }
}
