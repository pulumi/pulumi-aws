// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFormation
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudFormation.StackInstances("example", new()
    ///     {
    ///         Accounts = new[]
    ///         {
    ///             "123456789012",
    ///             "234567890123",
    ///         },
    ///         Regions = new[]
    ///         {
    ///             "us-east-1",
    ///             "us-west-2",
    ///         },
    ///         StackSetName = exampleAwsCloudformationStackSet.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example IAM Setup in Target Account
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Identifiers = new[]
    ///                         {
    ///                             aWSCloudFormationStackSetAdministrationRole.Arn,
    ///                         },
    ///                         Type = "AWS",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var aWSCloudFormationStackSetExecutionRole = new Aws.Iam.Role("AWSCloudFormationStackSetExecutionRole", new()
    ///     {
    ///         AssumeRolePolicy = aWSCloudFormationStackSetExecutionRoleAssumeRolePolicy.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         Name = "AWSCloudFormationStackSetExecutionRole",
    ///     });
    /// 
    ///     // Documentation: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs.html
    ///     // Additional IAM permissions necessary depend on the resources defined in the StackSet template
    ///     var aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "cloudformation:*",
    ///                     "s3:*",
    ///                     "sns:*",
    ///                 },
    ///                 Effect = "Allow",
    ///                 Resources = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicyRolePolicy = new Aws.Iam.RolePolicy("AWSCloudFormationStackSetExecutionRole_MinimumExecutionPolicy", new()
    ///     {
    ///         Name = "MinimumExecutionPolicy",
    ///         Policy = aWSCloudFormationStackSetExecutionRoleMinimumExecutionPolicy.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         Role = aWSCloudFormationStackSetExecutionRole.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Deployment across Organizations account
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudFormation.StackInstances("example", new()
    ///     {
    ///         DeploymentTargets = new Aws.CloudFormation.Inputs.StackInstancesDeploymentTargetsArgs
    ///         {
    ///             OrganizationalUnitIds = new[]
    ///             {
    ///                 exampleAwsOrganizationsOrganization.Roots[0].Id,
    ///             },
    ///         },
    ///         Regions = new[]
    ///         {
    ///             "us-west-2",
    ///             "us-east-1",
    ///         },
    ///         StackSetName = exampleAwsCloudformationStackSet.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import CloudFormation stack instances that target OUs, using the stack set name, `call_as`, and "OU" separated by commas (`,`). For example:
    /// 
    /// Using `pulumi import`, import CloudFormation stack instances using the stack set name and `call_as` separated by commas (`,`). If you are importing a stack instance targeting OUs, see the example below. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudformation/stackInstances:StackInstances example example,SELF
    /// ```
    /// Using `pulumi import`, Import CloudFormation stack instances that target OUs, using the stack set name, `call_as`, and "OU" separated by commas (`,`). For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudformation/stackInstances:StackInstances example example,SELF,OU
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudformation/stackInstances:StackInstances")]
    public partial class StackInstances : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Accounts where you want to create stack instances in the specified `regions`. You can specify either `accounts` or `deployment_targets`, but not both.
        /// </summary>
        [Output("accounts")]
        public Output<ImmutableArray<string>> Accounts { get; private set; } = null!;

        /// <summary>
        /// Whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: `SELF` (default), `DELEGATED_ADMIN`.
        /// </summary>
        [Output("callAs")]
        public Output<string?> CallAs { get; private set; } = null!;

        /// <summary>
        /// AWS Organizations accounts for which to create stack instances in the `regions`. stack sets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for most of this argument. See deployment_targets below.
        /// </summary>
        [Output("deploymentTargets")]
        public Output<Outputs.StackInstancesDeploymentTargets?> DeploymentTargets { get; private set; } = null!;

        /// <summary>
        /// Preferences for how AWS CloudFormation performs a stack set operation. See operation_preferences below.
        /// </summary>
        [Output("operationPreferences")]
        public Output<Outputs.StackInstancesOperationPreferences?> OperationPreferences { get; private set; } = null!;

        /// <summary>
        /// Key-value map of input parameters to override from the stack set for these instances. This argument's drift detection is limited to the first account and region since each instance can have unique parameters.
        /// </summary>
        [Output("parameterOverrides")]
        public Output<ImmutableDictionary<string, string>?> ParameterOverrides { get; private set; } = null!;

        /// <summary>
        /// Regions where you want to create stack instances in the specified `accounts`.
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// Whether to remove the stack instances from the stack set, but not delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. To retain the stack, ensure `retain_stacks = true` has been successfully applied _before_ an apply that would destroy the resource. Defaults to `false`.
        /// </summary>
        [Output("retainStacks")]
        public Output<bool?> RetainStacks { get; private set; } = null!;

        /// <summary>
        /// List of stack instances created from an organizational unit deployment target. This may not always be set depending on whether CloudFormation returns summaries for your configuration. See `stack_instance_summaries`.
        /// </summary>
        [Output("stackInstanceSummaries")]
        public Output<ImmutableArray<Outputs.StackInstancesStackInstanceSummary>> StackInstanceSummaries { get; private set; } = null!;

        /// <summary>
        /// Name or unique ID of the stack set that the stack instance is associated with.
        /// </summary>
        [Output("stackSetId")]
        public Output<string> StackSetId { get; private set; } = null!;

        /// <summary>
        /// Name of the stack set.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("stackSetName")]
        public Output<string> StackSetName { get; private set; } = null!;


        /// <summary>
        /// Create a StackInstances resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StackInstances(string name, StackInstancesArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudformation/stackInstances:StackInstances", name, args ?? new StackInstancesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StackInstances(string name, Input<string> id, StackInstancesState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudformation/stackInstances:StackInstances", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StackInstances resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StackInstances Get(string name, Input<string> id, StackInstancesState? state = null, CustomResourceOptions? options = null)
        {
            return new StackInstances(name, id, state, options);
        }
    }

    public sealed class StackInstancesArgs : global::Pulumi.ResourceArgs
    {
        [Input("accounts")]
        private InputList<string>? _accounts;

        /// <summary>
        /// Accounts where you want to create stack instances in the specified `regions`. You can specify either `accounts` or `deployment_targets`, but not both.
        /// </summary>
        public InputList<string> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<string>());
            set => _accounts = value;
        }

        /// <summary>
        /// Whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: `SELF` (default), `DELEGATED_ADMIN`.
        /// </summary>
        [Input("callAs")]
        public Input<string>? CallAs { get; set; }

        /// <summary>
        /// AWS Organizations accounts for which to create stack instances in the `regions`. stack sets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for most of this argument. See deployment_targets below.
        /// </summary>
        [Input("deploymentTargets")]
        public Input<Inputs.StackInstancesDeploymentTargetsArgs>? DeploymentTargets { get; set; }

        /// <summary>
        /// Preferences for how AWS CloudFormation performs a stack set operation. See operation_preferences below.
        /// </summary>
        [Input("operationPreferences")]
        public Input<Inputs.StackInstancesOperationPreferencesArgs>? OperationPreferences { get; set; }

        [Input("parameterOverrides")]
        private InputMap<string>? _parameterOverrides;

        /// <summary>
        /// Key-value map of input parameters to override from the stack set for these instances. This argument's drift detection is limited to the first account and region since each instance can have unique parameters.
        /// </summary>
        public InputMap<string> ParameterOverrides
        {
            get => _parameterOverrides ?? (_parameterOverrides = new InputMap<string>());
            set => _parameterOverrides = value;
        }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// Regions where you want to create stack instances in the specified `accounts`.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// Whether to remove the stack instances from the stack set, but not delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. To retain the stack, ensure `retain_stacks = true` has been successfully applied _before_ an apply that would destroy the resource. Defaults to `false`.
        /// </summary>
        [Input("retainStacks")]
        public Input<bool>? RetainStacks { get; set; }

        /// <summary>
        /// Name of the stack set.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("stackSetName", required: true)]
        public Input<string> StackSetName { get; set; } = null!;

        public StackInstancesArgs()
        {
        }
        public static new StackInstancesArgs Empty => new StackInstancesArgs();
    }

    public sealed class StackInstancesState : global::Pulumi.ResourceArgs
    {
        [Input("accounts")]
        private InputList<string>? _accounts;

        /// <summary>
        /// Accounts where you want to create stack instances in the specified `regions`. You can specify either `accounts` or `deployment_targets`, but not both.
        /// </summary>
        public InputList<string> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<string>());
            set => _accounts = value;
        }

        /// <summary>
        /// Whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: `SELF` (default), `DELEGATED_ADMIN`.
        /// </summary>
        [Input("callAs")]
        public Input<string>? CallAs { get; set; }

        /// <summary>
        /// AWS Organizations accounts for which to create stack instances in the `regions`. stack sets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for most of this argument. See deployment_targets below.
        /// </summary>
        [Input("deploymentTargets")]
        public Input<Inputs.StackInstancesDeploymentTargetsGetArgs>? DeploymentTargets { get; set; }

        /// <summary>
        /// Preferences for how AWS CloudFormation performs a stack set operation. See operation_preferences below.
        /// </summary>
        [Input("operationPreferences")]
        public Input<Inputs.StackInstancesOperationPreferencesGetArgs>? OperationPreferences { get; set; }

        [Input("parameterOverrides")]
        private InputMap<string>? _parameterOverrides;

        /// <summary>
        /// Key-value map of input parameters to override from the stack set for these instances. This argument's drift detection is limited to the first account and region since each instance can have unique parameters.
        /// </summary>
        public InputMap<string> ParameterOverrides
        {
            get => _parameterOverrides ?? (_parameterOverrides = new InputMap<string>());
            set => _parameterOverrides = value;
        }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// Regions where you want to create stack instances in the specified `accounts`.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// Whether to remove the stack instances from the stack set, but not delete the stacks. You can't reassociate a retained stack or add an existing, saved stack to a new stack set. To retain the stack, ensure `retain_stacks = true` has been successfully applied _before_ an apply that would destroy the resource. Defaults to `false`.
        /// </summary>
        [Input("retainStacks")]
        public Input<bool>? RetainStacks { get; set; }

        [Input("stackInstanceSummaries")]
        private InputList<Inputs.StackInstancesStackInstanceSummaryGetArgs>? _stackInstanceSummaries;

        /// <summary>
        /// List of stack instances created from an organizational unit deployment target. This may not always be set depending on whether CloudFormation returns summaries for your configuration. See `stack_instance_summaries`.
        /// </summary>
        public InputList<Inputs.StackInstancesStackInstanceSummaryGetArgs> StackInstanceSummaries
        {
            get => _stackInstanceSummaries ?? (_stackInstanceSummaries = new InputList<Inputs.StackInstancesStackInstanceSummaryGetArgs>());
            set => _stackInstanceSummaries = value;
        }

        /// <summary>
        /// Name or unique ID of the stack set that the stack instance is associated with.
        /// </summary>
        [Input("stackSetId")]
        public Input<string>? StackSetId { get; set; }

        /// <summary>
        /// Name of the stack set.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("stackSetName")]
        public Input<string>? StackSetName { get; set; }

        public StackInstancesState()
        {
        }
        public static new StackInstancesState Empty => new StackInstancesState();
    }
}
