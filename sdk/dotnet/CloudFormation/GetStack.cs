// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFormation
{
    public static class GetStack
    {
        /// <summary>
        /// The CloudFormation Stack data source allows access to stack
        /// outputs and other useful data including the template body.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const network = aws.cloudformation.getStack({
        ///     name: "my-network-stack",
        /// });
        /// const web = new aws.ec2.Instance("web", {
        ///     ami: "ami-abb07bcb",
        ///     instanceType: "t2.micro",
        ///     subnetId: network.then(network =&gt; network.outputs?.SubnetId),
        ///     tags: {
        ///         Name: "HelloWorld",
        ///     },
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// network = aws.cloudformation.get_stack(name="my-network-stack")
        /// web = aws.ec2.Instance("web",
        ///     ami="ami-abb07bcb",
        ///     instance_type="t2.micro",
        ///     subnet_id=network.outputs["SubnetId"],
        ///     tags={
        ///         "Name": "HelloWorld",
        ///     })
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network = Aws.CloudFormation.GetStack.Invoke(new()
        ///     {
        ///         Name = "my-network-stack",
        ///     });
        /// 
        ///     var web = new Aws.Ec2.Instance("web", new()
        ///     {
        ///         Ami = "ami-abb07bcb",
        ///         InstanceType = "t2.micro",
        ///         SubnetId = network.Apply(getStackResult =&gt; getStackResult.Outputs?.SubnetId),
        ///         Tags = 
        ///         {
        ///             { "Name", "HelloWorld" },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudformation"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		network, err := cloudformation.LookupStack(ctx, &amp;cloudformation.LookupStackArgs{
        /// 			Name: "my-network-stack",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewInstance(ctx, "web", &amp;ec2.InstanceArgs{
        /// 			Ami:          pulumi.String("ami-abb07bcb"),
        /// 			InstanceType: pulumi.String("t2.micro"),
        /// 			SubnetId:     *pulumi.String(network.Outputs.SubnetId),
        /// 			Tags: pulumi.StringMap{
        /// 				"Name": pulumi.String("HelloWorld"),
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.cloudformation.CloudformationFunctions;
        /// import com.pulumi.aws.cloudformation.inputs.GetStackArgs;
        /// import com.pulumi.aws.ec2.Instance;
        /// import com.pulumi.aws.ec2.InstanceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var network = CloudformationFunctions.getStack(GetStackArgs.builder()
        ///             .name("my-network-stack")
        ///             .build());
        /// 
        ///         var web = new Instance("web", InstanceArgs.builder()        
        ///             .ami("ami-abb07bcb")
        ///             .instanceType("t2.micro")
        ///             .subnetId(network.applyValue(getStackResult -&gt; getStackResult.outputs().SubnetId()))
        ///             .tags(Map.of("Name", "HelloWorld"))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   web:
        ///     type: aws:ec2:Instance
        ///     properties:
        ///       ami: ami-abb07bcb
        ///       instanceType: t2.micro
        ///       subnetId: ${network.outputs.SubnetId}
        ///       tags:
        ///         Name: HelloWorld
        /// variables:
        ///   network:
        ///     fn::invoke:
        ///       Function: aws:cloudformation:getStack
        ///       Arguments:
        ///         name: my-network-stack
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStackResult> InvokeAsync(GetStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStackResult>("aws:cloudformation/getStack:getStack", args ?? new GetStackArgs(), options.WithDefaults());

        /// <summary>
        /// The CloudFormation Stack data source allows access to stack
        /// outputs and other useful data including the template body.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const network = aws.cloudformation.getStack({
        ///     name: "my-network-stack",
        /// });
        /// const web = new aws.ec2.Instance("web", {
        ///     ami: "ami-abb07bcb",
        ///     instanceType: "t2.micro",
        ///     subnetId: network.then(network =&gt; network.outputs?.SubnetId),
        ///     tags: {
        ///         Name: "HelloWorld",
        ///     },
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// network = aws.cloudformation.get_stack(name="my-network-stack")
        /// web = aws.ec2.Instance("web",
        ///     ami="ami-abb07bcb",
        ///     instance_type="t2.micro",
        ///     subnet_id=network.outputs["SubnetId"],
        ///     tags={
        ///         "Name": "HelloWorld",
        ///     })
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var network = Aws.CloudFormation.GetStack.Invoke(new()
        ///     {
        ///         Name = "my-network-stack",
        ///     });
        /// 
        ///     var web = new Aws.Ec2.Instance("web", new()
        ///     {
        ///         Ami = "ami-abb07bcb",
        ///         InstanceType = "t2.micro",
        ///         SubnetId = network.Apply(getStackResult =&gt; getStackResult.Outputs?.SubnetId),
        ///         Tags = 
        ///         {
        ///             { "Name", "HelloWorld" },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudformation"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		network, err := cloudformation.LookupStack(ctx, &amp;cloudformation.LookupStackArgs{
        /// 			Name: "my-network-stack",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewInstance(ctx, "web", &amp;ec2.InstanceArgs{
        /// 			Ami:          pulumi.String("ami-abb07bcb"),
        /// 			InstanceType: pulumi.String("t2.micro"),
        /// 			SubnetId:     *pulumi.String(network.Outputs.SubnetId),
        /// 			Tags: pulumi.StringMap{
        /// 				"Name": pulumi.String("HelloWorld"),
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.cloudformation.CloudformationFunctions;
        /// import com.pulumi.aws.cloudformation.inputs.GetStackArgs;
        /// import com.pulumi.aws.ec2.Instance;
        /// import com.pulumi.aws.ec2.InstanceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var network = CloudformationFunctions.getStack(GetStackArgs.builder()
        ///             .name("my-network-stack")
        ///             .build());
        /// 
        ///         var web = new Instance("web", InstanceArgs.builder()        
        ///             .ami("ami-abb07bcb")
        ///             .instanceType("t2.micro")
        ///             .subnetId(network.applyValue(getStackResult -&gt; getStackResult.outputs().SubnetId()))
        ///             .tags(Map.of("Name", "HelloWorld"))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   web:
        ///     type: aws:ec2:Instance
        ///     properties:
        ///       ami: ami-abb07bcb
        ///       instanceType: t2.micro
        ///       subnetId: ${network.outputs.SubnetId}
        ///       tags:
        ///         Name: HelloWorld
        /// variables:
        ///   network:
        ///     fn::invoke:
        ///       Function: aws:cloudformation:getStack
        ///       Arguments:
        ///         name: my-network-stack
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("aws:cloudformation/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the stack
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags associated with this stack.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetStackArgs()
        {
        }
        public static new GetStackArgs Empty => new GetStackArgs();
    }

    public sealed class GetStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the stack
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags associated with this stack.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetStackInvokeArgs()
        {
        }
        public static new GetStackInvokeArgs Empty => new GetStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetStackResult
    {
        /// <summary>
        /// List of capabilities
        /// </summary>
        public readonly ImmutableArray<string> Capabilities;
        /// <summary>
        /// Description of the stack
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Whether the rollback of the stack is disabled when stack creation fails
        /// </summary>
        public readonly bool DisableRollback;
        /// <summary>
        /// ARN of the IAM role used to create the stack.
        /// </summary>
        public readonly string IamRoleArn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// List of SNS topic ARNs to publish stack related events
        /// </summary>
        public readonly ImmutableArray<string> NotificationArns;
        /// <summary>
        /// Map of outputs from the stack.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Outputs;
        /// <summary>
        /// Map of parameters that specify input parameters for the stack.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Parameters;
        /// <summary>
        /// Map of tags associated with this stack.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Structure containing the template body.
        /// </summary>
        public readonly string TemplateBody;
        /// <summary>
        /// Amount of time that can pass before the stack status becomes `CREATE_FAILED`
        /// </summary>
        public readonly int TimeoutInMinutes;

        [OutputConstructor]
        private GetStackResult(
            ImmutableArray<string> capabilities,

            string description,

            bool disableRollback,

            string iamRoleArn,

            string id,

            string name,

            ImmutableArray<string> notificationArns,

            ImmutableDictionary<string, string> outputs,

            ImmutableDictionary<string, string> parameters,

            ImmutableDictionary<string, string> tags,

            string templateBody,

            int timeoutInMinutes)
        {
            Capabilities = capabilities;
            Description = description;
            DisableRollback = disableRollback;
            IamRoleArn = iamRoleArn;
            Id = id;
            Name = name;
            NotificationArns = notificationArns;
            Outputs = outputs;
            Parameters = parameters;
            Tags = tags;
            TemplateBody = templateBody;
            TimeoutInMinutes = timeoutInMinutes;
        }
    }
}
