// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFormation
{
    [AwsResourceType("aws:cloudformation/cloudFormationType:CloudFormationType")]
    public partial class CloudFormationType : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("defaultVersionId")]
        public Output<string> DefaultVersionId { get; private set; } = null!;

        [Output("deprecatedStatus")]
        public Output<string> DeprecatedStatus { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("documentationUrl")]
        public Output<string> DocumentationUrl { get; private set; } = null!;

        [Output("executionRoleArn")]
        public Output<string?> ExecutionRoleArn { get; private set; } = null!;

        [Output("isDefaultVersion")]
        public Output<bool> IsDefaultVersion { get; private set; } = null!;

        [Output("loggingConfig")]
        public Output<Outputs.CloudFormationTypeLoggingConfig?> LoggingConfig { get; private set; } = null!;

        [Output("provisioningType")]
        public Output<string> ProvisioningType { get; private set; } = null!;

        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        [Output("schemaHandlerPackage")]
        public Output<string> SchemaHandlerPackage { get; private set; } = null!;

        [Output("sourceUrl")]
        public Output<string> SourceUrl { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("typeArn")]
        public Output<string> TypeArn { get; private set; } = null!;

        [Output("typeName")]
        public Output<string> TypeName { get; private set; } = null!;

        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;

        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a CloudFormationType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudFormationType(string name, CloudFormationTypeArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudformation/cloudFormationType:CloudFormationType", name, args ?? new CloudFormationTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudFormationType(string name, Input<string> id, CloudFormationTypeState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudformation/cloudFormationType:CloudFormationType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudFormationType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudFormationType Get(string name, Input<string> id, CloudFormationTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudFormationType(name, id, state, options);
        }
    }

    public sealed class CloudFormationTypeArgs : global::Pulumi.ResourceArgs
    {
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        [Input("loggingConfig")]
        public Input<Inputs.CloudFormationTypeLoggingConfigArgs>? LoggingConfig { get; set; }

        [Input("schemaHandlerPackage", required: true)]
        public Input<string> SchemaHandlerPackage { get; set; } = null!;

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("typeName", required: true)]
        public Input<string> TypeName { get; set; } = null!;

        public CloudFormationTypeArgs()
        {
        }
        public static new CloudFormationTypeArgs Empty => new CloudFormationTypeArgs();
    }

    public sealed class CloudFormationTypeState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("defaultVersionId")]
        public Input<string>? DefaultVersionId { get; set; }

        [Input("deprecatedStatus")]
        public Input<string>? DeprecatedStatus { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("documentationUrl")]
        public Input<string>? DocumentationUrl { get; set; }

        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        [Input("isDefaultVersion")]
        public Input<bool>? IsDefaultVersion { get; set; }

        [Input("loggingConfig")]
        public Input<Inputs.CloudFormationTypeLoggingConfigGetArgs>? LoggingConfig { get; set; }

        [Input("provisioningType")]
        public Input<string>? ProvisioningType { get; set; }

        [Input("schema")]
        public Input<string>? Schema { get; set; }

        [Input("schemaHandlerPackage")]
        public Input<string>? SchemaHandlerPackage { get; set; }

        [Input("sourceUrl")]
        public Input<string>? SourceUrl { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("typeArn")]
        public Input<string>? TypeArn { get; set; }

        [Input("typeName")]
        public Input<string>? TypeName { get; set; }

        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public CloudFormationTypeState()
        {
        }
        public static new CloudFormationTypeState Empty => new CloudFormationTypeState();
    }
}
