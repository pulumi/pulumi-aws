// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFormation
{
    /// <summary>
    /// Manages a version of a CloudFormation Type.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudFormation.CloudFormationType("example", new()
    ///     {
    ///         SchemaHandlerPackage = $"s3://{aws_s3_object.Example.Bucket}/{aws_s3_object.Example.Key}",
    ///         Type = "RESOURCE",
    ///         TypeName = "ExampleCompany::ExampleService::ExampleResource",
    ///         LoggingConfig = new Aws.CloudFormation.Inputs.CloudFormationTypeLoggingConfigArgs
    ///         {
    ///             LogGroupName = aws_cloudwatch_log_group.Example.Name,
    ///             LogRoleArn = aws_iam_role.Example.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_cloudformation_type` can be imported with their type version Amazon Resource Name (ARN), e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:cloudformation/cloudFormationType:CloudFormationType example arn:aws:cloudformation:us-east-1:123456789012:type/resource/ExampleCompany-ExampleService-ExampleType/1
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudformation/cloudFormationType:CloudFormationType")]
    public partial class CloudFormationType : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type version. See also `type_arn`.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Identifier of the CloudFormation Type default version.
        /// </summary>
        [Output("defaultVersionId")]
        public Output<string> DefaultVersionId { get; private set; } = null!;

        /// <summary>
        /// Deprecation status of the version.
        /// </summary>
        [Output("deprecatedStatus")]
        public Output<string> DeprecatedStatus { get; private set; } = null!;

        /// <summary>
        /// Description of the version.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// URL of the documentation for the CloudFormation Type.
        /// </summary>
        [Output("documentationUrl")]
        public Output<string> DocumentationUrl { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
        /// </summary>
        [Output("executionRoleArn")]
        public Output<string?> ExecutionRoleArn { get; private set; } = null!;

        /// <summary>
        /// Whether the CloudFormation Type version is the default version.
        /// </summary>
        [Output("isDefaultVersion")]
        public Output<bool> IsDefaultVersion { get; private set; } = null!;

        /// <summary>
        /// Configuration block containing logging configuration.
        /// </summary>
        [Output("loggingConfig")]
        public Output<Outputs.CloudFormationTypeLoggingConfig?> LoggingConfig { get; private set; } = null!;

        /// <summary>
        /// Provisioning behavior of the CloudFormation Type.
        /// </summary>
        [Output("provisioningType")]
        public Output<string> ProvisioningType { get; private set; } = null!;

        /// <summary>
        /// JSON document of the CloudFormation Type schema.
        /// </summary>
        [Output("schema")]
        public Output<string> Schema { get; private set; } = null!;

        /// <summary>
        /// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
        /// </summary>
        [Output("schemaHandlerPackage")]
        public Output<string> SchemaHandlerPackage { get; private set; } = null!;

        /// <summary>
        /// URL of the source code for the CloudFormation Type.
        /// </summary>
        [Output("sourceUrl")]
        public Output<string> SourceUrl { get; private set; } = null!;

        /// <summary>
        /// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type. See also `arn`.
        /// </summary>
        [Output("typeArn")]
        public Output<string> TypeArn { get; private set; } = null!;

        /// <summary>
        /// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
        /// </summary>
        [Output("typeName")]
        public Output<string> TypeName { get; private set; } = null!;

        /// <summary>
        /// (Optional) Identifier of the CloudFormation Type version.
        /// </summary>
        [Output("versionId")]
        public Output<string> VersionId { get; private set; } = null!;

        /// <summary>
        /// Scope of the CloudFormation Type.
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a CloudFormationType resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudFormationType(string name, CloudFormationTypeArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudformation/cloudFormationType:CloudFormationType", name, args ?? new CloudFormationTypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudFormationType(string name, Input<string> id, CloudFormationTypeState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudformation/cloudFormationType:CloudFormationType", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudFormationType resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudFormationType Get(string name, Input<string> id, CloudFormationTypeState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudFormationType(name, id, state, options);
        }
    }

    public sealed class CloudFormationTypeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// Configuration block containing logging configuration.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.CloudFormationTypeLoggingConfigArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
        /// </summary>
        [Input("schemaHandlerPackage", required: true)]
        public Input<string> SchemaHandlerPackage { get; set; } = null!;

        /// <summary>
        /// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
        /// </summary>
        [Input("typeName", required: true)]
        public Input<string> TypeName { get; set; } = null!;

        public CloudFormationTypeArgs()
        {
        }
        public static new CloudFormationTypeArgs Empty => new CloudFormationTypeArgs();
    }

    public sealed class CloudFormationTypeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type version. See also `type_arn`.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Identifier of the CloudFormation Type default version.
        /// </summary>
        [Input("defaultVersionId")]
        public Input<string>? DefaultVersionId { get; set; }

        /// <summary>
        /// Deprecation status of the version.
        /// </summary>
        [Input("deprecatedStatus")]
        public Input<string>? DeprecatedStatus { get; set; }

        /// <summary>
        /// Description of the version.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// URL of the documentation for the CloudFormation Type.
        /// </summary>
        [Input("documentationUrl")]
        public Input<string>? DocumentationUrl { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the IAM Role for CloudFormation to assume when invoking the extension. If your extension calls AWS APIs in any of its handlers, you must create an IAM execution role that includes the necessary permissions to call those AWS APIs, and provision that execution role in your account. When CloudFormation needs to invoke the extension handler, CloudFormation assumes this execution role to create a temporary session token, which it then passes to the extension handler, thereby supplying your extension with the appropriate credentials.
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// Whether the CloudFormation Type version is the default version.
        /// </summary>
        [Input("isDefaultVersion")]
        public Input<bool>? IsDefaultVersion { get; set; }

        /// <summary>
        /// Configuration block containing logging configuration.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.CloudFormationTypeLoggingConfigGetArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// Provisioning behavior of the CloudFormation Type.
        /// </summary>
        [Input("provisioningType")]
        public Input<string>? ProvisioningType { get; set; }

        /// <summary>
        /// JSON document of the CloudFormation Type schema.
        /// </summary>
        [Input("schema")]
        public Input<string>? Schema { get; set; }

        /// <summary>
        /// URL to the S3 bucket containing the extension project package that contains the necessary files for the extension you want to register. Must begin with `s3://` or `https://`. For example, `s3://example-bucket/example-object`.
        /// </summary>
        [Input("schemaHandlerPackage")]
        public Input<string>? SchemaHandlerPackage { get; set; }

        /// <summary>
        /// URL of the source code for the CloudFormation Type.
        /// </summary>
        [Input("sourceUrl")]
        public Input<string>? SourceUrl { get; set; }

        /// <summary>
        /// CloudFormation Registry Type. For example, `RESOURCE` or `MODULE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// (Optional) Amazon Resource Name (ARN) of the CloudFormation Type. See also `arn`.
        /// </summary>
        [Input("typeArn")]
        public Input<string>? TypeArn { get; set; }

        /// <summary>
        /// CloudFormation Type name. For example, `ExampleCompany::ExampleService::ExampleResource`.
        /// </summary>
        [Input("typeName")]
        public Input<string>? TypeName { get; set; }

        /// <summary>
        /// (Optional) Identifier of the CloudFormation Type version.
        /// </summary>
        [Input("versionId")]
        public Input<string>? VersionId { get; set; }

        /// <summary>
        /// Scope of the CloudFormation Type.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public CloudFormationTypeState()
        {
        }
        public static new CloudFormationTypeState Empty => new CloudFormationTypeState();
    }
}
