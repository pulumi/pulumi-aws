// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.IvsChat
{
    /// <summary>
    /// Resource for managing an AWS IVS (Interactive Video) Chat Logging Configuration.
    /// 
    /// ## Example Usage
    /// ### Basic Usage - Logging to CloudWatch
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleLogGroup = new Aws.CloudWatch.LogGroup("exampleLogGroup");
    /// 
    ///     var exampleLoggingConfiguration = new Aws.IvsChat.LoggingConfiguration("exampleLoggingConfiguration", new()
    ///     {
    ///         DestinationConfiguration = new Aws.IvsChat.Inputs.LoggingConfigurationDestinationConfigurationArgs
    ///         {
    ///             CloudwatchLogs = new Aws.IvsChat.Inputs.LoggingConfigurationDestinationConfigurationCloudwatchLogsArgs
    ///             {
    ///                 LogGroupName = exampleLogGroup.Name,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Basic Usage - Logging to Kinesis Firehose with Extended S3
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleBucketV2 = new Aws.S3.BucketV2("exampleBucketV2", new()
    ///     {
    ///         BucketPrefix = "tf-ivschat-logging-bucket",
    ///     });
    /// 
    ///     var assumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "firehose.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRole = new Aws.Iam.Role("exampleRole", new()
    ///     {
    ///         AssumeRolePolicy = assumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var exampleFirehoseDeliveryStream = new Aws.Kinesis.FirehoseDeliveryStream("exampleFirehoseDeliveryStream", new()
    ///     {
    ///         Destination = "extended_s3",
    ///         ExtendedS3Configuration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamExtendedS3ConfigurationArgs
    ///         {
    ///             RoleArn = exampleRole.Arn,
    ///             BucketArn = exampleBucketV2.Arn,
    ///         },
    ///         Tags = 
    ///         {
    ///             { "LogDeliveryEnabled", "true" },
    ///         },
    ///     });
    /// 
    ///     var exampleBucketAclV2 = new Aws.S3.BucketAclV2("exampleBucketAclV2", new()
    ///     {
    ///         Bucket = exampleBucketV2.Id,
    ///         Acl = "private",
    ///     });
    /// 
    ///     var exampleLoggingConfiguration = new Aws.IvsChat.LoggingConfiguration("exampleLoggingConfiguration", new()
    ///     {
    ///         DestinationConfiguration = new Aws.IvsChat.Inputs.LoggingConfigurationDestinationConfigurationArgs
    ///         {
    ///             Firehose = new Aws.IvsChat.Inputs.LoggingConfigurationDestinationConfigurationFirehoseArgs
    ///             {
    ///                 DeliveryStreamName = exampleFirehoseDeliveryStream.Name,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_ivschat_logging_configuration.example
    /// 
    ///  id = "arn:aws:ivschat:us-west-2:326937407773:logging-configuration/MMUQc8wcqZmC" } Using `pulumi import`, import IVS (Interactive Video) Chat Logging Configuration using the ARN. For exampleconsole % pulumi import aws_ivschat_logging_configuration.example arn:aws:ivschat:us-west-2:326937407773:logging-configuration/MMUQc8wcqZmC
    /// </summary>
    [AwsResourceType("aws:ivschat/loggingConfiguration:LoggingConfiguration")]
    public partial class LoggingConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Logging Configuration.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
        /// </summary>
        [Output("destinationConfiguration")]
        public Output<Outputs.LoggingConfigurationDestinationConfiguration?> DestinationConfiguration { get; private set; } = null!;

        /// <summary>
        /// Logging Configuration name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of the Logging Configuration.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a LoggingConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoggingConfiguration(string name, LoggingConfigurationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:ivschat/loggingConfiguration:LoggingConfiguration", name, args ?? new LoggingConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoggingConfiguration(string name, Input<string> id, LoggingConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:ivschat/loggingConfiguration:LoggingConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoggingConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoggingConfiguration Get(string name, Input<string> id, LoggingConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new LoggingConfiguration(name, id, state, options);
        }
    }

    public sealed class LoggingConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
        /// </summary>
        [Input("destinationConfiguration")]
        public Input<Inputs.LoggingConfigurationDestinationConfigurationArgs>? DestinationConfiguration { get; set; }

        /// <summary>
        /// Logging Configuration name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LoggingConfigurationArgs()
        {
        }
        public static new LoggingConfigurationArgs Empty => new LoggingConfigurationArgs();
    }

    public sealed class LoggingConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Logging Configuration.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
        /// </summary>
        [Input("destinationConfiguration")]
        public Input<Inputs.LoggingConfigurationDestinationConfigurationGetArgs>? DestinationConfiguration { get; set; }

        /// <summary>
        /// Logging Configuration name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// State of the Logging Configuration.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public LoggingConfigurationState()
        {
        }
        public static new LoggingConfigurationState Empty => new LoggingConfigurationState();
    }
}
