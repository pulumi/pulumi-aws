// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeCatalyst
{
    /// <summary>
    /// Resource for managing an AWS CodeCatalyst Source Repository.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CodeCatalyst.SourceRepository("example", new()
    ///     {
    ///         ProjectName = "example-project",
    ///         SpaceName = "example-space",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CodeCatalyst Source Repository using the `id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:codecatalyst/sourceRepository:SourceRepository example example-repo
    /// ```
    /// </summary>
    [AwsResourceType("aws:codecatalyst/sourceRepository:SourceRepository")]
    public partial class SourceRepository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the project in the CodeCatalyst space.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The name of the CodeCatalyst space.
        /// </summary>
        [Output("spaceName")]
        public Output<string> SpaceName { get; private set; } = null!;


        /// <summary>
        /// Create a SourceRepository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceRepository(string name, SourceRepositoryArgs args, CustomResourceOptions? options = null)
            : base("aws:codecatalyst/sourceRepository:SourceRepository", name, args ?? new SourceRepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceRepository(string name, Input<string> id, SourceRepositoryState? state = null, CustomResourceOptions? options = null)
            : base("aws:codecatalyst/sourceRepository:SourceRepository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceRepository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceRepository Get(string name, Input<string> id, SourceRepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceRepository(name, id, state, options);
        }
    }

    public sealed class SourceRepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the project in the CodeCatalyst space.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        /// <summary>
        /// The name of the CodeCatalyst space.
        /// </summary>
        [Input("spaceName", required: true)]
        public Input<string> SpaceName { get; set; } = null!;

        public SourceRepositoryArgs()
        {
        }
        public static new SourceRepositoryArgs Empty => new SourceRepositoryArgs();
    }

    public sealed class SourceRepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the project. This description will be displayed to all users of the project. We recommend providing a brief description of the project and its intended purpose.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the source repository. For more information about name requirements, see [Quotas for source repositories](https://docs.aws.amazon.com/codecatalyst/latest/userguide/source-quotas.html).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the project in the CodeCatalyst space.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The name of the CodeCatalyst space.
        /// </summary>
        [Input("spaceName")]
        public Input<string>? SpaceName { get; set; }

        public SourceRepositoryState()
        {
        }
        public static new SourceRepositoryState Empty => new SourceRepositoryState();
    }
}
