// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeCatalyst
{
    /// <summary>
    /// Resource for managing an AWS CodeCatalyst Dev Environment.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.CodeCatalyst.DevEnvironment("test", new()
    ///     {
    ///         Alias = "devenv",
    ///         Ides = new Aws.CodeCatalyst.Inputs.DevEnvironmentIdesArgs
    ///         {
    ///             Name = "PyCharm",
    ///             Runtime = "public.ecr.aws/jetbrains/py",
    ///         },
    ///         InactivityTimeoutMinutes = 40,
    ///         InstanceType = "dev.standard1.small",
    ///         PersistentStorage = new Aws.CodeCatalyst.Inputs.DevEnvironmentPersistentStorageArgs
    ///         {
    ///             Size = 16,
    ///         },
    ///         ProjectName = "myproject",
    ///         Repositories = new[]
    ///         {
    ///             new Aws.CodeCatalyst.Inputs.DevEnvironmentRepositoryArgs
    ///             {
    ///                 BranchName = "main",
    ///                 RepositoryName = "TODO-provider-aws",
    ///             },
    ///         },
    ///         SpaceName = "myspace",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:codecatalyst/devEnvironment:DevEnvironment")]
    public partial class DevEnvironment : global::Pulumi.CustomResource
    {
        [Output("alias")]
        public Output<string?> Alias { get; private set; } = null!;

        /// <summary>
        /// Information about the integrated development environment (IDE) configured for a Dev Environment.
        /// </summary>
        [Output("ides")]
        public Output<Outputs.DevEnvironmentIdes> Ides { get; private set; } = null!;

        /// <summary>
        /// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
        /// </summary>
        [Output("inactivityTimeoutMinutes")]
        public Output<int?> InactivityTimeoutMinutes { get; private set; } = null!;

        /// <summary>
        /// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// Information about the amount of storage allocated to the Dev Environment.
        /// </summary>
        [Output("persistentStorage")]
        public Output<Outputs.DevEnvironmentPersistentStorage> PersistentStorage { get; private set; } = null!;

        /// <summary>
        /// The name of the project in the space.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The source repository that contains the branch to clone into the Dev Environment.
        /// </summary>
        [Output("repositories")]
        public Output<ImmutableArray<Outputs.DevEnvironmentRepository>> Repositories { get; private set; } = null!;

        /// <summary>
        /// The name of the space.
        /// </summary>
        [Output("spaceName")]
        public Output<string> SpaceName { get; private set; } = null!;


        /// <summary>
        /// Create a DevEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DevEnvironment(string name, DevEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("aws:codecatalyst/devEnvironment:DevEnvironment", name, args ?? new DevEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DevEnvironment(string name, Input<string> id, DevEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:codecatalyst/devEnvironment:DevEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DevEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DevEnvironment Get(string name, Input<string> id, DevEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new DevEnvironment(name, id, state, options);
        }
    }

    public sealed class DevEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Information about the integrated development environment (IDE) configured for a Dev Environment.
        /// </summary>
        [Input("ides", required: true)]
        public Input<Inputs.DevEnvironmentIdesArgs> Ides { get; set; } = null!;

        /// <summary>
        /// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
        /// </summary>
        [Input("inactivityTimeoutMinutes")]
        public Input<int>? InactivityTimeoutMinutes { get; set; }

        /// <summary>
        /// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// Information about the amount of storage allocated to the Dev Environment.
        /// </summary>
        [Input("persistentStorage", required: true)]
        public Input<Inputs.DevEnvironmentPersistentStorageArgs> PersistentStorage { get; set; } = null!;

        /// <summary>
        /// The name of the project in the space.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        [Input("repositories")]
        private InputList<Inputs.DevEnvironmentRepositoryArgs>? _repositories;

        /// <summary>
        /// The source repository that contains the branch to clone into the Dev Environment.
        /// </summary>
        public InputList<Inputs.DevEnvironmentRepositoryArgs> Repositories
        {
            get => _repositories ?? (_repositories = new InputList<Inputs.DevEnvironmentRepositoryArgs>());
            set => _repositories = value;
        }

        /// <summary>
        /// The name of the space.
        /// </summary>
        [Input("spaceName", required: true)]
        public Input<string> SpaceName { get; set; } = null!;

        public DevEnvironmentArgs()
        {
        }
        public static new DevEnvironmentArgs Empty => new DevEnvironmentArgs();
    }

    public sealed class DevEnvironmentState : global::Pulumi.ResourceArgs
    {
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        /// <summary>
        /// Information about the integrated development environment (IDE) configured for a Dev Environment.
        /// </summary>
        [Input("ides")]
        public Input<Inputs.DevEnvironmentIdesGetArgs>? Ides { get; set; }

        /// <summary>
        /// The amount of time the Dev Environment will run without any activity detected before stopping, in minutes. Only whole integers are allowed. Dev Environments consume compute minutes when running.
        /// </summary>
        [Input("inactivityTimeoutMinutes")]
        public Input<int>? InactivityTimeoutMinutes { get; set; }

        /// <summary>
        /// The Amazon EC2 instace type to use for the Dev Environment. Valid values include dev.standard1.small,dev.standard1.medium,dev.standard1.large,dev.standard1.xlarge
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Information about the amount of storage allocated to the Dev Environment.
        /// </summary>
        [Input("persistentStorage")]
        public Input<Inputs.DevEnvironmentPersistentStorageGetArgs>? PersistentStorage { get; set; }

        /// <summary>
        /// The name of the project in the space.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("repositories")]
        private InputList<Inputs.DevEnvironmentRepositoryGetArgs>? _repositories;

        /// <summary>
        /// The source repository that contains the branch to clone into the Dev Environment.
        /// </summary>
        public InputList<Inputs.DevEnvironmentRepositoryGetArgs> Repositories
        {
            get => _repositories ?? (_repositories = new InputList<Inputs.DevEnvironmentRepositoryGetArgs>());
            set => _repositories = value;
        }

        /// <summary>
        /// The name of the space.
        /// </summary>
        [Input("spaceName")]
        public Input<string>? SpaceName { get; set; }

        public DevEnvironmentState()
        {
        }
        public static new DevEnvironmentState Empty => new DevEnvironmentState();
    }
}
