// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Backup
{
    /// <summary>
    /// Provides an AWS Backup vault notifications resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testTopic = new Aws.Sns.Topic("testTopic");
    /// 
    ///     var testPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         PolicyId = "__default_policy_ID",
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "SNS:Publish",
    ///                 },
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "backup.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     testTopic.Arn,
    ///                 },
    ///                 Sid = "__default_statement_ID",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testTopicPolicy = new Aws.Sns.TopicPolicy("testTopicPolicy", new()
    ///     {
    ///         Arn = testTopic.Arn,
    ///         Policy = testPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var testVaultNotifications = new Aws.Backup.VaultNotifications("testVaultNotifications", new()
    ///     {
    ///         BackupVaultName = "example_backup_vault",
    ///         SnsTopicArn = testTopic.Arn,
    ///         BackupVaultEvents = new[]
    ///         {
    ///             "BACKUP_JOB_STARTED",
    ///             "RESTORE_JOB_COMPLETED",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backup vault notifications can be imported using the `name`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:backup/vaultNotifications:VaultNotifications test TestVault
    /// ```
    /// </summary>
    [AwsResourceType("aws:backup/vaultNotifications:VaultNotifications")]
    public partial class VaultNotifications : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the vault.
        /// </summary>
        [Output("backupVaultArn")]
        public Output<string> BackupVaultArn { get; private set; } = null!;

        /// <summary>
        /// An array of events that indicate the status of jobs to back up resources to the backup vault.
        /// </summary>
        [Output("backupVaultEvents")]
        public Output<ImmutableArray<string>> BackupVaultEvents { get; private set; } = null!;

        /// <summary>
        /// Name of the backup vault to add notifications for.
        /// </summary>
        [Output("backupVaultName")]
        public Output<string> BackupVaultName { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
        /// </summary>
        [Output("snsTopicArn")]
        public Output<string> SnsTopicArn { get; private set; } = null!;


        /// <summary>
        /// Create a VaultNotifications resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VaultNotifications(string name, VaultNotificationsArgs args, CustomResourceOptions? options = null)
            : base("aws:backup/vaultNotifications:VaultNotifications", name, args ?? new VaultNotificationsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VaultNotifications(string name, Input<string> id, VaultNotificationsState? state = null, CustomResourceOptions? options = null)
            : base("aws:backup/vaultNotifications:VaultNotifications", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VaultNotifications resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VaultNotifications Get(string name, Input<string> id, VaultNotificationsState? state = null, CustomResourceOptions? options = null)
        {
            return new VaultNotifications(name, id, state, options);
        }
    }

    public sealed class VaultNotificationsArgs : global::Pulumi.ResourceArgs
    {
        [Input("backupVaultEvents", required: true)]
        private InputList<string>? _backupVaultEvents;

        /// <summary>
        /// An array of events that indicate the status of jobs to back up resources to the backup vault.
        /// </summary>
        public InputList<string> BackupVaultEvents
        {
            get => _backupVaultEvents ?? (_backupVaultEvents = new InputList<string>());
            set => _backupVaultEvents = value;
        }

        /// <summary>
        /// Name of the backup vault to add notifications for.
        /// </summary>
        [Input("backupVaultName", required: true)]
        public Input<string> BackupVaultName { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
        /// </summary>
        [Input("snsTopicArn", required: true)]
        public Input<string> SnsTopicArn { get; set; } = null!;

        public VaultNotificationsArgs()
        {
        }
        public static new VaultNotificationsArgs Empty => new VaultNotificationsArgs();
    }

    public sealed class VaultNotificationsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the vault.
        /// </summary>
        [Input("backupVaultArn")]
        public Input<string>? BackupVaultArn { get; set; }

        [Input("backupVaultEvents")]
        private InputList<string>? _backupVaultEvents;

        /// <summary>
        /// An array of events that indicate the status of jobs to back up resources to the backup vault.
        /// </summary>
        public InputList<string> BackupVaultEvents
        {
            get => _backupVaultEvents ?? (_backupVaultEvents = new InputList<string>());
            set => _backupVaultEvents = value;
        }

        /// <summary>
        /// Name of the backup vault to add notifications for.
        /// </summary>
        [Input("backupVaultName")]
        public Input<string>? BackupVaultName { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) that specifies the topic for a backup vault’s events
        /// </summary>
        [Input("snsTopicArn")]
        public Input<string>? SnsTopicArn { get; set; }

        public VaultNotificationsState()
        {
        }
        public static new VaultNotificationsState Empty => new VaultNotificationsState();
    }
}
