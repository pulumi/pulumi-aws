// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Backup
{
    public static class GetReportPlan
    {
        /// <summary>
        /// Use this data source to get information on an existing backup report plan.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Backup.GetReportPlan.InvokeAsync(new Aws.Backup.GetReportPlanArgs
        ///         {
        ///             Name = "tf_example_backup_report_plan_name",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReportPlanResult> InvokeAsync(GetReportPlanArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetReportPlanResult>("aws:backup/getReportPlan:getReportPlan", args ?? new GetReportPlanArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on an existing backup report plan.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Backup.GetReportPlan.InvokeAsync(new Aws.Backup.GetReportPlanArgs
        ///         {
        ///             Name = "tf_example_backup_report_plan_name",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReportPlanResult> Invoke(GetReportPlanInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetReportPlanResult>("aws:backup/getReportPlan:getReportPlan", args ?? new GetReportPlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReportPlanArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The backup report plan name.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Metadata that you can assign to help organize the report plans you create.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetReportPlanArgs()
        {
        }
    }

    public sealed class GetReportPlanInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The backup report plan name.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Metadata that you can assign to help organize the report plans you create.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetReportPlanInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetReportPlanResult
    {
        /// <summary>
        /// The ARN of the backup report plan.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The date and time that a report plan is created, in Unix format and Coordinated Universal Time (UTC).
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The deployment status of a report plan. The statuses are: `CREATE_IN_PROGRESS` | `UPDATE_IN_PROGRESS` | `DELETE_IN_PROGRESS` | `COMPLETED`.
        /// </summary>
        public readonly string DeploymentStatus;
        /// <summary>
        /// The description of the report plan.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// An object that contains information about where and how to deliver your reports, specifically your Amazon S3 bucket name, S3 key prefix, and the formats of your reports. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReportPlanReportDeliveryChannelResult> ReportDeliveryChannels;
        /// <summary>
        /// An object that identifies the report template for the report. Reports are built using a report template. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReportPlanReportSettingResult> ReportSettings;
        /// <summary>
        /// Metadata that you can assign to help organize the report plans you create.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetReportPlanResult(
            string arn,

            string creationTime,

            string deploymentStatus,

            string description,

            string id,

            string name,

            ImmutableArray<Outputs.GetReportPlanReportDeliveryChannelResult> reportDeliveryChannels,

            ImmutableArray<Outputs.GetReportPlanReportSettingResult> reportSettings,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            CreationTime = creationTime;
            DeploymentStatus = deploymentStatus;
            Description = description;
            Id = id;
            Name = name;
            ReportDeliveryChannels = reportDeliveryChannels;
            ReportSettings = reportSettings;
            Tags = tags;
        }
    }
}
