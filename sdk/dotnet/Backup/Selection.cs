// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Backup
{
    [AwsResourceType("aws:backup/selection:Selection")]
    public partial class Selection : global::Pulumi.CustomResource
    {
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.SelectionCondition>> Conditions { get; private set; } = null!;

        [Output("iamRoleArn")]
        public Output<string> IamRoleArn { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notResources")]
        public Output<ImmutableArray<string>> NotResources { get; private set; } = null!;

        [Output("planId")]
        public Output<string> PlanId { get; private set; } = null!;

        [Output("resources")]
        public Output<ImmutableArray<string>> Resources { get; private set; } = null!;

        [Output("selectionTags")]
        public Output<ImmutableArray<Outputs.SelectionSelectionTag>> SelectionTags { get; private set; } = null!;


        /// <summary>
        /// Create a Selection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Selection(string name, SelectionArgs args, CustomResourceOptions? options = null)
            : base("aws:backup/selection:Selection", name, args ?? new SelectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Selection(string name, Input<string> id, SelectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:backup/selection:Selection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Selection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Selection Get(string name, Input<string> id, SelectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Selection(name, id, state, options);
        }
    }

    public sealed class SelectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.SelectionConditionArgs>? _conditions;
        public InputList<Inputs.SelectionConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.SelectionConditionArgs>());
            set => _conditions = value;
        }

        [Input("iamRoleArn", required: true)]
        public Input<string> IamRoleArn { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notResources")]
        private InputList<string>? _notResources;
        public InputList<string> NotResources
        {
            get => _notResources ?? (_notResources = new InputList<string>());
            set => _notResources = value;
        }

        [Input("planId", required: true)]
        public Input<string> PlanId { get; set; } = null!;

        [Input("resources")]
        private InputList<string>? _resources;
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        [Input("selectionTags")]
        private InputList<Inputs.SelectionSelectionTagArgs>? _selectionTags;
        public InputList<Inputs.SelectionSelectionTagArgs> SelectionTags
        {
            get => _selectionTags ?? (_selectionTags = new InputList<Inputs.SelectionSelectionTagArgs>());
            set => _selectionTags = value;
        }

        public SelectionArgs()
        {
        }
        public static new SelectionArgs Empty => new SelectionArgs();
    }

    public sealed class SelectionState : global::Pulumi.ResourceArgs
    {
        [Input("conditions")]
        private InputList<Inputs.SelectionConditionGetArgs>? _conditions;
        public InputList<Inputs.SelectionConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.SelectionConditionGetArgs>());
            set => _conditions = value;
        }

        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notResources")]
        private InputList<string>? _notResources;
        public InputList<string> NotResources
        {
            get => _notResources ?? (_notResources = new InputList<string>());
            set => _notResources = value;
        }

        [Input("planId")]
        public Input<string>? PlanId { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        [Input("selectionTags")]
        private InputList<Inputs.SelectionSelectionTagGetArgs>? _selectionTags;
        public InputList<Inputs.SelectionSelectionTagGetArgs> SelectionTags
        {
            get => _selectionTags ?? (_selectionTags = new InputList<Inputs.SelectionSelectionTagGetArgs>());
            set => _selectionTags = value;
        }

        public SelectionState()
        {
        }
        public static new SelectionState Empty => new SelectionState();
    }
}
