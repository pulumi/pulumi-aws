// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Backup
{
    /// <summary>
    /// Provides an AWS Backup vault policy resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleVault = new Aws.Backup.Vault("exampleVault", new Aws.Backup.VaultArgs
    ///         {
    ///         });
    ///         var exampleVaultPolicy = new Aws.Backup.VaultPolicy("exampleVaultPolicy", new Aws.Backup.VaultPolicyArgs
    ///         {
    ///             BackupVaultName = exampleVault.Name,
    ///             Policy = exampleVault.Arn.Apply(arn =&gt; @$"{{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Id"": ""default"",
    ///   ""Statement"": [
    ///     {{
    ///       ""Sid"": ""default"",
    ///       ""Effect"": ""Allow"",
    ///       ""Principal"": {{
    ///         ""AWS"": ""*""
    ///       }},
    ///       ""Action"": [
    /// 		""backup:DescribeBackupVault"",
    /// 		""backup:DeleteBackupVault"",
    /// 		""backup:PutBackupVaultAccessPolicy"",
    /// 		""backup:DeleteBackupVaultAccessPolicy"",
    /// 		""backup:GetBackupVaultAccessPolicy"",
    /// 		""backup:StartBackupJob"",
    /// 		""backup:GetBackupVaultNotifications"",
    /// 		""backup:PutBackupVaultNotifications""
    ///       ],
    ///       ""Resource"": ""{arn}""
    ///     }}
    ///   ]
    /// }}
    /// "),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backup vault policy can be imported using the `name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:backup/vaultPolicy:VaultPolicy test TestVault
    /// ```
    /// </summary>
    public partial class VaultPolicy : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the vault.
        /// </summary>
        [Output("backupVaultArn")]
        public Output<string> BackupVaultArn { get; private set; } = null!;

        /// <summary>
        /// Name of the backup vault to add policy for.
        /// </summary>
        [Output("backupVaultName")]
        public Output<string> BackupVaultName { get; private set; } = null!;

        /// <summary>
        /// The backup vault access policy document in JSON format.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;


        /// <summary>
        /// Create a VaultPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VaultPolicy(string name, VaultPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:backup/vaultPolicy:VaultPolicy", name, args ?? new VaultPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VaultPolicy(string name, Input<string> id, VaultPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:backup/vaultPolicy:VaultPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VaultPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VaultPolicy Get(string name, Input<string> id, VaultPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new VaultPolicy(name, id, state, options);
        }
    }

    public sealed class VaultPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the backup vault to add policy for.
        /// </summary>
        [Input("backupVaultName", required: true)]
        public Input<string> BackupVaultName { get; set; } = null!;

        /// <summary>
        /// The backup vault access policy document in JSON format.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        public VaultPolicyArgs()
        {
        }
    }

    public sealed class VaultPolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the vault.
        /// </summary>
        [Input("backupVaultArn")]
        public Input<string>? BackupVaultArn { get; set; }

        /// <summary>
        /// Name of the backup vault to add policy for.
        /// </summary>
        [Input("backupVaultName")]
        public Input<string>? BackupVaultName { get; set; }

        /// <summary>
        /// The backup vault access policy document in JSON format.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        public VaultPolicyState()
        {
        }
    }
}
