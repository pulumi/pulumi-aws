// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Backup
{
    /// <summary>
    /// Provides an AWS Backup plan resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Backup.Plan("example", new Aws.Backup.PlanArgs
    ///         {
    ///             Rules = 
    ///             {
    ///                 new Aws.Backup.Inputs.PlanRuleArgs
    ///                 {
    ///                     RuleName = "tf_example_backup_rule",
    ///                     TargetVaultName = aws_backup_vault.Test.Name,
    ///                     Schedule = "cron(0 12 * * ? *)",
    ///                 },
    ///             },
    ///             AdvancedBackupSettings = 
    ///             {
    ///                 new Aws.Backup.Inputs.PlanAdvancedBackupSettingArgs
    ///                 {
    ///                     BackupOptions = 
    ///                     {
    ///                         { "WindowsVSS", "enabled" },
    ///                     },
    ///                     ResourceType = "EC2",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Backup Plan can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:backup/plan:Plan test &lt;id&gt;
    /// ```
    /// </summary>
    public partial class Plan : Pulumi.CustomResource
    {
        /// <summary>
        /// An object that specifies backup options for each resource type.
        /// </summary>
        [Output("advancedBackupSettings")]
        public Output<ImmutableArray<Outputs.PlanAdvancedBackupSetting>> AdvancedBackupSettings { get; private set; } = null!;

        /// <summary>
        /// The ARN of the backup plan.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The display name of a backup plan.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A rule object that specifies a scheduled task that is used to back up a selection of resources.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.PlanRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Metadata that you can assign to help organize the plans you create.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Plan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Plan(string name, PlanArgs args, CustomResourceOptions? options = null)
            : base("aws:backup/plan:Plan", name, args ?? new PlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Plan(string name, Input<string> id, PlanState? state = null, CustomResourceOptions? options = null)
            : base("aws:backup/plan:Plan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Plan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Plan Get(string name, Input<string> id, PlanState? state = null, CustomResourceOptions? options = null)
        {
            return new Plan(name, id, state, options);
        }
    }

    public sealed class PlanArgs : Pulumi.ResourceArgs
    {
        [Input("advancedBackupSettings")]
        private InputList<Inputs.PlanAdvancedBackupSettingArgs>? _advancedBackupSettings;

        /// <summary>
        /// An object that specifies backup options for each resource type.
        /// </summary>
        public InputList<Inputs.PlanAdvancedBackupSettingArgs> AdvancedBackupSettings
        {
            get => _advancedBackupSettings ?? (_advancedBackupSettings = new InputList<Inputs.PlanAdvancedBackupSettingArgs>());
            set => _advancedBackupSettings = value;
        }

        /// <summary>
        /// The display name of a backup plan.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.PlanRuleArgs>? _rules;

        /// <summary>
        /// A rule object that specifies a scheduled task that is used to back up a selection of resources.
        /// </summary>
        public InputList<Inputs.PlanRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PlanRuleArgs>());
            set => _rules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Metadata that you can assign to help organize the plans you create.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PlanArgs()
        {
        }
    }

    public sealed class PlanState : Pulumi.ResourceArgs
    {
        [Input("advancedBackupSettings")]
        private InputList<Inputs.PlanAdvancedBackupSettingGetArgs>? _advancedBackupSettings;

        /// <summary>
        /// An object that specifies backup options for each resource type.
        /// </summary>
        public InputList<Inputs.PlanAdvancedBackupSettingGetArgs> AdvancedBackupSettings
        {
            get => _advancedBackupSettings ?? (_advancedBackupSettings = new InputList<Inputs.PlanAdvancedBackupSettingGetArgs>());
            set => _advancedBackupSettings = value;
        }

        /// <summary>
        /// The ARN of the backup plan.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The display name of a backup plan.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.PlanRuleGetArgs>? _rules;

        /// <summary>
        /// A rule object that specifies a scheduled task that is used to back up a selection of resources.
        /// </summary>
        public InputList<Inputs.PlanRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.PlanRuleGetArgs>());
            set => _rules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Metadata that you can assign to help organize the plans you create.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public PlanState()
        {
        }
    }
}
