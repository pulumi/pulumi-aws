// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Backup
{
    /// <summary>
    /// Resource for managing an AWS Backup Restore Testing Plan.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Backup.RestoreTestingPlan("example", new()
    ///     {
    ///         Name = "example_restore_testing_plan",
    ///         RecoveryPointSelection = new Aws.Backup.Inputs.RestoreTestingPlanRecoveryPointSelectionArgs
    ///         {
    ///             Algorithm = "LATEST_WITHIN_WINDOW",
    ///             IncludeVaults = new[]
    ///             {
    ///                 "*",
    ///             },
    ///             RecoveryPointTypes = new[]
    ///             {
    ///                 "CONTINUOUS",
    ///             },
    ///         },
    ///         ScheduleExpression = "cron(0 12 ? * * *)",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Backup Restore Testing Plan using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:backup/restoreTestingPlan:RestoreTestingPlan example my_testing_plan
    /// ```
    /// </summary>
    [AwsResourceType("aws:backup/restoreTestingPlan:RestoreTestingPlan")]
    public partial class RestoreTestingPlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Restore Testing Plan.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
        /// </summary>
        [Output("recoveryPointSelection")]
        public Output<Outputs.RestoreTestingPlanRecoveryPointSelection?> RecoveryPointSelection { get; private set; } = null!;

        /// <summary>
        /// The schedule expression for the restore testing plan.
        /// </summary>
        [Output("scheduleExpression")]
        public Output<string> ScheduleExpression { get; private set; } = null!;

        /// <summary>
        /// The timezone for the schedule expression. If not provided, the state value will be used.
        /// </summary>
        [Output("scheduleExpressionTimezone")]
        public Output<string> ScheduleExpressionTimezone { get; private set; } = null!;

        /// <summary>
        /// The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
        /// </summary>
        [Output("startWindowHours")]
        public Output<int> StartWindowHours { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a RestoreTestingPlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RestoreTestingPlan(string name, RestoreTestingPlanArgs args, CustomResourceOptions? options = null)
            : base("aws:backup/restoreTestingPlan:RestoreTestingPlan", name, args ?? new RestoreTestingPlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RestoreTestingPlan(string name, Input<string> id, RestoreTestingPlanState? state = null, CustomResourceOptions? options = null)
            : base("aws:backup/restoreTestingPlan:RestoreTestingPlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RestoreTestingPlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RestoreTestingPlan Get(string name, Input<string> id, RestoreTestingPlanState? state = null, CustomResourceOptions? options = null)
        {
            return new RestoreTestingPlan(name, id, state, options);
        }
    }

    public sealed class RestoreTestingPlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
        /// </summary>
        [Input("recoveryPointSelection")]
        public Input<Inputs.RestoreTestingPlanRecoveryPointSelectionArgs>? RecoveryPointSelection { get; set; }

        /// <summary>
        /// The schedule expression for the restore testing plan.
        /// </summary>
        [Input("scheduleExpression", required: true)]
        public Input<string> ScheduleExpression { get; set; } = null!;

        /// <summary>
        /// The timezone for the schedule expression. If not provided, the state value will be used.
        /// </summary>
        [Input("scheduleExpressionTimezone")]
        public Input<string>? ScheduleExpressionTimezone { get; set; }

        /// <summary>
        /// The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
        /// </summary>
        [Input("startWindowHours")]
        public Input<int>? StartWindowHours { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RestoreTestingPlanArgs()
        {
        }
        public static new RestoreTestingPlanArgs Empty => new RestoreTestingPlanArgs();
    }

    public sealed class RestoreTestingPlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Restore Testing Plan.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The name of the restore testing plan. Must be between 1 and 50 characters long and contain only alphanumeric characters and underscores.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specifies the recovery point selection configuration. See RecoveryPointSelection section for more details.
        /// </summary>
        [Input("recoveryPointSelection")]
        public Input<Inputs.RestoreTestingPlanRecoveryPointSelectionGetArgs>? RecoveryPointSelection { get; set; }

        /// <summary>
        /// The schedule expression for the restore testing plan.
        /// </summary>
        [Input("scheduleExpression")]
        public Input<string>? ScheduleExpression { get; set; }

        /// <summary>
        /// The timezone for the schedule expression. If not provided, the state value will be used.
        /// </summary>
        [Input("scheduleExpressionTimezone")]
        public Input<string>? ScheduleExpressionTimezone { get; set; }

        /// <summary>
        /// The number of hours in the start window for the restore testing plan. Must be between 1 and 168.
        /// </summary>
        [Input("startWindowHours")]
        public Input<int>? StartWindowHours { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public RestoreTestingPlanState()
        {
        }
        public static new RestoreTestingPlanState Empty => new RestoreTestingPlanState();
    }
}
