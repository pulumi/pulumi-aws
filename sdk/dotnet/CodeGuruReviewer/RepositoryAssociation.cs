// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeGuruReviewer
{
    /// <summary>
    /// Resource for managing an AWS CodeGuru Reviewer Repository Association.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleKey = new Aws.Kms.Key("exampleKey");
    /// 
    ///     var exampleRepository = new Aws.CodeCommit.Repository("exampleRepository", new()
    ///     {
    ///         RepositoryName = "example-repo",
    ///     });
    /// 
    ///     var exampleRepositoryAssociation = new Aws.CodeGuruReviewer.RepositoryAssociation("exampleRepositoryAssociation", new()
    ///     {
    ///         Repository = new Aws.CodeGuruReviewer.Inputs.RepositoryAssociationRepositoryArgs
    ///         {
    ///             Codecommit = new Aws.CodeGuruReviewer.Inputs.RepositoryAssociationRepositoryCodecommitArgs
    ///             {
    ///                 Name = exampleRepository.RepositoryName,
    ///             },
    ///         },
    ///         KmsKeyDetails = new Aws.CodeGuruReviewer.Inputs.RepositoryAssociationKmsKeyDetailsArgs
    ///         {
    ///             EncryptionOption = "CUSTOMER_MANAGED_CMK",
    ///             KmsKeyId = exampleKey.KeyId,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation")]
    public partial class RepositoryAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) identifying the repository association.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The ID of the repository association.
        /// </summary>
        [Output("associationId")]
        public Output<string> AssociationId { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
        /// </summary>
        [Output("connectionArn")]
        public Output<string> ConnectionArn { get; private set; } = null!;

        /// <summary>
        /// An object describing the KMS key to asssociate. Block is documented below.
        /// </summary>
        [Output("kmsKeyDetails")]
        public Output<Outputs.RepositoryAssociationKmsKeyDetails?> KmsKeyDetails { get; private set; } = null!;

        /// <summary>
        /// The name of the third party source repository.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The username for the account that owns the repository.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// The provider type of the repository association.
        /// </summary>
        [Output("providerType")]
        public Output<string> ProviderType { get; private set; } = null!;

        /// <summary>
        /// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `github_enterprise_server`, or `s3_bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `github_enterprise_server`) the connection must be in `Available` status prior to creating this resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("repository")]
        public Output<Outputs.RepositoryAssociationRepository> Repository { get; private set; } = null!;

        [Output("s3RepositoryDetails")]
        public Output<ImmutableArray<Outputs.RepositoryAssociationS3RepositoryDetail>> S3RepositoryDetails { get; private set; } = null!;

        /// <summary>
        /// The state of the repository association.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// A description of why the repository association is in the current state.
        /// </summary>
        [Output("stateReason")]
        public Output<string> StateReason { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryAssociation(string name, RepositoryAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation", name, args ?? new RepositoryAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryAssociation(string name, Input<string> id, RepositoryAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:codegurureviewer/repositoryAssociation:RepositoryAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryAssociation Get(string name, Input<string> id, RepositoryAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryAssociation(name, id, state, options);
        }
    }

    public sealed class RepositoryAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An object describing the KMS key to asssociate. Block is documented below.
        /// </summary>
        [Input("kmsKeyDetails")]
        public Input<Inputs.RepositoryAssociationKmsKeyDetailsArgs>? KmsKeyDetails { get; set; }

        /// <summary>
        /// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `github_enterprise_server`, or `s3_bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `github_enterprise_server`) the connection must be in `Available` status prior to creating this resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("repository", required: true)]
        public Input<Inputs.RepositoryAssociationRepositoryArgs> Repository { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RepositoryAssociationArgs()
        {
        }
        public static new RepositoryAssociationArgs Empty => new RepositoryAssociationArgs();
    }

    public sealed class RepositoryAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) identifying the repository association.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The ID of the repository association.
        /// </summary>
        [Input("associationId")]
        public Input<string>? AssociationId { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of an AWS CodeStar Connections connection.
        /// </summary>
        [Input("connectionArn")]
        public Input<string>? ConnectionArn { get; set; }

        /// <summary>
        /// An object describing the KMS key to asssociate. Block is documented below.
        /// </summary>
        [Input("kmsKeyDetails")]
        public Input<Inputs.RepositoryAssociationKmsKeyDetailsGetArgs>? KmsKeyDetails { get; set; }

        /// <summary>
        /// The name of the third party source repository.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The username for the account that owns the repository.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The provider type of the repository association.
        /// </summary>
        [Input("providerType")]
        public Input<string>? ProviderType { get; set; }

        /// <summary>
        /// An object describing the repository to associate. Valid values: `bitbucket`, `codecommit`, `github_enterprise_server`, or `s3_bucket`. Block is documented below. Note: for repositories that leverage CodeStar connections (ex. `bitbucket`, `github_enterprise_server`) the connection must be in `Available` status prior to creating this resource.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("repository")]
        public Input<Inputs.RepositoryAssociationRepositoryGetArgs>? Repository { get; set; }

        [Input("s3RepositoryDetails")]
        private InputList<Inputs.RepositoryAssociationS3RepositoryDetailGetArgs>? _s3RepositoryDetails;
        public InputList<Inputs.RepositoryAssociationS3RepositoryDetailGetArgs> S3RepositoryDetails
        {
            get => _s3RepositoryDetails ?? (_s3RepositoryDetails = new InputList<Inputs.RepositoryAssociationS3RepositoryDetailGetArgs>());
            set => _s3RepositoryDetails = value;
        }

        /// <summary>
        /// The state of the repository association.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// A description of why the repository association is in the current state.
        /// </summary>
        [Input("stateReason")]
        public Input<string>? StateReason { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public RepositoryAssociationState()
        {
        }
        public static new RepositoryAssociationState Empty => new RepositoryAssociationState();
    }
}
