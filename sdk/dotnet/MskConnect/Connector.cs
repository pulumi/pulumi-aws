// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MskConnect
{
    /// <summary>
    /// Provides an Amazon MSK Connect Connector resource.
    /// 
    /// ## Example Usage
    /// ### Basic configuration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.MskConnect.Connector("example", new()
    ///     {
    ///         KafkaconnectVersion = "2.7.1",
    ///         Capacity = new Aws.MskConnect.Inputs.ConnectorCapacityArgs
    ///         {
    ///             Autoscaling = new Aws.MskConnect.Inputs.ConnectorCapacityAutoscalingArgs
    ///             {
    ///                 McuCount = 1,
    ///                 MinWorkerCount = 1,
    ///                 MaxWorkerCount = 2,
    ///                 ScaleInPolicy = new Aws.MskConnect.Inputs.ConnectorCapacityAutoscalingScaleInPolicyArgs
    ///                 {
    ///                     CpuUtilizationPercentage = 20,
    ///                 },
    ///                 ScaleOutPolicy = new Aws.MskConnect.Inputs.ConnectorCapacityAutoscalingScaleOutPolicyArgs
    ///                 {
    ///                     CpuUtilizationPercentage = 80,
    ///                 },
    ///             },
    ///         },
    ///         ConnectorConfiguration = 
    ///         {
    ///             { "connector.class", "com.github.jcustenborder.kafka.connect.simulator.SimulatorSinkConnector" },
    ///             { "tasks.max", "1" },
    ///             { "topics", "example" },
    ///         },
    ///         KafkaCluster = new Aws.MskConnect.Inputs.ConnectorKafkaClusterArgs
    ///         {
    ///             ApacheKafkaCluster = new Aws.MskConnect.Inputs.ConnectorKafkaClusterApacheKafkaClusterArgs
    ///             {
    ///                 BootstrapServers = aws_msk_cluster.Example.Bootstrap_brokers_tls,
    ///                 Vpc = new Aws.MskConnect.Inputs.ConnectorKafkaClusterApacheKafkaClusterVpcArgs
    ///                 {
    ///                     SecurityGroups = new[]
    ///                     {
    ///                         aws_security_group.Example.Id,
    ///                     },
    ///                     Subnets = new[]
    ///                     {
    ///                         aws_subnet.Example1.Id,
    ///                         aws_subnet.Example2.Id,
    ///                         aws_subnet.Example3.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         KafkaClusterClientAuthentication = new Aws.MskConnect.Inputs.ConnectorKafkaClusterClientAuthenticationArgs
    ///         {
    ///             AuthenticationType = "NONE",
    ///         },
    ///         KafkaClusterEncryptionInTransit = new Aws.MskConnect.Inputs.ConnectorKafkaClusterEncryptionInTransitArgs
    ///         {
    ///             EncryptionType = "TLS",
    ///         },
    ///         Plugins = new[]
    ///         {
    ///             new Aws.MskConnect.Inputs.ConnectorPluginArgs
    ///             {
    ///                 CustomPlugin = new Aws.MskConnect.Inputs.ConnectorPluginCustomPluginArgs
    ///                 {
    ///                     Arn = aws_mskconnect_custom_plugin.Example.Arn,
    ///                     Revision = aws_mskconnect_custom_plugin.Example.Latest_revision,
    ///                 },
    ///             },
    ///         },
    ///         ServiceExecutionRoleArn = aws_iam_role.Example.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import MSK Connect Connector using the connector's `arn`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:mskconnect/connector:Connector example 'arn:aws:kafkaconnect:eu-central-1:123456789012:connector/example/264edee4-17a3-412e-bd76-6681cfc93805-3'
    /// ```
    /// </summary>
    [AwsResourceType("aws:mskconnect/connector:Connector")]
    public partial class Connector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the custom plugin.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Information about the capacity allocated to the connector. See below.
        /// </summary>
        [Output("capacity")]
        public Output<Outputs.ConnectorCapacity> Capacity { get; private set; } = null!;

        /// <summary>
        /// A map of keys to values that represent the configuration for the connector.
        /// </summary>
        [Output("connectorConfiguration")]
        public Output<ImmutableDictionary<string, string>> ConnectorConfiguration { get; private set; } = null!;

        /// <summary>
        /// A summary description of the connector.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies which Apache Kafka cluster to connect to. See below.
        /// </summary>
        [Output("kafkaCluster")]
        public Output<Outputs.ConnectorKafkaCluster> KafkaCluster { get; private set; } = null!;

        /// <summary>
        /// Details of the client authentication used by the Apache Kafka cluster. See below.
        /// </summary>
        [Output("kafkaClusterClientAuthentication")]
        public Output<Outputs.ConnectorKafkaClusterClientAuthentication> KafkaClusterClientAuthentication { get; private set; } = null!;

        /// <summary>
        /// Details of encryption in transit to the Apache Kafka cluster. See below.
        /// </summary>
        [Output("kafkaClusterEncryptionInTransit")]
        public Output<Outputs.ConnectorKafkaClusterEncryptionInTransit> KafkaClusterEncryptionInTransit { get; private set; } = null!;

        /// <summary>
        /// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
        /// </summary>
        [Output("kafkaconnectVersion")]
        public Output<string> KafkaconnectVersion { get; private set; } = null!;

        /// <summary>
        /// Details about log delivery. See below.
        /// </summary>
        [Output("logDelivery")]
        public Output<Outputs.ConnectorLogDelivery?> LogDelivery { get; private set; } = null!;

        /// <summary>
        /// The name of the connector.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies which plugins to use for the connector. See below.
        /// </summary>
        [Output("plugins")]
        public Output<ImmutableArray<Outputs.ConnectorPlugin>> Plugins { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
        /// </summary>
        [Output("serviceExecutionRoleArn")]
        public Output<string> ServiceExecutionRoleArn { get; private set; } = null!;

        /// <summary>
        /// The current version of the connector.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Specifies which worker configuration to use with the connector. See below.
        /// </summary>
        [Output("workerConfiguration")]
        public Output<Outputs.ConnectorWorkerConfiguration?> WorkerConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("aws:mskconnect/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("aws:mskconnect/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about the capacity allocated to the connector. See below.
        /// </summary>
        [Input("capacity", required: true)]
        public Input<Inputs.ConnectorCapacityArgs> Capacity { get; set; } = null!;

        [Input("connectorConfiguration", required: true)]
        private InputMap<string>? _connectorConfiguration;

        /// <summary>
        /// A map of keys to values that represent the configuration for the connector.
        /// </summary>
        public InputMap<string> ConnectorConfiguration
        {
            get => _connectorConfiguration ?? (_connectorConfiguration = new InputMap<string>());
            set => _connectorConfiguration = value;
        }

        /// <summary>
        /// A summary description of the connector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies which Apache Kafka cluster to connect to. See below.
        /// </summary>
        [Input("kafkaCluster", required: true)]
        public Input<Inputs.ConnectorKafkaClusterArgs> KafkaCluster { get; set; } = null!;

        /// <summary>
        /// Details of the client authentication used by the Apache Kafka cluster. See below.
        /// </summary>
        [Input("kafkaClusterClientAuthentication", required: true)]
        public Input<Inputs.ConnectorKafkaClusterClientAuthenticationArgs> KafkaClusterClientAuthentication { get; set; } = null!;

        /// <summary>
        /// Details of encryption in transit to the Apache Kafka cluster. See below.
        /// </summary>
        [Input("kafkaClusterEncryptionInTransit", required: true)]
        public Input<Inputs.ConnectorKafkaClusterEncryptionInTransitArgs> KafkaClusterEncryptionInTransit { get; set; } = null!;

        /// <summary>
        /// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
        /// </summary>
        [Input("kafkaconnectVersion", required: true)]
        public Input<string> KafkaconnectVersion { get; set; } = null!;

        /// <summary>
        /// Details about log delivery. See below.
        /// </summary>
        [Input("logDelivery")]
        public Input<Inputs.ConnectorLogDeliveryArgs>? LogDelivery { get; set; }

        /// <summary>
        /// The name of the connector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("plugins", required: true)]
        private InputList<Inputs.ConnectorPluginArgs>? _plugins;

        /// <summary>
        /// Specifies which plugins to use for the connector. See below.
        /// </summary>
        public InputList<Inputs.ConnectorPluginArgs> Plugins
        {
            get => _plugins ?? (_plugins = new InputList<Inputs.ConnectorPluginArgs>());
            set => _plugins = value;
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
        /// </summary>
        [Input("serviceExecutionRoleArn", required: true)]
        public Input<string> ServiceExecutionRoleArn { get; set; } = null!;

        /// <summary>
        /// Specifies which worker configuration to use with the connector. See below.
        /// </summary>
        [Input("workerConfiguration")]
        public Input<Inputs.ConnectorWorkerConfigurationArgs>? WorkerConfiguration { get; set; }

        public ConnectorArgs()
        {
        }
        public static new ConnectorArgs Empty => new ConnectorArgs();
    }

    public sealed class ConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the custom plugin.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Information about the capacity allocated to the connector. See below.
        /// </summary>
        [Input("capacity")]
        public Input<Inputs.ConnectorCapacityGetArgs>? Capacity { get; set; }

        [Input("connectorConfiguration")]
        private InputMap<string>? _connectorConfiguration;

        /// <summary>
        /// A map of keys to values that represent the configuration for the connector.
        /// </summary>
        public InputMap<string> ConnectorConfiguration
        {
            get => _connectorConfiguration ?? (_connectorConfiguration = new InputMap<string>());
            set => _connectorConfiguration = value;
        }

        /// <summary>
        /// A summary description of the connector.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies which Apache Kafka cluster to connect to. See below.
        /// </summary>
        [Input("kafkaCluster")]
        public Input<Inputs.ConnectorKafkaClusterGetArgs>? KafkaCluster { get; set; }

        /// <summary>
        /// Details of the client authentication used by the Apache Kafka cluster. See below.
        /// </summary>
        [Input("kafkaClusterClientAuthentication")]
        public Input<Inputs.ConnectorKafkaClusterClientAuthenticationGetArgs>? KafkaClusterClientAuthentication { get; set; }

        /// <summary>
        /// Details of encryption in transit to the Apache Kafka cluster. See below.
        /// </summary>
        [Input("kafkaClusterEncryptionInTransit")]
        public Input<Inputs.ConnectorKafkaClusterEncryptionInTransitGetArgs>? KafkaClusterEncryptionInTransit { get; set; }

        /// <summary>
        /// The version of Kafka Connect. It has to be compatible with both the Apache Kafka cluster's version and the plugins.
        /// </summary>
        [Input("kafkaconnectVersion")]
        public Input<string>? KafkaconnectVersion { get; set; }

        /// <summary>
        /// Details about log delivery. See below.
        /// </summary>
        [Input("logDelivery")]
        public Input<Inputs.ConnectorLogDeliveryGetArgs>? LogDelivery { get; set; }

        /// <summary>
        /// The name of the connector.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("plugins")]
        private InputList<Inputs.ConnectorPluginGetArgs>? _plugins;

        /// <summary>
        /// Specifies which plugins to use for the connector. See below.
        /// </summary>
        public InputList<Inputs.ConnectorPluginGetArgs> Plugins
        {
            get => _plugins ?? (_plugins = new InputList<Inputs.ConnectorPluginGetArgs>());
            set => _plugins = value;
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role used by the connector to access the Amazon Web Services resources that it needs. The types of resources depends on the logic of the connector. For example, a connector that has Amazon S3 as a destination must have permissions that allow it to write to the S3 destination bucket.
        /// </summary>
        [Input("serviceExecutionRoleArn")]
        public Input<string>? ServiceExecutionRoleArn { get; set; }

        /// <summary>
        /// The current version of the connector.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Specifies which worker configuration to use with the connector. See below.
        /// </summary>
        [Input("workerConfiguration")]
        public Input<Inputs.ConnectorWorkerConfigurationGetArgs>? WorkerConfiguration { get; set; }

        public ConnectorState()
        {
        }
        public static new ConnectorState Empty => new ConnectorState();
    }
}
