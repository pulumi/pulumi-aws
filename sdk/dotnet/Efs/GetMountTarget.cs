// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Efs
{
    public static class GetMountTarget
    {
        /// <summary>
        /// Provides information about an Elastic File System Mount Target (EFS).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const mountTargetId = config.get("mountTargetId") || "";
        /// const byId = aws.efs.getMountTarget({
        ///     mountTargetId: mountTargetId,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// mount_target_id = config.get("mountTargetId")
        /// if mount_target_id is None:
        ///     mount_target_id = ""
        /// by_id = aws.efs.get_mount_target(mount_target_id=mount_target_id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var mountTargetId = config.Get("mountTargetId") ?? "";
        ///     var byId = Aws.Efs.GetMountTarget.Invoke(new()
        ///     {
        ///         MountTargetId = mountTargetId,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/efs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		mountTargetId := ""
        /// 		if param := cfg.Get("mountTargetId"); param != "" {
        /// 			mountTargetId = param
        /// 		}
        /// 		_, err := efs.LookupMountTarget(ctx, &amp;efs.LookupMountTargetArgs{
        /// 			MountTargetId: pulumi.StringRef(mountTargetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.efs.EfsFunctions;
        /// import com.pulumi.aws.efs.inputs.GetMountTargetArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var mountTargetId = config.get("mountTargetId").orElse("");
        ///         final var byId = EfsFunctions.getMountTarget(GetMountTargetArgs.builder()
        ///             .mountTargetId(mountTargetId)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   mountTargetId:
        ///     type: string
        ///     default:
        /// variables:
        ///   byId:
        ///     fn::invoke:
        ///       Function: aws:efs:getMountTarget
        ///       Arguments:
        ///         mountTargetId: ${mountTargetId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMountTargetResult> InvokeAsync(GetMountTargetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMountTargetResult>("aws:efs/getMountTarget:getMountTarget", args ?? new GetMountTargetArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about an Elastic File System Mount Target (EFS).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const mountTargetId = config.get("mountTargetId") || "";
        /// const byId = aws.efs.getMountTarget({
        ///     mountTargetId: mountTargetId,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// mount_target_id = config.get("mountTargetId")
        /// if mount_target_id is None:
        ///     mount_target_id = ""
        /// by_id = aws.efs.get_mount_target(mount_target_id=mount_target_id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var mountTargetId = config.Get("mountTargetId") ?? "";
        ///     var byId = Aws.Efs.GetMountTarget.Invoke(new()
        ///     {
        ///         MountTargetId = mountTargetId,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/efs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		mountTargetId := ""
        /// 		if param := cfg.Get("mountTargetId"); param != "" {
        /// 			mountTargetId = param
        /// 		}
        /// 		_, err := efs.LookupMountTarget(ctx, &amp;efs.LookupMountTargetArgs{
        /// 			MountTargetId: pulumi.StringRef(mountTargetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.efs.EfsFunctions;
        /// import com.pulumi.aws.efs.inputs.GetMountTargetArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var mountTargetId = config.get("mountTargetId").orElse("");
        ///         final var byId = EfsFunctions.getMountTarget(GetMountTargetArgs.builder()
        ///             .mountTargetId(mountTargetId)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   mountTargetId:
        ///     type: string
        ///     default:
        /// variables:
        ///   byId:
        ///     fn::invoke:
        ///       Function: aws:efs:getMountTarget
        ///       Arguments:
        ///         mountTargetId: ${mountTargetId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMountTargetResult> Invoke(GetMountTargetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMountTargetResult>("aws:efs/getMountTarget:getMountTarget", args ?? new GetMountTargetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMountTargetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID or ARN of the access point whose mount target that you want to find. It must be included if a `file_system_id` and `mount_target_id` are not included.
        /// </summary>
        [Input("accessPointId")]
        public string? AccessPointId { get; set; }

        /// <summary>
        /// ID or ARN of the file system whose mount target that you want to find. It must be included if an `access_point_id` and `mount_target_id` are not included.
        /// </summary>
        [Input("fileSystemId")]
        public string? FileSystemId { get; set; }

        /// <summary>
        /// ID or ARN of the mount target that you want to find. It must be included in your request if an `access_point_id` and `file_system_id` are not included.
        /// </summary>
        [Input("mountTargetId")]
        public string? MountTargetId { get; set; }

        public GetMountTargetArgs()
        {
        }
        public static new GetMountTargetArgs Empty => new GetMountTargetArgs();
    }

    public sealed class GetMountTargetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID or ARN of the access point whose mount target that you want to find. It must be included if a `file_system_id` and `mount_target_id` are not included.
        /// </summary>
        [Input("accessPointId")]
        public Input<string>? AccessPointId { get; set; }

        /// <summary>
        /// ID or ARN of the file system whose mount target that you want to find. It must be included if an `access_point_id` and `mount_target_id` are not included.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// ID or ARN of the mount target that you want to find. It must be included in your request if an `access_point_id` and `file_system_id` are not included.
        /// </summary>
        [Input("mountTargetId")]
        public Input<string>? MountTargetId { get; set; }

        public GetMountTargetInvokeArgs()
        {
        }
        public static new GetMountTargetInvokeArgs Empty => new GetMountTargetInvokeArgs();
    }


    [OutputType]
    public sealed class GetMountTargetResult
    {
        public readonly string? AccessPointId;
        /// <summary>
        /// The unique and consistent identifier of the Availability Zone (AZ) that the mount target resides in.
        /// </summary>
        public readonly string AvailabilityZoneId;
        /// <summary>
        /// The name of the Availability Zone (AZ) that the mount target resides in.
        /// </summary>
        public readonly string AvailabilityZoneName;
        /// <summary>
        /// DNS name for the EFS file system.
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// Amazon Resource Name of the file system for which the mount target is intended.
        /// </summary>
        public readonly string FileSystemArn;
        public readonly string FileSystemId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Address at which the file system may be mounted via the mount target.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// The DNS name for the given subnet/AZ per [documented convention](http://docs.aws.amazon.com/efs/latest/ug/mounting-fs-mount-cmd-dns-name.html).
        /// </summary>
        public readonly string MountTargetDnsName;
        public readonly string MountTargetId;
        /// <summary>
        /// The ID of the network interface that Amazon EFS created when it created the mount target.
        /// </summary>
        public readonly string NetworkInterfaceId;
        /// <summary>
        /// AWS account ID that owns the resource.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// List of VPC security group IDs attached to the mount target.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// ID of the mount target's subnet.
        /// </summary>
        public readonly string SubnetId;

        [OutputConstructor]
        private GetMountTargetResult(
            string? accessPointId,

            string availabilityZoneId,

            string availabilityZoneName,

            string dnsName,

            string fileSystemArn,

            string fileSystemId,

            string id,

            string ipAddress,

            string mountTargetDnsName,

            string mountTargetId,

            string networkInterfaceId,

            string ownerId,

            ImmutableArray<string> securityGroups,

            string subnetId)
        {
            AccessPointId = accessPointId;
            AvailabilityZoneId = availabilityZoneId;
            AvailabilityZoneName = availabilityZoneName;
            DnsName = dnsName;
            FileSystemArn = fileSystemArn;
            FileSystemId = fileSystemId;
            Id = id;
            IpAddress = ipAddress;
            MountTargetDnsName = mountTargetDnsName;
            MountTargetId = mountTargetId;
            NetworkInterfaceId = networkInterfaceId;
            OwnerId = ownerId;
            SecurityGroups = securityGroups;
            SubnetId = subnetId;
        }
    }
}
