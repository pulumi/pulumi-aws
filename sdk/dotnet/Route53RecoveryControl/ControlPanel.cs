// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53RecoveryControl
{
    /// <summary>
    /// Provides an AWS Route 53 Recovery Control Config Control Panel.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Route53RecoveryControl.ControlPanel("example", new Aws.Route53RecoveryControl.ControlPanelArgs
    ///         {
    ///             ClusterArn = "arn:aws:route53-recovery-control::123456789012:cluster/8d47920e-d789-437d-803a-2dcc4b204393",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Route53 Recovery Control Config Control Panel can be imported via the control panel arn, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:route53recoverycontrol/controlPanel:ControlPanel mypanel arn:aws:route53-recovery-control::313517334327:controlpanel/1bfba17df8684f5dab0467b71424f7e8
    /// ```
    /// </summary>
    [AwsResourceType("aws:route53recoverycontrol/controlPanel:ControlPanel")]
    public partial class ControlPanel : Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the control panel.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// ARN of the cluster in which this control panel will reside.
        /// </summary>
        [Output("clusterArn")]
        public Output<string> ClusterArn { get; private set; } = null!;

        /// <summary>
        /// Whether a control panel is default.
        /// </summary>
        [Output("defaultControlPanel")]
        public Output<bool> DefaultControlPanel { get; private set; } = null!;

        /// <summary>
        /// Name describing the control panel.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number routing controls in a control panel.
        /// </summary>
        [Output("routingControlCount")]
        public Output<int> RoutingControlCount { get; private set; } = null!;

        /// <summary>
        /// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a ControlPanel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ControlPanel(string name, ControlPanelArgs args, CustomResourceOptions? options = null)
            : base("aws:route53recoverycontrol/controlPanel:ControlPanel", name, args ?? new ControlPanelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ControlPanel(string name, Input<string> id, ControlPanelState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53recoverycontrol/controlPanel:ControlPanel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ControlPanel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ControlPanel Get(string name, Input<string> id, ControlPanelState? state = null, CustomResourceOptions? options = null)
        {
            return new ControlPanel(name, id, state, options);
        }
    }

    public sealed class ControlPanelArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the cluster in which this control panel will reside.
        /// </summary>
        [Input("clusterArn", required: true)]
        public Input<string> ClusterArn { get; set; } = null!;

        /// <summary>
        /// Name describing the control panel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ControlPanelArgs()
        {
        }
    }

    public sealed class ControlPanelState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the control panel.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ARN of the cluster in which this control panel will reside.
        /// </summary>
        [Input("clusterArn")]
        public Input<string>? ClusterArn { get; set; }

        /// <summary>
        /// Whether a control panel is default.
        /// </summary>
        [Input("defaultControlPanel")]
        public Input<bool>? DefaultControlPanel { get; set; }

        /// <summary>
        /// Name describing the control panel.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number routing controls in a control panel.
        /// </summary>
        [Input("routingControlCount")]
        public Input<int>? RoutingControlCount { get; set; }

        /// <summary>
        /// Status of control panel: `PENDING` when it is being created/updated, `PENDING_DELETION` when it is being deleted, and `DEPLOYED` otherwise.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ControlPanelState()
        {
        }
    }
}
