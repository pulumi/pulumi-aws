// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53RecoveryControl
{
    [AwsResourceType("aws:route53recoverycontrol/safetyRule:SafetyRule")]
    public partial class SafetyRule : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("assertedControls")]
        public Output<ImmutableArray<string>> AssertedControls { get; private set; } = null!;

        [Output("controlPanelArn")]
        public Output<string> ControlPanelArn { get; private set; } = null!;

        [Output("gatingControls")]
        public Output<ImmutableArray<string>> GatingControls { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("ruleConfig")]
        public Output<Outputs.SafetyRuleRuleConfig> RuleConfig { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("targetControls")]
        public Output<ImmutableArray<string>> TargetControls { get; private set; } = null!;

        [Output("waitPeriodMs")]
        public Output<int> WaitPeriodMs { get; private set; } = null!;


        /// <summary>
        /// Create a SafetyRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SafetyRule(string name, SafetyRuleArgs args, CustomResourceOptions? options = null)
            : base("aws:route53recoverycontrol/safetyRule:SafetyRule", name, args ?? new SafetyRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SafetyRule(string name, Input<string> id, SafetyRuleState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53recoverycontrol/safetyRule:SafetyRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SafetyRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SafetyRule Get(string name, Input<string> id, SafetyRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SafetyRule(name, id, state, options);
        }
    }

    public sealed class SafetyRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("assertedControls")]
        private InputList<string>? _assertedControls;
        public InputList<string> AssertedControls
        {
            get => _assertedControls ?? (_assertedControls = new InputList<string>());
            set => _assertedControls = value;
        }

        [Input("controlPanelArn", required: true)]
        public Input<string> ControlPanelArn { get; set; } = null!;

        [Input("gatingControls")]
        private InputList<string>? _gatingControls;
        public InputList<string> GatingControls
        {
            get => _gatingControls ?? (_gatingControls = new InputList<string>());
            set => _gatingControls = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ruleConfig", required: true)]
        public Input<Inputs.SafetyRuleRuleConfigArgs> RuleConfig { get; set; } = null!;

        [Input("targetControls")]
        private InputList<string>? _targetControls;
        public InputList<string> TargetControls
        {
            get => _targetControls ?? (_targetControls = new InputList<string>());
            set => _targetControls = value;
        }

        [Input("waitPeriodMs", required: true)]
        public Input<int> WaitPeriodMs { get; set; } = null!;

        public SafetyRuleArgs()
        {
        }
        public static new SafetyRuleArgs Empty => new SafetyRuleArgs();
    }

    public sealed class SafetyRuleState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("assertedControls")]
        private InputList<string>? _assertedControls;
        public InputList<string> AssertedControls
        {
            get => _assertedControls ?? (_assertedControls = new InputList<string>());
            set => _assertedControls = value;
        }

        [Input("controlPanelArn")]
        public Input<string>? ControlPanelArn { get; set; }

        [Input("gatingControls")]
        private InputList<string>? _gatingControls;
        public InputList<string> GatingControls
        {
            get => _gatingControls ?? (_gatingControls = new InputList<string>());
            set => _gatingControls = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("ruleConfig")]
        public Input<Inputs.SafetyRuleRuleConfigGetArgs>? RuleConfig { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("targetControls")]
        private InputList<string>? _targetControls;
        public InputList<string> TargetControls
        {
            get => _targetControls ?? (_targetControls = new InputList<string>());
            set => _targetControls = value;
        }

        [Input("waitPeriodMs")]
        public Input<int>? WaitPeriodMs { get; set; }

        public SafetyRuleState()
        {
        }
        public static new SafetyRuleState Empty => new SafetyRuleState();
    }
}
