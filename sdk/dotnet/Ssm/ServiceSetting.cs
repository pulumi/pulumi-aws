// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    /// <summary>
    /// This setting defines how a user interacts with or uses a service or a feature of a service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testSetting = new Aws.Ssm.ServiceSetting("testSetting", new()
    ///     {
    ///         SettingId = "arn:aws:ssm:us-east-1:123456789012:servicesetting/ssm/parameter-store/high-throughput-enabled",
    ///         SettingValue = "true",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AWS SSM Service Setting can be imported using the `setting_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:ssm/serviceSetting:ServiceSetting example arn:aws:ssm:us-east-1:123456789012:servicesetting/ssm/parameter-store/high-throughput-enabled
    /// ```
    /// </summary>
    [AwsResourceType("aws:ssm/serviceSetting:ServiceSetting")]
    public partial class ServiceSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the service setting.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// ID of the service setting.
        /// </summary>
        [Output("settingId")]
        public Output<string> SettingId { get; private set; } = null!;

        /// <summary>
        /// Value of the service setting.
        /// </summary>
        [Output("settingValue")]
        public Output<string> SettingValue { get; private set; } = null!;

        /// <summary>
        /// Status of the service setting. Value can be `Default`, `Customized` or `PendingUpdate`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceSetting(string name, ServiceSettingArgs args, CustomResourceOptions? options = null)
            : base("aws:ssm/serviceSetting:ServiceSetting", name, args ?? new ServiceSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceSetting(string name, Input<string> id, ServiceSettingState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssm/serviceSetting:ServiceSetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceSetting Get(string name, Input<string> id, ServiceSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceSetting(name, id, state, options);
        }
    }

    public sealed class ServiceSettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the service setting.
        /// </summary>
        [Input("settingId", required: true)]
        public Input<string> SettingId { get; set; } = null!;

        /// <summary>
        /// Value of the service setting.
        /// </summary>
        [Input("settingValue", required: true)]
        public Input<string> SettingValue { get; set; } = null!;

        public ServiceSettingArgs()
        {
        }
        public static new ServiceSettingArgs Empty => new ServiceSettingArgs();
    }

    public sealed class ServiceSettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the service setting.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ID of the service setting.
        /// </summary>
        [Input("settingId")]
        public Input<string>? SettingId { get; set; }

        /// <summary>
        /// Value of the service setting.
        /// </summary>
        [Input("settingValue")]
        public Input<string>? SettingValue { get; set; }

        /// <summary>
        /// Status of the service setting. Value can be `Default`, `Customized` or `PendingUpdate`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ServiceSettingState()
        {
        }
        public static new ServiceSettingState Empty => new ServiceSettingState();
    }
}
