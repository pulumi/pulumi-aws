// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ssm.ContactsRotation("example", new()
    ///     {
    ///         ContactIds = new[]
    ///         {
    ///             exampleAwsSsmcontactsContact.Arn,
    ///         },
    ///         Name = "rotation",
    ///         Recurrence = new Aws.Ssm.Inputs.ContactsRotationRecurrenceArgs
    ///         {
    ///             NumberOfOnCalls = 1,
    ///             RecurrenceMultiplier = 1,
    ///             DailySettings = new[]
    ///             {
    ///                 new Aws.Ssm.Inputs.ContactsRotationRecurrenceDailySettingArgs
    ///                 {
    ///                     HourOfDay = 9,
    ///                     MinuteOfHour = 0,
    ///                 },
    ///             },
    ///         },
    ///         TimeZoneId = "Australia/Sydney",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Usage with Weekly Settings and Shift Coverages Fields
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ssm.ContactsRotation("example", new()
    ///     {
    ///         ContactIds = new[]
    ///         {
    ///             exampleAwsSsmcontactsContact.Arn,
    ///         },
    ///         Name = "rotation",
    ///         Recurrence = new Aws.Ssm.Inputs.ContactsRotationRecurrenceArgs
    ///         {
    ///             NumberOfOnCalls = 1,
    ///             RecurrenceMultiplier = 1,
    ///             WeeklySettings = new[]
    ///             {
    ///                 new Aws.Ssm.Inputs.ContactsRotationRecurrenceWeeklySettingArgs
    ///                 {
    ///                     DayOfWeek = "WED",
    ///                     HandOffTime = new Aws.Ssm.Inputs.ContactsRotationRecurrenceWeeklySettingHandOffTimeArgs
    ///                     {
    ///                         HourOfDay = 4,
    ///                         MinuteOfHour = 25,
    ///                     },
    ///                 },
    ///                 new Aws.Ssm.Inputs.ContactsRotationRecurrenceWeeklySettingArgs
    ///                 {
    ///                     DayOfWeek = "FRI",
    ///                     HandOffTime = new Aws.Ssm.Inputs.ContactsRotationRecurrenceWeeklySettingHandOffTimeArgs
    ///                     {
    ///                         HourOfDay = 15,
    ///                         MinuteOfHour = 57,
    ///                     },
    ///                 },
    ///             },
    ///             ShiftCoverages = new[]
    ///             {
    ///                 new Aws.Ssm.Inputs.ContactsRotationRecurrenceShiftCoverageArgs
    ///                 {
    ///                     MapBlockKey = "MON",
    ///                     CoverageTimes = new[]
    ///                     {
    ///                         new Aws.Ssm.Inputs.ContactsRotationRecurrenceShiftCoverageCoverageTimeArgs
    ///                         {
    ///                             Start = new Aws.Ssm.Inputs.ContactsRotationRecurrenceShiftCoverageCoverageTimeStartArgs
    ///                             {
    ///                                 HourOfDay = 1,
    ///                                 MinuteOfHour = 0,
    ///                             },
    ///                             End = new Aws.Ssm.Inputs.ContactsRotationRecurrenceShiftCoverageCoverageTimeEndArgs
    ///                             {
    ///                                 HourOfDay = 23,
    ///                                 MinuteOfHour = 0,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         StartTime = "2023-07-20T02:21:49+00:00",
    ///         TimeZoneId = "Australia/Sydney",
    ///         Tags = 
    ///         {
    ///             { "key1", "tag1" },
    ///             { "key2", "tag2" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Usage with Monthly Settings Fields
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ssm.ContactsRotation("example", new()
    ///     {
    ///         ContactIds = new[]
    ///         {
    ///             exampleAwsSsmcontactsContact.Arn,
    ///         },
    ///         Name = "rotation",
    ///         Recurrence = new Aws.Ssm.Inputs.ContactsRotationRecurrenceArgs
    ///         {
    ///             NumberOfOnCalls = 1,
    ///             RecurrenceMultiplier = 1,
    ///             MonthlySettings = new[]
    ///             {
    ///                 new Aws.Ssm.Inputs.ContactsRotationRecurrenceMonthlySettingArgs
    ///                 {
    ///                     DayOfMonth = 20,
    ///                     HandOffTime = new Aws.Ssm.Inputs.ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs
    ///                     {
    ///                         HourOfDay = 8,
    ///                         MinuteOfHour = 0,
    ///                     },
    ///                 },
    ///                 new Aws.Ssm.Inputs.ContactsRotationRecurrenceMonthlySettingArgs
    ///                 {
    ///                     DayOfMonth = 13,
    ///                     HandOffTime = new Aws.Ssm.Inputs.ContactsRotationRecurrenceMonthlySettingHandOffTimeArgs
    ///                     {
    ///                         HourOfDay = 12,
    ///                         MinuteOfHour = 34,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         TimeZoneId = "Australia/Sydney",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CodeGuru Profiler Profiling Group using the `arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:ssm/contactsRotation:ContactsRotation example arn:aws:ssm-contacts:us-east-1:012345678910:rotation/example
    /// ```
    /// </summary>
    [AwsResourceType("aws:ssm/contactsRotation:ContactsRotation")]
    public partial class ContactsRotation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rotation.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
        /// </summary>
        [Output("contactIds")]
        public Output<ImmutableArray<string>> ContactIds { get; private set; } = null!;

        /// <summary>
        /// The name for the rotation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("recurrence")]
        public Output<Outputs.ContactsRotationRecurrence?> Recurrence { get; private set; } = null!;

        /// <summary>
        /// The date and time, in RFC 3339 format, that the rotation goes into effect.
        /// </summary>
        [Output("startTime")]
        public Output<string?> StartTime { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The time zone to base the rotationâ€™s activity on in Internet Assigned Numbers Authority (IANA) format.
        /// </summary>
        [Output("timeZoneId")]
        public Output<string> TimeZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a ContactsRotation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContactsRotation(string name, ContactsRotationArgs args, CustomResourceOptions? options = null)
            : base("aws:ssm/contactsRotation:ContactsRotation", name, args ?? new ContactsRotationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContactsRotation(string name, Input<string> id, ContactsRotationState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssm/contactsRotation:ContactsRotation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContactsRotation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContactsRotation Get(string name, Input<string> id, ContactsRotationState? state = null, CustomResourceOptions? options = null)
        {
            return new ContactsRotation(name, id, state, options);
        }
    }

    public sealed class ContactsRotationArgs : global::Pulumi.ResourceArgs
    {
        [Input("contactIds", required: true)]
        private InputList<string>? _contactIds;

        /// <summary>
        /// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
        /// </summary>
        public InputList<string> ContactIds
        {
            get => _contactIds ?? (_contactIds = new InputList<string>());
            set => _contactIds = value;
        }

        /// <summary>
        /// The name for the rotation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("recurrence")]
        public Input<Inputs.ContactsRotationRecurrenceArgs>? Recurrence { get; set; }

        /// <summary>
        /// The date and time, in RFC 3339 format, that the rotation goes into effect.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The time zone to base the rotationâ€™s activity on in Internet Assigned Numbers Authority (IANA) format.
        /// </summary>
        [Input("timeZoneId", required: true)]
        public Input<string> TimeZoneId { get; set; } = null!;

        public ContactsRotationArgs()
        {
        }
        public static new ContactsRotationArgs Empty => new ContactsRotationArgs();
    }

    public sealed class ContactsRotationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the rotation.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("contactIds")]
        private InputList<string>? _contactIds;

        /// <summary>
        /// Amazon Resource Names (ARNs) of the contacts to add to the rotation. The order in which you list the contacts is their shift order in the rotation schedule.
        /// </summary>
        public InputList<string> ContactIds
        {
            get => _contactIds ?? (_contactIds = new InputList<string>());
            set => _contactIds = value;
        }

        /// <summary>
        /// The name for the rotation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Information about when an on-call rotation is in effect and how long the rotation period lasts. Exactly one of either `daily_settings`, `monthly_settings`, or `weekly_settings` must be populated. See Recurrence for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("recurrence")]
        public Input<Inputs.ContactsRotationRecurrenceGetArgs>? Recurrence { get; set; }

        /// <summary>
        /// The date and time, in RFC 3339 format, that the rotation goes into effect.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The time zone to base the rotationâ€™s activity on in Internet Assigned Numbers Authority (IANA) format.
        /// </summary>
        [Input("timeZoneId")]
        public Input<string>? TimeZoneId { get; set; }

        public ContactsRotationState()
        {
        }
        public static new ContactsRotationState Empty => new ContactsRotationState();
    }
}
