// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    public static class GetPatchBaseline
    {
        public static Task<GetPatchBaselineResult> InvokeAsync(GetPatchBaselineArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPatchBaselineResult>("aws:ssm/getPatchBaseline:getPatchBaseline", args ?? new GetPatchBaselineArgs(), options.WithDefaults());

        public static Output<GetPatchBaselineResult> Invoke(GetPatchBaselineInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPatchBaselineResult>("aws:ssm/getPatchBaseline:getPatchBaseline", args ?? new GetPatchBaselineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPatchBaselineArgs : global::Pulumi.InvokeArgs
    {
        [Input("defaultBaseline")]
        public bool? DefaultBaseline { get; set; }

        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        [Input("operatingSystem")]
        public string? OperatingSystem { get; set; }

        [Input("owner", required: true)]
        public string Owner { get; set; } = null!;

        public GetPatchBaselineArgs()
        {
        }
        public static new GetPatchBaselineArgs Empty => new GetPatchBaselineArgs();
    }

    public sealed class GetPatchBaselineInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("defaultBaseline")]
        public Input<bool>? DefaultBaseline { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        public GetPatchBaselineInvokeArgs()
        {
        }
        public static new GetPatchBaselineInvokeArgs Empty => new GetPatchBaselineInvokeArgs();
    }


    [OutputType]
    public sealed class GetPatchBaselineResult
    {
        public readonly ImmutableArray<Outputs.GetPatchBaselineApprovalRuleResult> ApprovalRules;
        public readonly ImmutableArray<string> ApprovedPatches;
        public readonly string ApprovedPatchesComplianceLevel;
        public readonly bool ApprovedPatchesEnableNonSecurity;
        public readonly bool? DefaultBaseline;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetPatchBaselineGlobalFilterResult> GlobalFilters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string? NamePrefix;
        public readonly string? OperatingSystem;
        public readonly string Owner;
        public readonly ImmutableArray<string> RejectedPatches;
        public readonly string RejectedPatchesAction;
        public readonly ImmutableArray<Outputs.GetPatchBaselineSourceResult> Sources;

        [OutputConstructor]
        private GetPatchBaselineResult(
            ImmutableArray<Outputs.GetPatchBaselineApprovalRuleResult> approvalRules,

            ImmutableArray<string> approvedPatches,

            string approvedPatchesComplianceLevel,

            bool approvedPatchesEnableNonSecurity,

            bool? defaultBaseline,

            string description,

            ImmutableArray<Outputs.GetPatchBaselineGlobalFilterResult> globalFilters,

            string id,

            string name,

            string? namePrefix,

            string? operatingSystem,

            string owner,

            ImmutableArray<string> rejectedPatches,

            string rejectedPatchesAction,

            ImmutableArray<Outputs.GetPatchBaselineSourceResult> sources)
        {
            ApprovalRules = approvalRules;
            ApprovedPatches = approvedPatches;
            ApprovedPatchesComplianceLevel = approvedPatchesComplianceLevel;
            ApprovedPatchesEnableNonSecurity = approvedPatchesEnableNonSecurity;
            DefaultBaseline = defaultBaseline;
            Description = description;
            GlobalFilters = globalFilters;
            Id = id;
            Name = name;
            NamePrefix = namePrefix;
            OperatingSystem = operatingSystem;
            Owner = owner;
            RejectedPatches = rejectedPatches;
            RejectedPatchesAction = rejectedPatchesAction;
            Sources = sources;
        }
    }
}
