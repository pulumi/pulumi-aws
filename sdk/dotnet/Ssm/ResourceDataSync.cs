// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    /// <summary>
    /// Provides a SSM resource data sync.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var hogeBucket = new Aws.S3.Bucket("hogeBucket", new Aws.S3.BucketArgs
    ///         {
    ///         });
    ///         var hogeBucketPolicy = new Aws.S3.BucketPolicy("hogeBucketPolicy", new Aws.S3.BucketPolicyArgs
    ///         {
    ///             Bucket = hogeBucket.BucketName,
    ///             Policy = @"{
    ///     ""Version"": ""2012-10-17"",
    ///     ""Statement"": [
    ///         {
    ///             ""Sid"": ""SSMBucketPermissionsCheck"",
    ///             ""Effect"": ""Allow"",
    ///             ""Principal"": {
    ///                 ""Service"": ""ssm.amazonaws.com""
    ///             },
    ///             ""Action"": ""s3:GetBucketAcl"",
    ///             ""Resource"": ""arn:aws:s3:::tf-test-bucket-1234""
    ///         },
    ///         {
    ///             ""Sid"": "" SSMBucketDelivery"",
    ///             ""Effect"": ""Allow"",
    ///             ""Principal"": {
    ///                 ""Service"": ""ssm.amazonaws.com""
    ///             },
    ///             ""Action"": ""s3:PutObject"",
    ///             ""Resource"": [""arn:aws:s3:::tf-test-bucket-1234/*""],
    ///             ""Condition"": {
    ///                 ""StringEquals"": {
    ///                     ""s3:x-amz-acl"": ""bucket-owner-full-control""
    ///                 }
    ///             }
    ///         }
    ///     ]
    /// }
    /// ",
    ///         });
    ///         var foo = new Aws.Ssm.ResourceDataSync("foo", new Aws.Ssm.ResourceDataSyncArgs
    ///         {
    ///             S3Destination = new Aws.Ssm.Inputs.ResourceDataSyncS3DestinationArgs
    ///             {
    ///                 BucketName = hogeBucket.BucketName,
    ///                 Region = hogeBucket.Region,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSM resource data sync can be imported using the `name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:ssm/resourceDataSync:ResourceDataSync example example-name
    /// ```
    /// </summary>
    public partial class ResourceDataSync : Pulumi.CustomResource
    {
        /// <summary>
        /// Name for the configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Amazon S3 configuration details for the sync.
        /// </summary>
        [Output("s3Destination")]
        public Output<Outputs.ResourceDataSyncS3Destination> S3Destination { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceDataSync resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceDataSync(string name, ResourceDataSyncArgs args, CustomResourceOptions? options = null)
            : base("aws:ssm/resourceDataSync:ResourceDataSync", name, args ?? new ResourceDataSyncArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceDataSync(string name, Input<string> id, ResourceDataSyncState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssm/resourceDataSync:ResourceDataSync", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceDataSync resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceDataSync Get(string name, Input<string> id, ResourceDataSyncState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceDataSync(name, id, state, options);
        }
    }

    public sealed class ResourceDataSyncArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name for the configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Amazon S3 configuration details for the sync.
        /// </summary>
        [Input("s3Destination", required: true)]
        public Input<Inputs.ResourceDataSyncS3DestinationArgs> S3Destination { get; set; } = null!;

        public ResourceDataSyncArgs()
        {
        }
    }

    public sealed class ResourceDataSyncState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name for the configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Amazon S3 configuration details for the sync.
        /// </summary>
        [Input("s3Destination")]
        public Input<Inputs.ResourceDataSyncS3DestinationGetArgs>? S3Destination { get; set; }

        public ResourceDataSyncState()
        {
        }
    }
}
