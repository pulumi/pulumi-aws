// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    /// <summary>
    /// Provides an SSM Patch Baseline resource
    /// 
    /// &gt; **NOTE on Patch Baselines:** The `approved_patches` and `approval_rule` are 
    /// both marked as optional fields, but the Patch Baseline requires that at least one
    /// of them is specified.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ssm_patch_baseline.html.markdown.
    /// </summary>
    public partial class PatchBaseline : Pulumi.CustomResource
    {
        /// <summary>
        /// A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below.
        /// </summary>
        [Output("approvalRules")]
        public Output<ImmutableArray<Outputs.PatchBaselineApprovalRules>> ApprovalRules { get; private set; } = null!;

        /// <summary>
        /// A list of explicitly approved patches for the baseline.
        /// </summary>
        [Output("approvedPatches")]
        public Output<ImmutableArray<string>> ApprovedPatches { get; private set; } = null!;

        /// <summary>
        /// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
        /// </summary>
        [Output("approvedPatchesComplianceLevel")]
        public Output<string?> ApprovedPatchesComplianceLevel { get; private set; } = null!;

        /// <summary>
        /// The description of the patch baseline.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
        /// </summary>
        [Output("globalFilters")]
        public Output<ImmutableArray<Outputs.PatchBaselineGlobalFilters>> GlobalFilters { get; private set; } = null!;

        /// <summary>
        /// The name of the patch baseline.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Defines the operating system the patch baseline applies to. Supported operating systems include `WINDOWS`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `SUSE`, `UBUNTU`, `CENTOS`, and `REDHAT_ENTERPRISE_LINUX`. The Default value is `WINDOWS`.
        /// </summary>
        [Output("operatingSystem")]
        public Output<string?> OperatingSystem { get; private set; } = null!;

        /// <summary>
        /// A list of rejected patches.
        /// </summary>
        [Output("rejectedPatches")]
        public Output<ImmutableArray<string>> RejectedPatches { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a PatchBaseline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PatchBaseline(string name, PatchBaselineArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:ssm/patchBaseline:PatchBaseline", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private PatchBaseline(string name, Input<string> id, PatchBaselineState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssm/patchBaseline:PatchBaseline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PatchBaseline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PatchBaseline Get(string name, Input<string> id, PatchBaselineState? state = null, CustomResourceOptions? options = null)
        {
            return new PatchBaseline(name, id, state, options);
        }
    }

    public sealed class PatchBaselineArgs : Pulumi.ResourceArgs
    {
        [Input("approvalRules")]
        private InputList<Inputs.PatchBaselineApprovalRulesArgs>? _approvalRules;

        /// <summary>
        /// A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below.
        /// </summary>
        public InputList<Inputs.PatchBaselineApprovalRulesArgs> ApprovalRules
        {
            get => _approvalRules ?? (_approvalRules = new InputList<Inputs.PatchBaselineApprovalRulesArgs>());
            set => _approvalRules = value;
        }

        [Input("approvedPatches")]
        private InputList<string>? _approvedPatches;

        /// <summary>
        /// A list of explicitly approved patches for the baseline.
        /// </summary>
        public InputList<string> ApprovedPatches
        {
            get => _approvedPatches ?? (_approvedPatches = new InputList<string>());
            set => _approvedPatches = value;
        }

        /// <summary>
        /// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
        /// </summary>
        [Input("approvedPatchesComplianceLevel")]
        public Input<string>? ApprovedPatchesComplianceLevel { get; set; }

        /// <summary>
        /// The description of the patch baseline.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("globalFilters")]
        private InputList<Inputs.PatchBaselineGlobalFiltersArgs>? _globalFilters;

        /// <summary>
        /// A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
        /// </summary>
        public InputList<Inputs.PatchBaselineGlobalFiltersArgs> GlobalFilters
        {
            get => _globalFilters ?? (_globalFilters = new InputList<Inputs.PatchBaselineGlobalFiltersArgs>());
            set => _globalFilters = value;
        }

        /// <summary>
        /// The name of the patch baseline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the operating system the patch baseline applies to. Supported operating systems include `WINDOWS`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `SUSE`, `UBUNTU`, `CENTOS`, and `REDHAT_ENTERPRISE_LINUX`. The Default value is `WINDOWS`.
        /// </summary>
        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        [Input("rejectedPatches")]
        private InputList<string>? _rejectedPatches;

        /// <summary>
        /// A list of rejected patches.
        /// </summary>
        public InputList<string> RejectedPatches
        {
            get => _rejectedPatches ?? (_rejectedPatches = new InputList<string>());
            set => _rejectedPatches = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public PatchBaselineArgs()
        {
        }
    }

    public sealed class PatchBaselineState : Pulumi.ResourceArgs
    {
        [Input("approvalRules")]
        private InputList<Inputs.PatchBaselineApprovalRulesGetArgs>? _approvalRules;

        /// <summary>
        /// A set of rules used to include patches in the baseline. up to 10 approval rules can be specified. Each approval_rule block requires the fields documented below.
        /// </summary>
        public InputList<Inputs.PatchBaselineApprovalRulesGetArgs> ApprovalRules
        {
            get => _approvalRules ?? (_approvalRules = new InputList<Inputs.PatchBaselineApprovalRulesGetArgs>());
            set => _approvalRules = value;
        }

        [Input("approvedPatches")]
        private InputList<string>? _approvedPatches;

        /// <summary>
        /// A list of explicitly approved patches for the baseline.
        /// </summary>
        public InputList<string> ApprovedPatches
        {
            get => _approvedPatches ?? (_approvedPatches = new InputList<string>());
            set => _approvedPatches = value;
        }

        /// <summary>
        /// Defines the compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid compliance levels include the following: `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
        /// </summary>
        [Input("approvedPatchesComplianceLevel")]
        public Input<string>? ApprovedPatchesComplianceLevel { get; set; }

        /// <summary>
        /// The description of the patch baseline.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("globalFilters")]
        private InputList<Inputs.PatchBaselineGlobalFiltersGetArgs>? _globalFilters;

        /// <summary>
        /// A set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT | CLASSIFICATION | MSRC_SEVERITY | PATCH_ID`.
        /// </summary>
        public InputList<Inputs.PatchBaselineGlobalFiltersGetArgs> GlobalFilters
        {
            get => _globalFilters ?? (_globalFilters = new InputList<Inputs.PatchBaselineGlobalFiltersGetArgs>());
            set => _globalFilters = value;
        }

        /// <summary>
        /// The name of the patch baseline.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Defines the operating system the patch baseline applies to. Supported operating systems include `WINDOWS`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `SUSE`, `UBUNTU`, `CENTOS`, and `REDHAT_ENTERPRISE_LINUX`. The Default value is `WINDOWS`.
        /// </summary>
        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        [Input("rejectedPatches")]
        private InputList<string>? _rejectedPatches;

        /// <summary>
        /// A list of rejected patches.
        /// </summary>
        public InputList<string> RejectedPatches
        {
            get => _rejectedPatches ?? (_rejectedPatches = new InputList<string>());
            set => _rejectedPatches = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public PatchBaselineState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PatchBaselineApprovalRulesArgs : Pulumi.ResourceArgs
    {
        [Input("approveAfterDays", required: true)]
        public Input<int> ApproveAfterDays { get; set; } = null!;

        [Input("complianceLevel")]
        public Input<string>? ComplianceLevel { get; set; }

        [Input("enableNonSecurity")]
        public Input<bool>? EnableNonSecurity { get; set; }

        [Input("patchFilters", required: true)]
        private InputList<PatchBaselineApprovalRulesPatchFiltersArgs>? _patchFilters;
        public InputList<PatchBaselineApprovalRulesPatchFiltersArgs> PatchFilters
        {
            get => _patchFilters ?? (_patchFilters = new InputList<PatchBaselineApprovalRulesPatchFiltersArgs>());
            set => _patchFilters = value;
        }

        public PatchBaselineApprovalRulesArgs()
        {
        }
    }

    public sealed class PatchBaselineApprovalRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("approveAfterDays", required: true)]
        public Input<int> ApproveAfterDays { get; set; } = null!;

        [Input("complianceLevel")]
        public Input<string>? ComplianceLevel { get; set; }

        [Input("enableNonSecurity")]
        public Input<bool>? EnableNonSecurity { get; set; }

        [Input("patchFilters", required: true)]
        private InputList<PatchBaselineApprovalRulesPatchFiltersGetArgs>? _patchFilters;
        public InputList<PatchBaselineApprovalRulesPatchFiltersGetArgs> PatchFilters
        {
            get => _patchFilters ?? (_patchFilters = new InputList<PatchBaselineApprovalRulesPatchFiltersGetArgs>());
            set => _patchFilters = value;
        }

        public PatchBaselineApprovalRulesGetArgs()
        {
        }
    }

    public sealed class PatchBaselineApprovalRulesPatchFiltersArgs : Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public PatchBaselineApprovalRulesPatchFiltersArgs()
        {
        }
    }

    public sealed class PatchBaselineApprovalRulesPatchFiltersGetArgs : Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public PatchBaselineApprovalRulesPatchFiltersGetArgs()
        {
        }
    }

    public sealed class PatchBaselineGlobalFiltersArgs : Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public PatchBaselineGlobalFiltersArgs()
        {
        }
    }

    public sealed class PatchBaselineGlobalFiltersGetArgs : Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public PatchBaselineGlobalFiltersGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PatchBaselineApprovalRules
    {
        public readonly int ApproveAfterDays;
        public readonly string? ComplianceLevel;
        public readonly bool? EnableNonSecurity;
        public readonly ImmutableArray<PatchBaselineApprovalRulesPatchFilters> PatchFilters;

        [OutputConstructor]
        private PatchBaselineApprovalRules(
            int approveAfterDays,
            string? complianceLevel,
            bool? enableNonSecurity,
            ImmutableArray<PatchBaselineApprovalRulesPatchFilters> patchFilters)
        {
            ApproveAfterDays = approveAfterDays;
            ComplianceLevel = complianceLevel;
            EnableNonSecurity = enableNonSecurity;
            PatchFilters = patchFilters;
        }
    }

    [OutputType]
    public sealed class PatchBaselineApprovalRulesPatchFilters
    {
        public readonly string Key;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private PatchBaselineApprovalRulesPatchFilters(
            string key,
            ImmutableArray<string> values)
        {
            Key = key;
            Values = values;
        }
    }

    [OutputType]
    public sealed class PatchBaselineGlobalFilters
    {
        public readonly string Key;
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private PatchBaselineGlobalFilters(
            string key,
            ImmutableArray<string> values)
        {
            Key = key;
            Values = values;
        }
    }
    }
}
