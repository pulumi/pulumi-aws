// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    [AwsResourceType("aws:ssm/patchBaseline:PatchBaseline")]
    public partial class PatchBaseline : global::Pulumi.CustomResource
    {
        [Output("approvalRules")]
        public Output<ImmutableArray<Outputs.PatchBaselineApprovalRule>> ApprovalRules { get; private set; } = null!;

        [Output("approvedPatches")]
        public Output<ImmutableArray<string>> ApprovedPatches { get; private set; } = null!;

        [Output("approvedPatchesComplianceLevel")]
        public Output<string?> ApprovedPatchesComplianceLevel { get; private set; } = null!;

        [Output("approvedPatchesEnableNonSecurity")]
        public Output<bool?> ApprovedPatchesEnableNonSecurity { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("globalFilters")]
        public Output<ImmutableArray<Outputs.PatchBaselineGlobalFilter>> GlobalFilters { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("operatingSystem")]
        public Output<string?> OperatingSystem { get; private set; } = null!;

        [Output("rejectedPatches")]
        public Output<ImmutableArray<string>> RejectedPatches { get; private set; } = null!;

        [Output("rejectedPatchesAction")]
        public Output<string> RejectedPatchesAction { get; private set; } = null!;

        [Output("sources")]
        public Output<ImmutableArray<Outputs.PatchBaselineSource>> Sources { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a PatchBaseline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PatchBaseline(string name, PatchBaselineArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:ssm/patchBaseline:PatchBaseline", name, args ?? new PatchBaselineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PatchBaseline(string name, Input<string> id, PatchBaselineState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssm/patchBaseline:PatchBaseline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PatchBaseline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PatchBaseline Get(string name, Input<string> id, PatchBaselineState? state = null, CustomResourceOptions? options = null)
        {
            return new PatchBaseline(name, id, state, options);
        }
    }

    public sealed class PatchBaselineArgs : global::Pulumi.ResourceArgs
    {
        [Input("approvalRules")]
        private InputList<Inputs.PatchBaselineApprovalRuleArgs>? _approvalRules;
        public InputList<Inputs.PatchBaselineApprovalRuleArgs> ApprovalRules
        {
            get => _approvalRules ?? (_approvalRules = new InputList<Inputs.PatchBaselineApprovalRuleArgs>());
            set => _approvalRules = value;
        }

        [Input("approvedPatches")]
        private InputList<string>? _approvedPatches;
        public InputList<string> ApprovedPatches
        {
            get => _approvedPatches ?? (_approvedPatches = new InputList<string>());
            set => _approvedPatches = value;
        }

        [Input("approvedPatchesComplianceLevel")]
        public Input<string>? ApprovedPatchesComplianceLevel { get; set; }

        [Input("approvedPatchesEnableNonSecurity")]
        public Input<bool>? ApprovedPatchesEnableNonSecurity { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("globalFilters")]
        private InputList<Inputs.PatchBaselineGlobalFilterArgs>? _globalFilters;
        public InputList<Inputs.PatchBaselineGlobalFilterArgs> GlobalFilters
        {
            get => _globalFilters ?? (_globalFilters = new InputList<Inputs.PatchBaselineGlobalFilterArgs>());
            set => _globalFilters = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        [Input("rejectedPatches")]
        private InputList<string>? _rejectedPatches;
        public InputList<string> RejectedPatches
        {
            get => _rejectedPatches ?? (_rejectedPatches = new InputList<string>());
            set => _rejectedPatches = value;
        }

        [Input("rejectedPatchesAction")]
        public Input<string>? RejectedPatchesAction { get; set; }

        [Input("sources")]
        private InputList<Inputs.PatchBaselineSourceArgs>? _sources;
        public InputList<Inputs.PatchBaselineSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.PatchBaselineSourceArgs>());
            set => _sources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PatchBaselineArgs()
        {
        }
        public static new PatchBaselineArgs Empty => new PatchBaselineArgs();
    }

    public sealed class PatchBaselineState : global::Pulumi.ResourceArgs
    {
        [Input("approvalRules")]
        private InputList<Inputs.PatchBaselineApprovalRuleGetArgs>? _approvalRules;
        public InputList<Inputs.PatchBaselineApprovalRuleGetArgs> ApprovalRules
        {
            get => _approvalRules ?? (_approvalRules = new InputList<Inputs.PatchBaselineApprovalRuleGetArgs>());
            set => _approvalRules = value;
        }

        [Input("approvedPatches")]
        private InputList<string>? _approvedPatches;
        public InputList<string> ApprovedPatches
        {
            get => _approvedPatches ?? (_approvedPatches = new InputList<string>());
            set => _approvedPatches = value;
        }

        [Input("approvedPatchesComplianceLevel")]
        public Input<string>? ApprovedPatchesComplianceLevel { get; set; }

        [Input("approvedPatchesEnableNonSecurity")]
        public Input<bool>? ApprovedPatchesEnableNonSecurity { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("globalFilters")]
        private InputList<Inputs.PatchBaselineGlobalFilterGetArgs>? _globalFilters;
        public InputList<Inputs.PatchBaselineGlobalFilterGetArgs> GlobalFilters
        {
            get => _globalFilters ?? (_globalFilters = new InputList<Inputs.PatchBaselineGlobalFilterGetArgs>());
            set => _globalFilters = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operatingSystem")]
        public Input<string>? OperatingSystem { get; set; }

        [Input("rejectedPatches")]
        private InputList<string>? _rejectedPatches;
        public InputList<string> RejectedPatches
        {
            get => _rejectedPatches ?? (_rejectedPatches = new InputList<string>());
            set => _rejectedPatches = value;
        }

        [Input("rejectedPatchesAction")]
        public Input<string>? RejectedPatchesAction { get; set; }

        [Input("sources")]
        private InputList<Inputs.PatchBaselineSourceGetArgs>? _sources;
        public InputList<Inputs.PatchBaselineSourceGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.PatchBaselineSourceGetArgs>());
            set => _sources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public PatchBaselineState()
        {
        }
        public static new PatchBaselineState Empty => new PatchBaselineState();
    }
}
