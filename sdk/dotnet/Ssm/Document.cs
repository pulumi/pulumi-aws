// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ssm
{
    [AwsResourceType("aws:ssm/document:Document")]
    public partial class Document : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("attachmentsSources")]
        public Output<ImmutableArray<Outputs.DocumentAttachmentsSource>> AttachmentsSources { get; private set; } = null!;

        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        [Output("defaultVersion")]
        public Output<string> DefaultVersion { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("documentFormat")]
        public Output<string?> DocumentFormat { get; private set; } = null!;

        [Output("documentType")]
        public Output<string> DocumentType { get; private set; } = null!;

        [Output("documentVersion")]
        public Output<string> DocumentVersion { get; private set; } = null!;

        [Output("hash")]
        public Output<string> Hash { get; private set; } = null!;

        [Output("hashType")]
        public Output<string> HashType { get; private set; } = null!;

        [Output("latestVersion")]
        public Output<string> LatestVersion { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        [Output("parameters")]
        public Output<ImmutableArray<Outputs.DocumentParameter>> Parameters { get; private set; } = null!;

        [Output("permissions")]
        public Output<ImmutableDictionary<string, string>?> Permissions { get; private set; } = null!;

        [Output("platformTypes")]
        public Output<ImmutableArray<string>> PlatformTypes { get; private set; } = null!;

        [Output("schemaVersion")]
        public Output<string> SchemaVersion { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("targetType")]
        public Output<string?> TargetType { get; private set; } = null!;

        [Output("versionName")]
        public Output<string?> VersionName { get; private set; } = null!;


        /// <summary>
        /// Create a Document resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Document(string name, DocumentArgs args, CustomResourceOptions? options = null)
            : base("aws:ssm/document:Document", name, args ?? new DocumentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Document(string name, Input<string> id, DocumentState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssm/document:Document", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Document resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Document Get(string name, Input<string> id, DocumentState? state = null, CustomResourceOptions? options = null)
        {
            return new Document(name, id, state, options);
        }
    }

    public sealed class DocumentArgs : global::Pulumi.ResourceArgs
    {
        [Input("attachmentsSources")]
        private InputList<Inputs.DocumentAttachmentsSourceArgs>? _attachmentsSources;
        public InputList<Inputs.DocumentAttachmentsSourceArgs> AttachmentsSources
        {
            get => _attachmentsSources ?? (_attachmentsSources = new InputList<Inputs.DocumentAttachmentsSourceArgs>());
            set => _attachmentsSources = value;
        }

        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("documentFormat")]
        public Input<string>? DocumentFormat { get; set; }

        [Input("documentType", required: true)]
        public Input<string> DocumentType { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputMap<string>? _permissions;
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public DocumentArgs()
        {
        }
        public static new DocumentArgs Empty => new DocumentArgs();
    }

    public sealed class DocumentState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("attachmentsSources")]
        private InputList<Inputs.DocumentAttachmentsSourceGetArgs>? _attachmentsSources;
        public InputList<Inputs.DocumentAttachmentsSourceGetArgs> AttachmentsSources
        {
            get => _attachmentsSources ?? (_attachmentsSources = new InputList<Inputs.DocumentAttachmentsSourceGetArgs>());
            set => _attachmentsSources = value;
        }

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        [Input("defaultVersion")]
        public Input<string>? DefaultVersion { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("documentFormat")]
        public Input<string>? DocumentFormat { get; set; }

        [Input("documentType")]
        public Input<string>? DocumentType { get; set; }

        [Input("documentVersion")]
        public Input<string>? DocumentVersion { get; set; }

        [Input("hash")]
        public Input<string>? Hash { get; set; }

        [Input("hashType")]
        public Input<string>? HashType { get; set; }

        [Input("latestVersion")]
        public Input<string>? LatestVersion { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("parameters")]
        private InputList<Inputs.DocumentParameterGetArgs>? _parameters;
        public InputList<Inputs.DocumentParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.DocumentParameterGetArgs>());
            set => _parameters = value;
        }

        [Input("permissions")]
        private InputMap<string>? _permissions;
        public InputMap<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputMap<string>());
            set => _permissions = value;
        }

        [Input("platformTypes")]
        private InputList<string>? _platformTypes;
        public InputList<string> PlatformTypes
        {
            get => _platformTypes ?? (_platformTypes = new InputList<string>());
            set => _platformTypes = value;
        }

        [Input("schemaVersion")]
        public Input<string>? SchemaVersion { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        public DocumentState()
        {
        }
        public static new DocumentState Empty => new DocumentState();
    }
}
