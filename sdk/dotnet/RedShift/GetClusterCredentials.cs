// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    public static class GetClusterCredentials
    {
        /// <summary>
        /// Provides redshift subnet group.
        /// </summary>
        public static Task<GetClusterCredentialsResult> InvokeAsync(GetClusterCredentialsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterCredentialsResult>("aws:redshift/getClusterCredentials:getClusterCredentials", args ?? new GetClusterCredentialsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides redshift subnet group.
        /// </summary>
        public static Output<GetClusterCredentialsResult> Invoke(GetClusterCredentialsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClusterCredentialsResult>("aws:redshift/getClusterCredentials:getClusterCredentials", args ?? new GetClusterCredentialsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterCredentialsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Create a database user with the name specified for the user named in `db_user` if one does not exist.
        /// </summary>
        [Input("autoCreate")]
        public bool? AutoCreate { get; set; }

        /// <summary>
        /// The unique identifier of the cluster that contains the database for which your are requesting credentials.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public string ClusterIdentifier { get; set; } = null!;

        [Input("dbGroups")]
        private List<string>? _dbGroups;

        /// <summary>
        /// A list of the names of existing database groups that the user named in `db_user` will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to `PUBLIC`.
        /// </summary>
        public List<string> DbGroups
        {
            get => _dbGroups ?? (_dbGroups = new List<string>());
            set => _dbGroups = value;
        }

        /// <summary>
        /// The name of a database that DbUser is authorized to log on to. If `db_name` is not specified, `db_user` can log on to any existing database.
        /// </summary>
        [Input("dbName")]
        public string? DbName { get; set; }

        /// <summary>
        /// The name of a database user. If a user name matching `db_user` exists in the database, the temporary user credentials have the same permissions as the  existing user. If `db_user` doesn't exist in the database and `auto_create` is `True`, a new user is created using the value for `db_user` with `PUBLIC` permissions.  If a database user matching the value for `db_user` doesn't exist and `not` is `False`, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.
        /// </summary>
        [Input("dbUser", required: true)]
        public string DbUser { get; set; } = null!;

        /// <summary>
        /// The number of seconds until the returned temporary password expires. Valid values are between `900` and `3600`. Default value is `900`.
        /// </summary>
        [Input("durationSeconds")]
        public int? DurationSeconds { get; set; }

        public GetClusterCredentialsArgs()
        {
        }
    }

    public sealed class GetClusterCredentialsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Create a database user with the name specified for the user named in `db_user` if one does not exist.
        /// </summary>
        [Input("autoCreate")]
        public Input<bool>? AutoCreate { get; set; }

        /// <summary>
        /// The unique identifier of the cluster that contains the database for which your are requesting credentials.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public Input<string> ClusterIdentifier { get; set; } = null!;

        [Input("dbGroups")]
        private InputList<string>? _dbGroups;

        /// <summary>
        /// A list of the names of existing database groups that the user named in `db_user` will join for the current session, in addition to any group memberships for an existing user. If not specified, a new user is added only to `PUBLIC`.
        /// </summary>
        public InputList<string> DbGroups
        {
            get => _dbGroups ?? (_dbGroups = new InputList<string>());
            set => _dbGroups = value;
        }

        /// <summary>
        /// The name of a database that DbUser is authorized to log on to. If `db_name` is not specified, `db_user` can log on to any existing database.
        /// </summary>
        [Input("dbName")]
        public Input<string>? DbName { get; set; }

        /// <summary>
        /// The name of a database user. If a user name matching `db_user` exists in the database, the temporary user credentials have the same permissions as the  existing user. If `db_user` doesn't exist in the database and `auto_create` is `True`, a new user is created using the value for `db_user` with `PUBLIC` permissions.  If a database user matching the value for `db_user` doesn't exist and `not` is `False`, then the command succeeds but the connection attempt will fail because the user doesn't exist in the database.
        /// </summary>
        [Input("dbUser", required: true)]
        public Input<string> DbUser { get; set; } = null!;

        /// <summary>
        /// The number of seconds until the returned temporary password expires. Valid values are between `900` and `3600`. Default value is `900`.
        /// </summary>
        [Input("durationSeconds")]
        public Input<int>? DurationSeconds { get; set; }

        public GetClusterCredentialsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterCredentialsResult
    {
        public readonly bool? AutoCreate;
        public readonly string ClusterIdentifier;
        public readonly ImmutableArray<string> DbGroups;
        public readonly string? DbName;
        /// <summary>
        /// A temporary password that authorizes the user name returned by `db_user` to log on to the database `db_name`.
        /// </summary>
        public readonly string DbPassword;
        public readonly string DbUser;
        public readonly int? DurationSeconds;
        /// <summary>
        /// The date and time the password in `db_password` expires.
        /// </summary>
        public readonly string Expiration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetClusterCredentialsResult(
            bool? autoCreate,

            string clusterIdentifier,

            ImmutableArray<string> dbGroups,

            string? dbName,

            string dbPassword,

            string dbUser,

            int? durationSeconds,

            string expiration,

            string id)
        {
            AutoCreate = autoCreate;
            ClusterIdentifier = clusterIdentifier;
            DbGroups = dbGroups;
            DbName = dbName;
            DbPassword = dbPassword;
            DbUser = dbUser;
            DurationSeconds = durationSeconds;
            Expiration = expiration;
            Id = id;
        }
    }
}
