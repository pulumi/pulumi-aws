// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    /// <summary>
    /// Resource for managing an AWS Redshift Snapshot Copy.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.RedShift.SnapshotCopy("example", new()
    ///     {
    ///         ClusterIdentifier = exampleAwsRedshiftCluster.Id,
    ///         DestinationRegion = "us-east-1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Redshift Snapshot Copy using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:redshift/snapshotCopy:SnapshotCopy example cluster-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:redshift/snapshotCopy:SnapshotCopy")]
    public partial class SnapshotCopy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of the source cluster.
        /// </summary>
        [Output("clusterIdentifier")]
        public Output<string> ClusterIdentifier { get; private set; } = null!;

        /// <summary>
        /// AWS Region to copy snapshots to.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("destinationRegion")]
        public Output<string> DestinationRegion { get; private set; } = null!;

        /// <summary>
        /// Number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is `-1`, the manual snapshot is retained indefinitely.
        /// </summary>
        [Output("manualSnapshotRetentionPeriod")]
        public Output<int> ManualSnapshotRetentionPeriod { get; private set; } = null!;

        /// <summary>
        /// Number of days to retain automated snapshots in the destination region after they are copied from the source region.
        /// </summary>
        [Output("retentionPeriod")]
        public Output<int> RetentionPeriod { get; private set; } = null!;

        /// <summary>
        /// Name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        /// </summary>
        [Output("snapshotCopyGrantName")]
        public Output<string?> SnapshotCopyGrantName { get; private set; } = null!;


        /// <summary>
        /// Create a SnapshotCopy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnapshotCopy(string name, SnapshotCopyArgs args, CustomResourceOptions? options = null)
            : base("aws:redshift/snapshotCopy:SnapshotCopy", name, args ?? new SnapshotCopyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnapshotCopy(string name, Input<string> id, SnapshotCopyState? state = null, CustomResourceOptions? options = null)
            : base("aws:redshift/snapshotCopy:SnapshotCopy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnapshotCopy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnapshotCopy Get(string name, Input<string> id, SnapshotCopyState? state = null, CustomResourceOptions? options = null)
        {
            return new SnapshotCopy(name, id, state, options);
        }
    }

    public sealed class SnapshotCopyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the source cluster.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public Input<string> ClusterIdentifier { get; set; } = null!;

        /// <summary>
        /// AWS Region to copy snapshots to.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("destinationRegion", required: true)]
        public Input<string> DestinationRegion { get; set; } = null!;

        /// <summary>
        /// Number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is `-1`, the manual snapshot is retained indefinitely.
        /// </summary>
        [Input("manualSnapshotRetentionPeriod")]
        public Input<int>? ManualSnapshotRetentionPeriod { get; set; }

        /// <summary>
        /// Number of days to retain automated snapshots in the destination region after they are copied from the source region.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        /// <summary>
        /// Name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        /// </summary>
        [Input("snapshotCopyGrantName")]
        public Input<string>? SnapshotCopyGrantName { get; set; }

        public SnapshotCopyArgs()
        {
        }
        public static new SnapshotCopyArgs Empty => new SnapshotCopyArgs();
    }

    public sealed class SnapshotCopyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the source cluster.
        /// </summary>
        [Input("clusterIdentifier")]
        public Input<string>? ClusterIdentifier { get; set; }

        /// <summary>
        /// AWS Region to copy snapshots to.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("destinationRegion")]
        public Input<string>? DestinationRegion { get; set; }

        /// <summary>
        /// Number of days to retain newly copied snapshots in the destination AWS Region after they are copied from the source AWS Region. If the value is `-1`, the manual snapshot is retained indefinitely.
        /// </summary>
        [Input("manualSnapshotRetentionPeriod")]
        public Input<int>? ManualSnapshotRetentionPeriod { get; set; }

        /// <summary>
        /// Number of days to retain automated snapshots in the destination region after they are copied from the source region.
        /// </summary>
        [Input("retentionPeriod")]
        public Input<int>? RetentionPeriod { get; set; }

        /// <summary>
        /// Name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        /// </summary>
        [Input("snapshotCopyGrantName")]
        public Input<string>? SnapshotCopyGrantName { get; set; }

        public SnapshotCopyState()
        {
        }
        public static new SnapshotCopyState Empty => new SnapshotCopyState();
    }
}
