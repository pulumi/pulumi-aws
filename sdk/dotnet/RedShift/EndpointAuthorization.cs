// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    /// <summary>
    /// Creates a new Amazon Redshift endpoint authorization.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.RedShift.EndpointAuthorization("example", new()
    ///     {
    ///         Account = "01234567910",
    ///         ClusterIdentifier = aws_redshift_cluster.Example.Cluster_identifier,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Redshift endpoint authorization can be imported using the `id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:redshift/endpointAuthorization:EndpointAuthorization example 01234567910:cluster-example-id
    /// ```
    /// </summary>
    [AwsResourceType("aws:redshift/endpointAuthorization:EndpointAuthorization")]
    public partial class EndpointAuthorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Web Services account ID to grant access to.
        /// </summary>
        [Output("account")]
        public Output<string> Account { get; private set; } = null!;

        /// <summary>
        /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
        /// </summary>
        [Output("allowedAllVpcs")]
        public Output<bool> AllowedAllVpcs { get; private set; } = null!;

        /// <summary>
        /// The cluster identifier of the cluster to grant access to.
        /// </summary>
        [Output("clusterIdentifier")]
        public Output<string> ClusterIdentifier { get; private set; } = null!;

        /// <summary>
        /// The number of Redshift-managed VPC endpoints created for the authorization.
        /// </summary>
        [Output("endpointCount")]
        public Output<int> EndpointCount { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
        /// </summary>
        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        /// <summary>
        /// The Amazon Web Services account ID of the grantee of the cluster.
        /// </summary>
        [Output("grantee")]
        public Output<string> Grantee { get; private set; } = null!;

        /// <summary>
        /// The Amazon Web Services account ID of the cluster owner.
        /// </summary>
        [Output("grantor")]
        public Output<string> Grantor { get; private set; } = null!;

        /// <summary>
        /// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
        /// </summary>
        [Output("vpcIds")]
        public Output<ImmutableArray<string>> VpcIds { get; private set; } = null!;


        /// <summary>
        /// Create a EndpointAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EndpointAuthorization(string name, EndpointAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("aws:redshift/endpointAuthorization:EndpointAuthorization", name, args ?? new EndpointAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EndpointAuthorization(string name, Input<string> id, EndpointAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("aws:redshift/endpointAuthorization:EndpointAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EndpointAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EndpointAuthorization Get(string name, Input<string> id, EndpointAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new EndpointAuthorization(name, id, state, options);
        }
    }

    public sealed class EndpointAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Web Services account ID to grant access to.
        /// </summary>
        [Input("account", required: true)]
        public Input<string> Account { get; set; } = null!;

        /// <summary>
        /// The cluster identifier of the cluster to grant access to.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public Input<string> ClusterIdentifier { get; set; } = null!;

        /// <summary>
        /// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("vpcIds")]
        private InputList<string>? _vpcIds;

        /// <summary>
        /// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
        /// </summary>
        public InputList<string> VpcIds
        {
            get => _vpcIds ?? (_vpcIds = new InputList<string>());
            set => _vpcIds = value;
        }

        public EndpointAuthorizationArgs()
        {
        }
        public static new EndpointAuthorizationArgs Empty => new EndpointAuthorizationArgs();
    }

    public sealed class EndpointAuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Web Services account ID to grant access to.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        /// <summary>
        /// Indicates whether all VPCs in the grantee account are allowed access to the cluster.
        /// </summary>
        [Input("allowedAllVpcs")]
        public Input<bool>? AllowedAllVpcs { get; set; }

        /// <summary>
        /// The cluster identifier of the cluster to grant access to.
        /// </summary>
        [Input("clusterIdentifier")]
        public Input<string>? ClusterIdentifier { get; set; }

        /// <summary>
        /// The number of Redshift-managed VPC endpoints created for the authorization.
        /// </summary>
        [Input("endpointCount")]
        public Input<int>? EndpointCount { get; set; }

        /// <summary>
        /// Indicates whether to force the revoke action. If true, the Redshift-managed VPC endpoints associated with the endpoint authorization are also deleted. Default value is `false`.
        /// </summary>
        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        /// <summary>
        /// The Amazon Web Services account ID of the grantee of the cluster.
        /// </summary>
        [Input("grantee")]
        public Input<string>? Grantee { get; set; }

        /// <summary>
        /// The Amazon Web Services account ID of the cluster owner.
        /// </summary>
        [Input("grantor")]
        public Input<string>? Grantor { get; set; }

        [Input("vpcIds")]
        private InputList<string>? _vpcIds;

        /// <summary>
        /// The virtual private cloud (VPC) identifiers to grant access to. If none are specified all VPCs in shared account are allowed.
        /// </summary>
        public InputList<string> VpcIds
        {
            get => _vpcIds ?? (_vpcIds = new InputList<string>());
            set => _vpcIds = value;
        }

        public EndpointAuthorizationState()
        {
        }
        public static new EndpointAuthorizationState Empty => new EndpointAuthorizationState();
    }
}
