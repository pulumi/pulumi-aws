// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    [AwsResourceType("aws:redshift/hsmConfiguration:HsmConfiguration")]
    public partial class HsmConfiguration : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("hsmConfigurationIdentifier")]
        public Output<string> HsmConfigurationIdentifier { get; private set; } = null!;

        [Output("hsmIpAddress")]
        public Output<string> HsmIpAddress { get; private set; } = null!;

        [Output("hsmPartitionName")]
        public Output<string> HsmPartitionName { get; private set; } = null!;

        [Output("hsmPartitionPassword")]
        public Output<string> HsmPartitionPassword { get; private set; } = null!;

        [Output("hsmServerPublicCertificate")]
        public Output<string> HsmServerPublicCertificate { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a HsmConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HsmConfiguration(string name, HsmConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:redshift/hsmConfiguration:HsmConfiguration", name, args ?? new HsmConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HsmConfiguration(string name, Input<string> id, HsmConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:redshift/hsmConfiguration:HsmConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "hsmPartitionPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HsmConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HsmConfiguration Get(string name, Input<string> id, HsmConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new HsmConfiguration(name, id, state, options);
        }
    }

    public sealed class HsmConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("hsmConfigurationIdentifier", required: true)]
        public Input<string> HsmConfigurationIdentifier { get; set; } = null!;

        [Input("hsmIpAddress", required: true)]
        public Input<string> HsmIpAddress { get; set; } = null!;

        [Input("hsmPartitionName", required: true)]
        public Input<string> HsmPartitionName { get; set; } = null!;

        [Input("hsmPartitionPassword", required: true)]
        private Input<string>? _hsmPartitionPassword;
        public Input<string>? HsmPartitionPassword
        {
            get => _hsmPartitionPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _hsmPartitionPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("hsmServerPublicCertificate", required: true)]
        public Input<string> HsmServerPublicCertificate { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HsmConfigurationArgs()
        {
        }
        public static new HsmConfigurationArgs Empty => new HsmConfigurationArgs();
    }

    public sealed class HsmConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("hsmConfigurationIdentifier")]
        public Input<string>? HsmConfigurationIdentifier { get; set; }

        [Input("hsmIpAddress")]
        public Input<string>? HsmIpAddress { get; set; }

        [Input("hsmPartitionName")]
        public Input<string>? HsmPartitionName { get; set; }

        [Input("hsmPartitionPassword")]
        private Input<string>? _hsmPartitionPassword;
        public Input<string>? HsmPartitionPassword
        {
            get => _hsmPartitionPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _hsmPartitionPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("hsmServerPublicCertificate")]
        public Input<string>? HsmServerPublicCertificate { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public HsmConfigurationState()
        {
        }
        public static new HsmConfigurationState Empty => new HsmConfigurationState();
    }
}
