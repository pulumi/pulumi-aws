// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    public static class GetCluster
    {
        /// <summary>
        /// Provides details about a specific redshift cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.redshift.getCluster({
        ///     clusterIdentifier: "example-cluster",
        /// });
        /// const exampleStream = new aws.kinesis.FirehoseDeliveryStream("exampleStream", {
        ///     destination: "redshift",
        ///     s3Configuration: {
        ///         roleArn: aws_iam_role.firehose_role.arn,
        ///         bucketArn: aws_s3_bucket.bucket.arn,
        ///         bufferSize: 10,
        ///         bufferInterval: 400,
        ///         compressionFormat: "GZIP",
        ///     },
        ///     redshiftConfiguration: {
        ///         roleArn: aws_iam_role.firehose_role.arn,
        ///         clusterJdbcurl: Promise.all([example, example]).then(([example, example1]) =&gt; `jdbc:redshift://${example.endpoint}/${example1.databaseName}`),
        ///         username: "exampleuser",
        ///         password: "Exampl3Pass",
        ///         dataTableName: "example-table",
        ///         copyOptions: "delimiter '|'",
        ///         dataTableColumns: "example-col",
        ///     },
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.redshift.get_cluster(cluster_identifier="example-cluster")
        /// example_stream = aws.kinesis.FirehoseDeliveryStream("exampleStream",
        ///     destination="redshift",
        ///     s3_configuration=aws.kinesis.FirehoseDeliveryStreamS3ConfigurationArgs(
        ///         role_arn=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///         bucket_arn=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///         buffer_size=10,
        ///         buffer_interval=400,
        ///         compression_format="GZIP",
        ///     ),
        ///     redshift_configuration=aws.kinesis.FirehoseDeliveryStreamRedshiftConfigurationArgs(
        ///         role_arn=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///         cluster_jdbcurl=f"jdbc:redshift://{example.endpoint}/{example.database_name}",
        ///         username="exampleuser",
        ///         password="Exampl3Pass",
        ///         data_table_name="example-table",
        ///         copy_options="delimiter '|'",
        ///         data_table_columns="example-col",
        ///     ))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.RedShift.GetCluster.Invoke(new()
        ///     {
        ///         ClusterIdentifier = "example-cluster",
        ///     });
        /// 
        ///     var exampleStream = new Aws.Kinesis.FirehoseDeliveryStream("exampleStream", new()
        ///     {
        ///         Destination = "redshift",
        ///         S3Configuration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamS3ConfigurationArgs
        ///         {
        ///             RoleArn = aws_iam_role.Firehose_role.Arn,
        ///             BucketArn = aws_s3_bucket.Bucket.Arn,
        ///             BufferSize = 10,
        ///             BufferInterval = 400,
        ///             CompressionFormat = "GZIP",
        ///         },
        ///         RedshiftConfiguration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamRedshiftConfigurationArgs
        ///         {
        ///             RoleArn = aws_iam_role.Firehose_role.Arn,
        ///             ClusterJdbcurl = Output.Tuple(example, example).Apply(values =&gt;
        ///             {
        ///                 var example = values.Item1;
        ///                 var example1 = values.Item2;
        ///                 return $"jdbc:redshift://{example.Apply(getClusterResult =&gt; getClusterResult.Endpoint)}/{example1.DatabaseName}";
        ///             }),
        ///             Username = "exampleuser",
        ///             Password = "Exampl3Pass",
        ///             DataTableName = "example-table",
        ///             CopyOptions = "delimiter '|'",
        ///             DataTableColumns = "example-col",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"fmt"
        /// 
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/kinesis"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshift"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		example, err := redshift.LookupCluster(ctx, &amp;redshift.LookupClusterArgs{
        /// 			ClusterIdentifier: "example-cluster",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = kinesis.NewFirehoseDeliveryStream(ctx, "exampleStream", &amp;kinesis.FirehoseDeliveryStreamArgs{
        /// 			Destination: pulumi.String("redshift"),
        /// 			S3Configuration: &amp;kinesis.FirehoseDeliveryStreamS3ConfigurationArgs{
        /// 				RoleArn:           pulumi.Any(aws_iam_role.Firehose_role.Arn),
        /// 				BucketArn:         pulumi.Any(aws_s3_bucket.Bucket.Arn),
        /// 				BufferSize:        pulumi.Int(10),
        /// 				BufferInterval:    pulumi.Int(400),
        /// 				CompressionFormat: pulumi.String("GZIP"),
        /// 			},
        /// 			RedshiftConfiguration: &amp;kinesis.FirehoseDeliveryStreamRedshiftConfigurationArgs{
        /// 				RoleArn:          pulumi.Any(aws_iam_role.Firehose_role.Arn),
        /// 				ClusterJdbcurl:   pulumi.String(fmt.Sprintf("jdbc:redshift://%v/%v", example.Endpoint, example.DatabaseName)),
        /// 				Username:         pulumi.String("exampleuser"),
        /// 				Password:         pulumi.String("Exampl3Pass"),
        /// 				DataTableName:    pulumi.String("example-table"),
        /// 				CopyOptions:      pulumi.String("delimiter '|'"),
        /// 				DataTableColumns: pulumi.String("example-col"),
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.redshift.RedshiftFunctions;
        /// import com.pulumi.aws.redshift.inputs.GetClusterArgs;
        /// import com.pulumi.aws.kinesis.FirehoseDeliveryStream;
        /// import com.pulumi.aws.kinesis.FirehoseDeliveryStreamArgs;
        /// import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamS3ConfigurationArgs;
        /// import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = RedshiftFunctions.getCluster(GetClusterArgs.builder()
        ///             .clusterIdentifier("example-cluster")
        ///             .build());
        /// 
        ///         var exampleStream = new FirehoseDeliveryStream("exampleStream", FirehoseDeliveryStreamArgs.builder()        
        ///             .destination("redshift")
        ///             .s3Configuration(FirehoseDeliveryStreamS3ConfigurationArgs.builder()
        ///                 .roleArn(aws_iam_role.firehose_role().arn())
        ///                 .bucketArn(aws_s3_bucket.bucket().arn())
        ///                 .bufferSize(10)
        ///                 .bufferInterval(400)
        ///                 .compressionFormat("GZIP")
        ///                 .build())
        ///             .redshiftConfiguration(FirehoseDeliveryStreamRedshiftConfigurationArgs.builder()
        ///                 .roleArn(aws_iam_role.firehose_role().arn())
        ///                 .clusterJdbcurl(String.format("jdbc:redshift://%s/%s", example.applyValue(getClusterResult -&gt; getClusterResult.endpoint()),example.applyValue(getClusterResult -&gt; getClusterResult.databaseName())))
        ///                 .username("exampleuser")
        ///                 .password("Exampl3Pass")
        ///                 .dataTableName("example-table")
        ///                 .copyOptions("delimiter '|'")
        ///                 .dataTableColumns("example-col")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   exampleStream:
        ///     type: aws:kinesis:FirehoseDeliveryStream
        ///     properties:
        ///       destination: redshift
        ///       s3Configuration:
        ///         roleArn: ${aws_iam_role.firehose_role.arn}
        ///         bucketArn: ${aws_s3_bucket.bucket.arn}
        ///         bufferSize: 10
        ///         bufferInterval: 400
        ///         compressionFormat: GZIP
        ///       redshiftConfiguration:
        ///         roleArn: ${aws_iam_role.firehose_role.arn}
        ///         clusterJdbcurl: jdbc:redshift://${example.endpoint}/${example.databaseName}
        ///         username: exampleuser
        ///         password: Exampl3Pass
        ///         dataTableName: example-table
        ///         copyOptions: delimiter '|'
        ///         dataTableColumns: example-col
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:redshift:getCluster
        ///       Arguments:
        ///         clusterIdentifier: example-cluster
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("aws:redshift/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific redshift cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.redshift.getCluster({
        ///     clusterIdentifier: "example-cluster",
        /// });
        /// const exampleStream = new aws.kinesis.FirehoseDeliveryStream("exampleStream", {
        ///     destination: "redshift",
        ///     s3Configuration: {
        ///         roleArn: aws_iam_role.firehose_role.arn,
        ///         bucketArn: aws_s3_bucket.bucket.arn,
        ///         bufferSize: 10,
        ///         bufferInterval: 400,
        ///         compressionFormat: "GZIP",
        ///     },
        ///     redshiftConfiguration: {
        ///         roleArn: aws_iam_role.firehose_role.arn,
        ///         clusterJdbcurl: Promise.all([example, example]).then(([example, example1]) =&gt; `jdbc:redshift://${example.endpoint}/${example1.databaseName}`),
        ///         username: "exampleuser",
        ///         password: "Exampl3Pass",
        ///         dataTableName: "example-table",
        ///         copyOptions: "delimiter '|'",
        ///         dataTableColumns: "example-col",
        ///     },
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.redshift.get_cluster(cluster_identifier="example-cluster")
        /// example_stream = aws.kinesis.FirehoseDeliveryStream("exampleStream",
        ///     destination="redshift",
        ///     s3_configuration=aws.kinesis.FirehoseDeliveryStreamS3ConfigurationArgs(
        ///         role_arn=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///         bucket_arn=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///         buffer_size=10,
        ///         buffer_interval=400,
        ///         compression_format="GZIP",
        ///     ),
        ///     redshift_configuration=aws.kinesis.FirehoseDeliveryStreamRedshiftConfigurationArgs(
        ///         role_arn=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///         cluster_jdbcurl=f"jdbc:redshift://{example.endpoint}/{example.database_name}",
        ///         username="exampleuser",
        ///         password="Exampl3Pass",
        ///         data_table_name="example-table",
        ///         copy_options="delimiter '|'",
        ///         data_table_columns="example-col",
        ///     ))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.RedShift.GetCluster.Invoke(new()
        ///     {
        ///         ClusterIdentifier = "example-cluster",
        ///     });
        /// 
        ///     var exampleStream = new Aws.Kinesis.FirehoseDeliveryStream("exampleStream", new()
        ///     {
        ///         Destination = "redshift",
        ///         S3Configuration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamS3ConfigurationArgs
        ///         {
        ///             RoleArn = aws_iam_role.Firehose_role.Arn,
        ///             BucketArn = aws_s3_bucket.Bucket.Arn,
        ///             BufferSize = 10,
        ///             BufferInterval = 400,
        ///             CompressionFormat = "GZIP",
        ///         },
        ///         RedshiftConfiguration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamRedshiftConfigurationArgs
        ///         {
        ///             RoleArn = aws_iam_role.Firehose_role.Arn,
        ///             ClusterJdbcurl = Output.Tuple(example, example).Apply(values =&gt;
        ///             {
        ///                 var example = values.Item1;
        ///                 var example1 = values.Item2;
        ///                 return $"jdbc:redshift://{example.Apply(getClusterResult =&gt; getClusterResult.Endpoint)}/{example1.DatabaseName}";
        ///             }),
        ///             Username = "exampleuser",
        ///             Password = "Exampl3Pass",
        ///             DataTableName = "example-table",
        ///             CopyOptions = "delimiter '|'",
        ///             DataTableColumns = "example-col",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"fmt"
        /// 
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/kinesis"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshift"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		example, err := redshift.LookupCluster(ctx, &amp;redshift.LookupClusterArgs{
        /// 			ClusterIdentifier: "example-cluster",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = kinesis.NewFirehoseDeliveryStream(ctx, "exampleStream", &amp;kinesis.FirehoseDeliveryStreamArgs{
        /// 			Destination: pulumi.String("redshift"),
        /// 			S3Configuration: &amp;kinesis.FirehoseDeliveryStreamS3ConfigurationArgs{
        /// 				RoleArn:           pulumi.Any(aws_iam_role.Firehose_role.Arn),
        /// 				BucketArn:         pulumi.Any(aws_s3_bucket.Bucket.Arn),
        /// 				BufferSize:        pulumi.Int(10),
        /// 				BufferInterval:    pulumi.Int(400),
        /// 				CompressionFormat: pulumi.String("GZIP"),
        /// 			},
        /// 			RedshiftConfiguration: &amp;kinesis.FirehoseDeliveryStreamRedshiftConfigurationArgs{
        /// 				RoleArn:          pulumi.Any(aws_iam_role.Firehose_role.Arn),
        /// 				ClusterJdbcurl:   pulumi.String(fmt.Sprintf("jdbc:redshift://%v/%v", example.Endpoint, example.DatabaseName)),
        /// 				Username:         pulumi.String("exampleuser"),
        /// 				Password:         pulumi.String("Exampl3Pass"),
        /// 				DataTableName:    pulumi.String("example-table"),
        /// 				CopyOptions:      pulumi.String("delimiter '|'"),
        /// 				DataTableColumns: pulumi.String("example-col"),
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.redshift.RedshiftFunctions;
        /// import com.pulumi.aws.redshift.inputs.GetClusterArgs;
        /// import com.pulumi.aws.kinesis.FirehoseDeliveryStream;
        /// import com.pulumi.aws.kinesis.FirehoseDeliveryStreamArgs;
        /// import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamS3ConfigurationArgs;
        /// import com.pulumi.aws.kinesis.inputs.FirehoseDeliveryStreamRedshiftConfigurationArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = RedshiftFunctions.getCluster(GetClusterArgs.builder()
        ///             .clusterIdentifier("example-cluster")
        ///             .build());
        /// 
        ///         var exampleStream = new FirehoseDeliveryStream("exampleStream", FirehoseDeliveryStreamArgs.builder()        
        ///             .destination("redshift")
        ///             .s3Configuration(FirehoseDeliveryStreamS3ConfigurationArgs.builder()
        ///                 .roleArn(aws_iam_role.firehose_role().arn())
        ///                 .bucketArn(aws_s3_bucket.bucket().arn())
        ///                 .bufferSize(10)
        ///                 .bufferInterval(400)
        ///                 .compressionFormat("GZIP")
        ///                 .build())
        ///             .redshiftConfiguration(FirehoseDeliveryStreamRedshiftConfigurationArgs.builder()
        ///                 .roleArn(aws_iam_role.firehose_role().arn())
        ///                 .clusterJdbcurl(String.format("jdbc:redshift://%s/%s", example.applyValue(getClusterResult -&gt; getClusterResult.endpoint()),example.applyValue(getClusterResult -&gt; getClusterResult.databaseName())))
        ///                 .username("exampleuser")
        ///                 .password("Exampl3Pass")
        ///                 .dataTableName("example-table")
        ///                 .copyOptions("delimiter '|'")
        ///                 .dataTableColumns("example-col")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   exampleStream:
        ///     type: aws:kinesis:FirehoseDeliveryStream
        ///     properties:
        ///       destination: redshift
        ///       s3Configuration:
        ///         roleArn: ${aws_iam_role.firehose_role.arn}
        ///         bucketArn: ${aws_s3_bucket.bucket.arn}
        ///         bufferSize: 10
        ///         bufferInterval: 400
        ///         compressionFormat: GZIP
        ///       redshiftConfiguration:
        ///         roleArn: ${aws_iam_role.firehose_role.arn}
        ///         clusterJdbcurl: jdbc:redshift://${example.endpoint}/${example.databaseName}
        ///         username: exampleuser
        ///         password: Exampl3Pass
        ///         dataTableName: example-table
        ///         copyOptions: delimiter '|'
        ///         dataTableColumns: example-col
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:redshift:getCluster
        ///       Arguments:
        ///         clusterIdentifier: example-cluster
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("aws:redshift/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster identifier
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public string ClusterIdentifier { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Tags associated to the cluster
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster identifier
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public Input<string> ClusterIdentifier { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags associated to the cluster
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Whether major version upgrades can be applied during maintenance period
        /// </summary>
        public readonly bool AllowVersionUpgrade;
        /// <summary>
        /// The value represents how the cluster is configured to use AQUA.
        /// </summary>
        public readonly string AquaConfigurationStatus;
        /// <summary>
        /// ARN of cluster.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The backup retention period
        /// </summary>
        public readonly int AutomatedSnapshotRetentionPeriod;
        /// <summary>
        /// Availability zone of the cluster
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// Indicates whether the cluster is able to be relocated to another availability zone.
        /// </summary>
        public readonly bool AvailabilityZoneRelocationEnabled;
        /// <summary>
        /// Name of the S3 bucket where the log files are to be stored
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// Cluster identifier
        /// </summary>
        public readonly string ClusterIdentifier;
        /// <summary>
        /// Nodes in the cluster. Cluster node blocks are documented below
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterClusterNodeResult> ClusterNodes;
        /// <summary>
        /// The name of the parameter group to be associated with this cluster
        /// </summary>
        public readonly string ClusterParameterGroupName;
        /// <summary>
        /// Public key for the cluster
        /// </summary>
        public readonly string ClusterPublicKey;
        /// <summary>
        /// The cluster revision number
        /// </summary>
        public readonly string ClusterRevisionNumber;
        /// <summary>
        /// The security groups associated with the cluster
        /// </summary>
        public readonly ImmutableArray<string> ClusterSecurityGroups;
        /// <summary>
        /// The name of a cluster subnet group to be associated with this cluster
        /// </summary>
        public readonly string ClusterSubnetGroupName;
        /// <summary>
        /// Cluster type
        /// </summary>
        public readonly string ClusterType;
        public readonly string ClusterVersion;
        /// <summary>
        /// Name of the default database in the cluster
        /// </summary>
        public readonly string DatabaseName;
        /// <summary>
        /// ∂The ARN for the IAM role that was set as default for the cluster when the cluster was created.
        /// </summary>
        public readonly string DefaultIamRoleArn;
        /// <summary>
        /// Elastic IP of the cluster
        /// </summary>
        public readonly string ElasticIp;
        /// <summary>
        /// Whether cluster logging is enabled
        /// </summary>
        public readonly bool EnableLogging;
        /// <summary>
        /// Whether the cluster data is encrypted
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// Cluster endpoint
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Whether enhanced VPC routing is enabled
        /// </summary>
        public readonly bool EnhancedVpcRouting;
        /// <summary>
        /// IAM roles associated to the cluster
        /// </summary>
        public readonly ImmutableArray<string> IamRoles;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// KMS encryption key associated to the cluster
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// The log destination type.
        /// </summary>
        public readonly string LogDestinationType;
        /// <summary>
        /// Collection of exported log types. Log types include the connection log, user log and user activity log.
        /// </summary>
        public readonly ImmutableArray<string> LogExports;
        /// <summary>
        /// The name of the maintenance track for the restored cluster.
        /// </summary>
        public readonly string MaintenanceTrackName;
        /// <summary>
        /// (Optional)  The default number of days to retain a manual snapshot.
        /// </summary>
        public readonly int ManualSnapshotRetentionPeriod;
        /// <summary>
        /// Username for the master DB user
        /// </summary>
        public readonly string MasterUsername;
        /// <summary>
        /// Cluster node type
        /// </summary>
        public readonly string NodeType;
        /// <summary>
        /// Number of nodes in the cluster
        /// </summary>
        public readonly int NumberOfNodes;
        /// <summary>
        /// Port the cluster responds on
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The maintenance window
        /// </summary>
        public readonly string PreferredMaintenanceWindow;
        /// <summary>
        /// Whether the cluster is publicly accessible
        /// </summary>
        public readonly bool PubliclyAccessible;
        /// <summary>
        /// Folder inside the S3 bucket where the log files are stored
        /// </summary>
        public readonly string S3KeyPrefix;
        /// <summary>
        /// Tags associated to the cluster
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// VPC Id associated with the cluster
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// The VPC security group Ids associated with the cluster
        /// </summary>
        public readonly ImmutableArray<string> VpcSecurityGroupIds;

        [OutputConstructor]
        private GetClusterResult(
            bool allowVersionUpgrade,

            string aquaConfigurationStatus,

            string arn,

            int automatedSnapshotRetentionPeriod,

            string availabilityZone,

            bool availabilityZoneRelocationEnabled,

            string bucketName,

            string clusterIdentifier,

            ImmutableArray<Outputs.GetClusterClusterNodeResult> clusterNodes,

            string clusterParameterGroupName,

            string clusterPublicKey,

            string clusterRevisionNumber,

            ImmutableArray<string> clusterSecurityGroups,

            string clusterSubnetGroupName,

            string clusterType,

            string clusterVersion,

            string databaseName,

            string defaultIamRoleArn,

            string elasticIp,

            bool enableLogging,

            bool encrypted,

            string endpoint,

            bool enhancedVpcRouting,

            ImmutableArray<string> iamRoles,

            string id,

            string kmsKeyId,

            string logDestinationType,

            ImmutableArray<string> logExports,

            string maintenanceTrackName,

            int manualSnapshotRetentionPeriod,

            string masterUsername,

            string nodeType,

            int numberOfNodes,

            int port,

            string preferredMaintenanceWindow,

            bool publiclyAccessible,

            string s3KeyPrefix,

            ImmutableDictionary<string, string>? tags,

            string vpcId,

            ImmutableArray<string> vpcSecurityGroupIds)
        {
            AllowVersionUpgrade = allowVersionUpgrade;
            AquaConfigurationStatus = aquaConfigurationStatus;
            Arn = arn;
            AutomatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod;
            AvailabilityZone = availabilityZone;
            AvailabilityZoneRelocationEnabled = availabilityZoneRelocationEnabled;
            BucketName = bucketName;
            ClusterIdentifier = clusterIdentifier;
            ClusterNodes = clusterNodes;
            ClusterParameterGroupName = clusterParameterGroupName;
            ClusterPublicKey = clusterPublicKey;
            ClusterRevisionNumber = clusterRevisionNumber;
            ClusterSecurityGroups = clusterSecurityGroups;
            ClusterSubnetGroupName = clusterSubnetGroupName;
            ClusterType = clusterType;
            ClusterVersion = clusterVersion;
            DatabaseName = databaseName;
            DefaultIamRoleArn = defaultIamRoleArn;
            ElasticIp = elasticIp;
            EnableLogging = enableLogging;
            Encrypted = encrypted;
            Endpoint = endpoint;
            EnhancedVpcRouting = enhancedVpcRouting;
            IamRoles = iamRoles;
            Id = id;
            KmsKeyId = kmsKeyId;
            LogDestinationType = logDestinationType;
            LogExports = logExports;
            MaintenanceTrackName = maintenanceTrackName;
            ManualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod;
            MasterUsername = masterUsername;
            NodeType = nodeType;
            NumberOfNodes = numberOfNodes;
            Port = port;
            PreferredMaintenanceWindow = preferredMaintenanceWindow;
            PubliclyAccessible = publiclyAccessible;
            S3KeyPrefix = s3KeyPrefix;
            Tags = tags;
            VpcId = vpcId;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
        }
    }
}
