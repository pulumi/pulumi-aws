// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    public static class GetOrderableCluster
    {
        /// <summary>
        /// Information about Redshift Orderable Clusters and valid parameter combinations.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.RedShift.GetOrderableCluster.InvokeAsync(new Aws.RedShift.GetOrderableClusterArgs
        ///         {
        ///             ClusterType = "multi-node",
        ///             PreferredNodeTypes = 
        ///             {
        ///                 "dc2.large",
        ///                 "ds2.xlarge",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOrderableClusterResult> InvokeAsync(GetOrderableClusterArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOrderableClusterResult>("aws:redshift/getOrderableCluster:getOrderableCluster", args ?? new GetOrderableClusterArgs(), options.WithVersion());
    }


    public sealed class GetOrderableClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reshift Cluster type. e.g. `multi-node` or `single-node`
        /// </summary>
        [Input("clusterType")]
        public string? ClusterType { get; set; }

        /// <summary>
        /// Redshift Cluster version. e.g. `1.0`
        /// </summary>
        [Input("clusterVersion")]
        public string? ClusterVersion { get; set; }

        /// <summary>
        /// Redshift Cluster node type. e.g. `dc2.8xlarge`
        /// </summary>
        [Input("nodeType")]
        public string? NodeType { get; set; }

        [Input("preferredNodeTypes")]
        private List<string>? _preferredNodeTypes;

        /// <summary>
        /// Ordered list of preferred Redshift Cluster node types. The first match in this list will be returned. If no preferred matches are found and the original search returned more than one result, an error is returned.
        /// </summary>
        public List<string> PreferredNodeTypes
        {
            get => _preferredNodeTypes ?? (_preferredNodeTypes = new List<string>());
            set => _preferredNodeTypes = value;
        }

        public GetOrderableClusterArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOrderableClusterResult
    {
        /// <summary>
        /// List of Availability Zone names where the Redshit Cluster is available.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        public readonly string ClusterType;
        public readonly string ClusterVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NodeType;
        public readonly ImmutableArray<string> PreferredNodeTypes;

        [OutputConstructor]
        private GetOrderableClusterResult(
            ImmutableArray<string> availabilityZones,

            string clusterType,

            string clusterVersion,

            string id,

            string nodeType,

            ImmutableArray<string> preferredNodeTypes)
        {
            AvailabilityZones = availabilityZones;
            ClusterType = clusterType;
            ClusterVersion = clusterVersion;
            Id = id;
            NodeType = nodeType;
            PreferredNodeTypes = preferredNodeTypes;
        }
    }
}
