// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    /// <summary>
    /// Resource for managing an AWS Redshift Data Share Authorization.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.RedShift.DataShareAuthorization("example", new()
    ///     {
    ///         ConsumerIdentifier = "012345678901",
    ///         DataShareArn = "arn:aws:redshift:us-west-2:012345678901:datashare:3072dae5-022b-4d45-9cd3-01f010aae4b2/example_share",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Redshift Data Share Authorization using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:redshift/dataShareAuthorization:DataShareAuthorization example arn:aws:redshift:us-west-2:012345678901:datashare:3072dae5-022b-4d45-9cd3-01f010aae4b2/example_share,012345678901
    /// ```
    /// </summary>
    [AwsResourceType("aws:redshift/dataShareAuthorization:DataShareAuthorization")]
    public partial class DataShareAuthorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to allow write operations for a datashare.
        /// </summary>
        [Output("allowWrites")]
        public Output<bool?> AllowWrites { get; private set; } = null!;

        /// <summary>
        /// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
        /// </summary>
        [Output("consumerIdentifier")]
        public Output<string> ConsumerIdentifier { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("dataShareArn")]
        public Output<string> DataShareArn { get; private set; } = null!;

        /// <summary>
        /// Identifier of a datashare to show its managing entity.
        /// </summary>
        [Output("managedBy")]
        public Output<string> ManagedBy { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the producer.
        /// </summary>
        [Output("producerArn")]
        public Output<string> ProducerArn { get; private set; } = null!;


        /// <summary>
        /// Create a DataShareAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataShareAuthorization(string name, DataShareAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("aws:redshift/dataShareAuthorization:DataShareAuthorization", name, args ?? new DataShareAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataShareAuthorization(string name, Input<string> id, DataShareAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("aws:redshift/dataShareAuthorization:DataShareAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataShareAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataShareAuthorization Get(string name, Input<string> id, DataShareAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new DataShareAuthorization(name, id, state, options);
        }
    }

    public sealed class DataShareAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to allow write operations for a datashare.
        /// </summary>
        [Input("allowWrites")]
        public Input<bool>? AllowWrites { get; set; }

        /// <summary>
        /// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
        /// </summary>
        [Input("consumerIdentifier", required: true)]
        public Input<string> ConsumerIdentifier { get; set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("dataShareArn", required: true)]
        public Input<string> DataShareArn { get; set; } = null!;

        public DataShareAuthorizationArgs()
        {
        }
        public static new DataShareAuthorizationArgs Empty => new DataShareAuthorizationArgs();
    }

    public sealed class DataShareAuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to allow write operations for a datashare.
        /// </summary>
        [Input("allowWrites")]
        public Input<bool>? AllowWrites { get; set; }

        /// <summary>
        /// Identifier of the data consumer that is authorized to access the datashare. This identifier is an AWS account ID or a keyword, such as `ADX`.
        /// </summary>
        [Input("consumerIdentifier")]
        public Input<string>? ConsumerIdentifier { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the datashare that producers are to authorize sharing for.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("dataShareArn")]
        public Input<string>? DataShareArn { get; set; }

        /// <summary>
        /// Identifier of a datashare to show its managing entity.
        /// </summary>
        [Input("managedBy")]
        public Input<string>? ManagedBy { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the producer.
        /// </summary>
        [Input("producerArn")]
        public Input<string>? ProducerArn { get; set; }

        public DataShareAuthorizationState()
        {
        }
        public static new DataShareAuthorizationState Empty => new DataShareAuthorizationState();
    }
}
