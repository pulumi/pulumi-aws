// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedShift
{
    /// <summary>
    /// Creates a new Amazon Redshift endpoint access.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.RedShift.EndpointAccess("example", new()
    ///     {
    ///         EndpointName = "example",
    ///         SubnetGroupName = aws_redshift_subnet_group.Example.Id,
    ///         ClusterIdentifier = aws_redshift_cluster.Example.Cluster_identifier,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Redshift endpoint access using the `name`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:redshift/endpointAccess:EndpointAccess example example
    /// ```
    /// </summary>
    [AwsResourceType("aws:redshift/endpointAccess:EndpointAccess")]
    public partial class EndpointAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The DNS address of the endpoint.
        /// </summary>
        [Output("address")]
        public Output<string> Address { get; private set; } = null!;

        /// <summary>
        /// The cluster identifier of the cluster to access.
        /// </summary>
        [Output("clusterIdentifier")]
        public Output<string> ClusterIdentifier { get; private set; } = null!;

        /// <summary>
        /// The Redshift-managed VPC endpoint name.
        /// </summary>
        [Output("endpointName")]
        public Output<string> EndpointName { get; private set; } = null!;

        /// <summary>
        /// The port number on which the cluster accepts incoming connections.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
        /// </summary>
        [Output("resourceOwner")]
        public Output<string> ResourceOwner { get; private set; } = null!;

        /// <summary>
        /// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
        /// </summary>
        [Output("subnetGroupName")]
        public Output<string> SubnetGroupName { get; private set; } = null!;

        /// <summary>
        /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
        /// </summary>
        [Output("vpcEndpoints")]
        public Output<ImmutableArray<Outputs.EndpointAccessVpcEndpoint>> VpcEndpoints { get; private set; } = null!;

        /// <summary>
        /// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
        /// </summary>
        [Output("vpcSecurityGroupIds")]
        public Output<ImmutableArray<string>> VpcSecurityGroupIds { get; private set; } = null!;


        /// <summary>
        /// Create a EndpointAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EndpointAccess(string name, EndpointAccessArgs args, CustomResourceOptions? options = null)
            : base("aws:redshift/endpointAccess:EndpointAccess", name, args ?? new EndpointAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EndpointAccess(string name, Input<string> id, EndpointAccessState? state = null, CustomResourceOptions? options = null)
            : base("aws:redshift/endpointAccess:EndpointAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EndpointAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EndpointAccess Get(string name, Input<string> id, EndpointAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new EndpointAccess(name, id, state, options);
        }
    }

    public sealed class EndpointAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster identifier of the cluster to access.
        /// </summary>
        [Input("clusterIdentifier", required: true)]
        public Input<string> ClusterIdentifier { get; set; } = null!;

        /// <summary>
        /// The Redshift-managed VPC endpoint name.
        /// </summary>
        [Input("endpointName", required: true)]
        public Input<string> EndpointName { get; set; } = null!;

        /// <summary>
        /// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
        /// </summary>
        [Input("resourceOwner")]
        public Input<string>? ResourceOwner { get; set; }

        /// <summary>
        /// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
        /// </summary>
        [Input("subnetGroupName", required: true)]
        public Input<string> SubnetGroupName { get; set; } = null!;

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;

        /// <summary>
        /// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
        /// </summary>
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        public EndpointAccessArgs()
        {
        }
        public static new EndpointAccessArgs Empty => new EndpointAccessArgs();
    }

    public sealed class EndpointAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS address of the endpoint.
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// The cluster identifier of the cluster to access.
        /// </summary>
        [Input("clusterIdentifier")]
        public Input<string>? ClusterIdentifier { get; set; }

        /// <summary>
        /// The Redshift-managed VPC endpoint name.
        /// </summary>
        [Input("endpointName")]
        public Input<string>? EndpointName { get; set; }

        /// <summary>
        /// The port number on which the cluster accepts incoming connections.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The Amazon Web Services account ID of the owner of the cluster. This is only required if the cluster is in another Amazon Web Services account.
        /// </summary>
        [Input("resourceOwner")]
        public Input<string>? ResourceOwner { get; set; }

        /// <summary>
        /// The subnet group from which Amazon Redshift chooses the subnet to deploy the endpoint.
        /// </summary>
        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        [Input("vpcEndpoints")]
        private InputList<Inputs.EndpointAccessVpcEndpointGetArgs>? _vpcEndpoints;

        /// <summary>
        /// The connection endpoint for connecting to an Amazon Redshift cluster through the proxy. See details below.
        /// </summary>
        public InputList<Inputs.EndpointAccessVpcEndpointGetArgs> VpcEndpoints
        {
            get => _vpcEndpoints ?? (_vpcEndpoints = new InputList<Inputs.EndpointAccessVpcEndpointGetArgs>());
            set => _vpcEndpoints = value;
        }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;

        /// <summary>
        /// The security group that defines the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint.
        /// </summary>
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        public EndpointAccessState()
        {
        }
        public static new EndpointAccessState Empty => new EndpointAccessState();
    }
}
