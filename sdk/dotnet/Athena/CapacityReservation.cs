// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Athena
{
    /// <summary>
    /// Resource for managing an AWS Athena Capacity Reservation.
    /// 
    /// &gt; Destruction of this resource will both [cancel](https://docs.aws.amazon.com/athena/latest/ug/capacity-management-cancelling-a-capacity-reservation.html) and [delete](https://docs.aws.amazon.com/athena/latest/ug/capacity-management-deleting-a-capacity-reservation.html) the capacity reservation.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Athena.CapacityReservation("example", new()
    ///     {
    ///         Name = "example-reservation",
    ///         TargetDpus = 24,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Athena Capacity Reservation using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:athena/capacityReservation:CapacityReservation example example-reservation
    /// ```
    /// </summary>
    [AwsResourceType("aws:athena/capacityReservation:CapacityReservation")]
    public partial class CapacityReservation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Number of data processing units currently allocated.
        /// </summary>
        [Output("allocatedDpus")]
        public Output<int> AllocatedDpus { get; private set; } = null!;

        /// <summary>
        /// ARN of the Capacity Reservation.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Name of the capacity reservation.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Status of the capacity reservation.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Number of data processing units requested. Must be at least `24` units.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("targetDpus")]
        public Output<int> TargetDpus { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.CapacityReservationTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a CapacityReservation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CapacityReservation(string name, CapacityReservationArgs args, CustomResourceOptions? options = null)
            : base("aws:athena/capacityReservation:CapacityReservation", name, args ?? new CapacityReservationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CapacityReservation(string name, Input<string> id, CapacityReservationState? state = null, CustomResourceOptions? options = null)
            : base("aws:athena/capacityReservation:CapacityReservation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CapacityReservation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CapacityReservation Get(string name, Input<string> id, CapacityReservationState? state = null, CustomResourceOptions? options = null)
        {
            return new CapacityReservation(name, id, state, options);
        }
    }

    public sealed class CapacityReservationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the capacity reservation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Number of data processing units requested. Must be at least `24` units.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetDpus", required: true)]
        public Input<int> TargetDpus { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.CapacityReservationTimeoutsArgs>? Timeouts { get; set; }

        public CapacityReservationArgs()
        {
        }
        public static new CapacityReservationArgs Empty => new CapacityReservationArgs();
    }

    public sealed class CapacityReservationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of data processing units currently allocated.
        /// </summary>
        [Input("allocatedDpus")]
        public Input<int>? AllocatedDpus { get; set; }

        /// <summary>
        /// ARN of the Capacity Reservation.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Name of the capacity reservation.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Status of the capacity reservation.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Number of data processing units requested. Must be at least `24` units.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetDpus")]
        public Input<int>? TargetDpus { get; set; }

        [Input("timeouts")]
        public Input<Inputs.CapacityReservationTimeoutsGetArgs>? Timeouts { get; set; }

        public CapacityReservationState()
        {
        }
        public static new CapacityReservationState Empty => new CapacityReservationState();
    }
}
