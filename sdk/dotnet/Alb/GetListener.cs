// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Alb
{
    public static class GetListener
    {
        /// <summary>
        /// &gt; **Note:** `aws.alb.Listener` is known as `aws.lb.Listener`. The functionality is identical.
        /// 
        /// Provides information about a Load Balancer Listener.
        /// 
        /// This data source can prove useful when a module accepts an LB Listener as an input variable and needs to know the LB it is attached to, or other information specific to the listener in question.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const listenerArn = config.require("listenerArn");
        /// const listener = aws.lb.getListener({
        ///     arn: listenerArn,
        /// });
        /// const selected = aws.lb.getLoadBalancer({
        ///     name: "default-public",
        /// });
        /// const selected443 = selected.then(selected =&gt; aws.lb.getListener({
        ///     loadBalancerArn: selected.arn,
        ///     port: 443,
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// listener_arn = config.require("listenerArn")
        /// listener = aws.lb.get_listener(arn=listener_arn)
        /// selected = aws.lb.get_load_balancer(name="default-public")
        /// selected443 = aws.lb.get_listener(load_balancer_arn=selected.arn,
        ///     port=443)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var listenerArn = config.Require("listenerArn");
        ///     var listener = Aws.LB.GetListener.Invoke(new()
        ///     {
        ///         Arn = listenerArn,
        ///     });
        /// 
        ///     var selected = Aws.LB.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Name = "default-public",
        ///     });
        /// 
        ///     var selected443 = Aws.LB.GetListener.Invoke(new()
        ///     {
        ///         LoadBalancerArn = selected.Apply(getLoadBalancerResult =&gt; getLoadBalancerResult.Arn),
        ///         Port = 443,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lb"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		listenerArn := cfg.Require("listenerArn")
        /// 		_, err := lb.LookupListener(ctx, &amp;lb.LookupListenerArgs{
        /// 			Arn: pulumi.StringRef(listenerArn),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		selected, err := lb.LookupLoadBalancer(ctx, &amp;lb.LookupLoadBalancerArgs{
        /// 			Name: pulumi.StringRef("default-public"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = lb.LookupListener(ctx, &amp;lb.LookupListenerArgs{
        /// 			LoadBalancerArn: pulumi.StringRef(selected.Arn),
        /// 			Port:            pulumi.IntRef(443),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.lb.LbFunctions;
        /// import com.pulumi.aws.lb.inputs.GetListenerArgs;
        /// import com.pulumi.aws.lb.inputs.GetLoadBalancerArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var listenerArn = config.get("listenerArn");
        ///         final var listener = LbFunctions.getListener(GetListenerArgs.builder()
        ///             .arn(listenerArn)
        ///             .build());
        /// 
        ///         final var selected = LbFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
        ///             .name("default-public")
        ///             .build());
        /// 
        ///         final var selected443 = LbFunctions.getListener(GetListenerArgs.builder()
        ///             .loadBalancerArn(selected.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.arn()))
        ///             .port(443)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   # get listener from listener arn
        ///   listenerArn:
        ///     type: string
        /// variables:
        ///   listener: # get listener from load_balancer_arn and port
        ///     fn::invoke:
        ///       Function: aws:lb:getListener
        ///       Arguments:
        ///         arn: ${listenerArn}
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:lb:getLoadBalancer
        ///       Arguments:
        ///         name: default-public
        ///   selected443:
        ///     fn::invoke:
        ///       Function: aws:lb:getListener
        ///       Arguments:
        ///         loadBalancerArn: ${selected.arn}
        ///         port: 443
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetListenerResult> InvokeAsync(GetListenerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetListenerResult>("aws:alb/getListener:getListener", args ?? new GetListenerArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Note:** `aws.alb.Listener` is known as `aws.lb.Listener`. The functionality is identical.
        /// 
        /// Provides information about a Load Balancer Listener.
        /// 
        /// This data source can prove useful when a module accepts an LB Listener as an input variable and needs to know the LB it is attached to, or other information specific to the listener in question.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const listenerArn = config.require("listenerArn");
        /// const listener = aws.lb.getListener({
        ///     arn: listenerArn,
        /// });
        /// const selected = aws.lb.getLoadBalancer({
        ///     name: "default-public",
        /// });
        /// const selected443 = selected.then(selected =&gt; aws.lb.getListener({
        ///     loadBalancerArn: selected.arn,
        ///     port: 443,
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// listener_arn = config.require("listenerArn")
        /// listener = aws.lb.get_listener(arn=listener_arn)
        /// selected = aws.lb.get_load_balancer(name="default-public")
        /// selected443 = aws.lb.get_listener(load_balancer_arn=selected.arn,
        ///     port=443)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var listenerArn = config.Require("listenerArn");
        ///     var listener = Aws.LB.GetListener.Invoke(new()
        ///     {
        ///         Arn = listenerArn,
        ///     });
        /// 
        ///     var selected = Aws.LB.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Name = "default-public",
        ///     });
        /// 
        ///     var selected443 = Aws.LB.GetListener.Invoke(new()
        ///     {
        ///         LoadBalancerArn = selected.Apply(getLoadBalancerResult =&gt; getLoadBalancerResult.Arn),
        ///         Port = 443,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lb"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		listenerArn := cfg.Require("listenerArn")
        /// 		_, err := lb.LookupListener(ctx, &amp;lb.LookupListenerArgs{
        /// 			Arn: pulumi.StringRef(listenerArn),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		selected, err := lb.LookupLoadBalancer(ctx, &amp;lb.LookupLoadBalancerArgs{
        /// 			Name: pulumi.StringRef("default-public"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = lb.LookupListener(ctx, &amp;lb.LookupListenerArgs{
        /// 			LoadBalancerArn: pulumi.StringRef(selected.Arn),
        /// 			Port:            pulumi.IntRef(443),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.lb.LbFunctions;
        /// import com.pulumi.aws.lb.inputs.GetListenerArgs;
        /// import com.pulumi.aws.lb.inputs.GetLoadBalancerArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var listenerArn = config.get("listenerArn");
        ///         final var listener = LbFunctions.getListener(GetListenerArgs.builder()
        ///             .arn(listenerArn)
        ///             .build());
        /// 
        ///         final var selected = LbFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
        ///             .name("default-public")
        ///             .build());
        /// 
        ///         final var selected443 = LbFunctions.getListener(GetListenerArgs.builder()
        ///             .loadBalancerArn(selected.applyValue(getLoadBalancerResult -&gt; getLoadBalancerResult.arn()))
        ///             .port(443)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   # get listener from listener arn
        ///   listenerArn:
        ///     type: string
        /// variables:
        ///   listener: # get listener from load_balancer_arn and port
        ///     fn::invoke:
        ///       Function: aws:lb:getListener
        ///       Arguments:
        ///         arn: ${listenerArn}
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:lb:getLoadBalancer
        ///       Arguments:
        ///         name: default-public
        ///   selected443:
        ///     fn::invoke:
        ///       Function: aws:lb:getListener
        ///       Arguments:
        ///         loadBalancerArn: ${selected.arn}
        ///         port: 443
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetListenerResult> Invoke(GetListenerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetListenerResult>("aws:alb/getListener:getListener", args ?? new GetListenerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetListenerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the listener. Required if `load_balancer_arn` and `port` is not set.
        /// </summary>
        [Input("arn")]
        public string? Arn { get; set; }

        /// <summary>
        /// ARN of the load balancer. Required if `arn` is not set.
        /// </summary>
        [Input("loadBalancerArn")]
        public string? LoadBalancerArn { get; set; }

        /// <summary>
        /// Port of the listener. Required if `arn` is not set.
        /// </summary>
        [Input("port")]
        public int? Port { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetListenerArgs()
        {
        }
        public static new GetListenerArgs Empty => new GetListenerArgs();
    }

    public sealed class GetListenerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the listener. Required if `load_balancer_arn` and `port` is not set.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ARN of the load balancer. Required if `arn` is not set.
        /// </summary>
        [Input("loadBalancerArn")]
        public Input<string>? LoadBalancerArn { get; set; }

        /// <summary>
        /// Port of the listener. Required if `arn` is not set.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetListenerInvokeArgs()
        {
        }
        public static new GetListenerInvokeArgs Empty => new GetListenerInvokeArgs();
    }


    [OutputType]
    public sealed class GetListenerResult
    {
        public readonly string AlpnPolicy;
        public readonly string Arn;
        public readonly string CertificateArn;
        public readonly ImmutableArray<Outputs.GetListenerDefaultActionResult> DefaultActions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LoadBalancerArn;
        public readonly int Port;
        public readonly string Protocol;
        public readonly string SslPolicy;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetListenerResult(
            string alpnPolicy,

            string arn,

            string certificateArn,

            ImmutableArray<Outputs.GetListenerDefaultActionResult> defaultActions,

            string id,

            string loadBalancerArn,

            int port,

            string protocol,

            string sslPolicy,

            ImmutableDictionary<string, string> tags)
        {
            AlpnPolicy = alpnPolicy;
            Arn = arn;
            CertificateArn = certificateArn;
            DefaultActions = defaultActions;
            Id = id;
            LoadBalancerArn = loadBalancerArn;
            Port = port;
            Protocol = protocol;
            SslPolicy = sslPolicy;
            Tags = tags;
        }
    }
}
