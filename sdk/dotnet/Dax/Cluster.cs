// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dax
{
    [AwsResourceType("aws:dax/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        [Output("clusterAddress")]
        public Output<string> ClusterAddress { get; private set; } = null!;

        [Output("clusterEndpointEncryptionType")]
        public Output<string?> ClusterEndpointEncryptionType { get; private set; } = null!;

        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        [Output("configurationEndpoint")]
        public Output<string> ConfigurationEndpoint { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("iamRoleArn")]
        public Output<string> IamRoleArn { get; private set; } = null!;

        [Output("maintenanceWindow")]
        public Output<string> MaintenanceWindow { get; private set; } = null!;

        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        [Output("nodes")]
        public Output<ImmutableArray<Outputs.ClusterNode>> Nodes { get; private set; } = null!;

        [Output("notificationTopicArn")]
        public Output<string?> NotificationTopicArn { get; private set; } = null!;

        [Output("parameterGroupName")]
        public Output<string> ParameterGroupName { get; private set; } = null!;

        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        [Output("replicationFactor")]
        public Output<int> ReplicationFactor { get; private set; } = null!;

        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        [Output("serverSideEncryption")]
        public Output<Outputs.ClusterServerSideEncryption?> ServerSideEncryption { get; private set; } = null!;

        [Output("subnetGroupName")]
        public Output<string> SubnetGroupName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:dax/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:dax/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("clusterEndpointEncryptionType")]
        public Input<string>? ClusterEndpointEncryptionType { get; set; }

        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("iamRoleArn", required: true)]
        public Input<string> IamRoleArn { get; set; } = null!;

        [Input("maintenanceWindow")]
        public Input<string>? MaintenanceWindow { get; set; }

        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        [Input("notificationTopicArn")]
        public Input<string>? NotificationTopicArn { get; set; }

        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        [Input("replicationFactor", required: true)]
        public Input<int> ReplicationFactor { get; set; } = null!;

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("serverSideEncryption")]
        public Input<Inputs.ClusterServerSideEncryptionArgs>? ServerSideEncryption { get; set; }

        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("clusterAddress")]
        public Input<string>? ClusterAddress { get; set; }

        [Input("clusterEndpointEncryptionType")]
        public Input<string>? ClusterEndpointEncryptionType { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("configurationEndpoint")]
        public Input<string>? ConfigurationEndpoint { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        [Input("maintenanceWindow")]
        public Input<string>? MaintenanceWindow { get; set; }

        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("nodes")]
        private InputList<Inputs.ClusterNodeGetArgs>? _nodes;
        public InputList<Inputs.ClusterNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ClusterNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("notificationTopicArn")]
        public Input<string>? NotificationTopicArn { get; set; }

        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("serverSideEncryption")]
        public Input<Inputs.ClusterServerSideEncryptionGetArgs>? ServerSideEncryption { get; set; }

        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
