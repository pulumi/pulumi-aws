// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    /// <summary>
    /// Provides a core network resource.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.CoreNetwork("example", new()
    ///     {
    ///         GlobalNetworkId = aws_networkmanager_global_network.Example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### With description
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.CoreNetwork("example", new()
    ///     {
    ///         GlobalNetworkId = aws_networkmanager_global_network.Example.Id,
    ///         Description = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// ### With tags
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.CoreNetwork("example", new()
    ///     {
    ///         GlobalNetworkId = aws_networkmanager_global_network.Example.Id,
    ///         Tags = 
    ///         {
    ///             { "hello", "world" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With VPC Attachment (Single Region)
    /// 
    /// The example below illustrates the scenario where your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Set the `create_base_policy` argument to `true` if your core network does not currently have any `LIVE` policies (e.g. this is the first `pulumi up` with the core network resource), since a `LIVE` policy is required before VPCs can be attached to the core network. Otherwise, if your core network already has a `LIVE` policy, you may exclude the `create_base_policy` argument.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGlobalNetwork = new Aws.NetworkManager.GlobalNetwork("exampleGlobalNetwork");
    /// 
    ///     var exampleCoreNetwork = new Aws.NetworkManager.CoreNetwork("exampleCoreNetwork", new()
    ///     {
    ///         GlobalNetworkId = exampleGlobalNetwork.Id,
    ///         CreateBasePolicy = true,
    ///     });
    /// 
    ///     var exampleVpcAttachment = new Aws.NetworkManager.VpcAttachment("exampleVpcAttachment", new()
    ///     {
    ///         CoreNetworkId = exampleCoreNetwork.Id,
    ///         SubnetArns = aws_subnet.Example.Select(__item =&gt; __item.Arn).ToList(),
    ///         VpcArn = aws_vpc.Example.Arn,
    ///     });
    /// 
    ///     var exampleCoreNetworkPolicyDocument = Aws.NetworkManager.GetCoreNetworkPolicyDocument.Invoke(new()
    ///     {
    ///         CoreNetworkConfigurations = new[]
    ///         {
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInputArgs
    ///             {
    ///                 AsnRanges = new[]
    ///                 {
    ///                     "65022-65534",
    ///                 },
    ///                 EdgeLocations = new[]
    ///                 {
    ///                     new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInputArgs
    ///                     {
    ///                         Location = "us-west-2",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Segments = new[]
    ///         {
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentSegmentInputArgs
    ///             {
    ///                 Name = "segment",
    ///             },
    ///         },
    ///         SegmentActions = new[]
    ///         {
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentSegmentActionInputArgs
    ///             {
    ///                 Action = "create-route",
    ///                 Segment = "segment",
    ///                 DestinationCidrBlocks = new[]
    ///                 {
    ///                     "0.0.0.0/0",
    ///                 },
    ///                 Destinations = new[]
    ///                 {
    ///                     exampleVpcAttachment.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleCoreNetworkPolicyAttachment = new Aws.NetworkManager.CoreNetworkPolicyAttachment("exampleCoreNetworkPolicyAttachment", new()
    ///     {
    ///         CoreNetworkId = exampleCoreNetwork.Id,
    ///         PolicyDocument = exampleCoreNetworkPolicyDocument.Apply(getCoreNetworkPolicyDocumentResult =&gt; getCoreNetworkPolicyDocumentResult.Json),
    ///     });
    /// 
    /// });
    /// ```
    /// ### With VPC Attachment (Multi-Region)
    /// 
    /// The example below illustrates the scenario where your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Set the `create_base_policy` argument of the `aws.networkmanager.CoreNetwork` resource to `true` if your core network does not currently have any `LIVE` policies (e.g. this is the first `pulumi up` with the core network resource), since a `LIVE` policy is required before VPCs can be attached to the core network. Otherwise, if your core network already has a `LIVE` policy, you may exclude the `create_base_policy` argument. For multi-region in a core network that does not yet have a `LIVE` policy, pass a list of regions to the `aws.networkmanager.CoreNetwork` `base_policy_regions` argument. In the example below, `us-west-2` and `us-east-1` are specified in the base policy.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGlobalNetwork = new Aws.NetworkManager.GlobalNetwork("exampleGlobalNetwork");
    /// 
    ///     var exampleCoreNetwork = new Aws.NetworkManager.CoreNetwork("exampleCoreNetwork", new()
    ///     {
    ///         GlobalNetworkId = exampleGlobalNetwork.Id,
    ///         BasePolicyRegions = new[]
    ///         {
    ///             "us-west-2",
    ///             "us-east-1",
    ///         },
    ///         CreateBasePolicy = true,
    ///     });
    /// 
    ///     var exampleUsWest2 = new Aws.NetworkManager.VpcAttachment("exampleUsWest2", new()
    ///     {
    ///         CoreNetworkId = exampleCoreNetwork.Id,
    ///         SubnetArns = aws_subnet.Example_us_west_2.Select(__item =&gt; __item.Arn).ToList(),
    ///         VpcArn = aws_vpc.Example_us_west_2.Arn,
    ///     });
    /// 
    ///     var exampleUsEast1 = new Aws.NetworkManager.VpcAttachment("exampleUsEast1", new()
    ///     {
    ///         CoreNetworkId = exampleCoreNetwork.Id,
    ///         SubnetArns = aws_subnet.Example_us_east_1.Select(__item =&gt; __item.Arn).ToList(),
    ///         VpcArn = aws_vpc.Example_us_east_1.Arn,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = "alternate",
    ///     });
    /// 
    ///     var exampleCoreNetworkPolicyDocument = Aws.NetworkManager.GetCoreNetworkPolicyDocument.Invoke(new()
    ///     {
    ///         CoreNetworkConfigurations = new[]
    ///         {
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationInputArgs
    ///             {
    ///                 AsnRanges = new[]
    ///                 {
    ///                     "65022-65534",
    ///                 },
    ///                 EdgeLocations = new[]
    ///                 {
    ///                     new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInputArgs
    ///                     {
    ///                         Location = "us-west-2",
    ///                     },
    ///                     new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentCoreNetworkConfigurationEdgeLocationInputArgs
    ///                     {
    ///                         Location = "us-east-1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Segments = new[]
    ///         {
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentSegmentInputArgs
    ///             {
    ///                 Name = "segment",
    ///             },
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentSegmentInputArgs
    ///             {
    ///                 Name = "segment2",
    ///             },
    ///         },
    ///         SegmentActions = new[]
    ///         {
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentSegmentActionInputArgs
    ///             {
    ///                 Action = "create-route",
    ///                 Segment = "segment",
    ///                 DestinationCidrBlocks = new[]
    ///                 {
    ///                     "10.0.0.0/16",
    ///                 },
    ///                 Destinations = new[]
    ///                 {
    ///                     exampleUsWest2.Id,
    ///                 },
    ///             },
    ///             new Aws.NetworkManager.Inputs.GetCoreNetworkPolicyDocumentSegmentActionInputArgs
    ///             {
    ///                 Action = "create-route",
    ///                 Segment = "segment",
    ///                 DestinationCidrBlocks = new[]
    ///                 {
    ///                     "10.1.0.0/16",
    ///                 },
    ///                 Destinations = new[]
    ///                 {
    ///                     exampleUsEast1.Id,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleCoreNetworkPolicyAttachment = new Aws.NetworkManager.CoreNetworkPolicyAttachment("exampleCoreNetworkPolicyAttachment", new()
    ///     {
    ///         CoreNetworkId = exampleCoreNetwork.Id,
    ///         PolicyDocument = exampleCoreNetworkPolicyDocument.Apply(getCoreNetworkPolicyDocumentResult =&gt; getCoreNetworkPolicyDocumentResult.Json),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `aws_networkmanager_core_network` using the core network ID. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:networkmanager/coreNetwork:CoreNetwork example core-network-0d47f6t230mz46dy4
    /// ```
    /// </summary>
    [AwsResourceType("aws:networkmanager/coreNetwork:CoreNetwork")]
    public partial class CoreNetwork : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Core Network Amazon Resource Name (ARN).
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The base policy created by setting the `create_base_policy` argument to `true` requires a region to be set in the `edge-locations`, `location` key. If `base_policy_region` is not specified, the region used in the base policy defaults to the region specified in the `provider` block.
        /// </summary>
        [Output("basePolicyRegion")]
        public Output<string?> BasePolicyRegion { get; private set; } = null!;

        /// <summary>
        /// A list of regions to add to the base policy. The base policy created by setting the `create_base_policy` argument to `true` requires one or more regions to be set in the `edge-locations`, `location` key. If `base_policy_regions` is not specified, the region used in the base policy defaults to the region specified in the `provider` block.
        /// </summary>
        [Output("basePolicyRegions")]
        public Output<ImmutableArray<string>> BasePolicyRegions { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to create a base policy when a core network is created or updated. A base policy is created and set to `LIVE` to allow attachments to the core network (e.g. VPC Attachments) before applying a policy document provided using the `aws.networkmanager.CoreNetworkPolicyAttachment` resource. This base policy is needed if your core network does not have any `LIVE` policies and your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Valid values are `true` or `false`. An example of this Pulumi snippet can be found above for VPC Attachment in a single region and for VPC Attachment multi-region. An example base policy is shown below. This base policy is overridden with the policy that you specify in the `aws.networkmanager.CoreNetworkPolicyAttachment` resource.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// </summary>
        [Output("createBasePolicy")]
        public Output<bool?> CreateBasePolicy { get; private set; } = null!;

        /// <summary>
        /// Timestamp when a core network was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the Core Network.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// One or more blocks detailing the edges within a core network. Detailed below.
        /// </summary>
        [Output("edges")]
        public Output<ImmutableArray<Outputs.CoreNetworkEdge>> Edges { get; private set; } = null!;

        /// <summary>
        /// The ID of the global network that a core network will be a part of.
        /// </summary>
        [Output("globalNetworkId")]
        public Output<string> GlobalNetworkId { get; private set; } = null!;

        /// <summary>
        /// One or more blocks detailing the segments within a core network. Detailed below.
        /// </summary>
        [Output("segments")]
        public Output<ImmutableArray<Outputs.CoreNetworkSegment>> Segments { get; private set; } = null!;

        /// <summary>
        /// Current state of a core network.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Key-value tags for the Core Network. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a CoreNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CoreNetwork(string name, CoreNetworkArgs args, CustomResourceOptions? options = null)
            : base("aws:networkmanager/coreNetwork:CoreNetwork", name, args ?? new CoreNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CoreNetwork(string name, Input<string> id, CoreNetworkState? state = null, CustomResourceOptions? options = null)
            : base("aws:networkmanager/coreNetwork:CoreNetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CoreNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CoreNetwork Get(string name, Input<string> id, CoreNetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new CoreNetwork(name, id, state, options);
        }
    }

    public sealed class CoreNetworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The base policy created by setting the `create_base_policy` argument to `true` requires a region to be set in the `edge-locations`, `location` key. If `base_policy_region` is not specified, the region used in the base policy defaults to the region specified in the `provider` block.
        /// </summary>
        [Input("basePolicyRegion")]
        public Input<string>? BasePolicyRegion { get; set; }

        [Input("basePolicyRegions")]
        private InputList<string>? _basePolicyRegions;

        /// <summary>
        /// A list of regions to add to the base policy. The base policy created by setting the `create_base_policy` argument to `true` requires one or more regions to be set in the `edge-locations`, `location` key. If `base_policy_regions` is not specified, the region used in the base policy defaults to the region specified in the `provider` block.
        /// </summary>
        public InputList<string> BasePolicyRegions
        {
            get => _basePolicyRegions ?? (_basePolicyRegions = new InputList<string>());
            set => _basePolicyRegions = value;
        }

        /// <summary>
        /// Specifies whether to create a base policy when a core network is created or updated. A base policy is created and set to `LIVE` to allow attachments to the core network (e.g. VPC Attachments) before applying a policy document provided using the `aws.networkmanager.CoreNetworkPolicyAttachment` resource. This base policy is needed if your core network does not have any `LIVE` policies and your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Valid values are `true` or `false`. An example of this Pulumi snippet can be found above for VPC Attachment in a single region and for VPC Attachment multi-region. An example base policy is shown below. This base policy is overridden with the policy that you specify in the `aws.networkmanager.CoreNetworkPolicyAttachment` resource.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// </summary>
        [Input("createBasePolicy")]
        public Input<bool>? CreateBasePolicy { get; set; }

        /// <summary>
        /// Description of the Core Network.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the global network that a core network will be a part of.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public Input<string> GlobalNetworkId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the Core Network. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CoreNetworkArgs()
        {
        }
        public static new CoreNetworkArgs Empty => new CoreNetworkArgs();
    }

    public sealed class CoreNetworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Core Network Amazon Resource Name (ARN).
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The base policy created by setting the `create_base_policy` argument to `true` requires a region to be set in the `edge-locations`, `location` key. If `base_policy_region` is not specified, the region used in the base policy defaults to the region specified in the `provider` block.
        /// </summary>
        [Input("basePolicyRegion")]
        public Input<string>? BasePolicyRegion { get; set; }

        [Input("basePolicyRegions")]
        private InputList<string>? _basePolicyRegions;

        /// <summary>
        /// A list of regions to add to the base policy. The base policy created by setting the `create_base_policy` argument to `true` requires one or more regions to be set in the `edge-locations`, `location` key. If `base_policy_regions` is not specified, the region used in the base policy defaults to the region specified in the `provider` block.
        /// </summary>
        public InputList<string> BasePolicyRegions
        {
            get => _basePolicyRegions ?? (_basePolicyRegions = new InputList<string>());
            set => _basePolicyRegions = value;
        }

        /// <summary>
        /// Specifies whether to create a base policy when a core network is created or updated. A base policy is created and set to `LIVE` to allow attachments to the core network (e.g. VPC Attachments) before applying a policy document provided using the `aws.networkmanager.CoreNetworkPolicyAttachment` resource. This base policy is needed if your core network does not have any `LIVE` policies and your policy document has static routes pointing to VPC attachments and you want to attach your VPCs to the core network before applying the desired policy document. Valid values are `true` or `false`. An example of this Pulumi snippet can be found above for VPC Attachment in a single region and for VPC Attachment multi-region. An example base policy is shown below. This base policy is overridden with the policy that you specify in the `aws.networkmanager.CoreNetworkPolicyAttachment` resource.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// </summary>
        [Input("createBasePolicy")]
        public Input<bool>? CreateBasePolicy { get; set; }

        /// <summary>
        /// Timestamp when a core network was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the Core Network.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("edges")]
        private InputList<Inputs.CoreNetworkEdgeGetArgs>? _edges;

        /// <summary>
        /// One or more blocks detailing the edges within a core network. Detailed below.
        /// </summary>
        public InputList<Inputs.CoreNetworkEdgeGetArgs> Edges
        {
            get => _edges ?? (_edges = new InputList<Inputs.CoreNetworkEdgeGetArgs>());
            set => _edges = value;
        }

        /// <summary>
        /// The ID of the global network that a core network will be a part of.
        /// </summary>
        [Input("globalNetworkId")]
        public Input<string>? GlobalNetworkId { get; set; }

        [Input("segments")]
        private InputList<Inputs.CoreNetworkSegmentGetArgs>? _segments;

        /// <summary>
        /// One or more blocks detailing the segments within a core network. Detailed below.
        /// </summary>
        public InputList<Inputs.CoreNetworkSegmentGetArgs> Segments
        {
            get => _segments ?? (_segments = new InputList<Inputs.CoreNetworkSegmentGetArgs>());
            set => _segments = value;
        }

        /// <summary>
        /// Current state of a core network.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the Core Network. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public CoreNetworkState()
        {
        }
        public static new CoreNetworkState Empty => new CoreNetworkState();
    }
}
