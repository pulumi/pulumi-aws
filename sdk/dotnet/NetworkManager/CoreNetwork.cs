// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    [AwsResourceType("aws:networkmanager/coreNetwork:CoreNetwork")]
    public partial class CoreNetwork : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("edges")]
        public Output<ImmutableArray<Outputs.CoreNetworkEdge>> Edges { get; private set; } = null!;

        [Output("globalNetworkId")]
        public Output<string> GlobalNetworkId { get; private set; } = null!;

        [Output("policyDocument")]
        public Output<string?> PolicyDocument { get; private set; } = null!;

        [Output("segments")]
        public Output<ImmutableArray<Outputs.CoreNetworkSegment>> Segments { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a CoreNetwork resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CoreNetwork(string name, CoreNetworkArgs args, CustomResourceOptions? options = null)
            : base("aws:networkmanager/coreNetwork:CoreNetwork", name, args ?? new CoreNetworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CoreNetwork(string name, Input<string> id, CoreNetworkState? state = null, CustomResourceOptions? options = null)
            : base("aws:networkmanager/coreNetwork:CoreNetwork", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CoreNetwork resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CoreNetwork Get(string name, Input<string> id, CoreNetworkState? state = null, CustomResourceOptions? options = null)
        {
            return new CoreNetwork(name, id, state, options);
        }
    }

    public sealed class CoreNetworkArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("globalNetworkId", required: true)]
        public Input<string> GlobalNetworkId { get; set; } = null!;

        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CoreNetworkArgs()
        {
        }
        public static new CoreNetworkArgs Empty => new CoreNetworkArgs();
    }

    public sealed class CoreNetworkState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("edges")]
        private InputList<Inputs.CoreNetworkEdgeGetArgs>? _edges;
        public InputList<Inputs.CoreNetworkEdgeGetArgs> Edges
        {
            get => _edges ?? (_edges = new InputList<Inputs.CoreNetworkEdgeGetArgs>());
            set => _edges = value;
        }

        [Input("globalNetworkId")]
        public Input<string>? GlobalNetworkId { get; set; }

        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        [Input("segments")]
        private InputList<Inputs.CoreNetworkSegmentGetArgs>? _segments;
        public InputList<Inputs.CoreNetworkSegmentGetArgs> Segments
        {
            get => _segments ?? (_segments = new InputList<Inputs.CoreNetworkSegmentGetArgs>());
            set => _segments = value;
        }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public CoreNetworkState()
        {
        }
        public static new CoreNetworkState Empty => new CoreNetworkState();
    }
}
