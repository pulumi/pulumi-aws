// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    public static class GetDevice
    {
        /// <summary>
        /// Retrieve information about a device.
        /// </summary>
        public static Task<GetDeviceResult> InvokeAsync(GetDeviceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDeviceResult>("aws:networkmanager/getDevice:getDevice", args ?? new GetDeviceArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about a device.
        /// </summary>
        public static Output<GetDeviceResult> Invoke(GetDeviceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDeviceResult>("aws:networkmanager/getDevice:getDevice", args ?? new GetDeviceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDeviceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the device.
        /// </summary>
        [Input("deviceId", required: true)]
        public string DeviceId { get; set; } = null!;

        /// <summary>
        /// The ID of the global network.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public string GlobalNetworkId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value tags for the device.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDeviceArgs()
        {
        }
    }

    public sealed class GetDeviceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the device.
        /// </summary>
        [Input("deviceId", required: true)]
        public Input<string> DeviceId { get; set; } = null!;

        /// <summary>
        /// The ID of the global network.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public Input<string> GlobalNetworkId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the device.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDeviceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDeviceResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the device.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The AWS location of the device. Documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeviceAwsLocationResult> AwsLocations;
        /// <summary>
        /// A description of the device.
        /// </summary>
        public readonly string Description;
        public readonly string DeviceId;
        public readonly string GlobalNetworkId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The location of the device. Documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDeviceLocationResult> Locations;
        /// <summary>
        /// The model of device.
        /// </summary>
        public readonly string Model;
        /// <summary>
        /// The serial number of the device.
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// The ID of the site.
        /// </summary>
        public readonly string SiteId;
        /// <summary>
        /// Key-value tags for the device.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of device.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The vendor of the device.
        /// </summary>
        public readonly string Vendor;

        [OutputConstructor]
        private GetDeviceResult(
            string arn,

            ImmutableArray<Outputs.GetDeviceAwsLocationResult> awsLocations,

            string description,

            string deviceId,

            string globalNetworkId,

            string id,

            ImmutableArray<Outputs.GetDeviceLocationResult> locations,

            string model,

            string serialNumber,

            string siteId,

            ImmutableDictionary<string, string> tags,

            string type,

            string vendor)
        {
            Arn = arn;
            AwsLocations = awsLocations;
            Description = description;
            DeviceId = deviceId;
            GlobalNetworkId = globalNetworkId;
            Id = id;
            Locations = locations;
            Model = model;
            SerialNumber = serialNumber;
            SiteId = siteId;
            Tags = tags;
            Type = type;
            Vendor = vendor;
        }
    }
}
