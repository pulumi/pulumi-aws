// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    /// <summary>
    /// Manages an AWS Network Manager Attachment Accepter.
    /// 
    /// Use this resource to accept cross-account attachments in AWS Network Manager. When an attachment is created in one account and needs to be accepted by another account that owns the core network, this resource handles the acceptance process.
    /// 
    /// ## Example Usage
    /// 
    /// ### VPC Attachment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.AttachmentAccepter("example", new()
    ///     {
    ///         AttachmentId = exampleAwsNetworkmanagerVpcAttachment.Id,
    ///         AttachmentType = exampleAwsNetworkmanagerVpcAttachment.AttachmentType,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Site-to-Site VPN Attachment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.AttachmentAccepter("example", new()
    ///     {
    ///         AttachmentId = exampleAwsNetworkmanagerSiteToSiteVpnAttachment.Id,
    ///         AttachmentType = exampleAwsNetworkmanagerSiteToSiteVpnAttachment.AttachmentType,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Connect Attachment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.AttachmentAccepter("example", new()
    ///     {
    ///         AttachmentId = exampleAwsNetworkmanagerConnectAttachment.Id,
    ///         AttachmentType = exampleAwsNetworkmanagerConnectAttachment.AttachmentType,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Transit Gateway Route Table Attachment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.AttachmentAccepter("example", new()
    ///     {
    ///         AttachmentId = exampleAwsNetworkmanagerTransitGatewayRouteTableAttachment.Id,
    ///         AttachmentType = exampleAwsNetworkmanagerTransitGatewayRouteTableAttachment.AttachmentType,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Direct Connect Gateway Attachment
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.NetworkManager.AttachmentAccepter("example", new()
    ///     {
    ///         AttachmentId = exampleAwsNetworkmanagerDxGatewayAttachment.Id,
    ///         AttachmentType = exampleAwsNetworkmanagerDxGatewayAttachment.AttachmentType,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:networkmanager/attachmentAccepter:AttachmentAccepter")]
    public partial class AttachmentAccepter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the attachment.
        /// </summary>
        [Output("attachmentId")]
        public Output<string> AttachmentId { get; private set; } = null!;

        /// <summary>
        /// Policy rule number associated with the attachment.
        /// </summary>
        [Output("attachmentPolicyRuleNumber")]
        public Output<int> AttachmentPolicyRuleNumber { get; private set; } = null!;

        /// <summary>
        /// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
        /// </summary>
        [Output("attachmentType")]
        public Output<string> AttachmentType { get; private set; } = null!;

        /// <summary>
        /// ARN of the core network.
        /// </summary>
        [Output("coreNetworkArn")]
        public Output<string> CoreNetworkArn { get; private set; } = null!;

        /// <summary>
        /// ID of the core network.
        /// </summary>
        [Output("coreNetworkId")]
        public Output<string> CoreNetworkId { get; private set; } = null!;

        /// <summary>
        /// Region where the edge is located. This is returned for all attachment types except Direct Connect gateway attachments, which instead return `edge_locations`.
        /// </summary>
        [Output("edgeLocation")]
        public Output<string> EdgeLocation { get; private set; } = null!;

        /// <summary>
        /// Edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edge_location`.
        /// </summary>
        [Output("edgeLocations")]
        public Output<ImmutableArray<string>> EdgeLocations { get; private set; } = null!;

        /// <summary>
        /// ID of the attachment account owner.
        /// </summary>
        [Output("ownerAccountId")]
        public Output<string> OwnerAccountId { get; private set; } = null!;

        /// <summary>
        /// Attachment resource ARN.
        /// </summary>
        [Output("resourceArn")]
        public Output<string> ResourceArn { get; private set; } = null!;

        /// <summary>
        /// Name of the segment attachment.
        /// </summary>
        [Output("segmentName")]
        public Output<string> SegmentName { get; private set; } = null!;

        /// <summary>
        /// State of the attachment.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a AttachmentAccepter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AttachmentAccepter(string name, AttachmentAccepterArgs args, CustomResourceOptions? options = null)
            : base("aws:networkmanager/attachmentAccepter:AttachmentAccepter", name, args ?? new AttachmentAccepterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AttachmentAccepter(string name, Input<string> id, AttachmentAccepterState? state = null, CustomResourceOptions? options = null)
            : base("aws:networkmanager/attachmentAccepter:AttachmentAccepter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AttachmentAccepter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AttachmentAccepter Get(string name, Input<string> id, AttachmentAccepterState? state = null, CustomResourceOptions? options = null)
        {
            return new AttachmentAccepter(name, id, state, options);
        }
    }

    public sealed class AttachmentAccepterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the attachment.
        /// </summary>
        [Input("attachmentId", required: true)]
        public Input<string> AttachmentId { get; set; } = null!;

        /// <summary>
        /// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
        /// </summary>
        [Input("attachmentType", required: true)]
        public Input<string> AttachmentType { get; set; } = null!;

        public AttachmentAccepterArgs()
        {
        }
        public static new AttachmentAccepterArgs Empty => new AttachmentAccepterArgs();
    }

    public sealed class AttachmentAccepterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the attachment.
        /// </summary>
        [Input("attachmentId")]
        public Input<string>? AttachmentId { get; set; }

        /// <summary>
        /// Policy rule number associated with the attachment.
        /// </summary>
        [Input("attachmentPolicyRuleNumber")]
        public Input<int>? AttachmentPolicyRuleNumber { get; set; }

        /// <summary>
        /// Type of attachment. Valid values: `CONNECT`, `DIRECT_CONNECT_GATEWAY`, `SITE_TO_SITE_VPN`, `TRANSIT_GATEWAY_ROUTE_TABLE`, `VPC`.
        /// </summary>
        [Input("attachmentType")]
        public Input<string>? AttachmentType { get; set; }

        /// <summary>
        /// ARN of the core network.
        /// </summary>
        [Input("coreNetworkArn")]
        public Input<string>? CoreNetworkArn { get; set; }

        /// <summary>
        /// ID of the core network.
        /// </summary>
        [Input("coreNetworkId")]
        public Input<string>? CoreNetworkId { get; set; }

        /// <summary>
        /// Region where the edge is located. This is returned for all attachment types except Direct Connect gateway attachments, which instead return `edge_locations`.
        /// </summary>
        [Input("edgeLocation")]
        public Input<string>? EdgeLocation { get; set; }

        [Input("edgeLocations")]
        private InputList<string>? _edgeLocations;

        /// <summary>
        /// Edge locations that the Direct Connect gateway is associated with. This is returned only for Direct Connect gateway attachments. All other attachment types return `edge_location`.
        /// </summary>
        public InputList<string> EdgeLocations
        {
            get => _edgeLocations ?? (_edgeLocations = new InputList<string>());
            set => _edgeLocations = value;
        }

        /// <summary>
        /// ID of the attachment account owner.
        /// </summary>
        [Input("ownerAccountId")]
        public Input<string>? OwnerAccountId { get; set; }

        /// <summary>
        /// Attachment resource ARN.
        /// </summary>
        [Input("resourceArn")]
        public Input<string>? ResourceArn { get; set; }

        /// <summary>
        /// Name of the segment attachment.
        /// </summary>
        [Input("segmentName")]
        public Input<string>? SegmentName { get; set; }

        /// <summary>
        /// State of the attachment.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public AttachmentAccepterState()
        {
        }
        public static new AttachmentAccepterState Empty => new AttachmentAccepterState();
    }
}
