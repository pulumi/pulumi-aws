// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    public static class GetSite
    {
        /// <summary>
        /// Retrieve information about a site.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.NetworkManager.GetSite.InvokeAsync(new Aws.NetworkManager.GetSiteArgs
        ///         {
        ///             GlobalNetworkId = @var.Global_network_id,
        ///             SiteId = @var.Site_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSiteResult> InvokeAsync(GetSiteArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSiteResult>("aws:networkmanager/getSite:getSite", args ?? new GetSiteArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about a site.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.NetworkManager.GetSite.InvokeAsync(new Aws.NetworkManager.GetSiteArgs
        ///         {
        ///             GlobalNetworkId = @var.Global_network_id,
        ///             SiteId = @var.Site_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSiteResult> Invoke(GetSiteInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSiteResult>("aws:networkmanager/getSite:getSite", args ?? new GetSiteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSiteArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Global Network of the site to retrieve.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public string GlobalNetworkId { get; set; } = null!;

        /// <summary>
        /// The id of the specific site to retrieve.
        /// </summary>
        [Input("siteId", required: true)]
        public string SiteId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value tags for the Site.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetSiteArgs()
        {
        }
    }

    public sealed class GetSiteInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Global Network of the site to retrieve.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public Input<string> GlobalNetworkId { get; set; } = null!;

        /// <summary>
        /// The id of the specific site to retrieve.
        /// </summary>
        [Input("siteId", required: true)]
        public Input<string> SiteId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the Site.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetSiteInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSiteResult
    {
        /// <summary>
        /// The ARN of the site.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The description of the site.
        /// </summary>
        public readonly string Description;
        public readonly string GlobalNetworkId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The site location as documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSiteLocationResult> Locations;
        public readonly string SiteId;
        /// <summary>
        /// Key-value tags for the Site.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetSiteResult(
            string arn,

            string description,

            string globalNetworkId,

            string id,

            ImmutableArray<Outputs.GetSiteLocationResult> locations,

            string siteId,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            Description = description;
            GlobalNetworkId = globalNetworkId;
            Id = id;
            Locations = locations;
            SiteId = siteId;
            Tags = tags;
        }
    }
}
