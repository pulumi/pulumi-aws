// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    public static class GetConnection
    {
        /// <summary>
        /// Retrieve information about a connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.NetworkManager.GetConnection.Invoke(new()
        ///     {
        ///         GlobalNetworkId = @var.Global_network_id,
        ///         ConnectionId = @var.Connection_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("aws:networkmanager/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about a connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.NetworkManager.GetConnection.Invoke(new()
        ///     {
        ///         GlobalNetworkId = @var.Global_network_id,
        ///         ConnectionId = @var.Connection_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetConnectionResult> Invoke(GetConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionResult>("aws:networkmanager/getConnection:getConnection", args ?? new GetConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the specific connection to retrieve.
        /// </summary>
        [Input("connectionId", required: true)]
        public string ConnectionId { get; set; } = null!;

        /// <summary>
        /// ID of the Global Network of the connection to retrieve.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public string GlobalNetworkId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value tags for the connection.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetConnectionArgs()
        {
        }
        public static new GetConnectionArgs Empty => new GetConnectionArgs();
    }

    public sealed class GetConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the specific connection to retrieve.
        /// </summary>
        [Input("connectionId", required: true)]
        public Input<string> ConnectionId { get; set; } = null!;

        /// <summary>
        /// ID of the Global Network of the connection to retrieve.
        /// </summary>
        [Input("globalNetworkId", required: true)]
        public Input<string> GlobalNetworkId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the connection.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetConnectionInvokeArgs()
        {
        }
        public static new GetConnectionInvokeArgs Empty => new GetConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// ARN of the connection.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// ID of the second device in the connection.
        /// </summary>
        public readonly string ConnectedDeviceId;
        /// <summary>
        /// ID of the link for the second device.
        /// </summary>
        public readonly string ConnectedLinkId;
        public readonly string ConnectionId;
        /// <summary>
        /// Description of the connection.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID of the first device in the connection.
        /// </summary>
        public readonly string DeviceId;
        public readonly string GlobalNetworkId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the link for the first device.
        /// </summary>
        public readonly string LinkId;
        /// <summary>
        /// Key-value tags for the connection.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetConnectionResult(
            string arn,

            string connectedDeviceId,

            string connectedLinkId,

            string connectionId,

            string description,

            string deviceId,

            string globalNetworkId,

            string id,

            string linkId,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            ConnectedDeviceId = connectedDeviceId;
            ConnectedLinkId = connectedLinkId;
            ConnectionId = connectionId;
            Description = description;
            DeviceId = deviceId;
            GlobalNetworkId = globalNetworkId;
            Id = id;
            LinkId = linkId;
            Tags = tags;
        }
    }
}
