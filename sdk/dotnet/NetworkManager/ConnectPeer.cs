// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkManager
{
    /// <summary>
    /// Resource for managing an AWS NetworkManager Connect Peer.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `aws_networkmanager_connect_peer` using the connect peer ID. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:networkmanager/connectPeer:ConnectPeer example connect-peer-061f3e96275db1acc
    /// ```
    /// </summary>
    [AwsResourceType("aws:networkmanager/connectPeer:ConnectPeer")]
    public partial class ConnectPeer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the attachment.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The Connect peer BGP options.
        /// </summary>
        [Output("bgpOptions")]
        public Output<Outputs.ConnectPeerBgpOptions?> BgpOptions { get; private set; } = null!;

        /// <summary>
        /// The configuration of the Connect peer.
        /// </summary>
        [Output("configurations")]
        public Output<ImmutableArray<Outputs.ConnectPeerConfiguration>> Configurations { get; private set; } = null!;

        /// <summary>
        /// The ID of the connection attachment.
        /// </summary>
        [Output("connectAttachmentId")]
        public Output<string> ConnectAttachmentId { get; private set; } = null!;

        [Output("connectPeerId")]
        public Output<string> ConnectPeerId { get; private set; } = null!;

        /// <summary>
        /// A Connect peer core network address.
        /// </summary>
        [Output("coreNetworkAddress")]
        public Output<string?> CoreNetworkAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of a core network.
        /// </summary>
        [Output("coreNetworkId")]
        public Output<string> CoreNetworkId { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The Region where the peer is located.
        /// </summary>
        [Output("edgeLocation")]
        public Output<string> EdgeLocation { get; private set; } = null!;

        /// <summary>
        /// The inside IP addresses used for BGP peering.
        /// </summary>
        [Output("insideCidrBlocks")]
        public Output<ImmutableArray<string>> InsideCidrBlocks { get; private set; } = null!;

        /// <summary>
        /// The Connect peer address.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("peerAddress")]
        public Output<string> PeerAddress { get; private set; } = null!;

        /// <summary>
        /// The state of the Connect peer.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a ConnectPeer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConnectPeer(string name, ConnectPeerArgs args, CustomResourceOptions? options = null)
            : base("aws:networkmanager/connectPeer:ConnectPeer", name, args ?? new ConnectPeerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConnectPeer(string name, Input<string> id, ConnectPeerState? state = null, CustomResourceOptions? options = null)
            : base("aws:networkmanager/connectPeer:ConnectPeer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConnectPeer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConnectPeer Get(string name, Input<string> id, ConnectPeerState? state = null, CustomResourceOptions? options = null)
        {
            return new ConnectPeer(name, id, state, options);
        }
    }

    public sealed class ConnectPeerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Connect peer BGP options.
        /// </summary>
        [Input("bgpOptions")]
        public Input<Inputs.ConnectPeerBgpOptionsArgs>? BgpOptions { get; set; }

        /// <summary>
        /// The ID of the connection attachment.
        /// </summary>
        [Input("connectAttachmentId", required: true)]
        public Input<string> ConnectAttachmentId { get; set; } = null!;

        /// <summary>
        /// A Connect peer core network address.
        /// </summary>
        [Input("coreNetworkAddress")]
        public Input<string>? CoreNetworkAddress { get; set; }

        [Input("insideCidrBlocks", required: true)]
        private InputList<string>? _insideCidrBlocks;

        /// <summary>
        /// The inside IP addresses used for BGP peering.
        /// </summary>
        public InputList<string> InsideCidrBlocks
        {
            get => _insideCidrBlocks ?? (_insideCidrBlocks = new InputList<string>());
            set => _insideCidrBlocks = value;
        }

        /// <summary>
        /// The Connect peer address.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("peerAddress", required: true)]
        public Input<string> PeerAddress { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConnectPeerArgs()
        {
        }
        public static new ConnectPeerArgs Empty => new ConnectPeerArgs();
    }

    public sealed class ConnectPeerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the attachment.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The Connect peer BGP options.
        /// </summary>
        [Input("bgpOptions")]
        public Input<Inputs.ConnectPeerBgpOptionsGetArgs>? BgpOptions { get; set; }

        [Input("configurations")]
        private InputList<Inputs.ConnectPeerConfigurationGetArgs>? _configurations;

        /// <summary>
        /// The configuration of the Connect peer.
        /// </summary>
        public InputList<Inputs.ConnectPeerConfigurationGetArgs> Configurations
        {
            get => _configurations ?? (_configurations = new InputList<Inputs.ConnectPeerConfigurationGetArgs>());
            set => _configurations = value;
        }

        /// <summary>
        /// The ID of the connection attachment.
        /// </summary>
        [Input("connectAttachmentId")]
        public Input<string>? ConnectAttachmentId { get; set; }

        [Input("connectPeerId")]
        public Input<string>? ConnectPeerId { get; set; }

        /// <summary>
        /// A Connect peer core network address.
        /// </summary>
        [Input("coreNetworkAddress")]
        public Input<string>? CoreNetworkAddress { get; set; }

        /// <summary>
        /// The ID of a core network.
        /// </summary>
        [Input("coreNetworkId")]
        public Input<string>? CoreNetworkId { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The Region where the peer is located.
        /// </summary>
        [Input("edgeLocation")]
        public Input<string>? EdgeLocation { get; set; }

        [Input("insideCidrBlocks")]
        private InputList<string>? _insideCidrBlocks;

        /// <summary>
        /// The inside IP addresses used for BGP peering.
        /// </summary>
        public InputList<string> InsideCidrBlocks
        {
            get => _insideCidrBlocks ?? (_insideCidrBlocks = new InputList<string>());
            set => _insideCidrBlocks = value;
        }

        /// <summary>
        /// The Connect peer address.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("peerAddress")]
        public Input<string>? PeerAddress { get; set; }

        /// <summary>
        /// The state of the Connect peer.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the attachment. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ConnectPeerState()
        {
        }
        public static new ConnectPeerState Empty => new ConnectPeerState();
    }
}
