// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LakeFormation
{
    /// <summary>
    /// Creates an LF-Tag with the specified name and values. Each key must have at least one value. The maximum number of values permitted is 15.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.LakeFormation.LfTag("example", new()
    ///     {
    ///         Key = "module",
    ///         Values = new[]
    ///         {
    ///             "Orders",
    ///             "Sales",
    ///             "Customers",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Lake Formation LF-Tags using the `catalog_id:key`. If you have not set a Catalog ID specify the AWS Account ID that the database is in. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:lakeformation/lfTag:LfTag example 123456789012:some_key
    /// ```
    /// </summary>
    [AwsResourceType("aws:lakeformation/lfTag:LfTag")]
    public partial class LfTag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// Key-name for the tag.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// List of possible values an attribute can take.
        /// </summary>
        [Output("values")]
        public Output<ImmutableArray<string>> Values { get; private set; } = null!;


        /// <summary>
        /// Create a LfTag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LfTag(string name, LfTagArgs args, CustomResourceOptions? options = null)
            : base("aws:lakeformation/lfTag:LfTag", name, args ?? new LfTagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LfTag(string name, Input<string> id, LfTagState? state = null, CustomResourceOptions? options = null)
            : base("aws:lakeformation/lfTag:LfTag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LfTag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LfTag Get(string name, Input<string> id, LfTagState? state = null, CustomResourceOptions? options = null)
        {
            return new LfTag(name, id, state, options);
        }
    }

    public sealed class LfTagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Key-name for the tag.
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;

        /// <summary>
        /// List of possible values an attribute can take.
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public LfTagArgs()
        {
        }
        public static new LfTagArgs Empty => new LfTagArgs();
    }

    public sealed class LfTagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Data Catalog to create the tag in. If omitted, this defaults to the AWS Account ID.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Key-name for the tag.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        [Input("values")]
        private InputList<string>? _values;

        /// <summary>
        /// List of possible values an attribute can take.
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public LfTagState()
        {
        }
        public static new LfTagState Empty => new LfTagState();
    }
}
