// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LakeFormation
{
    /// <summary>
    /// Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Permissions are granted to a principal, in a Data Catalog, relative to a Lake Formation resource, which includes the Data Catalog, databases, tables, LF-tags, and LF-tag policies. For more information, see [Security and Access Control to Metadata and Data in Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
    /// 
    /// !&gt; **WARNING:** Lake Formation permissions are not in effect by default within AWS. Using this resource will not secure your data and will result in errors if you do not change the security settings for existing resources and the default security settings for new resources. See Default Behavior and `IAMAllowedPrincipals` for additional details.
    /// 
    /// &gt; **NOTE:** In general, the `principal` should _NOT_ be a Lake Formation administrator or the entity (e.g., IAM role) that is running the deployment. Administrators have implicit permissions. These should be managed by granting or not granting administrator rights using `aws.lakeformation.DataLakeSettings`, _not_ with this resource.
    /// 
    /// ## Default Behavior and `IAMAllowedPrincipals`
    /// ### Problem Using `IAMAllowedPrincipals`
    /// 
    /// AWS does not support combining `IAMAllowedPrincipals` permissions and non-`IAMAllowedPrincipals` permissions. Doing so results in unexpected permissions and behaviors. For example, this configuration grants a user `SELECT` on a column in a table.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCatalogDatabase = new Aws.Glue.CatalogDatabase("exampleCatalogDatabase", new()
    ///     {
    ///         Name = "sadabate",
    ///     });
    /// 
    ///     var exampleCatalogTable = new Aws.Glue.CatalogTable("exampleCatalogTable", new()
    ///     {
    ///         Name = "abelt",
    ///         DatabaseName = aws_glue_catalog_database.Test.Name,
    ///         StorageDescriptor = new Aws.Glue.Inputs.CatalogTableStorageDescriptorArgs
    ///         {
    ///             Columns = new[]
    ///             {
    ///                 new Aws.Glue.Inputs.CatalogTableStorageDescriptorColumnArgs
    ///                 {
    ///                     Name = "event",
    ///                     Type = "string",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var examplePermissions = new Aws.LakeFormation.Permissions("examplePermissions", new()
    ///     {
    ///         PermissionDetails = new[]
    ///         {
    ///             "SELECT",
    ///         },
    ///         Principal = "arn:aws:iam:us-east-1:123456789012:user/SanHolo",
    ///         TableWithColumns = new Aws.LakeFormation.Inputs.PermissionsTableWithColumnsArgs
    ///         {
    ///             DatabaseName = exampleCatalogTable.DatabaseName,
    ///             Name = exampleCatalogTable.Name,
    ///             ColumnNames = new[]
    ///             {
    ///                 "event",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// The resulting permissions depend on whether the table had `IAMAllowedPrincipals` (IAP) permissions or not.
    /// 
    /// | Result With IAP | Result Without IAP |
    /// | ---- | ---- |
    /// | `SELECT` column wildcard (i.e., all columns) | `SELECT` on `"event"` (as expected) |
    /// 
    /// ## Using Lake Formation Permissions
    /// 
    /// Lake Formation grants implicit permissions to data lake administrators, database creators, and table creators. These implicit permissions cannot be revoked _per se_. If this resource reads implicit permissions, it will attempt to revoke them, which causes an error when the resource is destroyed.
    /// 
    /// There are two ways to avoid these errors. First, and the way we recommend, is to avoid using this resource with principals that have implicit permissions. A second, error-prone option, is to grant explicit permissions (and `permissions_with_grant_option`) to "overwrite" a principal's implicit permissions, which you can then revoke with this resource. For more information, see [Implicit Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/implicit-permissions.html).
    /// 
    /// If the `principal` is also a data lake administrator, AWS grants implicit permissions that can cause errors using this resource. For example, AWS implicitly grants a `principal`/administrator `permissions` and `permissions_with_grant_option` of `ALL`, `ALTER`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT` on a table. If you use this resource to explicitly grant the `principal`/administrator `permissions` but _not_ `permissions_with_grant_option` of `ALL`, `ALTER`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT` on the table, this resource will read the implicit `permissions_with_grant_option` and attempt to revoke them when the resource is destroyed. Doing so will cause an `InvalidInputException: No permissions revoked` error because you cannot revoke implicit permissions _per se_. To workaround this problem, explicitly grant the `principal`/administrator `permissions` _and_ `permissions_with_grant_option`, which can then be revoked. Similarly, granting a `principal`/administrator permissions on a table with columns and providing `column_names`, will result in a `InvalidInputException: Permissions modification is invalid` error because you are narrowing the implicit permissions. Instead, set `wildcard` to `true` and remove the `column_names`.
    /// 
    /// ## Example Usage
    /// ### Grant Permissions For A Lake Formation S3 Resource
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.LakeFormation.Permissions("example", new()
    ///     {
    ///         Principal = aws_iam_role.Workflow_role.Arn,
    ///         PermissionDetails = new[]
    ///         {
    ///             "ALL",
    ///         },
    ///         DataLocation = new Aws.LakeFormation.Inputs.PermissionsDataLocationArgs
    ///         {
    ///             Arn = aws_lakeformation_resource.Example.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Grant Permissions For A Glue Catalog Database
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.LakeFormation.Permissions("example", new()
    ///     {
    ///         Principal = aws_iam_role.Workflow_role.Arn,
    ///         PermissionDetails = new[]
    ///         {
    ///             "CREATE_TABLE",
    ///             "ALTER",
    ///             "DROP",
    ///         },
    ///         Database = new Aws.LakeFormation.Inputs.PermissionsDatabaseArgs
    ///         {
    ///             Name = aws_glue_catalog_database.Example.Name,
    ///             CatalogId = "110376042874",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Grant Permissions Using Tag-Based Access Control
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.LakeFormation.Permissions("test", new()
    ///     {
    ///         Principal = aws_iam_role.Sales_role.Arn,
    ///         PermissionDetails = new[]
    ///         {
    ///             "CREATE_TABLE",
    ///             "ALTER",
    ///             "DROP",
    ///         },
    ///         LfTagPolicy = new Aws.LakeFormation.Inputs.PermissionsLfTagPolicyArgs
    ///         {
    ///             ResourceType = "DATABASE",
    ///             Expressions = new[]
    ///             {
    ///                 new Aws.LakeFormation.Inputs.PermissionsLfTagPolicyExpressionArgs
    ///                 {
    ///                     Key = "Team",
    ///                     Values = new[]
    ///                     {
    ///                         "Sales",
    ///                     },
    ///                 },
    ///                 new Aws.LakeFormation.Inputs.PermissionsLfTagPolicyExpressionArgs
    ///                 {
    ///                     Key = "Environment",
    ///                     Values = new[]
    ///                     {
    ///                         "Dev",
    ///                         "Production",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:lakeformation/permissions:Permissions")]
    public partial class Permissions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, it is the account ID of the caller.
        /// </summary>
        [Output("catalogId")]
        public Output<string?> CatalogId { get; private set; } = null!;

        /// <summary>
        /// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
        /// </summary>
        [Output("catalogResource")]
        public Output<bool?> CatalogResource { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a data location resource. Detailed below.
        /// </summary>
        [Output("dataLocation")]
        public Output<Outputs.PermissionsDataLocation> DataLocation { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a database resource. Detailed below.
        /// </summary>
        [Output("database")]
        public Output<Outputs.PermissionsDatabase> Database { get; private set; } = null!;

        /// <summary>
        /// Configuration block for an LF-tag resource. Detailed below.
        /// </summary>
        [Output("lfTag")]
        public Output<Outputs.PermissionsLfTag> LfTag { get; private set; } = null!;

        /// <summary>
        /// Configuration block for an LF-tag policy resource. Detailed below.
        /// </summary>
        [Output("lfTagPolicy")]
        public Output<Outputs.PermissionsLfTagPolicy> LfTagPolicy { get; private set; } = null!;

        /// <summary>
        /// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `ASSOCIATE`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> PermissionDetails { get; private set; } = null!;

        /// <summary>
        /// Subset of `permissions` which the principal can pass.
        /// </summary>
        [Output("permissionsWithGrantOptions")]
        public Output<ImmutableArray<string>> PermissionsWithGrantOptions { get; private set; } = null!;

        /// <summary>
        /// Principal to be granted the permissions on the resource. Supported principals include `IAM_ALLOWED_PRINCIPALS` (see Default Behavior and `IAMAllowedPrincipals` above), IAM roles, users, groups, SAML groups and users, QuickSight groups, OUs, and organizations as well as AWS account IDs for cross-account permissions. For more information, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a table resource. Detailed below.
        /// </summary>
        [Output("table")]
        public Output<Outputs.PermissionsTable> Table { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a table with columns resource. Detailed below.
        /// </summary>
        [Output("tableWithColumns")]
        public Output<Outputs.PermissionsTableWithColumns> TableWithColumns { get; private set; } = null!;


        /// <summary>
        /// Create a Permissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permissions(string name, PermissionsArgs args, CustomResourceOptions? options = null)
            : base("aws:lakeformation/permissions:Permissions", name, args ?? new PermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permissions(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
            : base("aws:lakeformation/permissions:Permissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permissions Get(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new Permissions(name, id, state, options);
        }
    }

    public sealed class PermissionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, it is the account ID of the caller.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
        /// </summary>
        [Input("catalogResource")]
        public Input<bool>? CatalogResource { get; set; }

        /// <summary>
        /// Configuration block for a data location resource. Detailed below.
        /// </summary>
        [Input("dataLocation")]
        public Input<Inputs.PermissionsDataLocationArgs>? DataLocation { get; set; }

        /// <summary>
        /// Configuration block for a database resource. Detailed below.
        /// </summary>
        [Input("database")]
        public Input<Inputs.PermissionsDatabaseArgs>? Database { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag resource. Detailed below.
        /// </summary>
        [Input("lfTag")]
        public Input<Inputs.PermissionsLfTagArgs>? LfTag { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag policy resource. Detailed below.
        /// </summary>
        [Input("lfTagPolicy")]
        public Input<Inputs.PermissionsLfTagPolicyArgs>? LfTagPolicy { get; set; }

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;

        /// <summary>
        /// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `ASSOCIATE`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        public InputList<string> PermissionDetails
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("permissionsWithGrantOptions")]
        private InputList<string>? _permissionsWithGrantOptions;

        /// <summary>
        /// Subset of `permissions` which the principal can pass.
        /// </summary>
        public InputList<string> PermissionsWithGrantOptions
        {
            get => _permissionsWithGrantOptions ?? (_permissionsWithGrantOptions = new InputList<string>());
            set => _permissionsWithGrantOptions = value;
        }

        /// <summary>
        /// Principal to be granted the permissions on the resource. Supported principals include `IAM_ALLOWED_PRINCIPALS` (see Default Behavior and `IAMAllowedPrincipals` above), IAM roles, users, groups, SAML groups and users, QuickSight groups, OUs, and organizations as well as AWS account IDs for cross-account permissions. For more information, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// Configuration block for a table resource. Detailed below.
        /// </summary>
        [Input("table")]
        public Input<Inputs.PermissionsTableArgs>? Table { get; set; }

        /// <summary>
        /// Configuration block for a table with columns resource. Detailed below.
        /// </summary>
        [Input("tableWithColumns")]
        public Input<Inputs.PermissionsTableWithColumnsArgs>? TableWithColumns { get; set; }

        public PermissionsArgs()
        {
        }
        public static new PermissionsArgs Empty => new PermissionsArgs();
    }

    public sealed class PermissionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, it is the account ID of the caller.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
        /// </summary>
        [Input("catalogResource")]
        public Input<bool>? CatalogResource { get; set; }

        /// <summary>
        /// Configuration block for a data location resource. Detailed below.
        /// </summary>
        [Input("dataLocation")]
        public Input<Inputs.PermissionsDataLocationGetArgs>? DataLocation { get; set; }

        /// <summary>
        /// Configuration block for a database resource. Detailed below.
        /// </summary>
        [Input("database")]
        public Input<Inputs.PermissionsDatabaseGetArgs>? Database { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag resource. Detailed below.
        /// </summary>
        [Input("lfTag")]
        public Input<Inputs.PermissionsLfTagGetArgs>? LfTag { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag policy resource. Detailed below.
        /// </summary>
        [Input("lfTagPolicy")]
        public Input<Inputs.PermissionsLfTagPolicyGetArgs>? LfTagPolicy { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// List of permissions granted to the principal. Valid values may include `ALL`, `ALTER`, `ASSOCIATE`, `CREATE_DATABASE`, `CREATE_TABLE`, `DATA_LOCATION_ACCESS`, `DELETE`, `DESCRIBE`, `DROP`, `INSERT`, and `SELECT`. For details on each permission, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        public InputList<string> PermissionDetails
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("permissionsWithGrantOptions")]
        private InputList<string>? _permissionsWithGrantOptions;

        /// <summary>
        /// Subset of `permissions` which the principal can pass.
        /// </summary>
        public InputList<string> PermissionsWithGrantOptions
        {
            get => _permissionsWithGrantOptions ?? (_permissionsWithGrantOptions = new InputList<string>());
            set => _permissionsWithGrantOptions = value;
        }

        /// <summary>
        /// Principal to be granted the permissions on the resource. Supported principals include `IAM_ALLOWED_PRINCIPALS` (see Default Behavior and `IAMAllowedPrincipals` above), IAM roles, users, groups, SAML groups and users, QuickSight groups, OUs, and organizations as well as AWS account IDs for cross-account permissions. For more information, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// Configuration block for a table resource. Detailed below.
        /// </summary>
        [Input("table")]
        public Input<Inputs.PermissionsTableGetArgs>? Table { get; set; }

        /// <summary>
        /// Configuration block for a table with columns resource. Detailed below.
        /// </summary>
        [Input("tableWithColumns")]
        public Input<Inputs.PermissionsTableWithColumnsGetArgs>? TableWithColumns { get; set; }

        public PermissionsState()
        {
        }
        public static new PermissionsState Empty => new PermissionsState();
    }
}
