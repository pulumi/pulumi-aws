// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LakeFormation
{
    [AwsResourceType("aws:lakeformation/permissions:Permissions")]
    public partial class Permissions : global::Pulumi.CustomResource
    {
        [Output("catalogId")]
        public Output<string?> CatalogId { get; private set; } = null!;

        [Output("catalogResource")]
        public Output<bool?> CatalogResource { get; private set; } = null!;

        [Output("dataLocation")]
        public Output<Outputs.PermissionsDataLocation> DataLocation { get; private set; } = null!;

        [Output("database")]
        public Output<Outputs.PermissionsDatabase> Database { get; private set; } = null!;

        [Output("lfTag")]
        public Output<Outputs.PermissionsLfTag> LfTag { get; private set; } = null!;

        [Output("lfTagPolicy")]
        public Output<Outputs.PermissionsLfTagPolicy> LfTagPolicy { get; private set; } = null!;

        [Output("permissions")]
        public Output<ImmutableArray<string>> PermissionDetails { get; private set; } = null!;

        [Output("permissionsWithGrantOptions")]
        public Output<ImmutableArray<string>> PermissionsWithGrantOptions { get; private set; } = null!;

        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        [Output("table")]
        public Output<Outputs.PermissionsTable> Table { get; private set; } = null!;

        [Output("tableWithColumns")]
        public Output<Outputs.PermissionsTableWithColumns> TableWithColumns { get; private set; } = null!;


        /// <summary>
        /// Create a Permissions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permissions(string name, PermissionsArgs args, CustomResourceOptions? options = null)
            : base("aws:lakeformation/permissions:Permissions", name, args ?? new PermissionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permissions(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
            : base("aws:lakeformation/permissions:Permissions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permissions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permissions Get(string name, Input<string> id, PermissionsState? state = null, CustomResourceOptions? options = null)
        {
            return new Permissions(name, id, state, options);
        }
    }

    public sealed class PermissionsArgs : global::Pulumi.ResourceArgs
    {
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("catalogResource")]
        public Input<bool>? CatalogResource { get; set; }

        [Input("dataLocation")]
        public Input<Inputs.PermissionsDataLocationArgs>? DataLocation { get; set; }

        [Input("database")]
        public Input<Inputs.PermissionsDatabaseArgs>? Database { get; set; }

        [Input("lfTag")]
        public Input<Inputs.PermissionsLfTagArgs>? LfTag { get; set; }

        [Input("lfTagPolicy")]
        public Input<Inputs.PermissionsLfTagPolicyArgs>? LfTagPolicy { get; set; }

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;
        public InputList<string> PermissionDetails
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("permissionsWithGrantOptions")]
        private InputList<string>? _permissionsWithGrantOptions;
        public InputList<string> PermissionsWithGrantOptions
        {
            get => _permissionsWithGrantOptions ?? (_permissionsWithGrantOptions = new InputList<string>());
            set => _permissionsWithGrantOptions = value;
        }

        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        [Input("table")]
        public Input<Inputs.PermissionsTableArgs>? Table { get; set; }

        [Input("tableWithColumns")]
        public Input<Inputs.PermissionsTableWithColumnsArgs>? TableWithColumns { get; set; }

        public PermissionsArgs()
        {
        }
        public static new PermissionsArgs Empty => new PermissionsArgs();
    }

    public sealed class PermissionsState : global::Pulumi.ResourceArgs
    {
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("catalogResource")]
        public Input<bool>? CatalogResource { get; set; }

        [Input("dataLocation")]
        public Input<Inputs.PermissionsDataLocationGetArgs>? DataLocation { get; set; }

        [Input("database")]
        public Input<Inputs.PermissionsDatabaseGetArgs>? Database { get; set; }

        [Input("lfTag")]
        public Input<Inputs.PermissionsLfTagGetArgs>? LfTag { get; set; }

        [Input("lfTagPolicy")]
        public Input<Inputs.PermissionsLfTagPolicyGetArgs>? LfTagPolicy { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;
        public InputList<string> PermissionDetails
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        [Input("permissionsWithGrantOptions")]
        private InputList<string>? _permissionsWithGrantOptions;
        public InputList<string> PermissionsWithGrantOptions
        {
            get => _permissionsWithGrantOptions ?? (_permissionsWithGrantOptions = new InputList<string>());
            set => _permissionsWithGrantOptions = value;
        }

        [Input("principal")]
        public Input<string>? Principal { get; set; }

        [Input("table")]
        public Input<Inputs.PermissionsTableGetArgs>? Table { get; set; }

        [Input("tableWithColumns")]
        public Input<Inputs.PermissionsTableWithColumnsGetArgs>? TableWithColumns { get; set; }

        public PermissionsState()
        {
        }
        public static new PermissionsState Empty => new PermissionsState();
    }
}
