// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LakeFormation
{
    public static class GetPermissions
    {
        /// <summary>
        /// Get permissions for a principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Permissions are granted to a principal, in a Data Catalog, relative to a Lake Formation resource, which includes the Data Catalog, databases, tables, LF-tags, and LF-tag policies. For more information, see [Security and Access Control to Metadata and Data in Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
        /// 
        /// &gt; **NOTE:** This data source deals with explicitly granted permissions. Lake Formation grants implicit permissions to data lake administrators, database creators, and table creators. For more information, see [Implicit Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/implicit-permissions.html).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Permissions For A Lake Formation S3 Resource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LakeFormation.GetPermissions.Invoke(new()
        ///     {
        ///         Principal = aws_iam_role.Workflow_role.Arn,
        ///         DataLocation = new Aws.LakeFormation.Inputs.GetPermissionsDataLocationInputArgs
        ///         {
        ///             Arn = aws_lakeformation_resource.Test.Arn,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Permissions For A Glue Catalog Database
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LakeFormation.GetPermissions.Invoke(new()
        ///     {
        ///         Principal = aws_iam_role.Workflow_role.Arn,
        ///         Database = new Aws.LakeFormation.Inputs.GetPermissionsDatabaseInputArgs
        ///         {
        ///             Name = aws_glue_catalog_database.Test.Name,
        ///             CatalogId = "110376042874",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Permissions For Tag-Based Access Control
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LakeFormation.GetPermissions.Invoke(new()
        ///     {
        ///         Principal = aws_iam_role.Workflow_role.Arn,
        ///         LfTagPolicy = new Aws.LakeFormation.Inputs.GetPermissionsLfTagPolicyInputArgs
        ///         {
        ///             ResourceType = "DATABASE",
        ///             Expressions = new[]
        ///             {
        ///                 new Aws.LakeFormation.Inputs.GetPermissionsLfTagPolicyExpressionInputArgs
        ///                 {
        ///                     Key = "Team",
        ///                     Values = new[]
        ///                     {
        ///                         "Sales",
        ///                     },
        ///                 },
        ///                 new Aws.LakeFormation.Inputs.GetPermissionsLfTagPolicyExpressionInputArgs
        ///                 {
        ///                     Key = "Environment",
        ///                     Values = new[]
        ///                     {
        ///                         "Dev",
        ///                         "Production",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPermissionsResult> InvokeAsync(GetPermissionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPermissionsResult>("aws:lakeformation/getPermissions:getPermissions", args ?? new GetPermissionsArgs(), options.WithDefaults());

        /// <summary>
        /// Get permissions for a principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Permissions are granted to a principal, in a Data Catalog, relative to a Lake Formation resource, which includes the Data Catalog, databases, tables, LF-tags, and LF-tag policies. For more information, see [Security and Access Control to Metadata and Data in Lake Formation](https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html).
        /// 
        /// &gt; **NOTE:** This data source deals with explicitly granted permissions. Lake Formation grants implicit permissions to data lake administrators, database creators, and table creators. For more information, see [Implicit Lake Formation Permissions](https://docs.aws.amazon.com/lake-formation/latest/dg/implicit-permissions.html).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Permissions For A Lake Formation S3 Resource
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LakeFormation.GetPermissions.Invoke(new()
        ///     {
        ///         Principal = aws_iam_role.Workflow_role.Arn,
        ///         DataLocation = new Aws.LakeFormation.Inputs.GetPermissionsDataLocationInputArgs
        ///         {
        ///             Arn = aws_lakeformation_resource.Test.Arn,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Permissions For A Glue Catalog Database
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LakeFormation.GetPermissions.Invoke(new()
        ///     {
        ///         Principal = aws_iam_role.Workflow_role.Arn,
        ///         Database = new Aws.LakeFormation.Inputs.GetPermissionsDatabaseInputArgs
        ///         {
        ///             Name = aws_glue_catalog_database.Test.Name,
        ///             CatalogId = "110376042874",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Permissions For Tag-Based Access Control
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LakeFormation.GetPermissions.Invoke(new()
        ///     {
        ///         Principal = aws_iam_role.Workflow_role.Arn,
        ///         LfTagPolicy = new Aws.LakeFormation.Inputs.GetPermissionsLfTagPolicyInputArgs
        ///         {
        ///             ResourceType = "DATABASE",
        ///             Expressions = new[]
        ///             {
        ///                 new Aws.LakeFormation.Inputs.GetPermissionsLfTagPolicyExpressionInputArgs
        ///                 {
        ///                     Key = "Team",
        ///                     Values = new[]
        ///                     {
        ///                         "Sales",
        ///                     },
        ///                 },
        ///                 new Aws.LakeFormation.Inputs.GetPermissionsLfTagPolicyExpressionInputArgs
        ///                 {
        ///                     Key = "Environment",
        ///                     Values = new[]
        ///                     {
        ///                         "Dev",
        ///                         "Production",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPermissionsResult> Invoke(GetPermissionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPermissionsResult>("aws:lakeformation/getPermissions:getPermissions", args ?? new GetPermissionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPermissionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [Input("catalogId")]
        public string? CatalogId { get; set; }

        /// <summary>
        /// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
        /// </summary>
        [Input("catalogResource")]
        public bool? CatalogResource { get; set; }

        /// <summary>
        /// Configuration block for a data location resource. Detailed below.
        /// </summary>
        [Input("dataLocation")]
        public Inputs.GetPermissionsDataLocationArgs? DataLocation { get; set; }

        /// <summary>
        /// Configuration block for a database resource. Detailed below.
        /// </summary>
        [Input("database")]
        public Inputs.GetPermissionsDatabaseArgs? Database { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag resource. Detailed below.
        /// </summary>
        [Input("lfTag")]
        public Inputs.GetPermissionsLfTagArgs? LfTag { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag policy resource. Detailed below.
        /// </summary>
        [Input("lfTagPolicy")]
        public Inputs.GetPermissionsLfTagPolicyArgs? LfTagPolicy { get; set; }

        /// <summary>
        /// Principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles.
        /// </summary>
        [Input("principal", required: true)]
        public string Principal { get; set; } = null!;

        /// <summary>
        /// Configuration block for a table resource. Detailed below.
        /// </summary>
        [Input("table")]
        public Inputs.GetPermissionsTableArgs? Table { get; set; }

        /// <summary>
        /// Configuration block for a table with columns resource. Detailed below.
        /// </summary>
        [Input("tableWithColumns")]
        public Inputs.GetPermissionsTableWithColumnsArgs? TableWithColumns { get; set; }

        public GetPermissionsArgs()
        {
        }
        public static new GetPermissionsArgs Empty => new GetPermissionsArgs();
    }

    public sealed class GetPermissionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Whether the permissions are to be granted for the Data Catalog. Defaults to `false`.
        /// </summary>
        [Input("catalogResource")]
        public Input<bool>? CatalogResource { get; set; }

        /// <summary>
        /// Configuration block for a data location resource. Detailed below.
        /// </summary>
        [Input("dataLocation")]
        public Input<Inputs.GetPermissionsDataLocationInputArgs>? DataLocation { get; set; }

        /// <summary>
        /// Configuration block for a database resource. Detailed below.
        /// </summary>
        [Input("database")]
        public Input<Inputs.GetPermissionsDatabaseInputArgs>? Database { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag resource. Detailed below.
        /// </summary>
        [Input("lfTag")]
        public Input<Inputs.GetPermissionsLfTagInputArgs>? LfTag { get; set; }

        /// <summary>
        /// Configuration block for an LF-tag policy resource. Detailed below.
        /// </summary>
        [Input("lfTagPolicy")]
        public Input<Inputs.GetPermissionsLfTagPolicyInputArgs>? LfTagPolicy { get; set; }

        /// <summary>
        /// Principal to be granted the permissions on the resource. Supported principals are IAM users or IAM roles.
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// Configuration block for a table resource. Detailed below.
        /// </summary>
        [Input("table")]
        public Input<Inputs.GetPermissionsTableInputArgs>? Table { get; set; }

        /// <summary>
        /// Configuration block for a table with columns resource. Detailed below.
        /// </summary>
        [Input("tableWithColumns")]
        public Input<Inputs.GetPermissionsTableWithColumnsInputArgs>? TableWithColumns { get; set; }

        public GetPermissionsInvokeArgs()
        {
        }
        public static new GetPermissionsInvokeArgs Empty => new GetPermissionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPermissionsResult
    {
        public readonly string? CatalogId;
        public readonly bool? CatalogResource;
        public readonly Outputs.GetPermissionsDataLocationResult DataLocation;
        public readonly Outputs.GetPermissionsDatabaseResult Database;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetPermissionsLfTagResult LfTag;
        public readonly Outputs.GetPermissionsLfTagPolicyResult LfTagPolicy;
        /// <summary>
        /// List of permissions granted to the principal. For details on permissions, see [Lake Formation Permissions Reference](https://docs.aws.amazon.com/lake-formation/latest/dg/lf-permissions-reference.html).
        /// </summary>
        public readonly ImmutableArray<string> Permissions;
        /// <summary>
        /// Subset of `permissions` which the principal can pass.
        /// </summary>
        public readonly ImmutableArray<string> PermissionsWithGrantOptions;
        public readonly string Principal;
        public readonly Outputs.GetPermissionsTableResult Table;
        public readonly Outputs.GetPermissionsTableWithColumnsResult TableWithColumns;

        [OutputConstructor]
        private GetPermissionsResult(
            string? catalogId,

            bool? catalogResource,

            Outputs.GetPermissionsDataLocationResult dataLocation,

            Outputs.GetPermissionsDatabaseResult database,

            string id,

            Outputs.GetPermissionsLfTagResult lfTag,

            Outputs.GetPermissionsLfTagPolicyResult lfTagPolicy,

            ImmutableArray<string> permissions,

            ImmutableArray<string> permissionsWithGrantOptions,

            string principal,

            Outputs.GetPermissionsTableResult table,

            Outputs.GetPermissionsTableWithColumnsResult tableWithColumns)
        {
            CatalogId = catalogId;
            CatalogResource = catalogResource;
            DataLocation = dataLocation;
            Database = database;
            Id = id;
            LfTag = lfTag;
            LfTagPolicy = lfTagPolicy;
            Permissions = permissions;
            PermissionsWithGrantOptions = permissionsWithGrantOptions;
            Principal = principal;
            Table = table;
            TableWithColumns = tableWithColumns;
        }
    }
}
