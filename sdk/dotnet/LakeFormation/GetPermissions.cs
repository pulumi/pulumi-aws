// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LakeFormation
{
    public static class GetPermissions
    {
        public static Task<GetPermissionsResult> InvokeAsync(GetPermissionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPermissionsResult>("aws:lakeformation/getPermissions:getPermissions", args ?? new GetPermissionsArgs(), options.WithDefaults());

        public static Output<GetPermissionsResult> Invoke(GetPermissionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPermissionsResult>("aws:lakeformation/getPermissions:getPermissions", args ?? new GetPermissionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPermissionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId")]
        public string? CatalogId { get; set; }

        [Input("catalogResource")]
        public bool? CatalogResource { get; set; }

        [Input("dataLocation")]
        public Inputs.GetPermissionsDataLocationArgs? DataLocation { get; set; }

        [Input("database")]
        public Inputs.GetPermissionsDatabaseArgs? Database { get; set; }

        [Input("lfTag")]
        public Inputs.GetPermissionsLfTagArgs? LfTag { get; set; }

        [Input("lfTagPolicy")]
        public Inputs.GetPermissionsLfTagPolicyArgs? LfTagPolicy { get; set; }

        [Input("principal", required: true)]
        public string Principal { get; set; } = null!;

        [Input("table")]
        public Inputs.GetPermissionsTableArgs? Table { get; set; }

        [Input("tableWithColumns")]
        public Inputs.GetPermissionsTableWithColumnsArgs? TableWithColumns { get; set; }

        public GetPermissionsArgs()
        {
        }
        public static new GetPermissionsArgs Empty => new GetPermissionsArgs();
    }

    public sealed class GetPermissionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("catalogResource")]
        public Input<bool>? CatalogResource { get; set; }

        [Input("dataLocation")]
        public Input<Inputs.GetPermissionsDataLocationInputArgs>? DataLocation { get; set; }

        [Input("database")]
        public Input<Inputs.GetPermissionsDatabaseInputArgs>? Database { get; set; }

        [Input("lfTag")]
        public Input<Inputs.GetPermissionsLfTagInputArgs>? LfTag { get; set; }

        [Input("lfTagPolicy")]
        public Input<Inputs.GetPermissionsLfTagPolicyInputArgs>? LfTagPolicy { get; set; }

        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        [Input("table")]
        public Input<Inputs.GetPermissionsTableInputArgs>? Table { get; set; }

        [Input("tableWithColumns")]
        public Input<Inputs.GetPermissionsTableWithColumnsInputArgs>? TableWithColumns { get; set; }

        public GetPermissionsInvokeArgs()
        {
        }
        public static new GetPermissionsInvokeArgs Empty => new GetPermissionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPermissionsResult
    {
        public readonly string? CatalogId;
        public readonly bool? CatalogResource;
        public readonly Outputs.GetPermissionsDataLocationResult DataLocation;
        public readonly Outputs.GetPermissionsDatabaseResult Database;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly Outputs.GetPermissionsLfTagResult LfTag;
        public readonly Outputs.GetPermissionsLfTagPolicyResult LfTagPolicy;
        public readonly ImmutableArray<string> Permissions;
        public readonly ImmutableArray<string> PermissionsWithGrantOptions;
        public readonly string Principal;
        public readonly Outputs.GetPermissionsTableResult Table;
        public readonly Outputs.GetPermissionsTableWithColumnsResult TableWithColumns;

        [OutputConstructor]
        private GetPermissionsResult(
            string? catalogId,

            bool? catalogResource,

            Outputs.GetPermissionsDataLocationResult dataLocation,

            Outputs.GetPermissionsDatabaseResult database,

            string id,

            Outputs.GetPermissionsLfTagResult lfTag,

            Outputs.GetPermissionsLfTagPolicyResult lfTagPolicy,

            ImmutableArray<string> permissions,

            ImmutableArray<string> permissionsWithGrantOptions,

            string principal,

            Outputs.GetPermissionsTableResult table,

            Outputs.GetPermissionsTableWithColumnsResult tableWithColumns)
        {
            CatalogId = catalogId;
            CatalogResource = catalogResource;
            DataLocation = dataLocation;
            Database = database;
            Id = id;
            LfTag = lfTag;
            LfTagPolicy = lfTagPolicy;
            Permissions = permissions;
            PermissionsWithGrantOptions = permissionsWithGrantOptions;
            Principal = principal;
            Table = table;
            TableWithColumns = tableWithColumns;
        }
    }
}
