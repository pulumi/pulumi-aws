// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LakeFormation
{
    /// <summary>
    /// Resource for managing an AWS Lake Formation Resource LF Tag.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.LakeFormation.ResourceLfTag("example", new()
    ///     {
    ///         Database = new Aws.LakeFormation.Inputs.ResourceLfTagDatabaseArgs
    ///         {
    ///             Name = exampleAwsGlueCatalogDatabase.Name,
    ///         },
    ///         LfTag = new Aws.LakeFormation.Inputs.ResourceLfTagLfTagArgs
    ///         {
    ///             Key = exampleAwsLakeformationLfTag.Key,
    ///             Value = "stowe",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// You cannot import this resource.
    /// </summary>
    [AwsResourceType("aws:lakeformation/resourceLfTag:ResourceLfTag")]
    public partial class ResourceLfTag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [Output("catalogId")]
        public Output<string?> CatalogId { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a database resource. See Database for more details.
        /// </summary>
        [Output("database")]
        public Output<Outputs.ResourceLfTagDatabase?> Database { get; private set; } = null!;

        /// <summary>
        /// Set of LF-tags to attach to the resource. See LF Tag for more details.
        /// 
        /// Exactly one of the following is required:
        /// </summary>
        [Output("lfTag")]
        public Output<Outputs.ResourceLfTagLfTag?> LfTag { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a table resource. See Table for more details.
        /// </summary>
        [Output("table")]
        public Output<Outputs.ResourceLfTagTable?> Table { get; private set; } = null!;

        /// <summary>
        /// Configuration block for a table with columns resource. See Table With Columns for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("tableWithColumns")]
        public Output<Outputs.ResourceLfTagTableWithColumns?> TableWithColumns { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ResourceLfTagTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceLfTag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceLfTag(string name, ResourceLfTagArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:lakeformation/resourceLfTag:ResourceLfTag", name, args ?? new ResourceLfTagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceLfTag(string name, Input<string> id, ResourceLfTagState? state = null, CustomResourceOptions? options = null)
            : base("aws:lakeformation/resourceLfTag:ResourceLfTag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceLfTag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceLfTag Get(string name, Input<string> id, ResourceLfTagState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceLfTag(name, id, state, options);
        }
    }

    public sealed class ResourceLfTagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Configuration block for a database resource. See Database for more details.
        /// </summary>
        [Input("database")]
        public Input<Inputs.ResourceLfTagDatabaseArgs>? Database { get; set; }

        /// <summary>
        /// Set of LF-tags to attach to the resource. See LF Tag for more details.
        /// 
        /// Exactly one of the following is required:
        /// </summary>
        [Input("lfTag")]
        public Input<Inputs.ResourceLfTagLfTagArgs>? LfTag { get; set; }

        /// <summary>
        /// Configuration block for a table resource. See Table for more details.
        /// </summary>
        [Input("table")]
        public Input<Inputs.ResourceLfTagTableArgs>? Table { get; set; }

        /// <summary>
        /// Configuration block for a table with columns resource. See Table With Columns for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("tableWithColumns")]
        public Input<Inputs.ResourceLfTagTableWithColumnsArgs>? TableWithColumns { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ResourceLfTagTimeoutsArgs>? Timeouts { get; set; }

        public ResourceLfTagArgs()
        {
        }
        public static new ResourceLfTagArgs Empty => new ResourceLfTagArgs();
    }

    public sealed class ResourceLfTagState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// Configuration block for a database resource. See Database for more details.
        /// </summary>
        [Input("database")]
        public Input<Inputs.ResourceLfTagDatabaseGetArgs>? Database { get; set; }

        /// <summary>
        /// Set of LF-tags to attach to the resource. See LF Tag for more details.
        /// 
        /// Exactly one of the following is required:
        /// </summary>
        [Input("lfTag")]
        public Input<Inputs.ResourceLfTagLfTagGetArgs>? LfTag { get; set; }

        /// <summary>
        /// Configuration block for a table resource. See Table for more details.
        /// </summary>
        [Input("table")]
        public Input<Inputs.ResourceLfTagTableGetArgs>? Table { get; set; }

        /// <summary>
        /// Configuration block for a table with columns resource. See Table With Columns for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("tableWithColumns")]
        public Input<Inputs.ResourceLfTagTableWithColumnsGetArgs>? TableWithColumns { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ResourceLfTagTimeoutsGetArgs>? Timeouts { get; set; }

        public ResourceLfTagState()
        {
        }
        public static new ResourceLfTagState Empty => new ResourceLfTagState();
    }
}
