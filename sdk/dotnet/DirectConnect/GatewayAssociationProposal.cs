// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectConnect
{
    /// <summary>
    /// Manages a Direct Connect Gateway Association Proposal, typically for enabling cross-account associations. For single account associations, see the `aws.directconnect.GatewayAssociation` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.DirectConnect.GatewayAssociationProposal("example", new Aws.DirectConnect.GatewayAssociationProposalArgs
    ///         {
    ///             DxGatewayId = aws_dx_gateway.Example.Id,
    ///             DxGatewayOwnerAccountId = aws_dx_gateway.Example.Owner_account_id,
    ///             AssociatedGatewayId = aws_vpn_gateway.Example.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Direct Connect Gateway Association Proposals can be imported using the proposal ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal example ac90e981-b718-4364-872d-65478c84fafe
    /// ```
    /// </summary>
    public partial class GatewayAssociationProposal : Pulumi.CustomResource
    {
        /// <summary>
        /// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
        /// </summary>
        [Output("allowedPrefixes")]
        public Output<ImmutableArray<string>> AllowedPrefixes { get; private set; } = null!;

        /// <summary>
        /// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
        /// </summary>
        [Output("associatedGatewayId")]
        public Output<string> AssociatedGatewayId { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
        /// </summary>
        [Output("associatedGatewayOwnerAccountId")]
        public Output<string> AssociatedGatewayOwnerAccountId { get; private set; } = null!;

        /// <summary>
        /// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
        /// </summary>
        [Output("associatedGatewayType")]
        public Output<string> AssociatedGatewayType { get; private set; } = null!;

        /// <summary>
        /// Direct Connect Gateway identifier.
        /// </summary>
        [Output("dxGatewayId")]
        public Output<string> DxGatewayId { get; private set; } = null!;

        /// <summary>
        /// AWS Account identifier of the Direct Connect Gateway's owner.
        /// </summary>
        [Output("dxGatewayOwnerAccountId")]
        public Output<string> DxGatewayOwnerAccountId { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayAssociationProposal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayAssociationProposal(string name, GatewayAssociationProposalArgs args, CustomResourceOptions? options = null)
            : base("aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", name, args ?? new GatewayAssociationProposalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayAssociationProposal(string name, Input<string> id, GatewayAssociationProposalState? state = null, CustomResourceOptions? options = null)
            : base("aws:directconnect/gatewayAssociationProposal:GatewayAssociationProposal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayAssociationProposal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayAssociationProposal Get(string name, Input<string> id, GatewayAssociationProposalState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayAssociationProposal(name, id, state, options);
        }
    }

    public sealed class GatewayAssociationProposalArgs : Pulumi.ResourceArgs
    {
        [Input("allowedPrefixes")]
        private InputList<string>? _allowedPrefixes;

        /// <summary>
        /// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
        /// </summary>
        public InputList<string> AllowedPrefixes
        {
            get => _allowedPrefixes ?? (_allowedPrefixes = new InputList<string>());
            set => _allowedPrefixes = value;
        }

        /// <summary>
        /// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
        /// </summary>
        [Input("associatedGatewayId", required: true)]
        public Input<string> AssociatedGatewayId { get; set; } = null!;

        /// <summary>
        /// Direct Connect Gateway identifier.
        /// </summary>
        [Input("dxGatewayId", required: true)]
        public Input<string> DxGatewayId { get; set; } = null!;

        /// <summary>
        /// AWS Account identifier of the Direct Connect Gateway's owner.
        /// </summary>
        [Input("dxGatewayOwnerAccountId", required: true)]
        public Input<string> DxGatewayOwnerAccountId { get; set; } = null!;

        public GatewayAssociationProposalArgs()
        {
        }
    }

    public sealed class GatewayAssociationProposalState : Pulumi.ResourceArgs
    {
        [Input("allowedPrefixes")]
        private InputList<string>? _allowedPrefixes;

        /// <summary>
        /// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
        /// </summary>
        public InputList<string> AllowedPrefixes
        {
            get => _allowedPrefixes ?? (_allowedPrefixes = new InputList<string>());
            set => _allowedPrefixes = value;
        }

        /// <summary>
        /// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
        /// </summary>
        [Input("associatedGatewayId")]
        public Input<string>? AssociatedGatewayId { get; set; }

        /// <summary>
        /// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
        /// </summary>
        [Input("associatedGatewayOwnerAccountId")]
        public Input<string>? AssociatedGatewayOwnerAccountId { get; set; }

        /// <summary>
        /// The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
        /// </summary>
        [Input("associatedGatewayType")]
        public Input<string>? AssociatedGatewayType { get; set; }

        /// <summary>
        /// Direct Connect Gateway identifier.
        /// </summary>
        [Input("dxGatewayId")]
        public Input<string>? DxGatewayId { get; set; }

        /// <summary>
        /// AWS Account identifier of the Direct Connect Gateway's owner.
        /// </summary>
        [Input("dxGatewayOwnerAccountId")]
        public Input<string>? DxGatewayOwnerAccountId { get; set; }

        public GatewayAssociationProposalState()
        {
        }
    }
}
