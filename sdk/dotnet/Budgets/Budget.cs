// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Budgets
{
    /// <summary>
    /// Provides a budgets budget resource. Budgets use the cost visualisation provided by Cost Explorer to show you the status of your budgets, to provide forecasts of your estimated costs, and to track your AWS usage, including your free tier usage.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/budgets_budget.html.markdown.
    /// </summary>
    public partial class Budget : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Whether this budget tracks monetary cost or usage.
        /// </summary>
        [Output("budgetType")]
        public Output<string> BudgetType { get; private set; } = null!;

        /// <summary>
        /// Map of CostFilters key/value pairs to apply to the budget.
        /// </summary>
        [Output("costFilters")]
        public Output<ImmutableDictionary<string, object>> CostFilters { get; private set; } = null!;

        /// <summary>
        /// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions..
        /// </summary>
        [Output("costTypes")]
        public Output<Outputs.BudgetCostTypes> CostTypes { get; private set; } = null!;

        /// <summary>
        /// The amount of cost or usage being measured for a budget.
        /// </summary>
        [Output("limitAmount")]
        public Output<string> LimitAmount { get; private set; } = null!;

        /// <summary>
        /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
        /// </summary>
        [Output("limitUnit")]
        public Output<string> LimitUnit { get; private set; } = null!;

        /// <summary>
        /// The name of a budget. Unique within accounts.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The prefix of the name of a budget. Unique within accounts.
        /// </summary>
        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.BudgetNotifications>> Notifications { get; private set; } = null!;

        /// <summary>
        /// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
        /// </summary>
        [Output("timePeriodEnd")]
        public Output<string?> TimePeriodEnd { get; private set; } = null!;

        /// <summary>
        /// The start of the time period covered by the budget. The start date must come before the end date. Format: `2017-01-01_12:00`.
        /// </summary>
        [Output("timePeriodStart")]
        public Output<string> TimePeriodStart { get; private set; } = null!;

        /// <summary>
        /// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`.
        /// </summary>
        [Output("timeUnit")]
        public Output<string> TimeUnit { get; private set; } = null!;


        /// <summary>
        /// Create a Budget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Budget(string name, BudgetArgs args, CustomResourceOptions? options = null)
            : base("aws:budgets/budget:Budget", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Budget(string name, Input<string> id, BudgetState? state = null, CustomResourceOptions? options = null)
            : base("aws:budgets/budget:Budget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Budget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Budget Get(string name, Input<string> id, BudgetState? state = null, CustomResourceOptions? options = null)
        {
            return new Budget(name, id, state, options);
        }
    }

    public sealed class BudgetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether this budget tracks monetary cost or usage.
        /// </summary>
        [Input("budgetType", required: true)]
        public Input<string> BudgetType { get; set; } = null!;

        [Input("costFilters")]
        private InputMap<object>? _costFilters;

        /// <summary>
        /// Map of CostFilters key/value pairs to apply to the budget.
        /// </summary>
        public InputMap<object> CostFilters
        {
            get => _costFilters ?? (_costFilters = new InputMap<object>());
            set => _costFilters = value;
        }

        /// <summary>
        /// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions..
        /// </summary>
        [Input("costTypes")]
        public Input<Inputs.BudgetCostTypesArgs>? CostTypes { get; set; }

        /// <summary>
        /// The amount of cost or usage being measured for a budget.
        /// </summary>
        [Input("limitAmount", required: true)]
        public Input<string> LimitAmount { get; set; } = null!;

        /// <summary>
        /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
        /// </summary>
        [Input("limitUnit", required: true)]
        public Input<string> LimitUnit { get; set; } = null!;

        /// <summary>
        /// The name of a budget. Unique within accounts.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The prefix of the name of a budget. Unique within accounts.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("notifications")]
        private InputList<Inputs.BudgetNotificationsArgs>? _notifications;

        /// <summary>
        /// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
        /// </summary>
        public InputList<Inputs.BudgetNotificationsArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.BudgetNotificationsArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
        /// </summary>
        [Input("timePeriodEnd")]
        public Input<string>? TimePeriodEnd { get; set; }

        /// <summary>
        /// The start of the time period covered by the budget. The start date must come before the end date. Format: `2017-01-01_12:00`.
        /// </summary>
        [Input("timePeriodStart", required: true)]
        public Input<string> TimePeriodStart { get; set; } = null!;

        /// <summary>
        /// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`.
        /// </summary>
        [Input("timeUnit", required: true)]
        public Input<string> TimeUnit { get; set; } = null!;

        public BudgetArgs()
        {
        }
    }

    public sealed class BudgetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether this budget tracks monetary cost or usage.
        /// </summary>
        [Input("budgetType")]
        public Input<string>? BudgetType { get; set; }

        [Input("costFilters")]
        private InputMap<object>? _costFilters;

        /// <summary>
        /// Map of CostFilters key/value pairs to apply to the budget.
        /// </summary>
        public InputMap<object> CostFilters
        {
            get => _costFilters ?? (_costFilters = new InputMap<object>());
            set => _costFilters = value;
        }

        /// <summary>
        /// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions..
        /// </summary>
        [Input("costTypes")]
        public Input<Inputs.BudgetCostTypesGetArgs>? CostTypes { get; set; }

        /// <summary>
        /// The amount of cost or usage being measured for a budget.
        /// </summary>
        [Input("limitAmount")]
        public Input<string>? LimitAmount { get; set; }

        /// <summary>
        /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
        /// </summary>
        [Input("limitUnit")]
        public Input<string>? LimitUnit { get; set; }

        /// <summary>
        /// The name of a budget. Unique within accounts.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The prefix of the name of a budget. Unique within accounts.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("notifications")]
        private InputList<Inputs.BudgetNotificationsGetArgs>? _notifications;

        /// <summary>
        /// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification
        /// </summary>
        public InputList<Inputs.BudgetNotificationsGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.BudgetNotificationsGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
        /// </summary>
        [Input("timePeriodEnd")]
        public Input<string>? TimePeriodEnd { get; set; }

        /// <summary>
        /// The start of the time period covered by the budget. The start date must come before the end date. Format: `2017-01-01_12:00`.
        /// </summary>
        [Input("timePeriodStart")]
        public Input<string>? TimePeriodStart { get; set; }

        /// <summary>
        /// The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`.
        /// </summary>
        [Input("timeUnit")]
        public Input<string>? TimeUnit { get; set; }

        public BudgetState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class BudgetCostTypesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean value whether to include credits in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeCredit")]
        public Input<bool>? IncludeCredit { get; set; }

        /// <summary>
        /// Specifies whether a budget includes discounts. Defaults to `true`
        /// </summary>
        [Input("includeDiscount")]
        public Input<bool>? IncludeDiscount { get; set; }

        /// <summary>
        /// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeOtherSubscription")]
        public Input<bool>? IncludeOtherSubscription { get; set; }

        /// <summary>
        /// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeRecurring")]
        public Input<bool>? IncludeRecurring { get; set; }

        /// <summary>
        /// A boolean value whether to include refunds in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeRefund")]
        public Input<bool>? IncludeRefund { get; set; }

        /// <summary>
        /// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeSubscription")]
        public Input<bool>? IncludeSubscription { get; set; }

        /// <summary>
        /// A boolean value whether to include support costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeSupport")]
        public Input<bool>? IncludeSupport { get; set; }

        /// <summary>
        /// A boolean value whether to include tax in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeTax")]
        public Input<bool>? IncludeTax { get; set; }

        /// <summary>
        /// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeUpfront")]
        public Input<bool>? IncludeUpfront { get; set; }

        /// <summary>
        /// Specifies whether a budget uses the amortized rate. Defaults to `false`
        /// </summary>
        [Input("useAmortized")]
        public Input<bool>? UseAmortized { get; set; }

        /// <summary>
        /// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
        /// </summary>
        [Input("useBlended")]
        public Input<bool>? UseBlended { get; set; }

        public BudgetCostTypesArgs()
        {
        }
    }

    public sealed class BudgetCostTypesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A boolean value whether to include credits in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeCredit")]
        public Input<bool>? IncludeCredit { get; set; }

        /// <summary>
        /// Specifies whether a budget includes discounts. Defaults to `true`
        /// </summary>
        [Input("includeDiscount")]
        public Input<bool>? IncludeDiscount { get; set; }

        /// <summary>
        /// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeOtherSubscription")]
        public Input<bool>? IncludeOtherSubscription { get; set; }

        /// <summary>
        /// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeRecurring")]
        public Input<bool>? IncludeRecurring { get; set; }

        /// <summary>
        /// A boolean value whether to include refunds in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeRefund")]
        public Input<bool>? IncludeRefund { get; set; }

        /// <summary>
        /// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeSubscription")]
        public Input<bool>? IncludeSubscription { get; set; }

        /// <summary>
        /// A boolean value whether to include support costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeSupport")]
        public Input<bool>? IncludeSupport { get; set; }

        /// <summary>
        /// A boolean value whether to include tax in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeTax")]
        public Input<bool>? IncludeTax { get; set; }

        /// <summary>
        /// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
        /// </summary>
        [Input("includeUpfront")]
        public Input<bool>? IncludeUpfront { get; set; }

        /// <summary>
        /// Specifies whether a budget uses the amortized rate. Defaults to `false`
        /// </summary>
        [Input("useAmortized")]
        public Input<bool>? UseAmortized { get; set; }

        /// <summary>
        /// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
        /// </summary>
        [Input("useBlended")]
        public Input<bool>? UseBlended { get; set; }

        public BudgetCostTypesGetArgs()
        {
        }
    }

    public sealed class BudgetNotificationsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
        /// </summary>
        [Input("comparisonOperator", required: true)]
        public Input<string> ComparisonOperator { get; set; } = null!;

        /// <summary>
        /// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
        /// </summary>
        [Input("notificationType", required: true)]
        public Input<string> NotificationType { get; set; } = null!;

        [Input("subscriberEmailAddresses")]
        private InputList<string>? _subscriberEmailAddresses;

        /// <summary>
        /// (Optional) E-Mail addresses to notify. Either this or `subscriber_sns_topic_arns` is required.
        /// </summary>
        public InputList<string> SubscriberEmailAddresses
        {
            get => _subscriberEmailAddresses ?? (_subscriberEmailAddresses = new InputList<string>());
            set => _subscriberEmailAddresses = value;
        }

        [Input("subscriberSnsTopicArns")]
        private InputList<string>? _subscriberSnsTopicArns;

        /// <summary>
        /// (Optional) SNS topics to notify. Either this or `subscriber_email_addresses` is required.
        /// </summary>
        public InputList<string> SubscriberSnsTopicArns
        {
            get => _subscriberSnsTopicArns ?? (_subscriberSnsTopicArns = new InputList<string>());
            set => _subscriberSnsTopicArns = value;
        }

        /// <summary>
        /// (Required) Threshold when the notification should be sent.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        /// <summary>
        /// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
        /// </summary>
        [Input("thresholdType", required: true)]
        public Input<string> ThresholdType { get; set; } = null!;

        public BudgetNotificationsArgs()
        {
        }
    }

    public sealed class BudgetNotificationsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
        /// </summary>
        [Input("comparisonOperator", required: true)]
        public Input<string> ComparisonOperator { get; set; } = null!;

        /// <summary>
        /// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
        /// </summary>
        [Input("notificationType", required: true)]
        public Input<string> NotificationType { get; set; } = null!;

        [Input("subscriberEmailAddresses")]
        private InputList<string>? _subscriberEmailAddresses;

        /// <summary>
        /// (Optional) E-Mail addresses to notify. Either this or `subscriber_sns_topic_arns` is required.
        /// </summary>
        public InputList<string> SubscriberEmailAddresses
        {
            get => _subscriberEmailAddresses ?? (_subscriberEmailAddresses = new InputList<string>());
            set => _subscriberEmailAddresses = value;
        }

        [Input("subscriberSnsTopicArns")]
        private InputList<string>? _subscriberSnsTopicArns;

        /// <summary>
        /// (Optional) SNS topics to notify. Either this or `subscriber_email_addresses` is required.
        /// </summary>
        public InputList<string> SubscriberSnsTopicArns
        {
            get => _subscriberSnsTopicArns ?? (_subscriberSnsTopicArns = new InputList<string>());
            set => _subscriberSnsTopicArns = value;
        }

        /// <summary>
        /// (Required) Threshold when the notification should be sent.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        /// <summary>
        /// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
        /// </summary>
        [Input("thresholdType", required: true)]
        public Input<string> ThresholdType { get; set; } = null!;

        public BudgetNotificationsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class BudgetCostTypes
    {
        /// <summary>
        /// A boolean value whether to include credits in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeCredit;
        /// <summary>
        /// Specifies whether a budget includes discounts. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeDiscount;
        /// <summary>
        /// A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeOtherSubscription;
        /// <summary>
        /// A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeRecurring;
        /// <summary>
        /// A boolean value whether to include refunds in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeRefund;
        /// <summary>
        /// A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeSubscription;
        /// <summary>
        /// A boolean value whether to include support costs in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeSupport;
        /// <summary>
        /// A boolean value whether to include tax in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeTax;
        /// <summary>
        /// A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
        /// </summary>
        public readonly bool? IncludeUpfront;
        /// <summary>
        /// Specifies whether a budget uses the amortized rate. Defaults to `false`
        /// </summary>
        public readonly bool? UseAmortized;
        /// <summary>
        /// A boolean value whether to use blended costs in the cost budget. Defaults to `false`
        /// </summary>
        public readonly bool? UseBlended;

        [OutputConstructor]
        private BudgetCostTypes(
            bool? includeCredit,
            bool? includeDiscount,
            bool? includeOtherSubscription,
            bool? includeRecurring,
            bool? includeRefund,
            bool? includeSubscription,
            bool? includeSupport,
            bool? includeTax,
            bool? includeUpfront,
            bool? useAmortized,
            bool? useBlended)
        {
            IncludeCredit = includeCredit;
            IncludeDiscount = includeDiscount;
            IncludeOtherSubscription = includeOtherSubscription;
            IncludeRecurring = includeRecurring;
            IncludeRefund = includeRefund;
            IncludeSubscription = includeSubscription;
            IncludeSupport = includeSupport;
            IncludeTax = includeTax;
            IncludeUpfront = includeUpfront;
            UseAmortized = useAmortized;
            UseBlended = useBlended;
        }
    }

    [OutputType]
    public sealed class BudgetNotifications
    {
        /// <summary>
        /// (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
        /// </summary>
        public readonly string ComparisonOperator;
        /// <summary>
        /// (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
        /// </summary>
        public readonly string NotificationType;
        /// <summary>
        /// (Optional) E-Mail addresses to notify. Either this or `subscriber_sns_topic_arns` is required.
        /// </summary>
        public readonly ImmutableArray<string> SubscriberEmailAddresses;
        /// <summary>
        /// (Optional) SNS topics to notify. Either this or `subscriber_email_addresses` is required.
        /// </summary>
        public readonly ImmutableArray<string> SubscriberSnsTopicArns;
        /// <summary>
        /// (Required) Threshold when the notification should be sent.
        /// </summary>
        public readonly double Threshold;
        /// <summary>
        /// (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
        /// </summary>
        public readonly string ThresholdType;

        [OutputConstructor]
        private BudgetNotifications(
            string comparisonOperator,
            string notificationType,
            ImmutableArray<string> subscriberEmailAddresses,
            ImmutableArray<string> subscriberSnsTopicArns,
            double threshold,
            string thresholdType)
        {
            ComparisonOperator = comparisonOperator;
            NotificationType = notificationType;
            SubscriberEmailAddresses = subscriberEmailAddresses;
            SubscriberSnsTopicArns = subscriberSnsTopicArns;
            Threshold = threshold;
            ThresholdType = thresholdType;
        }
    }
    }
}
