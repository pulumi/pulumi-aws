// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppFlow.Outputs
{

    [OutputType]
    public sealed class FlowTriggerConfigTriggerPropertiesScheduled
    {
        /// <summary>
        /// Whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run. Valid values are `Incremental` and `Complete`.
        /// </summary>
        public readonly string? DataPullMode;
        /// <summary>
        /// Date range for the records to import from the connector in the first flow run. Must be a valid RFC3339 timestamp.
        /// </summary>
        public readonly string? FirstExecutionFrom;
        /// <summary>
        /// Scheduled end time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        /// </summary>
        public readonly string? ScheduleEndTime;
        /// <summary>
        /// Scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)`.
        /// </summary>
        public readonly string ScheduleExpression;
        /// <summary>
        /// Optional offset that is added to the time interval for a schedule-triggered flow. Maximum value of 36000.
        /// </summary>
        public readonly int? ScheduleOffset;
        /// <summary>
        /// Scheduled start time for a schedule-triggered flow. Must be a valid RFC3339 timestamp.
        /// </summary>
        public readonly string? ScheduleStartTime;
        /// <summary>
        /// Time zone used when referring to the date and time of a scheduled-triggered flow, such as `America/New_York`.
        /// 
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.appflow.Flow;
        /// import com.pulumi.aws.appflow.FlowArgs;
        /// import com.pulumi.aws.appflow.inputs.FlowTriggerConfigArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         var example = new Flow("example", FlowArgs.builder()        
        ///             .triggerConfig(FlowTriggerConfigArgs.builder()
        ///                 .scheduled(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   example:
        ///     type: aws:appflow:Flow
        ///     properties:
        ///       triggerConfig:
        ///         scheduled:
        ///           - scheduleExpression: rate(1minutes)
        /// ```
        /// </summary>
        public readonly string? Timezone;

        [OutputConstructor]
        private FlowTriggerConfigTriggerPropertiesScheduled(
            string? dataPullMode,

            string? firstExecutionFrom,

            string? scheduleEndTime,

            string scheduleExpression,

            int? scheduleOffset,

            string? scheduleStartTime,

            string? timezone)
        {
            DataPullMode = dataPullMode;
            FirstExecutionFrom = firstExecutionFrom;
            ScheduleEndTime = scheduleEndTime;
            ScheduleExpression = scheduleExpression;
            ScheduleOffset = scheduleOffset;
            ScheduleStartTime = scheduleStartTime;
            Timezone = timezone;
        }
    }
}
