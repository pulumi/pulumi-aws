// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Pipes.Outputs
{

    [OutputType]
    public sealed class PipeTargetParametersRedshiftDataParameters
    {
        /// <summary>
        /// The name of the database. Required when authenticating using temporary credentials.
        /// </summary>
        public readonly string Database;
        /// <summary>
        /// The database user name. Required when authenticating using temporary credentials.
        /// </summary>
        public readonly string? DbUser;
        /// <summary>
        /// The name or ARN of the secret that enables access to the database. Required when authenticating using Secrets Manager.
        /// </summary>
        public readonly string? SecretManagerArn;
        /// <summary>
        /// List of SQL statements text to run, each of maximum length of 100,000.
        /// </summary>
        public readonly ImmutableArray<string> Sqls;
        /// <summary>
        /// The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
        /// </summary>
        public readonly string? StatementName;
        /// <summary>
        /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
        /// </summary>
        public readonly bool? WithEvent;

        [OutputConstructor]
        private PipeTargetParametersRedshiftDataParameters(
            string database,

            string? dbUser,

            string? secretManagerArn,

            ImmutableArray<string> sqls,

            string? statementName,

            bool? withEvent)
        {
            Database = database;
            DbUser = dbUser;
            SecretManagerArn = secretManagerArn;
            Sqls = sqls;
            StatementName = statementName;
            WithEvent = withEvent;
        }
    }
}
