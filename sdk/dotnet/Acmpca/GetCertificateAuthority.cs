// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Acmpca
{
    public static class GetCertificateAuthority
    {
        /// <summary>
        /// Get information on a AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Acmpca.GetCertificateAuthority.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCertificateAuthorityResult> InvokeAsync(GetCertificateAuthorityArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateAuthorityResult>("aws:acmpca/getCertificateAuthority:getCertificateAuthority", args ?? new GetCertificateAuthorityArgs(), options.WithDefaults());

        /// <summary>
        /// Get information on a AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority).
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Acmpca.GetCertificateAuthority.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCertificateAuthorityResult> Invoke(GetCertificateAuthorityInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateAuthorityResult>("aws:acmpca/getCertificateAuthority:getCertificateAuthority", args ?? new GetCertificateAuthorityInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateAuthorityArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value map of user-defined tags that are attached to the certificate authority.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetCertificateAuthorityArgs()
        {
        }
        public static new GetCertificateAuthorityArgs Empty => new GetCertificateAuthorityArgs();
    }

    public sealed class GetCertificateAuthorityInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of user-defined tags that are attached to the certificate authority.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetCertificateAuthorityInvokeArgs()
        {
        }
        public static new GetCertificateAuthorityInvokeArgs Empty => new GetCertificateAuthorityInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateAuthorityResult
    {
        public readonly string Arn;
        /// <summary>
        /// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
        /// </summary>
        public readonly string CertificateChain;
        /// <summary>
        /// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
        /// </summary>
        public readonly string CertificateSigningRequest;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyStorageSecurityStandard;
        /// <summary>
        /// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
        /// </summary>
        public readonly string NotAfter;
        /// <summary>
        /// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
        /// </summary>
        public readonly string NotBefore;
        /// <summary>
        /// Nested attribute containing revocation configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateAuthorityRevocationConfigurationResult> RevocationConfigurations;
        /// <summary>
        /// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
        /// </summary>
        public readonly string Serial;
        /// <summary>
        /// Status of the certificate authority.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Key-value map of user-defined tags that are attached to the certificate authority.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Type of the certificate authority.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly.
        /// </summary>
        public readonly string UsageMode;

        [OutputConstructor]
        private GetCertificateAuthorityResult(
            string arn,

            string certificate,

            string certificateChain,

            string certificateSigningRequest,

            string id,

            string keyStorageSecurityStandard,

            string notAfter,

            string notBefore,

            ImmutableArray<Outputs.GetCertificateAuthorityRevocationConfigurationResult> revocationConfigurations,

            string serial,

            string status,

            ImmutableDictionary<string, string> tags,

            string type,

            string usageMode)
        {
            Arn = arn;
            Certificate = certificate;
            CertificateChain = certificateChain;
            CertificateSigningRequest = certificateSigningRequest;
            Id = id;
            KeyStorageSecurityStandard = keyStorageSecurityStandard;
            NotAfter = notAfter;
            NotBefore = notBefore;
            RevocationConfigurations = revocationConfigurations;
            Serial = serial;
            Status = status;
            Tags = tags;
            Type = type;
            UsageMode = usageMode;
        }
    }
}
