// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Acmpca
{
    /// <summary>
    /// Provides a resource to issue a certificate using AWS Certificate Manager Private Certificate Authority (ACM PCA).
    /// 
    /// Certificates created using `aws.acmpca.Certificate` are not eligible for automatic renewal,
    /// and must be replaced instead.
    /// To issue a renewable certificate using an ACM PCA, create a `aws.acm.Certificate`
    /// with the parameter `certificate_authority_arn`.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// ACM PCA Certificates can be imported using their ARN, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:acmpca/certificate:Certificate cert arn:aws:acm-pca:eu-west-1:675225743824:certificate-authority/08319ede-83g9-1400-8f21-c7d12b2b6edb/certificate/a4e9c2aa4bcfab625g1b9136464cd3a
    /// ```
    /// </summary>
    [AwsResourceType("aws:acmpca/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
        /// </summary>
        [Output("apiPassthrough")]
        public Output<string?> ApiPassthrough { get; private set; } = null!;

        /// <summary>
        /// ARN of the certificate.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded certificate value.
        /// </summary>
        [Output("certificate")]
        public Output<string> CertificateDetails { get; private set; } = null!;

        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [Output("certificateAuthorityArn")]
        public Output<string> CertificateAuthorityArn { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
        /// </summary>
        [Output("certificateChain")]
        public Output<string> CertificateChain { get; private set; } = null!;

        /// <summary>
        /// Certificate Signing Request in PEM format.
        /// </summary>
        [Output("certificateSigningRequest")]
        public Output<string> CertificateSigningRequest { get; private set; } = null!;

        /// <summary>
        /// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
        /// </summary>
        [Output("signingAlgorithm")]
        public Output<string> SigningAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Template to use when issuing a certificate.
        /// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
        /// </summary>
        [Output("templateArn")]
        public Output<string?> TemplateArn { get; private set; } = null!;

        /// <summary>
        /// Configures end of the validity period for the certificate. See validity block below.
        /// </summary>
        [Output("validity")]
        public Output<Outputs.CertificateValidity> Validity { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("aws:acmpca/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("aws:acmpca/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
        /// </summary>
        [Input("apiPassthrough")]
        public Input<string>? ApiPassthrough { get; set; }

        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [Input("certificateAuthorityArn", required: true)]
        public Input<string> CertificateAuthorityArn { get; set; } = null!;

        /// <summary>
        /// Certificate Signing Request in PEM format.
        /// </summary>
        [Input("certificateSigningRequest", required: true)]
        public Input<string> CertificateSigningRequest { get; set; } = null!;

        /// <summary>
        /// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
        /// </summary>
        [Input("signingAlgorithm", required: true)]
        public Input<string> SigningAlgorithm { get; set; } = null!;

        /// <summary>
        /// Template to use when issuing a certificate.
        /// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
        /// </summary>
        [Input("templateArn")]
        public Input<string>? TemplateArn { get; set; }

        /// <summary>
        /// Configures end of the validity period for the certificate. See validity block below.
        /// </summary>
        [Input("validity", required: true)]
        public Input<Inputs.CertificateValidityArgs> Validity { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates
        /// </summary>
        [Input("apiPassthrough")]
        public Input<string>? ApiPassthrough { get; set; }

        /// <summary>
        /// ARN of the certificate.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// PEM-encoded certificate value.
        /// </summary>
        [Input("certificate")]
        public Input<string>? CertificateDetails { get; set; }

        /// <summary>
        /// ARN of the certificate authority.
        /// </summary>
        [Input("certificateAuthorityArn")]
        public Input<string>? CertificateAuthorityArn { get; set; }

        /// <summary>
        /// PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.
        /// </summary>
        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        /// <summary>
        /// Certificate Signing Request in PEM format.
        /// </summary>
        [Input("certificateSigningRequest")]
        public Input<string>? CertificateSigningRequest { get; set; }

        /// <summary>
        /// Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
        /// </summary>
        [Input("signingAlgorithm")]
        public Input<string>? SigningAlgorithm { get; set; }

        /// <summary>
        /// Template to use when issuing a certificate.
        /// See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
        /// </summary>
        [Input("templateArn")]
        public Input<string>? TemplateArn { get; set; }

        /// <summary>
        /// Configures end of the validity period for the certificate. See validity block below.
        /// </summary>
        [Input("validity")]
        public Input<Inputs.CertificateValidityGetArgs>? Validity { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
