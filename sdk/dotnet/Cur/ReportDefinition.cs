// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cur
{
    /// <summary>
    /// Manages Cost and Usage Report Definitions.
    /// 
    /// &gt; *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
    /// 
    /// &gt; *NOTE:* If AWS Organizations is enabled, only the master account can use this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleCurReportDefinition = new Aws.Cur.ReportDefinition("exampleCurReportDefinition", new Aws.Cur.ReportDefinitionArgs
    ///         {
    ///             AdditionalArtifacts = 
    ///             {
    ///                 "REDSHIFT",
    ///                 "QUICKSIGHT",
    ///             },
    ///             AdditionalSchemaElements = 
    ///             {
    ///                 "RESOURCES",
    ///             },
    ///             Compression = "GZIP",
    ///             Format = "textORcsv",
    ///             ReportName = "example-cur-report-definition",
    ///             S3Bucket = "example-bucket-name",
    ///             S3Region = "us-east-1",
    ///             TimeUnit = "HOURLY",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Report Definitions can be imported using the `report_name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:cur/reportDefinition:ReportDefinition example_cur_report_definition example-cur-report-definition
    /// ```
    /// </summary>
    public partial class ReportDefinition : Pulumi.CustomResource
    {
        /// <summary>
        /// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT, ATHENA. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be OVERWRITE_REPORT.
        /// </summary>
        [Output("additionalArtifacts")]
        public Output<ImmutableArray<string>> AdditionalArtifacts { get; private set; } = null!;

        /// <summary>
        /// A list of schema elements. Valid values are: RESOURCES.
        /// </summary>
        [Output("additionalSchemaElements")]
        public Output<ImmutableArray<string>> AdditionalSchemaElements { get; private set; } = null!;

        /// <summary>
        /// Compression format for report. Valid values are: GZIP, ZIP, Parquet. If Parquet is used, then format must also be Parquet.
        /// </summary>
        [Output("compression")]
        public Output<string> Compression { get; private set; } = null!;

        /// <summary>
        /// Format for report. Valid values are: textORcsv, Parquet. If Parquet is used, then Compression must also be Parquet.
        /// </summary>
        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        /// <summary>
        /// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
        /// </summary>
        [Output("refreshClosedReports")]
        public Output<bool?> RefreshClosedReports { get; private set; } = null!;

        /// <summary>
        /// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
        /// </summary>
        [Output("reportName")]
        public Output<string> ReportName { get; private set; } = null!;

        /// <summary>
        /// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: CREATE_NEW_REPORT, OVERWRITE_REPORT
        /// </summary>
        [Output("reportVersioning")]
        public Output<string?> ReportVersioning { get; private set; } = null!;

        /// <summary>
        /// Name of the existing S3 bucket to hold generated reports.
        /// </summary>
        [Output("s3Bucket")]
        public Output<string> S3Bucket { get; private set; } = null!;

        /// <summary>
        /// Report path prefix. Limited to 256 characters.
        /// </summary>
        [Output("s3Prefix")]
        public Output<string?> S3Prefix { get; private set; } = null!;

        /// <summary>
        /// Region of the existing S3 bucket to hold generated reports.
        /// </summary>
        [Output("s3Region")]
        public Output<string> S3Region { get; private set; } = null!;

        /// <summary>
        /// The frequency on which report data are measured and displayed.  Valid values are: HOURLY, DAILY.
        /// </summary>
        [Output("timeUnit")]
        public Output<string> TimeUnit { get; private set; } = null!;


        /// <summary>
        /// Create a ReportDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReportDefinition(string name, ReportDefinitionArgs args, CustomResourceOptions? options = null)
            : base("aws:cur/reportDefinition:ReportDefinition", name, args ?? new ReportDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReportDefinition(string name, Input<string> id, ReportDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("aws:cur/reportDefinition:ReportDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReportDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReportDefinition Get(string name, Input<string> id, ReportDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new ReportDefinition(name, id, state, options);
        }
    }

    public sealed class ReportDefinitionArgs : Pulumi.ResourceArgs
    {
        [Input("additionalArtifacts")]
        private InputList<string>? _additionalArtifacts;

        /// <summary>
        /// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT, ATHENA. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be OVERWRITE_REPORT.
        /// </summary>
        public InputList<string> AdditionalArtifacts
        {
            get => _additionalArtifacts ?? (_additionalArtifacts = new InputList<string>());
            set => _additionalArtifacts = value;
        }

        [Input("additionalSchemaElements", required: true)]
        private InputList<string>? _additionalSchemaElements;

        /// <summary>
        /// A list of schema elements. Valid values are: RESOURCES.
        /// </summary>
        public InputList<string> AdditionalSchemaElements
        {
            get => _additionalSchemaElements ?? (_additionalSchemaElements = new InputList<string>());
            set => _additionalSchemaElements = value;
        }

        /// <summary>
        /// Compression format for report. Valid values are: GZIP, ZIP, Parquet. If Parquet is used, then format must also be Parquet.
        /// </summary>
        [Input("compression", required: true)]
        public Input<string> Compression { get; set; } = null!;

        /// <summary>
        /// Format for report. Valid values are: textORcsv, Parquet. If Parquet is used, then Compression must also be Parquet.
        /// </summary>
        [Input("format", required: true)]
        public Input<string> Format { get; set; } = null!;

        /// <summary>
        /// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
        /// </summary>
        [Input("refreshClosedReports")]
        public Input<bool>? RefreshClosedReports { get; set; }

        /// <summary>
        /// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
        /// </summary>
        [Input("reportName", required: true)]
        public Input<string> ReportName { get; set; } = null!;

        /// <summary>
        /// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: CREATE_NEW_REPORT, OVERWRITE_REPORT
        /// </summary>
        [Input("reportVersioning")]
        public Input<string>? ReportVersioning { get; set; }

        /// <summary>
        /// Name of the existing S3 bucket to hold generated reports.
        /// </summary>
        [Input("s3Bucket", required: true)]
        public Input<string> S3Bucket { get; set; } = null!;

        /// <summary>
        /// Report path prefix. Limited to 256 characters.
        /// </summary>
        [Input("s3Prefix")]
        public Input<string>? S3Prefix { get; set; }

        /// <summary>
        /// Region of the existing S3 bucket to hold generated reports.
        /// </summary>
        [Input("s3Region", required: true)]
        public Input<string> S3Region { get; set; } = null!;

        /// <summary>
        /// The frequency on which report data are measured and displayed.  Valid values are: HOURLY, DAILY.
        /// </summary>
        [Input("timeUnit", required: true)]
        public Input<string> TimeUnit { get; set; } = null!;

        public ReportDefinitionArgs()
        {
        }
    }

    public sealed class ReportDefinitionState : Pulumi.ResourceArgs
    {
        [Input("additionalArtifacts")]
        private InputList<string>? _additionalArtifacts;

        /// <summary>
        /// A list of additional artifacts. Valid values are: REDSHIFT, QUICKSIGHT, ATHENA. When ATHENA exists within additional_artifacts, no other artifact type can be declared and report_versioning must be OVERWRITE_REPORT.
        /// </summary>
        public InputList<string> AdditionalArtifacts
        {
            get => _additionalArtifacts ?? (_additionalArtifacts = new InputList<string>());
            set => _additionalArtifacts = value;
        }

        [Input("additionalSchemaElements")]
        private InputList<string>? _additionalSchemaElements;

        /// <summary>
        /// A list of schema elements. Valid values are: RESOURCES.
        /// </summary>
        public InputList<string> AdditionalSchemaElements
        {
            get => _additionalSchemaElements ?? (_additionalSchemaElements = new InputList<string>());
            set => _additionalSchemaElements = value;
        }

        /// <summary>
        /// Compression format for report. Valid values are: GZIP, ZIP, Parquet. If Parquet is used, then format must also be Parquet.
        /// </summary>
        [Input("compression")]
        public Input<string>? Compression { get; set; }

        /// <summary>
        /// Format for report. Valid values are: textORcsv, Parquet. If Parquet is used, then Compression must also be Parquet.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Set to true to update your reports after they have been finalized if AWS detects charges related to previous months.
        /// </summary>
        [Input("refreshClosedReports")]
        public Input<bool>? RefreshClosedReports { get; set; }

        /// <summary>
        /// Unique name for the report. Must start with a number/letter and is case sensitive. Limited to 256 characters.
        /// </summary>
        [Input("reportName")]
        public Input<string>? ReportName { get; set; }

        /// <summary>
        /// Overwrite the previous version of each report or to deliver the report in addition to the previous versions. Valid values are: CREATE_NEW_REPORT, OVERWRITE_REPORT
        /// </summary>
        [Input("reportVersioning")]
        public Input<string>? ReportVersioning { get; set; }

        /// <summary>
        /// Name of the existing S3 bucket to hold generated reports.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// Report path prefix. Limited to 256 characters.
        /// </summary>
        [Input("s3Prefix")]
        public Input<string>? S3Prefix { get; set; }

        /// <summary>
        /// Region of the existing S3 bucket to hold generated reports.
        /// </summary>
        [Input("s3Region")]
        public Input<string>? S3Region { get; set; }

        /// <summary>
        /// The frequency on which report data are measured and displayed.  Valid values are: HOURLY, DAILY.
        /// </summary>
        [Input("timeUnit")]
        public Input<string>? TimeUnit { get; set; }

        public ReportDefinitionState()
        {
        }
    }
}
