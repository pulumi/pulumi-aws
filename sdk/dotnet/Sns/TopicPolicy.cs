// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sns
{
    /// <summary>
    /// Provides an SNS topic policy resource
    /// 
    /// &gt; **NOTE:** If a Principal is specified as just an AWS account ID rather than an ARN, AWS silently converts it to the ARN for the root user, causing future deployments to differ. To avoid this problem, just specify the full ARN, e.g. `arn:aws:iam::123456789012:root`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Sns.Topic("test");
    /// 
    ///     var snsTopicPolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         PolicyId = "__default_policy_ID",
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "SNS:Subscribe",
    ///                     "SNS:SetTopicAttributes",
    ///                     "SNS:RemovePermission",
    ///                     "SNS:Receive",
    ///                     "SNS:Publish",
    ///                     "SNS:ListSubscriptionsByTopic",
    ///                     "SNS:GetTopicAttributes",
    ///                     "SNS:DeleteTopic",
    ///                     "SNS:AddPermission",
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "AWS:SourceOwner",
    ///                         Values = new[]
    ///                         {
    ///                             @var.Account_id,
    ///                         },
    ///                     },
    ///                 },
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "*",
    ///                         },
    ///                     },
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     test.Arn,
    ///                 },
    ///                 Sid = "__default_statement_ID",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @default = new Aws.Sns.TopicPolicy("default", new()
    ///     {
    ///         Arn = test.Arn,
    ///         Policy = snsTopicPolicy.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_sns_topic_policy.user_updates
    /// 
    ///  id = "arn:aws:sns:us-west-2:0123456789012:my-topic" } Using `pulumi import`, import SNS Topic Policy using the topic ARN. For exampleconsole % pulumi import aws_sns_topic_policy.user_updates arn:aws:sns:us-west-2:0123456789012:my-topic
    /// </summary>
    [AwsResourceType("aws:sns/topicPolicy:TopicPolicy")]
    public partial class TopicPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the SNS topic
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The AWS Account ID of the SNS topic owner
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// The fully-formed AWS policy as JSON.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;


        /// <summary>
        /// Create a TopicPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TopicPolicy(string name, TopicPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:sns/topicPolicy:TopicPolicy", name, args ?? new TopicPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TopicPolicy(string name, Input<string> id, TopicPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:sns/topicPolicy:TopicPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TopicPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TopicPolicy Get(string name, Input<string> id, TopicPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new TopicPolicy(name, id, state, options);
        }
    }

    public sealed class TopicPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the SNS topic
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        /// <summary>
        /// The fully-formed AWS policy as JSON.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        public TopicPolicyArgs()
        {
        }
        public static new TopicPolicyArgs Empty => new TopicPolicyArgs();
    }

    public sealed class TopicPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the SNS topic
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The AWS Account ID of the SNS topic owner
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// The fully-formed AWS policy as JSON.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        public TopicPolicyState()
        {
        }
        public static new TopicPolicyState Empty => new TopicPolicyState();
    }
}
