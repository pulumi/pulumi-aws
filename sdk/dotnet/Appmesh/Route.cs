// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppMesh
{
    /// <summary>
    /// Provides an AWS App Mesh route resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appmesh_route.html.markdown.
    /// </summary>
    public partial class Route : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the route.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The creation date of the route.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// The last update date of the route.
        /// </summary>
        [Output("lastUpdatedDate")]
        public Output<string> LastUpdatedDate { get; private set; } = null!;

        /// <summary>
        /// The name of the service mesh in which to create the route.
        /// </summary>
        [Output("meshName")]
        public Output<string> MeshName { get; private set; } = null!;

        /// <summary>
        /// The name to use for the route.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The route specification to apply.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.RouteSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of the virtual router in which to create the route.
        /// </summary>
        [Output("virtualRouterName")]
        public Output<string> VirtualRouterName { get; private set; } = null!;


        /// <summary>
        /// Create a Route resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Route(string name, RouteArgs args, CustomResourceOptions? options = null)
            : base("aws:appmesh/route:Route", name, args, MakeResourceOptions(options, ""))
        {
        }

        private Route(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
            : base("aws:appmesh/route:Route", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Route resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Route Get(string name, Input<string> id, RouteState? state = null, CustomResourceOptions? options = null)
        {
            return new Route(name, id, state, options);
        }
    }

    public sealed class RouteArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the service mesh in which to create the route.
        /// </summary>
        [Input("meshName", required: true)]
        public Input<string> MeshName { get; set; } = null!;

        /// <summary>
        /// The name to use for the route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The route specification to apply.
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.RouteSpecArgs> Spec { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the virtual router in which to create the route.
        /// </summary>
        [Input("virtualRouterName", required: true)]
        public Input<string> VirtualRouterName { get; set; } = null!;

        public RouteArgs()
        {
        }
    }

    public sealed class RouteState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the route.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The creation date of the route.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// The last update date of the route.
        /// </summary>
        [Input("lastUpdatedDate")]
        public Input<string>? LastUpdatedDate { get; set; }

        /// <summary>
        /// The name of the service mesh in which to create the route.
        /// </summary>
        [Input("meshName")]
        public Input<string>? MeshName { get; set; }

        /// <summary>
        /// The name to use for the route.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The route specification to apply.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.RouteSpecGetArgs>? Spec { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the virtual router in which to create the route.
        /// </summary>
        [Input("virtualRouterName")]
        public Input<string>? VirtualRouterName { get; set; }

        public RouteState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RouteSpecArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The HTTP routing information for the route.
        /// </summary>
        [Input("httpRoute")]
        public Input<RouteSpecHttpRouteArgs>? HttpRoute { get; set; }

        /// <summary>
        /// The TCP routing information for the route.
        /// </summary>
        [Input("tcpRoute")]
        public Input<RouteSpecTcpRouteArgs>? TcpRoute { get; set; }

        public RouteSpecArgs()
        {
        }
    }

    public sealed class RouteSpecGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The HTTP routing information for the route.
        /// </summary>
        [Input("httpRoute")]
        public Input<RouteSpecHttpRouteGetArgs>? HttpRoute { get; set; }

        /// <summary>
        /// The TCP routing information for the route.
        /// </summary>
        [Input("tcpRoute")]
        public Input<RouteSpecTcpRouteGetArgs>? TcpRoute { get; set; }

        public RouteSpecGetArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteActionArgs : Pulumi.ResourceArgs
    {
        [Input("weightedTargets", required: true)]
        private InputList<RouteSpecHttpRouteActionWeightedTargetsArgs>? _weightedTargets;

        /// <summary>
        /// The targets that traffic is routed to when a request matches the route.
        /// You can specify one or more targets and their relative weights with which to distribute traffic.
        /// </summary>
        public InputList<RouteSpecHttpRouteActionWeightedTargetsArgs> WeightedTargets
        {
            get => _weightedTargets ?? (_weightedTargets = new InputList<RouteSpecHttpRouteActionWeightedTargetsArgs>());
            set => _weightedTargets = value;
        }

        public RouteSpecHttpRouteActionArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("weightedTargets", required: true)]
        private InputList<RouteSpecHttpRouteActionWeightedTargetsGetArgs>? _weightedTargets;

        /// <summary>
        /// The targets that traffic is routed to when a request matches the route.
        /// You can specify one or more targets and their relative weights with which to distribute traffic.
        /// </summary>
        public InputList<RouteSpecHttpRouteActionWeightedTargetsGetArgs> WeightedTargets
        {
            get => _weightedTargets ?? (_weightedTargets = new InputList<RouteSpecHttpRouteActionWeightedTargetsGetArgs>());
            set => _weightedTargets = value;
        }

        public RouteSpecHttpRouteActionGetArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteActionWeightedTargetsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The virtual node to associate with the weighted target.
        /// </summary>
        [Input("virtualNode", required: true)]
        public Input<string> VirtualNode { get; set; } = null!;

        /// <summary>
        /// The relative weight of the weighted target. An integer between 0 and 100.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public RouteSpecHttpRouteActionWeightedTargetsArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteActionWeightedTargetsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The virtual node to associate with the weighted target.
        /// </summary>
        [Input("virtualNode", required: true)]
        public Input<string> VirtualNode { get; set; } = null!;

        /// <summary>
        /// The relative weight of the weighted target. An integer between 0 and 100.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public RouteSpecHttpRouteActionWeightedTargetsGetArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take if a match is determined.
        /// </summary>
        [Input("action", required: true)]
        public Input<RouteSpecHttpRouteActionArgs> Action { get; set; } = null!;

        /// <summary>
        /// The criteria for determining an HTTP request match.
        /// </summary>
        [Input("match", required: true)]
        public Input<RouteSpecHttpRouteMatchArgs> Match { get; set; } = null!;

        public RouteSpecHttpRouteArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take if a match is determined.
        /// </summary>
        [Input("action", required: true)]
        public Input<RouteSpecHttpRouteActionGetArgs> Action { get; set; } = null!;

        /// <summary>
        /// The criteria for determining an HTTP request match.
        /// </summary>
        [Input("match", required: true)]
        public Input<RouteSpecHttpRouteMatchGetArgs> Match { get; set; } = null!;

        public RouteSpecHttpRouteGetArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteMatchArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the path with which to match requests.
        /// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public RouteSpecHttpRouteMatchArgs()
        {
        }
    }

    public sealed class RouteSpecHttpRouteMatchGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the path with which to match requests.
        /// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public RouteSpecHttpRouteMatchGetArgs()
        {
        }
    }

    public sealed class RouteSpecTcpRouteActionArgs : Pulumi.ResourceArgs
    {
        [Input("weightedTargets", required: true)]
        private InputList<RouteSpecTcpRouteActionWeightedTargetsArgs>? _weightedTargets;

        /// <summary>
        /// The targets that traffic is routed to when a request matches the route.
        /// You can specify one or more targets and their relative weights with which to distribute traffic.
        /// </summary>
        public InputList<RouteSpecTcpRouteActionWeightedTargetsArgs> WeightedTargets
        {
            get => _weightedTargets ?? (_weightedTargets = new InputList<RouteSpecTcpRouteActionWeightedTargetsArgs>());
            set => _weightedTargets = value;
        }

        public RouteSpecTcpRouteActionArgs()
        {
        }
    }

    public sealed class RouteSpecTcpRouteActionGetArgs : Pulumi.ResourceArgs
    {
        [Input("weightedTargets", required: true)]
        private InputList<RouteSpecTcpRouteActionWeightedTargetsGetArgs>? _weightedTargets;

        /// <summary>
        /// The targets that traffic is routed to when a request matches the route.
        /// You can specify one or more targets and their relative weights with which to distribute traffic.
        /// </summary>
        public InputList<RouteSpecTcpRouteActionWeightedTargetsGetArgs> WeightedTargets
        {
            get => _weightedTargets ?? (_weightedTargets = new InputList<RouteSpecTcpRouteActionWeightedTargetsGetArgs>());
            set => _weightedTargets = value;
        }

        public RouteSpecTcpRouteActionGetArgs()
        {
        }
    }

    public sealed class RouteSpecTcpRouteActionWeightedTargetsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The virtual node to associate with the weighted target.
        /// </summary>
        [Input("virtualNode", required: true)]
        public Input<string> VirtualNode { get; set; } = null!;

        /// <summary>
        /// The relative weight of the weighted target. An integer between 0 and 100.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public RouteSpecTcpRouteActionWeightedTargetsArgs()
        {
        }
    }

    public sealed class RouteSpecTcpRouteActionWeightedTargetsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The virtual node to associate with the weighted target.
        /// </summary>
        [Input("virtualNode", required: true)]
        public Input<string> VirtualNode { get; set; } = null!;

        /// <summary>
        /// The relative weight of the weighted target. An integer between 0 and 100.
        /// </summary>
        [Input("weight", required: true)]
        public Input<int> Weight { get; set; } = null!;

        public RouteSpecTcpRouteActionWeightedTargetsGetArgs()
        {
        }
    }

    public sealed class RouteSpecTcpRouteArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take if a match is determined.
        /// </summary>
        [Input("action", required: true)]
        public Input<RouteSpecTcpRouteActionArgs> Action { get; set; } = null!;

        public RouteSpecTcpRouteArgs()
        {
        }
    }

    public sealed class RouteSpecTcpRouteGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take if a match is determined.
        /// </summary>
        [Input("action", required: true)]
        public Input<RouteSpecTcpRouteActionGetArgs> Action { get; set; } = null!;

        public RouteSpecTcpRouteGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RouteSpec
    {
        /// <summary>
        /// The HTTP routing information for the route.
        /// </summary>
        public readonly RouteSpecHttpRoute? HttpRoute;
        /// <summary>
        /// The TCP routing information for the route.
        /// </summary>
        public readonly RouteSpecTcpRoute? TcpRoute;

        [OutputConstructor]
        private RouteSpec(
            RouteSpecHttpRoute? httpRoute,
            RouteSpecTcpRoute? tcpRoute)
        {
            HttpRoute = httpRoute;
            TcpRoute = tcpRoute;
        }
    }

    [OutputType]
    public sealed class RouteSpecHttpRoute
    {
        /// <summary>
        /// The action to take if a match is determined.
        /// </summary>
        public readonly RouteSpecHttpRouteAction Action;
        /// <summary>
        /// The criteria for determining an HTTP request match.
        /// </summary>
        public readonly RouteSpecHttpRouteMatch Match;

        [OutputConstructor]
        private RouteSpecHttpRoute(
            RouteSpecHttpRouteAction action,
            RouteSpecHttpRouteMatch match)
        {
            Action = action;
            Match = match;
        }
    }

    [OutputType]
    public sealed class RouteSpecHttpRouteAction
    {
        /// <summary>
        /// The targets that traffic is routed to when a request matches the route.
        /// You can specify one or more targets and their relative weights with which to distribute traffic.
        /// </summary>
        public readonly ImmutableArray<RouteSpecHttpRouteActionWeightedTargets> WeightedTargets;

        [OutputConstructor]
        private RouteSpecHttpRouteAction(ImmutableArray<RouteSpecHttpRouteActionWeightedTargets> weightedTargets)
        {
            WeightedTargets = weightedTargets;
        }
    }

    [OutputType]
    public sealed class RouteSpecHttpRouteActionWeightedTargets
    {
        /// <summary>
        /// The virtual node to associate with the weighted target.
        /// </summary>
        public readonly string VirtualNode;
        /// <summary>
        /// The relative weight of the weighted target. An integer between 0 and 100.
        /// </summary>
        public readonly int Weight;

        [OutputConstructor]
        private RouteSpecHttpRouteActionWeightedTargets(
            string virtualNode,
            int weight)
        {
            VirtualNode = virtualNode;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class RouteSpecHttpRouteMatch
    {
        /// <summary>
        /// Specifies the path with which to match requests.
        /// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        /// </summary>
        public readonly string Prefix;

        [OutputConstructor]
        private RouteSpecHttpRouteMatch(string prefix)
        {
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class RouteSpecTcpRoute
    {
        /// <summary>
        /// The action to take if a match is determined.
        /// </summary>
        public readonly RouteSpecTcpRouteAction Action;

        [OutputConstructor]
        private RouteSpecTcpRoute(RouteSpecTcpRouteAction action)
        {
            Action = action;
        }
    }

    [OutputType]
    public sealed class RouteSpecTcpRouteAction
    {
        /// <summary>
        /// The targets that traffic is routed to when a request matches the route.
        /// You can specify one or more targets and their relative weights with which to distribute traffic.
        /// </summary>
        public readonly ImmutableArray<RouteSpecTcpRouteActionWeightedTargets> WeightedTargets;

        [OutputConstructor]
        private RouteSpecTcpRouteAction(ImmutableArray<RouteSpecTcpRouteActionWeightedTargets> weightedTargets)
        {
            WeightedTargets = weightedTargets;
        }
    }

    [OutputType]
    public sealed class RouteSpecTcpRouteActionWeightedTargets
    {
        /// <summary>
        /// The virtual node to associate with the weighted target.
        /// </summary>
        public readonly string VirtualNode;
        /// <summary>
        /// The relative weight of the weighted target. An integer between 0 and 100.
        /// </summary>
        public readonly int Weight;

        [OutputConstructor]
        private RouteSpecTcpRouteActionWeightedTargets(
            string virtualNode,
            int weight)
        {
            VirtualNode = virtualNode;
            Weight = weight;
        }
    }
    }
}
