// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppMesh
{
    /// <summary>
    /// Provides an AWS App Mesh virtual node resource.
    /// 
    /// ## Breaking Changes
    /// 
    /// Because of backward incompatible API changes (read [here](https://github.com/awslabs/aws-app-mesh-examples/issues/92)), `aws.appmesh.VirtualNode` resource definitions created with provider versions earlier than v2.3.0 will need to be modified:
    /// 
    /// * Rename the `service_name` attribute of the `dns` object to `hostname`.
    /// 
    /// * Replace the `backends` attribute of the `spec` object with one or more `backend` configuration blocks,
    /// setting `virtual_service_name` to the name of the service.
    /// 
    /// The state associated with existing resources will automatically be migrated.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/appmesh_virtual_node.html.markdown.
    /// </summary>
    public partial class VirtualNode : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the virtual node.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The creation date of the virtual node.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// The last update date of the virtual node.
        /// </summary>
        [Output("lastUpdatedDate")]
        public Output<string> LastUpdatedDate { get; private set; } = null!;

        /// <summary>
        /// The name of the service mesh in which to create the virtual node.
        /// </summary>
        [Output("meshName")]
        public Output<string> MeshName { get; private set; } = null!;

        /// <summary>
        /// The name to use for the virtual node.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The virtual node specification to apply.
        /// </summary>
        [Output("spec")]
        public Output<Outputs.VirtualNodeSpec> Spec { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualNode(string name, VirtualNodeArgs args, CustomResourceOptions? options = null)
            : base("aws:appmesh/virtualNode:VirtualNode", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private VirtualNode(string name, Input<string> id, VirtualNodeState? state = null, CustomResourceOptions? options = null)
            : base("aws:appmesh/virtualNode:VirtualNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualNode Get(string name, Input<string> id, VirtualNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualNode(name, id, state, options);
        }
    }

    public sealed class VirtualNodeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the service mesh in which to create the virtual node.
        /// </summary>
        [Input("meshName", required: true)]
        public Input<string> MeshName { get; set; } = null!;

        /// <summary>
        /// The name to use for the virtual node.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The virtual node specification to apply.
        /// </summary>
        [Input("spec", required: true)]
        public Input<Inputs.VirtualNodeSpecArgs> Spec { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public VirtualNodeArgs()
        {
        }
    }

    public sealed class VirtualNodeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the virtual node.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The creation date of the virtual node.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// The last update date of the virtual node.
        /// </summary>
        [Input("lastUpdatedDate")]
        public Input<string>? LastUpdatedDate { get; set; }

        /// <summary>
        /// The name of the service mesh in which to create the virtual node.
        /// </summary>
        [Input("meshName")]
        public Input<string>? MeshName { get; set; }

        /// <summary>
        /// The name to use for the virtual node.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The virtual node specification to apply.
        /// </summary>
        [Input("spec")]
        public Input<Inputs.VirtualNodeSpecGetArgs>? Spec { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public VirtualNodeState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class VirtualNodeSpecArgs : Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<VirtualNodeSpecBackendsArgs>? _backends;

        /// <summary>
        /// The backends to which the virtual node is expected to send outbound traffic.
        /// </summary>
        public InputList<VirtualNodeSpecBackendsArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<VirtualNodeSpecBackendsArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// The listeners from which the virtual node is expected to receive inbound traffic.
        /// </summary>
        [Input("listener")]
        public Input<VirtualNodeSpecListenerArgs>? Listener { get; set; }

        /// <summary>
        /// The inbound and outbound access logging information for the virtual node.
        /// </summary>
        [Input("logging")]
        public Input<VirtualNodeSpecLoggingArgs>? Logging { get; set; }

        /// <summary>
        /// The service discovery information for the virtual node.
        /// </summary>
        [Input("serviceDiscovery")]
        public Input<VirtualNodeSpecServiceDiscoveryArgs>? ServiceDiscovery { get; set; }

        public VirtualNodeSpecArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecBackendsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a virtual service to use as a backend for a virtual node.
        /// </summary>
        [Input("virtualService")]
        public Input<VirtualNodeSpecBackendsVirtualServiceArgs>? VirtualService { get; set; }

        public VirtualNodeSpecBackendsArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecBackendsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies a virtual service to use as a backend for a virtual node.
        /// </summary>
        [Input("virtualService")]
        public Input<VirtualNodeSpecBackendsVirtualServiceGetArgs>? VirtualService { get; set; }

        public VirtualNodeSpecBackendsGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecBackendsVirtualServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the virtual service that is acting as a virtual node backend.
        /// </summary>
        [Input("virtualServiceName", required: true)]
        public Input<string> VirtualServiceName { get; set; } = null!;

        public VirtualNodeSpecBackendsVirtualServiceArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecBackendsVirtualServiceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the virtual service that is acting as a virtual node backend.
        /// </summary>
        [Input("virtualServiceName", required: true)]
        public Input<string> VirtualServiceName { get; set; } = null!;

        public VirtualNodeSpecBackendsVirtualServiceGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecGetArgs : Pulumi.ResourceArgs
    {
        [Input("backends")]
        private InputList<VirtualNodeSpecBackendsGetArgs>? _backends;

        /// <summary>
        /// The backends to which the virtual node is expected to send outbound traffic.
        /// </summary>
        public InputList<VirtualNodeSpecBackendsGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<VirtualNodeSpecBackendsGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// The listeners from which the virtual node is expected to receive inbound traffic.
        /// </summary>
        [Input("listener")]
        public Input<VirtualNodeSpecListenerGetArgs>? Listener { get; set; }

        /// <summary>
        /// The inbound and outbound access logging information for the virtual node.
        /// </summary>
        [Input("logging")]
        public Input<VirtualNodeSpecLoggingGetArgs>? Logging { get; set; }

        /// <summary>
        /// The service discovery information for the virtual node.
        /// </summary>
        [Input("serviceDiscovery")]
        public Input<VirtualNodeSpecServiceDiscoveryGetArgs>? ServiceDiscovery { get; set; }

        public VirtualNodeSpecGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecListenerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The health check information for the listener.
        /// </summary>
        [Input("healthCheck")]
        public Input<VirtualNodeSpecListenerHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The port mapping information for the listener.
        /// </summary>
        [Input("portMapping", required: true)]
        public Input<VirtualNodeSpecListenerPortMappingArgs> PortMapping { get; set; } = null!;

        public VirtualNodeSpecListenerArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecListenerGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The health check information for the listener.
        /// </summary>
        [Input("healthCheck")]
        public Input<VirtualNodeSpecListenerHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The port mapping information for the listener.
        /// </summary>
        [Input("portMapping", required: true)]
        public Input<VirtualNodeSpecListenerPortMappingGetArgs> PortMapping { get; set; } = null!;

        public VirtualNodeSpecListenerGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecListenerHealthCheckArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of consecutive successful health checks that must occur before declaring listener healthy.
        /// * `interval_millis`- (Required) The time period in milliseconds between each health check execution.
        /// </summary>
        [Input("healthyThreshold", required: true)]
        public Input<int> HealthyThreshold { get; set; } = null!;

        [Input("intervalMillis", required: true)]
        public Input<int> IntervalMillis { get; set; } = null!;

        /// <summary>
        /// The destination path for the health check request. This is only required if the specified protocol is `http`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol for the health check request. Valid values are `http` and `tcp`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The amount of time to wait when receiving a response from the health check, in milliseconds.
        /// </summary>
        [Input("timeoutMillis", required: true)]
        public Input<int> TimeoutMillis { get; set; } = null!;

        /// <summary>
        /// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
        /// </summary>
        [Input("unhealthyThreshold", required: true)]
        public Input<int> UnhealthyThreshold { get; set; } = null!;

        public VirtualNodeSpecListenerHealthCheckArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecListenerHealthCheckGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of consecutive successful health checks that must occur before declaring listener healthy.
        /// * `interval_millis`- (Required) The time period in milliseconds between each health check execution.
        /// </summary>
        [Input("healthyThreshold", required: true)]
        public Input<int> HealthyThreshold { get; set; } = null!;

        [Input("intervalMillis", required: true)]
        public Input<int> IntervalMillis { get; set; } = null!;

        /// <summary>
        /// The destination path for the health check request. This is only required if the specified protocol is `http`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol for the health check request. Valid values are `http` and `tcp`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The amount of time to wait when receiving a response from the health check, in milliseconds.
        /// </summary>
        [Input("timeoutMillis", required: true)]
        public Input<int> TimeoutMillis { get; set; } = null!;

        /// <summary>
        /// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
        /// </summary>
        [Input("unhealthyThreshold", required: true)]
        public Input<int> UnhealthyThreshold { get; set; } = null!;

        public VirtualNodeSpecListenerHealthCheckGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecListenerPortMappingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The port used for the port mapping.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol used for the port mapping. Valid values are `http` and `tcp`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public VirtualNodeSpecListenerPortMappingArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecListenerPortMappingGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The port used for the port mapping.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol used for the port mapping. Valid values are `http` and `tcp`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        public VirtualNodeSpecListenerPortMappingGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecLoggingAccessLogArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file object to send virtual node access logs to.
        /// </summary>
        [Input("file")]
        public Input<VirtualNodeSpecLoggingAccessLogFileArgs>? File { get; set; }

        public VirtualNodeSpecLoggingAccessLogArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecLoggingAccessLogFileArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public VirtualNodeSpecLoggingAccessLogFileArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecLoggingAccessLogFileGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public VirtualNodeSpecLoggingAccessLogFileGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecLoggingAccessLogGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The file object to send virtual node access logs to.
        /// </summary>
        [Input("file")]
        public Input<VirtualNodeSpecLoggingAccessLogFileGetArgs>? File { get; set; }

        public VirtualNodeSpecLoggingAccessLogGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecLoggingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access log configuration for a virtual node.
        /// </summary>
        [Input("accessLog")]
        public Input<VirtualNodeSpecLoggingAccessLogArgs>? AccessLog { get; set; }

        public VirtualNodeSpecLoggingArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecLoggingGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access log configuration for a virtual node.
        /// </summary>
        [Input("accessLog")]
        public Input<VirtualNodeSpecLoggingAccessLogGetArgs>? AccessLog { get; set; }

        public VirtualNodeSpecLoggingGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecServiceDiscoveryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies any AWS Cloud Map information for the virtual node.
        /// </summary>
        [Input("awsCloudMap")]
        public Input<VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs>? AwsCloudMap { get; set; }

        /// <summary>
        /// Specifies the DNS service name for the virtual node.
        /// </summary>
        [Input("dns")]
        public Input<VirtualNodeSpecServiceDiscoveryDnsArgs>? Dns { get; set; }

        public VirtualNodeSpecServiceDiscoveryArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// The name of the AWS Cloud Map namespace to use.
        /// Use the [`aws.servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the AWS Cloud Map service to use. Use the [`aws.servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public VirtualNodeSpecServiceDiscoveryAwsCloudMapArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecServiceDiscoveryAwsCloudMapGetArgs : Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// The name of the AWS Cloud Map namespace to use.
        /// Use the [`aws.servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
        /// </summary>
        [Input("namespaceName", required: true)]
        public Input<string> NamespaceName { get; set; } = null!;

        /// <summary>
        /// The name of the AWS Cloud Map service to use. Use the [`aws.servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public VirtualNodeSpecServiceDiscoveryAwsCloudMapGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecServiceDiscoveryDnsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS host name for your virtual node.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        public VirtualNodeSpecServiceDiscoveryDnsArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecServiceDiscoveryDnsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS host name for your virtual node.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        public VirtualNodeSpecServiceDiscoveryDnsGetArgs()
        {
        }
    }

    public sealed class VirtualNodeSpecServiceDiscoveryGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies any AWS Cloud Map information for the virtual node.
        /// </summary>
        [Input("awsCloudMap")]
        public Input<VirtualNodeSpecServiceDiscoveryAwsCloudMapGetArgs>? AwsCloudMap { get; set; }

        /// <summary>
        /// Specifies the DNS service name for the virtual node.
        /// </summary>
        [Input("dns")]
        public Input<VirtualNodeSpecServiceDiscoveryDnsGetArgs>? Dns { get; set; }

        public VirtualNodeSpecServiceDiscoveryGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class VirtualNodeSpec
    {
        /// <summary>
        /// The backends to which the virtual node is expected to send outbound traffic.
        /// </summary>
        public readonly ImmutableArray<VirtualNodeSpecBackends> Backends;
        /// <summary>
        /// The listeners from which the virtual node is expected to receive inbound traffic.
        /// </summary>
        public readonly VirtualNodeSpecListener? Listener;
        /// <summary>
        /// The inbound and outbound access logging information for the virtual node.
        /// </summary>
        public readonly VirtualNodeSpecLogging? Logging;
        /// <summary>
        /// The service discovery information for the virtual node.
        /// </summary>
        public readonly VirtualNodeSpecServiceDiscovery? ServiceDiscovery;

        [OutputConstructor]
        private VirtualNodeSpec(
            ImmutableArray<VirtualNodeSpecBackends> backends,
            VirtualNodeSpecListener? listener,
            VirtualNodeSpecLogging? logging,
            VirtualNodeSpecServiceDiscovery? serviceDiscovery)
        {
            Backends = backends;
            Listener = listener;
            Logging = logging;
            ServiceDiscovery = serviceDiscovery;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecBackends
    {
        /// <summary>
        /// Specifies a virtual service to use as a backend for a virtual node.
        /// </summary>
        public readonly VirtualNodeSpecBackendsVirtualService? VirtualService;

        [OutputConstructor]
        private VirtualNodeSpecBackends(VirtualNodeSpecBackendsVirtualService? virtualService)
        {
            VirtualService = virtualService;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecBackendsVirtualService
    {
        /// <summary>
        /// The name of the virtual service that is acting as a virtual node backend.
        /// </summary>
        public readonly string VirtualServiceName;

        [OutputConstructor]
        private VirtualNodeSpecBackendsVirtualService(string virtualServiceName)
        {
            VirtualServiceName = virtualServiceName;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecListener
    {
        /// <summary>
        /// The health check information for the listener.
        /// </summary>
        public readonly VirtualNodeSpecListenerHealthCheck? HealthCheck;
        /// <summary>
        /// The port mapping information for the listener.
        /// </summary>
        public readonly VirtualNodeSpecListenerPortMapping PortMapping;

        [OutputConstructor]
        private VirtualNodeSpecListener(
            VirtualNodeSpecListenerHealthCheck? healthCheck,
            VirtualNodeSpecListenerPortMapping portMapping)
        {
            HealthCheck = healthCheck;
            PortMapping = portMapping;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecListenerHealthCheck
    {
        /// <summary>
        /// The number of consecutive successful health checks that must occur before declaring listener healthy.
        /// * `interval_millis`- (Required) The time period in milliseconds between each health check execution.
        /// </summary>
        public readonly int HealthyThreshold;
        public readonly int IntervalMillis;
        /// <summary>
        /// The destination path for the health check request. This is only required if the specified protocol is `http`.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// The destination port for the health check request. This port must match the port defined in the `port_mapping` for the listener.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The protocol for the health check request. Valid values are `http` and `tcp`.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The amount of time to wait when receiving a response from the health check, in milliseconds.
        /// </summary>
        public readonly int TimeoutMillis;
        /// <summary>
        /// The number of consecutive failed health checks that must occur before declaring a virtual node unhealthy.
        /// </summary>
        public readonly int UnhealthyThreshold;

        [OutputConstructor]
        private VirtualNodeSpecListenerHealthCheck(
            int healthyThreshold,
            int intervalMillis,
            string? path,
            int port,
            string protocol,
            int timeoutMillis,
            int unhealthyThreshold)
        {
            HealthyThreshold = healthyThreshold;
            IntervalMillis = intervalMillis;
            Path = path;
            Port = port;
            Protocol = protocol;
            TimeoutMillis = timeoutMillis;
            UnhealthyThreshold = unhealthyThreshold;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecListenerPortMapping
    {
        /// <summary>
        /// The port used for the port mapping.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The protocol used for the port mapping. Valid values are `http` and `tcp`.
        /// </summary>
        public readonly string Protocol;

        [OutputConstructor]
        private VirtualNodeSpecListenerPortMapping(
            int port,
            string protocol)
        {
            Port = port;
            Protocol = protocol;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecLogging
    {
        /// <summary>
        /// The access log configuration for a virtual node.
        /// </summary>
        public readonly VirtualNodeSpecLoggingAccessLog? AccessLog;

        [OutputConstructor]
        private VirtualNodeSpecLogging(VirtualNodeSpecLoggingAccessLog? accessLog)
        {
            AccessLog = accessLog;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecLoggingAccessLog
    {
        /// <summary>
        /// The file object to send virtual node access logs to.
        /// </summary>
        public readonly VirtualNodeSpecLoggingAccessLogFile? File;

        [OutputConstructor]
        private VirtualNodeSpecLoggingAccessLog(VirtualNodeSpecLoggingAccessLogFile? file)
        {
            File = file;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecLoggingAccessLogFile
    {
        /// <summary>
        /// The file path to write access logs to. You can use `/dev/stdout` to send access logs to standard out.
        /// </summary>
        public readonly string Path;

        [OutputConstructor]
        private VirtualNodeSpecLoggingAccessLogFile(string path)
        {
            Path = path;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecServiceDiscovery
    {
        /// <summary>
        /// Specifies any AWS Cloud Map information for the virtual node.
        /// </summary>
        public readonly VirtualNodeSpecServiceDiscoveryAwsCloudMap? AwsCloudMap;
        /// <summary>
        /// Specifies the DNS service name for the virtual node.
        /// </summary>
        public readonly VirtualNodeSpecServiceDiscoveryDns? Dns;

        [OutputConstructor]
        private VirtualNodeSpecServiceDiscovery(
            VirtualNodeSpecServiceDiscoveryAwsCloudMap? awsCloudMap,
            VirtualNodeSpecServiceDiscoveryDns? dns)
        {
            AwsCloudMap = awsCloudMap;
            Dns = dns;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecServiceDiscoveryAwsCloudMap
    {
        /// <summary>
        /// A string map that contains attributes with values that you can use to filter instances by any custom attribute that you specified when you registered the instance. Only instances that match all of the specified key/value pairs will be returned.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Attributes;
        /// <summary>
        /// The name of the AWS Cloud Map namespace to use.
        /// Use the [`aws.servicediscovery.HttpNamespace`](https://www.terraform.io/docs/providers/aws/r/service_discovery_http_namespace.html) resource to configure a Cloud Map namespace.
        /// </summary>
        public readonly string NamespaceName;
        /// <summary>
        /// The name of the AWS Cloud Map service to use. Use the [`aws.servicediscovery.Service`](https://www.terraform.io/docs/providers/aws/r/service_discovery_service.html) resource to configure a Cloud Map service.
        /// </summary>
        public readonly string ServiceName;

        [OutputConstructor]
        private VirtualNodeSpecServiceDiscoveryAwsCloudMap(
            ImmutableDictionary<string, string>? attributes,
            string namespaceName,
            string serviceName)
        {
            Attributes = attributes;
            NamespaceName = namespaceName;
            ServiceName = serviceName;
        }
    }

    [OutputType]
    public sealed class VirtualNodeSpecServiceDiscoveryDns
    {
        /// <summary>
        /// The DNS host name for your virtual node.
        /// </summary>
        public readonly string Hostname;

        [OutputConstructor]
        private VirtualNodeSpecServiceDiscoveryDns(string hostname)
        {
            Hostname = hostname;
        }
    }
    }
}
