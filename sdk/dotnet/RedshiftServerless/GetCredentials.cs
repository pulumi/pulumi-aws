// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedshiftServerless
{
    public static class GetCredentials
    {
        /// <summary>
        /// Provides redshift serverless temporary credentials for a workgroup.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.redshiftserverless.getCredentials({
        ///     workgroupName: aws_redshiftserverless_workgroup.example.workgroup_name,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.redshiftserverless.get_credentials(workgroup_name=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.RedshiftServerless.GetCredentials.Invoke(new()
        ///     {
        ///         WorkgroupName = aws_redshiftserverless_workgroup.Example.Workgroup_name,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshiftserverless"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := redshiftserverless.GetCredentials(ctx, &amp;redshiftserverless.GetCredentialsArgs{
        /// 			WorkgroupName: aws_redshiftserverless_workgroup.Example.Workgroup_name,
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.redshiftserverless.RedshiftserverlessFunctions;
        /// import com.pulumi.aws.redshiftserverless.inputs.GetCredentialsArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = RedshiftserverlessFunctions.getCredentials(GetCredentialsArgs.builder()
        ///             .workgroupName(aws_redshiftserverless_workgroup.example().workgroup_name())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:redshiftserverless:getCredentials
        ///       Arguments:
        ///         workgroupName: ${aws_redshiftserverless_workgroup.example.workgroup_name}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCredentialsResult> InvokeAsync(GetCredentialsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCredentialsResult>("aws:redshiftserverless/getCredentials:getCredentials", args ?? new GetCredentialsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides redshift serverless temporary credentials for a workgroup.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.redshiftserverless.getCredentials({
        ///     workgroupName: aws_redshiftserverless_workgroup.example.workgroup_name,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.redshiftserverless.get_credentials(workgroup_name=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.RedshiftServerless.GetCredentials.Invoke(new()
        ///     {
        ///         WorkgroupName = aws_redshiftserverless_workgroup.Example.Workgroup_name,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshiftserverless"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := redshiftserverless.GetCredentials(ctx, &amp;redshiftserverless.GetCredentialsArgs{
        /// 			WorkgroupName: aws_redshiftserverless_workgroup.Example.Workgroup_name,
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.redshiftserverless.RedshiftserverlessFunctions;
        /// import com.pulumi.aws.redshiftserverless.inputs.GetCredentialsArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = RedshiftserverlessFunctions.getCredentials(GetCredentialsArgs.builder()
        ///             .workgroupName(aws_redshiftserverless_workgroup.example().workgroup_name())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:redshiftserverless:getCredentials
        ///       Arguments:
        ///         workgroupName: ${aws_redshiftserverless_workgroup.example.workgroup_name}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCredentialsResult> Invoke(GetCredentialsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCredentialsResult>("aws:redshiftserverless/getCredentials:getCredentials", args ?? new GetCredentialsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCredentialsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database to get temporary authorization to log on to.
        /// </summary>
        [Input("dbName")]
        public string? DbName { get; set; }

        /// <summary>
        /// The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.
        /// </summary>
        [Input("durationSeconds")]
        public int? DurationSeconds { get; set; }

        /// <summary>
        /// The name of the workgroup associated with the database.
        /// </summary>
        [Input("workgroupName", required: true)]
        public string WorkgroupName { get; set; } = null!;

        public GetCredentialsArgs()
        {
        }
        public static new GetCredentialsArgs Empty => new GetCredentialsArgs();
    }

    public sealed class GetCredentialsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the database to get temporary authorization to log on to.
        /// </summary>
        [Input("dbName")]
        public Input<string>? DbName { get; set; }

        /// <summary>
        /// The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.
        /// </summary>
        [Input("durationSeconds")]
        public Input<int>? DurationSeconds { get; set; }

        /// <summary>
        /// The name of the workgroup associated with the database.
        /// </summary>
        [Input("workgroupName", required: true)]
        public Input<string> WorkgroupName { get; set; } = null!;

        public GetCredentialsInvokeArgs()
        {
        }
        public static new GetCredentialsInvokeArgs Empty => new GetCredentialsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCredentialsResult
    {
        public readonly string? DbName;
        /// <summary>
        /// Temporary password that authorizes the user name returned by `db_user` to log on to the database `db_name`.
        /// </summary>
        public readonly string DbPassword;
        /// <summary>
        /// A database user name that is authorized to log on to the database `db_name` using the password `db_password` . If the specified `db_user` exists in the database, the new user name has the same database privileges as the user named in `db_user` . By default, the user is added to PUBLIC. the user doesn't exist in the database.
        /// </summary>
        public readonly string DbUser;
        public readonly int? DurationSeconds;
        /// <summary>
        /// Date and time the password in `db_password` expires.
        /// </summary>
        public readonly string Expiration;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string WorkgroupName;

        [OutputConstructor]
        private GetCredentialsResult(
            string? dbName,

            string dbPassword,

            string dbUser,

            int? durationSeconds,

            string expiration,

            string id,

            string workgroupName)
        {
            DbName = dbName;
            DbPassword = dbPassword;
            DbUser = dbUser;
            DurationSeconds = durationSeconds;
            Expiration = expiration;
            Id = id;
            WorkgroupName = workgroupName;
        }
    }
}
