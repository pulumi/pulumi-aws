// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedshiftServerless
{
    /// <summary>
    /// Creates a new Amazon Redshift Serverless Usage Limit.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleWorkgroup = new Aws.RedshiftServerless.Workgroup("exampleWorkgroup", new()
    ///     {
    ///         NamespaceName = aws_redshiftserverless_namespace.Example.Namespace_name,
    ///         WorkgroupName = "example",
    ///     });
    /// 
    ///     var exampleUsageLimit = new Aws.RedshiftServerless.UsageLimit("exampleUsageLimit", new()
    ///     {
    ///         ResourceArn = exampleWorkgroup.Arn,
    ///         UsageType = "serverless-compute",
    ///         Amount = 60,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_redshiftserverless_usage_limit.example
    /// 
    ///  id = "example-id" } Using `pulumi import`, import Redshift Serverless Usage Limits using the `id`. For exampleconsole % pulumi import aws_redshiftserverless_usage_limit.example example-id
    /// </summary>
    [AwsResourceType("aws:redshiftserverless/usageLimit:UsageLimit")]
    public partial class UsageLimit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
        /// </summary>
        [Output("amount")]
        public Output<int> Amount { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
        /// </summary>
        [Output("breachAction")]
        public Output<string?> BreachAction { get; private set; } = null!;

        /// <summary>
        /// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
        /// </summary>
        [Output("period")]
        public Output<string?> Period { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
        /// </summary>
        [Output("resourceArn")]
        public Output<string> ResourceArn { get; private set; } = null!;

        /// <summary>
        /// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
        /// </summary>
        [Output("usageType")]
        public Output<string> UsageType { get; private set; } = null!;


        /// <summary>
        /// Create a UsageLimit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UsageLimit(string name, UsageLimitArgs args, CustomResourceOptions? options = null)
            : base("aws:redshiftserverless/usageLimit:UsageLimit", name, args ?? new UsageLimitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UsageLimit(string name, Input<string> id, UsageLimitState? state = null, CustomResourceOptions? options = null)
            : base("aws:redshiftserverless/usageLimit:UsageLimit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UsageLimit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UsageLimit Get(string name, Input<string> id, UsageLimitState? state = null, CustomResourceOptions? options = null)
        {
            return new UsageLimit(name, id, state, options);
        }
    }

    public sealed class UsageLimitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
        /// </summary>
        [Input("amount", required: true)]
        public Input<int> Amount { get; set; } = null!;

        /// <summary>
        /// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
        /// </summary>
        [Input("breachAction")]
        public Input<string>? BreachAction { get; set; }

        /// <summary>
        /// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
        /// </summary>
        [Input("resourceArn", required: true)]
        public Input<string> ResourceArn { get; set; } = null!;

        /// <summary>
        /// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
        /// </summary>
        [Input("usageType", required: true)]
        public Input<string> UsageType { get; set; } = null!;

        public UsageLimitArgs()
        {
        }
        public static new UsageLimitArgs Empty => new UsageLimitArgs();
    }

    public sealed class UsageLimitState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
        /// </summary>
        [Input("amount")]
        public Input<int>? Amount { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
        /// </summary>
        [Input("breachAction")]
        public Input<string>? BreachAction { get; set; }

        /// <summary>
        /// The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
        /// </summary>
        [Input("resourceArn")]
        public Input<string>? ResourceArn { get; set; }

        /// <summary>
        /// The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.
        /// </summary>
        [Input("usageType")]
        public Input<string>? UsageType { get; set; }

        public UsageLimitState()
        {
        }
        public static new UsageLimitState Empty => new UsageLimitState();
    }
}
