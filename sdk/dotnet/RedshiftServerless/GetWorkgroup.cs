// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.RedshiftServerless
{
    public static class GetWorkgroup
    {
        /// <summary>
        /// Data source for managing an AWS Redshift Serverless Workgroup.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.redshiftserverless.getWorkgroup({
        ///     workgroupName: aws_redshiftserverless_workgroup.example.workgroup_name,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.redshiftserverless.get_workgroup(workgroup_name=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.RedshiftServerless.GetWorkgroup.Invoke(new()
        ///     {
        ///         WorkgroupName = aws_redshiftserverless_workgroup.Example.Workgroup_name,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshiftserverless"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := redshiftserverless.LookupWorkgroup(ctx, &amp;redshiftserverless.LookupWorkgroupArgs{
        /// 			WorkgroupName: aws_redshiftserverless_workgroup.Example.Workgroup_name,
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.redshiftserverless.RedshiftserverlessFunctions;
        /// import com.pulumi.aws.redshiftserverless.inputs.GetWorkgroupArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = RedshiftserverlessFunctions.getWorkgroup(GetWorkgroupArgs.builder()
        ///             .workgroupName(aws_redshiftserverless_workgroup.example().workgroup_name())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:redshiftserverless:getWorkgroup
        ///       Arguments:
        ///         workgroupName: ${aws_redshiftserverless_workgroup.example.workgroup_name}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetWorkgroupResult> InvokeAsync(GetWorkgroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkgroupResult>("aws:redshiftserverless/getWorkgroup:getWorkgroup", args ?? new GetWorkgroupArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS Redshift Serverless Workgroup.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.redshiftserverless.getWorkgroup({
        ///     workgroupName: aws_redshiftserverless_workgroup.example.workgroup_name,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.redshiftserverless.get_workgroup(workgroup_name=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.RedshiftServerless.GetWorkgroup.Invoke(new()
        ///     {
        ///         WorkgroupName = aws_redshiftserverless_workgroup.Example.Workgroup_name,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/redshiftserverless"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := redshiftserverless.LookupWorkgroup(ctx, &amp;redshiftserverless.LookupWorkgroupArgs{
        /// 			WorkgroupName: aws_redshiftserverless_workgroup.Example.Workgroup_name,
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.redshiftserverless.RedshiftserverlessFunctions;
        /// import com.pulumi.aws.redshiftserverless.inputs.GetWorkgroupArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = RedshiftserverlessFunctions.getWorkgroup(GetWorkgroupArgs.builder()
        ///             .workgroupName(aws_redshiftserverless_workgroup.example().workgroup_name())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:redshiftserverless:getWorkgroup
        ///       Arguments:
        ///         workgroupName: ${aws_redshiftserverless_workgroup.example.workgroup_name}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetWorkgroupResult> Invoke(GetWorkgroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkgroupResult>("aws:redshiftserverless/getWorkgroup:getWorkgroup", args ?? new GetWorkgroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkgroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the workgroup associated with the database.
        /// </summary>
        [Input("workgroupName", required: true)]
        public string WorkgroupName { get; set; } = null!;

        public GetWorkgroupArgs()
        {
        }
        public static new GetWorkgroupArgs Empty => new GetWorkgroupArgs();
    }

    public sealed class GetWorkgroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the workgroup associated with the database.
        /// </summary>
        [Input("workgroupName", required: true)]
        public Input<string> WorkgroupName { get; set; } = null!;

        public GetWorkgroupInvokeArgs()
        {
        }
        public static new GetWorkgroupInvokeArgs Empty => new GetWorkgroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkgroupResult
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the Redshift Serverless Workgroup.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The endpoint that is created from the workgroup. See `Endpoint` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkgroupEndpointResult> Endpoints;
        /// <summary>
        /// The value that specifies whether to turn on enhanced virtual private cloud (VPC) routing, which forces Amazon Redshift Serverless to route traffic through your VPC instead of over the internet.
        /// </summary>
        public readonly bool EnhancedVpcRouting;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NamespaceName;
        /// <summary>
        /// A value that specifies whether the workgroup can be accessed from a public network.
        /// </summary>
        public readonly bool PubliclyAccessible;
        /// <summary>
        /// An array of security group IDs to associate with the workgroup.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// An array of VPC subnet IDs to associate with the workgroup. When set, must contain at least three subnets spanning three Availability Zones. A minimum number of IP addresses is required and scales with the Base Capacity. For more information, see the following [AWS document](https://docs.aws.amazon.com/redshift/latest/mgmt/serverless-known-issues.html).
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// The Redshift Workgroup ID.
        /// </summary>
        public readonly string WorkgroupId;
        public readonly string WorkgroupName;

        [OutputConstructor]
        private GetWorkgroupResult(
            string arn,

            ImmutableArray<Outputs.GetWorkgroupEndpointResult> endpoints,

            bool enhancedVpcRouting,

            string id,

            string namespaceName,

            bool publiclyAccessible,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> subnetIds,

            string workgroupId,

            string workgroupName)
        {
            Arn = arn;
            Endpoints = endpoints;
            EnhancedVpcRouting = enhancedVpcRouting;
            Id = id;
            NamespaceName = namespaceName;
            PubliclyAccessible = publiclyAccessible;
            SecurityGroupIds = securityGroupIds;
            SubnetIds = subnetIds;
            WorkgroupId = workgroupId;
            WorkgroupName = workgroupName;
        }
    }
}
