// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.TimestreamQuery.Inputs
{

    public sealed class ScheduledQueryLastRunSummaryQueryInsightsResponseGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Size of query result set in bytes. You can use this data to validate if the result set has changed as part of the query tuning exercise.
        /// </summary>
        [Input("outputBytes")]
        public Input<int>? OutputBytes { get; set; }

        /// <summary>
        /// Total number of rows returned as part of the query result set. You can use this data to validate if the number of rows in the result set have changed as part of the query tuning exercise.
        /// </summary>
        [Input("outputRows")]
        public Input<int>? OutputRows { get; set; }

        [Input("querySpatialCoverages")]
        private InputList<Inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQuerySpatialCoverageGetArgs>? _querySpatialCoverages;

        /// <summary>
        /// Insights into the spatial coverage of the query, including the table with sub-optimal (max) spatial pruning. This information can help you identify areas for improvement in your partitioning strategy to enhance spatial pruning.
        /// </summary>
        public InputList<Inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQuerySpatialCoverageGetArgs> QuerySpatialCoverages
        {
            get => _querySpatialCoverages ?? (_querySpatialCoverages = new InputList<Inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQuerySpatialCoverageGetArgs>());
            set => _querySpatialCoverages = value;
        }

        /// <summary>
        /// Number of tables in the query.
        /// </summary>
        [Input("queryTableCount")]
        public Input<int>? QueryTableCount { get; set; }

        [Input("queryTemporalRanges")]
        private InputList<Inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQueryTemporalRangeGetArgs>? _queryTemporalRanges;

        /// <summary>
        /// Insights into the temporal range of the query, including the table with the largest (max) time range. Following are some of the potential options for optimizing time-based pruning: add missing time-predicates, remove functions around the time predicates, add time predicates to all the sub-queries.
        /// </summary>
        public InputList<Inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQueryTemporalRangeGetArgs> QueryTemporalRanges
        {
            get => _queryTemporalRanges ?? (_queryTemporalRanges = new InputList<Inputs.ScheduledQueryLastRunSummaryQueryInsightsResponseQueryTemporalRangeGetArgs>());
            set => _queryTemporalRanges = value;
        }

        public ScheduledQueryLastRunSummaryQueryInsightsResponseGetArgs()
        {
        }
        public static new ScheduledQueryLastRunSummaryQueryInsightsResponseGetArgs Empty => new ScheduledQueryLastRunSummaryQueryInsightsResponseGetArgs();
    }
}
