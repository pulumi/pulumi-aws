// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.TimestreamQuery
{
    /// <summary>
    /// Resource for managing an AWS Timestream Query Scheduled Query.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// Before creating a scheduled query, you must have a source database and table with ingested data. Below is a multi-step example, providing an opportunity for data ingestion.
    /// 
    /// If your infrastructure is already set up—including the source database and table with data, results database and table, error report S3 bucket, SNS topic, and IAM role—you can create a scheduled query as follows:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.TimestreamQuery.ScheduledQuery("example", new()
    ///     {
    ///         ExecutionRoleArn = exampleAwsIamRole.Arn,
    ///         Name = exampleAwsTimestreamwriteTable.TableName,
    ///         QueryString = @"SELECT region, az, hostname, BIN(time, 15s) AS binned_timestamp,
    /// 	ROUND(AVG(cpu_utilization), 2) AS avg_cpu_utilization,
    /// 	ROUND(APPROX_PERCENTILE(cpu_utilization, 0.9), 2) AS p90_cpu_utilization,
    /// 	ROUND(APPROX_PERCENTILE(cpu_utilization, 0.95), 2) AS p95_cpu_utilization,
    /// 	ROUND(APPROX_PERCENTILE(cpu_utilization, 0.99), 2) AS p99_cpu_utilization
    /// FROM exampledatabase.exampletable
    /// WHERE measure_name = 'metrics' AND time &gt; ago(2h)
    /// GROUP BY region, hostname, az, BIN(time, 15s)
    /// ORDER BY binned_timestamp ASC
    /// LIMIT 5
    /// ",
    ///         ErrorReportConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryErrorReportConfigurationArgs
    ///         {
    ///             S3Configuration = new Aws.TimestreamQuery.Inputs.ScheduledQueryErrorReportConfigurationS3ConfigurationArgs
    ///             {
    ///                 BucketName = exampleAwsS3Bucket.Bucket,
    ///             },
    ///         },
    ///         NotificationConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryNotificationConfigurationArgs
    ///         {
    ///             SnsConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryNotificationConfigurationSnsConfigurationArgs
    ///             {
    ///                 TopicArn = exampleAwsSnsTopic.Arn,
    ///             },
    ///         },
    ///         ScheduleConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryScheduleConfigurationArgs
    ///         {
    ///             ScheduleExpression = "rate(1 hour)",
    ///         },
    ///         TargetConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationArgs
    ///         {
    ///             TimestreamConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationArgs
    ///             {
    ///                 DatabaseName = results.DatabaseName,
    ///                 TableName = resultsAwsTimestreamwriteTable.TableName,
    ///                 TimeColumn = "binned_timestamp",
    ///                 DimensionMappings = new[]
    ///                 {
    ///                     new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs
    ///                     {
    ///                         DimensionValueType = "VARCHAR",
    ///                         Name = "az",
    ///                     },
    ///                     new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs
    ///                     {
    ///                         DimensionValueType = "VARCHAR",
    ///                         Name = "region",
    ///                     },
    ///                     new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs
    ///                     {
    ///                         DimensionValueType = "VARCHAR",
    ///                         Name = "hostname",
    ///                     },
    ///                 },
    ///                 MultiMeasureMappings = new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs
    ///                 {
    ///                     TargetMultiMeasureName = "multi-metrics",
    ///                     MultiMeasureAttributeMappings = new[]
    ///                     {
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "avg_cpu_utilization",
    ///                         },
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "p90_cpu_utilization",
    ///                         },
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "p95_cpu_utilization",
    ///                         },
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "p99_cpu_utilization",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Multi-step Example
    /// 
    /// To ingest data before creating a scheduled query, this example provides multiple steps:
    /// 
    /// 1. Create the prerequisite infrastructure
    /// 2. Ingest data
    /// 3. Create the scheduled query
    /// 
    /// ### Step 1. Create the prerequisite infrastructure
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.S3.BucketV2("test", new()
    ///     {
    ///         Bucket = "example",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var testTopic = new Aws.Sns.Topic("test", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var testQueue = new Aws.Sqs.Queue("test", new()
    ///     {
    ///         Name = "example",
    ///         SqsManagedSseEnabled = true,
    ///     });
    /// 
    ///     var testTopicSubscription = new Aws.Sns.TopicSubscription("test", new()
    ///     {
    ///         Topic = testTopic.Arn,
    ///         Protocol = "sqs",
    ///         Endpoint = testQueue.Arn,
    ///     });
    /// 
    ///     var testQueuePolicy = new Aws.Sqs.QueuePolicy("test", new()
    ///     {
    ///         QueueUrl = testQueue.Id,
    ///         Policy = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["AWS"] = "*",
    ///                     },
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sqs:SendMessage",
    ///                     },
    ///                     ["Resource"] = testQueue.Arn,
    ///                     ["Condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["ArnEquals"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["aws:SourceArn"] = testTopic.Arn,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    ///     var testRole = new Aws.Iam.Role("test", new()
    ///     {
    ///         Name = "example",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "timestream.amazonaws.com",
    ///                     },
    ///                     ["Action"] = "sts:AssumeRole",
    ///                 },
    ///             },
    ///         }),
    ///         Tags = 
    ///         {
    ///             { "Name", "example" },
    ///         },
    ///     });
    /// 
    ///     var testRolePolicy = new Aws.Iam.RolePolicy("test", new()
    ///     {
    ///         Name = "example",
    ///         Role = testRole.Id,
    ///         Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "kms:Decrypt",
    ///                         "sns:Publish",
    ///                         "timestream:describeEndpoints",
    ///                         "timestream:Select",
    ///                         "timestream:SelectValues",
    ///                         "timestream:WriteRecords",
    ///                         "s3:PutObject",
    ///                     },
    ///                     ["Resource"] = "*",
    ///                     ["Effect"] = "Allow",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var testDatabase = new Aws.TimestreamWrite.Database("test", new()
    ///     {
    ///         DatabaseName = "exampledatabase",
    ///     });
    /// 
    ///     var testTable = new Aws.TimestreamWrite.Table("test", new()
    ///     {
    ///         DatabaseName = testDatabase.DatabaseName,
    ///         TableName = "exampletable",
    ///         MagneticStoreWriteProperties = new Aws.TimestreamWrite.Inputs.TableMagneticStoreWritePropertiesArgs
    ///         {
    ///             EnableMagneticStoreWrites = true,
    ///         },
    ///         RetentionProperties = new Aws.TimestreamWrite.Inputs.TableRetentionPropertiesArgs
    ///         {
    ///             MagneticStoreRetentionPeriodInDays = 1,
    ///             MemoryStoreRetentionPeriodInHours = 1,
    ///         },
    ///     });
    /// 
    ///     var results = new Aws.TimestreamWrite.Database("results", new()
    ///     {
    ///         DatabaseName = "exampledatabase-results",
    ///     });
    /// 
    ///     var resultsTable = new Aws.TimestreamWrite.Table("results", new()
    ///     {
    ///         DatabaseName = results.DatabaseName,
    ///         TableName = "exampletable-results",
    ///         MagneticStoreWriteProperties = new Aws.TimestreamWrite.Inputs.TableMagneticStoreWritePropertiesArgs
    ///         {
    ///             EnableMagneticStoreWrites = true,
    ///         },
    ///         RetentionProperties = new Aws.TimestreamWrite.Inputs.TableRetentionPropertiesArgs
    ///         {
    ///             MagneticStoreRetentionPeriodInDays = 1,
    ///             MemoryStoreRetentionPeriodInHours = 1,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// #### Step 2. Ingest data
    /// 
    /// This is done with Amazon Timestream Write [WriteRecords](https://docs.aws.amazon.com/timestream/latest/developerguide/API_WriteRecords.html).
    /// 
    /// ### Step 3. Create the scheduled query
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.TimestreamQuery.ScheduledQuery("example", new()
    ///     {
    ///         ExecutionRoleArn = exampleAwsIamRole.Arn,
    ///         Name = exampleAwsTimestreamwriteTable.TableName,
    ///         QueryString = @"SELECT region, az, hostname, BIN(time, 15s) AS binned_timestamp,
    /// 	ROUND(AVG(cpu_utilization), 2) AS avg_cpu_utilization,
    /// 	ROUND(APPROX_PERCENTILE(cpu_utilization, 0.9), 2) AS p90_cpu_utilization,
    /// 	ROUND(APPROX_PERCENTILE(cpu_utilization, 0.95), 2) AS p95_cpu_utilization,
    /// 	ROUND(APPROX_PERCENTILE(cpu_utilization, 0.99), 2) AS p99_cpu_utilization
    /// FROM exampledatabase.exampletable
    /// WHERE measure_name = 'metrics' AND time &gt; ago(2h)
    /// GROUP BY region, hostname, az, BIN(time, 15s)
    /// ORDER BY binned_timestamp ASC
    /// LIMIT 5
    /// ",
    ///         ErrorReportConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryErrorReportConfigurationArgs
    ///         {
    ///             S3Configuration = new Aws.TimestreamQuery.Inputs.ScheduledQueryErrorReportConfigurationS3ConfigurationArgs
    ///             {
    ///                 BucketName = exampleAwsS3Bucket.Bucket,
    ///             },
    ///         },
    ///         NotificationConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryNotificationConfigurationArgs
    ///         {
    ///             SnsConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryNotificationConfigurationSnsConfigurationArgs
    ///             {
    ///                 TopicArn = exampleAwsSnsTopic.Arn,
    ///             },
    ///         },
    ///         ScheduleConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryScheduleConfigurationArgs
    ///         {
    ///             ScheduleExpression = "rate(1 hour)",
    ///         },
    ///         TargetConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationArgs
    ///         {
    ///             TimestreamConfiguration = new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationArgs
    ///             {
    ///                 DatabaseName = results.DatabaseName,
    ///                 TableName = resultsAwsTimestreamwriteTable.TableName,
    ///                 TimeColumn = "binned_timestamp",
    ///                 DimensionMappings = new[]
    ///                 {
    ///                     new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs
    ///                     {
    ///                         DimensionValueType = "VARCHAR",
    ///                         Name = "az",
    ///                     },
    ///                     new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs
    ///                     {
    ///                         DimensionValueType = "VARCHAR",
    ///                         Name = "region",
    ///                     },
    ///                     new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationDimensionMappingArgs
    ///                     {
    ///                         DimensionValueType = "VARCHAR",
    ///                         Name = "hostname",
    ///                     },
    ///                 },
    ///                 MultiMeasureMappings = new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsArgs
    ///                 {
    ///                     TargetMultiMeasureName = "multi-metrics",
    ///                     MultiMeasureAttributeMappings = new[]
    ///                     {
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "avg_cpu_utilization",
    ///                         },
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "p90_cpu_utilization",
    ///                         },
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "p95_cpu_utilization",
    ///                         },
    ///                         new Aws.TimestreamQuery.Inputs.ScheduledQueryTargetConfigurationTimestreamConfigurationMultiMeasureMappingsMultiMeasureAttributeMappingArgs
    ///                         {
    ///                             MeasureValueType = "DOUBLE",
    ///                             SourceColumn = "p99_cpu_utilization",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Timestream Query Scheduled Query using the `arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:timestreamquery/scheduledQuery:ScheduledQuery example arn:aws:timestream:us-west-2:012345678901:scheduled-query/tf-acc-test-7774188528604787105-e13659544fe66c8d
    /// ```
    /// </summary>
    [AwsResourceType("aws:timestreamquery/scheduledQuery:ScheduledQuery")]
    public partial class ScheduledQuery : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Scheduled Query.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Creation time for the scheduled query.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Configuration block for error reporting configuration. See below.
        /// </summary>
        [Output("errorReportConfiguration")]
        public Output<Outputs.ScheduledQueryErrorReportConfiguration> ErrorReportConfiguration { get; private set; } = null!;

        /// <summary>
        /// ARN for the IAM role that Timestream will assume when running the scheduled query.
        /// </summary>
        [Output("executionRoleArn")]
        public Output<string> ExecutionRoleArn { get; private set; } = null!;

        /// <summary>
        /// Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with "alias/". If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// Runtime summary for the last scheduled query run.
        /// </summary>
        [Output("lastRunSummaries")]
        public Output<ImmutableArray<Outputs.ScheduledQueryLastRunSummary>> LastRunSummaries { get; private set; } = null!;

        /// <summary>
        /// Name of the scheduled query.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Next time the scheduled query is scheduled to run.
        /// </summary>
        [Output("nextInvocationTime")]
        public Output<string> NextInvocationTime { get; private set; } = null!;

        /// <summary>
        /// Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
        /// </summary>
        [Output("notificationConfiguration")]
        public Output<Outputs.ScheduledQueryNotificationConfiguration> NotificationConfiguration { get; private set; } = null!;

        /// <summary>
        /// Last time the scheduled query was run.
        /// </summary>
        [Output("previousInvocationTime")]
        public Output<string> PreviousInvocationTime { get; private set; } = null!;

        /// <summary>
        /// Query string to run. Parameter names can be specified in the query string using the `@` character followed by an identifier. The named parameter `@scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `@scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `@scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
        /// </summary>
        [Output("queryString")]
        public Output<string> QueryString { get; private set; } = null!;

        /// <summary>
        /// Runtime summary for the last five failed scheduled query runs.
        /// </summary>
        [Output("recentlyFailedRuns")]
        public Output<ImmutableArray<Outputs.ScheduledQueryRecentlyFailedRun>> RecentlyFailedRuns { get; private set; } = null!;

        /// <summary>
        /// Configuration block for schedule configuration for the query. See below.
        /// </summary>
        [Output("scheduleConfiguration")]
        public Output<Outputs.ScheduledQueryScheduleConfiguration> ScheduleConfiguration { get; private set; } = null!;

        /// <summary>
        /// State of the scheduled query, either `ENABLED` or `DISABLED`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Configuration block for writing the result of a query. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("targetConfiguration")]
        public Output<Outputs.ScheduledQueryTargetConfiguration> TargetConfiguration { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ScheduledQueryTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduledQuery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduledQuery(string name, ScheduledQueryArgs args, CustomResourceOptions? options = null)
            : base("aws:timestreamquery/scheduledQuery:ScheduledQuery", name, args ?? new ScheduledQueryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScheduledQuery(string name, Input<string> id, ScheduledQueryState? state = null, CustomResourceOptions? options = null)
            : base("aws:timestreamquery/scheduledQuery:ScheduledQuery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduledQuery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduledQuery Get(string name, Input<string> id, ScheduledQueryState? state = null, CustomResourceOptions? options = null)
        {
            return new ScheduledQuery(name, id, state, options);
        }
    }

    public sealed class ScheduledQueryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for error reporting configuration. See below.
        /// </summary>
        [Input("errorReportConfiguration", required: true)]
        public Input<Inputs.ScheduledQueryErrorReportConfigurationArgs> ErrorReportConfiguration { get; set; } = null!;

        /// <summary>
        /// ARN for the IAM role that Timestream will assume when running the scheduled query.
        /// </summary>
        [Input("executionRoleArn", required: true)]
        public Input<string> ExecutionRoleArn { get; set; } = null!;

        /// <summary>
        /// Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with "alias/". If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("lastRunSummaries")]
        private InputList<Inputs.ScheduledQueryLastRunSummaryArgs>? _lastRunSummaries;

        /// <summary>
        /// Runtime summary for the last scheduled query run.
        /// </summary>
        public InputList<Inputs.ScheduledQueryLastRunSummaryArgs> LastRunSummaries
        {
            get => _lastRunSummaries ?? (_lastRunSummaries = new InputList<Inputs.ScheduledQueryLastRunSummaryArgs>());
            set => _lastRunSummaries = value;
        }

        /// <summary>
        /// Name of the scheduled query.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
        /// </summary>
        [Input("notificationConfiguration", required: true)]
        public Input<Inputs.ScheduledQueryNotificationConfigurationArgs> NotificationConfiguration { get; set; } = null!;

        /// <summary>
        /// Query string to run. Parameter names can be specified in the query string using the `@` character followed by an identifier. The named parameter `@scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `@scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `@scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
        /// </summary>
        [Input("queryString", required: true)]
        public Input<string> QueryString { get; set; } = null!;

        [Input("recentlyFailedRuns")]
        private InputList<Inputs.ScheduledQueryRecentlyFailedRunArgs>? _recentlyFailedRuns;

        /// <summary>
        /// Runtime summary for the last five failed scheduled query runs.
        /// </summary>
        public InputList<Inputs.ScheduledQueryRecentlyFailedRunArgs> RecentlyFailedRuns
        {
            get => _recentlyFailedRuns ?? (_recentlyFailedRuns = new InputList<Inputs.ScheduledQueryRecentlyFailedRunArgs>());
            set => _recentlyFailedRuns = value;
        }

        /// <summary>
        /// Configuration block for schedule configuration for the query. See below.
        /// </summary>
        [Input("scheduleConfiguration", required: true)]
        public Input<Inputs.ScheduledQueryScheduleConfigurationArgs> ScheduleConfiguration { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Configuration block for writing the result of a query. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetConfiguration", required: true)]
        public Input<Inputs.ScheduledQueryTargetConfigurationArgs> TargetConfiguration { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.ScheduledQueryTimeoutsArgs>? Timeouts { get; set; }

        public ScheduledQueryArgs()
        {
        }
        public static new ScheduledQueryArgs Empty => new ScheduledQueryArgs();
    }

    public sealed class ScheduledQueryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Scheduled Query.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Creation time for the scheduled query.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// Configuration block for error reporting configuration. See below.
        /// </summary>
        [Input("errorReportConfiguration")]
        public Input<Inputs.ScheduledQueryErrorReportConfigurationGetArgs>? ErrorReportConfiguration { get; set; }

        /// <summary>
        /// ARN for the IAM role that Timestream will assume when running the scheduled query.
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// Amazon KMS key used to encrypt the scheduled query resource, at-rest. If not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with "alias/". If `error_report_configuration` uses `SSE_KMS` as the encryption type, the same `kms_key_id` is used to encrypt the error report at rest.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("lastRunSummaries")]
        private InputList<Inputs.ScheduledQueryLastRunSummaryGetArgs>? _lastRunSummaries;

        /// <summary>
        /// Runtime summary for the last scheduled query run.
        /// </summary>
        public InputList<Inputs.ScheduledQueryLastRunSummaryGetArgs> LastRunSummaries
        {
            get => _lastRunSummaries ?? (_lastRunSummaries = new InputList<Inputs.ScheduledQueryLastRunSummaryGetArgs>());
            set => _lastRunSummaries = value;
        }

        /// <summary>
        /// Name of the scheduled query.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Next time the scheduled query is scheduled to run.
        /// </summary>
        [Input("nextInvocationTime")]
        public Input<string>? NextInvocationTime { get; set; }

        /// <summary>
        /// Configuration block for notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated, or when it is deleted. See below.
        /// </summary>
        [Input("notificationConfiguration")]
        public Input<Inputs.ScheduledQueryNotificationConfigurationGetArgs>? NotificationConfiguration { get; set; }

        /// <summary>
        /// Last time the scheduled query was run.
        /// </summary>
        [Input("previousInvocationTime")]
        public Input<string>? PreviousInvocationTime { get; set; }

        /// <summary>
        /// Query string to run. Parameter names can be specified in the query string using the `@` character followed by an identifier. The named parameter `@scheduled_runtime` is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the `schedule_configuration` parameter, will be the value of `@scheduled_runtime` paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the `@scheduled_runtime` parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
        /// </summary>
        [Input("queryString")]
        public Input<string>? QueryString { get; set; }

        [Input("recentlyFailedRuns")]
        private InputList<Inputs.ScheduledQueryRecentlyFailedRunGetArgs>? _recentlyFailedRuns;

        /// <summary>
        /// Runtime summary for the last five failed scheduled query runs.
        /// </summary>
        public InputList<Inputs.ScheduledQueryRecentlyFailedRunGetArgs> RecentlyFailedRuns
        {
            get => _recentlyFailedRuns ?? (_recentlyFailedRuns = new InputList<Inputs.ScheduledQueryRecentlyFailedRunGetArgs>());
            set => _recentlyFailedRuns = value;
        }

        /// <summary>
        /// Configuration block for schedule configuration for the query. See below.
        /// </summary>
        [Input("scheduleConfiguration")]
        public Input<Inputs.ScheduledQueryScheduleConfigurationGetArgs>? ScheduleConfiguration { get; set; }

        /// <summary>
        /// State of the scheduled query, either `ENABLED` or `DISABLED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Configuration block for writing the result of a query. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetConfiguration")]
        public Input<Inputs.ScheduledQueryTargetConfigurationGetArgs>? TargetConfiguration { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ScheduledQueryTimeoutsGetArgs>? Timeouts { get; set; }

        public ScheduledQueryState()
        {
        }
        public static new ScheduledQueryState Empty => new ScheduledQueryState();
    }
}
