// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.KinesisAnalyticsV2.Outputs
{

    [OutputType]
    public sealed class ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration
    {
        /// <summary>
        /// Describes the interval in milliseconds between checkpoint operations.
        /// </summary>
        public readonly int? CheckpointInterval;
        /// <summary>
        /// Describes whether checkpointing is enabled for a Flink-based Kinesis Data Analytics application.
        /// </summary>
        public readonly bool? CheckpointingEnabled;
        /// <summary>
        /// Describes whether the application uses Kinesis Data Analytics' default checkpointing behavior. Valid values: `CUSTOM`, `DEFAULT`. Set this attribute to `CUSTOM` in order for any specified `checkpointing_enabled`, `checkpoint_interval`, or `min_pause_between_checkpoints` attribute values to be effective. If this attribute is set to `DEFAULT`, the application will always use the following values:
        /// * `checkpointing_enabled = true`
        /// * `checkpoint_interval = 60000`
        /// * `min_pause_between_checkpoints = 5000`
        /// </summary>
        public readonly string ConfigurationType;
        /// <summary>
        /// Describes the minimum time in milliseconds after a checkpoint operation completes that a new checkpoint operation can start.
        /// </summary>
        public readonly int? MinPauseBetweenCheckpoints;

        [OutputConstructor]
        private ApplicationApplicationConfigurationFlinkApplicationConfigurationCheckpointConfiguration(
            int? checkpointInterval,

            bool? checkpointingEnabled,

            string configurationType,

            int? minPauseBetweenCheckpoints)
        {
            CheckpointInterval = checkpointInterval;
            CheckpointingEnabled = checkpointingEnabled;
            ConfigurationType = configurationType;
            MinPauseBetweenCheckpoints = minPauseBetweenCheckpoints;
        }
    }
}
