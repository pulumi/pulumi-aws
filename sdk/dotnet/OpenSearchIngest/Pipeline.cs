// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearchIngest
{
    /// <summary>
    /// Resource for managing an AWS OpenSearch Ingestion Pipeline.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetRegion.Invoke();
    /// 
    ///     var example = new Aws.Iam.Role("example", new()
    ///     {
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["version"] = "2012-10-17",
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["action"] = "sts:AssumeRole",
    ///                     ["effect"] = "Allow",
    ///                     ["sid"] = "",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = "osis-pipelines.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var examplePipeline = new Aws.OpenSearchIngest.Pipeline("example", new()
    ///     {
    ///         PipelineName = "example",
    ///         PipelineConfigurationBody = Output.Tuple(example.Arn, current).Apply(values =&gt;
    ///         {
    ///             var arn = values.Item1;
    ///             var current = values.Item2;
    ///             return @$"version: ""2""
    /// example-pipeline:
    ///   source:
    ///     http:
    ///       path: ""/example""
    ///   sink:
    ///     - s3:
    ///         aws:
    ///           sts_role_arn: ""{arn}""
    ///           region: ""{current.Apply(getRegionResult =&gt; getRegionResult.Name)}""
    ///         bucket: ""example""
    ///         threshold:
    ///           event_collect_timeout: ""60s""
    ///         codec:
    ///           ndjson:
    /// ";
    ///         }),
    ///         MaxUnits = 1,
    ///         MinUnits = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Using file function
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.OpenSearchIngest.Pipeline("example", new()
    ///     {
    ///         PipelineName = "example",
    ///         PipelineConfigurationBody = Std.File.Invoke(new()
    ///         {
    ///             Input = "example.yaml",
    ///         }).Apply(invoke =&gt; invoke.Result),
    ///         MaxUnits = 1,
    ///         MinUnits = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import OpenSearch Ingestion Pipeline using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:opensearchingest/pipeline:Pipeline example example
    /// ```
    /// </summary>
    [AwsResourceType("aws:opensearchingest/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Key-value pairs to configure persistent buffering for the pipeline. See `buffer_options` below.
        /// </summary>
        [Output("bufferOptions")]
        public Output<Outputs.PipelineBufferOptions?> BufferOptions { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryption_at_rest_options` below.
        /// </summary>
        [Output("encryptionAtRestOptions")]
        public Output<Outputs.PipelineEncryptionAtRestOptions?> EncryptionAtRestOptions { get; private set; } = null!;

        /// <summary>
        /// The list of ingestion endpoints for the pipeline, which you can send data to.
        /// </summary>
        [Output("ingestEndpointUrls")]
        public Output<ImmutableArray<string>> IngestEndpointUrls { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs to configure log publishing. See `log_publishing_options` below.
        /// </summary>
        [Output("logPublishingOptions")]
        public Output<Outputs.PipelineLogPublishingOptions?> LogPublishingOptions { get; private set; } = null!;

        /// <summary>
        /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Output("maxUnits")]
        public Output<int> MaxUnits { get; private set; } = null!;

        /// <summary>
        /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Output("minUnits")]
        public Output<int> MinUnits { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the pipeline.
        /// </summary>
        [Output("pipelineArn")]
        public Output<string> PipelineArn { get; private set; } = null!;

        /// <summary>
        /// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
        /// </summary>
        [Output("pipelineConfigurationBody")]
        public Output<string> PipelineConfigurationBody { get; private set; } = null!;

        /// <summary>
        /// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("pipelineName")]
        public Output<string> PipelineName { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the pipeline. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.PipelineTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpc_options` below.
        /// </summary>
        [Output("vpcOptions")]
        public Output<Outputs.PipelineVpcOptions?> VpcOptions { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearchingest/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearchingest/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key-value pairs to configure persistent buffering for the pipeline. See `buffer_options` below.
        /// </summary>
        [Input("bufferOptions")]
        public Input<Inputs.PipelineBufferOptionsArgs>? BufferOptions { get; set; }

        /// <summary>
        /// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryption_at_rest_options` below.
        /// </summary>
        [Input("encryptionAtRestOptions")]
        public Input<Inputs.PipelineEncryptionAtRestOptionsArgs>? EncryptionAtRestOptions { get; set; }

        /// <summary>
        /// Key-value pairs to configure log publishing. See `log_publishing_options` below.
        /// </summary>
        [Input("logPublishingOptions")]
        public Input<Inputs.PipelineLogPublishingOptionsArgs>? LogPublishingOptions { get; set; }

        /// <summary>
        /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Input("maxUnits", required: true)]
        public Input<int> MaxUnits { get; set; } = null!;

        /// <summary>
        /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Input("minUnits", required: true)]
        public Input<int> MinUnits { get; set; } = null!;

        /// <summary>
        /// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
        /// </summary>
        [Input("pipelineConfigurationBody", required: true)]
        public Input<string> PipelineConfigurationBody { get; set; } = null!;

        /// <summary>
        /// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("pipelineName", required: true)]
        public Input<string> PipelineName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the pipeline. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.PipelineTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpc_options` below.
        /// </summary>
        [Input("vpcOptions")]
        public Input<Inputs.PipelineVpcOptionsArgs>? VpcOptions { get; set; }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Key-value pairs to configure persistent buffering for the pipeline. See `buffer_options` below.
        /// </summary>
        [Input("bufferOptions")]
        public Input<Inputs.PipelineBufferOptionsGetArgs>? BufferOptions { get; set; }

        /// <summary>
        /// Key-value pairs to configure encryption for data that is written to a persistent buffer. See `encryption_at_rest_options` below.
        /// </summary>
        [Input("encryptionAtRestOptions")]
        public Input<Inputs.PipelineEncryptionAtRestOptionsGetArgs>? EncryptionAtRestOptions { get; set; }

        [Input("ingestEndpointUrls")]
        private InputList<string>? _ingestEndpointUrls;

        /// <summary>
        /// The list of ingestion endpoints for the pipeline, which you can send data to.
        /// </summary>
        public InputList<string> IngestEndpointUrls
        {
            get => _ingestEndpointUrls ?? (_ingestEndpointUrls = new InputList<string>());
            set => _ingestEndpointUrls = value;
        }

        /// <summary>
        /// Key-value pairs to configure log publishing. See `log_publishing_options` below.
        /// </summary>
        [Input("logPublishingOptions")]
        public Input<Inputs.PipelineLogPublishingOptionsGetArgs>? LogPublishingOptions { get; set; }

        /// <summary>
        /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Input("maxUnits")]
        public Input<int>? MaxUnits { get; set; }

        /// <summary>
        /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
        /// </summary>
        [Input("minUnits")]
        public Input<int>? MinUnits { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the pipeline.
        /// </summary>
        [Input("pipelineArn")]
        public Input<string>? PipelineArn { get; set; }

        /// <summary>
        /// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
        /// </summary>
        [Input("pipelineConfigurationBody")]
        public Input<string>? PipelineConfigurationBody { get; set; }

        /// <summary>
        /// The name of the OpenSearch Ingestion pipeline to create. Pipeline names are unique across the pipelines owned by an account within an AWS Region.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("pipelineName")]
        public Input<string>? PipelineName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the pipeline. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.PipelineTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See `vpc_options` below.
        /// </summary>
        [Input("vpcOptions")]
        public Input<Inputs.PipelineVpcOptionsGetArgs>? VpcOptions { get; set; }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
