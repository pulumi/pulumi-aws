// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Comprehend
{
    /// <summary>
    /// Resource for managing an AWS Comprehend Document Classifier.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var documents = new Aws.S3.BucketObjectv2("documents");
    /// 
    ///     // ...
    ///     var example = new Aws.Comprehend.DocumentClassifier("example", new()
    ///     {
    ///         DataAccessRoleArn = aws_iam_role.Example.Arn,
    ///         LanguageCode = "en",
    ///         InputDataConfig = new Aws.Comprehend.Inputs.DocumentClassifierInputDataConfigArgs
    ///         {
    ///             S3Uri = documents.Id.Apply(id =&gt; $"s3://{aws_s3_bucket.Test.Bucket}/{id}"),
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             aws_iam_role_policy.Example,
    ///         },
    ///     });
    /// 
    ///     var entities = new Aws.S3.BucketObjectv2("entities");
    /// 
    ///     // ...
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Comprehend Document Classifier can be imported using the ARN, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:comprehend/documentClassifier:DocumentClassifier example arn:aws:comprehend:us-west-2:123456789012:document_classifier/example
    /// ```
    /// </summary>
    [AwsResourceType("aws:comprehend/documentClassifier:DocumentClassifier")]
    public partial class DocumentClassifier : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Document Classifier version.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
        /// </summary>
        [Output("dataAccessRoleArn")]
        public Output<string> DataAccessRoleArn { get; private set; } = null!;

        /// <summary>
        /// Configuration for the training and testing data.
        /// See the `input_data_config` Configuration Block section below.
        /// </summary>
        [Output("inputDataConfig")]
        public Output<Outputs.DocumentClassifierInputDataConfig> InputDataConfig { get; private set; } = null!;

        /// <summary>
        /// Two-letter language code for the language.
        /// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
        /// </summary>
        [Output("languageCode")]
        public Output<string> LanguageCode { get; private set; } = null!;

        /// <summary>
        /// The document classification mode.
        /// One of `MULTI_CLASS` or `MULTI_LABEL`.
        /// `MULTI_CLASS` is also known as "Single Label" in the AWS Console.
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// KMS Key used to encrypt trained Document Classifiers.
        /// Can be a KMS Key ID or a KMS Key ARN.
        /// </summary>
        [Output("modelKmsKeyId")]
        public Output<string?> ModelKmsKeyId { get; private set; } = null!;

        /// <summary>
        /// Name for the Document Classifier.
        /// Has a maximum length of 63 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration for the output results of training.
        /// See the `output_data_config` Configuration Block section below.
        /// </summary>
        [Output("outputDataConfig")]
        public Output<Outputs.DocumentClassifierOutputDataConfig> OutputDataConfig { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Name for the version of the Document Classifier.
        /// Each version must have a unique name within the Document Classifier.
        /// If omitted, the provider will assign a random, unique version name.
        /// If explicitly set to `""`, no version name will be set.
        /// Has a maximum length of 63 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// Conflicts with `version_name_prefix`.
        /// </summary>
        [Output("versionName")]
        public Output<string> VersionName { get; private set; } = null!;

        /// <summary>
        /// Creates a unique version name beginning with the specified prefix.
        /// Has a maximum length of 37 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// Conflicts with `version_name`.
        /// </summary>
        [Output("versionNamePrefix")]
        public Output<string> VersionNamePrefix { get; private set; } = null!;

        /// <summary>
        /// KMS Key used to encrypt storage volumes during job processing.
        /// Can be a KMS Key ID or a KMS Key ARN.
        /// </summary>
        [Output("volumeKmsKeyId")]
        public Output<string?> VolumeKmsKeyId { get; private set; } = null!;

        /// <summary>
        /// Configuration parameters for VPC to contain Document Classifier resources.
        /// See the `vpc_config` Configuration Block section below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.DocumentClassifierVpcConfig?> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a DocumentClassifier resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DocumentClassifier(string name, DocumentClassifierArgs args, CustomResourceOptions? options = null)
            : base("aws:comprehend/documentClassifier:DocumentClassifier", name, args ?? new DocumentClassifierArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DocumentClassifier(string name, Input<string> id, DocumentClassifierState? state = null, CustomResourceOptions? options = null)
            : base("aws:comprehend/documentClassifier:DocumentClassifier", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DocumentClassifier resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DocumentClassifier Get(string name, Input<string> id, DocumentClassifierState? state = null, CustomResourceOptions? options = null)
        {
            return new DocumentClassifier(name, id, state, options);
        }
    }

    public sealed class DocumentClassifierArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
        /// </summary>
        [Input("dataAccessRoleArn", required: true)]
        public Input<string> DataAccessRoleArn { get; set; } = null!;

        /// <summary>
        /// Configuration for the training and testing data.
        /// See the `input_data_config` Configuration Block section below.
        /// </summary>
        [Input("inputDataConfig", required: true)]
        public Input<Inputs.DocumentClassifierInputDataConfigArgs> InputDataConfig { get; set; } = null!;

        /// <summary>
        /// Two-letter language code for the language.
        /// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
        /// </summary>
        [Input("languageCode", required: true)]
        public Input<string> LanguageCode { get; set; } = null!;

        /// <summary>
        /// The document classification mode.
        /// One of `MULTI_CLASS` or `MULTI_LABEL`.
        /// `MULTI_CLASS` is also known as "Single Label" in the AWS Console.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// KMS Key used to encrypt trained Document Classifiers.
        /// Can be a KMS Key ID or a KMS Key ARN.
        /// </summary>
        [Input("modelKmsKeyId")]
        public Input<string>? ModelKmsKeyId { get; set; }

        /// <summary>
        /// Name for the Document Classifier.
        /// Has a maximum length of 63 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration for the output results of training.
        /// See the `output_data_config` Configuration Block section below.
        /// </summary>
        [Input("outputDataConfig")]
        public Input<Inputs.DocumentClassifierOutputDataConfigArgs>? OutputDataConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Name for the version of the Document Classifier.
        /// Each version must have a unique name within the Document Classifier.
        /// If omitted, the provider will assign a random, unique version name.
        /// If explicitly set to `""`, no version name will be set.
        /// Has a maximum length of 63 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// Conflicts with `version_name_prefix`.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        /// <summary>
        /// Creates a unique version name beginning with the specified prefix.
        /// Has a maximum length of 37 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// Conflicts with `version_name`.
        /// </summary>
        [Input("versionNamePrefix")]
        public Input<string>? VersionNamePrefix { get; set; }

        /// <summary>
        /// KMS Key used to encrypt storage volumes during job processing.
        /// Can be a KMS Key ID or a KMS Key ARN.
        /// </summary>
        [Input("volumeKmsKeyId")]
        public Input<string>? VolumeKmsKeyId { get; set; }

        /// <summary>
        /// Configuration parameters for VPC to contain Document Classifier resources.
        /// See the `vpc_config` Configuration Block section below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.DocumentClassifierVpcConfigArgs>? VpcConfig { get; set; }

        public DocumentClassifierArgs()
        {
        }
        public static new DocumentClassifierArgs Empty => new DocumentClassifierArgs();
    }

    public sealed class DocumentClassifierState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Document Classifier version.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The ARN for an IAM Role which allows Comprehend to read the training and testing data.
        /// </summary>
        [Input("dataAccessRoleArn")]
        public Input<string>? DataAccessRoleArn { get; set; }

        /// <summary>
        /// Configuration for the training and testing data.
        /// See the `input_data_config` Configuration Block section below.
        /// </summary>
        [Input("inputDataConfig")]
        public Input<Inputs.DocumentClassifierInputDataConfigGetArgs>? InputDataConfig { get; set; }

        /// <summary>
        /// Two-letter language code for the language.
        /// One of `en`, `es`, `fr`, `it`, `de`, or `pt`.
        /// </summary>
        [Input("languageCode")]
        public Input<string>? LanguageCode { get; set; }

        /// <summary>
        /// The document classification mode.
        /// One of `MULTI_CLASS` or `MULTI_LABEL`.
        /// `MULTI_CLASS` is also known as "Single Label" in the AWS Console.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// KMS Key used to encrypt trained Document Classifiers.
        /// Can be a KMS Key ID or a KMS Key ARN.
        /// </summary>
        [Input("modelKmsKeyId")]
        public Input<string>? ModelKmsKeyId { get; set; }

        /// <summary>
        /// Name for the Document Classifier.
        /// Has a maximum length of 63 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration for the output results of training.
        /// See the `output_data_config` Configuration Block section below.
        /// </summary>
        [Input("outputDataConfig")]
        public Input<Inputs.DocumentClassifierOutputDataConfigGetArgs>? OutputDataConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` Configuration Block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Name for the version of the Document Classifier.
        /// Each version must have a unique name within the Document Classifier.
        /// If omitted, the provider will assign a random, unique version name.
        /// If explicitly set to `""`, no version name will be set.
        /// Has a maximum length of 63 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// Conflicts with `version_name_prefix`.
        /// </summary>
        [Input("versionName")]
        public Input<string>? VersionName { get; set; }

        /// <summary>
        /// Creates a unique version name beginning with the specified prefix.
        /// Has a maximum length of 37 characters.
        /// Can contain upper- and lower-case letters, numbers, and hypen (`-`).
        /// Conflicts with `version_name`.
        /// </summary>
        [Input("versionNamePrefix")]
        public Input<string>? VersionNamePrefix { get; set; }

        /// <summary>
        /// KMS Key used to encrypt storage volumes during job processing.
        /// Can be a KMS Key ID or a KMS Key ARN.
        /// </summary>
        [Input("volumeKmsKeyId")]
        public Input<string>? VolumeKmsKeyId { get; set; }

        /// <summary>
        /// Configuration parameters for VPC to contain Document Classifier resources.
        /// See the `vpc_config` Configuration Block section below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.DocumentClassifierVpcConfigGetArgs>? VpcConfig { get; set; }

        public DocumentClassifierState()
        {
        }
        public static new DocumentClassifierState Empty => new DocumentClassifierState();
    }
}
