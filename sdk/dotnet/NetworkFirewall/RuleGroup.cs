// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.NetworkFirewall
{
    /// <summary>
    /// Provides an AWS Network Firewall Rule Group Resource
    /// 
    /// ## Example Usage
    /// ### Stateful Inspection
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.NetworkFirewall.RuleGroup("example", new Aws.NetworkFirewall.RuleGroupArgs
    ///         {
    ///             Capacity = 100,
    ///             RuleGroup = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupArgs
    ///             {
    ///                 RulesSource = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupRulesSourceArgs
    ///                 {
    ///                     RulesSourceList = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupRulesSourceRulesSourceListArgs
    ///                     {
    ///                         GeneratedRulesType = "DENYLIST",
    ///                         TargetTypes = 
    ///                         {
    ///                             "HTTP_HOST",
    ///                         },
    ///                         Targets = 
    ///                         {
    ///                             "test.example.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "Tag1", "Value1" },
    ///                 { "Tag2", "Value2" },
    ///             },
    ///             Type = "STATEFUL",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Stateful Inspection compatible with intrusion detection systems like Snort or Suricata
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.NetworkFirewall.RuleGroup("example", new Aws.NetworkFirewall.RuleGroupArgs
    ///         {
    ///             Capacity = 100,
    ///             RuleGroup = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupArgs
    ///             {
    ///                 RulesSource = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupRulesSourceArgs
    ///                 {
    ///                     StatefulRule = 
    ///                     {
    ///                         
    ///                         {
    ///                             { "action", "DROP" },
    ///                             { "header", 
    ///                             {
    ///                                 { "destination", "124.1.1.24/32" },
    ///                                 { "destinationPort", 53 },
    ///                                 { "direction", "ANY" },
    ///                                 { "protocol", "TCP" },
    ///                                 { "source", "1.2.3.4/32" },
    ///                                 { "sourcePort", 53 },
    ///                             } },
    ///                             { "ruleOption", 
    ///                             {
    ///                                 
    ///                                 {
    ///                                     { "keyword", "sid:1" },
    ///                                 },
    ///                             } },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "Tag1", "Value1" },
    ///                 { "Tag2", "Value2" },
    ///             },
    ///             Type = "STATEFUL",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Stateful Inspection from rules specifications defined in Suricata flat format
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.NetworkFirewall.RuleGroup("example", new Aws.NetworkFirewall.RuleGroupArgs
    ///         {
    ///             Capacity = 100,
    ///             Type = "STATEFUL",
    ///             Rules = File.ReadAllText("example.rules"),
    ///             Tags = 
    ///             {
    ///                 { "Tag1", "Value1" },
    ///                 { "Tag2", "Value2" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Stateless Inspection with a Custom Action
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.NetworkFirewall.RuleGroup("example", new Aws.NetworkFirewall.RuleGroupArgs
    ///         {
    ///             Capacity = 100,
    ///             Description = "Stateless Rate Limiting Rule",
    ///             RuleGroup = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupArgs
    ///             {
    ///                 RulesSource = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupRulesSourceArgs
    ///                 {
    ///                     StatelessRulesAndCustomActions = new Aws.NetworkFirewall.Inputs.RuleGroupRuleGroupRulesSourceStatelessRulesAndCustomActionsArgs
    ///                     {
    ///                         CustomAction = 
    ///                         {
    ///                             
    ///                             {
    ///                                 { "actionDefinition", 
    ///                                 {
    ///                                     { "publishMetricAction", 
    ///                                     {
    ///                                         { "dimension", 
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "value", "2" },
    ///                                             },
    ///                                         } },
    ///                                     } },
    ///                                 } },
    ///                                 { "actionName", "ExampleMetricsAction" },
    ///                             },
    ///                         },
    ///                         StatelessRule = 
    ///                         {
    ///                             
    ///                             {
    ///                                 { "priority", 1 },
    ///                                 { "ruleDefinition", 
    ///                                 {
    ///                                     { "actions", 
    ///                                     {
    ///                                         "aws:pass",
    ///                                         "ExampleMetricsAction",
    ///                                     } },
    ///                                     { "matchAttributes", 
    ///                                     {
    ///                                         { "destination", 
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "addressDefinition", "124.1.1.5/32" },
    ///                                             },
    ///                                         } },
    ///                                         { "destinationPort", 
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "fromPort", 443 },
    ///                                                 { "toPort", 443 },
    ///                                             },
    ///                                         } },
    ///                                         { "protocols", 
    ///                                         {
    ///                                             6,
    ///                                         } },
    ///                                         { "source", 
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "addressDefinition", "1.2.3.4/32" },
    ///                                             },
    ///                                         } },
    ///                                         { "sourcePort", 
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "fromPort", 443 },
    ///                                                 { "toPort", 443 },
    ///                                             },
    ///                                         } },
    ///                                         { "tcpFlag", 
    ///                                         {
    ///                                             
    ///                                             {
    ///                                                 { "flags", 
    ///                                                 {
    ///                                                     "SYN",
    ///                                                 } },
    ///                                                 { "masks", 
    ///                                                 {
    ///                                                     "SYN",
    ///                                                     "ACK",
    ///                                                 } },
    ///                                             },
    ///                                         } },
    ///                                     } },
    ///                                 } },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "Tag1", "Value1" },
    ///                 { "Tag2", "Value2" },
    ///             },
    ///             Type = "STATELESS",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Network Firewall Rule Groups can be imported using their `ARN`.
    /// 
    /// ```sh
    ///  $ pulumi import aws:networkfirewall/ruleGroup:RuleGroup example arn:aws:network-firewall:us-west-1:123456789012:stateful-rulegroup/example
    /// ```
    /// </summary>
    public partial class RuleGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) that identifies the rule group.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
        /// </summary>
        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// A friendly description of the rule group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A friendly name of the rule group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
        /// </summary>
        [Output("ruleGroup")]
        public Output<Outputs.RuleGroupRuleGroup> RuleGroupConfiguration { get; private set; } = null!;

        /// <summary>
        /// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
        /// </summary>
        [Output("rules")]
        public Output<string?> Rules { get; private set; } = null!;

        /// <summary>
        /// A map of key:value pairs to associate with the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A string token used when updating the rule group.
        /// </summary>
        [Output("updateToken")]
        public Output<string> UpdateToken { get; private set; } = null!;


        /// <summary>
        /// Create a RuleGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleGroup(string name, RuleGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:networkfirewall/ruleGroup:RuleGroup", name, args ?? new RuleGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleGroup(string name, Input<string> id, RuleGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:networkfirewall/ruleGroup:RuleGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleGroup Get(string name, Input<string> id, RuleGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleGroup(name, id, state, options);
        }
    }

    public sealed class RuleGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
        /// </summary>
        [Input("capacity", required: true)]
        public Input<int> Capacity { get; set; } = null!;

        /// <summary>
        /// A friendly description of the rule group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A friendly name of the rule group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
        /// </summary>
        [Input("ruleGroup")]
        public Input<Inputs.RuleGroupRuleGroupArgs>? RuleGroupConfiguration { get; set; }

        /// <summary>
        /// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
        /// </summary>
        [Input("rules")]
        public Input<string>? Rules { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of key:value pairs to associate with the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public RuleGroupArgs()
        {
        }
    }

    public sealed class RuleGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) that identifies the rule group.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The maximum number of operating resources that this rule group can use. For a stateless rule group, the capacity required is the sum of the capacity requirements of the individual rules. For a stateful rule group, the minimum capacity required is the number of individual rules.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// A friendly description of the rule group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A friendly name of the rule group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A configuration block that defines the rule group rules. Required unless `rules` is specified. See Rule Group below for details.
        /// </summary>
        [Input("ruleGroup")]
        public Input<Inputs.RuleGroupRuleGroupGetArgs>? RuleGroupConfiguration { get; set; }

        /// <summary>
        /// The stateful rule group rules specifications in Suricata file format, with one rule per line. Use this to import your existing Suricata compatible rule groups. Required unless `rule_group` is specified.
        /// </summary>
        [Input("rules")]
        public Input<string>? Rules { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of key:value pairs to associate with the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether the rule group is stateless (containing stateless rules) or stateful (containing stateful rules). Valid values include: `STATEFUL` or `STATELESS`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A string token used when updating the rule group.
        /// </summary>
        [Input("updateToken")]
        public Input<string>? UpdateToken { get; set; }

        public RuleGroupState()
        {
        }
    }
}
