// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Acm
{
    /// <summary>
    /// The ACM certificate resource allows requesting and management of certificates
    /// from the Amazon Certificate Manager.
    /// 
    /// ACM certificates can be created in three ways:
    /// Amazon-issued, where AWS provides the certificate authority and automatically manages renewal;
    /// imported certificates, issued by another certificate authority;
    /// and private certificates, issued using an ACM Private Certificate Authority.
    /// 
    /// ## Amazon-Issued Certificates
    /// 
    /// For Amazon-issued certificates, this resource deals with requesting certificates and managing their attributes and life-cycle.
    /// This resource does not deal with validation of a certificate but can provide inputs
    /// for other resources implementing the validation.
    /// It does not wait for a certificate to be issued.
    /// Use a `aws.acm.CertificateValidation` resource for this.
    /// 
    /// Most commonly, this resource is used together with `aws.route53.Record` and
    /// `aws.acm.CertificateValidation` to request a DNS validated certificate,
    /// deploy the required validation records and wait for validation to complete.
    /// 
    /// Domain validation through email is also supported but should be avoided as it requires a manual step outside of this provider.
    /// 
    /// ## Certificates Imported from Other Certificate Authority
    /// 
    /// Imported certificates can be used to make certificates created with an external certificate authority available for AWS services.
    /// 
    /// As they are not managed by AWS, imported certificates are not eligible for automatic renewal.
    /// New certificate materials can be supplied to an existing imported certificate to update it in place.
    /// 
    /// ## Private Certificates
    /// 
    /// Private certificates are issued by an ACM Private Cerificate Authority, which can be created using the resource type `aws.acmpca.CertificateAuthority`.
    /// 
    /// Private certificates created using this resource are eligible for managed renewal if they have been exported or associated with another AWS service.
    /// See [managed renewal documentation](https://docs.aws.amazon.com/acm/latest/userguide/managed-renewal.html) for more information.
    /// By default, a certificate is valid for 395 days and the managed renewal process will start 60 days before expiration.
    /// To renew the certificate earlier than 60 days before expiration, configure `early_renewal_duration`.
    /// 
    /// ## Example Usage
    /// ### Create Certificate
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cert = new Aws.Acm.Certificate("cert", new()
    ///     {
    ///         DomainName = "example.com",
    ///         Tags = 
    ///         {
    ///             { "Environment", "test" },
    ///         },
    ///         ValidationMethod = "DNS",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Custom Domain Validation Options
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cert = new Aws.Acm.Certificate("cert", new()
    ///     {
    ///         DomainName = "testing.example.com",
    ///         ValidationMethod = "EMAIL",
    ///         ValidationOptions = new[]
    ///         {
    ///             new Aws.Acm.Inputs.CertificateValidationOptionArgs
    ///             {
    ///                 DomainName = "testing.example.com",
    ///                 ValidationDomain = "example.com",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Existing Certificate Body Import
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Tls = Pulumi.Tls;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplePrivateKey = new Tls.PrivateKey("examplePrivateKey", new()
    ///     {
    ///         Algorithm = "RSA",
    ///     });
    /// 
    ///     var exampleSelfSignedCert = new Tls.SelfSignedCert("exampleSelfSignedCert", new()
    ///     {
    ///         KeyAlgorithm = "RSA",
    ///         PrivateKeyPem = examplePrivateKey.PrivateKeyPem,
    ///         Subjects = new[]
    ///         {
    ///             new Tls.Inputs.SelfSignedCertSubjectArgs
    ///             {
    ///                 CommonName = "example.com",
    ///                 Organization = "ACME Examples, Inc",
    ///             },
    ///         },
    ///         ValidityPeriodHours = 12,
    ///         AllowedUses = new[]
    ///         {
    ///             "key_encipherment",
    ///             "digital_signature",
    ///             "server_auth",
    ///         },
    ///     });
    /// 
    ///     var cert = new Aws.Acm.Certificate("cert", new()
    ///     {
    ///         PrivateKey = examplePrivateKey.PrivateKeyPem,
    ///         CertificateBody = exampleSelfSignedCert.CertPem,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Certificates can be imported using their ARN, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:acm/certificate:Certificate cert arn:aws:acm:eu-central-1:123456789012:certificate/7e7a28d2-163f-4b8f-b9cd-822f96c08d6a
    /// ```
    /// </summary>
    [AwsResourceType("aws:acm/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the certificate
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// ARN of an ACM PCA
        /// </summary>
        [Output("certificateAuthorityArn")]
        public Output<string?> CertificateAuthorityArn { get; private set; } = null!;

        /// <summary>
        /// Certificate's PEM-formatted public key
        /// </summary>
        [Output("certificateBody")]
        public Output<string?> CertificateBody { get; private set; } = null!;

        /// <summary>
        /// Certificate's PEM-formatted chain
        /// * Creating a private CA issued certificate
        /// </summary>
        [Output("certificateChain")]
        public Output<string?> CertificateChain { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name (FQDN) in the certificate.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Set of domain validation objects which can be used to complete certificate validation.
        /// Can have more than one element, e.g., if SANs are defined.
        /// Only set if `DNS`-validation was used.
        /// </summary>
        [Output("domainValidationOptions")]
        public Output<ImmutableArray<Outputs.CertificateDomainValidationOption>> DomainValidationOptions { get; private set; } = null!;

        /// <summary>
        /// Amount of time to start automatic renewal process before expiration.
        /// Has no effect if less than 60 days.
        /// Represented by either
        /// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
        /// or a string such as `2160h`.
        /// </summary>
        [Output("earlyRenewalDuration")]
        public Output<string?> EarlyRenewalDuration { get; private set; } = null!;

        /// <summary>
        /// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
        /// </summary>
        [Output("keyAlgorithm")]
        public Output<string> KeyAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Expiration date and time of the certificate.
        /// </summary>
        [Output("notAfter")]
        public Output<string> NotAfter { get; private set; } = null!;

        /// <summary>
        /// Start of the validity period of the certificate.
        /// </summary>
        [Output("notBefore")]
        public Output<string> NotBefore { get; private set; } = null!;

        /// <summary>
        /// Configuration block used to set certificate options. Detailed below.
        /// </summary>
        [Output("options")]
        public Output<Outputs.CertificateOptions?> Options { get; private set; } = null!;

        /// <summary>
        /// `true` if a Private certificate eligible for managed renewal is within the `early_renewal_duration` period.
        /// </summary>
        [Output("pendingRenewal")]
        public Output<bool> PendingRenewal { get; private set; } = null!;

        /// <summary>
        /// Certificate's PEM-formatted private key
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Whether the certificate is eligible for managed renewal.
        /// </summary>
        [Output("renewalEligibility")]
        public Output<string> RenewalEligibility { get; private set; } = null!;

        /// <summary>
        /// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
        /// </summary>
        [Output("renewalSummaries")]
        public Output<ImmutableArray<Outputs.CertificateRenewalSummary>> RenewalSummaries { get; private set; } = null!;

        /// <summary>
        /// Status of the certificate.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Set of domains that should be SANs in the issued certificate.
        /// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
        /// </summary>
        [Output("subjectAlternativeNames")]
        public Output<ImmutableArray<string>> SubjectAlternativeNames { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Source of the certificate.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// List of addresses that received a validation email. Only set if `EMAIL` validation was used.
        /// </summary>
        [Output("validationEmails")]
        public Output<ImmutableArray<string>> ValidationEmails { get; private set; } = null!;

        /// <summary>
        /// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.
        /// </summary>
        [Output("validationMethod")]
        public Output<string> ValidationMethod { get; private set; } = null!;

        /// <summary>
        /// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
        /// * Importing an existing certificate
        /// </summary>
        [Output("validationOptions")]
        public Output<ImmutableArray<Outputs.CertificateValidationOption>> ValidationOptions { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:acm/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("aws:acm/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of an ACM PCA
        /// </summary>
        [Input("certificateAuthorityArn")]
        public Input<string>? CertificateAuthorityArn { get; set; }

        /// <summary>
        /// Certificate's PEM-formatted public key
        /// </summary>
        [Input("certificateBody")]
        public Input<string>? CertificateBody { get; set; }

        /// <summary>
        /// Certificate's PEM-formatted chain
        /// * Creating a private CA issued certificate
        /// </summary>
        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        /// <summary>
        /// Fully qualified domain name (FQDN) in the certificate.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Amount of time to start automatic renewal process before expiration.
        /// Has no effect if less than 60 days.
        /// Represented by either
        /// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
        /// or a string such as `2160h`.
        /// </summary>
        [Input("earlyRenewalDuration")]
        public Input<string>? EarlyRenewalDuration { get; set; }

        /// <summary>
        /// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// Configuration block used to set certificate options. Detailed below.
        /// </summary>
        [Input("options")]
        public Input<Inputs.CertificateOptionsArgs>? Options { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// Certificate's PEM-formatted private key
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("subjectAlternativeNames")]
        private InputList<string>? _subjectAlternativeNames;

        /// <summary>
        /// Set of domains that should be SANs in the issued certificate.
        /// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
        /// </summary>
        public InputList<string> SubjectAlternativeNames
        {
            get => _subjectAlternativeNames ?? (_subjectAlternativeNames = new InputList<string>());
            set => _subjectAlternativeNames = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.
        /// </summary>
        [Input("validationMethod")]
        public Input<string>? ValidationMethod { get; set; }

        [Input("validationOptions")]
        private InputList<Inputs.CertificateValidationOptionArgs>? _validationOptions;

        /// <summary>
        /// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
        /// * Importing an existing certificate
        /// </summary>
        public InputList<Inputs.CertificateValidationOptionArgs> ValidationOptions
        {
            get => _validationOptions ?? (_validationOptions = new InputList<Inputs.CertificateValidationOptionArgs>());
            set => _validationOptions = value;
        }

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the certificate
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ARN of an ACM PCA
        /// </summary>
        [Input("certificateAuthorityArn")]
        public Input<string>? CertificateAuthorityArn { get; set; }

        /// <summary>
        /// Certificate's PEM-formatted public key
        /// </summary>
        [Input("certificateBody")]
        public Input<string>? CertificateBody { get; set; }

        /// <summary>
        /// Certificate's PEM-formatted chain
        /// * Creating a private CA issued certificate
        /// </summary>
        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        /// <summary>
        /// Fully qualified domain name (FQDN) in the certificate.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("domainValidationOptions")]
        private InputList<Inputs.CertificateDomainValidationOptionGetArgs>? _domainValidationOptions;

        /// <summary>
        /// Set of domain validation objects which can be used to complete certificate validation.
        /// Can have more than one element, e.g., if SANs are defined.
        /// Only set if `DNS`-validation was used.
        /// </summary>
        public InputList<Inputs.CertificateDomainValidationOptionGetArgs> DomainValidationOptions
        {
            get => _domainValidationOptions ?? (_domainValidationOptions = new InputList<Inputs.CertificateDomainValidationOptionGetArgs>());
            set => _domainValidationOptions = value;
        }

        /// <summary>
        /// Amount of time to start automatic renewal process before expiration.
        /// Has no effect if less than 60 days.
        /// Represented by either
        /// a subset of [RFC 3339 duration](https://www.rfc-editor.org/rfc/rfc3339) supporting years, months, and days (e.g., `P90D`),
        /// or a string such as `2160h`.
        /// </summary>
        [Input("earlyRenewalDuration")]
        public Input<string>? EarlyRenewalDuration { get; set; }

        /// <summary>
        /// Specifies the algorithm of the public and private key pair that your Amazon issued certificate uses to encrypt data. See [ACM Certificate characteristics](https://docs.aws.amazon.com/acm/latest/userguide/acm-certificate.html#algorithms) for more details.
        /// </summary>
        [Input("keyAlgorithm")]
        public Input<string>? KeyAlgorithm { get; set; }

        /// <summary>
        /// Expiration date and time of the certificate.
        /// </summary>
        [Input("notAfter")]
        public Input<string>? NotAfter { get; set; }

        /// <summary>
        /// Start of the validity period of the certificate.
        /// </summary>
        [Input("notBefore")]
        public Input<string>? NotBefore { get; set; }

        /// <summary>
        /// Configuration block used to set certificate options. Detailed below.
        /// </summary>
        [Input("options")]
        public Input<Inputs.CertificateOptionsGetArgs>? Options { get; set; }

        /// <summary>
        /// `true` if a Private certificate eligible for managed renewal is within the `early_renewal_duration` period.
        /// </summary>
        [Input("pendingRenewal")]
        public Input<bool>? PendingRenewal { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// Certificate's PEM-formatted private key
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Whether the certificate is eligible for managed renewal.
        /// </summary>
        [Input("renewalEligibility")]
        public Input<string>? RenewalEligibility { get; set; }

        [Input("renewalSummaries")]
        private InputList<Inputs.CertificateRenewalSummaryGetArgs>? _renewalSummaries;

        /// <summary>
        /// Contains information about the status of ACM's [managed renewal](https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html) for the certificate.
        /// </summary>
        public InputList<Inputs.CertificateRenewalSummaryGetArgs> RenewalSummaries
        {
            get => _renewalSummaries ?? (_renewalSummaries = new InputList<Inputs.CertificateRenewalSummaryGetArgs>());
            set => _renewalSummaries = value;
        }

        /// <summary>
        /// Status of the certificate.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subjectAlternativeNames")]
        private InputList<string>? _subjectAlternativeNames;

        /// <summary>
        /// Set of domains that should be SANs in the issued certificate.
        /// To remove all elements of a previously configured list, set this value equal to an empty list (`[]`)
        /// </summary>
        public InputList<string> SubjectAlternativeNames
        {
            get => _subjectAlternativeNames ?? (_subjectAlternativeNames = new InputList<string>());
            set => _subjectAlternativeNames = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Source of the certificate.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("validationEmails")]
        private InputList<string>? _validationEmails;

        /// <summary>
        /// List of addresses that received a validation email. Only set if `EMAIL` validation was used.
        /// </summary>
        public InputList<string> ValidationEmails
        {
            get => _validationEmails ?? (_validationEmails = new InputList<string>());
            set => _validationEmails = value;
        }

        /// <summary>
        /// Which method to use for validation. `DNS` or `EMAIL` are valid, `NONE` can be used for certificates that were imported into ACM and then into the provider.
        /// </summary>
        [Input("validationMethod")]
        public Input<string>? ValidationMethod { get; set; }

        [Input("validationOptions")]
        private InputList<Inputs.CertificateValidationOptionGetArgs>? _validationOptions;

        /// <summary>
        /// Configuration block used to specify information about the initial validation of each domain name. Detailed below.
        /// * Importing an existing certificate
        /// </summary>
        public InputList<Inputs.CertificateValidationOptionGetArgs> ValidationOptions
        {
            get => _validationOptions ?? (_validationOptions = new InputList<Inputs.CertificateValidationOptionGetArgs>());
            set => _validationOptions = value;
        }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
