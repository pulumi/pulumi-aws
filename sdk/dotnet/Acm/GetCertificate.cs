// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Acm
{
    public static class GetCertificate
    {
        /// <summary>
        /// Use this data source to get the ARN of a certificate in AWS Certificate
        /// Manager (ACM), you can reference
        /// it by domain without having to hard code the ARNs as input.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const issued = aws.acm.getCertificate({
        ///     domain: "tf.example.com",
        ///     statuses: ["ISSUED"],
        /// });
        /// const amazonIssued = aws.acm.getCertificate({
        ///     domain: "tf.example.com",
        ///     mostRecent: true,
        ///     types: ["AMAZON_ISSUED"],
        /// });
        /// const rsa4096 = aws.acm.getCertificate({
        ///     domain: "tf.example.com",
        ///     keyTypes: ["RSA_4096"],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// issued = aws.acm.get_certificate(domain="tf.example.com",
        ///     statuses=["ISSUED"])
        /// amazon_issued = aws.acm.get_certificate(domain="tf.example.com",
        ///     most_recent=True,
        ///     types=["AMAZON_ISSUED"])
        /// rsa4096 = aws.acm.get_certificate(domain="tf.example.com",
        ///     key_types=["RSA_4096"])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var issued = Aws.Acm.GetCertificate.Invoke(new()
        ///     {
        ///         Domain = "tf.example.com",
        ///         Statuses = new[]
        ///         {
        ///             "ISSUED",
        ///         },
        ///     });
        /// 
        ///     var amazonIssued = Aws.Acm.GetCertificate.Invoke(new()
        ///     {
        ///         Domain = "tf.example.com",
        ///         MostRecent = true,
        ///         Types = new[]
        ///         {
        ///             "AMAZON_ISSUED",
        ///         },
        ///     });
        /// 
        ///     var rsa4096 = Aws.Acm.GetCertificate.Invoke(new()
        ///     {
        ///         Domain = "tf.example.com",
        ///         KeyTypes = new[]
        ///         {
        ///             "RSA_4096",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := acm.LookupCertificate(ctx, &amp;acm.LookupCertificateArgs{
        /// 			Domain: "tf.example.com",
        /// 			Statuses: []string{
        /// 				"ISSUED",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = acm.LookupCertificate(ctx, &amp;acm.LookupCertificateArgs{
        /// 			Domain:     "tf.example.com",
        /// 			MostRecent: pulumi.BoolRef(true),
        /// 			Types: []string{
        /// 				"AMAZON_ISSUED",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = acm.LookupCertificate(ctx, &amp;acm.LookupCertificateArgs{
        /// 			Domain: "tf.example.com",
        /// 			KeyTypes: []string{
        /// 				"RSA_4096",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.acm.AcmFunctions;
        /// import com.pulumi.aws.acm.inputs.GetCertificateArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var issued = AcmFunctions.getCertificate(GetCertificateArgs.builder()
        ///             .domain("tf.example.com")
        ///             .statuses("ISSUED")
        ///             .build());
        /// 
        ///         final var amazonIssued = AcmFunctions.getCertificate(GetCertificateArgs.builder()
        ///             .domain("tf.example.com")
        ///             .mostRecent(true)
        ///             .types("AMAZON_ISSUED")
        ///             .build());
        /// 
        ///         final var rsa4096 = AcmFunctions.getCertificate(GetCertificateArgs.builder()
        ///             .domain("tf.example.com")
        ///             .keyTypes("RSA_4096")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   issued:
        ///     fn::invoke:
        ///       Function: aws:acm:getCertificate
        ///       Arguments:
        ///         domain: tf.example.com
        ///         statuses:
        ///           - ISSUED
        ///   amazonIssued:
        ///     fn::invoke:
        ///       Function: aws:acm:getCertificate
        ///       Arguments:
        ///         domain: tf.example.com
        ///         mostRecent: true
        ///         types:
        ///           - AMAZON_ISSUED
        ///   rsa4096:
        ///     fn::invoke:
        ///       Function: aws:acm:getCertificate
        ///       Arguments:
        ///         domain: tf.example.com
        ///         keyTypes:
        ///           - RSA_4096
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("aws:acm/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the ARN of a certificate in AWS Certificate
        /// Manager (ACM), you can reference
        /// it by domain without having to hard code the ARNs as input.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const issued = aws.acm.getCertificate({
        ///     domain: "tf.example.com",
        ///     statuses: ["ISSUED"],
        /// });
        /// const amazonIssued = aws.acm.getCertificate({
        ///     domain: "tf.example.com",
        ///     mostRecent: true,
        ///     types: ["AMAZON_ISSUED"],
        /// });
        /// const rsa4096 = aws.acm.getCertificate({
        ///     domain: "tf.example.com",
        ///     keyTypes: ["RSA_4096"],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// issued = aws.acm.get_certificate(domain="tf.example.com",
        ///     statuses=["ISSUED"])
        /// amazon_issued = aws.acm.get_certificate(domain="tf.example.com",
        ///     most_recent=True,
        ///     types=["AMAZON_ISSUED"])
        /// rsa4096 = aws.acm.get_certificate(domain="tf.example.com",
        ///     key_types=["RSA_4096"])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var issued = Aws.Acm.GetCertificate.Invoke(new()
        ///     {
        ///         Domain = "tf.example.com",
        ///         Statuses = new[]
        ///         {
        ///             "ISSUED",
        ///         },
        ///     });
        /// 
        ///     var amazonIssued = Aws.Acm.GetCertificate.Invoke(new()
        ///     {
        ///         Domain = "tf.example.com",
        ///         MostRecent = true,
        ///         Types = new[]
        ///         {
        ///             "AMAZON_ISSUED",
        ///         },
        ///     });
        /// 
        ///     var rsa4096 = Aws.Acm.GetCertificate.Invoke(new()
        ///     {
        ///         Domain = "tf.example.com",
        ///         KeyTypes = new[]
        ///         {
        ///             "RSA_4096",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/acm"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := acm.LookupCertificate(ctx, &amp;acm.LookupCertificateArgs{
        /// 			Domain: "tf.example.com",
        /// 			Statuses: []string{
        /// 				"ISSUED",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = acm.LookupCertificate(ctx, &amp;acm.LookupCertificateArgs{
        /// 			Domain:     "tf.example.com",
        /// 			MostRecent: pulumi.BoolRef(true),
        /// 			Types: []string{
        /// 				"AMAZON_ISSUED",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = acm.LookupCertificate(ctx, &amp;acm.LookupCertificateArgs{
        /// 			Domain: "tf.example.com",
        /// 			KeyTypes: []string{
        /// 				"RSA_4096",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.acm.AcmFunctions;
        /// import com.pulumi.aws.acm.inputs.GetCertificateArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var issued = AcmFunctions.getCertificate(GetCertificateArgs.builder()
        ///             .domain("tf.example.com")
        ///             .statuses("ISSUED")
        ///             .build());
        /// 
        ///         final var amazonIssued = AcmFunctions.getCertificate(GetCertificateArgs.builder()
        ///             .domain("tf.example.com")
        ///             .mostRecent(true)
        ///             .types("AMAZON_ISSUED")
        ///             .build());
        /// 
        ///         final var rsa4096 = AcmFunctions.getCertificate(GetCertificateArgs.builder()
        ///             .domain("tf.example.com")
        ///             .keyTypes("RSA_4096")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   issued:
        ///     fn::invoke:
        ///       Function: aws:acm:getCertificate
        ///       Arguments:
        ///         domain: tf.example.com
        ///         statuses:
        ///           - ISSUED
        ///   amazonIssued:
        ///     fn::invoke:
        ///       Function: aws:acm:getCertificate
        ///       Arguments:
        ///         domain: tf.example.com
        ///         mostRecent: true
        ///         types:
        ///           - AMAZON_ISSUED
        ///   rsa4096:
        ///     fn::invoke:
        ///       Function: aws:acm:getCertificate
        ///       Arguments:
        ///         domain: tf.example.com
        ///         keyTypes:
        ///           - RSA_4096
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("aws:acm/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        [Input("keyTypes")]
        private List<string>? _keyTypes;

        /// <summary>
        /// List of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
        /// </summary>
        public List<string> KeyTypes
        {
            get => _keyTypes ?? (_keyTypes = new List<string>());
            set => _keyTypes = value;
        }

        /// <summary>
        /// If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// List of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
        /// `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
        /// are returned.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Mapping of tags for the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// List of types on which to filter the returned list. Valid values are `AMAZON_ISSUED`, `PRIVATE`, and `IMPORTED`.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain of the certificate to look up. If no certificate is found with this name, an error will be returned.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("keyTypes")]
        private InputList<string>? _keyTypes;

        /// <summary>
        /// List of key algorithms to filter certificates. By default, ACM does not return all certificate types when searching. See the [ACM API Reference](https://docs.aws.amazon.com/acm/latest/APIReference/API_CertificateDetail.html#ACM-Type-CertificateDetail-KeyAlgorithm) for supported key algorithms.
        /// </summary>
        public InputList<string> KeyTypes
        {
            get => _keyTypes ?? (_keyTypes = new InputList<string>());
            set => _keyTypes = value;
        }

        /// <summary>
        /// If set to true, it sorts the certificates matched by previous criteria by the NotBefore field, returning only the most recent one. If set to false, it returns an error if more than one certificate is found. Defaults to false.
        /// </summary>
        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// List of statuses on which to filter the returned list. Valid values are `PENDING_VALIDATION`, `ISSUED`,
        /// `INACTIVE`, `EXPIRED`, `VALIDATION_TIMED_OUT`, `REVOKED` and `FAILED`. If no value is specified, only certificates in the `ISSUED` state
        /// are returned.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Mapping of tags for the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// List of types on which to filter the returned list. Valid values are `AMAZON_ISSUED`, `PRIVATE`, and `IMPORTED`.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// ARN of the found certificate, suitable for referencing in other resources that support ACM certificates.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// ACM-issued certificate.
        /// </summary>
        public readonly string Certificate;
        /// <summary>
        /// Certificates forming the requested ACM-issued certificate's chain of trust. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs.
        /// </summary>
        public readonly string CertificateChain;
        public readonly string Domain;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> KeyTypes;
        public readonly bool? MostRecent;
        /// <summary>
        /// Status of the found certificate.
        /// </summary>
        public readonly string Status;
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// Mapping of tags for the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<string> Types;

        [OutputConstructor]
        private GetCertificateResult(
            string arn,

            string certificate,

            string certificateChain,

            string domain,

            string id,

            ImmutableArray<string> keyTypes,

            bool? mostRecent,

            string status,

            ImmutableArray<string> statuses,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> types)
        {
            Arn = arn;
            Certificate = certificate;
            CertificateChain = certificateChain;
            Domain = domain;
            Id = id;
            KeyTypes = keyTypes;
            MostRecent = mostRecent;
            Status = status;
            Statuses = statuses;
            Tags = tags;
            Types = types;
        }
    }
}
