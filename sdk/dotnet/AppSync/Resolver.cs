// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppSync
{
    /// <summary>
    /// Provides an AppSync Resolver.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testGraphQLApi = new Aws.AppSync.GraphQLApi("testGraphQLApi", new()
    ///     {
    ///         AuthenticationType = "API_KEY",
    ///         Schema = @"type Mutation {
    /// 	putPost(id: ID!, title: String!): Post
    /// }
    /// 
    /// type Post {
    /// 	id: ID!
    /// 	title: String!
    /// }
    /// 
    /// type Query {
    /// 	singlePost(id: ID!): Post
    /// }
    /// 
    /// schema {
    /// 	query: Query
    /// 	mutation: Mutation
    /// }
    /// ",
    ///     });
    /// 
    ///     var testDataSource = new Aws.AppSync.DataSource("testDataSource", new()
    ///     {
    ///         ApiId = testGraphQLApi.Id,
    ///         Name = "my_example",
    ///         Type = "HTTP",
    ///         HttpConfig = new Aws.AppSync.Inputs.DataSourceHttpConfigArgs
    ///         {
    ///             Endpoint = "http://example.com",
    ///         },
    ///     });
    /// 
    ///     // UNIT type resolver (default)
    ///     var testResolver = new Aws.AppSync.Resolver("testResolver", new()
    ///     {
    ///         ApiId = testGraphQLApi.Id,
    ///         Field = "singlePost",
    ///         Type = "Query",
    ///         DataSource = testDataSource.Name,
    ///         RequestTemplate = @"{
    ///     ""version"": ""2018-05-29"",
    ///     ""method"": ""GET"",
    ///     ""resourcePath"": ""/"",
    ///     ""params"":{
    ///         ""headers"": $utils.http.copyheaders($ctx.request.headers)
    ///     }
    /// }
    /// ",
    ///         ResponseTemplate = @"#if($ctx.result.statusCode == 200)
    ///     $ctx.result.body
    /// #else
    ///     $utils.appendError($ctx.result.body, $ctx.result.statusCode)
    /// #end
    /// ",
    ///         CachingConfig = new Aws.AppSync.Inputs.ResolverCachingConfigArgs
    ///         {
    ///             CachingKeys = new[]
    ///             {
    ///                 "$context.identity.sub",
    ///                 "$context.arguments.id",
    ///             },
    ///             Ttl = 60,
    ///         },
    ///     });
    /// 
    ///     // PIPELINE type resolver
    ///     var mutationPipelineTest = new Aws.AppSync.Resolver("mutationPipelineTest", new()
    ///     {
    ///         Type = "Mutation",
    ///         ApiId = testGraphQLApi.Id,
    ///         Field = "pipelineTest",
    ///         RequestTemplate = "{}",
    ///         ResponseTemplate = "$util.toJson($ctx.result)",
    ///         Kind = "PIPELINE",
    ///         PipelineConfig = new Aws.AppSync.Inputs.ResolverPipelineConfigArgs
    ///         {
    ///             Functions = new[]
    ///             {
    ///                 aws_appsync_function.Test1.Function_id,
    ///                 aws_appsync_function.Test2.Function_id,
    ///                 aws_appsync_function.Test3.Function_id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### JS
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.AppSync.Resolver("example", new()
    ///     {
    ///         Type = "Query",
    ///         ApiId = aws_appsync_graphql_api.Test.Id,
    ///         Field = "pipelineTest",
    ///         Kind = "PIPELINE",
    ///         Code = File.ReadAllText("some-code-dir"),
    ///         Runtime = new Aws.AppSync.Inputs.ResolverRuntimeArgs
    ///         {
    ///             Name = "APPSYNC_JS",
    ///             RuntimeVersion = "1.0.0",
    ///         },
    ///         PipelineConfig = new Aws.AppSync.Inputs.ResolverPipelineConfigArgs
    ///         {
    ///             Functions = new[]
    ///             {
    ///                 aws_appsync_function.Test.Function_id,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_appsync_resolver` can be imported with their `api_id`, a hyphen, `type`, a hypen and `field` e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:appsync/resolver:Resolver example abcdef123456-exampleType-exampleField
    /// ```
    /// </summary>
    [AwsResourceType("aws:appsync/resolver:Resolver")]
    public partial class Resolver : global::Pulumi.CustomResource
    {
        /// <summary>
        /// API ID for the GraphQL API.
        /// </summary>
        [Output("apiId")]
        public Output<string> ApiId { get; private set; } = null!;

        /// <summary>
        /// ARN
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The Caching Config. See Caching Config.
        /// </summary>
        [Output("cachingConfig")]
        public Output<Outputs.ResolverCachingConfig?> CachingConfig { get; private set; } = null!;

        /// <summary>
        /// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
        /// </summary>
        [Output("code")]
        public Output<string?> Code { get; private set; } = null!;

        /// <summary>
        /// Data source name.
        /// </summary>
        [Output("dataSource")]
        public Output<string?> DataSource { get; private set; } = null!;

        /// <summary>
        /// Field name from the schema defined in the GraphQL API.
        /// </summary>
        [Output("field")]
        public Output<string> Field { get; private set; } = null!;

        /// <summary>
        /// Resolver type. Valid values are `UNIT` and `PIPELINE`.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
        /// </summary>
        [Output("maxBatchSize")]
        public Output<int?> MaxBatchSize { get; private set; } = null!;

        /// <summary>
        /// The caching configuration for the resolver. See Pipeline Config.
        /// </summary>
        [Output("pipelineConfig")]
        public Output<Outputs.ResolverPipelineConfig?> PipelineConfig { get; private set; } = null!;

        /// <summary>
        /// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
        /// </summary>
        [Output("requestTemplate")]
        public Output<string?> RequestTemplate { get; private set; } = null!;

        /// <summary>
        /// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
        /// </summary>
        [Output("responseTemplate")]
        public Output<string?> ResponseTemplate { get; private set; } = null!;

        /// <summary>
        /// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
        /// </summary>
        [Output("runtime")]
        public Output<Outputs.ResolverRuntime?> Runtime { get; private set; } = null!;

        /// <summary>
        /// Describes a Sync configuration for a resolver. See Sync Config.
        /// </summary>
        [Output("syncConfig")]
        public Output<Outputs.ResolverSyncConfig?> SyncConfig { get; private set; } = null!;

        /// <summary>
        /// Type name from the schema defined in the GraphQL API.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Resolver resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Resolver(string name, ResolverArgs args, CustomResourceOptions? options = null)
            : base("aws:appsync/resolver:Resolver", name, args ?? new ResolverArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Resolver(string name, Input<string> id, ResolverState? state = null, CustomResourceOptions? options = null)
            : base("aws:appsync/resolver:Resolver", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Resolver resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Resolver Get(string name, Input<string> id, ResolverState? state = null, CustomResourceOptions? options = null)
        {
            return new Resolver(name, id, state, options);
        }
    }

    public sealed class ResolverArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// API ID for the GraphQL API.
        /// </summary>
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// The Caching Config. See Caching Config.
        /// </summary>
        [Input("cachingConfig")]
        public Input<Inputs.ResolverCachingConfigArgs>? CachingConfig { get; set; }

        /// <summary>
        /// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
        /// </summary>
        [Input("code")]
        public Input<string>? Code { get; set; }

        /// <summary>
        /// Data source name.
        /// </summary>
        [Input("dataSource")]
        public Input<string>? DataSource { get; set; }

        /// <summary>
        /// Field name from the schema defined in the GraphQL API.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Resolver type. Valid values are `UNIT` and `PIPELINE`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
        /// </summary>
        [Input("maxBatchSize")]
        public Input<int>? MaxBatchSize { get; set; }

        /// <summary>
        /// The caching configuration for the resolver. See Pipeline Config.
        /// </summary>
        [Input("pipelineConfig")]
        public Input<Inputs.ResolverPipelineConfigArgs>? PipelineConfig { get; set; }

        /// <summary>
        /// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
        /// </summary>
        [Input("requestTemplate")]
        public Input<string>? RequestTemplate { get; set; }

        /// <summary>
        /// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
        /// </summary>
        [Input("responseTemplate")]
        public Input<string>? ResponseTemplate { get; set; }

        /// <summary>
        /// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
        /// </summary>
        [Input("runtime")]
        public Input<Inputs.ResolverRuntimeArgs>? Runtime { get; set; }

        /// <summary>
        /// Describes a Sync configuration for a resolver. See Sync Config.
        /// </summary>
        [Input("syncConfig")]
        public Input<Inputs.ResolverSyncConfigArgs>? SyncConfig { get; set; }

        /// <summary>
        /// Type name from the schema defined in the GraphQL API.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ResolverArgs()
        {
        }
        public static new ResolverArgs Empty => new ResolverArgs();
    }

    public sealed class ResolverState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// API ID for the GraphQL API.
        /// </summary>
        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        /// <summary>
        /// ARN
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The Caching Config. See Caching Config.
        /// </summary>
        [Input("cachingConfig")]
        public Input<Inputs.ResolverCachingConfigGetArgs>? CachingConfig { get; set; }

        /// <summary>
        /// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
        /// </summary>
        [Input("code")]
        public Input<string>? Code { get; set; }

        /// <summary>
        /// Data source name.
        /// </summary>
        [Input("dataSource")]
        public Input<string>? DataSource { get; set; }

        /// <summary>
        /// Field name from the schema defined in the GraphQL API.
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// Resolver type. Valid values are `UNIT` and `PIPELINE`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Maximum batching size for a resolver. Valid values are between `0` and `2000`.
        /// </summary>
        [Input("maxBatchSize")]
        public Input<int>? MaxBatchSize { get; set; }

        /// <summary>
        /// The caching configuration for the resolver. See Pipeline Config.
        /// </summary>
        [Input("pipelineConfig")]
        public Input<Inputs.ResolverPipelineConfigGetArgs>? PipelineConfig { get; set; }

        /// <summary>
        /// Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
        /// </summary>
        [Input("requestTemplate")]
        public Input<string>? RequestTemplate { get; set; }

        /// <summary>
        /// Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
        /// </summary>
        [Input("responseTemplate")]
        public Input<string>? ResponseTemplate { get; set; }

        /// <summary>
        /// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See Runtime.
        /// </summary>
        [Input("runtime")]
        public Input<Inputs.ResolverRuntimeGetArgs>? Runtime { get; set; }

        /// <summary>
        /// Describes a Sync configuration for a resolver. See Sync Config.
        /// </summary>
        [Input("syncConfig")]
        public Input<Inputs.ResolverSyncConfigGetArgs>? SyncConfig { get; set; }

        /// <summary>
        /// Type name from the schema defined in the GraphQL API.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ResolverState()
        {
        }
        public static new ResolverState Empty => new ResolverState();
    }
}
