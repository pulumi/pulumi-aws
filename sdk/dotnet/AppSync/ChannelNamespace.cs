// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppSync
{
    /// <summary>
    /// Manages an [AWS AppSync Channel Namespace](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-concepts.html#namespace).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.AppSync.ChannelNamespace("example", new()
    ///     {
    ///         Name = "example-channel-namespace",
    ///         ApiId = exampleAwsAppsyncApi.ApiId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import AppSync Channel Namespace using the `api_id` and `name` separated by a comma (`,`). For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:appsync/channelNamespace:ChannelNamespace example example-api-id,example-channel-namespace
    /// ```
    /// </summary>
    [AwsResourceType("aws:appsync/channelNamespace:ChannelNamespace")]
    public partial class ChannelNamespace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Event API ID.
        /// </summary>
        [Output("apiId")]
        public Output<string> ApiId { get; private set; } = null!;

        /// <summary>
        /// ARN of the channel namespace.
        /// </summary>
        [Output("channelNamespaceArn")]
        public Output<string> ChannelNamespaceArn { get; private set; } = null!;

        /// <summary>
        /// Event handler functions that run custom business logic to process published events and subscribe requests.
        /// </summary>
        [Output("codeHandlers")]
        public Output<string?> CodeHandlers { get; private set; } = null!;

        /// <summary>
        /// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
        /// </summary>
        [Output("handlerConfigs")]
        public Output<Outputs.ChannelNamespaceHandlerConfigs?> HandlerConfigs { get; private set; } = null!;

        /// <summary>
        /// Name of the channel namespace.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
        /// </summary>
        [Output("publishAuthModes")]
        public Output<ImmutableArray<Outputs.ChannelNamespacePublishAuthMode>> PublishAuthModes { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
        /// </summary>
        [Output("subscribeAuthModes")]
        public Output<ImmutableArray<Outputs.ChannelNamespaceSubscribeAuthMode>> SubscribeAuthModes { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a ChannelNamespace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChannelNamespace(string name, ChannelNamespaceArgs args, CustomResourceOptions? options = null)
            : base("aws:appsync/channelNamespace:ChannelNamespace", name, args ?? new ChannelNamespaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChannelNamespace(string name, Input<string> id, ChannelNamespaceState? state = null, CustomResourceOptions? options = null)
            : base("aws:appsync/channelNamespace:ChannelNamespace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChannelNamespace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChannelNamespace Get(string name, Input<string> id, ChannelNamespaceState? state = null, CustomResourceOptions? options = null)
        {
            return new ChannelNamespace(name, id, state, options);
        }
    }

    public sealed class ChannelNamespaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Event API ID.
        /// </summary>
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// Event handler functions that run custom business logic to process published events and subscribe requests.
        /// </summary>
        [Input("codeHandlers")]
        public Input<string>? CodeHandlers { get; set; }

        /// <summary>
        /// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
        /// </summary>
        [Input("handlerConfigs")]
        public Input<Inputs.ChannelNamespaceHandlerConfigsArgs>? HandlerConfigs { get; set; }

        /// <summary>
        /// Name of the channel namespace.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("publishAuthModes")]
        private InputList<Inputs.ChannelNamespacePublishAuthModeArgs>? _publishAuthModes;

        /// <summary>
        /// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
        /// </summary>
        public InputList<Inputs.ChannelNamespacePublishAuthModeArgs> PublishAuthModes
        {
            get => _publishAuthModes ?? (_publishAuthModes = new InputList<Inputs.ChannelNamespacePublishAuthModeArgs>());
            set => _publishAuthModes = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("subscribeAuthModes")]
        private InputList<Inputs.ChannelNamespaceSubscribeAuthModeArgs>? _subscribeAuthModes;

        /// <summary>
        /// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
        /// </summary>
        public InputList<Inputs.ChannelNamespaceSubscribeAuthModeArgs> SubscribeAuthModes
        {
            get => _subscribeAuthModes ?? (_subscribeAuthModes = new InputList<Inputs.ChannelNamespaceSubscribeAuthModeArgs>());
            set => _subscribeAuthModes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ChannelNamespaceArgs()
        {
        }
        public static new ChannelNamespaceArgs Empty => new ChannelNamespaceArgs();
    }

    public sealed class ChannelNamespaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Event API ID.
        /// </summary>
        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        /// <summary>
        /// ARN of the channel namespace.
        /// </summary>
        [Input("channelNamespaceArn")]
        public Input<string>? ChannelNamespaceArn { get; set; }

        /// <summary>
        /// Event handler functions that run custom business logic to process published events and subscribe requests.
        /// </summary>
        [Input("codeHandlers")]
        public Input<string>? CodeHandlers { get; set; }

        /// <summary>
        /// Configuration for the `onPublish` and `onSubscribe` handlers. See Handler Configs below.
        /// </summary>
        [Input("handlerConfigs")]
        public Input<Inputs.ChannelNamespaceHandlerConfigsGetArgs>? HandlerConfigs { get; set; }

        /// <summary>
        /// Name of the channel namespace.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("publishAuthModes")]
        private InputList<Inputs.ChannelNamespacePublishAuthModeGetArgs>? _publishAuthModes;

        /// <summary>
        /// Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
        /// </summary>
        public InputList<Inputs.ChannelNamespacePublishAuthModeGetArgs> PublishAuthModes
        {
            get => _publishAuthModes ?? (_publishAuthModes = new InputList<Inputs.ChannelNamespacePublishAuthModeGetArgs>());
            set => _publishAuthModes = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("subscribeAuthModes")]
        private InputList<Inputs.ChannelNamespaceSubscribeAuthModeGetArgs>? _subscribeAuthModes;

        /// <summary>
        /// Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See Auth Modes below.
        /// </summary>
        public InputList<Inputs.ChannelNamespaceSubscribeAuthModeGetArgs> SubscribeAuthModes
        {
            get => _subscribeAuthModes ?? (_subscribeAuthModes = new InputList<Inputs.ChannelNamespaceSubscribeAuthModeGetArgs>());
            set => _subscribeAuthModes = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ChannelNamespaceState()
        {
        }
        public static new ChannelNamespaceState Empty => new ChannelNamespaceState();
    }
}
