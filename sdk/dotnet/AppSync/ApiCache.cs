// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppSync
{
    /// <summary>
    /// Provides an AppSync API Cache.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGraphQLApi = new Aws.AppSync.GraphQLApi("exampleGraphQLApi", new()
    ///     {
    ///         AuthenticationType = "API_KEY",
    ///     });
    /// 
    ///     var exampleApiCache = new Aws.AppSync.ApiCache("exampleApiCache", new()
    ///     {
    ///         ApiId = exampleGraphQLApi.Id,
    ///         ApiCachingBehavior = "FULL_REQUEST_CACHING",
    ///         Type = "LARGE",
    ///         Ttl = 900,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_appsync_api_cache` can be imported using the AppSync API ID, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:appsync/apiCache:ApiCache example xxxxx
    /// ```
    /// </summary>
    [AwsResourceType("aws:appsync/apiCache:ApiCache")]
    public partial class ApiCache : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
        /// </summary>
        [Output("apiCachingBehavior")]
        public Output<string> ApiCachingBehavior { get; private set; } = null!;

        /// <summary>
        /// GraphQL API ID.
        /// </summary>
        [Output("apiId")]
        public Output<string> ApiId { get; private set; } = null!;

        /// <summary>
        /// At-rest encryption flag for cache. You cannot update this setting after creation.
        /// </summary>
        [Output("atRestEncryptionEnabled")]
        public Output<bool?> AtRestEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
        /// </summary>
        [Output("transitEncryptionEnabled")]
        public Output<bool?> TransitEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// TTL in seconds for cache entries.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ApiCache resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiCache(string name, ApiCacheArgs args, CustomResourceOptions? options = null)
            : base("aws:appsync/apiCache:ApiCache", name, args ?? new ApiCacheArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiCache(string name, Input<string> id, ApiCacheState? state = null, CustomResourceOptions? options = null)
            : base("aws:appsync/apiCache:ApiCache", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiCache resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiCache Get(string name, Input<string> id, ApiCacheState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiCache(name, id, state, options);
        }
    }

    public sealed class ApiCacheArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
        /// </summary>
        [Input("apiCachingBehavior", required: true)]
        public Input<string> ApiCachingBehavior { get; set; } = null!;

        /// <summary>
        /// GraphQL API ID.
        /// </summary>
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// At-rest encryption flag for cache. You cannot update this setting after creation.
        /// </summary>
        [Input("atRestEncryptionEnabled")]
        public Input<bool>? AtRestEncryptionEnabled { get; set; }

        /// <summary>
        /// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
        /// </summary>
        [Input("transitEncryptionEnabled")]
        public Input<bool>? TransitEncryptionEnabled { get; set; }

        /// <summary>
        /// TTL in seconds for cache entries.
        /// </summary>
        [Input("ttl", required: true)]
        public Input<int> Ttl { get; set; } = null!;

        /// <summary>
        /// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ApiCacheArgs()
        {
        }
        public static new ApiCacheArgs Empty => new ApiCacheArgs();
    }

    public sealed class ApiCacheState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Caching behavior. Valid values are `FULL_REQUEST_CACHING` and `PER_RESOLVER_CACHING`.
        /// </summary>
        [Input("apiCachingBehavior")]
        public Input<string>? ApiCachingBehavior { get; set; }

        /// <summary>
        /// GraphQL API ID.
        /// </summary>
        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        /// <summary>
        /// At-rest encryption flag for cache. You cannot update this setting after creation.
        /// </summary>
        [Input("atRestEncryptionEnabled")]
        public Input<bool>? AtRestEncryptionEnabled { get; set; }

        /// <summary>
        /// Transit encryption flag when connecting to cache. You cannot update this setting after creation.
        /// </summary>
        [Input("transitEncryptionEnabled")]
        public Input<bool>? TransitEncryptionEnabled { get; set; }

        /// <summary>
        /// TTL in seconds for cache entries.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// Cache instance type. Valid values are `SMALL`, `MEDIUM`, `LARGE`, `XLARGE`, `LARGE_2X`, `LARGE_4X`, `LARGE_8X`, `LARGE_12X`, `T2_SMALL`, `T2_MEDIUM`, `R4_LARGE`, `R4_XLARGE`, `R4_2XLARGE`, `R4_4XLARGE`, `R4_8XLARGE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApiCacheState()
        {
        }
        public static new ApiCacheState Empty => new ApiCacheState();
    }
}
