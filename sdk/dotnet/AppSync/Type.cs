// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppSync
{
    [AwsResourceType("aws:appsync/type:Type")]
    public partial class Type : global::Pulumi.CustomResource
    {
        [Output("apiId")]
        public Output<string> ApiId { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("definition")]
        public Output<string> Definition { get; private set; } = null!;

        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("format")]
        public Output<string> Format { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Type resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Type(string name, TypeArgs args, CustomResourceOptions? options = null)
            : base("aws:appsync/type:Type", name, args ?? new TypeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Type(string name, Input<string> id, TypeState? state = null, CustomResourceOptions? options = null)
            : base("aws:appsync/type:Type", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Type resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Type Get(string name, Input<string> id, TypeState? state = null, CustomResourceOptions? options = null)
        {
            return new Type(name, id, state, options);
        }
    }

    public sealed class TypeArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        [Input("definition", required: true)]
        public Input<string> Definition { get; set; } = null!;

        [Input("format", required: true)]
        public Input<string> Format { get; set; } = null!;

        public TypeArgs()
        {
        }
        public static new TypeArgs Empty => new TypeArgs();
    }

    public sealed class TypeState : global::Pulumi.ResourceArgs
    {
        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("definition")]
        public Input<string>? Definition { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public TypeState()
        {
        }
        public static new TypeState Empty => new TypeState();
    }
}
