// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppSync
{
    /// <summary>
    /// Resource for managing an AWS AppSync Source Api Association.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.AppSync.SourceApiAssociation("test", new()
    ///     {
    ///         Description = "My source API Merged",
    ///         MergedApiId = "gzos6bteufdunffzzifiowisoe",
    ///         SourceApiId = "fzzifiowisoegzos6bteufdunf",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import AppSync Source Api Association using the `gzos6bteufdunffzzifiowisoe,243685a0-9347-4a1a-89c1-9b57dea01e31`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:appsync/sourceApiAssociation:SourceApiAssociation example gzos6bteufdunffzzifiowisoe,243685a0-9347-4a1a-89c1-9b57dea01e31
    /// ```
    /// </summary>
    [AwsResourceType("aws:appsync/sourceApiAssociation:SourceApiAssociation")]
    public partial class SourceApiAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Source Api Association.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// ID of the Source Api Association.
        /// </summary>
        [Output("associationId")]
        public Output<string> AssociationId { get; private set; } = null!;

        /// <summary>
        /// Description of the source API being merged.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ARN of the merged API. One of `merged_api_arn` or `merged_api_id` must be specified.
        /// </summary>
        [Output("mergedApiArn")]
        public Output<string> MergedApiArn { get; private set; } = null!;

        /// <summary>
        /// ID of the merged API. One of `merged_api_arn` or `merged_api_id` must be specified.
        /// </summary>
        [Output("mergedApiId")]
        public Output<string> MergedApiId { get; private set; } = null!;

        /// <summary>
        /// ARN of the source API. One of `source_api_arn` or `source_api_id` must be specified.
        /// </summary>
        [Output("sourceApiArn")]
        public Output<string> SourceApiArn { get; private set; } = null!;

        [Output("sourceApiAssociationConfigs")]
        public Output<ImmutableArray<Outputs.SourceApiAssociationSourceApiAssociationConfig>> SourceApiAssociationConfigs { get; private set; } = null!;

        /// <summary>
        /// ID of the source API. One of `source_api_arn` or `source_api_id` must be specified.
        /// </summary>
        [Output("sourceApiId")]
        public Output<string> SourceApiId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.SourceApiAssociationTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a SourceApiAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SourceApiAssociation(string name, SourceApiAssociationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:appsync/sourceApiAssociation:SourceApiAssociation", name, args ?? new SourceApiAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SourceApiAssociation(string name, Input<string> id, SourceApiAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:appsync/sourceApiAssociation:SourceApiAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SourceApiAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SourceApiAssociation Get(string name, Input<string> id, SourceApiAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new SourceApiAssociation(name, id, state, options);
        }
    }

    public sealed class SourceApiAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the source API being merged.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ARN of the merged API. One of `merged_api_arn` or `merged_api_id` must be specified.
        /// </summary>
        [Input("mergedApiArn")]
        public Input<string>? MergedApiArn { get; set; }

        /// <summary>
        /// ID of the merged API. One of `merged_api_arn` or `merged_api_id` must be specified.
        /// </summary>
        [Input("mergedApiId")]
        public Input<string>? MergedApiId { get; set; }

        /// <summary>
        /// ARN of the source API. One of `source_api_arn` or `source_api_id` must be specified.
        /// </summary>
        [Input("sourceApiArn")]
        public Input<string>? SourceApiArn { get; set; }

        [Input("sourceApiAssociationConfigs")]
        private InputList<Inputs.SourceApiAssociationSourceApiAssociationConfigArgs>? _sourceApiAssociationConfigs;
        public InputList<Inputs.SourceApiAssociationSourceApiAssociationConfigArgs> SourceApiAssociationConfigs
        {
            get => _sourceApiAssociationConfigs ?? (_sourceApiAssociationConfigs = new InputList<Inputs.SourceApiAssociationSourceApiAssociationConfigArgs>());
            set => _sourceApiAssociationConfigs = value;
        }

        /// <summary>
        /// ID of the source API. One of `source_api_arn` or `source_api_id` must be specified.
        /// </summary>
        [Input("sourceApiId")]
        public Input<string>? SourceApiId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.SourceApiAssociationTimeoutsArgs>? Timeouts { get; set; }

        public SourceApiAssociationArgs()
        {
        }
        public static new SourceApiAssociationArgs Empty => new SourceApiAssociationArgs();
    }

    public sealed class SourceApiAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Source Api Association.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ID of the Source Api Association.
        /// </summary>
        [Input("associationId")]
        public Input<string>? AssociationId { get; set; }

        /// <summary>
        /// Description of the source API being merged.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ARN of the merged API. One of `merged_api_arn` or `merged_api_id` must be specified.
        /// </summary>
        [Input("mergedApiArn")]
        public Input<string>? MergedApiArn { get; set; }

        /// <summary>
        /// ID of the merged API. One of `merged_api_arn` or `merged_api_id` must be specified.
        /// </summary>
        [Input("mergedApiId")]
        public Input<string>? MergedApiId { get; set; }

        /// <summary>
        /// ARN of the source API. One of `source_api_arn` or `source_api_id` must be specified.
        /// </summary>
        [Input("sourceApiArn")]
        public Input<string>? SourceApiArn { get; set; }

        [Input("sourceApiAssociationConfigs")]
        private InputList<Inputs.SourceApiAssociationSourceApiAssociationConfigGetArgs>? _sourceApiAssociationConfigs;
        public InputList<Inputs.SourceApiAssociationSourceApiAssociationConfigGetArgs> SourceApiAssociationConfigs
        {
            get => _sourceApiAssociationConfigs ?? (_sourceApiAssociationConfigs = new InputList<Inputs.SourceApiAssociationSourceApiAssociationConfigGetArgs>());
            set => _sourceApiAssociationConfigs = value;
        }

        /// <summary>
        /// ID of the source API. One of `source_api_arn` or `source_api_id` must be specified.
        /// </summary>
        [Input("sourceApiId")]
        public Input<string>? SourceApiId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.SourceApiAssociationTimeoutsGetArgs>? Timeouts { get; set; }

        public SourceApiAssociationState()
        {
        }
        public static new SourceApiAssociationState Empty => new SourceApiAssociationState();
    }
}
