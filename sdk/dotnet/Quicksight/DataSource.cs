// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Quicksight
{
    [AwsResourceType("aws:quicksight/dataSource:DataSource")]
    public partial class DataSource : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("awsAccountId")]
        public Output<string> AwsAccountId { get; private set; } = null!;

        [Output("credentials")]
        public Output<Outputs.DataSourceCredentials?> Credentials { get; private set; } = null!;

        [Output("dataSourceId")]
        public Output<string> DataSourceId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("parameters")]
        public Output<Outputs.DataSourceParameters> Parameters { get; private set; } = null!;

        [Output("permissions")]
        public Output<ImmutableArray<Outputs.DataSourcePermission>> Permissions { get; private set; } = null!;

        [Output("sslProperties")]
        public Output<Outputs.DataSourceSslProperties?> SslProperties { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("vpcConnectionProperties")]
        public Output<Outputs.DataSourceVpcConnectionProperties?> VpcConnectionProperties { get; private set; } = null!;


        /// <summary>
        /// Create a DataSource resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataSource(string name, DataSourceArgs args, CustomResourceOptions? options = null)
            : base("aws:quicksight/dataSource:DataSource", name, args ?? new DataSourceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataSource(string name, Input<string> id, DataSourceState? state = null, CustomResourceOptions? options = null)
            : base("aws:quicksight/dataSource:DataSource", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataSource resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataSource Get(string name, Input<string> id, DataSourceState? state = null, CustomResourceOptions? options = null)
        {
            return new DataSource(name, id, state, options);
        }
    }

    public sealed class DataSourceArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        [Input("credentials")]
        public Input<Inputs.DataSourceCredentialsArgs>? Credentials { get; set; }

        [Input("dataSourceId", required: true)]
        public Input<string> DataSourceId { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters", required: true)]
        public Input<Inputs.DataSourceParametersArgs> Parameters { get; set; } = null!;

        [Input("permissions")]
        private InputList<Inputs.DataSourcePermissionArgs>? _permissions;
        public InputList<Inputs.DataSourcePermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.DataSourcePermissionArgs>());
            set => _permissions = value;
        }

        [Input("sslProperties")]
        public Input<Inputs.DataSourceSslPropertiesArgs>? SslProperties { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("vpcConnectionProperties")]
        public Input<Inputs.DataSourceVpcConnectionPropertiesArgs>? VpcConnectionProperties { get; set; }

        public DataSourceArgs()
        {
        }
        public static new DataSourceArgs Empty => new DataSourceArgs();
    }

    public sealed class DataSourceState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        [Input("credentials")]
        public Input<Inputs.DataSourceCredentialsGetArgs>? Credentials { get; set; }

        [Input("dataSourceId")]
        public Input<string>? DataSourceId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        public Input<Inputs.DataSourceParametersGetArgs>? Parameters { get; set; }

        [Input("permissions")]
        private InputList<Inputs.DataSourcePermissionGetArgs>? _permissions;
        public InputList<Inputs.DataSourcePermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.DataSourcePermissionGetArgs>());
            set => _permissions = value;
        }

        [Input("sslProperties")]
        public Input<Inputs.DataSourceSslPropertiesGetArgs>? SslProperties { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vpcConnectionProperties")]
        public Input<Inputs.DataSourceVpcConnectionPropertiesGetArgs>? VpcConnectionProperties { get; set; }

        public DataSourceState()
        {
        }
        public static new DataSourceState Empty => new DataSourceState();
    }
}
