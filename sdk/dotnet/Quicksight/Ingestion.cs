// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Quicksight
{
    /// <summary>
    /// Resource for managing an AWS QuickSight Ingestion.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Quicksight.Ingestion("example", new()
    ///     {
    ///         DataSetId = aws_quicksight_data_set.Example.Data_set_id,
    ///         IngestionId = "example-id",
    ///         IngestionType = "FULL_REFRESH",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import QuickSight Ingestion using the AWS account ID, data set ID, and ingestion ID separated by commas (`,`). For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:quicksight/ingestion:Ingestion example 123456789012,example-dataset-id,example-ingestion-id
    /// ```
    /// </summary>
    [AwsResourceType("aws:quicksight/ingestion:Ingestion")]
    public partial class Ingestion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Ingestion.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Output("awsAccountId")]
        public Output<string> AwsAccountId { get; private set; } = null!;

        /// <summary>
        /// ID of the dataset used in the ingestion.
        /// </summary>
        [Output("dataSetId")]
        public Output<string> DataSetId { get; private set; } = null!;

        /// <summary>
        /// ID for the ingestion.
        /// </summary>
        [Output("ingestionId")]
        public Output<string> IngestionId { get; private set; } = null!;

        /// <summary>
        /// Ingestion status.
        /// </summary>
        [Output("ingestionStatus")]
        public Output<string> IngestionStatus { get; private set; } = null!;

        /// <summary>
        /// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("ingestionType")]
        public Output<string> IngestionType { get; private set; } = null!;


        /// <summary>
        /// Create a Ingestion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ingestion(string name, IngestionArgs args, CustomResourceOptions? options = null)
            : base("aws:quicksight/ingestion:Ingestion", name, args ?? new IngestionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ingestion(string name, Input<string> id, IngestionState? state = null, CustomResourceOptions? options = null)
            : base("aws:quicksight/ingestion:Ingestion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ingestion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ingestion Get(string name, Input<string> id, IngestionState? state = null, CustomResourceOptions? options = null)
        {
            return new Ingestion(name, id, state, options);
        }
    }

    public sealed class IngestionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        /// <summary>
        /// ID of the dataset used in the ingestion.
        /// </summary>
        [Input("dataSetId", required: true)]
        public Input<string> DataSetId { get; set; } = null!;

        /// <summary>
        /// ID for the ingestion.
        /// </summary>
        [Input("ingestionId", required: true)]
        public Input<string> IngestionId { get; set; } = null!;

        /// <summary>
        /// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("ingestionType", required: true)]
        public Input<string> IngestionType { get; set; } = null!;

        public IngestionArgs()
        {
        }
        public static new IngestionArgs Empty => new IngestionArgs();
    }

    public sealed class IngestionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Ingestion.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        /// <summary>
        /// ID of the dataset used in the ingestion.
        /// </summary>
        [Input("dataSetId")]
        public Input<string>? DataSetId { get; set; }

        /// <summary>
        /// ID for the ingestion.
        /// </summary>
        [Input("ingestionId")]
        public Input<string>? IngestionId { get; set; }

        /// <summary>
        /// Ingestion status.
        /// </summary>
        [Input("ingestionStatus")]
        public Input<string>? IngestionStatus { get; set; }

        /// <summary>
        /// Type of ingestion to be created. Valid values are `INCREMENTAL_REFRESH` and `FULL_REFRESH`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("ingestionType")]
        public Input<string>? IngestionType { get; set; }

        public IngestionState()
        {
        }
        public static new IngestionState Empty => new IngestionState();
    }
}
