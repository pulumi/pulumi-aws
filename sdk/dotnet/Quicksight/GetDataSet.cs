// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Quicksight
{
    public static class GetDataSet
    {
        /// <summary>
        /// Data source for managing a QuickSight Data Set.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Quicksight.GetDataSet.Invoke(new()
        ///     {
        ///         DataSetId = "example-id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDataSetResult> InvokeAsync(GetDataSetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataSetResult>("aws:quicksight/getDataSet:getDataSet", args ?? new GetDataSetArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing a QuickSight Data Set.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Quicksight.GetDataSet.Invoke(new()
        ///     {
        ///         DataSetId = "example-id",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDataSetResult> Invoke(GetDataSetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataSetResult>("aws:quicksight/getDataSet:getDataSet", args ?? new GetDataSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataSetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public string? AwsAccountId { get; set; }

        [Input("columnLevelPermissionRules")]
        private List<Inputs.GetDataSetColumnLevelPermissionRuleArgs>? _columnLevelPermissionRules;
        public List<Inputs.GetDataSetColumnLevelPermissionRuleArgs> ColumnLevelPermissionRules
        {
            get => _columnLevelPermissionRules ?? (_columnLevelPermissionRules = new List<Inputs.GetDataSetColumnLevelPermissionRuleArgs>());
            set => _columnLevelPermissionRules = value;
        }

        /// <summary>
        /// Identifier for the data set.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("dataSetId", required: true)]
        public string DataSetId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private Dictionary<string, string>? _tagsAll;
        [Obsolete(@"this attribute has been deprecated")]
        public Dictionary<string, string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new Dictionary<string, string>());
            set => _tagsAll = value;
        }

        public GetDataSetArgs()
        {
        }
        public static new GetDataSetArgs Empty => new GetDataSetArgs();
    }

    public sealed class GetDataSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        [Input("columnLevelPermissionRules")]
        private InputList<Inputs.GetDataSetColumnLevelPermissionRuleInputArgs>? _columnLevelPermissionRules;
        public InputList<Inputs.GetDataSetColumnLevelPermissionRuleInputArgs> ColumnLevelPermissionRules
        {
            get => _columnLevelPermissionRules ?? (_columnLevelPermissionRules = new InputList<Inputs.GetDataSetColumnLevelPermissionRuleInputArgs>());
            set => _columnLevelPermissionRules = value;
        }

        /// <summary>
        /// Identifier for the data set.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("dataSetId", required: true)]
        public Input<string> DataSetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"this attribute has been deprecated")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public GetDataSetInvokeArgs()
        {
        }
        public static new GetDataSetInvokeArgs Empty => new GetDataSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataSetResult
    {
        public readonly string Arn;
        public readonly string AwsAccountId;
        public readonly ImmutableArray<Outputs.GetDataSetColumnGroupResult> ColumnGroups;
        public readonly ImmutableArray<Outputs.GetDataSetColumnLevelPermissionRuleResult> ColumnLevelPermissionRules;
        public readonly string DataSetId;
        public readonly ImmutableArray<Outputs.GetDataSetDataSetUsageConfigurationResult> DataSetUsageConfigurations;
        public readonly ImmutableArray<Outputs.GetDataSetFieldFolderResult> FieldFolders;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImportMode;
        public readonly ImmutableArray<Outputs.GetDataSetLogicalTableMapResult> LogicalTableMaps;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetDataSetPermissionResult> Permissions;
        public readonly ImmutableArray<Outputs.GetDataSetPhysicalTableMapResult> PhysicalTableMaps;
        public readonly ImmutableArray<Outputs.GetDataSetRowLevelPermissionDataSetResult> RowLevelPermissionDataSets;
        public readonly ImmutableArray<Outputs.GetDataSetRowLevelPermissionTagConfigurationResult> RowLevelPermissionTagConfigurations;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableDictionary<string, string> TagsAll;

        [OutputConstructor]
        private GetDataSetResult(
            string arn,

            string awsAccountId,

            ImmutableArray<Outputs.GetDataSetColumnGroupResult> columnGroups,

            ImmutableArray<Outputs.GetDataSetColumnLevelPermissionRuleResult> columnLevelPermissionRules,

            string dataSetId,

            ImmutableArray<Outputs.GetDataSetDataSetUsageConfigurationResult> dataSetUsageConfigurations,

            ImmutableArray<Outputs.GetDataSetFieldFolderResult> fieldFolders,

            string id,

            string importMode,

            ImmutableArray<Outputs.GetDataSetLogicalTableMapResult> logicalTableMaps,

            string name,

            ImmutableArray<Outputs.GetDataSetPermissionResult> permissions,

            ImmutableArray<Outputs.GetDataSetPhysicalTableMapResult> physicalTableMaps,

            ImmutableArray<Outputs.GetDataSetRowLevelPermissionDataSetResult> rowLevelPermissionDataSets,

            ImmutableArray<Outputs.GetDataSetRowLevelPermissionTagConfigurationResult> rowLevelPermissionTagConfigurations,

            ImmutableDictionary<string, string> tags,

            ImmutableDictionary<string, string> tagsAll)
        {
            Arn = arn;
            AwsAccountId = awsAccountId;
            ColumnGroups = columnGroups;
            ColumnLevelPermissionRules = columnLevelPermissionRules;
            DataSetId = dataSetId;
            DataSetUsageConfigurations = dataSetUsageConfigurations;
            FieldFolders = fieldFolders;
            Id = id;
            ImportMode = importMode;
            LogicalTableMaps = logicalTableMaps;
            Name = name;
            Permissions = permissions;
            PhysicalTableMaps = physicalTableMaps;
            RowLevelPermissionDataSets = rowLevelPermissionDataSets;
            RowLevelPermissionTagConfigurations = rowLevelPermissionTagConfigurations;
            Tags = tags;
            TagsAll = tagsAll;
        }
    }
}
