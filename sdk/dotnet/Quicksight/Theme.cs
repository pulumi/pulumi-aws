// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Quicksight
{
    /// <summary>
    /// Resource for managing a QuickSight Theme.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import a QuickSight Theme using the AWS account ID and theme ID separated by a comma (`,`). For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:quicksight/theme:Theme example 123456789012,example-id
    /// ```
    /// </summary>
    [AwsResourceType("aws:quicksight/theme:Theme")]
    public partial class Theme : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the theme.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Output("awsAccountId")]
        public Output<string> AwsAccountId { get; private set; } = null!;

        /// <summary>
        /// The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
        /// </summary>
        [Output("baseThemeId")]
        public Output<string> BaseThemeId { get; private set; } = null!;

        /// <summary>
        /// The theme configuration, which contains the theme display properties. See configuration.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.ThemeConfiguration?> Configuration { get; private set; } = null!;

        /// <summary>
        /// The time that the theme was created.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// The time that the theme was last updated.
        /// </summary>
        [Output("lastUpdatedTime")]
        public Output<string> LastUpdatedTime { get; private set; } = null!;

        /// <summary>
        /// Display name of the theme.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A set of resource permissions on the theme. Maximum of 64 items. See permissions.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<Outputs.ThemePermission>> Permissions { get; private set; } = null!;

        /// <summary>
        /// The theme creation status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Identifier of the theme.
        /// </summary>
        [Output("themeId")]
        public Output<string> ThemeId { get; private set; } = null!;

        /// <summary>
        /// A description of the current theme version being created/updated.
        /// </summary>
        [Output("versionDescription")]
        public Output<string?> VersionDescription { get; private set; } = null!;

        /// <summary>
        /// The version number of the theme version.
        /// </summary>
        [Output("versionNumber")]
        public Output<int> VersionNumber { get; private set; } = null!;


        /// <summary>
        /// Create a Theme resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Theme(string name, ThemeArgs args, CustomResourceOptions? options = null)
            : base("aws:quicksight/theme:Theme", name, args ?? new ThemeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Theme(string name, Input<string> id, ThemeState? state = null, CustomResourceOptions? options = null)
            : base("aws:quicksight/theme:Theme", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Theme resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Theme Get(string name, Input<string> id, ThemeState? state = null, CustomResourceOptions? options = null)
        {
            return new Theme(name, id, state, options);
        }
    }

    public sealed class ThemeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        /// <summary>
        /// The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
        /// </summary>
        [Input("baseThemeId", required: true)]
        public Input<string> BaseThemeId { get; set; } = null!;

        /// <summary>
        /// The theme configuration, which contains the theme display properties. See configuration.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.ThemeConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// Display name of the theme.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.ThemePermissionArgs>? _permissions;

        /// <summary>
        /// A set of resource permissions on the theme. Maximum of 64 items. See permissions.
        /// </summary>
        public InputList<Inputs.ThemePermissionArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.ThemePermissionArgs>());
            set => _permissions = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Identifier of the theme.
        /// </summary>
        [Input("themeId", required: true)]
        public Input<string> ThemeId { get; set; } = null!;

        /// <summary>
        /// A description of the current theme version being created/updated.
        /// </summary>
        [Input("versionDescription")]
        public Input<string>? VersionDescription { get; set; }

        public ThemeArgs()
        {
        }
        public static new ThemeArgs Empty => new ThemeArgs();
    }

    public sealed class ThemeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the theme.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// AWS account ID.
        /// </summary>
        [Input("awsAccountId")]
        public Input<string>? AwsAccountId { get; set; }

        /// <summary>
        /// The ID of the theme that a custom theme will inherit from. All themes inherit from one of the starting themes defined by Amazon QuickSight. For a list of the starting themes, use ListThemes or choose Themes from within an analysis.
        /// </summary>
        [Input("baseThemeId")]
        public Input<string>? BaseThemeId { get; set; }

        /// <summary>
        /// The theme configuration, which contains the theme display properties. See configuration.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.ThemeConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The time that the theme was created.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// The time that the theme was last updated.
        /// </summary>
        [Input("lastUpdatedTime")]
        public Input<string>? LastUpdatedTime { get; set; }

        /// <summary>
        /// Display name of the theme.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<Inputs.ThemePermissionGetArgs>? _permissions;

        /// <summary>
        /// A set of resource permissions on the theme. Maximum of 64 items. See permissions.
        /// </summary>
        public InputList<Inputs.ThemePermissionGetArgs> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<Inputs.ThemePermissionGetArgs>());
            set => _permissions = value;
        }

        /// <summary>
        /// The theme creation status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Identifier of the theme.
        /// </summary>
        [Input("themeId")]
        public Input<string>? ThemeId { get; set; }

        /// <summary>
        /// A description of the current theme version being created/updated.
        /// </summary>
        [Input("versionDescription")]
        public Input<string>? VersionDescription { get; set; }

        /// <summary>
        /// The version number of the theme version.
        /// </summary>
        [Input("versionNumber")]
        public Input<int>? VersionNumber { get; set; }

        public ThemeState()
        {
        }
        public static new ThemeState Empty => new ThemeState();
    }
}
