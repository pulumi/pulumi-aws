// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    public static class GetReplicationGroup
    {
        public static Task<GetReplicationGroupResult> InvokeAsync(GetReplicationGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationGroupResult>("aws:elasticache/getReplicationGroup:getReplicationGroup", args ?? new GetReplicationGroupArgs(), options.WithDefaults());

        public static Output<GetReplicationGroupResult> Invoke(GetReplicationGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationGroupResult>("aws:elasticache/getReplicationGroup:getReplicationGroup", args ?? new GetReplicationGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("replicationGroupId", required: true)]
        public string ReplicationGroupId { get; set; } = null!;

        public GetReplicationGroupArgs()
        {
        }
        public static new GetReplicationGroupArgs Empty => new GetReplicationGroupArgs();
    }

    public sealed class GetReplicationGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("replicationGroupId", required: true)]
        public Input<string> ReplicationGroupId { get; set; } = null!;

        public GetReplicationGroupInvokeArgs()
        {
        }
        public static new GetReplicationGroupInvokeArgs Empty => new GetReplicationGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationGroupResult
    {
        public readonly string Arn;
        public readonly bool AuthTokenEnabled;
        public readonly bool AutomaticFailoverEnabled;
        public readonly string ConfigurationEndpointAddress;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetReplicationGroupLogDeliveryConfigurationResult> LogDeliveryConfigurations;
        public readonly ImmutableArray<string> MemberClusters;
        public readonly bool MultiAzEnabled;
        public readonly string NodeType;
        public readonly int NumCacheClusters;
        public readonly int NumNodeGroups;
        public readonly int NumberCacheClusters;
        public readonly int Port;
        public readonly string PrimaryEndpointAddress;
        public readonly string ReaderEndpointAddress;
        public readonly int ReplicasPerNodeGroup;
        public readonly string ReplicationGroupDescription;
        public readonly string ReplicationGroupId;
        public readonly int SnapshotRetentionLimit;
        public readonly string SnapshotWindow;

        [OutputConstructor]
        private GetReplicationGroupResult(
            string arn,

            bool authTokenEnabled,

            bool automaticFailoverEnabled,

            string configurationEndpointAddress,

            string description,

            string id,

            ImmutableArray<Outputs.GetReplicationGroupLogDeliveryConfigurationResult> logDeliveryConfigurations,

            ImmutableArray<string> memberClusters,

            bool multiAzEnabled,

            string nodeType,

            int numCacheClusters,

            int numNodeGroups,

            int numberCacheClusters,

            int port,

            string primaryEndpointAddress,

            string readerEndpointAddress,

            int replicasPerNodeGroup,

            string replicationGroupDescription,

            string replicationGroupId,

            int snapshotRetentionLimit,

            string snapshotWindow)
        {
            Arn = arn;
            AuthTokenEnabled = authTokenEnabled;
            AutomaticFailoverEnabled = automaticFailoverEnabled;
            ConfigurationEndpointAddress = configurationEndpointAddress;
            Description = description;
            Id = id;
            LogDeliveryConfigurations = logDeliveryConfigurations;
            MemberClusters = memberClusters;
            MultiAzEnabled = multiAzEnabled;
            NodeType = nodeType;
            NumCacheClusters = numCacheClusters;
            NumNodeGroups = numNodeGroups;
            NumberCacheClusters = numberCacheClusters;
            Port = port;
            PrimaryEndpointAddress = primaryEndpointAddress;
            ReaderEndpointAddress = readerEndpointAddress;
            ReplicasPerNodeGroup = replicasPerNodeGroup;
            ReplicationGroupDescription = replicationGroupDescription;
            ReplicationGroupId = replicationGroupId;
            SnapshotRetentionLimit = snapshotRetentionLimit;
            SnapshotWindow = snapshotWindow;
        }
    }
}
