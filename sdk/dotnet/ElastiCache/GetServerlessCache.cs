// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    public static class GetServerlessCache
    {
        /// <summary>
        /// Use this data source to get information about an ElastiCache Serverless Cache.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ElastiCache.GetServerlessCache.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerlessCacheResult> InvokeAsync(GetServerlessCacheArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerlessCacheResult>("aws:elasticache/getServerlessCache:getServerlessCache", args ?? new GetServerlessCacheArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about an ElastiCache Serverless Cache.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ElastiCache.GetServerlessCache.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerlessCacheResult> Invoke(GetServerlessCacheInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessCacheResult>("aws:elasticache/getServerlessCache:getServerlessCache", args ?? new GetServerlessCacheInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerlessCacheArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier for the serverless cache.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetServerlessCacheArgs()
        {
        }
        public static new GetServerlessCacheArgs Empty => new GetServerlessCacheArgs();
    }

    public sealed class GetServerlessCacheInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier for the serverless cache.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetServerlessCacheInvokeArgs()
        {
        }
        public static new GetServerlessCacheInvokeArgs Empty => new GetServerlessCacheInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerlessCacheResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the serverless cache.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The cache usage limits for storage and ElastiCache Processing Units for the cache. See `cache_usage_limits` Block for details.
        /// </summary>
        public readonly Outputs.GetServerlessCacheCacheUsageLimitsResult CacheUsageLimits;
        /// <summary>
        /// Timestamp of when the serverless cache was created.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The daily time that snapshots will be created from the new serverless cache. Only available for engine type `"redis"`.
        /// </summary>
        public readonly string DailySnapshotTime;
        /// <summary>
        /// Description of the serverless cache.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Represents the information required for client programs to connect to the cache. See `endpoint` Block for details.
        /// </summary>
        public readonly Outputs.GetServerlessCacheEndpointResult Endpoint;
        /// <summary>
        /// Name of the cache engine.
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// The name and version number of the engine the serverless cache is compatible with.
        /// </summary>
        public readonly string FullEngineVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARN of the customer managed key for encrypting the data at rest.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// The version number of the engine the serverless cache is compatible with.
        /// </summary>
        public readonly string MajorEngineVersion;
        public readonly string Name;
        /// <summary>
        /// Represents the information required for client programs to connect to a cache node. See `reader_endpoint` Block for details.
        /// </summary>
        public readonly Outputs.GetServerlessCacheReaderEndpointResult ReaderEndpoint;
        /// <summary>
        /// A list of the one or more VPC security groups associated with the serverless cache.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The number of snapshots that will be retained for the serverless cache. Available for Redis only.
        /// </summary>
        public readonly int SnapshotRetentionLimit;
        /// <summary>
        /// The current status of the serverless cache.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// A list of the identifiers of the subnets where the VPC endpoint for the serverless cache are deployed.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// The identifier of the UserGroup associated with the serverless cache. Available for Redis only.
        /// </summary>
        public readonly string UserGroupId;

        [OutputConstructor]
        private GetServerlessCacheResult(
            string arn,

            Outputs.GetServerlessCacheCacheUsageLimitsResult cacheUsageLimits,

            string createTime,

            string dailySnapshotTime,

            string description,

            Outputs.GetServerlessCacheEndpointResult endpoint,

            string engine,

            string fullEngineVersion,

            string id,

            string kmsKeyId,

            string majorEngineVersion,

            string name,

            Outputs.GetServerlessCacheReaderEndpointResult readerEndpoint,

            ImmutableArray<string> securityGroupIds,

            int snapshotRetentionLimit,

            string status,

            ImmutableArray<string> subnetIds,

            string userGroupId)
        {
            Arn = arn;
            CacheUsageLimits = cacheUsageLimits;
            CreateTime = createTime;
            DailySnapshotTime = dailySnapshotTime;
            Description = description;
            Endpoint = endpoint;
            Engine = engine;
            FullEngineVersion = fullEngineVersion;
            Id = id;
            KmsKeyId = kmsKeyId;
            MajorEngineVersion = majorEngineVersion;
            Name = name;
            ReaderEndpoint = readerEndpoint;
            SecurityGroupIds = securityGroupIds;
            SnapshotRetentionLimit = snapshotRetentionLimit;
            Status = status;
            SubnetIds = subnetIds;
            UserGroupId = userGroupId;
        }
    }
}
