// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    /// <summary>
    /// Associate an existing ElastiCache user and an existing user group.
    /// 
    /// &gt; **NOTE:** The provider will detect changes in the `aws.elasticache.UserGroup` since `aws.elasticache.UserGroupAssociation` changes the user IDs associated with the user group. You can ignore these changes with the `ignore_changes` option as shown in the example.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Aws.ElastiCache.User("default", new()
    ///     {
    ///         UserId = "defaultUserID",
    ///         UserName = "default",
    ///         AccessString = "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
    ///         Engine = "REDIS",
    ///         Passwords = new[]
    ///         {
    ///             "password123456789",
    ///         },
    ///     });
    /// 
    ///     var exampleUserGroup = new Aws.ElastiCache.UserGroup("exampleUserGroup", new()
    ///     {
    ///         Engine = "REDIS",
    ///         UserGroupId = "userGroupId",
    ///         UserIds = new[]
    ///         {
    ///             @default.UserId,
    ///         },
    ///     });
    /// 
    ///     var exampleUser = new Aws.ElastiCache.User("exampleUser", new()
    ///     {
    ///         UserId = "exampleUserID",
    ///         UserName = "exampleuser",
    ///         AccessString = "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
    ///         Engine = "REDIS",
    ///         Passwords = new[]
    ///         {
    ///             "password123456789",
    ///         },
    ///     });
    /// 
    ///     var exampleUserGroupAssociation = new Aws.ElastiCache.UserGroupAssociation("exampleUserGroupAssociation", new()
    ///     {
    ///         UserGroupId = exampleUserGroup.UserGroupId,
    ///         UserId = exampleUser.UserId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ElastiCache user group associations can be imported using the `user_group_id` and `user_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:elasticache/userGroupAssociation:UserGroupAssociation example userGoupId1,userId
    /// ```
    /// </summary>
    [AwsResourceType("aws:elasticache/userGroupAssociation:UserGroupAssociation")]
    public partial class UserGroupAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the user group.
        /// </summary>
        [Output("userGroupId")]
        public Output<string> UserGroupId { get; private set; } = null!;

        /// <summary>
        /// ID of the user to associated with the user group.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a UserGroupAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserGroupAssociation(string name, UserGroupAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:elasticache/userGroupAssociation:UserGroupAssociation", name, args ?? new UserGroupAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserGroupAssociation(string name, Input<string> id, UserGroupAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:elasticache/userGroupAssociation:UserGroupAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserGroupAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserGroupAssociation Get(string name, Input<string> id, UserGroupAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new UserGroupAssociation(name, id, state, options);
        }
    }

    public sealed class UserGroupAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the user group.
        /// </summary>
        [Input("userGroupId", required: true)]
        public Input<string> UserGroupId { get; set; } = null!;

        /// <summary>
        /// ID of the user to associated with the user group.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public UserGroupAssociationArgs()
        {
        }
        public static new UserGroupAssociationArgs Empty => new UserGroupAssociationArgs();
    }

    public sealed class UserGroupAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the user group.
        /// </summary>
        [Input("userGroupId")]
        public Input<string>? UserGroupId { get; set; }

        /// <summary>
        /// ID of the user to associated with the user group.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public UserGroupAssociationState()
        {
        }
        public static new UserGroupAssociationState Empty => new UserGroupAssociationState();
    }
}
