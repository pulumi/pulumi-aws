// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    /// <summary>
    /// Provides an ElastiCache Global Replication Group resource, which manages replication between two or more Replication Groups in different regions. For more information, see the [ElastiCache User Guide](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html).
    /// 
    /// ## Example Usage
    /// ### Global replication group with one secondary replication group
    /// 
    /// The global replication group depends on the primary group existing. Secondary replication groups depend on the global replication group. the provider dependency management will handle this transparently using resource value references.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Aws.ElastiCache.ReplicationGroup("primary", new()
    ///     {
    ///         ReplicationGroupDescription = "primary replication group",
    ///         Engine = "redis",
    ///         EngineVersion = "5.0.6",
    ///         NodeType = "cache.m5.large",
    ///         NumberCacheClusters = 1,
    ///     });
    /// 
    ///     var example = new Aws.ElastiCache.GlobalReplicationGroup("example", new()
    ///     {
    ///         GlobalReplicationGroupIdSuffix = "example",
    ///         PrimaryReplicationGroupId = primary.Id,
    ///     });
    /// 
    ///     var secondary = new Aws.ElastiCache.ReplicationGroup("secondary", new()
    ///     {
    ///         ReplicationGroupDescription = "secondary replication group",
    ///         GlobalReplicationGroupId = example.GlobalReplicationGroupId,
    ///         NumberCacheClusters = 1,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = aws.Other_region,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Managing Redis Engine Versions
    /// 
    /// The initial Redis version is determined by the version set on the primary replication group.
    /// However, once it is part of a Global Replication Group,
    /// the Global Replication Group manages the version of all member replication groups.
    /// 
    /// The member replication groups must have `lifecycle.ignore_changes[engine_version]` set,
    /// or the provider will always return a diff.
    /// 
    /// In this example,
    /// the primary replication group will be created with Redis 6.0,
    /// and then upgraded to Redis 6.2 once added to the Global Replication Group.
    /// The secondary replication group will be created with Redis 6.2.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var primary = new Aws.ElastiCache.ReplicationGroup("primary", new()
    ///     {
    ///         ReplicationGroupDescription = "primary replication group",
    ///         Engine = "redis",
    ///         EngineVersion = "6.0",
    ///         NodeType = "cache.m5.large",
    ///         NumberCacheClusters = 1,
    ///     });
    /// 
    ///     var example = new Aws.ElastiCache.GlobalReplicationGroup("example", new()
    ///     {
    ///         GlobalReplicationGroupIdSuffix = "example",
    ///         PrimaryReplicationGroupId = primary.Id,
    ///         EngineVersion = "6.2",
    ///     });
    /// 
    ///     var secondary = new Aws.ElastiCache.ReplicationGroup("secondary", new()
    ///     {
    ///         ReplicationGroupDescription = "secondary replication group",
    ///         GlobalReplicationGroupId = example.GlobalReplicationGroupId,
    ///         NumberCacheClusters = 1,
    ///     }, new CustomResourceOptions
    ///     {
    ///         Provider = aws.Other_region,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ElastiCache Global Replication Groups can be imported using the `global_replication_group_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:elasticache/globalReplicationGroup:GlobalReplicationGroup my_global_replication_group okuqm-global-replication-group-1
    /// ```
    /// </summary>
    [AwsResourceType("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup")]
    public partial class GlobalReplicationGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the ElastiCache Global Replication Group.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A flag that indicate whether the encryption at rest is enabled.
        /// </summary>
        [Output("atRestEncryptionEnabled")]
        public Output<bool> AtRestEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// A flag that indicate whether AuthToken (password) is enabled.
        /// </summary>
        [Output("authTokenEnabled")]
        public Output<bool> AuthTokenEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
        /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
        /// </summary>
        [Output("automaticFailoverEnabled")]
        public Output<bool> AutomaticFailoverEnabled { get; private set; } = null!;

        /// <summary>
        /// The instance class used.
        /// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
        /// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
        /// </summary>
        [Output("cacheNodeType")]
        public Output<string> CacheNodeType { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the Global Datastore is cluster enabled.
        /// </summary>
        [Output("clusterEnabled")]
        public Output<bool> ClusterEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the cache engine to be used for the clusters in this global replication group.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// Redis version to use for the Global Replication Group.
        /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
        /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
        /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
        /// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
        /// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
        /// The actual engine version used is returned in the attribute `engine_version_actual`, see Attributes Reference below.
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The full version number of the cache engine running on the members of this global replication group.
        /// </summary>
        [Output("engineVersionActual")]
        public Output<string> EngineVersionActual { get; private set; } = null!;

        /// <summary>
        /// Set of node groups (shards) on the global replication group.
        /// Has the values:
        /// </summary>
        [Output("globalNodeGroups")]
        public Output<ImmutableArray<Outputs.GlobalReplicationGroupGlobalNodeGroup>> GlobalNodeGroups { get; private set; } = null!;

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [Output("globalReplicationGroupDescription")]
        public Output<string?> GlobalReplicationGroupDescription { get; private set; } = null!;

        /// <summary>
        /// The full ID of the global replication group.
        /// </summary>
        [Output("globalReplicationGroupId")]
        public Output<string> GlobalReplicationGroupId { get; private set; } = null!;

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [Output("globalReplicationGroupIdSuffix")]
        public Output<string> GlobalReplicationGroupIdSuffix { get; private set; } = null!;

        /// <summary>
        /// The number of node groups (shards) on the global replication group.
        /// </summary>
        [Output("numNodeGroups")]
        public Output<int> NumNodeGroups { get; private set; } = null!;

        /// <summary>
        /// An ElastiCache Parameter Group to use for the Global Replication Group.
        /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
        /// Specifying without a major version upgrade will fail.
        /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
        /// </summary>
        [Output("parameterGroupName")]
        public Output<string?> ParameterGroupName { get; private set; } = null!;

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [Output("primaryReplicationGroupId")]
        public Output<string> PrimaryReplicationGroupId { get; private set; } = null!;

        /// <summary>
        /// A flag that indicates whether the encryption in transit is enabled.
        /// </summary>
        [Output("transitEncryptionEnabled")]
        public Output<bool> TransitEncryptionEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalReplicationGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalReplicationGroup(string name, GlobalReplicationGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, args ?? new GlobalReplicationGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalReplicationGroup(string name, Input<string> id, GlobalReplicationGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalReplicationGroup Get(string name, Input<string> id, GlobalReplicationGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalReplicationGroup(name, id, state, options);
        }
    }

    public sealed class GlobalReplicationGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
        /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
        /// </summary>
        [Input("automaticFailoverEnabled")]
        public Input<bool>? AutomaticFailoverEnabled { get; set; }

        /// <summary>
        /// The instance class used.
        /// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
        /// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
        /// </summary>
        [Input("cacheNodeType")]
        public Input<string>? CacheNodeType { get; set; }

        /// <summary>
        /// Redis version to use for the Global Replication Group.
        /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
        /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
        /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
        /// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
        /// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
        /// The actual engine version used is returned in the attribute `engine_version_actual`, see Attributes Reference below.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [Input("globalReplicationGroupDescription")]
        public Input<string>? GlobalReplicationGroupDescription { get; set; }

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [Input("globalReplicationGroupIdSuffix", required: true)]
        public Input<string> GlobalReplicationGroupIdSuffix { get; set; } = null!;

        /// <summary>
        /// The number of node groups (shards) on the global replication group.
        /// </summary>
        [Input("numNodeGroups")]
        public Input<int>? NumNodeGroups { get; set; }

        /// <summary>
        /// An ElastiCache Parameter Group to use for the Global Replication Group.
        /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
        /// Specifying without a major version upgrade will fail.
        /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
        /// </summary>
        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [Input("primaryReplicationGroupId", required: true)]
        public Input<string> PrimaryReplicationGroupId { get; set; } = null!;

        public GlobalReplicationGroupArgs()
        {
        }
        public static new GlobalReplicationGroupArgs Empty => new GlobalReplicationGroupArgs();
    }

    public sealed class GlobalReplicationGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the ElastiCache Global Replication Group.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// A flag that indicate whether the encryption at rest is enabled.
        /// </summary>
        [Input("atRestEncryptionEnabled")]
        public Input<bool>? AtRestEncryptionEnabled { get; set; }

        /// <summary>
        /// A flag that indicate whether AuthToken (password) is enabled.
        /// </summary>
        [Input("authTokenEnabled")]
        public Input<bool>? AuthTokenEnabled { get; set; }

        /// <summary>
        /// Specifies whether read-only replicas will be automatically promoted to read/write primary if the existing primary fails.
        /// When creating, by default the Global Replication Group inherits the automatic failover setting of the primary replication group.
        /// </summary>
        [Input("automaticFailoverEnabled")]
        public Input<bool>? AutomaticFailoverEnabled { get; set; }

        /// <summary>
        /// The instance class used.
        /// See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html)
        /// and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// When creating, by default the Global Replication Group inherits the node type of the primary replication group.
        /// </summary>
        [Input("cacheNodeType")]
        public Input<string>? CacheNodeType { get; set; }

        /// <summary>
        /// Indicates whether the Global Datastore is cluster enabled.
        /// </summary>
        [Input("clusterEnabled")]
        public Input<bool>? ClusterEnabled { get; set; }

        /// <summary>
        /// The name of the cache engine to be used for the clusters in this global replication group.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// Redis version to use for the Global Replication Group.
        /// When creating, by default the Global Replication Group inherits the version of the primary replication group.
        /// If a version is specified, the Global Replication Group and all member replication groups will be upgraded to this version.
        /// Cannot be downgraded without replacing the Global Replication Group and all member replication groups.
        /// If the version is 6 or higher, the major and minor version can be set, e.g., `6.2`,
        /// or the minor version can be unspecified which will use the latest version at creation time, e.g., `6.x`.
        /// The actual engine version used is returned in the attribute `engine_version_actual`, see Attributes Reference below.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The full version number of the cache engine running on the members of this global replication group.
        /// </summary>
        [Input("engineVersionActual")]
        public Input<string>? EngineVersionActual { get; set; }

        [Input("globalNodeGroups")]
        private InputList<Inputs.GlobalReplicationGroupGlobalNodeGroupGetArgs>? _globalNodeGroups;

        /// <summary>
        /// Set of node groups (shards) on the global replication group.
        /// Has the values:
        /// </summary>
        public InputList<Inputs.GlobalReplicationGroupGlobalNodeGroupGetArgs> GlobalNodeGroups
        {
            get => _globalNodeGroups ?? (_globalNodeGroups = new InputList<Inputs.GlobalReplicationGroupGlobalNodeGroupGetArgs>());
            set => _globalNodeGroups = value;
        }

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [Input("globalReplicationGroupDescription")]
        public Input<string>? GlobalReplicationGroupDescription { get; set; }

        /// <summary>
        /// The full ID of the global replication group.
        /// </summary>
        [Input("globalReplicationGroupId")]
        public Input<string>? GlobalReplicationGroupId { get; set; }

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [Input("globalReplicationGroupIdSuffix")]
        public Input<string>? GlobalReplicationGroupIdSuffix { get; set; }

        /// <summary>
        /// The number of node groups (shards) on the global replication group.
        /// </summary>
        [Input("numNodeGroups")]
        public Input<int>? NumNodeGroups { get; set; }

        /// <summary>
        /// An ElastiCache Parameter Group to use for the Global Replication Group.
        /// Required when upgrading a major engine version, but will be ignored if left configured after the upgrade is complete.
        /// Specifying without a major version upgrade will fail.
        /// Note that ElastiCache creates a copy of this parameter group for each member replication group.
        /// </summary>
        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [Input("primaryReplicationGroupId")]
        public Input<string>? PrimaryReplicationGroupId { get; set; }

        /// <summary>
        /// A flag that indicates whether the encryption in transit is enabled.
        /// </summary>
        [Input("transitEncryptionEnabled")]
        public Input<bool>? TransitEncryptionEnabled { get; set; }

        public GlobalReplicationGroupState()
        {
        }
        public static new GlobalReplicationGroupState Empty => new GlobalReplicationGroupState();
    }
}
