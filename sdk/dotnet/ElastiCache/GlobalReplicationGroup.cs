// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    /// <summary>
    /// ## Import
    /// 
    /// ElastiCache Global Replication Groups can be imported using the `global_replication_group_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:elasticache/globalReplicationGroup:GlobalReplicationGroup my_global_replication_group okuqm-global-replication-group-1
    /// ```
    /// </summary>
    [AwsResourceType("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup")]
    public partial class GlobalReplicationGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// The full version number of the cache engine running on the members of this global replication group.
        /// </summary>
        [Output("actualEngineVersion")]
        public Output<string> ActualEngineVersion { get; private set; } = null!;

        /// <summary>
        /// The ARN of the ElastiCache Global Replication Group.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A flag that indicate whether the encryption at rest is enabled.
        /// </summary>
        [Output("atRestEncryptionEnabled")]
        public Output<bool> AtRestEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// A flag that indicate whether AuthToken (password) is enabled.
        /// </summary>
        [Output("authTokenEnabled")]
        public Output<bool> AuthTokenEnabled { get; private set; } = null!;

        /// <summary>
        /// The instance class used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// </summary>
        [Output("cacheNodeType")]
        public Output<string> CacheNodeType { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the Global Datastore is cluster enabled.
        /// </summary>
        [Output("clusterEnabled")]
        public Output<bool> ClusterEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the cache engine to be used for the clusters in this global replication group.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [Output("globalReplicationGroupDescription")]
        public Output<string?> GlobalReplicationGroupDescription { get; private set; } = null!;

        /// <summary>
        /// The full ID of the global replication group.
        /// </summary>
        [Output("globalReplicationGroupId")]
        public Output<string> GlobalReplicationGroupId { get; private set; } = null!;

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [Output("globalReplicationGroupIdSuffix")]
        public Output<string> GlobalReplicationGroupIdSuffix { get; private set; } = null!;

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [Output("primaryReplicationGroupId")]
        public Output<string> PrimaryReplicationGroupId { get; private set; } = null!;

        /// <summary>
        /// A flag that indicates whether the encryption in transit is enabled.
        /// </summary>
        [Output("transitEncryptionEnabled")]
        public Output<bool> TransitEncryptionEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a GlobalReplicationGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GlobalReplicationGroup(string name, GlobalReplicationGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, args ?? new GlobalReplicationGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GlobalReplicationGroup(string name, Input<string> id, GlobalReplicationGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:elasticache/globalReplicationGroup:GlobalReplicationGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GlobalReplicationGroup Get(string name, Input<string> id, GlobalReplicationGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new GlobalReplicationGroup(name, id, state, options);
        }
    }

    public sealed class GlobalReplicationGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [Input("globalReplicationGroupDescription")]
        public Input<string>? GlobalReplicationGroupDescription { get; set; }

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [Input("globalReplicationGroupIdSuffix", required: true)]
        public Input<string> GlobalReplicationGroupIdSuffix { get; set; } = null!;

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [Input("primaryReplicationGroupId", required: true)]
        public Input<string> PrimaryReplicationGroupId { get; set; } = null!;

        public GlobalReplicationGroupArgs()
        {
        }
    }

    public sealed class GlobalReplicationGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The full version number of the cache engine running on the members of this global replication group.
        /// </summary>
        [Input("actualEngineVersion")]
        public Input<string>? ActualEngineVersion { get; set; }

        /// <summary>
        /// The ARN of the ElastiCache Global Replication Group.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// A flag that indicate whether the encryption at rest is enabled.
        /// </summary>
        [Input("atRestEncryptionEnabled")]
        public Input<bool>? AtRestEncryptionEnabled { get; set; }

        /// <summary>
        /// A flag that indicate whether AuthToken (password) is enabled.
        /// </summary>
        [Input("authTokenEnabled")]
        public Input<bool>? AuthTokenEnabled { get; set; }

        /// <summary>
        /// The instance class used. See AWS documentation for information on [supported node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html) and [guidance on selecting node types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/nodes-select-size.html).
        /// </summary>
        [Input("cacheNodeType")]
        public Input<string>? CacheNodeType { get; set; }

        /// <summary>
        /// Indicates whether the Global Datastore is cluster enabled.
        /// </summary>
        [Input("clusterEnabled")]
        public Input<bool>? ClusterEnabled { get; set; }

        /// <summary>
        /// The name of the cache engine to be used for the clusters in this global replication group.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// A user-created description for the global replication group.
        /// </summary>
        [Input("globalReplicationGroupDescription")]
        public Input<string>? GlobalReplicationGroupDescription { get; set; }

        /// <summary>
        /// The full ID of the global replication group.
        /// </summary>
        [Input("globalReplicationGroupId")]
        public Input<string>? GlobalReplicationGroupId { get; set; }

        /// <summary>
        /// The suffix name of a Global Datastore. If `global_replication_group_id_suffix` is changed, creates a new resource.
        /// </summary>
        [Input("globalReplicationGroupIdSuffix")]
        public Input<string>? GlobalReplicationGroupIdSuffix { get; set; }

        /// <summary>
        /// The ID of the primary cluster that accepts writes and will replicate updates to the secondary cluster. If `primary_replication_group_id` is changed, creates a new resource.
        /// </summary>
        [Input("primaryReplicationGroupId")]
        public Input<string>? PrimaryReplicationGroupId { get; set; }

        /// <summary>
        /// A flag that indicates whether the encryption in transit is enabled.
        /// </summary>
        [Input("transitEncryptionEnabled")]
        public Input<bool>? TransitEncryptionEnabled { get; set; }

        public GlobalReplicationGroupState()
        {
        }
    }
}
