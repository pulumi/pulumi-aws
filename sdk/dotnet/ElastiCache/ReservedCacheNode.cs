// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElastiCache
{
    /// <summary>
    /// Manages an ElastiCache Reserved Cache Node.
    /// 
    /// &gt; **NOTE:** Once created, a reservation is valid for the `duration` of the provided `offering_id` and cannot be deleted. Performing a `destroy` will only remove the resource from state. For more information see [ElastiCache Reserved Nodes Documentation](https://aws.amazon.com/elasticache/reserved-cache-nodes/) and [PurchaseReservedCacheNodesOffering](https://docs.aws.amazon.com/AmazonElastiCache/latest/APIReference/API_PurchaseReservedCacheNodesOffering.html).
    /// 
    /// &gt; **NOTE:** Due to the expense of testing this resource, we provide it as best effort. If you find it useful, and have the ability to help test or notice issues, consider reaching out to us on GitHub.
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import ElastiCache Reserved Cache Node using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:elasticache/reservedCacheNode:ReservedCacheNode example CustomReservationID
    /// ```
    /// </summary>
    [AwsResourceType("aws:elasticache/reservedCacheNode:ReservedCacheNode")]
    public partial class ReservedCacheNode : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN for the reserved cache node.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Number of cache node instances to reserve.
        /// Default value is `1`.
        /// </summary>
        [Output("cacheNodeCount")]
        public Output<int> CacheNodeCount { get; private set; } = null!;

        /// <summary>
        /// Node type for the reserved cache nodes.
        /// </summary>
        [Output("cacheNodeType")]
        public Output<string> CacheNodeType { get; private set; } = null!;

        /// <summary>
        /// Duration of the reservation as an RFC3339 duration.
        /// </summary>
        [Output("duration")]
        public Output<string> Duration { get; private set; } = null!;

        /// <summary>
        /// Fixed price charged for this reserved cache node.
        /// </summary>
        [Output("fixedPrice")]
        public Output<double> FixedPrice { get; private set; } = null!;

        /// <summary>
        /// Offering type of this reserved cache node.
        /// </summary>
        [Output("offeringType")]
        public Output<string> OfferingType { get; private set; } = null!;

        /// <summary>
        /// Engine type for the reserved cache node.
        /// </summary>
        [Output("productDescription")]
        public Output<string> ProductDescription { get; private set; } = null!;

        /// <summary>
        /// Recurring price charged to run this reserved cache node.
        /// </summary>
        [Output("recurringCharges")]
        public Output<ImmutableArray<Outputs.ReservedCacheNodeRecurringCharge>> RecurringCharges { get; private set; } = null!;

        /// <summary>
        /// ID of the reserved cache node offering to purchase.
        /// To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("reservedCacheNodesOfferingId")]
        public Output<string> ReservedCacheNodesOfferingId { get; private set; } = null!;

        /// <summary>
        /// Time the reservation started.
        /// </summary>
        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        /// <summary>
        /// State of the reserved cache node.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ReservedCacheNodeTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Hourly price charged for this reserved cache node.
        /// </summary>
        [Output("usagePrice")]
        public Output<double> UsagePrice { get; private set; } = null!;


        /// <summary>
        /// Create a ReservedCacheNode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReservedCacheNode(string name, ReservedCacheNodeArgs args, CustomResourceOptions? options = null)
            : base("aws:elasticache/reservedCacheNode:ReservedCacheNode", name, args ?? new ReservedCacheNodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReservedCacheNode(string name, Input<string> id, ReservedCacheNodeState? state = null, CustomResourceOptions? options = null)
            : base("aws:elasticache/reservedCacheNode:ReservedCacheNode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReservedCacheNode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReservedCacheNode Get(string name, Input<string> id, ReservedCacheNodeState? state = null, CustomResourceOptions? options = null)
        {
            return new ReservedCacheNode(name, id, state, options);
        }
    }

    public sealed class ReservedCacheNodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of cache node instances to reserve.
        /// Default value is `1`.
        /// </summary>
        [Input("cacheNodeCount")]
        public Input<int>? CacheNodeCount { get; set; }

        /// <summary>
        /// ID of the reserved cache node offering to purchase.
        /// To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("reservedCacheNodesOfferingId", required: true)]
        public Input<string> ReservedCacheNodesOfferingId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ReservedCacheNodeTimeoutsArgs>? Timeouts { get; set; }

        public ReservedCacheNodeArgs()
        {
        }
        public static new ReservedCacheNodeArgs Empty => new ReservedCacheNodeArgs();
    }

    public sealed class ReservedCacheNodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN for the reserved cache node.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Number of cache node instances to reserve.
        /// Default value is `1`.
        /// </summary>
        [Input("cacheNodeCount")]
        public Input<int>? CacheNodeCount { get; set; }

        /// <summary>
        /// Node type for the reserved cache nodes.
        /// </summary>
        [Input("cacheNodeType")]
        public Input<string>? CacheNodeType { get; set; }

        /// <summary>
        /// Duration of the reservation as an RFC3339 duration.
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        /// <summary>
        /// Fixed price charged for this reserved cache node.
        /// </summary>
        [Input("fixedPrice")]
        public Input<double>? FixedPrice { get; set; }

        /// <summary>
        /// Offering type of this reserved cache node.
        /// </summary>
        [Input("offeringType")]
        public Input<string>? OfferingType { get; set; }

        /// <summary>
        /// Engine type for the reserved cache node.
        /// </summary>
        [Input("productDescription")]
        public Input<string>? ProductDescription { get; set; }

        [Input("recurringCharges")]
        private InputList<Inputs.ReservedCacheNodeRecurringChargeGetArgs>? _recurringCharges;

        /// <summary>
        /// Recurring price charged to run this reserved cache node.
        /// </summary>
        public InputList<Inputs.ReservedCacheNodeRecurringChargeGetArgs> RecurringCharges
        {
            get => _recurringCharges ?? (_recurringCharges = new InputList<Inputs.ReservedCacheNodeRecurringChargeGetArgs>());
            set => _recurringCharges = value;
        }

        /// <summary>
        /// ID of the reserved cache node offering to purchase.
        /// To determine an `reserved_cache_nodes_offering_id`, see the `aws.elasticache.getReservedCacheNodeOffering` data source.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("reservedCacheNodesOfferingId")]
        public Input<string>? ReservedCacheNodesOfferingId { get; set; }

        /// <summary>
        /// Time the reservation started.
        /// </summary>
        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        /// <summary>
        /// State of the reserved cache node.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the reservation. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ReservedCacheNodeTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Hourly price charged for this reserved cache node.
        /// </summary>
        [Input("usagePrice")]
        public Input<double>? UsagePrice { get; set; }

        public ReservedCacheNodeState()
        {
        }
        public static new ReservedCacheNodeState Empty => new ReservedCacheNodeState();
    }
}
