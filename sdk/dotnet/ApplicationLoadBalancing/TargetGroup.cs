// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApplicationLoadBalancing
{
    [Obsolete(@"aws.applicationloadbalancing.TargetGroup has been deprecated in favor of aws.alb.TargetGroup")]
    [AwsResourceType("aws:applicationloadbalancing/targetGroup:TargetGroup")]
    public partial class TargetGroup : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("arnSuffix")]
        public Output<string> ArnSuffix { get; private set; } = null!;

        [Output("connectionTermination")]
        public Output<bool?> ConnectionTermination { get; private set; } = null!;

        [Output("deregistrationDelay")]
        public Output<int?> DeregistrationDelay { get; private set; } = null!;

        [Output("healthCheck")]
        public Output<Outputs.TargetGroupHealthCheck> HealthCheck { get; private set; } = null!;

        [Output("ipAddressType")]
        public Output<string> IpAddressType { get; private set; } = null!;

        [Output("lambdaMultiValueHeadersEnabled")]
        public Output<bool?> LambdaMultiValueHeadersEnabled { get; private set; } = null!;

        [Output("loadBalancingAlgorithmType")]
        public Output<string> LoadBalancingAlgorithmType { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("namePrefix")]
        public Output<string?> NamePrefix { get; private set; } = null!;

        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        [Output("preserveClientIp")]
        public Output<string> PreserveClientIp { get; private set; } = null!;

        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        [Output("protocolVersion")]
        public Output<string> ProtocolVersion { get; private set; } = null!;

        [Output("proxyProtocolV2")]
        public Output<bool?> ProxyProtocolV2 { get; private set; } = null!;

        [Output("slowStart")]
        public Output<int?> SlowStart { get; private set; } = null!;

        [Output("stickiness")]
        public Output<Outputs.TargetGroupStickiness> Stickiness { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("targetFailovers")]
        public Output<ImmutableArray<Outputs.TargetGroupTargetFailover>> TargetFailovers { get; private set; } = null!;

        [Output("targetType")]
        public Output<string?> TargetType { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string?> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a TargetGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TargetGroup(string name, TargetGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:applicationloadbalancing/targetGroup:TargetGroup", name, args ?? new TargetGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TargetGroup(string name, Input<string> id, TargetGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:applicationloadbalancing/targetGroup:TargetGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TargetGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TargetGroup Get(string name, Input<string> id, TargetGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new TargetGroup(name, id, state, options);
        }
    }

    public sealed class TargetGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("connectionTermination")]
        public Input<bool>? ConnectionTermination { get; set; }

        [Input("deregistrationDelay")]
        public Input<int>? DeregistrationDelay { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.TargetGroupHealthCheckArgs>? HealthCheck { get; set; }

        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        [Input("lambdaMultiValueHeadersEnabled")]
        public Input<bool>? LambdaMultiValueHeadersEnabled { get; set; }

        [Input("loadBalancingAlgorithmType")]
        public Input<string>? LoadBalancingAlgorithmType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("preserveClientIp")]
        public Input<string>? PreserveClientIp { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("protocolVersion")]
        public Input<string>? ProtocolVersion { get; set; }

        [Input("proxyProtocolV2")]
        public Input<bool>? ProxyProtocolV2 { get; set; }

        [Input("slowStart")]
        public Input<int>? SlowStart { get; set; }

        [Input("stickiness")]
        public Input<Inputs.TargetGroupStickinessArgs>? Stickiness { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("targetFailovers")]
        private InputList<Inputs.TargetGroupTargetFailoverArgs>? _targetFailovers;
        public InputList<Inputs.TargetGroupTargetFailoverArgs> TargetFailovers
        {
            get => _targetFailovers ?? (_targetFailovers = new InputList<Inputs.TargetGroupTargetFailoverArgs>());
            set => _targetFailovers = value;
        }

        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public TargetGroupArgs()
        {
        }
        public static new TargetGroupArgs Empty => new TargetGroupArgs();
    }

    public sealed class TargetGroupState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("arnSuffix")]
        public Input<string>? ArnSuffix { get; set; }

        [Input("connectionTermination")]
        public Input<bool>? ConnectionTermination { get; set; }

        [Input("deregistrationDelay")]
        public Input<int>? DeregistrationDelay { get; set; }

        [Input("healthCheck")]
        public Input<Inputs.TargetGroupHealthCheckGetArgs>? HealthCheck { get; set; }

        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        [Input("lambdaMultiValueHeadersEnabled")]
        public Input<bool>? LambdaMultiValueHeadersEnabled { get; set; }

        [Input("loadBalancingAlgorithmType")]
        public Input<string>? LoadBalancingAlgorithmType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("preserveClientIp")]
        public Input<string>? PreserveClientIp { get; set; }

        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        [Input("protocolVersion")]
        public Input<string>? ProtocolVersion { get; set; }

        [Input("proxyProtocolV2")]
        public Input<bool>? ProxyProtocolV2 { get; set; }

        [Input("slowStart")]
        public Input<int>? SlowStart { get; set; }

        [Input("stickiness")]
        public Input<Inputs.TargetGroupStickinessGetArgs>? Stickiness { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("targetFailovers")]
        private InputList<Inputs.TargetGroupTargetFailoverGetArgs>? _targetFailovers;
        public InputList<Inputs.TargetGroupTargetFailoverGetArgs> TargetFailovers
        {
            get => _targetFailovers ?? (_targetFailovers = new InputList<Inputs.TargetGroupTargetFailoverGetArgs>());
            set => _targetFailovers = value;
        }

        [Input("targetType")]
        public Input<string>? TargetType { get; set; }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public TargetGroupState()
        {
        }
        public static new TargetGroupState Empty => new TargetGroupState();
    }
}
