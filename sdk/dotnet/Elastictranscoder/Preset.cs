// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElasticTranscoder
{
    /// <summary>
    /// Provides an Elastic Transcoder preset resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/elastictranscoder_preset.html.markdown.
    /// </summary>
    public partial class Preset : Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Audio parameters object (documented below).
        /// </summary>
        [Output("audio")]
        public Output<Outputs.PresetAudio?> Audio { get; private set; } = null!;

        /// <summary>
        /// Codec options for the audio parameters (documented below)
        /// </summary>
        [Output("audioCodecOptions")]
        public Output<Outputs.PresetAudioCodecOptions?> AudioCodecOptions { get; private set; } = null!;

        /// <summary>
        /// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
        /// </summary>
        [Output("container")]
        public Output<string> Container { get; private set; } = null!;

        /// <summary>
        /// A description of the preset (maximum 255 characters)
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the preset. (maximum 40 characters)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Thumbnail parameters object (documented below)
        /// </summary>
        [Output("thumbnails")]
        public Output<Outputs.PresetThumbnails?> Thumbnails { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Video parameters object (documented below)
        /// </summary>
        [Output("video")]
        public Output<Outputs.PresetVideo?> Video { get; private set; } = null!;

        [Output("videoCodecOptions")]
        public Output<ImmutableDictionary<string, object>?> VideoCodecOptions { get; private set; } = null!;

        /// <summary>
        /// Watermark parameters for the video parameters (documented below)
        /// * `video_codec_options` (Optional, Forces new resource) Codec options for the video parameters
        /// </summary>
        [Output("videoWatermarks")]
        public Output<ImmutableArray<Outputs.PresetVideoWatermarks>> VideoWatermarks { get; private set; } = null!;


        /// <summary>
        /// Create a Preset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Preset(string name, PresetArgs args, CustomResourceOptions? options = null)
            : base("aws:elastictranscoder/preset:Preset", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Preset(string name, Input<string> id, PresetState? state = null, CustomResourceOptions? options = null)
            : base("aws:elastictranscoder/preset:Preset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Preset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Preset Get(string name, Input<string> id, PresetState? state = null, CustomResourceOptions? options = null)
        {
            return new Preset(name, id, state, options);
        }
    }

    public sealed class PresetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Audio parameters object (documented below).
        /// </summary>
        [Input("audio")]
        public Input<Inputs.PresetAudioArgs>? Audio { get; set; }

        /// <summary>
        /// Codec options for the audio parameters (documented below)
        /// </summary>
        [Input("audioCodecOptions")]
        public Input<Inputs.PresetAudioCodecOptionsArgs>? AudioCodecOptions { get; set; }

        /// <summary>
        /// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
        /// </summary>
        [Input("container", required: true)]
        public Input<string> Container { get; set; } = null!;

        /// <summary>
        /// A description of the preset (maximum 255 characters)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the preset. (maximum 40 characters)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Thumbnail parameters object (documented below)
        /// </summary>
        [Input("thumbnails")]
        public Input<Inputs.PresetThumbnailsArgs>? Thumbnails { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Video parameters object (documented below)
        /// </summary>
        [Input("video")]
        public Input<Inputs.PresetVideoArgs>? Video { get; set; }

        [Input("videoCodecOptions")]
        private InputMap<object>? _videoCodecOptions;
        public InputMap<object> VideoCodecOptions
        {
            get => _videoCodecOptions ?? (_videoCodecOptions = new InputMap<object>());
            set => _videoCodecOptions = value;
        }

        [Input("videoWatermarks")]
        private InputList<Inputs.PresetVideoWatermarksArgs>? _videoWatermarks;

        /// <summary>
        /// Watermark parameters for the video parameters (documented below)
        /// * `video_codec_options` (Optional, Forces new resource) Codec options for the video parameters
        /// </summary>
        public InputList<Inputs.PresetVideoWatermarksArgs> VideoWatermarks
        {
            get => _videoWatermarks ?? (_videoWatermarks = new InputList<Inputs.PresetVideoWatermarksArgs>());
            set => _videoWatermarks = value;
        }

        public PresetArgs()
        {
        }
    }

    public sealed class PresetState : Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Audio parameters object (documented below).
        /// </summary>
        [Input("audio")]
        public Input<Inputs.PresetAudioGetArgs>? Audio { get; set; }

        /// <summary>
        /// Codec options for the audio parameters (documented below)
        /// </summary>
        [Input("audioCodecOptions")]
        public Input<Inputs.PresetAudioCodecOptionsGetArgs>? AudioCodecOptions { get; set; }

        /// <summary>
        /// The container type for the output file. Valid values are `flac`, `flv`, `fmp4`, `gif`, `mp3`, `mp4`, `mpg`, `mxf`, `oga`, `ogg`, `ts`, and `webm`.
        /// </summary>
        [Input("container")]
        public Input<string>? Container { get; set; }

        /// <summary>
        /// A description of the preset (maximum 255 characters)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the preset. (maximum 40 characters)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Thumbnail parameters object (documented below)
        /// </summary>
        [Input("thumbnails")]
        public Input<Inputs.PresetThumbnailsGetArgs>? Thumbnails { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Video parameters object (documented below)
        /// </summary>
        [Input("video")]
        public Input<Inputs.PresetVideoGetArgs>? Video { get; set; }

        [Input("videoCodecOptions")]
        private InputMap<object>? _videoCodecOptions;
        public InputMap<object> VideoCodecOptions
        {
            get => _videoCodecOptions ?? (_videoCodecOptions = new InputMap<object>());
            set => _videoCodecOptions = value;
        }

        [Input("videoWatermarks")]
        private InputList<Inputs.PresetVideoWatermarksGetArgs>? _videoWatermarks;

        /// <summary>
        /// Watermark parameters for the video parameters (documented below)
        /// * `video_codec_options` (Optional, Forces new resource) Codec options for the video parameters
        /// </summary>
        public InputList<Inputs.PresetVideoWatermarksGetArgs> VideoWatermarks
        {
            get => _videoWatermarks ?? (_videoWatermarks = new InputList<Inputs.PresetVideoWatermarksGetArgs>());
            set => _videoWatermarks = value;
        }

        public PresetState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PresetAudioArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
        /// </summary>
        [Input("audioPackingMode")]
        public Input<string>? AudioPackingMode { get; set; }

        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        [Input("bitRate")]
        public Input<string>? BitRate { get; set; }

        /// <summary>
        /// The number of audio channels in the output file
        /// </summary>
        [Input("channels")]
        public Input<string>? Channels { get; set; }

        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        [Input("codec")]
        public Input<string>? Codec { get; set; }

        /// <summary>
        /// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
        /// </summary>
        [Input("sampleRate")]
        public Input<string>? SampleRate { get; set; }

        public PresetAudioArgs()
        {
        }
    }

    public sealed class PresetAudioCodecOptionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
        /// </summary>
        [Input("bitDepth")]
        public Input<string>? BitDepth { get; set; }

        /// <summary>
        /// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
        /// </summary>
        [Input("bitOrder")]
        public Input<string>? BitOrder { get; set; }

        /// <summary>
        /// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        /// <summary>
        /// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
        /// </summary>
        [Input("signed")]
        public Input<string>? Signed { get; set; }

        public PresetAudioCodecOptionsArgs()
        {
        }
    }

    public sealed class PresetAudioCodecOptionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
        /// </summary>
        [Input("bitDepth")]
        public Input<string>? BitDepth { get; set; }

        /// <summary>
        /// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
        /// </summary>
        [Input("bitOrder")]
        public Input<string>? BitOrder { get; set; }

        /// <summary>
        /// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        /// <summary>
        /// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
        /// </summary>
        [Input("signed")]
        public Input<string>? Signed { get; set; }

        public PresetAudioCodecOptionsGetArgs()
        {
        }
    }

    public sealed class PresetAudioGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
        /// </summary>
        [Input("audioPackingMode")]
        public Input<string>? AudioPackingMode { get; set; }

        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        [Input("bitRate")]
        public Input<string>? BitRate { get; set; }

        /// <summary>
        /// The number of audio channels in the output file
        /// </summary>
        [Input("channels")]
        public Input<string>? Channels { get; set; }

        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        [Input("codec")]
        public Input<string>? Codec { get; set; }

        /// <summary>
        /// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
        /// </summary>
        [Input("sampleRate")]
        public Input<string>? SampleRate { get; set; }

        public PresetAudioGetArgs()
        {
        }
    }

    public sealed class PresetThumbnailsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        [Input("aspectRatio")]
        public Input<string>? AspectRatio { get; set; }

        /// <summary>
        /// The format of thumbnails, if any. Valid formats are jpg and png.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        [Input("maxHeight")]
        public Input<string>? MaxHeight { get; set; }

        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        [Input("maxWidth")]
        public Input<string>? MaxWidth { get; set; }

        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        [Input("paddingPolicy")]
        public Input<string>? PaddingPolicy { get; set; }

        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        [Input("resolution")]
        public Input<string>? Resolution { get; set; }

        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        [Input("sizingPolicy")]
        public Input<string>? SizingPolicy { get; set; }

        public PresetThumbnailsArgs()
        {
        }
    }

    public sealed class PresetThumbnailsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        [Input("aspectRatio")]
        public Input<string>? AspectRatio { get; set; }

        /// <summary>
        /// The format of thumbnails, if any. Valid formats are jpg and png.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
        /// </summary>
        [Input("interval")]
        public Input<string>? Interval { get; set; }

        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        [Input("maxHeight")]
        public Input<string>? MaxHeight { get; set; }

        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        [Input("maxWidth")]
        public Input<string>? MaxWidth { get; set; }

        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        [Input("paddingPolicy")]
        public Input<string>? PaddingPolicy { get; set; }

        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        [Input("resolution")]
        public Input<string>? Resolution { get; set; }

        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        [Input("sizingPolicy")]
        public Input<string>? SizingPolicy { get; set; }

        public PresetThumbnailsGetArgs()
        {
        }
    }

    public sealed class PresetVideoArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        [Input("aspectRatio")]
        public Input<string>? AspectRatio { get; set; }

        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        [Input("bitRate")]
        public Input<string>? BitRate { get; set; }

        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        [Input("codec")]
        public Input<string>? Codec { get; set; }

        /// <summary>
        /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
        /// </summary>
        [Input("displayAspectRatio")]
        public Input<string>? DisplayAspectRatio { get; set; }

        /// <summary>
        /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
        /// </summary>
        [Input("fixedGop")]
        public Input<string>? FixedGop { get; set; }

        /// <summary>
        /// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
        /// </summary>
        [Input("frameRate")]
        public Input<string>? FrameRate { get; set; }

        /// <summary>
        /// The maximum number of frames between key frames. Not applicable for containers of type gif.
        /// </summary>
        [Input("keyframesMaxDist")]
        public Input<string>? KeyframesMaxDist { get; set; }

        /// <summary>
        /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
        /// </summary>
        [Input("maxFrameRate")]
        public Input<string>? MaxFrameRate { get; set; }

        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        [Input("maxHeight")]
        public Input<string>? MaxHeight { get; set; }

        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        [Input("maxWidth")]
        public Input<string>? MaxWidth { get; set; }

        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        [Input("paddingPolicy")]
        public Input<string>? PaddingPolicy { get; set; }

        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        [Input("resolution")]
        public Input<string>? Resolution { get; set; }

        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        [Input("sizingPolicy")]
        public Input<string>? SizingPolicy { get; set; }

        public PresetVideoArgs()
        {
        }
    }

    public sealed class PresetVideoGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        [Input("aspectRatio")]
        public Input<string>? AspectRatio { get; set; }

        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        [Input("bitRate")]
        public Input<string>? BitRate { get; set; }

        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        [Input("codec")]
        public Input<string>? Codec { get; set; }

        /// <summary>
        /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
        /// </summary>
        [Input("displayAspectRatio")]
        public Input<string>? DisplayAspectRatio { get; set; }

        /// <summary>
        /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
        /// </summary>
        [Input("fixedGop")]
        public Input<string>? FixedGop { get; set; }

        /// <summary>
        /// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
        /// </summary>
        [Input("frameRate")]
        public Input<string>? FrameRate { get; set; }

        /// <summary>
        /// The maximum number of frames between key frames. Not applicable for containers of type gif.
        /// </summary>
        [Input("keyframesMaxDist")]
        public Input<string>? KeyframesMaxDist { get; set; }

        /// <summary>
        /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
        /// </summary>
        [Input("maxFrameRate")]
        public Input<string>? MaxFrameRate { get; set; }

        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        [Input("maxHeight")]
        public Input<string>? MaxHeight { get; set; }

        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        [Input("maxWidth")]
        public Input<string>? MaxWidth { get; set; }

        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        [Input("paddingPolicy")]
        public Input<string>? PaddingPolicy { get; set; }

        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        [Input("resolution")]
        public Input<string>? Resolution { get; set; }

        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        [Input("sizingPolicy")]
        public Input<string>? SizingPolicy { get; set; }

        public PresetVideoGetArgs()
        {
        }
    }

    public sealed class PresetVideoWatermarksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
        /// </summary>
        [Input("horizontalAlign")]
        public Input<string>? HorizontalAlign { get; set; }

        /// <summary>
        /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
        /// </summary>
        [Input("horizontalOffset")]
        public Input<string>? HorizontalOffset { get; set; }

        /// <summary>
        /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        [Input("maxHeight")]
        public Input<string>? MaxHeight { get; set; }

        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        [Input("maxWidth")]
        public Input<string>? MaxWidth { get; set; }

        /// <summary>
        /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
        /// </summary>
        [Input("opacity")]
        public Input<string>? Opacity { get; set; }

        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        [Input("sizingPolicy")]
        public Input<string>? SizingPolicy { get; set; }

        /// <summary>
        /// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
        /// </summary>
        [Input("verticalAlign")]
        public Input<string>? VerticalAlign { get; set; }

        /// <summary>
        /// The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
        /// </summary>
        [Input("verticalOffset")]
        public Input<string>? VerticalOffset { get; set; }

        public PresetVideoWatermarksArgs()
        {
        }
    }

    public sealed class PresetVideoWatermarksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
        /// </summary>
        [Input("horizontalAlign")]
        public Input<string>? HorizontalAlign { get; set; }

        /// <summary>
        /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
        /// </summary>
        [Input("horizontalOffset")]
        public Input<string>? HorizontalOffset { get; set; }

        /// <summary>
        /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        [Input("maxHeight")]
        public Input<string>? MaxHeight { get; set; }

        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        [Input("maxWidth")]
        public Input<string>? MaxWidth { get; set; }

        /// <summary>
        /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
        /// </summary>
        [Input("opacity")]
        public Input<string>? Opacity { get; set; }

        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        [Input("sizingPolicy")]
        public Input<string>? SizingPolicy { get; set; }

        /// <summary>
        /// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
        /// </summary>
        [Input("verticalAlign")]
        public Input<string>? VerticalAlign { get; set; }

        /// <summary>
        /// The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
        /// </summary>
        [Input("verticalOffset")]
        public Input<string>? VerticalOffset { get; set; }

        public PresetVideoWatermarksGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PresetAudio
    {
        /// <summary>
        /// The method of organizing audio channels and tracks. Use Audio:Channels to specify the number of channels in your output, and Audio:AudioPackingMode to specify the number of tracks and their relation to the channels. If you do not specify an Audio:AudioPackingMode, Elastic Transcoder uses SingleTrack.
        /// </summary>
        public readonly string? AudioPackingMode;
        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        public readonly string? BitRate;
        /// <summary>
        /// The number of audio channels in the output file
        /// </summary>
        public readonly string? Channels;
        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        public readonly string? Codec;
        /// <summary>
        /// The sample rate of the audio stream in the output file, in hertz. Valid values are: `auto`, `22050`, `32000`, `44100`, `48000`, `96000`
        /// </summary>
        public readonly string? SampleRate;

        [OutputConstructor]
        private PresetAudio(
            string? audioPackingMode,
            string? bitRate,
            string? channels,
            string? codec,
            string? sampleRate)
        {
            AudioPackingMode = audioPackingMode;
            BitRate = bitRate;
            Channels = channels;
            Codec = codec;
            SampleRate = sampleRate;
        }
    }

    [OutputType]
    public sealed class PresetAudioCodecOptions
    {
        /// <summary>
        /// The bit depth of a sample is how many bits of information are included in the audio samples. Valid values are `16` and `24`. (FLAC/PCM Only)
        /// </summary>
        public readonly string? BitDepth;
        /// <summary>
        /// The order the bits of a PCM sample are stored in. The supported value is LittleEndian. (PCM Only)
        /// </summary>
        public readonly string? BitOrder;
        /// <summary>
        /// If you specified AAC for Audio:Codec, choose the AAC profile for the output file.
        /// </summary>
        public readonly string? Profile;
        /// <summary>
        /// Whether audio samples are represented with negative and positive numbers (signed) or only positive numbers (unsigned). The supported value is Signed. (PCM Only)
        /// </summary>
        public readonly string? Signed;

        [OutputConstructor]
        private PresetAudioCodecOptions(
            string? bitDepth,
            string? bitOrder,
            string? profile,
            string? signed)
        {
            BitDepth = bitDepth;
            BitOrder = bitOrder;
            Profile = profile;
            Signed = signed;
        }
    }

    [OutputType]
    public sealed class PresetThumbnails
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        public readonly string? AspectRatio;
        /// <summary>
        /// The format of thumbnails, if any. Valid formats are jpg and png.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The approximate number of seconds between thumbnails. The value must be an integer. The actual interval can vary by several seconds from one thumbnail to the next.
        /// </summary>
        public readonly string? Interval;
        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        public readonly string? MaxHeight;
        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        public readonly string? MaxWidth;
        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        public readonly string? PaddingPolicy;
        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        public readonly string? Resolution;
        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        public readonly string? SizingPolicy;

        [OutputConstructor]
        private PresetThumbnails(
            string? aspectRatio,
            string? format,
            string? interval,
            string? maxHeight,
            string? maxWidth,
            string? paddingPolicy,
            string? resolution,
            string? sizingPolicy)
        {
            AspectRatio = aspectRatio;
            Format = format;
            Interval = interval;
            MaxHeight = maxHeight;
            MaxWidth = maxWidth;
            PaddingPolicy = paddingPolicy;
            Resolution = resolution;
            SizingPolicy = sizingPolicy;
        }
    }

    [OutputType]
    public sealed class PresetVideo
    {
        /// <summary>
        /// The display aspect ratio of the video in the output file. Valid values are: `auto`, `1:1`, `4:3`, `3:2`, `16:9`. (Note; to better control resolution and aspect ratio of output videos, we recommend that you use the values `max_width`, `max_height`, `sizing_policy`, `padding_policy`, and `display_aspect_ratio` instead of `resolution` and `aspect_ratio`.)
        /// </summary>
        public readonly string? AspectRatio;
        /// <summary>
        /// The bit rate of the video stream in the output file, in kilobits/second. You can configure variable bit rate or constant bit rate encoding.
        /// </summary>
        public readonly string? BitRate;
        /// <summary>
        /// The video codec for the output file. Valid values are `gif`, `H.264`, `mpeg2`, `vp8`, and `vp9`.
        /// </summary>
        public readonly string? Codec;
        /// <summary>
        /// The value that Elastic Transcoder adds to the metadata in the output file. If you set DisplayAspectRatio to auto, Elastic Transcoder chooses an aspect ratio that ensures square pixels. If you specify another option, Elastic Transcoder sets that value in the output file.
        /// </summary>
        public readonly string? DisplayAspectRatio;
        /// <summary>
        /// Whether to use a fixed value for Video:FixedGOP. Not applicable for containers of type gif. Valid values are true and false. Also known as, Fixed Number of Frames Between Keyframes.
        /// </summary>
        public readonly string? FixedGop;
        /// <summary>
        /// The frames per second for the video stream in the output file. The following values are valid: `auto`, `10`, `15`, `23.97`, `24`, `25`, `29.97`, `30`, `50`, `60`.
        /// </summary>
        public readonly string? FrameRate;
        /// <summary>
        /// The maximum number of frames between key frames. Not applicable for containers of type gif.
        /// </summary>
        public readonly string? KeyframesMaxDist;
        /// <summary>
        /// If you specify auto for FrameRate, Elastic Transcoder uses the frame rate of the input video for the frame rate of the output video, up to the maximum frame rate. If you do not specify a MaxFrameRate, Elastic Transcoder will use a default of 30.
        /// </summary>
        public readonly string? MaxFrameRate;
        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        public readonly string? MaxHeight;
        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        public readonly string? MaxWidth;
        /// <summary>
        /// When you set PaddingPolicy to Pad, Elastic Transcoder might add black bars to the top and bottom and/or left and right sides of the output video to make the total size of the output video match the values that you specified for `max_width` and `max_height`.
        /// </summary>
        public readonly string? PaddingPolicy;
        /// <summary>
        /// The width and height of the video in the output file, in pixels. Valid values are `auto` and `widthxheight`. (see note for `aspect_ratio`)
        /// </summary>
        public readonly string? Resolution;
        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        public readonly string? SizingPolicy;

        [OutputConstructor]
        private PresetVideo(
            string? aspectRatio,
            string? bitRate,
            string? codec,
            string? displayAspectRatio,
            string? fixedGop,
            string? frameRate,
            string? keyframesMaxDist,
            string? maxFrameRate,
            string? maxHeight,
            string? maxWidth,
            string? paddingPolicy,
            string? resolution,
            string? sizingPolicy)
        {
            AspectRatio = aspectRatio;
            BitRate = bitRate;
            Codec = codec;
            DisplayAspectRatio = displayAspectRatio;
            FixedGop = fixedGop;
            FrameRate = frameRate;
            KeyframesMaxDist = keyframesMaxDist;
            MaxFrameRate = maxFrameRate;
            MaxHeight = maxHeight;
            MaxWidth = maxWidth;
            PaddingPolicy = paddingPolicy;
            Resolution = resolution;
            SizingPolicy = sizingPolicy;
        }
    }

    [OutputType]
    public sealed class PresetVideoWatermarks
    {
        /// <summary>
        /// The horizontal position of the watermark unless you specify a nonzero value for `horzontal_offset`.
        /// </summary>
        public readonly string? HorizontalAlign;
        /// <summary>
        /// The amount by which you want the horizontal position of the watermark to be offset from the position specified by `horizontal_align`.
        /// </summary>
        public readonly string? HorizontalOffset;
        /// <summary>
        /// A unique identifier for the settings for one watermark. The value of Id can be up to 40 characters long. You can specify settings for up to four watermarks.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The maximum height of the watermark.
        /// </summary>
        public readonly string? MaxHeight;
        /// <summary>
        /// The maximum width of the watermark.
        /// </summary>
        public readonly string? MaxWidth;
        /// <summary>
        /// A percentage that indicates how much you want a watermark to obscure the video in the location where it appears.
        /// </summary>
        public readonly string? Opacity;
        /// <summary>
        /// A value that controls scaling of the watermark. Valid values are: `Fit`, `Stretch`, `ShrinkToFit`
        /// </summary>
        public readonly string? SizingPolicy;
        /// <summary>
        /// A value that determines how Elastic Transcoder interprets values that you specified for `video_watermarks.horizontal_offset`, `video_watermarks.vertical_offset`, `video_watermarks.max_width`, and `video_watermarks.max_height`. Valid values are `Content` and `Frame`.
        /// </summary>
        public readonly string? Target;
        /// <summary>
        /// The vertical position of the watermark unless you specify a nonzero value for `vertical_align`. Valid values are `Top`, `Bottom`, `Center`.
        /// </summary>
        public readonly string? VerticalAlign;
        /// <summary>
        /// The amount by which you want the vertical position of the watermark to be offset from the position specified by `vertical_align`
        /// </summary>
        public readonly string? VerticalOffset;

        [OutputConstructor]
        private PresetVideoWatermarks(
            string? horizontalAlign,
            string? horizontalOffset,
            string? id,
            string? maxHeight,
            string? maxWidth,
            string? opacity,
            string? sizingPolicy,
            string? target,
            string? verticalAlign,
            string? verticalOffset)
        {
            HorizontalAlign = horizontalAlign;
            HorizontalOffset = horizontalOffset;
            Id = id;
            MaxHeight = maxHeight;
            MaxWidth = maxWidth;
            Opacity = opacity;
            SizingPolicy = sizingPolicy;
            Target = target;
            VerticalAlign = verticalAlign;
            VerticalOffset = verticalOffset;
        }
    }
    }
}
