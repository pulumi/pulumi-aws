// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppStream
{
    /// <summary>
    /// Manages an AppStream Fleet Stack association.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleFleet = new Aws.AppStream.Fleet("exampleFleet", new()
    ///     {
    ///         ImageName = "Amazon-AppStream2-Sample-Image-02-04-2019",
    ///         InstanceType = "stream.standard.small",
    ///         ComputeCapacity = new Aws.AppStream.Inputs.FleetComputeCapacityArgs
    ///         {
    ///             DesiredInstances = 1,
    ///         },
    ///     });
    /// 
    ///     var exampleStack = new Aws.AppStream.Stack("exampleStack");
    /// 
    ///     var exampleFleetStackAssociation = new Aws.AppStream.FleetStackAssociation("exampleFleetStackAssociation", new()
    ///     {
    ///         FleetName = exampleFleet.Name,
    ///         StackName = exampleStack.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import AppStream Stack Fleet Association using the `fleet_name` and `stack_name` separated by a slash (`/`). For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:appstream/fleetStackAssociation:FleetStackAssociation example fleetName/stackName
    /// ```
    /// </summary>
    [AwsResourceType("aws:appstream/fleetStackAssociation:FleetStackAssociation")]
    public partial class FleetStackAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the fleet.
        /// </summary>
        [Output("fleetName")]
        public Output<string> FleetName { get; private set; } = null!;

        /// <summary>
        /// Name of the stack.
        /// </summary>
        [Output("stackName")]
        public Output<string> StackName { get; private set; } = null!;


        /// <summary>
        /// Create a FleetStackAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FleetStackAssociation(string name, FleetStackAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:appstream/fleetStackAssociation:FleetStackAssociation", name, args ?? new FleetStackAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FleetStackAssociation(string name, Input<string> id, FleetStackAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:appstream/fleetStackAssociation:FleetStackAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FleetStackAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FleetStackAssociation Get(string name, Input<string> id, FleetStackAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new FleetStackAssociation(name, id, state, options);
        }
    }

    public sealed class FleetStackAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the fleet.
        /// </summary>
        [Input("fleetName", required: true)]
        public Input<string> FleetName { get; set; } = null!;

        /// <summary>
        /// Name of the stack.
        /// </summary>
        [Input("stackName", required: true)]
        public Input<string> StackName { get; set; } = null!;

        public FleetStackAssociationArgs()
        {
        }
        public static new FleetStackAssociationArgs Empty => new FleetStackAssociationArgs();
    }

    public sealed class FleetStackAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the fleet.
        /// </summary>
        [Input("fleetName")]
        public Input<string>? FleetName { get; set; }

        /// <summary>
        /// Name of the stack.
        /// </summary>
        [Input("stackName")]
        public Input<string>? StackName { get; set; }

        public FleetStackAssociationState()
        {
        }
        public static new FleetStackAssociationState Empty => new FleetStackAssociationState();
    }
}
