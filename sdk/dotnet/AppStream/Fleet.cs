// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppStream
{
    /// <summary>
    /// Provides an AppStream fleet.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testFleet = new Aws.AppStream.Fleet("testFleet", new()
    ///     {
    ///         ComputeCapacity = new Aws.AppStream.Inputs.FleetComputeCapacityArgs
    ///         {
    ///             DesiredInstances = 1,
    ///         },
    ///         Description = "test fleet",
    ///         DisplayName = "test-fleet",
    ///         EnableDefaultInternetAccess = false,
    ///         FleetType = "ON_DEMAND",
    ///         IdleDisconnectTimeoutInSeconds = 60,
    ///         ImageName = "Amazon-AppStream2-Sample-Image-02-04-2019",
    ///         InstanceType = "stream.standard.large",
    ///         MaxUserDurationInSeconds = 600,
    ///         Tags = 
    ///         {
    ///             { "TagName", "tag-value" },
    ///         },
    ///         VpcConfig = new Aws.AppStream.Inputs.FleetVpcConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 "subnet-06e9b13400c225127",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `aws_appstream_fleet` using the id. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:appstream/fleet:Fleet example fleetNameExample
    /// ```
    /// </summary>
    [AwsResourceType("aws:appstream/fleet:Fleet")]
    public partial class Fleet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the appstream fleet.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the desired capacity of the fleet. See below.
        /// </summary>
        [Output("computeCapacity")]
        public Output<Outputs.FleetComputeCapacity> ComputeCapacity { get; private set; } = null!;

        /// <summary>
        /// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// Description to display.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect.
        /// </summary>
        [Output("disconnectTimeoutInSeconds")]
        public Output<int> DisconnectTimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// Human-readable friendly name for the AppStream fleet.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
        /// </summary>
        [Output("domainJoinInfo")]
        public Output<Outputs.FleetDomainJoinInfo> DomainJoinInfo { get; private set; } = null!;

        /// <summary>
        /// Enables or disables default internet access for the fleet.
        /// </summary>
        [Output("enableDefaultInternetAccess")]
        public Output<bool> EnableDefaultInternetAccess { get; private set; } = null!;

        /// <summary>
        /// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
        /// </summary>
        [Output("fleetType")]
        public Output<string> FleetType { get; private set; } = null!;

        /// <summary>
        /// ARN of the IAM role to apply to the fleet.
        /// </summary>
        [Output("iamRoleArn")]
        public Output<string> IamRoleArn { get; private set; } = null!;

        /// <summary>
        /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnect_timeout_in_seconds` time interval begins.
        /// </summary>
        [Output("idleDisconnectTimeoutInSeconds")]
        public Output<int?> IdleDisconnectTimeoutInSeconds { get; private set; } = null!;

        /// <summary>
        /// ARN of the public, private, or shared image to use.
        /// </summary>
        [Output("imageArn")]
        public Output<string> ImageArn { get; private set; } = null!;

        /// <summary>
        /// Name of the image used to create the fleet.
        /// </summary>
        [Output("imageName")]
        public Output<string> ImageName { get; private set; } = null!;

        /// <summary>
        /// Instance type to use when launching fleet instances.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of time that a streaming session can remain active, in seconds.
        /// </summary>
        [Output("maxUserDurationInSeconds")]
        public Output<int> MaxUserDurationInSeconds { get; private set; } = null!;

        /// <summary>
        /// Unique name for the fleet.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
        /// </summary>
        [Output("streamView")]
        public Output<string> StreamView { get; private set; } = null!;

        /// <summary>
        /// Map of tags to attach to AppStream instances.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the VPC configuration for the image builder. See below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.FleetVpcConfig> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Fleet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Fleet(string name, FleetArgs args, CustomResourceOptions? options = null)
            : base("aws:appstream/fleet:Fleet", name, args ?? new FleetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Fleet(string name, Input<string> id, FleetState? state = null, CustomResourceOptions? options = null)
            : base("aws:appstream/fleet:Fleet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Fleet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Fleet Get(string name, Input<string> id, FleetState? state = null, CustomResourceOptions? options = null)
        {
            return new Fleet(name, id, state, options);
        }
    }

    public sealed class FleetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for the desired capacity of the fleet. See below.
        /// </summary>
        [Input("computeCapacity", required: true)]
        public Input<Inputs.FleetComputeCapacityArgs> ComputeCapacity { get; set; } = null!;

        /// <summary>
        /// Description to display.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect.
        /// </summary>
        [Input("disconnectTimeoutInSeconds")]
        public Input<int>? DisconnectTimeoutInSeconds { get; set; }

        /// <summary>
        /// Human-readable friendly name for the AppStream fleet.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
        /// </summary>
        [Input("domainJoinInfo")]
        public Input<Inputs.FleetDomainJoinInfoArgs>? DomainJoinInfo { get; set; }

        /// <summary>
        /// Enables or disables default internet access for the fleet.
        /// </summary>
        [Input("enableDefaultInternetAccess")]
        public Input<bool>? EnableDefaultInternetAccess { get; set; }

        /// <summary>
        /// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
        /// </summary>
        [Input("fleetType")]
        public Input<string>? FleetType { get; set; }

        /// <summary>
        /// ARN of the IAM role to apply to the fleet.
        /// </summary>
        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        /// <summary>
        /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnect_timeout_in_seconds` time interval begins.
        /// </summary>
        [Input("idleDisconnectTimeoutInSeconds")]
        public Input<int>? IdleDisconnectTimeoutInSeconds { get; set; }

        /// <summary>
        /// ARN of the public, private, or shared image to use.
        /// </summary>
        [Input("imageArn")]
        public Input<string>? ImageArn { get; set; }

        /// <summary>
        /// Name of the image used to create the fleet.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// Instance type to use when launching fleet instances.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// Maximum amount of time that a streaming session can remain active, in seconds.
        /// </summary>
        [Input("maxUserDurationInSeconds")]
        public Input<int>? MaxUserDurationInSeconds { get; set; }

        /// <summary>
        /// Unique name for the fleet.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
        /// </summary>
        [Input("streamView")]
        public Input<string>? StreamView { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to attach to AppStream instances.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Configuration block for the VPC configuration for the image builder. See below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FleetVpcConfigArgs>? VpcConfig { get; set; }

        public FleetArgs()
        {
        }
        public static new FleetArgs Empty => new FleetArgs();
    }

    public sealed class FleetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the appstream fleet.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Configuration block for the desired capacity of the fleet. See below.
        /// </summary>
        [Input("computeCapacity")]
        public Input<Inputs.FleetComputeCapacityGetArgs>? ComputeCapacity { get; set; }

        /// <summary>
        /// Date and time, in UTC and extended RFC 3339 format, when the fleet was created.
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// Description to display.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect.
        /// </summary>
        [Input("disconnectTimeoutInSeconds")]
        public Input<int>? DisconnectTimeoutInSeconds { get; set; }

        /// <summary>
        /// Human-readable friendly name for the AppStream fleet.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Configuration block for the name of the directory and organizational unit (OU) to use to join the fleet to a Microsoft Active Directory domain. See below.
        /// </summary>
        [Input("domainJoinInfo")]
        public Input<Inputs.FleetDomainJoinInfoGetArgs>? DomainJoinInfo { get; set; }

        /// <summary>
        /// Enables or disables default internet access for the fleet.
        /// </summary>
        [Input("enableDefaultInternetAccess")]
        public Input<bool>? EnableDefaultInternetAccess { get; set; }

        /// <summary>
        /// Fleet type. Valid values are: `ON_DEMAND`, `ALWAYS_ON`
        /// </summary>
        [Input("fleetType")]
        public Input<string>? FleetType { get; set; }

        /// <summary>
        /// ARN of the IAM role to apply to the fleet.
        /// </summary>
        [Input("iamRoleArn")]
        public Input<string>? IamRoleArn { get; set; }

        /// <summary>
        /// Amount of time that users can be idle (inactive) before they are disconnected from their streaming session and the `disconnect_timeout_in_seconds` time interval begins.
        /// </summary>
        [Input("idleDisconnectTimeoutInSeconds")]
        public Input<int>? IdleDisconnectTimeoutInSeconds { get; set; }

        /// <summary>
        /// ARN of the public, private, or shared image to use.
        /// </summary>
        [Input("imageArn")]
        public Input<string>? ImageArn { get; set; }

        /// <summary>
        /// Name of the image used to create the fleet.
        /// </summary>
        [Input("imageName")]
        public Input<string>? ImageName { get; set; }

        /// <summary>
        /// Instance type to use when launching fleet instances.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Maximum amount of time that a streaming session can remain active, in seconds.
        /// </summary>
        [Input("maxUserDurationInSeconds")]
        public Input<int>? MaxUserDurationInSeconds { get; set; }

        /// <summary>
        /// Unique name for the fleet.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// State of the fleet. Can be `STARTING`, `RUNNING`, `STOPPING` or `STOPPED`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// AppStream 2.0 view that is displayed to your users when they stream from the fleet. When `APP` is specified, only the windows of applications opened by users display. When `DESKTOP` is specified, the standard desktop that is provided by the operating system displays. If not specified, defaults to `APP`.
        /// </summary>
        [Input("streamView")]
        public Input<string>? StreamView { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to attach to AppStream instances.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Configuration block for the VPC configuration for the image builder. See below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FleetVpcConfigGetArgs>? VpcConfig { get; set; }

        public FleetState()
        {
        }
        public static new FleetState Empty => new FleetState();
    }
}
