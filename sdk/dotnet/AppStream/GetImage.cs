// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppStream
{
    public static class GetImage
    {
        /// <summary>
        /// Data source for managing an AWS AppStream 2.0 Image.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.AppStream.GetImage.Invoke(new()
        ///     {
        ///         Name = "AppStream-WinServer2019-06-17-2024",
        ///         Type = "PUBLIC",
        ///         MostRecent = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("aws:appstream/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS AppStream 2.0 Image.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.AppStream.GetImage.Invoke(new()
        ///     {
        ///         Name = "AppStream-WinServer2019-06-17-2024",
        ///         Type = "PUBLIC",
        ///         MostRecent = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("aws:appstream/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS AppStream 2.0 Image.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.AppStream.GetImage.Invoke(new()
        ///     {
        ///         Name = "AppStream-WinServer2019-06-17-2024",
        ///         Type = "PUBLIC",
        ///         MostRecent = true,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("aws:appstream/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Arn of the image being searched for. Cannot be used with name_regex or name.
        /// </summary>
        [Input("arn")]
        public string? Arn { get; set; }

        /// <summary>
        /// Boolean that if it is set to true and there are multiple images returned the most recent will be returned. If it is set to false and there are multiple images return the datasource will error.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// Name of the image being searched for. Cannot be used with name_regex or arn.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Regular expression name of the image being searched for. Cannot be used with arn or name.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The type of image which must be (PUBLIC, PRIVATE, or SHARED).
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Arn of the image being searched for. Cannot be used with name_regex or name.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Boolean that if it is set to true and there are multiple images returned the most recent will be returned. If it is set to false and there are multiple images return the datasource will error.
        /// </summary>
        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        /// <summary>
        /// Name of the image being searched for. Cannot be used with name_regex or arn.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Regular expression name of the image being searched for. Cannot be used with arn or name.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The type of image which must be (PUBLIC, PRIVATE, or SHARED).
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        public readonly ImmutableArray<Outputs.GetImageApplicationResult> Applications;
        /// <summary>
        /// Version of the AppStream 2.0 agent to use for instances that are launched from this image. Has a maximum length of 100 characters.
        /// </summary>
        public readonly string AppstreamAgentVersion;
        /// <summary>
        /// ARN of the image.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// ARN of the image from which the image was created.
        /// </summary>
        public readonly string BaseImageArn;
        /// <summary>
        /// Time at which this image was created.
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// Description of image.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Image name to display.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the image builder that was used to created the private image. If the image is sharedthen the value is null.
        /// </summary>
        public readonly string ImageBuilderName;
        /// <summary>
        /// Boolean to indicate whether an image builder can be launched from this image.
        /// * `image error` - Resource error object that describes the error containing the following:
        /// </summary>
        public readonly bool ImageBuilderSupported;
        /// <summary>
        /// List of strings describing the image permissions containing the following:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageImagePermissionResult> ImagePermissions;
        public readonly bool? MostRecent;
        public readonly string Name;
        public readonly string? NameRegex;
        /// <summary>
        /// Operating system platform of the image. Values will be from: WINDOWS | WINDOWS_SERVER_2016 | WINDOWS_SERVER_2019 | WINDOWS_SERVER_2022 | AMAZON_LINUX2
        /// </summary>
        public readonly string Platform;
        public readonly string PublicBaseImageReleasedDate;
        /// <summary>
        /// Current state of image. Image starts in PENDING state which changes to AVAILABLE if creation passes and FAILED if it fails. Values will be from: PENDING | AVAILABLE | FAILED | COPYING | DELETING | CREATING | IMPORTING.
        /// </summary>
        public readonly string State;
        public readonly ImmutableArray<Outputs.GetImageStateChangeReasonResult> StateChangeReasons;
        public readonly string? Type;

        [OutputConstructor]
        private GetImageResult(
            ImmutableArray<Outputs.GetImageApplicationResult> applications,

            string appstreamAgentVersion,

            string arn,

            string baseImageArn,

            string createdTime,

            string description,

            string displayName,

            string id,

            string imageBuilderName,

            bool imageBuilderSupported,

            ImmutableArray<Outputs.GetImageImagePermissionResult> imagePermissions,

            bool? mostRecent,

            string name,

            string? nameRegex,

            string platform,

            string publicBaseImageReleasedDate,

            string state,

            ImmutableArray<Outputs.GetImageStateChangeReasonResult> stateChangeReasons,

            string? type)
        {
            Applications = applications;
            AppstreamAgentVersion = appstreamAgentVersion;
            Arn = arn;
            BaseImageArn = baseImageArn;
            CreatedTime = createdTime;
            Description = description;
            DisplayName = displayName;
            Id = id;
            ImageBuilderName = imageBuilderName;
            ImageBuilderSupported = imageBuilderSupported;
            ImagePermissions = imagePermissions;
            MostRecent = mostRecent;
            Name = name;
            NameRegex = nameRegex;
            Platform = platform;
            PublicBaseImageReleasedDate = publicBaseImageReleasedDate;
            State = state;
            StateChangeReasons = stateChangeReasons;
            Type = type;
        }
    }
}
