// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VerifiedAccess
{
    /// <summary>
    /// Resource for managing a Verified Access Trust Provider.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.VerifiedAccess.TrustProvider("example", new()
    ///     {
    ///         PolicyReferenceName = "example",
    ///         TrustProviderType = "user",
    ///         UserTrustProviderType = "iam-identity-center",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Transfer Workflows using the
    /// 
    /// `id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:verifiedaccess/trustProvider:TrustProvider example vatp-8012925589
    /// ```
    /// </summary>
    [AwsResourceType("aws:verifiedaccess/trustProvider:TrustProvider")]
    public partial class TrustProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description for the AWS Verified Access trust provider.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A block of options for device identity based trust providers.
        /// </summary>
        [Output("deviceOptions")]
        public Output<Outputs.TrustProviderDeviceOptions?> DeviceOptions { get; private set; } = null!;

        /// <summary>
        /// The type of device-based trust provider.
        /// </summary>
        [Output("deviceTrustProviderType")]
        public Output<string?> DeviceTrustProviderType { get; private set; } = null!;

        /// <summary>
        /// The OpenID Connect details for an oidc-type, user-identity based trust provider.
        /// </summary>
        [Output("oidcOptions")]
        public Output<Outputs.TrustProviderOidcOptions?> OidcOptions { get; private set; } = null!;

        /// <summary>
        /// The identifier to be used when working with policy rules.
        /// </summary>
        [Output("policyReferenceName")]
        public Output<string> PolicyReferenceName { get; private set; } = null!;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The type of trust provider can be either user or device-based.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("trustProviderType")]
        public Output<string> TrustProviderType { get; private set; } = null!;

        /// <summary>
        /// The type of user-based trust provider.
        /// </summary>
        [Output("userTrustProviderType")]
        public Output<string?> UserTrustProviderType { get; private set; } = null!;


        /// <summary>
        /// Create a TrustProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrustProvider(string name, TrustProviderArgs args, CustomResourceOptions? options = null)
            : base("aws:verifiedaccess/trustProvider:TrustProvider", name, args ?? new TrustProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrustProvider(string name, Input<string> id, TrustProviderState? state = null, CustomResourceOptions? options = null)
            : base("aws:verifiedaccess/trustProvider:TrustProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrustProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrustProvider Get(string name, Input<string> id, TrustProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new TrustProvider(name, id, state, options);
        }
    }

    public sealed class TrustProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the AWS Verified Access trust provider.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A block of options for device identity based trust providers.
        /// </summary>
        [Input("deviceOptions")]
        public Input<Inputs.TrustProviderDeviceOptionsArgs>? DeviceOptions { get; set; }

        /// <summary>
        /// The type of device-based trust provider.
        /// </summary>
        [Input("deviceTrustProviderType")]
        public Input<string>? DeviceTrustProviderType { get; set; }

        /// <summary>
        /// The OpenID Connect details for an oidc-type, user-identity based trust provider.
        /// </summary>
        [Input("oidcOptions")]
        public Input<Inputs.TrustProviderOidcOptionsArgs>? OidcOptions { get; set; }

        /// <summary>
        /// The identifier to be used when working with policy rules.
        /// </summary>
        [Input("policyReferenceName", required: true)]
        public Input<string> PolicyReferenceName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of trust provider can be either user or device-based.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("trustProviderType", required: true)]
        public Input<string> TrustProviderType { get; set; } = null!;

        /// <summary>
        /// The type of user-based trust provider.
        /// </summary>
        [Input("userTrustProviderType")]
        public Input<string>? UserTrustProviderType { get; set; }

        public TrustProviderArgs()
        {
        }
        public static new TrustProviderArgs Empty => new TrustProviderArgs();
    }

    public sealed class TrustProviderState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description for the AWS Verified Access trust provider.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A block of options for device identity based trust providers.
        /// </summary>
        [Input("deviceOptions")]
        public Input<Inputs.TrustProviderDeviceOptionsGetArgs>? DeviceOptions { get; set; }

        /// <summary>
        /// The type of device-based trust provider.
        /// </summary>
        [Input("deviceTrustProviderType")]
        public Input<string>? DeviceTrustProviderType { get; set; }

        /// <summary>
        /// The OpenID Connect details for an oidc-type, user-identity based trust provider.
        /// </summary>
        [Input("oidcOptions")]
        public Input<Inputs.TrustProviderOidcOptionsGetArgs>? OidcOptions { get; set; }

        /// <summary>
        /// The identifier to be used when working with policy rules.
        /// </summary>
        [Input("policyReferenceName")]
        public Input<string>? PolicyReferenceName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The type of trust provider can be either user or device-based.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("trustProviderType")]
        public Input<string>? TrustProviderType { get; set; }

        /// <summary>
        /// The type of user-based trust provider.
        /// </summary>
        [Input("userTrustProviderType")]
        public Input<string>? UserTrustProviderType { get; set; }

        public TrustProviderState()
        {
        }
        public static new TrustProviderState Empty => new TrustProviderState();
    }
}
