// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VerifiedAccess
{
    /// <summary>
    /// Resource for managing an AWS EC2 (Elastic Compute Cloud) Verified Access Endpoint.
    /// 
    /// ## Example Usage
    /// ### ALB Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.VerifiedAccess.Endpoint("example", new()
    ///     {
    ///         ApplicationDomain = "example.com",
    ///         AttachmentType = "vpc",
    ///         Description = "example",
    ///         DomainCertificateArn = aws_acm_certificate.Example.Arn,
    ///         EndpointDomainPrefix = "example",
    ///         EndpointType = "load-balancer",
    ///         LoadBalancerOptions = new Aws.VerifiedAccess.Inputs.EndpointLoadBalancerOptionsArgs
    ///         {
    ///             LoadBalancerArn = aws_lb.Example.Arn,
    ///             Port = 443,
    ///             Protocol = "https",
    ///             SubnetIds = .Select(subnet =&gt; 
    ///             {
    ///                 return subnet.Id;
    ///             }).ToList(),
    ///         },
    ///         SecurityGroupIds = new[]
    ///         {
    ///             aws_security_group.Example.Id,
    ///         },
    ///         VerifiedAccessGroupId = aws_verifiedaccess_group.Example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Network Interface Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.VerifiedAccess.Endpoint("example", new()
    ///     {
    ///         ApplicationDomain = "example.com",
    ///         AttachmentType = "vpc",
    ///         Description = "example",
    ///         DomainCertificateArn = aws_acm_certificate.Example.Arn,
    ///         EndpointDomainPrefix = "example",
    ///         EndpointType = "network-interface",
    ///         NetworkInterfaceOptions = new Aws.VerifiedAccess.Inputs.EndpointNetworkInterfaceOptionsArgs
    ///         {
    ///             NetworkInterfaceId = aws_network_interface.Example.Id,
    ///             Port = 443,
    ///             Protocol = "https",
    ///         },
    ///         SecurityGroupIds = new[]
    ///         {
    ///             aws_security_group.Example.Id,
    ///         },
    ///         VerifiedAccessGroupId = aws_verifiedaccess_group.Example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Verified Access Instances using the
    /// 
    /// `id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:verifiedaccess/endpoint:Endpoint example vae-8012925589
    /// ```
    /// </summary>
    [AwsResourceType("aws:verifiedaccess/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The DNS name for users to reach your application.
        /// </summary>
        [Output("applicationDomain")]
        public Output<string> ApplicationDomain { get; private set; } = null!;

        /// <summary>
        /// The type of attachment. Currently, only `vpc` is supported.
        /// </summary>
        [Output("attachmentType")]
        public Output<string> AttachmentType { get; private set; } = null!;

        /// <summary>
        /// A description for the Verified Access endpoint.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Returned if endpoint has a device trust provider attached.
        /// </summary>
        [Output("deviceValidationDomain")]
        public Output<string> DeviceValidationDomain { get; private set; } = null!;

        /// <summary>
        /// The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
        /// </summary>
        [Output("domainCertificateArn")]
        public Output<string> DomainCertificateArn { get; private set; } = null!;

        /// <summary>
        /// A DNS name that is generated for the endpoint.
        /// </summary>
        [Output("endpointDomain")]
        public Output<string> EndpointDomain { get; private set; } = null!;

        /// <summary>
        /// A custom identifier that is prepended to the DNS name that is generated for the endpoint.
        /// </summary>
        [Output("endpointDomainPrefix")]
        public Output<string> EndpointDomainPrefix { get; private set; } = null!;

        /// <summary>
        /// The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
        /// </summary>
        [Output("endpointType")]
        public Output<string> EndpointType { get; private set; } = null!;

        /// <summary>
        /// The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
        /// </summary>
        [Output("loadBalancerOptions")]
        public Output<Outputs.EndpointLoadBalancerOptions?> LoadBalancerOptions { get; private set; } = null!;

        /// <summary>
        /// The network interface details. This parameter is required if the endpoint type is `network-interface`.
        /// </summary>
        [Output("networkInterfaceOptions")]
        public Output<Outputs.EndpointNetworkInterfaceOptions?> NetworkInterfaceOptions { get; private set; } = null!;

        /// <summary>
        /// List of the the security groups IDs to associate with the Verified Access endpoint.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The options in use for server side encryption.
        /// </summary>
        [Output("sseSpecification")]
        public Output<Outputs.EndpointSseSpecification> SseSpecification { get; private set; } = null!;

        /// <summary>
        /// Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The ID of the Verified Access group to associate the endpoint with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("verifiedAccessGroupId")]
        public Output<string> VerifiedAccessGroupId { get; private set; } = null!;

        [Output("verifiedAccessInstanceId")]
        public Output<string> VerifiedAccessInstanceId { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:verifiedaccess/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:verifiedaccess/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS name for users to reach your application.
        /// </summary>
        [Input("applicationDomain", required: true)]
        public Input<string> ApplicationDomain { get; set; } = null!;

        /// <summary>
        /// The type of attachment. Currently, only `vpc` is supported.
        /// </summary>
        [Input("attachmentType", required: true)]
        public Input<string> AttachmentType { get; set; } = null!;

        /// <summary>
        /// A description for the Verified Access endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
        /// </summary>
        [Input("domainCertificateArn", required: true)]
        public Input<string> DomainCertificateArn { get; set; } = null!;

        /// <summary>
        /// A custom identifier that is prepended to the DNS name that is generated for the endpoint.
        /// </summary>
        [Input("endpointDomainPrefix", required: true)]
        public Input<string> EndpointDomainPrefix { get; set; } = null!;

        /// <summary>
        /// The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
        /// </summary>
        [Input("endpointType", required: true)]
        public Input<string> EndpointType { get; set; } = null!;

        /// <summary>
        /// The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
        /// </summary>
        [Input("loadBalancerOptions")]
        public Input<Inputs.EndpointLoadBalancerOptionsArgs>? LoadBalancerOptions { get; set; }

        /// <summary>
        /// The network interface details. This parameter is required if the endpoint type is `network-interface`.
        /// </summary>
        [Input("networkInterfaceOptions")]
        public Input<Inputs.EndpointNetworkInterfaceOptionsArgs>? NetworkInterfaceOptions { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// List of the the security groups IDs to associate with the Verified Access endpoint.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The options in use for server side encryption.
        /// </summary>
        [Input("sseSpecification")]
        public Input<Inputs.EndpointSseSpecificationArgs>? SseSpecification { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the Verified Access group to associate the endpoint with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("verifiedAccessGroupId", required: true)]
        public Input<string> VerifiedAccessGroupId { get; set; } = null!;

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The DNS name for users to reach your application.
        /// </summary>
        [Input("applicationDomain")]
        public Input<string>? ApplicationDomain { get; set; }

        /// <summary>
        /// The type of attachment. Currently, only `vpc` is supported.
        /// </summary>
        [Input("attachmentType")]
        public Input<string>? AttachmentType { get; set; }

        /// <summary>
        /// A description for the Verified Access endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Returned if endpoint has a device trust provider attached.
        /// </summary>
        [Input("deviceValidationDomain")]
        public Input<string>? DeviceValidationDomain { get; set; }

        /// <summary>
        /// The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
        /// </summary>
        [Input("domainCertificateArn")]
        public Input<string>? DomainCertificateArn { get; set; }

        /// <summary>
        /// A DNS name that is generated for the endpoint.
        /// </summary>
        [Input("endpointDomain")]
        public Input<string>? EndpointDomain { get; set; }

        /// <summary>
        /// A custom identifier that is prepended to the DNS name that is generated for the endpoint.
        /// </summary>
        [Input("endpointDomainPrefix")]
        public Input<string>? EndpointDomainPrefix { get; set; }

        /// <summary>
        /// The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
        /// </summary>
        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        /// <summary>
        /// The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
        /// </summary>
        [Input("loadBalancerOptions")]
        public Input<Inputs.EndpointLoadBalancerOptionsGetArgs>? LoadBalancerOptions { get; set; }

        /// <summary>
        /// The network interface details. This parameter is required if the endpoint type is `network-interface`.
        /// </summary>
        [Input("networkInterfaceOptions")]
        public Input<Inputs.EndpointNetworkInterfaceOptionsGetArgs>? NetworkInterfaceOptions { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// List of the the security groups IDs to associate with the Verified Access endpoint.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The options in use for server side encryption.
        /// </summary>
        [Input("sseSpecification")]
        public Input<Inputs.EndpointSseSpecificationGetArgs>? SseSpecification { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value tags for the Verified Access Endpoint. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The ID of the Verified Access group to associate the endpoint with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("verifiedAccessGroupId")]
        public Input<string>? VerifiedAccessGroupId { get; set; }

        [Input("verifiedAccessInstanceId")]
        public Input<string>? VerifiedAccessInstanceId { get; set; }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
