// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VerifiedAccess.Outputs
{

    [OutputType]
    public sealed class InstanceLoggingConfigurationAccessLogs
    {
        /// <summary>
        /// A block that specifies configures sending Verified Access logs to CloudWatch Logs. Detailed below.
        /// </summary>
        public readonly Outputs.InstanceLoggingConfigurationAccessLogsCloudwatchLogs? CloudwatchLogs;
        /// <summary>
        /// Include trust data sent by trust providers into the logs.
        /// </summary>
        public readonly bool? IncludeTrustContext;
        /// <summary>
        /// A block that specifies configures sending Verified Access logs to Kinesis. Detailed below.
        /// </summary>
        public readonly Outputs.InstanceLoggingConfigurationAccessLogsKinesisDataFirehose? KinesisDataFirehose;
        /// <summary>
        /// The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
        /// </summary>
        public readonly string? LogVersion;
        /// <summary>
        /// A block that specifies configures sending Verified Access logs to S3. Detailed below.
        /// </summary>
        public readonly Outputs.InstanceLoggingConfigurationAccessLogsS3? S3;

        [OutputConstructor]
        private InstanceLoggingConfigurationAccessLogs(
            Outputs.InstanceLoggingConfigurationAccessLogsCloudwatchLogs? cloudwatchLogs,

            bool? includeTrustContext,

            Outputs.InstanceLoggingConfigurationAccessLogsKinesisDataFirehose? kinesisDataFirehose,

            string? logVersion,

            Outputs.InstanceLoggingConfigurationAccessLogsS3? s3)
        {
            CloudwatchLogs = cloudwatchLogs;
            IncludeTrustContext = includeTrustContext;
            KinesisDataFirehose = kinesisDataFirehose;
            LogVersion = logVersion;
            S3 = s3;
        }
    }
}
