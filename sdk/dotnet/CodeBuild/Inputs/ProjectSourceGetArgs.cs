// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeBuild.Inputs
{

    public sealed class ProjectSourceGetArgs : Pulumi.ResourceArgs
    {
        [Input("auths")]
        private InputList<Inputs.ProjectSourceAuthGetArgs>? _auths;

        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public InputList<Inputs.ProjectSourceAuthGetArgs> Auths
        {
            get => _auths ?? (_auths = new InputList<Inputs.ProjectSourceAuthGetArgs>());
            set => _auths = value;
        }

        /// <summary>
        /// The build spec declaration to use for this build project's related builds. This must be set when `type` is `NO_SOURCE`.
        /// </summary>
        [Input("buildspec")]
        public Input<string>? Buildspec { get; set; }

        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        [Input("gitCloneDepth")]
        public Input<int>? GitCloneDepth { get; set; }

        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        [Input("gitSubmodulesConfig")]
        public Input<Inputs.ProjectSourceGitSubmodulesConfigGetArgs>? GitSubmodulesConfig { get; set; }

        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        [Input("insecureSsl")]
        public Input<bool>? InsecureSsl { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when the `type` is `BITBUCKET` or `GITHUB`.
        /// </summary>
        [Input("reportBuildStatus")]
        public Input<bool>? ReportBuildStatus { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET`, `S3` or `NO_SOURCE`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSourceGetArgs()
        {
        }
    }
}
