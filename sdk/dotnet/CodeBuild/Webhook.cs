// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeBuild
{
    /// <summary>
    /// Manages a CodeBuild webhook, which is an endpoint accepted by the CodeBuild service to trigger builds from source code repositories. Depending on the source type of the CodeBuild project, the CodeBuild service may also automatically create and delete the actual repository webhook as well.
    /// 
    /// ## Example Usage
    /// 
    /// ### Bitbucket and GitHub
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.CodeBuild.Webhook("example", new Aws.CodeBuild.WebhookArgs
    ///         {
    ///             FilterGroups = 
    ///             {
    ///                 new Aws.CodeBuild.Inputs.WebhookFilterGroupArgs
    ///                 {
    ///                     Filter = 
    ///                     {
    ///                         
    ///                         {
    ///                             { "pattern", "PUSH" },
    ///                             { "type", "EVENT" },
    ///                         },
    ///                         
    ///                         {
    ///                             { "pattern", "master" },
    ///                             { "type", "HEAD_REF" },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ProjectName = aws_codebuild_project.Example.Name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### GitHub Enterprise
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Github = Pulumi.Github;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleWebhook = new Aws.CodeBuild.Webhook("exampleWebhook", new Aws.CodeBuild.WebhookArgs
    ///         {
    ///             ProjectName = aws_codebuild_project.Example.Name,
    ///         });
    ///         var exampleRepositoryWebhook = new Github.RepositoryWebhook("exampleRepositoryWebhook", new Github.RepositoryWebhookArgs
    ///         {
    ///             Active = true,
    ///             Configuration = new Github.Inputs.RepositoryWebhookConfigurationArgs
    ///             {
    ///                 ContentType = "json",
    ///                 InsecureSsl = false,
    ///                 Secret = exampleWebhook.Secret,
    ///                 Url = exampleWebhook.PayloadUrl,
    ///             },
    ///             Events = 
    ///             {
    ///                 "push",
    ///             },
    ///             Repository = github_repository.Example.Name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Webhook : Pulumi.CustomResource
    {
        /// <summary>
        /// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`.
        /// </summary>
        [Output("branchFilter")]
        public Output<string?> BranchFilter { get; private set; } = null!;

        /// <summary>
        /// Information about the webhook's trigger. Filter group blocks are documented below.
        /// </summary>
        [Output("filterGroups")]
        public Output<ImmutableArray<Outputs.WebhookFilterGroup>> FilterGroups { get; private set; } = null!;

        /// <summary>
        /// The CodeBuild endpoint where webhook events are sent.
        /// </summary>
        [Output("payloadUrl")]
        public Output<string> PayloadUrl { get; private set; } = null!;

        /// <summary>
        /// The name of the build project.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
        /// </summary>
        [Output("secret")]
        public Output<string> Secret { get; private set; } = null!;

        /// <summary>
        /// The URL to the webhook.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Webhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Webhook(string name, WebhookArgs args, CustomResourceOptions? options = null)
            : base("aws:codebuild/webhook:Webhook", name, args ?? new WebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Webhook(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
            : base("aws:codebuild/webhook:Webhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Webhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Webhook Get(string name, Input<string> id, WebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new Webhook(name, id, state, options);
        }
    }

    public sealed class WebhookArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`.
        /// </summary>
        [Input("branchFilter")]
        public Input<string>? BranchFilter { get; set; }

        [Input("filterGroups")]
        private InputList<Inputs.WebhookFilterGroupArgs>? _filterGroups;

        /// <summary>
        /// Information about the webhook's trigger. Filter group blocks are documented below.
        /// </summary>
        public InputList<Inputs.WebhookFilterGroupArgs> FilterGroups
        {
            get => _filterGroups ?? (_filterGroups = new InputList<Inputs.WebhookFilterGroupArgs>());
            set => _filterGroups = value;
        }

        /// <summary>
        /// The name of the build project.
        /// </summary>
        [Input("projectName", required: true)]
        public Input<string> ProjectName { get; set; } = null!;

        public WebhookArgs()
        {
        }
    }

    public sealed class WebhookState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A regular expression used to determine which branches get built. Default is all branches are built. It is recommended to use `filter_group` over `branch_filter`.
        /// </summary>
        [Input("branchFilter")]
        public Input<string>? BranchFilter { get; set; }

        [Input("filterGroups")]
        private InputList<Inputs.WebhookFilterGroupGetArgs>? _filterGroups;

        /// <summary>
        /// Information about the webhook's trigger. Filter group blocks are documented below.
        /// </summary>
        public InputList<Inputs.WebhookFilterGroupGetArgs> FilterGroups
        {
            get => _filterGroups ?? (_filterGroups = new InputList<Inputs.WebhookFilterGroupGetArgs>());
            set => _filterGroups = value;
        }

        /// <summary>
        /// The CodeBuild endpoint where webhook events are sent.
        /// </summary>
        [Input("payloadUrl")]
        public Input<string>? PayloadUrl { get; set; }

        /// <summary>
        /// The name of the build project.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The secret token of the associated repository. Not returned by the CodeBuild API for all source types.
        /// </summary>
        [Input("secret")]
        public Input<string>? Secret { get; set; }

        /// <summary>
        /// The URL to the webhook.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public WebhookState()
        {
        }
    }
}
