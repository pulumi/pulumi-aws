// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws
{
    public static class GetIpRanges
    {
        /// <summary>
        /// Use this data source to get the IP ranges of various AWS products and services. For more information about the contents of this data source and required JSON syntax if referencing a custom URL, see the [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const europeanEc2 = aws.getIpRanges({
        ///     regions: [
        ///         "eu-west-1",
        ///         "eu-central-1",
        ///     ],
        ///     services: ["ec2"],
        /// });
        /// const fromEurope = new aws.ec2.SecurityGroup("fromEurope", {
        ///     ingress: [{
        ///         fromPort: 443,
        ///         toPort: 443,
        ///         protocol: "tcp",
        ///         cidrBlocks: europeanEc2.then(europeanEc2 =&gt; europeanEc2.cidrBlocks),
        ///         ipv6CidrBlocks: europeanEc2.then(europeanEc2 =&gt; europeanEc2.ipv6CidrBlocks),
        ///     }],
        ///     tags: {
        ///         CreateDate: europeanEc2.then(europeanEc2 =&gt; europeanEc2.createDate),
        ///         SyncToken: europeanEc2.then(europeanEc2 =&gt; europeanEc2.syncToken),
        ///     },
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// european_ec2 = aws.get_ip_ranges(regions=[
        ///         "eu-west-1",
        ///         "eu-central-1",
        ///     ],
        ///     services=["ec2"])
        /// from_europe = aws.ec2.SecurityGroup("fromEurope",
        ///     ingress=[aws.ec2.SecurityGroupIngressArgs(
        ///         from_port=443,
        ///         to_port=443,
        ///         protocol="tcp",
        ///         cidr_blocks=european_ec2.cidr_blocks,
        ///         ipv6_cidr_blocks=european_ec2.ipv6_cidr_blocks,
        ///     )],
        ///     tags={
        ///         "CreateDate": european_ec2.create_date,
        ///         "SyncToken": european_ec2.sync_token,
        ///     })
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var europeanEc2 = Aws.GetIpRanges.Invoke(new()
        ///     {
        ///         Regions = new[]
        ///         {
        ///             "eu-west-1",
        ///             "eu-central-1",
        ///         },
        ///         Services = new[]
        ///         {
        ///             "ec2",
        ///         },
        ///     });
        /// 
        ///     var fromEurope = new Aws.Ec2.SecurityGroup("fromEurope", new()
        ///     {
        ///         Ingress = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.SecurityGroupIngressArgs
        ///             {
        ///                 FromPort = 443,
        ///                 ToPort = 443,
        ///                 Protocol = "tcp",
        ///                 CidrBlocks = europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.CidrBlocks),
        ///                 Ipv6CidrBlocks = europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.Ipv6CidrBlocks),
        ///             },
        ///         },
        ///         Tags = 
        ///         {
        ///             { "CreateDate", europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.CreateDate) },
        ///             { "SyncToken", europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.SyncToken) },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		europeanEc2, err := aws.GetIpRanges(ctx, &amp;aws.GetIpRangesArgs{
        /// 			Regions: []string{
        /// 				"eu-west-1",
        /// 				"eu-central-1",
        /// 			},
        /// 			Services: []string{
        /// 				"ec2",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewSecurityGroup(ctx, "fromEurope", &amp;ec2.SecurityGroupArgs{
        /// 			Ingress: ec2.SecurityGroupIngressArray{
        /// 				&amp;ec2.SecurityGroupIngressArgs{
        /// 					FromPort:       pulumi.Int(443),
        /// 					ToPort:         pulumi.Int(443),
        /// 					Protocol:       pulumi.String("tcp"),
        /// 					CidrBlocks:     interface{}(europeanEc2.CidrBlocks),
        /// 					Ipv6CidrBlocks: interface{}(europeanEc2.Ipv6CidrBlocks),
        /// 				},
        /// 			},
        /// 			Tags: pulumi.StringMap{
        /// 				"CreateDate": *pulumi.String(europeanEc2.CreateDate),
        /// 				"SyncToken":  *pulumi.Int(europeanEc2.SyncToken),
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.AwsFunctions;
        /// import com.pulumi.aws.inputs.GetIpRangesArgs;
        /// import com.pulumi.aws.ec2.SecurityGroup;
        /// import com.pulumi.aws.ec2.SecurityGroupArgs;
        /// import com.pulumi.aws.ec2.inputs.SecurityGroupIngressArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var europeanEc2 = AwsFunctions.getIpRanges(GetIpRangesArgs.builder()
        ///             .regions(            
        ///                 "eu-west-1",
        ///                 "eu-central-1")
        ///             .services("ec2")
        ///             .build());
        /// 
        ///         var fromEurope = new SecurityGroup("fromEurope", SecurityGroupArgs.builder()        
        ///             .ingress(SecurityGroupIngressArgs.builder()
        ///                 .fromPort("443")
        ///                 .toPort("443")
        ///                 .protocol("tcp")
        ///                 .cidrBlocks(europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.cidrBlocks()))
        ///                 .ipv6CidrBlocks(europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.ipv6CidrBlocks()))
        ///                 .build())
        ///             .tags(Map.ofEntries(
        ///                 Map.entry("CreateDate", europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.createDate())),
        ///                 Map.entry("SyncToken", europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.syncToken()))
        ///             ))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   fromEurope:
        ///     type: aws:ec2:SecurityGroup
        ///     properties:
        ///       ingress:
        ///         - fromPort: '443'
        ///           toPort: '443'
        ///           protocol: tcp
        ///           cidrBlocks: ${europeanEc2.cidrBlocks}
        ///           ipv6CidrBlocks: ${europeanEc2.ipv6CidrBlocks}
        ///       tags:
        ///         CreateDate: ${europeanEc2.createDate}
        ///         SyncToken: ${europeanEc2.syncToken}
        /// variables:
        ///   europeanEc2:
        ///     fn::invoke:
        ///       Function: aws:getIpRanges
        ///       Arguments:
        ///         regions:
        ///           - eu-west-1
        ///           - eu-central-1
        ///         services:
        ///           - ec2
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpRangesResult> InvokeAsync(GetIpRangesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpRangesResult>("aws:index/getIpRanges:getIpRanges", args ?? new GetIpRangesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the IP ranges of various AWS products and services. For more information about the contents of this data source and required JSON syntax if referencing a custom URL, see the [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const europeanEc2 = aws.getIpRanges({
        ///     regions: [
        ///         "eu-west-1",
        ///         "eu-central-1",
        ///     ],
        ///     services: ["ec2"],
        /// });
        /// const fromEurope = new aws.ec2.SecurityGroup("fromEurope", {
        ///     ingress: [{
        ///         fromPort: 443,
        ///         toPort: 443,
        ///         protocol: "tcp",
        ///         cidrBlocks: europeanEc2.then(europeanEc2 =&gt; europeanEc2.cidrBlocks),
        ///         ipv6CidrBlocks: europeanEc2.then(europeanEc2 =&gt; europeanEc2.ipv6CidrBlocks),
        ///     }],
        ///     tags: {
        ///         CreateDate: europeanEc2.then(europeanEc2 =&gt; europeanEc2.createDate),
        ///         SyncToken: europeanEc2.then(europeanEc2 =&gt; europeanEc2.syncToken),
        ///     },
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// european_ec2 = aws.get_ip_ranges(regions=[
        ///         "eu-west-1",
        ///         "eu-central-1",
        ///     ],
        ///     services=["ec2"])
        /// from_europe = aws.ec2.SecurityGroup("fromEurope",
        ///     ingress=[aws.ec2.SecurityGroupIngressArgs(
        ///         from_port=443,
        ///         to_port=443,
        ///         protocol="tcp",
        ///         cidr_blocks=european_ec2.cidr_blocks,
        ///         ipv6_cidr_blocks=european_ec2.ipv6_cidr_blocks,
        ///     )],
        ///     tags={
        ///         "CreateDate": european_ec2.create_date,
        ///         "SyncToken": european_ec2.sync_token,
        ///     })
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var europeanEc2 = Aws.GetIpRanges.Invoke(new()
        ///     {
        ///         Regions = new[]
        ///         {
        ///             "eu-west-1",
        ///             "eu-central-1",
        ///         },
        ///         Services = new[]
        ///         {
        ///             "ec2",
        ///         },
        ///     });
        /// 
        ///     var fromEurope = new Aws.Ec2.SecurityGroup("fromEurope", new()
        ///     {
        ///         Ingress = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.SecurityGroupIngressArgs
        ///             {
        ///                 FromPort = 443,
        ///                 ToPort = 443,
        ///                 Protocol = "tcp",
        ///                 CidrBlocks = europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.CidrBlocks),
        ///                 Ipv6CidrBlocks = europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.Ipv6CidrBlocks),
        ///             },
        ///         },
        ///         Tags = 
        ///         {
        ///             { "CreateDate", europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.CreateDate) },
        ///             { "SyncToken", europeanEc2.Apply(getIpRangesResult =&gt; getIpRangesResult.SyncToken) },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		europeanEc2, err := aws.GetIpRanges(ctx, &amp;aws.GetIpRangesArgs{
        /// 			Regions: []string{
        /// 				"eu-west-1",
        /// 				"eu-central-1",
        /// 			},
        /// 			Services: []string{
        /// 				"ec2",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewSecurityGroup(ctx, "fromEurope", &amp;ec2.SecurityGroupArgs{
        /// 			Ingress: ec2.SecurityGroupIngressArray{
        /// 				&amp;ec2.SecurityGroupIngressArgs{
        /// 					FromPort:       pulumi.Int(443),
        /// 					ToPort:         pulumi.Int(443),
        /// 					Protocol:       pulumi.String("tcp"),
        /// 					CidrBlocks:     interface{}(europeanEc2.CidrBlocks),
        /// 					Ipv6CidrBlocks: interface{}(europeanEc2.Ipv6CidrBlocks),
        /// 				},
        /// 			},
        /// 			Tags: pulumi.StringMap{
        /// 				"CreateDate": *pulumi.String(europeanEc2.CreateDate),
        /// 				"SyncToken":  *pulumi.Int(europeanEc2.SyncToken),
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.AwsFunctions;
        /// import com.pulumi.aws.inputs.GetIpRangesArgs;
        /// import com.pulumi.aws.ec2.SecurityGroup;
        /// import com.pulumi.aws.ec2.SecurityGroupArgs;
        /// import com.pulumi.aws.ec2.inputs.SecurityGroupIngressArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var europeanEc2 = AwsFunctions.getIpRanges(GetIpRangesArgs.builder()
        ///             .regions(            
        ///                 "eu-west-1",
        ///                 "eu-central-1")
        ///             .services("ec2")
        ///             .build());
        /// 
        ///         var fromEurope = new SecurityGroup("fromEurope", SecurityGroupArgs.builder()        
        ///             .ingress(SecurityGroupIngressArgs.builder()
        ///                 .fromPort("443")
        ///                 .toPort("443")
        ///                 .protocol("tcp")
        ///                 .cidrBlocks(europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.cidrBlocks()))
        ///                 .ipv6CidrBlocks(europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.ipv6CidrBlocks()))
        ///                 .build())
        ///             .tags(Map.ofEntries(
        ///                 Map.entry("CreateDate", europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.createDate())),
        ///                 Map.entry("SyncToken", europeanEc2.applyValue(getIpRangesResult -&gt; getIpRangesResult.syncToken()))
        ///             ))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   fromEurope:
        ///     type: aws:ec2:SecurityGroup
        ///     properties:
        ///       ingress:
        ///         - fromPort: '443'
        ///           toPort: '443'
        ///           protocol: tcp
        ///           cidrBlocks: ${europeanEc2.cidrBlocks}
        ///           ipv6CidrBlocks: ${europeanEc2.ipv6CidrBlocks}
        ///       tags:
        ///         CreateDate: ${europeanEc2.createDate}
        ///         SyncToken: ${europeanEc2.syncToken}
        /// variables:
        ///   europeanEc2:
        ///     fn::invoke:
        ///       Function: aws:getIpRanges
        ///       Arguments:
        ///         regions:
        ///           - eu-west-1
        ///           - eu-central-1
        ///         services:
        ///           - ec2
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpRangesResult> Invoke(GetIpRangesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpRangesResult>("aws:index/getIpRanges:getIpRanges", args ?? new GetIpRangesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpRangesArgs : global::Pulumi.InvokeArgs
    {
        [Input("regions")]
        private List<string>? _regions;

        /// <summary>
        /// Filter IP ranges by regions (or include all regions, if
        /// omitted). Valid items are `global` (for `cloudfront`) as well as all AWS regions
        /// (e.g., `eu-central-1`)
        /// </summary>
        public List<string> Regions
        {
            get => _regions ?? (_regions = new List<string>());
            set => _regions = value;
        }

        [Input("services", required: true)]
        private List<string>? _services;

        /// <summary>
        /// Filter IP ranges by services. Valid items are `amazon`
        /// (for amazon.com), `amazon_connect`, `api_gateway`, `cloud9`, `cloudfront`,
        /// `codebuild`, `dynamodb`, `ec2`, `ec2_instance_connect`, `globalaccelerator`,
        /// `route53`, `route53_healthchecks`, `s3` and `workspaces_gateways`. See the
        /// [`service` attribute][2] documentation for other possible values.
        /// 
        /// &gt; **NOTE:** If the specified combination of regions and services does not yield any
        /// CIDR blocks, this call will fail.
        /// </summary>
        public List<string> Services
        {
            get => _services ?? (_services = new List<string>());
            set => _services = value;
        }

        /// <summary>
        /// Custom URL for source JSON file. Syntax must match [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html). Defaults to `https://ip-ranges.amazonaws.com/ip-ranges.json`.
        /// </summary>
        [Input("url")]
        public string? Url { get; set; }

        public GetIpRangesArgs()
        {
        }
        public static new GetIpRangesArgs Empty => new GetIpRangesArgs();
    }

    public sealed class GetIpRangesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// Filter IP ranges by regions (or include all regions, if
        /// omitted). Valid items are `global` (for `cloudfront`) as well as all AWS regions
        /// (e.g., `eu-central-1`)
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        [Input("services", required: true)]
        private InputList<string>? _services;

        /// <summary>
        /// Filter IP ranges by services. Valid items are `amazon`
        /// (for amazon.com), `amazon_connect`, `api_gateway`, `cloud9`, `cloudfront`,
        /// `codebuild`, `dynamodb`, `ec2`, `ec2_instance_connect`, `globalaccelerator`,
        /// `route53`, `route53_healthchecks`, `s3` and `workspaces_gateways`. See the
        /// [`service` attribute][2] documentation for other possible values.
        /// 
        /// &gt; **NOTE:** If the specified combination of regions and services does not yield any
        /// CIDR blocks, this call will fail.
        /// </summary>
        public InputList<string> Services
        {
            get => _services ?? (_services = new InputList<string>());
            set => _services = value;
        }

        /// <summary>
        /// Custom URL for source JSON file. Syntax must match [AWS IP Address Ranges documentation](https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html). Defaults to `https://ip-ranges.amazonaws.com/ip-ranges.json`.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public GetIpRangesInvokeArgs()
        {
        }
        public static new GetIpRangesInvokeArgs Empty => new GetIpRangesInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpRangesResult
    {
        /// <summary>
        /// Lexically ordered list of CIDR blocks.
        /// </summary>
        public readonly ImmutableArray<string> CidrBlocks;
        /// <summary>
        /// Publication time of the IP ranges (e.g., `2016-08-03-23-46-05`).
        /// </summary>
        public readonly string CreateDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Lexically ordered list of IPv6 CIDR blocks.
        /// </summary>
        public readonly ImmutableArray<string> Ipv6CidrBlocks;
        public readonly ImmutableArray<string> Regions;
        public readonly ImmutableArray<string> Services;
        /// <summary>
        /// Publication time of the IP ranges, in Unix epoch time format
        /// (e.g., `1470267965`).
        /// </summary>
        public readonly int SyncToken;
        public readonly string? Url;

        [OutputConstructor]
        private GetIpRangesResult(
            ImmutableArray<string> cidrBlocks,

            string createDate,

            string id,

            ImmutableArray<string> ipv6CidrBlocks,

            ImmutableArray<string> regions,

            ImmutableArray<string> services,

            int syncToken,

            string? url)
        {
            CidrBlocks = cidrBlocks;
            CreateDate = createDate;
            Id = id;
            Ipv6CidrBlocks = ipv6CidrBlocks;
            Regions = regions;
            Services = services;
            SyncToken = syncToken;
            Url = url;
        }
    }
}
