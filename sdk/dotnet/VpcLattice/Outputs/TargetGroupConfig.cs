// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VpcLattice.Outputs
{

    [OutputType]
    public sealed class TargetGroupConfig
    {
        /// <summary>
        /// The health check configuration.
        /// </summary>
        public readonly Outputs.TargetGroupConfigHealthCheck? HealthCheck;
        /// <summary>
        /// The type of IP address used for the target group. Valid values: `IPV4` | `IPV6`.
        /// </summary>
        public readonly string? IpAddressType;
        /// <summary>
        /// The version of the event structure that the Lambda function receives. Supported only if `type` is `LAMBDA`. Valid Values are `V1` | `V2`.
        /// </summary>
        public readonly string? LambdaEventStructureVersion;
        /// <summary>
        /// The port on which the targets are listening.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The protocol to use for routing traffic to the targets. Valid Values are `HTTP` | `HTTPS`.
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// The protocol version. Valid Values are `HTTP1` | `HTTP2` | `GRPC`. Default value is `HTTP1`.
        /// </summary>
        public readonly string? ProtocolVersion;
        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        public readonly string? VpcIdentifier;

        [OutputConstructor]
        private TargetGroupConfig(
            Outputs.TargetGroupConfigHealthCheck? healthCheck,

            string? ipAddressType,

            string? lambdaEventStructureVersion,

            int? port,

            string? protocol,

            string? protocolVersion,

            string? vpcIdentifier)
        {
            HealthCheck = healthCheck;
            IpAddressType = ipAddressType;
            LambdaEventStructureVersion = lambdaEventStructureVersion;
            Port = port;
            Protocol = protocol;
            ProtocolVersion = protocolVersion;
            VpcIdentifier = vpcIdentifier;
        }
    }
}
