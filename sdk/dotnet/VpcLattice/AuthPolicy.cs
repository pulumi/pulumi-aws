// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VpcLattice
{
    /// <summary>
    /// Resource for managing an AWS VPC Lattice Auth Policy.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleService = new Aws.VpcLattice.Service("exampleService", new()
    ///     {
    ///         AuthType = "AWS_IAM",
    ///         CustomDomainName = "example.com",
    ///     });
    /// 
    ///     var exampleAuthPolicy = new Aws.VpcLattice.AuthPolicy("exampleAuthPolicy", new()
    ///     {
    ///         ResourceIdentifier = exampleService.Arn,
    ///         Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "*",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = "*",
    ///                     ["Resource"] = "*",
    ///                     ["Condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["StringNotEqualsIgnoreCase"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["aws:PrincipalType"] = "anonymous",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_vpclattice_auth_policy.example
    /// 
    ///  id = "rft-8012925589" } Using `pulumi import`, import VPC Lattice Auth Policy using the `example_id_arg`. For exampleconsole % pulumi import aws_vpclattice_auth_policy.example rft-8012925589
    /// </summary>
    [AwsResourceType("aws:vpclattice/authPolicy:AuthPolicy")]
    public partial class AuthPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The auth policy. The policy string in JSON must not contain newlines or blank lines.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
        /// </summary>
        [Output("resourceIdentifier")]
        public Output<string> ResourceIdentifier { get; private set; } = null!;

        /// <summary>
        /// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;


        /// <summary>
        /// Create a AuthPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthPolicy(string name, AuthPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:vpclattice/authPolicy:AuthPolicy", name, args ?? new AuthPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthPolicy(string name, Input<string> id, AuthPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:vpclattice/authPolicy:AuthPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthPolicy Get(string name, Input<string> id, AuthPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthPolicy(name, id, state, options);
        }
    }

    public sealed class AuthPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auth policy. The policy string in JSON must not contain newlines or blank lines.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        /// <summary>
        /// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
        /// </summary>
        [Input("resourceIdentifier", required: true)]
        public Input<string> ResourceIdentifier { get; set; } = null!;

        /// <summary>
        /// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public AuthPolicyArgs()
        {
        }
        public static new AuthPolicyArgs Empty => new AuthPolicyArgs();
    }

    public sealed class AuthPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auth policy. The policy string in JSON must not contain newlines or blank lines.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// The ID or Amazon Resource Name (ARN) of the service network or service for which the policy is created.
        /// </summary>
        [Input("resourceIdentifier")]
        public Input<string>? ResourceIdentifier { get; set; }

        /// <summary>
        /// The state of the auth policy. The auth policy is only active when the auth type is set to AWS_IAM. If you provide a policy, then authentication and authorization decisions are made based on this policy and the client's IAM policy. If the Auth type is NONE, then, any auth policy you provide will remain inactive.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public AuthPolicyState()
        {
        }
        public static new AuthPolicyState Empty => new AuthPolicyState();
    }
}
