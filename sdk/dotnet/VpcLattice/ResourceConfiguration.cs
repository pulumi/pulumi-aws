// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VpcLattice
{
    /// <summary>
    /// Resource for managing an AWS VPC Lattice Resource Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.VpcLattice.ResourceConfiguration("example", new()
    ///     {
    ///         Name = "Example",
    ///         ResourceGatewayIdentifier = exampleAwsVpclatticeResourceGateway.Id,
    ///         PortRanges = new[]
    ///         {
    ///             "80",
    ///         },
    ///         ResourceConfigurationDefinition = new Aws.VpcLattice.Inputs.ResourceConfigurationResourceConfigurationDefinitionArgs
    ///         {
    ///             DnsResource = new Aws.VpcLattice.Inputs.ResourceConfigurationResourceConfigurationDefinitionDnsResourceArgs
    ///             {
    ///                 DomainName = "example.com",
    ///                 IpAddressType = "IPV4",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "Example" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### IP Address Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.VpcLattice.ResourceConfiguration("example", new()
    ///     {
    ///         Name = "Example",
    ///         ResourceGatewayIdentifier = exampleAwsVpclatticeResourceGateway.Id,
    ///         PortRanges = new[]
    ///         {
    ///             "80",
    ///         },
    ///         Protocol = "TCP",
    ///         ResourceConfigurationDefinition = new Aws.VpcLattice.Inputs.ResourceConfigurationResourceConfigurationDefinitionArgs
    ///         {
    ///             IpResource = new Aws.VpcLattice.Inputs.ResourceConfigurationResourceConfigurationDefinitionIpResourceArgs
    ///             {
    ///                 IpAddress = "10.0.0.1",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "Example" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### ARN Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.VpcLattice.ResourceConfiguration("test", new()
    ///     {
    ///         Name = "Example",
    ///         ResourceGatewayIdentifier = testAwsVpclatticeResourceGateway.Id,
    ///         Type = "ARN",
    ///         ResourceConfigurationDefinition = new Aws.VpcLattice.Inputs.ResourceConfigurationResourceConfigurationDefinitionArgs
    ///         {
    ///             ArnResource = new Aws.VpcLattice.Inputs.ResourceConfigurationResourceConfigurationDefinitionArnResourceArgs
    ///             {
    ///                 Arn = example.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import VPC Lattice Resource Configuration using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:vpclattice/resourceConfiguration:ResourceConfiguration example rcfg-1234567890abcdef1
    /// ```
    /// </summary>
    [AwsResourceType("aws:vpclattice/resourceConfiguration:ResourceConfiguration")]
    public partial class ResourceConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow or Deny the association of this resource to a shareable service network.
        /// </summary>
        [Output("allowAssociationToShareableServiceNetwork")]
        public Output<bool> AllowAssociationToShareableServiceNetwork { get; private set; } = null!;

        /// <summary>
        /// ARN of the resource gateway.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Name for the Resource Configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Port ranges to access the Resource either single port `80` or range `80-81` range.
        /// </summary>
        [Output("portRanges")]
        public Output<ImmutableArray<string>> PortRanges { get; private set; } = null!;

        /// <summary>
        /// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("resourceConfigurationDefinition")]
        public Output<Outputs.ResourceConfigurationResourceConfigurationDefinition?> ResourceConfigurationDefinition { get; private set; } = null!;

        /// <summary>
        /// ID of Resource Configuration where `type` is `CHILD`.
        /// </summary>
        [Output("resourceConfigurationGroupId")]
        public Output<string?> ResourceConfigurationGroupId { get; private set; } = null!;

        /// <summary>
        /// ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
        /// </summary>
        [Output("resourceGatewayIdentifier")]
        public Output<string> ResourceGatewayIdentifier { get; private set; } = null!;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ResourceConfigurationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceConfiguration(string name, ResourceConfigurationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:vpclattice/resourceConfiguration:ResourceConfiguration", name, args ?? new ResourceConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceConfiguration(string name, Input<string> id, ResourceConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:vpclattice/resourceConfiguration:ResourceConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceConfiguration Get(string name, Input<string> id, ResourceConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceConfiguration(name, id, state, options);
        }
    }

    public sealed class ResourceConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or Deny the association of this resource to a shareable service network.
        /// </summary>
        [Input("allowAssociationToShareableServiceNetwork")]
        public Input<bool>? AllowAssociationToShareableServiceNetwork { get; set; }

        /// <summary>
        /// Name for the Resource Configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portRanges")]
        private InputList<string>? _portRanges;

        /// <summary>
        /// Port ranges to access the Resource either single port `80` or range `80-81` range.
        /// </summary>
        public InputList<string> PortRanges
        {
            get => _portRanges ?? (_portRanges = new InputList<string>());
            set => _portRanges = value;
        }

        /// <summary>
        /// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("resourceConfigurationDefinition")]
        public Input<Inputs.ResourceConfigurationResourceConfigurationDefinitionArgs>? ResourceConfigurationDefinition { get; set; }

        /// <summary>
        /// ID of Resource Configuration where `type` is `CHILD`.
        /// </summary>
        [Input("resourceConfigurationGroupId")]
        public Input<string>? ResourceConfigurationGroupId { get; set; }

        /// <summary>
        /// ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
        /// </summary>
        [Input("resourceGatewayIdentifier")]
        public Input<string>? ResourceGatewayIdentifier { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ResourceConfigurationTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ResourceConfigurationArgs()
        {
        }
        public static new ResourceConfigurationArgs Empty => new ResourceConfigurationArgs();
    }

    public sealed class ResourceConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow or Deny the association of this resource to a shareable service network.
        /// </summary>
        [Input("allowAssociationToShareableServiceNetwork")]
        public Input<bool>? AllowAssociationToShareableServiceNetwork { get; set; }

        /// <summary>
        /// ARN of the resource gateway.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Name for the Resource Configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portRanges")]
        private InputList<string>? _portRanges;

        /// <summary>
        /// Port ranges to access the Resource either single port `80` or range `80-81` range.
        /// </summary>
        public InputList<string> PortRanges
        {
            get => _portRanges ?? (_portRanges = new InputList<string>());
            set => _portRanges = value;
        }

        /// <summary>
        /// Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resource_configuration_group_id` is not.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Details of the Resource Configuration. See `resource_configuration_definition` Block for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("resourceConfigurationDefinition")]
        public Input<Inputs.ResourceConfigurationResourceConfigurationDefinitionGetArgs>? ResourceConfigurationDefinition { get; set; }

        /// <summary>
        /// ID of Resource Configuration where `type` is `CHILD`.
        /// </summary>
        [Input("resourceConfigurationGroupId")]
        public Input<string>? ResourceConfigurationGroupId { get; set; }

        /// <summary>
        /// ID of the Resource Gateway used to access the resource. MUST be specified if `resource_configuration_group_id` is not.
        /// </summary>
        [Input("resourceGatewayIdentifier")]
        public Input<string>? ResourceGatewayIdentifier { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ResourceConfigurationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ResourceConfigurationState()
        {
        }
        public static new ResourceConfigurationState Empty => new ResourceConfigurationState();
    }
}
