// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VpcLattice.Inputs
{

    public sealed class TargetGroupConfigHealthCheckGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether health checking is enabled. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The approximate amount of time, in seconds, between health checks of an individual target. The range is 5–300 seconds. The default is 30 seconds.
        /// </summary>
        [Input("healthCheckIntervalSeconds")]
        public Input<int>? HealthCheckIntervalSeconds { get; set; }

        /// <summary>
        /// The amount of time, in seconds, to wait before reporting a target as unhealthy. The range is 1–120 seconds. The default is 5 seconds.
        /// * `healthy_threshold_count ` - (Optional) The number of consecutive successful health checks required before considering an unhealthy target healthy. The range is 2–10. The default is 5.
        /// </summary>
        [Input("healthCheckTimeoutSeconds")]
        public Input<int>? HealthCheckTimeoutSeconds { get; set; }

        [Input("healthyThresholdCount")]
        public Input<int>? HealthyThresholdCount { get; set; }

        /// <summary>
        /// The codes to use when checking for a successful response from a target. These are called _Success codes_ in the console.
        /// </summary>
        [Input("matcher")]
        public Input<Inputs.TargetGroupConfigHealthCheckMatcherGetArgs>? Matcher { get; set; }

        /// <summary>
        /// The destination for health checks on the targets. If the protocol version is HTTP/1.1 or HTTP/2, specify a valid URI (for example, /path?query). The default path is `/`. Health checks are not supported if the protocol version is gRPC, however, you can choose HTTP/1.1 or HTTP/2 and specify a valid URI.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The port used when performing health checks on targets. The default setting is the port that a target receives traffic on.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol used when performing health checks on targets. The possible protocols are `HTTP` and `HTTPS`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The protocol version used when performing health checks on targets. The possible protocol versions are `HTTP1` and `HTTP2`. The default is `HTTP1`.
        /// </summary>
        [Input("protocolVersion")]
        public Input<string>? ProtocolVersion { get; set; }

        /// <summary>
        /// The number of consecutive failed health checks required before considering a target unhealthy. The range is 2–10. The default is 2.
        /// </summary>
        [Input("unhealthyThresholdCount")]
        public Input<int>? UnhealthyThresholdCount { get; set; }

        public TargetGroupConfigHealthCheckGetArgs()
        {
        }
        public static new TargetGroupConfigHealthCheckGetArgs Empty => new TargetGroupConfigHealthCheckGetArgs();
    }
}
