// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Account
{
    /// <summary>
    /// Manages the specified alternate contact attached to an AWS Account.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var operations = new Aws.Account.AlternativeContact("operations", new()
    ///     {
    ///         AlternateContactType = "OPERATIONS",
    ///         EmailAddress = "test@example.com",
    ///         PhoneNumber = "+1234567890",
    ///         Title = "Example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The Alternate Contact for the current account can be imported using the `alternate_contact_type`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:account/alternativeContact:AlternativeContact operations OPERATIONS
    /// ```
    /// 
    ///  If you provide an account ID, the Alternate Contact can be imported using the `account_id` and `alternate_contact_type` separated by a forward slash (`/`) e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:account/alternativeContact:AlternativeContact operations 1234567890/OPERATIONS
    /// ```
    /// </summary>
    [AwsResourceType("aws:account/alternativeContact:AlternativeContact")]
    public partial class AlternativeContact : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
        /// </summary>
        [Output("alternateContactType")]
        public Output<string> AlternateContactType { get; private set; } = null!;

        /// <summary>
        /// An email address for the alternate contact.
        /// </summary>
        [Output("emailAddress")]
        public Output<string> EmailAddress { get; private set; } = null!;

        /// <summary>
        /// Name of the alternate contact.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Phone number for the alternate contact.
        /// </summary>
        [Output("phoneNumber")]
        public Output<string> PhoneNumber { get; private set; } = null!;

        /// <summary>
        /// Title for the alternate contact.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a AlternativeContact resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlternativeContact(string name, AlternativeContactArgs args, CustomResourceOptions? options = null)
            : base("aws:account/alternativeContact:AlternativeContact", name, args ?? new AlternativeContactArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlternativeContact(string name, Input<string> id, AlternativeContactState? state = null, CustomResourceOptions? options = null)
            : base("aws:account/alternativeContact:AlternativeContact", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlternativeContact resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlternativeContact Get(string name, Input<string> id, AlternativeContactState? state = null, CustomResourceOptions? options = null)
        {
            return new AlternativeContact(name, id, state, options);
        }
    }

    public sealed class AlternativeContactArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
        /// </summary>
        [Input("alternateContactType", required: true)]
        public Input<string> AlternateContactType { get; set; } = null!;

        /// <summary>
        /// An email address for the alternate contact.
        /// </summary>
        [Input("emailAddress", required: true)]
        public Input<string> EmailAddress { get; set; } = null!;

        /// <summary>
        /// Name of the alternate contact.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Phone number for the alternate contact.
        /// </summary>
        [Input("phoneNumber", required: true)]
        public Input<string> PhoneNumber { get; set; } = null!;

        /// <summary>
        /// Title for the alternate contact.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public AlternativeContactArgs()
        {
        }
        public static new AlternativeContactArgs Empty => new AlternativeContactArgs();
    }

    public sealed class AlternativeContactState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the target account when managing member accounts. Will manage current user's account by default if omitted.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Type of the alternate contact. Allowed values are: `BILLING`, `OPERATIONS`, `SECURITY`.
        /// </summary>
        [Input("alternateContactType")]
        public Input<string>? AlternateContactType { get; set; }

        /// <summary>
        /// An email address for the alternate contact.
        /// </summary>
        [Input("emailAddress")]
        public Input<string>? EmailAddress { get; set; }

        /// <summary>
        /// Name of the alternate contact.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Phone number for the alternate contact.
        /// </summary>
        [Input("phoneNumber")]
        public Input<string>? PhoneNumber { get; set; }

        /// <summary>
        /// Title for the alternate contact.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public AlternativeContactState()
        {
        }
        public static new AlternativeContactState Empty => new AlternativeContactState();
    }
}
