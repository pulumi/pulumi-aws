// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Account
{
    /// <summary>
    /// Enable (Opt-In) or Disable (Opt-Out) a particular Region for an AWS account.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Account.Region("example", new()
    ///     {
    ///         RegionName = "ap-southeast-3",
    ///         Enabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:account/region:Region example ap-southeast-3
    /// ```
    /// </summary>
    [AwsResourceType("aws:account/region:Region")]
    public partial class Region : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// Whether the region is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The region opt status.
        /// </summary>
        [Output("optStatus")]
        public Output<string> OptStatus { get; private set; } = null!;

        /// <summary>
        /// The region name to manage.
        /// </summary>
        [Output("regionName")]
        public Output<string> RegionName { get; private set; } = null!;


        /// <summary>
        /// Create a Region resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Region(string name, RegionArgs args, CustomResourceOptions? options = null)
            : base("aws:account/region:Region", name, args ?? new RegionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Region(string name, Input<string> id, RegionState? state = null, CustomResourceOptions? options = null)
            : base("aws:account/region:Region", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Region resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Region Get(string name, Input<string> id, RegionState? state = null, CustomResourceOptions? options = null)
        {
            return new Region(name, id, state, options);
        }
    }

    public sealed class RegionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether the region is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The region name to manage.
        /// </summary>
        [Input("regionName", required: true)]
        public Input<string> RegionName { get; set; } = null!;

        public RegionArgs()
        {
        }
        public static new RegionArgs Empty => new RegionArgs();
    }

    public sealed class RegionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the target account when managing member accounts. Will manage current user's account by default if omitted. To use this parameter, the caller must be an identity in the organization's management account or a delegated administrator account. The specified account ID must also be a member account in the same organization. The organization must have all features enabled, and the organization must have trusted access enabled for the Account Management service, and optionally a delegated admin account assigned.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether the region is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The region opt status.
        /// </summary>
        [Input("optStatus")]
        public Input<string>? OptStatus { get; set; }

        /// <summary>
        /// The region name to manage.
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        public RegionState()
        {
        }
        public static new RegionState Empty => new RegionState();
    }
}
