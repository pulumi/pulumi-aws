// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws
{
    [Obsolete(@"aws.getAmi has been deprecated in favor of aws.ec2.getAmi")]
    public static class GetAmi
    {
        public static Task<GetAmiResult> InvokeAsync(GetAmiArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAmiResult>("aws:index/getAmi:getAmi", args ?? new GetAmiArgs(), options.WithDefaults());

        public static Output<GetAmiResult> Invoke(GetAmiInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAmiResult>("aws:index/getAmi:getAmi", args ?? new GetAmiInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAmiArgs : global::Pulumi.InvokeArgs
    {
        [Input("executableUsers")]
        private List<string>? _executableUsers;
        public List<string> ExecutableUsers
        {
            get => _executableUsers ?? (_executableUsers = new List<string>());
            set => _executableUsers = value;
        }

        [Input("filters")]
        private List<Inputs.GetAmiFilterArgs>? _filters;
        public List<Inputs.GetAmiFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAmiFilterArgs>());
            set => _filters = value;
        }

        [Input("includeDeprecated")]
        public bool? IncludeDeprecated { get; set; }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("owners")]
        private List<string>? _owners;
        public List<string> Owners
        {
            get => _owners ?? (_owners = new List<string>());
            set => _owners = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetAmiArgs()
        {
        }
        public static new GetAmiArgs Empty => new GetAmiArgs();
    }

    public sealed class GetAmiInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("executableUsers")]
        private InputList<string>? _executableUsers;
        public InputList<string> ExecutableUsers
        {
            get => _executableUsers ?? (_executableUsers = new InputList<string>());
            set => _executableUsers = value;
        }

        [Input("filters")]
        private InputList<Inputs.GetAmiFilterInputArgs>? _filters;
        public InputList<Inputs.GetAmiFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAmiFilterInputArgs>());
            set => _filters = value;
        }

        [Input("includeDeprecated")]
        public Input<bool>? IncludeDeprecated { get; set; }

        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("owners")]
        private InputList<string>? _owners;
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetAmiInvokeArgs()
        {
        }
        public static new GetAmiInvokeArgs Empty => new GetAmiInvokeArgs();
    }


    [OutputType]
    public sealed class GetAmiResult
    {
        public readonly string Architecture;
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetAmiBlockDeviceMappingResult> BlockDeviceMappings;
        public readonly string BootMode;
        public readonly string CreationDate;
        public readonly string DeprecationTime;
        public readonly string Description;
        public readonly bool EnaSupport;
        public readonly ImmutableArray<string> ExecutableUsers;
        public readonly ImmutableArray<Outputs.GetAmiFilterResult> Filters;
        public readonly string Hypervisor;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        public readonly string ImageLocation;
        public readonly string ImageOwnerAlias;
        public readonly string ImageType;
        public readonly string ImdsSupport;
        public readonly bool? IncludeDeprecated;
        public readonly string KernelId;
        public readonly bool? MostRecent;
        public readonly string Name;
        public readonly string? NameRegex;
        public readonly string OwnerId;
        public readonly ImmutableArray<string> Owners;
        public readonly string Platform;
        public readonly string PlatformDetails;
        public readonly ImmutableArray<Outputs.GetAmiProductCodeResult> ProductCodes;
        public readonly bool Public;
        public readonly string RamdiskId;
        public readonly string RootDeviceName;
        public readonly string RootDeviceType;
        public readonly string RootSnapshotId;
        public readonly string SriovNetSupport;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> StateReason;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string TpmSupport;
        public readonly string UsageOperation;
        public readonly string VirtualizationType;

        [OutputConstructor]
        private GetAmiResult(
            string architecture,

            string arn,

            ImmutableArray<Outputs.GetAmiBlockDeviceMappingResult> blockDeviceMappings,

            string bootMode,

            string creationDate,

            string deprecationTime,

            string description,

            bool enaSupport,

            ImmutableArray<string> executableUsers,

            ImmutableArray<Outputs.GetAmiFilterResult> filters,

            string hypervisor,

            string id,

            string imageId,

            string imageLocation,

            string imageOwnerAlias,

            string imageType,

            string imdsSupport,

            bool? includeDeprecated,

            string kernelId,

            bool? mostRecent,

            string name,

            string? nameRegex,

            string ownerId,

            ImmutableArray<string> owners,

            string platform,

            string platformDetails,

            ImmutableArray<Outputs.GetAmiProductCodeResult> productCodes,

            bool @public,

            string ramdiskId,

            string rootDeviceName,

            string rootDeviceType,

            string rootSnapshotId,

            string sriovNetSupport,

            string state,

            ImmutableDictionary<string, string> stateReason,

            ImmutableDictionary<string, string> tags,

            string tpmSupport,

            string usageOperation,

            string virtualizationType)
        {
            Architecture = architecture;
            Arn = arn;
            BlockDeviceMappings = blockDeviceMappings;
            BootMode = bootMode;
            CreationDate = creationDate;
            DeprecationTime = deprecationTime;
            Description = description;
            EnaSupport = enaSupport;
            ExecutableUsers = executableUsers;
            Filters = filters;
            Hypervisor = hypervisor;
            Id = id;
            ImageId = imageId;
            ImageLocation = imageLocation;
            ImageOwnerAlias = imageOwnerAlias;
            ImageType = imageType;
            ImdsSupport = imdsSupport;
            IncludeDeprecated = includeDeprecated;
            KernelId = kernelId;
            MostRecent = mostRecent;
            Name = name;
            NameRegex = nameRegex;
            OwnerId = ownerId;
            Owners = owners;
            Platform = platform;
            PlatformDetails = platformDetails;
            ProductCodes = productCodes;
            Public = @public;
            RamdiskId = ramdiskId;
            RootDeviceName = rootDeviceName;
            RootDeviceType = rootDeviceType;
            RootSnapshotId = rootSnapshotId;
            SriovNetSupport = sriovNetSupport;
            State = state;
            StateReason = stateReason;
            Tags = tags;
            TpmSupport = tpmSupport;
            UsageOperation = usageOperation;
            VirtualizationType = virtualizationType;
        }
    }
}
