// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3Control
{
    /// <summary>
    /// Provides a resource to manage an S3 Storage Lens configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var example = new Aws.S3Control.StorageLensConfiguration("example", new()
    ///     {
    ///         ConfigId = "example-1",
    ///         StorageLensConfigurationDetail = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationArgs
    ///         {
    ///             Enabled = true,
    ///             AccountLevel = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationAccountLevelArgs
    ///             {
    ///                 ActivityMetrics = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationAccountLevelActivityMetricsArgs
    ///                 {
    ///                     Enabled = true,
    ///                 },
    ///                 BucketLevel = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelArgs
    ///                 {
    ///                     ActivityMetrics = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationAccountLevelBucketLevelActivityMetricsArgs
    ///                     {
    ///                         Enabled = true,
    ///                     },
    ///                 },
    ///             },
    ///             DataExport = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationDataExportArgs
    ///             {
    ///                 CloudWatchMetrics = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationDataExportCloudWatchMetricsArgs
    ///                 {
    ///                     Enabled = true,
    ///                 },
    ///                 S3BucketDestination = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationArgs
    ///                 {
    ///                     AccountId = current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                     Arn = aws_s3_bucket.Target.Arn,
    ///                     Format = "CSV",
    ///                     OutputSchemaVersion = "V_1",
    ///                     Encryption = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationDataExportS3BucketDestinationEncryptionArgs
    ///                     {
    ///                         SseS3s = new[]
    ///                         {
    ///                             ,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Exclude = new Aws.S3Control.Inputs.StorageLensConfigurationStorageLensConfigurationExcludeArgs
    ///             {
    ///                 Buckets = new[]
    ///                 {
    ///                     aws_s3_bucket.B1.Arn,
    ///                     aws_s3_bucket.B2.Arn,
    ///                 },
    ///                 Regions = new[]
    ///                 {
    ///                     "us-east-2",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// S3 Storage Lens configurations can be imported using the `account_id` and `config_id`, separated by a colon (`:`), e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:s3control/storageLensConfiguration:StorageLensConfiguration example 123456789012:example-1
    /// ```
    /// </summary>
    [AwsResourceType("aws:s3control/storageLensConfiguration:StorageLensConfiguration")]
    public partial class StorageLensConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account ID of the owner of the S3 Storage Lens metrics export bucket.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the bucket.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The ID of the S3 Storage Lens configuration.
        /// </summary>
        [Output("configId")]
        public Output<string> ConfigId { get; private set; } = null!;

        /// <summary>
        /// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
        /// </summary>
        [Output("storageLensConfiguration")]
        public Output<Outputs.StorageLensConfigurationStorageLensConfiguration> StorageLensConfigurationDetail { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a StorageLensConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageLensConfiguration(string name, StorageLensConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:s3control/storageLensConfiguration:StorageLensConfiguration", name, args ?? new StorageLensConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageLensConfiguration(string name, Input<string> id, StorageLensConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:s3control/storageLensConfiguration:StorageLensConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageLensConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageLensConfiguration Get(string name, Input<string> id, StorageLensConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageLensConfiguration(name, id, state, options);
        }
    }

    public sealed class StorageLensConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account ID of the owner of the S3 Storage Lens metrics export bucket.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The ID of the S3 Storage Lens configuration.
        /// </summary>
        [Input("configId", required: true)]
        public Input<string> ConfigId { get; set; } = null!;

        /// <summary>
        /// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
        /// </summary>
        [Input("storageLensConfiguration", required: true)]
        public Input<Inputs.StorageLensConfigurationStorageLensConfigurationArgs> StorageLensConfigurationDetail { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public StorageLensConfigurationArgs()
        {
        }
        public static new StorageLensConfigurationArgs Empty => new StorageLensConfigurationArgs();
    }

    public sealed class StorageLensConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account ID of the owner of the S3 Storage Lens metrics export bucket.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the bucket.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The ID of the S3 Storage Lens configuration.
        /// </summary>
        [Input("configId")]
        public Input<string>? ConfigId { get; set; }

        /// <summary>
        /// The S3 Storage Lens configuration. See Storage Lens Configuration below for more details.
        /// </summary>
        [Input("storageLensConfiguration")]
        public Input<Inputs.StorageLensConfigurationStorageLensConfigurationGetArgs>? StorageLensConfigurationDetail { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public StorageLensConfigurationState()
        {
        }
        public static new StorageLensConfigurationState Empty => new StorageLensConfigurationState();
    }
}
