// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Inspector2.Inputs
{

    public sealed class FilterFilterCriteriaGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsAccountIds")]
        private InputList<Inputs.FilterFilterCriteriaAwsAccountIdGetArgs>? _awsAccountIds;

        /// <summary>
        /// (Optional) The AWS account ID in which the finding was generated. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaAwsAccountIdGetArgs> AwsAccountIds
        {
            get => _awsAccountIds ?? (_awsAccountIds = new InputList<Inputs.FilterFilterCriteriaAwsAccountIdGetArgs>());
            set => _awsAccountIds = value;
        }

        [Input("codeVulnerabilityDetectorNames")]
        private InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameGetArgs>? _codeVulnerabilityDetectorNames;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameGetArgs> CodeVulnerabilityDetectorNames
        {
            get => _codeVulnerabilityDetectorNames ?? (_codeVulnerabilityDetectorNames = new InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameGetArgs>());
            set => _codeVulnerabilityDetectorNames = value;
        }

        [Input("codeVulnerabilityDetectorTags")]
        private InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagGetArgs>? _codeVulnerabilityDetectorTags;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagGetArgs> CodeVulnerabilityDetectorTags
        {
            get => _codeVulnerabilityDetectorTags ?? (_codeVulnerabilityDetectorTags = new InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagGetArgs>());
            set => _codeVulnerabilityDetectorTags = value;
        }

        [Input("codeVulnerabilityFilePaths")]
        private InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityFilePathGetArgs>? _codeVulnerabilityFilePaths;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityFilePathGetArgs> CodeVulnerabilityFilePaths
        {
            get => _codeVulnerabilityFilePaths ?? (_codeVulnerabilityFilePaths = new InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityFilePathGetArgs>());
            set => _codeVulnerabilityFilePaths = value;
        }

        [Input("componentIds")]
        private InputList<Inputs.FilterFilterCriteriaComponentIdGetArgs>? _componentIds;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaComponentIdGetArgs> ComponentIds
        {
            get => _componentIds ?? (_componentIds = new InputList<Inputs.FilterFilterCriteriaComponentIdGetArgs>());
            set => _componentIds = value;
        }

        [Input("componentTypes")]
        private InputList<Inputs.FilterFilterCriteriaComponentTypeGetArgs>? _componentTypes;

        /// <summary>
        /// (Optional) The type of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaComponentTypeGetArgs> ComponentTypes
        {
            get => _componentTypes ?? (_componentTypes = new InputList<Inputs.FilterFilterCriteriaComponentTypeGetArgs>());
            set => _componentTypes = value;
        }

        [Input("ec2InstanceImageIds")]
        private InputList<Inputs.FilterFilterCriteriaEc2InstanceImageIdGetArgs>? _ec2InstanceImageIds;

        /// <summary>
        /// (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEc2InstanceImageIdGetArgs> Ec2InstanceImageIds
        {
            get => _ec2InstanceImageIds ?? (_ec2InstanceImageIds = new InputList<Inputs.FilterFilterCriteriaEc2InstanceImageIdGetArgs>());
            set => _ec2InstanceImageIds = value;
        }

        [Input("ec2InstanceSubnetIds")]
        private InputList<Inputs.FilterFilterCriteriaEc2InstanceSubnetIdGetArgs>? _ec2InstanceSubnetIds;

        /// <summary>
        /// (Optional) The ID of the subnet. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEc2InstanceSubnetIdGetArgs> Ec2InstanceSubnetIds
        {
            get => _ec2InstanceSubnetIds ?? (_ec2InstanceSubnetIds = new InputList<Inputs.FilterFilterCriteriaEc2InstanceSubnetIdGetArgs>());
            set => _ec2InstanceSubnetIds = value;
        }

        [Input("ec2InstanceVpcIds")]
        private InputList<Inputs.FilterFilterCriteriaEc2InstanceVpcIdGetArgs>? _ec2InstanceVpcIds;

        /// <summary>
        /// (Optional) The ID of the VPC. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEc2InstanceVpcIdGetArgs> Ec2InstanceVpcIds
        {
            get => _ec2InstanceVpcIds ?? (_ec2InstanceVpcIds = new InputList<Inputs.FilterFilterCriteriaEc2InstanceVpcIdGetArgs>());
            set => _ec2InstanceVpcIds = value;
        }

        [Input("ecrImageArchitectures")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageArchitectureGetArgs>? _ecrImageArchitectures;

        /// <summary>
        /// (Optional) The architecture of the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageArchitectureGetArgs> EcrImageArchitectures
        {
            get => _ecrImageArchitectures ?? (_ecrImageArchitectures = new InputList<Inputs.FilterFilterCriteriaEcrImageArchitectureGetArgs>());
            set => _ecrImageArchitectures = value;
        }

        [Input("ecrImageHashes")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageHashGetArgs>? _ecrImageHashes;

        /// <summary>
        /// (Optional) The SHA256 hash of the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageHashGetArgs> EcrImageHashes
        {
            get => _ecrImageHashes ?? (_ecrImageHashes = new InputList<Inputs.FilterFilterCriteriaEcrImageHashGetArgs>());
            set => _ecrImageHashes = value;
        }

        [Input("ecrImagePushedAts")]
        private InputList<Inputs.FilterFilterCriteriaEcrImagePushedAtGetArgs>? _ecrImagePushedAts;

        /// <summary>
        /// (Optional) The date range when the image was pushed. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImagePushedAtGetArgs> EcrImagePushedAts
        {
            get => _ecrImagePushedAts ?? (_ecrImagePushedAts = new InputList<Inputs.FilterFilterCriteriaEcrImagePushedAtGetArgs>());
            set => _ecrImagePushedAts = value;
        }

        [Input("ecrImageRegistries")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageRegistryGetArgs>? _ecrImageRegistries;

        /// <summary>
        /// (Optional) The registry of the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageRegistryGetArgs> EcrImageRegistries
        {
            get => _ecrImageRegistries ?? (_ecrImageRegistries = new InputList<Inputs.FilterFilterCriteriaEcrImageRegistryGetArgs>());
            set => _ecrImageRegistries = value;
        }

        [Input("ecrImageRepositoryNames")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageRepositoryNameGetArgs>? _ecrImageRepositoryNames;

        /// <summary>
        /// (Optional) The name of the ECR repository. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageRepositoryNameGetArgs> EcrImageRepositoryNames
        {
            get => _ecrImageRepositoryNames ?? (_ecrImageRepositoryNames = new InputList<Inputs.FilterFilterCriteriaEcrImageRepositoryNameGetArgs>());
            set => _ecrImageRepositoryNames = value;
        }

        [Input("ecrImageTags")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageTagGetArgs>? _ecrImageTags;

        /// <summary>
        /// (Optional) The tags associated with the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageTagGetArgs> EcrImageTags
        {
            get => _ecrImageTags ?? (_ecrImageTags = new InputList<Inputs.FilterFilterCriteriaEcrImageTagGetArgs>());
            set => _ecrImageTags = value;
        }

        [Input("epssScores")]
        private InputList<Inputs.FilterFilterCriteriaEpssScoreGetArgs>? _epssScores;

        /// <summary>
        /// (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEpssScoreGetArgs> EpssScores
        {
            get => _epssScores ?? (_epssScores = new InputList<Inputs.FilterFilterCriteriaEpssScoreGetArgs>());
            set => _epssScores = value;
        }

        [Input("exploitAvailables")]
        private InputList<Inputs.FilterFilterCriteriaExploitAvailableGetArgs>? _exploitAvailables;

        /// <summary>
        /// (Optional) Availability of exploits. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaExploitAvailableGetArgs> ExploitAvailables
        {
            get => _exploitAvailables ?? (_exploitAvailables = new InputList<Inputs.FilterFilterCriteriaExploitAvailableGetArgs>());
            set => _exploitAvailables = value;
        }

        [Input("findingArns")]
        private InputList<Inputs.FilterFilterCriteriaFindingArnGetArgs>? _findingArns;

        /// <summary>
        /// (Optional) The ARN of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFindingArnGetArgs> FindingArns
        {
            get => _findingArns ?? (_findingArns = new InputList<Inputs.FilterFilterCriteriaFindingArnGetArgs>());
            set => _findingArns = value;
        }

        [Input("findingStatuses")]
        private InputList<Inputs.FilterFilterCriteriaFindingStatusGetArgs>? _findingStatuses;

        /// <summary>
        /// (Optional) The status of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFindingStatusGetArgs> FindingStatuses
        {
            get => _findingStatuses ?? (_findingStatuses = new InputList<Inputs.FilterFilterCriteriaFindingStatusGetArgs>());
            set => _findingStatuses = value;
        }

        [Input("findingTypes")]
        private InputList<Inputs.FilterFilterCriteriaFindingTypeGetArgs>? _findingTypes;

        /// <summary>
        /// (Optional) The type of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFindingTypeGetArgs> FindingTypes
        {
            get => _findingTypes ?? (_findingTypes = new InputList<Inputs.FilterFilterCriteriaFindingTypeGetArgs>());
            set => _findingTypes = value;
        }

        [Input("firstObservedAts")]
        private InputList<Inputs.FilterFilterCriteriaFirstObservedAtGetArgs>? _firstObservedAts;

        /// <summary>
        /// (Optional) When the finding was first observed. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFirstObservedAtGetArgs> FirstObservedAts
        {
            get => _firstObservedAts ?? (_firstObservedAts = new InputList<Inputs.FilterFilterCriteriaFirstObservedAtGetArgs>());
            set => _firstObservedAts = value;
        }

        [Input("fixAvailables")]
        private InputList<Inputs.FilterFilterCriteriaFixAvailableGetArgs>? _fixAvailables;

        /// <summary>
        /// (Optional) Availability of the fix. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFixAvailableGetArgs> FixAvailables
        {
            get => _fixAvailables ?? (_fixAvailables = new InputList<Inputs.FilterFilterCriteriaFixAvailableGetArgs>());
            set => _fixAvailables = value;
        }

        [Input("inspectorScores")]
        private InputList<Inputs.FilterFilterCriteriaInspectorScoreGetArgs>? _inspectorScores;

        /// <summary>
        /// (Optional) The Inspector score given to the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaInspectorScoreGetArgs> InspectorScores
        {
            get => _inspectorScores ?? (_inspectorScores = new InputList<Inputs.FilterFilterCriteriaInspectorScoreGetArgs>());
            set => _inspectorScores = value;
        }

        [Input("lambdaFunctionExecutionRoleArns")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnGetArgs>? _lambdaFunctionExecutionRoleArns;

        /// <summary>
        /// (Optional) Lambda execution role ARN. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnGetArgs> LambdaFunctionExecutionRoleArns
        {
            get => _lambdaFunctionExecutionRoleArns ?? (_lambdaFunctionExecutionRoleArns = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnGetArgs>());
            set => _lambdaFunctionExecutionRoleArns = value;
        }

        [Input("lambdaFunctionLastModifiedAts")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtGetArgs>? _lambdaFunctionLastModifiedAts;

        /// <summary>
        /// (Optional) Last modified timestamp of the lambda function. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtGetArgs> LambdaFunctionLastModifiedAts
        {
            get => _lambdaFunctionLastModifiedAts ?? (_lambdaFunctionLastModifiedAts = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtGetArgs>());
            set => _lambdaFunctionLastModifiedAts = value;
        }

        [Input("lambdaFunctionLayers")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionLayerGetArgs>? _lambdaFunctionLayers;

        /// <summary>
        /// (Optional) Lambda function layers. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionLayerGetArgs> LambdaFunctionLayers
        {
            get => _lambdaFunctionLayers ?? (_lambdaFunctionLayers = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionLayerGetArgs>());
            set => _lambdaFunctionLayers = value;
        }

        [Input("lambdaFunctionNames")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionNameGetArgs>? _lambdaFunctionNames;

        /// <summary>
        /// (Optional) Lambda function name. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionNameGetArgs> LambdaFunctionNames
        {
            get => _lambdaFunctionNames ?? (_lambdaFunctionNames = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionNameGetArgs>());
            set => _lambdaFunctionNames = value;
        }

        [Input("lambdaFunctionRuntimes")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionRuntimeGetArgs>? _lambdaFunctionRuntimes;

        /// <summary>
        /// (Optional) Lambda function runtime. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionRuntimeGetArgs> LambdaFunctionRuntimes
        {
            get => _lambdaFunctionRuntimes ?? (_lambdaFunctionRuntimes = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionRuntimeGetArgs>());
            set => _lambdaFunctionRuntimes = value;
        }

        [Input("lastObservedAts")]
        private InputList<Inputs.FilterFilterCriteriaLastObservedAtGetArgs>? _lastObservedAts;

        /// <summary>
        /// (Optional) When the finding was last observed. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLastObservedAtGetArgs> LastObservedAts
        {
            get => _lastObservedAts ?? (_lastObservedAts = new InputList<Inputs.FilterFilterCriteriaLastObservedAtGetArgs>());
            set => _lastObservedAts = value;
        }

        [Input("networkProtocols")]
        private InputList<Inputs.FilterFilterCriteriaNetworkProtocolGetArgs>? _networkProtocols;

        /// <summary>
        /// (Optional) The network protocol of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaNetworkProtocolGetArgs> NetworkProtocols
        {
            get => _networkProtocols ?? (_networkProtocols = new InputList<Inputs.FilterFilterCriteriaNetworkProtocolGetArgs>());
            set => _networkProtocols = value;
        }

        [Input("portRanges")]
        private InputList<Inputs.FilterFilterCriteriaPortRangeGetArgs>? _portRanges;

        /// <summary>
        /// (Optional) The port range of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaPortRangeGetArgs> PortRanges
        {
            get => _portRanges ?? (_portRanges = new InputList<Inputs.FilterFilterCriteriaPortRangeGetArgs>());
            set => _portRanges = value;
        }

        [Input("relatedVulnerabilities")]
        private InputList<Inputs.FilterFilterCriteriaRelatedVulnerabilityGetArgs>? _relatedVulnerabilities;

        /// <summary>
        /// (Optional) Related vulnerabilities. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaRelatedVulnerabilityGetArgs> RelatedVulnerabilities
        {
            get => _relatedVulnerabilities ?? (_relatedVulnerabilities = new InputList<Inputs.FilterFilterCriteriaRelatedVulnerabilityGetArgs>());
            set => _relatedVulnerabilities = value;
        }

        [Input("resourceIds")]
        private InputList<Inputs.FilterFilterCriteriaResourceIdGetArgs>? _resourceIds;

        /// <summary>
        /// (Optional) The ID of the resource. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaResourceIdGetArgs> ResourceIds
        {
            get => _resourceIds ?? (_resourceIds = new InputList<Inputs.FilterFilterCriteriaResourceIdGetArgs>());
            set => _resourceIds = value;
        }

        [Input("resourceTags")]
        private InputList<Inputs.FilterFilterCriteriaResourceTagGetArgs>? _resourceTags;

        /// <summary>
        /// (Optional) The tags of the resource. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaResourceTagGetArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.FilterFilterCriteriaResourceTagGetArgs>());
            set => _resourceTags = value;
        }

        [Input("resourceTypes")]
        private InputList<Inputs.FilterFilterCriteriaResourceTypeGetArgs>? _resourceTypes;

        /// <summary>
        /// (Optional) The type of the resource. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaResourceTypeGetArgs> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<Inputs.FilterFilterCriteriaResourceTypeGetArgs>());
            set => _resourceTypes = value;
        }

        [Input("severities")]
        private InputList<Inputs.FilterFilterCriteriaSeverityGetArgs>? _severities;

        /// <summary>
        /// (Optional) The severity of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaSeverityGetArgs> Severities
        {
            get => _severities ?? (_severities = new InputList<Inputs.FilterFilterCriteriaSeverityGetArgs>());
            set => _severities = value;
        }

        [Input("titles")]
        private InputList<Inputs.FilterFilterCriteriaTitleGetArgs>? _titles;

        /// <summary>
        /// (Optional) The title of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaTitleGetArgs> Titles
        {
            get => _titles ?? (_titles = new InputList<Inputs.FilterFilterCriteriaTitleGetArgs>());
            set => _titles = value;
        }

        [Input("updatedAts")]
        private InputList<Inputs.FilterFilterCriteriaUpdatedAtGetArgs>? _updatedAts;

        /// <summary>
        /// (Optional) When the finding was last updated. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaUpdatedAtGetArgs> UpdatedAts
        {
            get => _updatedAts ?? (_updatedAts = new InputList<Inputs.FilterFilterCriteriaUpdatedAtGetArgs>());
            set => _updatedAts = value;
        }

        [Input("vendorSeverities")]
        private InputList<Inputs.FilterFilterCriteriaVendorSeverityGetArgs>? _vendorSeverities;

        /// <summary>
        /// (Optional) The severity as reported by the vendor. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVendorSeverityGetArgs> VendorSeverities
        {
            get => _vendorSeverities ?? (_vendorSeverities = new InputList<Inputs.FilterFilterCriteriaVendorSeverityGetArgs>());
            set => _vendorSeverities = value;
        }

        [Input("vulnerabilityIds")]
        private InputList<Inputs.FilterFilterCriteriaVulnerabilityIdGetArgs>? _vulnerabilityIds;

        /// <summary>
        /// (Optional) The ID of the vulnerability. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVulnerabilityIdGetArgs> VulnerabilityIds
        {
            get => _vulnerabilityIds ?? (_vulnerabilityIds = new InputList<Inputs.FilterFilterCriteriaVulnerabilityIdGetArgs>());
            set => _vulnerabilityIds = value;
        }

        [Input("vulnerabilitySources")]
        private InputList<Inputs.FilterFilterCriteriaVulnerabilitySourceGetArgs>? _vulnerabilitySources;

        /// <summary>
        /// (Optional) The source of the vulnerability. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVulnerabilitySourceGetArgs> VulnerabilitySources
        {
            get => _vulnerabilitySources ?? (_vulnerabilitySources = new InputList<Inputs.FilterFilterCriteriaVulnerabilitySourceGetArgs>());
            set => _vulnerabilitySources = value;
        }

        [Input("vulnerablePackages")]
        private InputList<Inputs.FilterFilterCriteriaVulnerablePackageGetArgs>? _vulnerablePackages;

        /// <summary>
        /// (Optional) Details about vulnerable packages. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVulnerablePackageGetArgs> VulnerablePackages
        {
            get => _vulnerablePackages ?? (_vulnerablePackages = new InputList<Inputs.FilterFilterCriteriaVulnerablePackageGetArgs>());
            set => _vulnerablePackages = value;
        }

        public FilterFilterCriteriaGetArgs()
        {
        }
        public static new FilterFilterCriteriaGetArgs Empty => new FilterFilterCriteriaGetArgs();
    }
}
