// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Inspector2.Inputs
{

    public sealed class FilterFilterCriteriaArgs : global::Pulumi.ResourceArgs
    {
        [Input("awsAccountIds")]
        private InputList<Inputs.FilterFilterCriteriaAwsAccountIdArgs>? _awsAccountIds;

        /// <summary>
        /// (Optional) The AWS account ID in which the finding was generated. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaAwsAccountIdArgs> AwsAccountIds
        {
            get => _awsAccountIds ?? (_awsAccountIds = new InputList<Inputs.FilterFilterCriteriaAwsAccountIdArgs>());
            set => _awsAccountIds = value;
        }

        [Input("codeVulnerabilityDetectorNames")]
        private InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs>? _codeVulnerabilityDetectorNames;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs> CodeVulnerabilityDetectorNames
        {
            get => _codeVulnerabilityDetectorNames ?? (_codeVulnerabilityDetectorNames = new InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorNameArgs>());
            set => _codeVulnerabilityDetectorNames = value;
        }

        [Input("codeVulnerabilityDetectorTags")]
        private InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs>? _codeVulnerabilityDetectorTags;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs> CodeVulnerabilityDetectorTags
        {
            get => _codeVulnerabilityDetectorTags ?? (_codeVulnerabilityDetectorTags = new InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityDetectorTagArgs>());
            set => _codeVulnerabilityDetectorTags = value;
        }

        [Input("codeVulnerabilityFilePaths")]
        private InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityFilePathArgs>? _codeVulnerabilityFilePaths;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityFilePathArgs> CodeVulnerabilityFilePaths
        {
            get => _codeVulnerabilityFilePaths ?? (_codeVulnerabilityFilePaths = new InputList<Inputs.FilterFilterCriteriaCodeVulnerabilityFilePathArgs>());
            set => _codeVulnerabilityFilePaths = value;
        }

        [Input("componentIds")]
        private InputList<Inputs.FilterFilterCriteriaComponentIdArgs>? _componentIds;

        /// <summary>
        /// (Optional) The ID of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaComponentIdArgs> ComponentIds
        {
            get => _componentIds ?? (_componentIds = new InputList<Inputs.FilterFilterCriteriaComponentIdArgs>());
            set => _componentIds = value;
        }

        [Input("componentTypes")]
        private InputList<Inputs.FilterFilterCriteriaComponentTypeArgs>? _componentTypes;

        /// <summary>
        /// (Optional) The type of the component. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaComponentTypeArgs> ComponentTypes
        {
            get => _componentTypes ?? (_componentTypes = new InputList<Inputs.FilterFilterCriteriaComponentTypeArgs>());
            set => _componentTypes = value;
        }

        [Input("ec2InstanceImageIds")]
        private InputList<Inputs.FilterFilterCriteriaEc2InstanceImageIdArgs>? _ec2InstanceImageIds;

        /// <summary>
        /// (Optional) The ID of the Amazon Machine Image (AMI). Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEc2InstanceImageIdArgs> Ec2InstanceImageIds
        {
            get => _ec2InstanceImageIds ?? (_ec2InstanceImageIds = new InputList<Inputs.FilterFilterCriteriaEc2InstanceImageIdArgs>());
            set => _ec2InstanceImageIds = value;
        }

        [Input("ec2InstanceSubnetIds")]
        private InputList<Inputs.FilterFilterCriteriaEc2InstanceSubnetIdArgs>? _ec2InstanceSubnetIds;

        /// <summary>
        /// (Optional) The ID of the subnet. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEc2InstanceSubnetIdArgs> Ec2InstanceSubnetIds
        {
            get => _ec2InstanceSubnetIds ?? (_ec2InstanceSubnetIds = new InputList<Inputs.FilterFilterCriteriaEc2InstanceSubnetIdArgs>());
            set => _ec2InstanceSubnetIds = value;
        }

        [Input("ec2InstanceVpcIds")]
        private InputList<Inputs.FilterFilterCriteriaEc2InstanceVpcIdArgs>? _ec2InstanceVpcIds;

        /// <summary>
        /// (Optional) The ID of the VPC. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEc2InstanceVpcIdArgs> Ec2InstanceVpcIds
        {
            get => _ec2InstanceVpcIds ?? (_ec2InstanceVpcIds = new InputList<Inputs.FilterFilterCriteriaEc2InstanceVpcIdArgs>());
            set => _ec2InstanceVpcIds = value;
        }

        [Input("ecrImageArchitectures")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageArchitectureArgs>? _ecrImageArchitectures;

        /// <summary>
        /// (Optional) The architecture of the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageArchitectureArgs> EcrImageArchitectures
        {
            get => _ecrImageArchitectures ?? (_ecrImageArchitectures = new InputList<Inputs.FilterFilterCriteriaEcrImageArchitectureArgs>());
            set => _ecrImageArchitectures = value;
        }

        [Input("ecrImageHashes")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageHashArgs>? _ecrImageHashes;

        /// <summary>
        /// (Optional) The SHA256 hash of the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageHashArgs> EcrImageHashes
        {
            get => _ecrImageHashes ?? (_ecrImageHashes = new InputList<Inputs.FilterFilterCriteriaEcrImageHashArgs>());
            set => _ecrImageHashes = value;
        }

        [Input("ecrImagePushedAts")]
        private InputList<Inputs.FilterFilterCriteriaEcrImagePushedAtArgs>? _ecrImagePushedAts;

        /// <summary>
        /// (Optional) The date range when the image was pushed. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImagePushedAtArgs> EcrImagePushedAts
        {
            get => _ecrImagePushedAts ?? (_ecrImagePushedAts = new InputList<Inputs.FilterFilterCriteriaEcrImagePushedAtArgs>());
            set => _ecrImagePushedAts = value;
        }

        [Input("ecrImageRegistries")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageRegistryArgs>? _ecrImageRegistries;

        /// <summary>
        /// (Optional) The registry of the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageRegistryArgs> EcrImageRegistries
        {
            get => _ecrImageRegistries ?? (_ecrImageRegistries = new InputList<Inputs.FilterFilterCriteriaEcrImageRegistryArgs>());
            set => _ecrImageRegistries = value;
        }

        [Input("ecrImageRepositoryNames")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageRepositoryNameArgs>? _ecrImageRepositoryNames;

        /// <summary>
        /// (Optional) The name of the ECR repository. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageRepositoryNameArgs> EcrImageRepositoryNames
        {
            get => _ecrImageRepositoryNames ?? (_ecrImageRepositoryNames = new InputList<Inputs.FilterFilterCriteriaEcrImageRepositoryNameArgs>());
            set => _ecrImageRepositoryNames = value;
        }

        [Input("ecrImageTags")]
        private InputList<Inputs.FilterFilterCriteriaEcrImageTagArgs>? _ecrImageTags;

        /// <summary>
        /// (Optional) The tags associated with the ECR image. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEcrImageTagArgs> EcrImageTags
        {
            get => _ecrImageTags ?? (_ecrImageTags = new InputList<Inputs.FilterFilterCriteriaEcrImageTagArgs>());
            set => _ecrImageTags = value;
        }

        [Input("epssScores")]
        private InputList<Inputs.FilterFilterCriteriaEpssScoreArgs>? _epssScores;

        /// <summary>
        /// (Optional) EPSS (Exploit Prediction Scoring System) Score of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaEpssScoreArgs> EpssScores
        {
            get => _epssScores ?? (_epssScores = new InputList<Inputs.FilterFilterCriteriaEpssScoreArgs>());
            set => _epssScores = value;
        }

        [Input("exploitAvailables")]
        private InputList<Inputs.FilterFilterCriteriaExploitAvailableArgs>? _exploitAvailables;

        /// <summary>
        /// (Optional) Availability of exploits. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaExploitAvailableArgs> ExploitAvailables
        {
            get => _exploitAvailables ?? (_exploitAvailables = new InputList<Inputs.FilterFilterCriteriaExploitAvailableArgs>());
            set => _exploitAvailables = value;
        }

        [Input("findingArns")]
        private InputList<Inputs.FilterFilterCriteriaFindingArnArgs>? _findingArns;

        /// <summary>
        /// (Optional) The ARN of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFindingArnArgs> FindingArns
        {
            get => _findingArns ?? (_findingArns = new InputList<Inputs.FilterFilterCriteriaFindingArnArgs>());
            set => _findingArns = value;
        }

        [Input("findingStatuses")]
        private InputList<Inputs.FilterFilterCriteriaFindingStatusArgs>? _findingStatuses;

        /// <summary>
        /// (Optional) The status of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFindingStatusArgs> FindingStatuses
        {
            get => _findingStatuses ?? (_findingStatuses = new InputList<Inputs.FilterFilterCriteriaFindingStatusArgs>());
            set => _findingStatuses = value;
        }

        [Input("findingTypes")]
        private InputList<Inputs.FilterFilterCriteriaFindingTypeArgs>? _findingTypes;

        /// <summary>
        /// (Optional) The type of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFindingTypeArgs> FindingTypes
        {
            get => _findingTypes ?? (_findingTypes = new InputList<Inputs.FilterFilterCriteriaFindingTypeArgs>());
            set => _findingTypes = value;
        }

        [Input("firstObservedAts")]
        private InputList<Inputs.FilterFilterCriteriaFirstObservedAtArgs>? _firstObservedAts;

        /// <summary>
        /// (Optional) When the finding was first observed. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFirstObservedAtArgs> FirstObservedAts
        {
            get => _firstObservedAts ?? (_firstObservedAts = new InputList<Inputs.FilterFilterCriteriaFirstObservedAtArgs>());
            set => _firstObservedAts = value;
        }

        [Input("fixAvailables")]
        private InputList<Inputs.FilterFilterCriteriaFixAvailableArgs>? _fixAvailables;

        /// <summary>
        /// (Optional) Availability of the fix. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaFixAvailableArgs> FixAvailables
        {
            get => _fixAvailables ?? (_fixAvailables = new InputList<Inputs.FilterFilterCriteriaFixAvailableArgs>());
            set => _fixAvailables = value;
        }

        [Input("inspectorScores")]
        private InputList<Inputs.FilterFilterCriteriaInspectorScoreArgs>? _inspectorScores;

        /// <summary>
        /// (Optional) The Inspector score given to the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaInspectorScoreArgs> InspectorScores
        {
            get => _inspectorScores ?? (_inspectorScores = new InputList<Inputs.FilterFilterCriteriaInspectorScoreArgs>());
            set => _inspectorScores = value;
        }

        [Input("lambdaFunctionExecutionRoleArns")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs>? _lambdaFunctionExecutionRoleArns;

        /// <summary>
        /// (Optional) Lambda execution role ARN. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs> LambdaFunctionExecutionRoleArns
        {
            get => _lambdaFunctionExecutionRoleArns ?? (_lambdaFunctionExecutionRoleArns = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionExecutionRoleArnArgs>());
            set => _lambdaFunctionExecutionRoleArns = value;
        }

        [Input("lambdaFunctionLastModifiedAts")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs>? _lambdaFunctionLastModifiedAts;

        /// <summary>
        /// (Optional) Last modified timestamp of the lambda function. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs> LambdaFunctionLastModifiedAts
        {
            get => _lambdaFunctionLastModifiedAts ?? (_lambdaFunctionLastModifiedAts = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionLastModifiedAtArgs>());
            set => _lambdaFunctionLastModifiedAts = value;
        }

        [Input("lambdaFunctionLayers")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionLayerArgs>? _lambdaFunctionLayers;

        /// <summary>
        /// (Optional) Lambda function layers. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionLayerArgs> LambdaFunctionLayers
        {
            get => _lambdaFunctionLayers ?? (_lambdaFunctionLayers = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionLayerArgs>());
            set => _lambdaFunctionLayers = value;
        }

        [Input("lambdaFunctionNames")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionNameArgs>? _lambdaFunctionNames;

        /// <summary>
        /// (Optional) Lambda function name. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionNameArgs> LambdaFunctionNames
        {
            get => _lambdaFunctionNames ?? (_lambdaFunctionNames = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionNameArgs>());
            set => _lambdaFunctionNames = value;
        }

        [Input("lambdaFunctionRuntimes")]
        private InputList<Inputs.FilterFilterCriteriaLambdaFunctionRuntimeArgs>? _lambdaFunctionRuntimes;

        /// <summary>
        /// (Optional) Lambda function runtime. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLambdaFunctionRuntimeArgs> LambdaFunctionRuntimes
        {
            get => _lambdaFunctionRuntimes ?? (_lambdaFunctionRuntimes = new InputList<Inputs.FilterFilterCriteriaLambdaFunctionRuntimeArgs>());
            set => _lambdaFunctionRuntimes = value;
        }

        [Input("lastObservedAts")]
        private InputList<Inputs.FilterFilterCriteriaLastObservedAtArgs>? _lastObservedAts;

        /// <summary>
        /// (Optional) When the finding was last observed. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaLastObservedAtArgs> LastObservedAts
        {
            get => _lastObservedAts ?? (_lastObservedAts = new InputList<Inputs.FilterFilterCriteriaLastObservedAtArgs>());
            set => _lastObservedAts = value;
        }

        [Input("networkProtocols")]
        private InputList<Inputs.FilterFilterCriteriaNetworkProtocolArgs>? _networkProtocols;

        /// <summary>
        /// (Optional) The network protocol of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaNetworkProtocolArgs> NetworkProtocols
        {
            get => _networkProtocols ?? (_networkProtocols = new InputList<Inputs.FilterFilterCriteriaNetworkProtocolArgs>());
            set => _networkProtocols = value;
        }

        [Input("portRanges")]
        private InputList<Inputs.FilterFilterCriteriaPortRangeArgs>? _portRanges;

        /// <summary>
        /// (Optional) The port range of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaPortRangeArgs> PortRanges
        {
            get => _portRanges ?? (_portRanges = new InputList<Inputs.FilterFilterCriteriaPortRangeArgs>());
            set => _portRanges = value;
        }

        [Input("relatedVulnerabilities")]
        private InputList<Inputs.FilterFilterCriteriaRelatedVulnerabilityArgs>? _relatedVulnerabilities;

        /// <summary>
        /// (Optional) Related vulnerabilities. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaRelatedVulnerabilityArgs> RelatedVulnerabilities
        {
            get => _relatedVulnerabilities ?? (_relatedVulnerabilities = new InputList<Inputs.FilterFilterCriteriaRelatedVulnerabilityArgs>());
            set => _relatedVulnerabilities = value;
        }

        [Input("resourceIds")]
        private InputList<Inputs.FilterFilterCriteriaResourceIdArgs>? _resourceIds;

        /// <summary>
        /// (Optional) The ID of the resource. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaResourceIdArgs> ResourceIds
        {
            get => _resourceIds ?? (_resourceIds = new InputList<Inputs.FilterFilterCriteriaResourceIdArgs>());
            set => _resourceIds = value;
        }

        [Input("resourceTags")]
        private InputList<Inputs.FilterFilterCriteriaResourceTagArgs>? _resourceTags;

        /// <summary>
        /// (Optional) The tags of the resource. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaResourceTagArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.FilterFilterCriteriaResourceTagArgs>());
            set => _resourceTags = value;
        }

        [Input("resourceTypes")]
        private InputList<Inputs.FilterFilterCriteriaResourceTypeArgs>? _resourceTypes;

        /// <summary>
        /// (Optional) The type of the resource. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaResourceTypeArgs> ResourceTypes
        {
            get => _resourceTypes ?? (_resourceTypes = new InputList<Inputs.FilterFilterCriteriaResourceTypeArgs>());
            set => _resourceTypes = value;
        }

        [Input("severities")]
        private InputList<Inputs.FilterFilterCriteriaSeverityArgs>? _severities;

        /// <summary>
        /// (Optional) The severity of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaSeverityArgs> Severities
        {
            get => _severities ?? (_severities = new InputList<Inputs.FilterFilterCriteriaSeverityArgs>());
            set => _severities = value;
        }

        [Input("titles")]
        private InputList<Inputs.FilterFilterCriteriaTitleArgs>? _titles;

        /// <summary>
        /// (Optional) The title of the finding. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaTitleArgs> Titles
        {
            get => _titles ?? (_titles = new InputList<Inputs.FilterFilterCriteriaTitleArgs>());
            set => _titles = value;
        }

        [Input("updatedAts")]
        private InputList<Inputs.FilterFilterCriteriaUpdatedAtArgs>? _updatedAts;

        /// <summary>
        /// (Optional) When the finding was last updated. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaUpdatedAtArgs> UpdatedAts
        {
            get => _updatedAts ?? (_updatedAts = new InputList<Inputs.FilterFilterCriteriaUpdatedAtArgs>());
            set => _updatedAts = value;
        }

        [Input("vendorSeverities")]
        private InputList<Inputs.FilterFilterCriteriaVendorSeverityArgs>? _vendorSeverities;

        /// <summary>
        /// (Optional) The severity as reported by the vendor. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVendorSeverityArgs> VendorSeverities
        {
            get => _vendorSeverities ?? (_vendorSeverities = new InputList<Inputs.FilterFilterCriteriaVendorSeverityArgs>());
            set => _vendorSeverities = value;
        }

        [Input("vulnerabilityIds")]
        private InputList<Inputs.FilterFilterCriteriaVulnerabilityIdArgs>? _vulnerabilityIds;

        /// <summary>
        /// (Optional) The ID of the vulnerability. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVulnerabilityIdArgs> VulnerabilityIds
        {
            get => _vulnerabilityIds ?? (_vulnerabilityIds = new InputList<Inputs.FilterFilterCriteriaVulnerabilityIdArgs>());
            set => _vulnerabilityIds = value;
        }

        [Input("vulnerabilitySources")]
        private InputList<Inputs.FilterFilterCriteriaVulnerabilitySourceArgs>? _vulnerabilitySources;

        /// <summary>
        /// (Optional) The source of the vulnerability. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVulnerabilitySourceArgs> VulnerabilitySources
        {
            get => _vulnerabilitySources ?? (_vulnerabilitySources = new InputList<Inputs.FilterFilterCriteriaVulnerabilitySourceArgs>());
            set => _vulnerabilitySources = value;
        }

        [Input("vulnerablePackages")]
        private InputList<Inputs.FilterFilterCriteriaVulnerablePackageArgs>? _vulnerablePackages;

        /// <summary>
        /// (Optional) Details about vulnerable packages. Documented below.
        /// </summary>
        public InputList<Inputs.FilterFilterCriteriaVulnerablePackageArgs> VulnerablePackages
        {
            get => _vulnerablePackages ?? (_vulnerablePackages = new InputList<Inputs.FilterFilterCriteriaVulnerablePackageArgs>());
            set => _vulnerablePackages = value;
        }

        public FilterFilterCriteriaArgs()
        {
        }
        public static new FilterFilterCriteriaArgs Empty => new FilterFilterCriteriaArgs();
    }
}
