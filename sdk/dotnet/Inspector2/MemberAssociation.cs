// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Inspector2
{
    /// <summary>
    /// Resource for associating accounts to existing Inspector instances.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Inspector2.MemberAssociation("example", new()
    ///     {
    ///         AccountId = "123456789012",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Amazon Inspector Member Association can be imported using the `account_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:inspector2/memberAssociation:MemberAssociation example 123456789012
    /// ```
    /// </summary>
    [AwsResourceType("aws:inspector2/memberAssociation:MemberAssociation")]
    public partial class MemberAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ID of the account to associate
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Account ID of the delegated administrator account
        /// </summary>
        [Output("delegatedAdminAccountId")]
        public Output<string> DelegatedAdminAccountId { get; private set; } = null!;

        /// <summary>
        /// Status of the member relationship
        /// </summary>
        [Output("relationshipStatus")]
        public Output<string> RelationshipStatus { get; private set; } = null!;

        /// <summary>
        /// Date and time of the last update of the relationship
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a MemberAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MemberAssociation(string name, MemberAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:inspector2/memberAssociation:MemberAssociation", name, args ?? new MemberAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MemberAssociation(string name, Input<string> id, MemberAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:inspector2/memberAssociation:MemberAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MemberAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MemberAssociation Get(string name, Input<string> id, MemberAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new MemberAssociation(name, id, state, options);
        }
    }

    public sealed class MemberAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the account to associate
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        public MemberAssociationArgs()
        {
        }
        public static new MemberAssociationArgs Empty => new MemberAssociationArgs();
    }

    public sealed class MemberAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the account to associate
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Account ID of the delegated administrator account
        /// </summary>
        [Input("delegatedAdminAccountId")]
        public Input<string>? DelegatedAdminAccountId { get; set; }

        /// <summary>
        /// Status of the member relationship
        /// </summary>
        [Input("relationshipStatus")]
        public Input<string>? RelationshipStatus { get; set; }

        /// <summary>
        /// Date and time of the last update of the relationship
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public MemberAssociationState()
        {
        }
        public static new MemberAssociationState Empty => new MemberAssociationState();
    }
}
