// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws
{
    public static class GetAvailabilityZone
    {
        public static Task<GetAvailabilityZoneResult> InvokeAsync(GetAvailabilityZoneArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAvailabilityZoneResult>("aws:index/getAvailabilityZone:getAvailabilityZone", args ?? new GetAvailabilityZoneArgs(), options.WithDefaults());

        public static Output<GetAvailabilityZoneResult> Invoke(GetAvailabilityZoneInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAvailabilityZoneResult>("aws:index/getAvailabilityZone:getAvailabilityZone", args ?? new GetAvailabilityZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAvailabilityZoneArgs : global::Pulumi.InvokeArgs
    {
        [Input("allAvailabilityZones")]
        public bool? AllAvailabilityZones { get; set; }

        [Input("filters")]
        private List<Inputs.GetAvailabilityZoneFilterArgs>? _filters;
        public List<Inputs.GetAvailabilityZoneFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetAvailabilityZoneFilterArgs>());
            set => _filters = value;
        }

        [Input("name")]
        public string? Name { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetAvailabilityZoneArgs()
        {
        }
        public static new GetAvailabilityZoneArgs Empty => new GetAvailabilityZoneArgs();
    }

    public sealed class GetAvailabilityZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("allAvailabilityZones")]
        public Input<bool>? AllAvailabilityZones { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetAvailabilityZoneFilterInputArgs>? _filters;
        public InputList<Inputs.GetAvailabilityZoneFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetAvailabilityZoneFilterInputArgs>());
            set => _filters = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetAvailabilityZoneInvokeArgs()
        {
        }
        public static new GetAvailabilityZoneInvokeArgs Empty => new GetAvailabilityZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetAvailabilityZoneResult
    {
        public readonly bool? AllAvailabilityZones;
        public readonly ImmutableArray<Outputs.GetAvailabilityZoneFilterResult> Filters;
        public readonly string GroupName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly string NameSuffix;
        public readonly string NetworkBorderGroup;
        public readonly string OptInStatus;
        public readonly string ParentZoneId;
        public readonly string ParentZoneName;
        public readonly string Region;
        public readonly string State;
        public readonly string ZoneId;
        public readonly string ZoneType;

        [OutputConstructor]
        private GetAvailabilityZoneResult(
            bool? allAvailabilityZones,

            ImmutableArray<Outputs.GetAvailabilityZoneFilterResult> filters,

            string groupName,

            string id,

            string name,

            string nameSuffix,

            string networkBorderGroup,

            string optInStatus,

            string parentZoneId,

            string parentZoneName,

            string region,

            string state,

            string zoneId,

            string zoneType)
        {
            AllAvailabilityZones = allAvailabilityZones;
            Filters = filters;
            GroupName = groupName;
            Id = id;
            Name = name;
            NameSuffix = nameSuffix;
            NetworkBorderGroup = networkBorderGroup;
            OptInStatus = optInStatus;
            ParentZoneId = parentZoneId;
            ParentZoneName = parentZoneName;
            Region = region;
            State = state;
            ZoneId = zoneId;
            ZoneType = zoneType;
        }
    }
}
