// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    /// <summary>
    /// Provides a AWS Transfer AS2 Certificate resource.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Transfer.Certificate("example", new()
    ///     {
    ///         CertificateFile = File.ReadAllText($"{path.Module}/example.com/example.crt"),
    ///         CertificateChain = File.ReadAllText($"{path.Module}/example.com/ca.crt"),
    ///         PrivateKey = File.ReadAllText($"{path.Module}/example.com/example.key"),
    ///         Description = "example",
    ///         Usage = "SIGNING",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Transfer AS2 Certificate using the `certificate_id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:transfer/certificate:Certificate example c-4221a88afd5f4362a
    /// ```
    /// </summary>
    [AwsResourceType("aws:transfer/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An date when the certificate becomes active
        /// </summary>
        [Output("activeDate")]
        public Output<string> ActiveDate { get; private set; } = null!;

        /// <summary>
        /// The ARN of the certificate
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The valid certificate file required for the transfer.
        /// </summary>
        [Output("certificate")]
        public Output<string> CertificateFile { get; private set; } = null!;

        /// <summary>
        /// The optional list of certificate that make up the chain for the certificate that is being imported.
        /// </summary>
        [Output("certificateChain")]
        public Output<string?> CertificateChain { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the AS2 certificate
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// A short description that helps identify the certificate.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// An date when the certificate becomes inactive
        /// </summary>
        [Output("inactiveDate")]
        public Output<string> InactiveDate { get; private set; } = null!;

        /// <summary>
        /// The private key associated with the certificate being imported.
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
        /// </summary>
        [Output("usage")]
        public Output<string> Usage { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("aws:transfer/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("aws:transfer/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "certificate",
                    "certificateChain",
                    "privateKey",
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificate", required: true)]
        private Input<string>? _certificate;

        /// <summary>
        /// The valid certificate file required for the transfer.
        /// </summary>
        public Input<string>? CertificateFile
        {
            get => _certificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificateChain")]
        private Input<string>? _certificateChain;

        /// <summary>
        /// The optional list of certificate that make up the chain for the certificate that is being imported.
        /// </summary>
        public Input<string>? CertificateChain
        {
            get => _certificateChain;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificateChain = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// A short description that helps identify the certificate.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key associated with the certificate being imported.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
        /// </summary>
        [Input("usage", required: true)]
        public Input<string> Usage { get; set; } = null!;

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An date when the certificate becomes active
        /// </summary>
        [Input("activeDate")]
        public Input<string>? ActiveDate { get; set; }

        /// <summary>
        /// The ARN of the certificate
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("certificate")]
        private Input<string>? _certificate;

        /// <summary>
        /// The valid certificate file required for the transfer.
        /// </summary>
        public Input<string>? CertificateFile
        {
            get => _certificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificateChain")]
        private Input<string>? _certificateChain;

        /// <summary>
        /// The optional list of certificate that make up the chain for the certificate that is being imported.
        /// </summary>
        public Input<string>? CertificateChain
        {
            get => _certificateChain;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificateChain = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The unique identifier for the AS2 certificate
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// A short description that helps identify the certificate.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// An date when the certificate becomes inactive
        /// </summary>
        [Input("inactiveDate")]
        public Input<string>? InactiveDate { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// The private key associated with the certificate being imported.
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.
        /// </summary>
        [Input("usage")]
        public Input<string>? Usage { get; set; }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
