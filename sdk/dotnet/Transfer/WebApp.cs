// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    /// <summary>
    /// Resource for managing an AWS Transfer Family Web App.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var currentGetRegion = Aws.GetRegion.Invoke();
    /// 
    ///     var currentGetPartition = Aws.GetPartition.Invoke();
    /// 
    ///     var example = Aws.SsoAdmin.GetInstances.Invoke();
    /// 
    ///     var assumeRoleTransfer = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                     "sts:SetContext",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "transfer.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                         Variable = "aws:SourceAccount",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRole = new Aws.Iam.Role("example", new()
    ///     {
    ///         Name = "example",
    ///         AssumeRolePolicy = assumeRoleTransfer.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var exampleGetPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:GetDataAccess",
    ///                     "s3:ListCallerAccessGrants",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"arn:{currentGetPartition.Apply(getPartitionResult =&gt; getPartitionResult.Partition)}:s3:{currentGetRegion.Apply(getRegionResult =&gt; getRegionResult.Name)}:{current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId)}:access-grants/*",
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                         Variable = "s3:ResourceAccount",
    ///                     },
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:ListAccessGrantsInstances",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                         Variable = "s3:ResourceAccount",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRolePolicy = new Aws.Iam.RolePolicy("example", new()
    ///     {
    ///         Policy = exampleGetPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         Role = exampleRole.Name,
    ///     });
    /// 
    ///     var exampleWebApp = new Aws.Transfer.WebApp("example", new()
    ///     {
    ///         IdentityProviderDetails = new Aws.Transfer.Inputs.WebAppIdentityProviderDetailsArgs
    ///         {
    ///             IdentityCenterConfig = new Aws.Transfer.Inputs.WebAppIdentityProviderDetailsIdentityCenterConfigArgs
    ///             {
    ///                 InstanceArn = example.Apply(getInstancesResult =&gt; getInstancesResult.Arns[0]),
    ///                 Role = exampleRole.Arn,
    ///             },
    ///         },
    ///         WebAppUnits = new[]
    ///         {
    ///             new Aws.Transfer.Inputs.WebAppWebAppUnitArgs
    ///             {
    ///                 Provisioned = 1,
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Transfer Family Web App using the `web_app_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:transfer/webApp:WebApp example web_app-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:transfer/webApp:WebApp")]
    public partial class WebApp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// URL provided to interact with the Transfer Family web app.
        /// </summary>
        [Output("accessEndpoint")]
        public Output<string> AccessEndpoint { get; private set; } = null!;

        /// <summary>
        /// ARN of the Web App.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Block for details of the identity provider to use with the web app. See Identity provider details below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("identityProviderDetails")]
        public Output<Outputs.WebAppIdentityProviderDetails?> IdentityProviderDetails { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Key-value pairs that can be used to group and search for web apps.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Type of endpoint policy for the web app. Valid values are: `STANDARD`(default) or `FIPS`.
        /// </summary>
        [Output("webAppEndpointPolicy")]
        public Output<string> WebAppEndpointPolicy { get; private set; } = null!;

        /// <summary>
        /// ID of the Wep App resource.
        /// </summary>
        [Output("webAppId")]
        public Output<string> WebAppId { get; private set; } = null!;

        /// <summary>
        /// Block for number of concurrent connections or the user sessions on the web app.
        /// * provisioned - (Optional) Number of units of concurrent connections.
        /// </summary>
        [Output("webAppUnits")]
        public Output<ImmutableArray<Outputs.WebAppWebAppUnit>> WebAppUnits { get; private set; } = null!;


        /// <summary>
        /// Create a WebApp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebApp(string name, WebAppArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:transfer/webApp:WebApp", name, args ?? new WebAppArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebApp(string name, Input<string> id, WebAppState? state = null, CustomResourceOptions? options = null)
            : base("aws:transfer/webApp:WebApp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebApp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebApp Get(string name, Input<string> id, WebAppState? state = null, CustomResourceOptions? options = null)
        {
            return new WebApp(name, id, state, options);
        }
    }

    public sealed class WebAppArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// URL provided to interact with the Transfer Family web app.
        /// </summary>
        [Input("accessEndpoint")]
        public Input<string>? AccessEndpoint { get; set; }

        /// <summary>
        /// Block for details of the identity provider to use with the web app. See Identity provider details below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("identityProviderDetails")]
        public Input<Inputs.WebAppIdentityProviderDetailsArgs>? IdentityProviderDetails { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value pairs that can be used to group and search for web apps.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Type of endpoint policy for the web app. Valid values are: `STANDARD`(default) or `FIPS`.
        /// </summary>
        [Input("webAppEndpointPolicy")]
        public Input<string>? WebAppEndpointPolicy { get; set; }

        [Input("webAppUnits")]
        private InputList<Inputs.WebAppWebAppUnitArgs>? _webAppUnits;

        /// <summary>
        /// Block for number of concurrent connections or the user sessions on the web app.
        /// * provisioned - (Optional) Number of units of concurrent connections.
        /// </summary>
        public InputList<Inputs.WebAppWebAppUnitArgs> WebAppUnits
        {
            get => _webAppUnits ?? (_webAppUnits = new InputList<Inputs.WebAppWebAppUnitArgs>());
            set => _webAppUnits = value;
        }

        public WebAppArgs()
        {
        }
        public static new WebAppArgs Empty => new WebAppArgs();
    }

    public sealed class WebAppState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// URL provided to interact with the Transfer Family web app.
        /// </summary>
        [Input("accessEndpoint")]
        public Input<string>? AccessEndpoint { get; set; }

        /// <summary>
        /// ARN of the Web App.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Block for details of the identity provider to use with the web app. See Identity provider details below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("identityProviderDetails")]
        public Input<Inputs.WebAppIdentityProviderDetailsGetArgs>? IdentityProviderDetails { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value pairs that can be used to group and search for web apps.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Type of endpoint policy for the web app. Valid values are: `STANDARD`(default) or `FIPS`.
        /// </summary>
        [Input("webAppEndpointPolicy")]
        public Input<string>? WebAppEndpointPolicy { get; set; }

        /// <summary>
        /// ID of the Wep App resource.
        /// </summary>
        [Input("webAppId")]
        public Input<string>? WebAppId { get; set; }

        [Input("webAppUnits")]
        private InputList<Inputs.WebAppWebAppUnitGetArgs>? _webAppUnits;

        /// <summary>
        /// Block for number of concurrent connections or the user sessions on the web app.
        /// * provisioned - (Optional) Number of units of concurrent connections.
        /// </summary>
        public InputList<Inputs.WebAppWebAppUnitGetArgs> WebAppUnits
        {
            get => _webAppUnits ?? (_webAppUnits = new InputList<Inputs.WebAppWebAppUnitGetArgs>());
            set => _webAppUnits = value;
        }

        public WebAppState()
        {
        }
        public static new WebAppState Empty => new WebAppState();
    }
}
