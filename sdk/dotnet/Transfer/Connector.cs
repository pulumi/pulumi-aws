// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    /// <summary>
    /// Provides a AWS Transfer AS2 Connector resource.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Transfer.Connector("example", new()
    ///     {
    ///         AccessRole = aws_iam_role.Test.Arn,
    ///         As2Config = new Aws.Transfer.Inputs.ConnectorAs2ConfigArgs
    ///         {
    ///             Compression = "DISABLED",
    ///             EncryptionAlgorithm = "AWS128_CBC",
    ///             MessageSubject = "For Connector",
    ///             LocalProfileId = aws_transfer_profile.Local.Profile_id,
    ///             MdnResponse = "NONE",
    ///             MdnSigningAlgorithm = "NONE",
    ///             PartnerProfileId = aws_transfer_profile.Partner.Profile_id,
    ///             SigningAlgorithm = "NONE",
    ///         },
    ///         Url = "http://www.test.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Transfer AS2 Connector can be imported using the `connector_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:transfer/connector:Connector example c-4221a88afd5f4362a
    /// ```
    /// </summary>
    [AwsResourceType("aws:transfer/connector:Connector")]
    public partial class Connector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
        /// </summary>
        [Output("accessRole")]
        public Output<string> AccessRole { get; private set; } = null!;

        /// <summary>
        /// The parameters to configure for the connector object. Fields documented below.
        /// </summary>
        [Output("as2Config")]
        public Output<Outputs.ConnectorAs2Config> As2Config { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the AS2 profile
        /// </summary>
        [Output("connectorId")]
        public Output<string> ConnectorId { get; private set; } = null!;

        /// <summary>
        /// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
        /// </summary>
        [Output("loggingRole")]
        public Output<string?> LoggingRole { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The URL of the partners AS2 endpoint.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Connector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connector(string name, ConnectorArgs args, CustomResourceOptions? options = null)
            : base("aws:transfer/connector:Connector", name, args ?? new ConnectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connector(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
            : base("aws:transfer/connector:Connector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connector Get(string name, Input<string> id, ConnectorState? state = null, CustomResourceOptions? options = null)
        {
            return new Connector(name, id, state, options);
        }
    }

    public sealed class ConnectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
        /// </summary>
        [Input("accessRole", required: true)]
        public Input<string> AccessRole { get; set; } = null!;

        /// <summary>
        /// The parameters to configure for the connector object. Fields documented below.
        /// </summary>
        [Input("as2Config", required: true)]
        public Input<Inputs.ConnectorAs2ConfigArgs> As2Config { get; set; } = null!;

        /// <summary>
        /// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
        /// </summary>
        [Input("loggingRole")]
        public Input<string>? LoggingRole { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The URL of the partners AS2 endpoint.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public ConnectorArgs()
        {
        }
        public static new ConnectorArgs Empty => new ConnectorArgs();
    }

    public sealed class ConnectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
        /// </summary>
        [Input("accessRole")]
        public Input<string>? AccessRole { get; set; }

        /// <summary>
        /// The parameters to configure for the connector object. Fields documented below.
        /// </summary>
        [Input("as2Config")]
        public Input<Inputs.ConnectorAs2ConfigGetArgs>? As2Config { get; set; }

        /// <summary>
        /// The unique identifier for the AS2 profile
        /// </summary>
        [Input("connectorId")]
        public Input<string>? ConnectorId { get; set; }

        /// <summary>
        /// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
        /// </summary>
        [Input("loggingRole")]
        public Input<string>? LoggingRole { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The URL of the partners AS2 endpoint.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ConnectorState()
        {
        }
        public static new ConnectorState Empty => new ConnectorState();
    }
}
