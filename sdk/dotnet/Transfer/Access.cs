// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    /// <summary>
    /// Provides a AWS Transfer Access resource.
    /// 
    /// ## Example Usage
    /// ### Basic S3
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Transfer.Access("example", new()
    ///     {
    ///         ExternalId = "S-1-1-12-1234567890-123456789-1234567890-1234",
    ///         ServerId = aws_transfer_server.Example.Id,
    ///         Role = aws_iam_role.Example.Arn,
    ///         HomeDirectory = $"/{aws_s3_bucket.Example.Id}/",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Basic EFS
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Transfer.Access("test", new()
    ///     {
    ///         ExternalId = "S-1-1-12-1234567890-123456789-1234567890-1234",
    ///         ServerId = aws_transfer_server.Test.Id,
    ///         Role = aws_iam_role.Test.Arn,
    ///         HomeDirectory = $"/{aws_efs_file_system.Test.Id}/",
    ///         PosixProfile = new Aws.Transfer.Inputs.AccessPosixProfileArgs
    ///         {
    ///             Gid = 1000,
    ///             Uid = 1000,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Transfer Accesses can be imported using the `server_id` and `external_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:transfer/access:Access example s-12345678/S-1-1-12-1234567890-123456789-1234567890-1234
    /// ```
    /// </summary>
    [AwsResourceType("aws:transfer/access:Access")]
    public partial class Access : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
        /// </summary>
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        /// <summary>
        /// The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
        /// </summary>
        [Output("homeDirectory")]
        public Output<string?> HomeDirectory { get; private set; } = null!;

        /// <summary>
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
        /// </summary>
        [Output("homeDirectoryMappings")]
        public Output<ImmutableArray<Outputs.AccessHomeDirectoryMapping>> HomeDirectoryMappings { get; private set; } = null!;

        /// <summary>
        /// The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
        /// </summary>
        [Output("homeDirectoryType")]
        public Output<string?> HomeDirectoryType { get; private set; } = null!;

        /// <summary>
        /// An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
        /// </summary>
        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        /// <summary>
        /// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
        /// </summary>
        [Output("posixProfile")]
        public Output<Outputs.AccessPosixProfile?> PosixProfile { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// The Server ID of the Transfer Server (e.g., `s-12345678`)
        /// </summary>
        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;


        /// <summary>
        /// Create a Access resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Access(string name, AccessArgs args, CustomResourceOptions? options = null)
            : base("aws:transfer/access:Access", name, args ?? new AccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Access(string name, Input<string> id, AccessState? state = null, CustomResourceOptions? options = null)
            : base("aws:transfer/access:Access", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Access resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Access Get(string name, Input<string> id, AccessState? state = null, CustomResourceOptions? options = null)
        {
            return new Access(name, id, state, options);
        }
    }

    public sealed class AccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
        /// </summary>
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        /// <summary>
        /// The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
        /// </summary>
        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        [Input("homeDirectoryMappings")]
        private InputList<Inputs.AccessHomeDirectoryMappingArgs>? _homeDirectoryMappings;

        /// <summary>
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
        /// </summary>
        public InputList<Inputs.AccessHomeDirectoryMappingArgs> HomeDirectoryMappings
        {
            get => _homeDirectoryMappings ?? (_homeDirectoryMappings = new InputList<Inputs.AccessHomeDirectoryMappingArgs>());
            set => _homeDirectoryMappings = value;
        }

        /// <summary>
        /// The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
        /// </summary>
        [Input("homeDirectoryType")]
        public Input<string>? HomeDirectoryType { get; set; }

        /// <summary>
        /// An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
        /// </summary>
        [Input("posixProfile")]
        public Input<Inputs.AccessPosixProfileArgs>? PosixProfile { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The Server ID of the Transfer Server (e.g., `s-12345678`)
        /// </summary>
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public AccessArgs()
        {
        }
        public static new AccessArgs Empty => new AccessArgs();
    }

    public sealed class AccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
        /// </summary>
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        /// <summary>
        /// The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
        /// </summary>
        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        [Input("homeDirectoryMappings")]
        private InputList<Inputs.AccessHomeDirectoryMappingGetArgs>? _homeDirectoryMappings;

        /// <summary>
        /// Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See Home Directory Mappings below.
        /// </summary>
        public InputList<Inputs.AccessHomeDirectoryMappingGetArgs> HomeDirectoryMappings
        {
            get => _homeDirectoryMappings ?? (_homeDirectoryMappings = new InputList<Inputs.AccessHomeDirectoryMappingGetArgs>());
            set => _homeDirectoryMappings = value;
        }

        /// <summary>
        /// The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
        /// </summary>
        [Input("homeDirectoryType")]
        public Input<string>? HomeDirectoryType { get; set; }

        /// <summary>
        /// An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. These are evaluated on-the-fly when navigating the bucket.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See Posix Profile below.
        /// </summary>
        [Input("posixProfile")]
        public Input<Inputs.AccessPosixProfileGetArgs>? PosixProfile { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The Server ID of the Transfer Server (e.g., `s-12345678`)
        /// </summary>
        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        public AccessState()
        {
        }
        public static new AccessState Empty => new AccessState();
    }
}
