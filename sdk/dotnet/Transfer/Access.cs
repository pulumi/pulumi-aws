// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    [AwsResourceType("aws:transfer/access:Access")]
    public partial class Access : global::Pulumi.CustomResource
    {
        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        [Output("homeDirectory")]
        public Output<string?> HomeDirectory { get; private set; } = null!;

        [Output("homeDirectoryMappings")]
        public Output<ImmutableArray<Outputs.AccessHomeDirectoryMapping>> HomeDirectoryMappings { get; private set; } = null!;

        [Output("homeDirectoryType")]
        public Output<string?> HomeDirectoryType { get; private set; } = null!;

        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        [Output("posixProfile")]
        public Output<Outputs.AccessPosixProfile?> PosixProfile { get; private set; } = null!;

        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        [Output("serverId")]
        public Output<string> ServerId { get; private set; } = null!;


        /// <summary>
        /// Create a Access resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Access(string name, AccessArgs args, CustomResourceOptions? options = null)
            : base("aws:transfer/access:Access", name, args ?? new AccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Access(string name, Input<string> id, AccessState? state = null, CustomResourceOptions? options = null)
            : base("aws:transfer/access:Access", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Access resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Access Get(string name, Input<string> id, AccessState? state = null, CustomResourceOptions? options = null)
        {
            return new Access(name, id, state, options);
        }
    }

    public sealed class AccessArgs : global::Pulumi.ResourceArgs
    {
        [Input("externalId", required: true)]
        public Input<string> ExternalId { get; set; } = null!;

        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        [Input("homeDirectoryMappings")]
        private InputList<Inputs.AccessHomeDirectoryMappingArgs>? _homeDirectoryMappings;
        public InputList<Inputs.AccessHomeDirectoryMappingArgs> HomeDirectoryMappings
        {
            get => _homeDirectoryMappings ?? (_homeDirectoryMappings = new InputList<Inputs.AccessHomeDirectoryMappingArgs>());
            set => _homeDirectoryMappings = value;
        }

        [Input("homeDirectoryType")]
        public Input<string>? HomeDirectoryType { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        [Input("posixProfile")]
        public Input<Inputs.AccessPosixProfileArgs>? PosixProfile { get; set; }

        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public AccessArgs()
        {
        }
        public static new AccessArgs Empty => new AccessArgs();
    }

    public sealed class AccessState : global::Pulumi.ResourceArgs
    {
        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("homeDirectory")]
        public Input<string>? HomeDirectory { get; set; }

        [Input("homeDirectoryMappings")]
        private InputList<Inputs.AccessHomeDirectoryMappingGetArgs>? _homeDirectoryMappings;
        public InputList<Inputs.AccessHomeDirectoryMappingGetArgs> HomeDirectoryMappings
        {
            get => _homeDirectoryMappings ?? (_homeDirectoryMappings = new InputList<Inputs.AccessHomeDirectoryMappingGetArgs>());
            set => _homeDirectoryMappings = value;
        }

        [Input("homeDirectoryType")]
        public Input<string>? HomeDirectoryType { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        [Input("posixProfile")]
        public Input<Inputs.AccessPosixProfileGetArgs>? PosixProfile { get; set; }

        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("serverId")]
        public Input<string>? ServerId { get; set; }

        public AccessState()
        {
        }
        public static new AccessState Empty => new AccessState();
    }
}
