// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    [AwsResourceType("aws:transfer/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("certificate")]
        public Output<string?> Certificate { get; private set; } = null!;

        [Output("directoryId")]
        public Output<string?> DirectoryId { get; private set; } = null!;

        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        [Output("endpointDetails")]
        public Output<Outputs.ServerEndpointDetails?> EndpointDetails { get; private set; } = null!;

        [Output("endpointType")]
        public Output<string?> EndpointType { get; private set; } = null!;

        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        [Output("function")]
        public Output<string?> Function { get; private set; } = null!;

        [Output("hostKey")]
        public Output<string?> HostKey { get; private set; } = null!;

        [Output("hostKeyFingerprint")]
        public Output<string> HostKeyFingerprint { get; private set; } = null!;

        [Output("identityProviderType")]
        public Output<string?> IdentityProviderType { get; private set; } = null!;

        [Output("invocationRole")]
        public Output<string?> InvocationRole { get; private set; } = null!;

        [Output("loggingRole")]
        public Output<string?> LoggingRole { get; private set; } = null!;

        [Output("postAuthenticationLoginBanner")]
        public Output<string?> PostAuthenticationLoginBanner { get; private set; } = null!;

        [Output("preAuthenticationLoginBanner")]
        public Output<string?> PreAuthenticationLoginBanner { get; private set; } = null!;

        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        [Output("securityPolicyName")]
        public Output<string?> SecurityPolicyName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;

        [Output("workflowDetails")]
        public Output<Outputs.ServerWorkflowDetails?> WorkflowDetails { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:transfer/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("aws:transfer/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "hostKey",
                    "postAuthenticationLoginBanner",
                    "preAuthenticationLoginBanner",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("endpointDetails")]
        public Input<Inputs.ServerEndpointDetailsArgs>? EndpointDetails { get; set; }

        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("function")]
        public Input<string>? Function { get; set; }

        [Input("hostKey")]
        private Input<string>? _hostKey;
        public Input<string>? HostKey
        {
            get => _hostKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _hostKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("identityProviderType")]
        public Input<string>? IdentityProviderType { get; set; }

        [Input("invocationRole")]
        public Input<string>? InvocationRole { get; set; }

        [Input("loggingRole")]
        public Input<string>? LoggingRole { get; set; }

        [Input("postAuthenticationLoginBanner")]
        private Input<string>? _postAuthenticationLoginBanner;
        public Input<string>? PostAuthenticationLoginBanner
        {
            get => _postAuthenticationLoginBanner;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _postAuthenticationLoginBanner = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("preAuthenticationLoginBanner")]
        private Input<string>? _preAuthenticationLoginBanner;
        public Input<string>? PreAuthenticationLoginBanner
        {
            get => _preAuthenticationLoginBanner;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _preAuthenticationLoginBanner = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("protocols")]
        private InputList<string>? _protocols;
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        [Input("securityPolicyName")]
        public Input<string>? SecurityPolicyName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("workflowDetails")]
        public Input<Inputs.ServerWorkflowDetailsArgs>? WorkflowDetails { get; set; }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("endpointDetails")]
        public Input<Inputs.ServerEndpointDetailsGetArgs>? EndpointDetails { get; set; }

        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("function")]
        public Input<string>? Function { get; set; }

        [Input("hostKey")]
        private Input<string>? _hostKey;
        public Input<string>? HostKey
        {
            get => _hostKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _hostKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("hostKeyFingerprint")]
        public Input<string>? HostKeyFingerprint { get; set; }

        [Input("identityProviderType")]
        public Input<string>? IdentityProviderType { get; set; }

        [Input("invocationRole")]
        public Input<string>? InvocationRole { get; set; }

        [Input("loggingRole")]
        public Input<string>? LoggingRole { get; set; }

        [Input("postAuthenticationLoginBanner")]
        private Input<string>? _postAuthenticationLoginBanner;
        public Input<string>? PostAuthenticationLoginBanner
        {
            get => _postAuthenticationLoginBanner;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _postAuthenticationLoginBanner = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("preAuthenticationLoginBanner")]
        private Input<string>? _preAuthenticationLoginBanner;
        public Input<string>? PreAuthenticationLoginBanner
        {
            get => _preAuthenticationLoginBanner;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _preAuthenticationLoginBanner = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("protocols")]
        private InputList<string>? _protocols;
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        [Input("securityPolicyName")]
        public Input<string>? SecurityPolicyName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("workflowDetails")]
        public Input<Inputs.ServerWorkflowDetailsGetArgs>? WorkflowDetails { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
