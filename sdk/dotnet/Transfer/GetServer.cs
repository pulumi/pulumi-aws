// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    public static partial class Invokes
    {
        /// <summary>
        /// Use this data source to get the ARN of an AWS Transfer Server for use in other
        /// resources.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/transfer_server.html.markdown.
        /// </summary>
        [Obsolete("Use GetServer.InvokeAsync() instead")]
        public static Task<GetServerResult> GetServer(GetServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("aws:transfer/getServer:getServer", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetServer
    {
        /// <summary>
        /// Use this data source to get the ARN of an AWS Transfer Server for use in other
        /// resources.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/transfer_server.html.markdown.
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("aws:transfer/getServer:getServer", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetServerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID for an SFTP server.
        /// </summary>
        [Input("serverId", required: true)]
        public string ServerId { get; set; } = null!;

        public GetServerArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of Transfer Server
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The endpoint of the Transfer Server (e.g. `s-12345678.server.transfer.REGION.amazonaws.com`)
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// The mode of authentication enabled for this service. The default value is `SERVICE_MANAGED`, which allows you to store and access SFTP user credentials within the service. `API_GATEWAY` indicates that user authentication requires a call to an API Gateway endpoint URL provided by you to integrate an identity provider of your choice.
        /// </summary>
        public readonly string IdentityProviderType;
        /// <summary>
        /// Amazon Resource Name (ARN) of the IAM role used to authenticate the user account with an `identity_provider_type` of `API_GATEWAY`.
        /// </summary>
        public readonly string InvocationRole;
        /// <summary>
        /// Amazon Resource Name (ARN) of an IAM role that allows the service to write your SFTP usersâ€™ activity to your Amazon CloudWatch logs for monitoring and auditing purposes.
        /// </summary>
        public readonly string LoggingRole;
        public readonly string ServerId;
        /// <summary>
        /// URL of the service endpoint used to authenticate users with an `identity_provider_type` of `API_GATEWAY`.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetServerResult(
            string arn,
            string endpoint,
            string identityProviderType,
            string invocationRole,
            string loggingRole,
            string serverId,
            string url,
            string id)
        {
            Arn = arn;
            Endpoint = endpoint;
            IdentityProviderType = identityProviderType;
            InvocationRole = invocationRole;
            LoggingRole = loggingRole;
            ServerId = serverId;
            Url = url;
            Id = id;
        }
    }
}
