// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Transfer
{
    public static class GetServer
    {
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("aws:transfer/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("aws:transfer/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        [Input("serverId", required: true)]
        public string ServerId { get; set; } = null!;

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("serverId", required: true)]
        public Input<string> ServerId { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        public readonly string Arn;
        public readonly string Certificate;
        public readonly string Domain;
        public readonly string Endpoint;
        public readonly string EndpointType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdentityProviderType;
        public readonly string InvocationRole;
        public readonly string LoggingRole;
        public readonly ImmutableArray<string> Protocols;
        public readonly string SecurityPolicyName;
        public readonly string ServerId;
        public readonly string Url;

        [OutputConstructor]
        private GetServerResult(
            string arn,

            string certificate,

            string domain,

            string endpoint,

            string endpointType,

            string id,

            string identityProviderType,

            string invocationRole,

            string loggingRole,

            ImmutableArray<string> protocols,

            string securityPolicyName,

            string serverId,

            string url)
        {
            Arn = arn;
            Certificate = certificate;
            Domain = domain;
            Endpoint = endpoint;
            EndpointType = endpointType;
            Id = id;
            IdentityProviderType = identityProviderType;
            InvocationRole = invocationRole;
            LoggingRole = loggingRole;
            Protocols = protocols;
            SecurityPolicyName = securityPolicyName;
            ServerId = serverId;
            Url = url;
        }
    }
}
