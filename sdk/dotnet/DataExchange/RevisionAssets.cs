// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DataExchange
{
    /// <summary>
    /// Resource for managing AWS Data Exchange Revision Assets.
    /// 
    /// &gt; Note: This resource creates a new revision and adds associated assets. Destroying this resource will delete the revision and all associated assets.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.DataExchange.RevisionAssets("example", new()
    ///     {
    ///         DataSetId = "example-data-set-id",
    ///         Assets = new[]
    ///         {
    ///             new Aws.DataExchange.Inputs.RevisionAssetsAssetArgs
    ///             {
    ///                 CreateS3DataAccessFromS3Bucket = new Aws.DataExchange.Inputs.RevisionAssetsAssetCreateS3DataAccessFromS3BucketArgs
    ///                 {
    ///                     AssetSource = new Aws.DataExchange.Inputs.RevisionAssetsAssetCreateS3DataAccessFromS3BucketAssetSourceArgs
    ///                     {
    ///                         Bucket = "example-bucket",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "Production" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:dataexchange/revisionAssets:RevisionAssets")]
    public partial class RevisionAssets : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the Data Exchange Revision Assets.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A block to define the asset associated with the revision. See Asset for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("assets")]
        public Output<ImmutableArray<Outputs.RevisionAssetsAsset>> Assets { get; private set; } = null!;

        /// <summary>
        /// A comment for the revision. Maximum length is 16,348 characters.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the revision was created, in RFC3339 format.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the data set associated with the revision.
        /// </summary>
        [Output("dataSetId")]
        public Output<string> DataSetId { get; private set; } = null!;

        [Output("finalized")]
        public Output<bool> Finalized { get; private set; } = null!;

        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.RevisionAssetsTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The timestamp when the revision was last updated, in RFC3339 format.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a RevisionAssets resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RevisionAssets(string name, RevisionAssetsArgs args, CustomResourceOptions? options = null)
            : base("aws:dataexchange/revisionAssets:RevisionAssets", name, args ?? new RevisionAssetsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RevisionAssets(string name, Input<string> id, RevisionAssetsState? state = null, CustomResourceOptions? options = null)
            : base("aws:dataexchange/revisionAssets:RevisionAssets", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RevisionAssets resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RevisionAssets Get(string name, Input<string> id, RevisionAssetsState? state = null, CustomResourceOptions? options = null)
        {
            return new RevisionAssets(name, id, state, options);
        }
    }

    public sealed class RevisionAssetsArgs : global::Pulumi.ResourceArgs
    {
        [Input("assets")]
        private InputList<Inputs.RevisionAssetsAssetArgs>? _assets;

        /// <summary>
        /// A block to define the asset associated with the revision. See Asset for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.RevisionAssetsAssetArgs> Assets
        {
            get => _assets ?? (_assets = new InputList<Inputs.RevisionAssetsAssetArgs>());
            set => _assets = value;
        }

        /// <summary>
        /// A comment for the revision. Maximum length is 16,348 characters.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// Unique identifier for the data set associated with the revision.
        /// </summary>
        [Input("dataSetId", required: true)]
        public Input<string> DataSetId { get; set; } = null!;

        [Input("finalized")]
        public Input<bool>? Finalized { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RevisionAssetsTimeoutsArgs>? Timeouts { get; set; }

        public RevisionAssetsArgs()
        {
        }
        public static new RevisionAssetsArgs Empty => new RevisionAssetsArgs();
    }

    public sealed class RevisionAssetsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the Data Exchange Revision Assets.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("assets")]
        private InputList<Inputs.RevisionAssetsAssetGetArgs>? _assets;

        /// <summary>
        /// A block to define the asset associated with the revision. See Asset for more details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.RevisionAssetsAssetGetArgs> Assets
        {
            get => _assets ?? (_assets = new InputList<Inputs.RevisionAssetsAssetGetArgs>());
            set => _assets = value;
        }

        /// <summary>
        /// A comment for the revision. Maximum length is 16,348 characters.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The timestamp when the revision was created, in RFC3339 format.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Unique identifier for the data set associated with the revision.
        /// </summary>
        [Input("dataSetId")]
        public Input<string>? DataSetId { get; set; }

        [Input("finalized")]
        public Input<bool>? Finalized { get; set; }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RevisionAssetsTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The timestamp when the revision was last updated, in RFC3339 format.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public RevisionAssetsState()
        {
        }
        public static new RevisionAssetsState Empty => new RevisionAssetsState();
    }
}
