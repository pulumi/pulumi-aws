// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ImageBuilder
{
    public static class GetInfrastructureConfiguration
    {
        public static Task<GetInfrastructureConfigurationResult> InvokeAsync(GetInfrastructureConfigurationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInfrastructureConfigurationResult>("aws:imagebuilder/getInfrastructureConfiguration:getInfrastructureConfiguration", args ?? new GetInfrastructureConfigurationArgs(), options.WithDefaults());

        public static Output<GetInfrastructureConfigurationResult> Invoke(GetInfrastructureConfigurationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInfrastructureConfigurationResult>("aws:imagebuilder/getInfrastructureConfiguration:getInfrastructureConfiguration", args ?? new GetInfrastructureConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInfrastructureConfigurationArgs : global::Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        [Input("resourceTags")]
        private Dictionary<string, string>? _resourceTags;
        public Dictionary<string, string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new Dictionary<string, string>());
            set => _resourceTags = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetInfrastructureConfigurationArgs()
        {
        }
        public static new GetInfrastructureConfigurationArgs Empty => new GetInfrastructureConfigurationArgs();
    }

    public sealed class GetInfrastructureConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetInfrastructureConfigurationInvokeArgs()
        {
        }
        public static new GetInfrastructureConfigurationInvokeArgs Empty => new GetInfrastructureConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetInfrastructureConfigurationResult
    {
        public readonly string Arn;
        public readonly string DateCreated;
        public readonly string DateUpdated;
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetInfrastructureConfigurationInstanceMetadataOptionResult> InstanceMetadataOptions;
        public readonly string InstanceProfileName;
        public readonly ImmutableArray<string> InstanceTypes;
        public readonly string KeyPair;
        public readonly ImmutableArray<Outputs.GetInfrastructureConfigurationLoggingResult> Loggings;
        public readonly string Name;
        public readonly ImmutableDictionary<string, string> ResourceTags;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly string SnsTopicArn;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly bool TerminateInstanceOnFailure;

        [OutputConstructor]
        private GetInfrastructureConfigurationResult(
            string arn,

            string dateCreated,

            string dateUpdated,

            string description,

            string id,

            ImmutableArray<Outputs.GetInfrastructureConfigurationInstanceMetadataOptionResult> instanceMetadataOptions,

            string instanceProfileName,

            ImmutableArray<string> instanceTypes,

            string keyPair,

            ImmutableArray<Outputs.GetInfrastructureConfigurationLoggingResult> loggings,

            string name,

            ImmutableDictionary<string, string> resourceTags,

            ImmutableArray<string> securityGroupIds,

            string snsTopicArn,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            bool terminateInstanceOnFailure)
        {
            Arn = arn;
            DateCreated = dateCreated;
            DateUpdated = dateUpdated;
            Description = description;
            Id = id;
            InstanceMetadataOptions = instanceMetadataOptions;
            InstanceProfileName = instanceProfileName;
            InstanceTypes = instanceTypes;
            KeyPair = keyPair;
            Loggings = loggings;
            Name = name;
            ResourceTags = resourceTags;
            SecurityGroupIds = securityGroupIds;
            SnsTopicArn = snsTopicArn;
            SubnetId = subnetId;
            Tags = tags;
            TerminateInstanceOnFailure = terminateInstanceOnFailure;
        }
    }
}
