// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ImageBuilder
{
    /// <summary>
    /// Manages an Image Builder Lifecycle Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetRegion.Invoke();
    /// 
    ///     var currentGetPartition = Aws.GetPartition.Invoke();
    /// 
    ///     var example = new Aws.Iam.Role("example", new()
    ///     {
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "sts:AssumeRole",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = $"imagebuilder.{currentGetPartition.Apply(getPartitionResult =&gt; getPartitionResult.DnsSuffix)}",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("example", new()
    ///     {
    ///         PolicyArn = $"arn:{currentGetPartition.Apply(getPartitionResult =&gt; getPartitionResult.Partition)}:iam::aws:policy/service-role/EC2ImageBuilderLifecycleExecutionPolicy",
    ///         Role = example.Name,
    ///     });
    /// 
    ///     var exampleLifecyclePolicy = new Aws.ImageBuilder.LifecyclePolicy("example", new()
    ///     {
    ///         Name = "name",
    ///         Description = "Example description",
    ///         ExecutionRole = example.Arn,
    ///         ResourceType = "AMI_IMAGE",
    ///         PolicyDetails = new[]
    ///         {
    ///             new Aws.ImageBuilder.Inputs.LifecyclePolicyPolicyDetailArgs
    ///             {
    ///                 Action = new Aws.ImageBuilder.Inputs.LifecyclePolicyPolicyDetailActionArgs
    ///                 {
    ///                     Type = "DELETE",
    ///                 },
    ///                 Filter = new Aws.ImageBuilder.Inputs.LifecyclePolicyPolicyDetailFilterArgs
    ///                 {
    ///                     Type = "AGE",
    ///                     Value = 6,
    ///                     RetainAtLeast = 10,
    ///                     Unit = "YEARS",
    ///                 },
    ///             },
    ///         },
    ///         ResourceSelection = new Aws.ImageBuilder.Inputs.LifecyclePolicyResourceSelectionArgs
    ///         {
    ///             TagMap = 
    ///             {
    ///                 { "key1", "value1" },
    ///                 { "key2", "value2" },
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleRolePolicyAttachment,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `aws_imagebuilder_lifecycle_policy` using the Amazon Resource Name (ARN). For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:imagebuilder/lifecyclePolicy:LifecyclePolicy example arn:aws:imagebuilder:us-east-1:123456789012:lifecycle-policy/example
    /// ```
    /// </summary>
    [AwsResourceType("aws:imagebuilder/lifecyclePolicy:LifecyclePolicy")]
    public partial class LifecyclePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the lifecycle policy.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// description for the lifecycle policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
        /// </summary>
        [Output("executionRole")]
        public Output<string> ExecutionRole { get; private set; } = null!;

        /// <summary>
        /// The name of the lifecycle policy to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration block with policy details. Detailed below.
        /// </summary>
        [Output("policyDetails")]
        public Output<ImmutableArray<Outputs.LifecyclePolicyPolicyDetail>> PolicyDetails { get; private set; } = null!;

        /// <summary>
        /// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("resourceSelection")]
        public Output<Outputs.LifecyclePolicyResourceSelection?> ResourceSelection { get; private set; } = null!;

        /// <summary>
        /// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// The status of the lifecycle policy.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a LifecyclePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LifecyclePolicy(string name, LifecyclePolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:imagebuilder/lifecyclePolicy:LifecyclePolicy", name, args ?? new LifecyclePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LifecyclePolicy(string name, Input<string> id, LifecyclePolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:imagebuilder/lifecyclePolicy:LifecyclePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LifecyclePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LifecyclePolicy Get(string name, Input<string> id, LifecyclePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new LifecyclePolicy(name, id, state, options);
        }
    }

    public sealed class LifecyclePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// description for the lifecycle policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
        /// </summary>
        [Input("executionRole", required: true)]
        public Input<string> ExecutionRole { get; set; } = null!;

        /// <summary>
        /// The name of the lifecycle policy to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyDetails")]
        private InputList<Inputs.LifecyclePolicyPolicyDetailArgs>? _policyDetails;

        /// <summary>
        /// Configuration block with policy details. Detailed below.
        /// </summary>
        public InputList<Inputs.LifecyclePolicyPolicyDetailArgs> PolicyDetails
        {
            get => _policyDetails ?? (_policyDetails = new InputList<Inputs.LifecyclePolicyPolicyDetailArgs>());
            set => _policyDetails = value;
        }

        /// <summary>
        /// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("resourceSelection")]
        public Input<Inputs.LifecyclePolicyResourceSelectionArgs>? ResourceSelection { get; set; }

        /// <summary>
        /// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        /// <summary>
        /// The status of the lifecycle policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LifecyclePolicyArgs()
        {
        }
        public static new LifecyclePolicyArgs Empty => new LifecyclePolicyArgs();
    }

    public sealed class LifecyclePolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the lifecycle policy.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// description for the lifecycle policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the IAM role you create that grants Image Builder access to run lifecycle actions. More information about this role can be found [`here`](https://docs.aws.amazon.com/imagebuilder/latest/userguide/image-lifecycle-prerequisites.html#image-lifecycle-prereq-role).
        /// </summary>
        [Input("executionRole")]
        public Input<string>? ExecutionRole { get; set; }

        /// <summary>
        /// The name of the lifecycle policy to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyDetails")]
        private InputList<Inputs.LifecyclePolicyPolicyDetailGetArgs>? _policyDetails;

        /// <summary>
        /// Configuration block with policy details. Detailed below.
        /// </summary>
        public InputList<Inputs.LifecyclePolicyPolicyDetailGetArgs> PolicyDetails
        {
            get => _policyDetails ?? (_policyDetails = new InputList<Inputs.LifecyclePolicyPolicyDetailGetArgs>());
            set => _policyDetails = value;
        }

        /// <summary>
        /// Selection criteria for the resources that the lifecycle policy applies to. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("resourceSelection")]
        public Input<Inputs.LifecyclePolicyResourceSelectionGetArgs>? ResourceSelection { get; set; }

        /// <summary>
        /// The type of Image Builder resource that the lifecycle policy applies to. Valid values: `AMI_IMAGE` or `CONTAINER_IMAGE`.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The status of the lifecycle policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags for the Image Builder Lifecycle Policy. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public LifecyclePolicyState()
        {
        }
        public static new LifecyclePolicyState Empty => new LifecyclePolicyState();
    }
}
