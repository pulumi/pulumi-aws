// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ImageBuilder
{
    public static class GetImageRecipe
    {
        /// <summary>
        /// Provides details about an Image Builder Image Recipe.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.imagebuilder.getImageRecipe({
        ///     arn: "arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.imagebuilder.get_image_recipe(arn="arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ImageBuilder.GetImageRecipe.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/imagebuilder"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := imagebuilder.LookupImageRecipe(ctx, &amp;imagebuilder.LookupImageRecipeArgs{
        /// 			Arn: "arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.imagebuilder.ImagebuilderFunctions;
        /// import com.pulumi.aws.imagebuilder.inputs.GetImageRecipeArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = ImagebuilderFunctions.getImageRecipe(GetImageRecipeArgs.builder()
        ///             .arn("arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:imagebuilder:getImageRecipe
        ///       Arguments:
        ///         arn: arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetImageRecipeResult> InvokeAsync(GetImageRecipeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageRecipeResult>("aws:imagebuilder/getImageRecipe:getImageRecipe", args ?? new GetImageRecipeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an Image Builder Image Recipe.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.imagebuilder.getImageRecipe({
        ///     arn: "arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.imagebuilder.get_image_recipe(arn="arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ImageBuilder.GetImageRecipe.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/imagebuilder"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := imagebuilder.LookupImageRecipe(ctx, &amp;imagebuilder.LookupImageRecipeArgs{
        /// 			Arn: "arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.imagebuilder.ImagebuilderFunctions;
        /// import com.pulumi.aws.imagebuilder.inputs.GetImageRecipeArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = ImagebuilderFunctions.getImageRecipe(GetImageRecipeArgs.builder()
        ///             .arn("arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:imagebuilder:getImageRecipe
        ///       Arguments:
        ///         arn: arn:aws:imagebuilder:us-east-1:aws:image-recipe/example/1.0.0
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetImageRecipeResult> Invoke(GetImageRecipeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageRecipeResult>("aws:imagebuilder/getImageRecipe:getImageRecipe", args ?? new GetImageRecipeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageRecipeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the image recipe.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value map of resource tags for the image recipe.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetImageRecipeArgs()
        {
        }
        public static new GetImageRecipeArgs Empty => new GetImageRecipeArgs();
    }

    public sealed class GetImageRecipeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the image recipe.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags for the image recipe.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetImageRecipeInvokeArgs()
        {
        }
        public static new GetImageRecipeInvokeArgs Empty => new GetImageRecipeInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageRecipeResult
    {
        public readonly string Arn;
        /// <summary>
        /// Set of objects with block device mappings for the image recipe.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageRecipeBlockDeviceMappingResult> BlockDeviceMappings;
        /// <summary>
        /// List of objects with components for the image recipe.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImageRecipeComponentResult> Components;
        /// <summary>
        /// Date the image recipe was created.
        /// </summary>
        public readonly string DateCreated;
        /// <summary>
        /// Description of the image recipe.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the image recipe.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Owner of the image recipe.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Base image of the image recipe.
        /// </summary>
        public readonly string ParentImage;
        /// <summary>
        /// Platform of the image recipe.
        /// </summary>
        public readonly string Platform;
        /// <summary>
        /// Key-value map of resource tags for the image recipe.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// Base64 encoded contents of user data. Commands or a command script to run when build instance is launched.
        /// </summary>
        public readonly string UserDataBase64;
        /// <summary>
        /// Version of the image recipe.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// Working directory used during build and test workflows.
        /// </summary>
        public readonly string WorkingDirectory;

        [OutputConstructor]
        private GetImageRecipeResult(
            string arn,

            ImmutableArray<Outputs.GetImageRecipeBlockDeviceMappingResult> blockDeviceMappings,

            ImmutableArray<Outputs.GetImageRecipeComponentResult> components,

            string dateCreated,

            string description,

            string id,

            string name,

            string owner,

            string parentImage,

            string platform,

            ImmutableDictionary<string, string>? tags,

            string userDataBase64,

            string version,

            string workingDirectory)
        {
            Arn = arn;
            BlockDeviceMappings = blockDeviceMappings;
            Components = components;
            DateCreated = dateCreated;
            Description = description;
            Id = id;
            Name = name;
            Owner = owner;
            ParentImage = parentImage;
            Platform = platform;
            Tags = tags;
            UserDataBase64 = userDataBase64;
            Version = version;
            WorkingDirectory = workingDirectory;
        }
    }
}
