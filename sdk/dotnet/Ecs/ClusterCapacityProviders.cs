// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    /// <summary>
    /// Manages the capacity providers of an ECS Cluster.
    /// 
    /// More information about capacity providers can be found in the [ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html).
    /// 
    /// &gt; **NOTE on Clusters and Cluster Capacity Providers:** The provider provides both a standalone `aws.ecs.ClusterCapacityProviders` resource, as well as allowing the capacity providers and default strategies to be managed in-line by the `aws.ecs.Cluster` resource. You cannot use a Cluster with in-line capacity providers in conjunction with the Capacity Providers resource, nor use more than one Capacity Providers resource with a single Cluster, as doing so will cause a conflict and will lead to mutual overwrites.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCluster = new Aws.Ecs.Cluster("exampleCluster");
    /// 
    ///     var exampleClusterCapacityProviders = new Aws.Ecs.ClusterCapacityProviders("exampleClusterCapacityProviders", new()
    ///     {
    ///         ClusterName = exampleCluster.Name,
    ///         CapacityProviders = new[]
    ///         {
    ///             "FARGATE",
    ///         },
    ///         DefaultCapacityProviderStrategies = new[]
    ///         {
    ///             new Aws.Ecs.Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs
    ///             {
    ///                 Base = 1,
    ///                 Weight = 100,
    ///                 CapacityProvider = "FARGATE",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECS cluster capacity providers can be imported using the `cluster_name` attribute. For example
    /// 
    /// ```sh
    ///  $ pulumi import aws:ecs/clusterCapacityProviders:ClusterCapacityProviders example my-cluster
    /// ```
    /// </summary>
    [AwsResourceType("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders")]
    public partial class ClusterCapacityProviders : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
        /// </summary>
        [Output("capacityProviders")]
        public Output<ImmutableArray<string>> CapacityProviders { get; private set; } = null!;

        /// <summary>
        /// Name of the ECS cluster to manage capacity providers for.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Set of capacity provider strategies to use by default for the cluster. Detailed below.
        /// </summary>
        [Output("defaultCapacityProviderStrategies")]
        public Output<ImmutableArray<Outputs.ClusterCapacityProvidersDefaultCapacityProviderStrategy>> DefaultCapacityProviderStrategies { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterCapacityProviders resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterCapacityProviders(string name, ClusterCapacityProvidersArgs args, CustomResourceOptions? options = null)
            : base("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders", name, args ?? new ClusterCapacityProvidersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterCapacityProviders(string name, Input<string> id, ClusterCapacityProvidersState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecs/clusterCapacityProviders:ClusterCapacityProviders", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterCapacityProviders resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterCapacityProviders Get(string name, Input<string> id, ClusterCapacityProvidersState? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterCapacityProviders(name, id, state, options);
        }
    }

    public sealed class ClusterCapacityProvidersArgs : global::Pulumi.ResourceArgs
    {
        [Input("capacityProviders")]
        private InputList<string>? _capacityProviders;

        /// <summary>
        /// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
        /// </summary>
        public InputList<string> CapacityProviders
        {
            get => _capacityProviders ?? (_capacityProviders = new InputList<string>());
            set => _capacityProviders = value;
        }

        /// <summary>
        /// Name of the ECS cluster to manage capacity providers for.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("defaultCapacityProviderStrategies")]
        private InputList<Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs>? _defaultCapacityProviderStrategies;

        /// <summary>
        /// Set of capacity provider strategies to use by default for the cluster. Detailed below.
        /// </summary>
        public InputList<Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs> DefaultCapacityProviderStrategies
        {
            get => _defaultCapacityProviderStrategies ?? (_defaultCapacityProviderStrategies = new InputList<Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyArgs>());
            set => _defaultCapacityProviderStrategies = value;
        }

        public ClusterCapacityProvidersArgs()
        {
        }
        public static new ClusterCapacityProvidersArgs Empty => new ClusterCapacityProvidersArgs();
    }

    public sealed class ClusterCapacityProvidersState : global::Pulumi.ResourceArgs
    {
        [Input("capacityProviders")]
        private InputList<string>? _capacityProviders;

        /// <summary>
        /// Set of names of one or more capacity providers to associate with the cluster. Valid values also include `FARGATE` and `FARGATE_SPOT`.
        /// </summary>
        public InputList<string> CapacityProviders
        {
            get => _capacityProviders ?? (_capacityProviders = new InputList<string>());
            set => _capacityProviders = value;
        }

        /// <summary>
        /// Name of the ECS cluster to manage capacity providers for.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("defaultCapacityProviderStrategies")]
        private InputList<Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyGetArgs>? _defaultCapacityProviderStrategies;

        /// <summary>
        /// Set of capacity provider strategies to use by default for the cluster. Detailed below.
        /// </summary>
        public InputList<Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyGetArgs> DefaultCapacityProviderStrategies
        {
            get => _defaultCapacityProviderStrategies ?? (_defaultCapacityProviderStrategies = new InputList<Inputs.ClusterCapacityProvidersDefaultCapacityProviderStrategyGetArgs>());
            set => _defaultCapacityProviderStrategies = value;
        }

        public ClusterCapacityProvidersState()
        {
        }
        public static new ClusterCapacityProvidersState Empty => new ClusterCapacityProvidersState();
    }
}
