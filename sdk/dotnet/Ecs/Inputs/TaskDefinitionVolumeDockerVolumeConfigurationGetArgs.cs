// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs.Inputs
{

    public sealed class TaskDefinitionVolumeDockerVolumeConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
        /// </summary>
        [Input("autoprovision")]
        public Input<bool>? Autoprovision { get; set; }

        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverOpts")]
        private InputMap<string>? _driverOpts;

        /// <summary>
        /// A map of Docker driver specific options.
        /// </summary>
        public InputMap<string> DriverOpts
        {
            get => _driverOpts ?? (_driverOpts = new InputMap<string>());
            set => _driverOpts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of custom metadata to add to your Docker volume.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public TaskDefinitionVolumeDockerVolumeConfigurationGetArgs()
        {
        }
    }
}
