// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs.Inputs
{

    public sealed class GetTaskExecutionOverridesContainerOverrideInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// The command to send to the container that overrides the default command from the Docker image or the task definition.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// The number of cpu units reserved for the container, instead of the default value from the task definition.
        /// </summary>
        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        [Input("environments")]
        private InputList<Inputs.GetTaskExecutionOverridesContainerOverrideEnvironmentInputArgs>? _environments;

        /// <summary>
        /// The environment variables to send to the container. You can add new environment variables, which are added to the container at launch, or you can override the existing environment variables from the Docker image or the task definition. See below.
        /// </summary>
        public InputList<Inputs.GetTaskExecutionOverridesContainerOverrideEnvironmentInputArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.GetTaskExecutionOverridesContainerOverrideEnvironmentInputArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// The hard limit (in MiB) of memory to present to the container, instead of the default value from the task definition. If your container attempts to exceed the memory specified here, the container is killed.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// The soft limit (in MiB) of memory to reserve for the container, instead of the default value from the task definition.
        /// </summary>
        [Input("memoryReservation")]
        public Input<int>? MemoryReservation { get; set; }

        /// <summary>
        /// The name of the container that receives the override. This parameter is required if any override is specified.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("resourceRequirements")]
        private InputList<Inputs.GetTaskExecutionOverridesContainerOverrideResourceRequirementInputArgs>? _resourceRequirements;

        /// <summary>
        /// The type and amount of a resource to assign to a container, instead of the default value from the task definition. The only supported resource is a GPU. See below.
        /// </summary>
        public InputList<Inputs.GetTaskExecutionOverridesContainerOverrideResourceRequirementInputArgs> ResourceRequirements
        {
            get => _resourceRequirements ?? (_resourceRequirements = new InputList<Inputs.GetTaskExecutionOverridesContainerOverrideResourceRequirementInputArgs>());
            set => _resourceRequirements = value;
        }

        public GetTaskExecutionOverridesContainerOverrideInputArgs()
        {
        }
        public static new GetTaskExecutionOverridesContainerOverrideInputArgs Empty => new GetTaskExecutionOverridesContainerOverrideInputArgs();
    }
}
