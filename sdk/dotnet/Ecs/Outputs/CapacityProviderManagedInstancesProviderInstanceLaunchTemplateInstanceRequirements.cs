// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs.Outputs
{

    [OutputType]
    public sealed class CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements
    {
        /// <summary>
        /// The minimum and maximum number of accelerators for the instance types. This is used when you need instances with specific numbers of GPUs or other accelerators.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsAcceleratorCount? AcceleratorCount;
        /// <summary>
        /// The accelerator manufacturers to include. You can specify `Nvidia`, `Amd`, `amazon-web-services`, `Xilinx`, or `Habana` depending on your accelerator requirements. Valid values are `amazon-web-services`, `Amd`, `Nvidia`, `Xilinx`, `Habana`.
        /// </summary>
        public readonly ImmutableArray<string> AcceleratorManufacturers;
        /// <summary>
        /// The specific accelerator names to include. For example, you can specify `A100`, `V100`, `K80`, or other specific accelerator models. Valid values are `A100`, `Inferentia`, `K520`, `K80`, `M60`, `radeon-pro-v520`, `T4`, `Vu9p`, `V100`, `A10g`, `H100`, `T4g`.
        /// </summary>
        public readonly ImmutableArray<string> AcceleratorNames;
        /// <summary>
        /// The minimum and maximum total accelerator memory in mebibytes (MiB). This is important for GPU workloads that require specific amounts of video memory.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMib? AcceleratorTotalMemoryMib;
        /// <summary>
        /// The accelerator types to include. You can specify `Gpu` for graphics processing units, `Fpga` for field programmable gate arrays, or `Inference` for machine learning inference accelerators. Valid values are `Gpu`, `Fpga`, `Inference`.
        /// </summary>
        public readonly ImmutableArray<string> AcceleratorTypes;
        /// <summary>
        /// The instance types to include in the selection. When specified, Amazon ECS only considers these instance types, subject to the other requirements specified. Maximum of 400 instance types. You can specify instance type patterns using wildcards (e.g., `m5.*`).
        /// </summary>
        public readonly ImmutableArray<string> AllowedInstanceTypes;
        /// <summary>
        /// Indicates whether to include bare metal instance types. Set to `Included` to allow bare metal instances, `Excluded` to exclude them, or `Required` to use only bare metal instances. Valid values are `Included`, `Excluded`, `Required`.
        /// </summary>
        public readonly string? BareMetal;
        /// <summary>
        /// The minimum and maximum baseline Amazon EBS bandwidth in megabits per second (Mbps). This is important for workloads with high storage I/O requirements.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbps? BaselineEbsBandwidthMbps;
        /// <summary>
        /// Indicates whether to include burstable performance instance types (T2, T3, T3a, T4g). Set to `Included` to allow burstable instances, `Excluded` to exclude them, or `Required` to use only burstable instances. Valid values are `Included`, `Excluded`, `Required`.
        /// </summary>
        public readonly string? BurstablePerformance;
        /// <summary>
        /// The CPU manufacturers to include or exclude. You can specify `Intel`, `Amd`, or `amazon-web-services` to control which CPU types are used for your workloads. Valid values are `Intel`, `Amd`, `amazon-web-services`.
        /// </summary>
        public readonly ImmutableArray<string> CpuManufacturers;
        /// <summary>
        /// The instance types to exclude from selection. Use this to prevent Amazon ECS from selecting specific instance types that may not be suitable for your workloads. Maximum of 400 instance types.
        /// </summary>
        public readonly ImmutableArray<string> ExcludedInstanceTypes;
        /// <summary>
        /// The instance generations to include. You can specify `Current` to use the latest generation instances, or `Previous` to include previous generation instances for cost optimization. Valid values are `Current`, `Previous`.
        /// </summary>
        public readonly ImmutableArray<string> InstanceGenerations;
        /// <summary>
        /// Indicates whether to include instance types with local storage. Set to `Included` to allow local storage, `Excluded` to exclude it, or `Required` to use only instances with local storage. Valid values are `Included`, `Excluded`, `Required`.
        /// </summary>
        public readonly string? LocalStorage;
        /// <summary>
        /// The local storage types to include. You can specify `Hdd` for hard disk drives, `Ssd` for solid state drives, or both. Valid values are `Hdd`, `Ssd`.
        /// </summary>
        public readonly ImmutableArray<string> LocalStorageTypes;
        /// <summary>
        /// The maximum price for Spot instances as a percentage of the optimal On-Demand price. This provides more precise cost control for Spot instance selection.
        /// </summary>
        public readonly int? MaxSpotPriceAsPercentageOfOptimalOnDemandPrice;
        /// <summary>
        /// The minimum and maximum amount of memory per vCPU in gibibytes (GiB). This helps ensure that instance types have the appropriate memory-to-CPU ratio for your workloads.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsMemoryGibPerVcpu? MemoryGibPerVcpu;
        /// <summary>
        /// The minimum and maximum amount of memory in mebibytes (MiB) for the instance types. Amazon ECS selects instance types that have memory within this range.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsMemoryMib MemoryMib;
        /// <summary>
        /// The minimum and maximum network bandwidth in gigabits per second (Gbps). This is crucial for network-intensive workloads that require high throughput.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsNetworkBandwidthGbps? NetworkBandwidthGbps;
        /// <summary>
        /// The minimum and maximum number of network interfaces for the instance types. This is useful for workloads that require multiple network interfaces.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsNetworkInterfaceCount? NetworkInterfaceCount;
        /// <summary>
        /// The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon ECS selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
        /// </summary>
        public readonly int? OnDemandMaxPricePercentageOverLowestPrice;
        /// <summary>
        /// Indicates whether the instance types must support hibernation. When set to `True`, only instance types that support hibernation are selected.
        /// </summary>
        public readonly bool? RequireHibernateSupport;
        /// <summary>
        /// The maximum price for Spot instances as a percentage over the lowest priced On-Demand instance. This helps control Spot instance costs while maintaining access to capacity.
        /// </summary>
        public readonly int? SpotMaxPricePercentageOverLowestPrice;
        /// <summary>
        /// The minimum and maximum total local storage in gigabytes (GB) for instance types with local storage.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsTotalLocalStorageGb? TotalLocalStorageGb;
        /// <summary>
        /// The minimum and maximum number of vCPUs for the instance types. Amazon ECS selects instance types that have vCPU counts within this range.
        /// </summary>
        public readonly Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsVcpuCount VcpuCount;

        [OutputConstructor]
        private CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirements(
            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsAcceleratorCount? acceleratorCount,

            ImmutableArray<string> acceleratorManufacturers,

            ImmutableArray<string> acceleratorNames,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsAcceleratorTotalMemoryMib? acceleratorTotalMemoryMib,

            ImmutableArray<string> acceleratorTypes,

            ImmutableArray<string> allowedInstanceTypes,

            string? bareMetal,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsBaselineEbsBandwidthMbps? baselineEbsBandwidthMbps,

            string? burstablePerformance,

            ImmutableArray<string> cpuManufacturers,

            ImmutableArray<string> excludedInstanceTypes,

            ImmutableArray<string> instanceGenerations,

            string? localStorage,

            ImmutableArray<string> localStorageTypes,

            int? maxSpotPriceAsPercentageOfOptimalOnDemandPrice,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsMemoryGibPerVcpu? memoryGibPerVcpu,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsMemoryMib memoryMib,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsNetworkBandwidthGbps? networkBandwidthGbps,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsNetworkInterfaceCount? networkInterfaceCount,

            int? onDemandMaxPricePercentageOverLowestPrice,

            bool? requireHibernateSupport,

            int? spotMaxPricePercentageOverLowestPrice,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsTotalLocalStorageGb? totalLocalStorageGb,

            Outputs.CapacityProviderManagedInstancesProviderInstanceLaunchTemplateInstanceRequirementsVcpuCount vcpuCount)
        {
            AcceleratorCount = acceleratorCount;
            AcceleratorManufacturers = acceleratorManufacturers;
            AcceleratorNames = acceleratorNames;
            AcceleratorTotalMemoryMib = acceleratorTotalMemoryMib;
            AcceleratorTypes = acceleratorTypes;
            AllowedInstanceTypes = allowedInstanceTypes;
            BareMetal = bareMetal;
            BaselineEbsBandwidthMbps = baselineEbsBandwidthMbps;
            BurstablePerformance = burstablePerformance;
            CpuManufacturers = cpuManufacturers;
            ExcludedInstanceTypes = excludedInstanceTypes;
            InstanceGenerations = instanceGenerations;
            LocalStorage = localStorage;
            LocalStorageTypes = localStorageTypes;
            MaxSpotPriceAsPercentageOfOptimalOnDemandPrice = maxSpotPriceAsPercentageOfOptimalOnDemandPrice;
            MemoryGibPerVcpu = memoryGibPerVcpu;
            MemoryMib = memoryMib;
            NetworkBandwidthGbps = networkBandwidthGbps;
            NetworkInterfaceCount = networkInterfaceCount;
            OnDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPrice;
            RequireHibernateSupport = requireHibernateSupport;
            SpotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPrice;
            TotalLocalStorageGb = totalLocalStorageGb;
            VcpuCount = vcpuCount;
        }
    }
}
