// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs.Outputs
{

    [OutputType]
    public sealed class TaskDefinitionVolumeDockerVolumeConfiguration
    {
        /// <summary>
        /// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
        /// </summary>
        public readonly bool? Autoprovision;
        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
        /// </summary>
        public readonly string? Driver;
        /// <summary>
        /// A map of Docker driver specific options.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DriverOpts;
        /// <summary>
        /// A map of custom metadata to add to your Docker volume.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
        /// </summary>
        public readonly string? Scope;

        [OutputConstructor]
        private TaskDefinitionVolumeDockerVolumeConfiguration(
            bool? autoprovision,

            string? driver,

            ImmutableDictionary<string, string>? driverOpts,

            ImmutableDictionary<string, string>? labels,

            string? scope)
        {
            Autoprovision = autoprovision;
            Driver = driver;
            DriverOpts = driverOpts;
            Labels = labels;
            Scope = scope;
        }
    }
}
