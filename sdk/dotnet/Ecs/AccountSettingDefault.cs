// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    /// <summary>
    /// Provides an ECS default account setting for a specific ECS Resource name within a specific region. More information can be found on the [ECS Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-account-settings.html).
    /// 
    /// &gt; **NOTE:** The AWS API does not delete this resource. When you run `destroy`, the provider will attempt to disable the setting.
    /// 
    /// &gt; **NOTE:** Your AWS account may not support disabling `containerInstanceLongArnFormat`, `serviceLongArnFormat`, and `taskLongArnFormat`. If your account does not support disabling these, "destroying" this resource will not disable the setting nor cause a provider error. However, the AWS Provider will log an AWS error: `InvalidParameterException: You can no longer disable Long Arn settings`.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Ecs.AccountSettingDefault("test", new()
    ///     {
    ///         Value = "enabled",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECS Account Setting defaults can be imported using the `name`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:ecs/accountSettingDefault:AccountSettingDefault example taskLongArnFormat
    /// ```
    /// </summary>
    [AwsResourceType("aws:ecs/accountSettingDefault:AccountSettingDefault")]
    public partial class AccountSettingDefault : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the account setting to set. Valid values are `serviceLongArnFormat`, `taskLongArnFormat`, `containerInstanceLongArnFormat`, `awsvpcTrunking` and `containerInsights`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("principalArn")]
        public Output<string> PrincipalArn { get; private set; } = null!;

        /// <summary>
        /// State of the setting. Valid values are `enabled` and `disabled`.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a AccountSettingDefault resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountSettingDefault(string name, AccountSettingDefaultArgs args, CustomResourceOptions? options = null)
            : base("aws:ecs/accountSettingDefault:AccountSettingDefault", name, args ?? new AccountSettingDefaultArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountSettingDefault(string name, Input<string> id, AccountSettingDefaultState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecs/accountSettingDefault:AccountSettingDefault", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountSettingDefault resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountSettingDefault Get(string name, Input<string> id, AccountSettingDefaultState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountSettingDefault(name, id, state, options);
        }
    }

    public sealed class AccountSettingDefaultArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account setting to set. Valid values are `serviceLongArnFormat`, `taskLongArnFormat`, `containerInstanceLongArnFormat`, `awsvpcTrunking` and `containerInsights`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// State of the setting. Valid values are `enabled` and `disabled`.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public AccountSettingDefaultArgs()
        {
        }
        public static new AccountSettingDefaultArgs Empty => new AccountSettingDefaultArgs();
    }

    public sealed class AccountSettingDefaultState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account setting to set. Valid values are `serviceLongArnFormat`, `taskLongArnFormat`, `containerInstanceLongArnFormat`, `awsvpcTrunking` and `containerInsights`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("principalArn")]
        public Input<string>? PrincipalArn { get; set; }

        /// <summary>
        /// State of the setting. Valid values are `enabled` and `disabled`.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public AccountSettingDefaultState()
        {
        }
        public static new AccountSettingDefaultState Empty => new AccountSettingDefaultState();
    }
}
