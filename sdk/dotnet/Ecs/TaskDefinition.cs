// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    /// <summary>
    /// Manages a revision of an ECS task definition to be used in `aws.ecs.Service`.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_task_definition.html.markdown.
    /// </summary>
    public partial class TaskDefinition : Pulumi.CustomResource
    {
        /// <summary>
        /// Full ARN of the Task Definition (including both `family` and `revision`).
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A list of valid [container definitions]
        /// (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
        /// single valid JSON document. Please note that you should only provide values that are part of the container
        /// definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
        /// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
        /// official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
        /// </summary>
        [Output("containerDefinitions")]
        public Output<string> ContainerDefinitions { get; private set; } = null!;

        /// <summary>
        /// The number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Output("cpu")]
        public Output<string?> Cpu { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        /// </summary>
        [Output("executionRoleArn")]
        public Output<string?> ExecutionRoleArn { get; private set; } = null!;

        /// <summary>
        /// A unique name for your task definition.
        /// </summary>
        [Output("family")]
        public Output<string> Family { get; private set; } = null!;

        /// <summary>
        /// The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
        /// </summary>
        [Output("ipcMode")]
        public Output<string?> IpcMode { get; private set; } = null!;

        /// <summary>
        /// The amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Output("memory")]
        public Output<string?> Memory { get; private set; } = null!;

        /// <summary>
        /// The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
        /// </summary>
        [Output("networkMode")]
        public Output<string> NetworkMode { get; private set; } = null!;

        /// <summary>
        /// The process namespace to use for the containers in the task. The valid values are `host` and `task`.
        /// </summary>
        [Output("pidMode")]
        public Output<string?> PidMode { get; private set; } = null!;

        /// <summary>
        /// A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`.
        /// </summary>
        [Output("placementConstraints")]
        public Output<ImmutableArray<Outputs.TaskDefinitionPlacementConstraints>> PlacementConstraints { get; private set; } = null!;

        /// <summary>
        /// The proxy configuration details for the App Mesh proxy.
        /// </summary>
        [Output("proxyConfiguration")]
        public Output<Outputs.TaskDefinitionProxyConfiguration?> ProxyConfiguration { get; private set; } = null!;

        /// <summary>
        /// A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
        /// </summary>
        [Output("requiresCompatibilities")]
        public Output<ImmutableArray<string>> RequiresCompatibilities { get; private set; } = null!;

        /// <summary>
        /// The revision of the task in a particular family.
        /// </summary>
        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        /// <summary>
        /// Key-value mapping of resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
        /// </summary>
        [Output("taskRoleArn")]
        public Output<string?> TaskRoleArn { get; private set; } = null!;

        /// <summary>
        /// A set of volume blocks that containers in your task may use.
        /// </summary>
        [Output("volumes")]
        public Output<ImmutableArray<Outputs.TaskDefinitionVolumes>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a TaskDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaskDefinition(string name, TaskDefinitionArgs args, CustomResourceOptions? options = null)
            : base("aws:ecs/taskDefinition:TaskDefinition", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private TaskDefinition(string name, Input<string> id, TaskDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecs/taskDefinition:TaskDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaskDefinition Get(string name, Input<string> id, TaskDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new TaskDefinition(name, id, state, options);
        }
    }

    public sealed class TaskDefinitionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A list of valid [container definitions]
        /// (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
        /// single valid JSON document. Please note that you should only provide values that are part of the container
        /// definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
        /// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
        /// official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
        /// </summary>
        [Input("containerDefinitions", required: true)]
        public Input<string> ContainerDefinitions { get; set; } = null!;

        /// <summary>
        /// The number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// A unique name for your task definition.
        /// </summary>
        [Input("family", required: true)]
        public Input<string> Family { get; set; } = null!;

        /// <summary>
        /// The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
        /// </summary>
        [Input("ipcMode")]
        public Input<string>? IpcMode { get; set; }

        /// <summary>
        /// The amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
        /// </summary>
        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        /// <summary>
        /// The process namespace to use for the containers in the task. The valid values are `host` and `task`.
        /// </summary>
        [Input("pidMode")]
        public Input<string>? PidMode { get; set; }

        [Input("placementConstraints")]
        private InputList<Inputs.TaskDefinitionPlacementConstraintsArgs>? _placementConstraints;

        /// <summary>
        /// A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`.
        /// </summary>
        public InputList<Inputs.TaskDefinitionPlacementConstraintsArgs> PlacementConstraints
        {
            get => _placementConstraints ?? (_placementConstraints = new InputList<Inputs.TaskDefinitionPlacementConstraintsArgs>());
            set => _placementConstraints = value;
        }

        /// <summary>
        /// The proxy configuration details for the App Mesh proxy.
        /// </summary>
        [Input("proxyConfiguration")]
        public Input<Inputs.TaskDefinitionProxyConfigurationArgs>? ProxyConfiguration { get; set; }

        [Input("requiresCompatibilities")]
        private InputList<string>? _requiresCompatibilities;

        /// <summary>
        /// A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
        /// </summary>
        public InputList<string> RequiresCompatibilities
        {
            get => _requiresCompatibilities ?? (_requiresCompatibilities = new InputList<string>());
            set => _requiresCompatibilities = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
        /// </summary>
        [Input("taskRoleArn")]
        public Input<string>? TaskRoleArn { get; set; }

        [Input("volumes")]
        private InputList<Inputs.TaskDefinitionVolumesArgs>? _volumes;

        /// <summary>
        /// A set of volume blocks that containers in your task may use.
        /// </summary>
        public InputList<Inputs.TaskDefinitionVolumesArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.TaskDefinitionVolumesArgs>());
            set => _volumes = value;
        }

        public TaskDefinitionArgs()
        {
        }
    }

    public sealed class TaskDefinitionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Full ARN of the Task Definition (including both `family` and `revision`).
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// A list of valid [container definitions]
        /// (http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a
        /// single valid JSON document. Please note that you should only provide values that are part of the container
        /// definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters]
        /// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the
        /// official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
        /// </summary>
        [Input("containerDefinitions")]
        public Input<string>? ContainerDefinitions { get; set; }

        /// <summary>
        /// The number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// A unique name for your task definition.
        /// </summary>
        [Input("family")]
        public Input<string>? Family { get; set; }

        /// <summary>
        /// The IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
        /// </summary>
        [Input("ipcMode")]
        public Input<string>? IpcMode { get; set; }

        /// <summary>
        /// The amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// The Docker networking mode to use for the containers in the task. The valid values are `none`, `bridge`, `awsvpc`, and `host`.
        /// </summary>
        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        /// <summary>
        /// The process namespace to use for the containers in the task. The valid values are `host` and `task`.
        /// </summary>
        [Input("pidMode")]
        public Input<string>? PidMode { get; set; }

        [Input("placementConstraints")]
        private InputList<Inputs.TaskDefinitionPlacementConstraintsGetArgs>? _placementConstraints;

        /// <summary>
        /// A set of placement constraints rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`.
        /// </summary>
        public InputList<Inputs.TaskDefinitionPlacementConstraintsGetArgs> PlacementConstraints
        {
            get => _placementConstraints ?? (_placementConstraints = new InputList<Inputs.TaskDefinitionPlacementConstraintsGetArgs>());
            set => _placementConstraints = value;
        }

        /// <summary>
        /// The proxy configuration details for the App Mesh proxy.
        /// </summary>
        [Input("proxyConfiguration")]
        public Input<Inputs.TaskDefinitionProxyConfigurationGetArgs>? ProxyConfiguration { get; set; }

        [Input("requiresCompatibilities")]
        private InputList<string>? _requiresCompatibilities;

        /// <summary>
        /// A set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
        /// </summary>
        public InputList<string> RequiresCompatibilities
        {
            get => _requiresCompatibilities ?? (_requiresCompatibilities = new InputList<string>());
            set => _requiresCompatibilities = value;
        }

        /// <summary>
        /// The revision of the task in a particular family.
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
        /// </summary>
        [Input("taskRoleArn")]
        public Input<string>? TaskRoleArn { get; set; }

        [Input("volumes")]
        private InputList<Inputs.TaskDefinitionVolumesGetArgs>? _volumes;

        /// <summary>
        /// A set of volume blocks that containers in your task may use.
        /// </summary>
        public InputList<Inputs.TaskDefinitionVolumesGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.TaskDefinitionVolumesGetArgs>());
            set => _volumes = value;
        }

        public TaskDefinitionState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class TaskDefinitionPlacementConstraintsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster Query Language expression to apply to the constraint.
        /// For more information, see [Cluster Query Language in the Amazon EC2 Container
        /// Service Developer
        /// Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TaskDefinitionPlacementConstraintsArgs()
        {
        }
    }

    public sealed class TaskDefinitionPlacementConstraintsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cluster Query Language expression to apply to the constraint.
        /// For more information, see [Cluster Query Language in the Amazon EC2 Container
        /// Service Developer
        /// Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
        /// </summary>
        [Input("expression")]
        public Input<string>? Expression { get; set; }

        /// <summary>
        /// The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TaskDefinitionPlacementConstraintsGetArgs()
        {
        }
    }

    public sealed class TaskDefinitionProxyConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the container that will serve as the App Mesh proxy.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TaskDefinitionProxyConfigurationArgs()
        {
        }
    }

    public sealed class TaskDefinitionProxyConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the container that will serve as the App Mesh proxy.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TaskDefinitionProxyConfigurationGetArgs()
        {
        }
    }

    public sealed class TaskDefinitionVolumesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to configure a docker volume
        /// </summary>
        [Input("dockerVolumeConfiguration")]
        public Input<TaskDefinitionVolumesDockerVolumeConfigurationArgs>? DockerVolumeConfiguration { get; set; }

        /// <summary>
        /// Used to configure a EFS volume. Can be used only with an EC2 type task.
        /// </summary>
        [Input("efsVolumeConfiguration")]
        public Input<TaskDefinitionVolumesEfsVolumeConfigurationArgs>? EfsVolumeConfiguration { get; set; }

        /// <summary>
        /// The path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
        /// </summary>
        [Input("hostPath")]
        public Input<string>? HostPath { get; set; }

        /// <summary>
        /// The name of the volume. This name is referenced in the `sourceVolume`
        /// parameter of container definition in the `mountPoints` section.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public TaskDefinitionVolumesArgs()
        {
        }
    }

    public sealed class TaskDefinitionVolumesDockerVolumeConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
        /// </summary>
        [Input("autoprovision")]
        public Input<bool>? Autoprovision { get; set; }

        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverOpts")]
        private InputMap<string>? _driverOpts;

        /// <summary>
        /// A map of Docker driver specific options.
        /// </summary>
        public InputMap<string> DriverOpts
        {
            get => _driverOpts ?? (_driverOpts = new InputMap<string>());
            set => _driverOpts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of custom metadata to add to your Docker volume.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public TaskDefinitionVolumesDockerVolumeConfigurationArgs()
        {
        }
    }

    public sealed class TaskDefinitionVolumesDockerVolumeConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
        /// </summary>
        [Input("autoprovision")]
        public Input<bool>? Autoprovision { get; set; }

        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
        /// </summary>
        [Input("driver")]
        public Input<string>? Driver { get; set; }

        [Input("driverOpts")]
        private InputMap<string>? _driverOpts;

        /// <summary>
        /// A map of Docker driver specific options.
        /// </summary>
        public InputMap<string> DriverOpts
        {
            get => _driverOpts ?? (_driverOpts = new InputMap<string>());
            set => _driverOpts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// A map of custom metadata to add to your Docker volume.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public TaskDefinitionVolumesDockerVolumeConfigurationGetArgs()
        {
        }
    }

    public sealed class TaskDefinitionVolumesEfsVolumeConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the EFS File System.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The path to mount on the host
        /// </summary>
        [Input("rootDirectory")]
        public Input<string>? RootDirectory { get; set; }

        public TaskDefinitionVolumesEfsVolumeConfigurationArgs()
        {
        }
    }

    public sealed class TaskDefinitionVolumesEfsVolumeConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the EFS File System.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The path to mount on the host
        /// </summary>
        [Input("rootDirectory")]
        public Input<string>? RootDirectory { get; set; }

        public TaskDefinitionVolumesEfsVolumeConfigurationGetArgs()
        {
        }
    }

    public sealed class TaskDefinitionVolumesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to configure a docker volume
        /// </summary>
        [Input("dockerVolumeConfiguration")]
        public Input<TaskDefinitionVolumesDockerVolumeConfigurationGetArgs>? DockerVolumeConfiguration { get; set; }

        /// <summary>
        /// Used to configure a EFS volume. Can be used only with an EC2 type task.
        /// </summary>
        [Input("efsVolumeConfiguration")]
        public Input<TaskDefinitionVolumesEfsVolumeConfigurationGetArgs>? EfsVolumeConfiguration { get; set; }

        /// <summary>
        /// The path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
        /// </summary>
        [Input("hostPath")]
        public Input<string>? HostPath { get; set; }

        /// <summary>
        /// The name of the volume. This name is referenced in the `sourceVolume`
        /// parameter of container definition in the `mountPoints` section.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public TaskDefinitionVolumesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class TaskDefinitionPlacementConstraints
    {
        /// <summary>
        /// Cluster Query Language expression to apply to the constraint.
        /// For more information, see [Cluster Query Language in the Amazon EC2 Container
        /// Service Developer
        /// Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
        /// </summary>
        public readonly string? Expression;
        /// <summary>
        /// The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private TaskDefinitionPlacementConstraints(
            string? expression,
            string type)
        {
            Expression = expression;
            Type = type;
        }
    }

    [OutputType]
    public sealed class TaskDefinitionProxyConfiguration
    {
        /// <summary>
        /// The name of the container that will serve as the App Mesh proxy.
        /// </summary>
        public readonly string ContainerName;
        /// <summary>
        /// The set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Properties;
        /// <summary>
        /// The proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private TaskDefinitionProxyConfiguration(
            string containerName,
            ImmutableDictionary<string, string>? properties,
            string? type)
        {
            ContainerName = containerName;
            Properties = properties;
            Type = type;
        }
    }

    [OutputType]
    public sealed class TaskDefinitionVolumes
    {
        /// <summary>
        /// Used to configure a docker volume
        /// </summary>
        public readonly TaskDefinitionVolumesDockerVolumeConfiguration? DockerVolumeConfiguration;
        /// <summary>
        /// Used to configure a EFS volume. Can be used only with an EC2 type task.
        /// </summary>
        public readonly TaskDefinitionVolumesEfsVolumeConfiguration? EfsVolumeConfiguration;
        /// <summary>
        /// The path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
        /// </summary>
        public readonly string? HostPath;
        /// <summary>
        /// The name of the volume. This name is referenced in the `sourceVolume`
        /// parameter of container definition in the `mountPoints` section.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private TaskDefinitionVolumes(
            TaskDefinitionVolumesDockerVolumeConfiguration? dockerVolumeConfiguration,
            TaskDefinitionVolumesEfsVolumeConfiguration? efsVolumeConfiguration,
            string? hostPath,
            string name)
        {
            DockerVolumeConfiguration = dockerVolumeConfiguration;
            EfsVolumeConfiguration = efsVolumeConfiguration;
            HostPath = hostPath;
            Name = name;
        }
    }

    [OutputType]
    public sealed class TaskDefinitionVolumesDockerVolumeConfiguration
    {
        /// <summary>
        /// If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
        /// </summary>
        public readonly bool? Autoprovision;
        /// <summary>
        /// The Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
        /// </summary>
        public readonly string? Driver;
        /// <summary>
        /// A map of Docker driver specific options.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DriverOpts;
        /// <summary>
        /// A map of custom metadata to add to your Docker volume.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Labels;
        /// <summary>
        /// The scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are `scoped` as shared persist after the task stops.
        /// </summary>
        public readonly string Scope;

        [OutputConstructor]
        private TaskDefinitionVolumesDockerVolumeConfiguration(
            bool? autoprovision,
            string? driver,
            ImmutableDictionary<string, string>? driverOpts,
            ImmutableDictionary<string, string>? labels,
            string scope)
        {
            Autoprovision = autoprovision;
            Driver = driver;
            DriverOpts = driverOpts;
            Labels = labels;
            Scope = scope;
        }
    }

    [OutputType]
    public sealed class TaskDefinitionVolumesEfsVolumeConfiguration
    {
        /// <summary>
        /// The ID of the EFS File System.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// The path to mount on the host
        /// </summary>
        public readonly string? RootDirectory;

        [OutputConstructor]
        private TaskDefinitionVolumesEfsVolumeConfiguration(
            string fileSystemId,
            string? rootDirectory)
        {
            FileSystemId = fileSystemId;
            RootDirectory = rootDirectory;
        }
    }
    }
}
