// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    [AwsResourceType("aws:ecs/taskDefinition:TaskDefinition")]
    public partial class TaskDefinition : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("containerDefinitions")]
        public Output<string> ContainerDefinitions { get; private set; } = null!;

        [Output("cpu")]
        public Output<string?> Cpu { get; private set; } = null!;

        [Output("ephemeralStorage")]
        public Output<Outputs.TaskDefinitionEphemeralStorage?> EphemeralStorage { get; private set; } = null!;

        [Output("executionRoleArn")]
        public Output<string?> ExecutionRoleArn { get; private set; } = null!;

        [Output("family")]
        public Output<string> Family { get; private set; } = null!;

        [Output("inferenceAccelerators")]
        public Output<ImmutableArray<Outputs.TaskDefinitionInferenceAccelerator>> InferenceAccelerators { get; private set; } = null!;

        [Output("ipcMode")]
        public Output<string?> IpcMode { get; private set; } = null!;

        [Output("memory")]
        public Output<string?> Memory { get; private set; } = null!;

        [Output("networkMode")]
        public Output<string> NetworkMode { get; private set; } = null!;

        [Output("pidMode")]
        public Output<string?> PidMode { get; private set; } = null!;

        [Output("placementConstraints")]
        public Output<ImmutableArray<Outputs.TaskDefinitionPlacementConstraint>> PlacementConstraints { get; private set; } = null!;

        [Output("proxyConfiguration")]
        public Output<Outputs.TaskDefinitionProxyConfiguration?> ProxyConfiguration { get; private set; } = null!;

        [Output("requiresCompatibilities")]
        public Output<ImmutableArray<string>> RequiresCompatibilities { get; private set; } = null!;

        [Output("revision")]
        public Output<int> Revision { get; private set; } = null!;

        [Output("runtimePlatform")]
        public Output<Outputs.TaskDefinitionRuntimePlatform?> RuntimePlatform { get; private set; } = null!;

        [Output("skipDestroy")]
        public Output<bool?> SkipDestroy { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("taskRoleArn")]
        public Output<string?> TaskRoleArn { get; private set; } = null!;

        [Output("volumes")]
        public Output<ImmutableArray<Outputs.TaskDefinitionVolume>> Volumes { get; private set; } = null!;


        /// <summary>
        /// Create a TaskDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaskDefinition(string name, TaskDefinitionArgs args, CustomResourceOptions? options = null)
            : base("aws:ecs/taskDefinition:TaskDefinition", name, args ?? new TaskDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TaskDefinition(string name, Input<string> id, TaskDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecs/taskDefinition:TaskDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaskDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaskDefinition Get(string name, Input<string> id, TaskDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new TaskDefinition(name, id, state, options);
        }
    }

    public sealed class TaskDefinitionArgs : global::Pulumi.ResourceArgs
    {
        [Input("containerDefinitions", required: true)]
        public Input<string> ContainerDefinitions { get; set; } = null!;

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        [Input("ephemeralStorage")]
        public Input<Inputs.TaskDefinitionEphemeralStorageArgs>? EphemeralStorage { get; set; }

        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        [Input("family", required: true)]
        public Input<string> Family { get; set; } = null!;

        [Input("inferenceAccelerators")]
        private InputList<Inputs.TaskDefinitionInferenceAcceleratorArgs>? _inferenceAccelerators;
        public InputList<Inputs.TaskDefinitionInferenceAcceleratorArgs> InferenceAccelerators
        {
            get => _inferenceAccelerators ?? (_inferenceAccelerators = new InputList<Inputs.TaskDefinitionInferenceAcceleratorArgs>());
            set => _inferenceAccelerators = value;
        }

        [Input("ipcMode")]
        public Input<string>? IpcMode { get; set; }

        [Input("memory")]
        public Input<string>? Memory { get; set; }

        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        [Input("pidMode")]
        public Input<string>? PidMode { get; set; }

        [Input("placementConstraints")]
        private InputList<Inputs.TaskDefinitionPlacementConstraintArgs>? _placementConstraints;
        public InputList<Inputs.TaskDefinitionPlacementConstraintArgs> PlacementConstraints
        {
            get => _placementConstraints ?? (_placementConstraints = new InputList<Inputs.TaskDefinitionPlacementConstraintArgs>());
            set => _placementConstraints = value;
        }

        [Input("proxyConfiguration")]
        public Input<Inputs.TaskDefinitionProxyConfigurationArgs>? ProxyConfiguration { get; set; }

        [Input("requiresCompatibilities")]
        private InputList<string>? _requiresCompatibilities;
        public InputList<string> RequiresCompatibilities
        {
            get => _requiresCompatibilities ?? (_requiresCompatibilities = new InputList<string>());
            set => _requiresCompatibilities = value;
        }

        [Input("runtimePlatform")]
        public Input<Inputs.TaskDefinitionRuntimePlatformArgs>? RuntimePlatform { get; set; }

        [Input("skipDestroy")]
        public Input<bool>? SkipDestroy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taskRoleArn")]
        public Input<string>? TaskRoleArn { get; set; }

        [Input("volumes")]
        private InputList<Inputs.TaskDefinitionVolumeArgs>? _volumes;
        public InputList<Inputs.TaskDefinitionVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.TaskDefinitionVolumeArgs>());
            set => _volumes = value;
        }

        public TaskDefinitionArgs()
        {
        }
        public static new TaskDefinitionArgs Empty => new TaskDefinitionArgs();
    }

    public sealed class TaskDefinitionState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("containerDefinitions")]
        public Input<string>? ContainerDefinitions { get; set; }

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        [Input("ephemeralStorage")]
        public Input<Inputs.TaskDefinitionEphemeralStorageGetArgs>? EphemeralStorage { get; set; }

        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        [Input("family")]
        public Input<string>? Family { get; set; }

        [Input("inferenceAccelerators")]
        private InputList<Inputs.TaskDefinitionInferenceAcceleratorGetArgs>? _inferenceAccelerators;
        public InputList<Inputs.TaskDefinitionInferenceAcceleratorGetArgs> InferenceAccelerators
        {
            get => _inferenceAccelerators ?? (_inferenceAccelerators = new InputList<Inputs.TaskDefinitionInferenceAcceleratorGetArgs>());
            set => _inferenceAccelerators = value;
        }

        [Input("ipcMode")]
        public Input<string>? IpcMode { get; set; }

        [Input("memory")]
        public Input<string>? Memory { get; set; }

        [Input("networkMode")]
        public Input<string>? NetworkMode { get; set; }

        [Input("pidMode")]
        public Input<string>? PidMode { get; set; }

        [Input("placementConstraints")]
        private InputList<Inputs.TaskDefinitionPlacementConstraintGetArgs>? _placementConstraints;
        public InputList<Inputs.TaskDefinitionPlacementConstraintGetArgs> PlacementConstraints
        {
            get => _placementConstraints ?? (_placementConstraints = new InputList<Inputs.TaskDefinitionPlacementConstraintGetArgs>());
            set => _placementConstraints = value;
        }

        [Input("proxyConfiguration")]
        public Input<Inputs.TaskDefinitionProxyConfigurationGetArgs>? ProxyConfiguration { get; set; }

        [Input("requiresCompatibilities")]
        private InputList<string>? _requiresCompatibilities;
        public InputList<string> RequiresCompatibilities
        {
            get => _requiresCompatibilities ?? (_requiresCompatibilities = new InputList<string>());
            set => _requiresCompatibilities = value;
        }

        [Input("revision")]
        public Input<int>? Revision { get; set; }

        [Input("runtimePlatform")]
        public Input<Inputs.TaskDefinitionRuntimePlatformGetArgs>? RuntimePlatform { get; set; }

        [Input("skipDestroy")]
        public Input<bool>? SkipDestroy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("taskRoleArn")]
        public Input<string>? TaskRoleArn { get; set; }

        [Input("volumes")]
        private InputList<Inputs.TaskDefinitionVolumeGetArgs>? _volumes;
        public InputList<Inputs.TaskDefinitionVolumeGetArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.TaskDefinitionVolumeGetArgs>());
            set => _volumes = value;
        }

        public TaskDefinitionState()
        {
        }
        public static new TaskDefinitionState Empty => new TaskDefinitionState();
    }
}
