// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    [AwsResourceType("aws:ecs/taskSet:TaskSet")]
    public partial class TaskSet : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("capacityProviderStrategies")]
        public Output<ImmutableArray<Outputs.TaskSetCapacityProviderStrategy>> CapacityProviderStrategies { get; private set; } = null!;

        [Output("cluster")]
        public Output<string> Cluster { get; private set; } = null!;

        [Output("externalId")]
        public Output<string> ExternalId { get; private set; } = null!;

        [Output("forceDelete")]
        public Output<bool?> ForceDelete { get; private set; } = null!;

        [Output("launchType")]
        public Output<string> LaunchType { get; private set; } = null!;

        [Output("loadBalancers")]
        public Output<ImmutableArray<Outputs.TaskSetLoadBalancer>> LoadBalancers { get; private set; } = null!;

        [Output("networkConfiguration")]
        public Output<Outputs.TaskSetNetworkConfiguration?> NetworkConfiguration { get; private set; } = null!;

        [Output("platformVersion")]
        public Output<string> PlatformVersion { get; private set; } = null!;

        [Output("scale")]
        public Output<Outputs.TaskSetScale> Scale { get; private set; } = null!;

        [Output("service")]
        public Output<string> Service { get; private set; } = null!;

        [Output("serviceRegistries")]
        public Output<Outputs.TaskSetServiceRegistries?> ServiceRegistries { get; private set; } = null!;

        [Output("stabilityStatus")]
        public Output<string> StabilityStatus { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("taskDefinition")]
        public Output<string> TaskDefinition { get; private set; } = null!;

        [Output("taskSetId")]
        public Output<string> TaskSetId { get; private set; } = null!;

        [Output("waitUntilStable")]
        public Output<bool?> WaitUntilStable { get; private set; } = null!;

        [Output("waitUntilStableTimeout")]
        public Output<string?> WaitUntilStableTimeout { get; private set; } = null!;


        /// <summary>
        /// Create a TaskSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaskSet(string name, TaskSetArgs args, CustomResourceOptions? options = null)
            : base("aws:ecs/taskSet:TaskSet", name, args ?? new TaskSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TaskSet(string name, Input<string> id, TaskSetState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecs/taskSet:TaskSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaskSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaskSet Get(string name, Input<string> id, TaskSetState? state = null, CustomResourceOptions? options = null)
        {
            return new TaskSet(name, id, state, options);
        }
    }

    public sealed class TaskSetArgs : global::Pulumi.ResourceArgs
    {
        [Input("capacityProviderStrategies")]
        private InputList<Inputs.TaskSetCapacityProviderStrategyArgs>? _capacityProviderStrategies;
        public InputList<Inputs.TaskSetCapacityProviderStrategyArgs> CapacityProviderStrategies
        {
            get => _capacityProviderStrategies ?? (_capacityProviderStrategies = new InputList<Inputs.TaskSetCapacityProviderStrategyArgs>());
            set => _capacityProviderStrategies = value;
        }

        [Input("cluster", required: true)]
        public Input<string> Cluster { get; set; } = null!;

        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("launchType")]
        public Input<string>? LaunchType { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.TaskSetLoadBalancerArgs>? _loadBalancers;
        public InputList<Inputs.TaskSetLoadBalancerArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.TaskSetLoadBalancerArgs>());
            set => _loadBalancers = value;
        }

        [Input("networkConfiguration")]
        public Input<Inputs.TaskSetNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        [Input("platformVersion")]
        public Input<string>? PlatformVersion { get; set; }

        [Input("scale")]
        public Input<Inputs.TaskSetScaleArgs>? Scale { get; set; }

        [Input("service", required: true)]
        public Input<string> Service { get; set; } = null!;

        [Input("serviceRegistries")]
        public Input<Inputs.TaskSetServiceRegistriesArgs>? ServiceRegistries { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taskDefinition", required: true)]
        public Input<string> TaskDefinition { get; set; } = null!;

        [Input("waitUntilStable")]
        public Input<bool>? WaitUntilStable { get; set; }

        [Input("waitUntilStableTimeout")]
        public Input<string>? WaitUntilStableTimeout { get; set; }

        public TaskSetArgs()
        {
        }
        public static new TaskSetArgs Empty => new TaskSetArgs();
    }

    public sealed class TaskSetState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("capacityProviderStrategies")]
        private InputList<Inputs.TaskSetCapacityProviderStrategyGetArgs>? _capacityProviderStrategies;
        public InputList<Inputs.TaskSetCapacityProviderStrategyGetArgs> CapacityProviderStrategies
        {
            get => _capacityProviderStrategies ?? (_capacityProviderStrategies = new InputList<Inputs.TaskSetCapacityProviderStrategyGetArgs>());
            set => _capacityProviderStrategies = value;
        }

        [Input("cluster")]
        public Input<string>? Cluster { get; set; }

        [Input("externalId")]
        public Input<string>? ExternalId { get; set; }

        [Input("forceDelete")]
        public Input<bool>? ForceDelete { get; set; }

        [Input("launchType")]
        public Input<string>? LaunchType { get; set; }

        [Input("loadBalancers")]
        private InputList<Inputs.TaskSetLoadBalancerGetArgs>? _loadBalancers;
        public InputList<Inputs.TaskSetLoadBalancerGetArgs> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<Inputs.TaskSetLoadBalancerGetArgs>());
            set => _loadBalancers = value;
        }

        [Input("networkConfiguration")]
        public Input<Inputs.TaskSetNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        [Input("platformVersion")]
        public Input<string>? PlatformVersion { get; set; }

        [Input("scale")]
        public Input<Inputs.TaskSetScaleGetArgs>? Scale { get; set; }

        [Input("service")]
        public Input<string>? Service { get; set; }

        [Input("serviceRegistries")]
        public Input<Inputs.TaskSetServiceRegistriesGetArgs>? ServiceRegistries { get; set; }

        [Input("stabilityStatus")]
        public Input<string>? StabilityStatus { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("taskDefinition")]
        public Input<string>? TaskDefinition { get; set; }

        [Input("taskSetId")]
        public Input<string>? TaskSetId { get; set; }

        [Input("waitUntilStable")]
        public Input<bool>? WaitUntilStable { get; set; }

        [Input("waitUntilStableTimeout")]
        public Input<string>? WaitUntilStableTimeout { get; set; }

        public TaskSetState()
        {
        }
        public static new TaskSetState Empty => new TaskSetState();
    }
}
