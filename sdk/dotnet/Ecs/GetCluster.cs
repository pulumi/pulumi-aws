// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    public static class GetCluster
    {
        /// <summary>
        /// The ECS Cluster data source allows access to details of a specific
        /// cluster within an AWS ECS service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ecs-mongo = aws.ecs.getCluster({
        ///     clusterName: "ecs-mongo-production",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ecs_mongo = aws.ecs.get_cluster(cluster_name="ecs-mongo-production")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ecs_mongo = Aws.Ecs.GetCluster.Invoke(new()
        ///     {
        ///         ClusterName = "ecs-mongo-production",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecs.LookupCluster(ctx, &amp;ecs.LookupClusterArgs{
        /// 			ClusterName: "ecs-mongo-production",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecs.EcsFunctions;
        /// import com.pulumi.aws.ecs.inputs.GetClusterArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var ecs-mongo = EcsFunctions.getCluster(GetClusterArgs.builder()
        ///             .clusterName("ecs-mongo-production")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   ecs-mongo:
        ///     fn::invoke:
        ///       Function: aws:ecs:getCluster
        ///       Arguments:
        ///         clusterName: ecs-mongo-production
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("aws:ecs/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// The ECS Cluster data source allows access to details of a specific
        /// cluster within an AWS ECS service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ecs-mongo = aws.ecs.getCluster({
        ///     clusterName: "ecs-mongo-production",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ecs_mongo = aws.ecs.get_cluster(cluster_name="ecs-mongo-production")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ecs_mongo = Aws.Ecs.GetCluster.Invoke(new()
        ///     {
        ///         ClusterName = "ecs-mongo-production",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecs.LookupCluster(ctx, &amp;ecs.LookupClusterArgs{
        /// 			ClusterName: "ecs-mongo-production",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecs.EcsFunctions;
        /// import com.pulumi.aws.ecs.inputs.GetClusterArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var ecs-mongo = EcsFunctions.getCluster(GetClusterArgs.builder()
        ///             .clusterName("ecs-mongo-production")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   ecs-mongo:
        ///     fn::invoke:
        ///       Function: aws:ecs:getCluster
        ///       Arguments:
        ///         clusterName: ecs-mongo-production
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("aws:ecs/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the ECS Cluster
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the ECS Cluster
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// ARN of the ECS Cluster
        /// </summary>
        public readonly string Arn;
        public readonly string ClusterName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of pending tasks for the ECS Cluster
        /// </summary>
        public readonly int PendingTasksCount;
        /// <summary>
        /// The number of registered container instances for the ECS Cluster
        /// </summary>
        public readonly int RegisteredContainerInstancesCount;
        /// <summary>
        /// Number of running tasks for the ECS Cluster
        /// </summary>
        public readonly int RunningTasksCount;
        /// <summary>
        /// The default Service Connect namespace
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterServiceConnectDefaultResult> ServiceConnectDefaults;
        /// <summary>
        /// Settings associated with the ECS Cluster
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterSettingResult> Settings;
        /// <summary>
        /// Status of the ECS Cluster
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetClusterResult(
            string arn,

            string clusterName,

            string id,

            int pendingTasksCount,

            int registeredContainerInstancesCount,

            int runningTasksCount,

            ImmutableArray<Outputs.GetClusterServiceConnectDefaultResult> serviceConnectDefaults,

            ImmutableArray<Outputs.GetClusterSettingResult> settings,

            string status,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            ClusterName = clusterName;
            Id = id;
            PendingTasksCount = pendingTasksCount;
            RegisteredContainerInstancesCount = registeredContainerInstancesCount;
            RunningTasksCount = runningTasksCount;
            ServiceConnectDefaults = serviceConnectDefaults;
            Settings = settings;
            Status = status;
            Tags = tags;
        }
    }
}
