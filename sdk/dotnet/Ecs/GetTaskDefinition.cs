// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    public static class GetTaskDefinition
    {
        /// <summary>
        /// The ECS task definition data source allows access to details of
        /// a specific AWS ECS task definition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mongoTaskDefinition = new Aws.Ecs.TaskDefinition("mongo", new()
        ///     {
        ///         Family = "mongodb",
        ///         ContainerDefinitions = @"[
        ///   {
        ///     ""cpu"": 128,
        ///     ""environment"": [{
        ///       ""name"": ""SECRET"",
        ///       ""value"": ""KEY""
        ///     }],
        ///     ""essential"": true,
        ///     ""image"": ""mongo:latest"",
        ///     ""memory"": 128,
        ///     ""memoryReservation"": 64,
        ///     ""name"": ""mongodb""
        ///   }
        /// ]
        /// ",
        ///     });
        /// 
        ///     // Simply specify the family to find the latest ACTIVE revision in that family.
        ///     var mongo = Aws.Ecs.GetTaskDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = mongoTaskDefinition.Family,
        ///     });
        /// 
        ///     var foo = new Aws.Ecs.Cluster("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     var mongoService = new Aws.Ecs.Service("mongo", new()
        ///     {
        ///         Name = "mongo",
        ///         Cluster = foo.Id,
        ///         DesiredCount = 2,
        ///         TaskDefinition = mongo.Apply(getTaskDefinitionResult =&gt; getTaskDefinitionResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTaskDefinitionResult> InvokeAsync(GetTaskDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskDefinitionResult>("aws:ecs/getTaskDefinition:getTaskDefinition", args ?? new GetTaskDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// The ECS task definition data source allows access to details of
        /// a specific AWS ECS task definition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mongoTaskDefinition = new Aws.Ecs.TaskDefinition("mongo", new()
        ///     {
        ///         Family = "mongodb",
        ///         ContainerDefinitions = @"[
        ///   {
        ///     ""cpu"": 128,
        ///     ""environment"": [{
        ///       ""name"": ""SECRET"",
        ///       ""value"": ""KEY""
        ///     }],
        ///     ""essential"": true,
        ///     ""image"": ""mongo:latest"",
        ///     ""memory"": 128,
        ///     ""memoryReservation"": 64,
        ///     ""name"": ""mongodb""
        ///   }
        /// ]
        /// ",
        ///     });
        /// 
        ///     // Simply specify the family to find the latest ACTIVE revision in that family.
        ///     var mongo = Aws.Ecs.GetTaskDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = mongoTaskDefinition.Family,
        ///     });
        /// 
        ///     var foo = new Aws.Ecs.Cluster("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     var mongoService = new Aws.Ecs.Service("mongo", new()
        ///     {
        ///         Name = "mongo",
        ///         Cluster = foo.Id,
        ///         DesiredCount = 2,
        ///         TaskDefinition = mongo.Apply(getTaskDefinitionResult =&gt; getTaskDefinitionResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTaskDefinitionResult> Invoke(GetTaskDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskDefinitionResult>("aws:ecs/getTaskDefinition:getTaskDefinition", args ?? new GetTaskDefinitionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The ECS task definition data source allows access to details of
        /// a specific AWS ECS task definition.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mongoTaskDefinition = new Aws.Ecs.TaskDefinition("mongo", new()
        ///     {
        ///         Family = "mongodb",
        ///         ContainerDefinitions = @"[
        ///   {
        ///     ""cpu"": 128,
        ///     ""environment"": [{
        ///       ""name"": ""SECRET"",
        ///       ""value"": ""KEY""
        ///     }],
        ///     ""essential"": true,
        ///     ""image"": ""mongo:latest"",
        ///     ""memory"": 128,
        ///     ""memoryReservation"": 64,
        ///     ""name"": ""mongodb""
        ///   }
        /// ]
        /// ",
        ///     });
        /// 
        ///     // Simply specify the family to find the latest ACTIVE revision in that family.
        ///     var mongo = Aws.Ecs.GetTaskDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = mongoTaskDefinition.Family,
        ///     });
        /// 
        ///     var foo = new Aws.Ecs.Cluster("foo", new()
        ///     {
        ///         Name = "foo",
        ///     });
        /// 
        ///     var mongoService = new Aws.Ecs.Service("mongo", new()
        ///     {
        ///         Name = "mongo",
        ///         Cluster = foo.Id,
        ///         DesiredCount = 2,
        ///         TaskDefinition = mongo.Apply(getTaskDefinitionResult =&gt; getTaskDefinitionResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTaskDefinitionResult> Invoke(GetTaskDefinitionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskDefinitionResult>("aws:ecs/getTaskDefinition:getTaskDefinition", args ?? new GetTaskDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
        /// </summary>
        [Input("taskDefinition", required: true)]
        public string TaskDefinition { get; set; } = null!;

        public GetTaskDefinitionArgs()
        {
        }
        public static new GetTaskDefinitionArgs Empty => new GetTaskDefinitionArgs();
    }

    public sealed class GetTaskDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
        /// </summary>
        [Input("taskDefinition", required: true)]
        public Input<string> TaskDefinition { get; set; } = null!;

        public GetTaskDefinitionInvokeArgs()
        {
        }
        public static new GetTaskDefinitionInvokeArgs Empty => new GetTaskDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskDefinitionResult
    {
        /// <summary>
        /// ARN of the task definition.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
        /// </summary>
        public readonly string ArnWithoutRevision;
        /// <summary>
        /// A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
        /// </summary>
        public readonly string ContainerDefinitions;
        /// <summary>
        /// Number of cpu units used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        public readonly string Cpu;
        /// <summary>
        /// Enables fault injection and allows for fault injection requests to be accepted from the task's containers. Default is `false`.
        /// </summary>
        public readonly bool EnableFaultInjection;
        /// <summary>
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTaskDefinitionEphemeralStorageResult> EphemeralStorages;
        /// <summary>
        /// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
        /// </summary>
        public readonly string ExecutionRoleArn;
        /// <summary>
        /// A unique name for your task definition.
        /// The following arguments are optional:
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Configuration block(s) with Inference Accelerators settings. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTaskDefinitionInferenceAcceleratorResult> InferenceAccelerators;
        /// <summary>
        /// IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
        /// </summary>
        public readonly string IpcMode;
        /// <summary>
        /// Amount (in MiB) of memory used by the task. If the `requires_compatibilities` is `FARGATE` this field is required.
        /// </summary>
        public readonly string Memory;
        /// <summary>
        /// Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
        /// </summary>
        public readonly string NetworkMode;
        /// <summary>
        /// Process namespace to use for the containers in the task. The valid values are `host` and `task`.
        /// </summary>
        public readonly string PidMode;
        /// <summary>
        /// Configuration block for rules that are taken into consideration during task placement. Maximum number of `placement_constraints` is `10`. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTaskDefinitionPlacementConstraintResult> PlacementConstraints;
        /// <summary>
        /// Configuration block for the App Mesh proxy. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTaskDefinitionProxyConfigurationResult> ProxyConfigurations;
        /// <summary>
        /// Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
        /// </summary>
        public readonly ImmutableArray<string> RequiresCompatibilities;
        /// <summary>
        /// Revision of the task in a particular family.
        /// </summary>
        public readonly int Revision;
        /// <summary>
        /// Configuration block for runtime_platform that containers in your task may use.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTaskDefinitionRuntimePlatformResult> RuntimePlatforms;
        /// <summary>
        /// Status of the task definition.
        /// </summary>
        public readonly string Status;
        public readonly string TaskDefinition;
        /// <summary>
        /// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
        /// </summary>
        public readonly string TaskRoleArn;
        /// <summary>
        /// Configuration block for volumes that containers in your task may use. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTaskDefinitionVolumeResult> Volumes;

        [OutputConstructor]
        private GetTaskDefinitionResult(
            string arn,

            string arnWithoutRevision,

            string containerDefinitions,

            string cpu,

            bool enableFaultInjection,

            ImmutableArray<Outputs.GetTaskDefinitionEphemeralStorageResult> ephemeralStorages,

            string executionRoleArn,

            string family,

            string id,

            ImmutableArray<Outputs.GetTaskDefinitionInferenceAcceleratorResult> inferenceAccelerators,

            string ipcMode,

            string memory,

            string networkMode,

            string pidMode,

            ImmutableArray<Outputs.GetTaskDefinitionPlacementConstraintResult> placementConstraints,

            ImmutableArray<Outputs.GetTaskDefinitionProxyConfigurationResult> proxyConfigurations,

            ImmutableArray<string> requiresCompatibilities,

            int revision,

            ImmutableArray<Outputs.GetTaskDefinitionRuntimePlatformResult> runtimePlatforms,

            string status,

            string taskDefinition,

            string taskRoleArn,

            ImmutableArray<Outputs.GetTaskDefinitionVolumeResult> volumes)
        {
            Arn = arn;
            ArnWithoutRevision = arnWithoutRevision;
            ContainerDefinitions = containerDefinitions;
            Cpu = cpu;
            EnableFaultInjection = enableFaultInjection;
            EphemeralStorages = ephemeralStorages;
            ExecutionRoleArn = executionRoleArn;
            Family = family;
            Id = id;
            InferenceAccelerators = inferenceAccelerators;
            IpcMode = ipcMode;
            Memory = memory;
            NetworkMode = networkMode;
            PidMode = pidMode;
            PlacementConstraints = placementConstraints;
            ProxyConfigurations = proxyConfigurations;
            RequiresCompatibilities = requiresCompatibilities;
            Revision = revision;
            RuntimePlatforms = runtimePlatforms;
            Status = status;
            TaskDefinition = taskDefinition;
            TaskRoleArn = taskRoleArn;
            Volumes = volumes;
        }
    }
}
