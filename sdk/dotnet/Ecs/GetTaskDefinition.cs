// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    public static class GetTaskDefinition
    {
        /// <summary>
        /// The ECS task definition data source allows access to details of
        /// a specific AWS ECS task definition.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const mongoTaskDefinition = aws.ecs.getTaskDefinition({
        ///     taskDefinition: mongoEcs / taskDefinitionTaskDefinition.family,
        /// });
        /// const foo = new aws.ecs.Cluster("foo", {});
        /// const mongoEcs_taskDefinitionTaskDefinition = new aws.ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", {
        ///     family: "mongodb",
        ///     containerDefinitions: `[
        ///   {
        ///     "cpu": 128,
        ///     "environment": [{
        ///       "name": "SECRET",
        ///       "value": "KEY"
        ///     }],
        ///     "essential": true,
        ///     "image": "mongo:latest",
        ///     "memory": 128,
        ///     "memoryReservation": 64,
        ///     "name": "mongodb"
        ///   }
        /// ]
        /// `,
        /// });
        /// const mongoService = new aws.ecs.Service("mongoService", {
        ///     cluster: foo.id,
        ///     desiredCount: 2,
        ///     taskDefinition: mongoTaskDefinition.then(mongoTaskDefinition =&gt; mongoTaskDefinition.arn),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// mongo_task_definition = aws.ecs.get_task_definition(task_definition=mongo_ecs / task_definition_task_definition["family"])
        /// foo = aws.ecs.Cluster("foo")
        /// mongo_ecs_task_definition_task_definition = aws.ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition",
        ///     family="mongodb",
        ///     container_definitions="""[
        ///   {
        ///     "cpu": 128,
        ///     "environment": [{
        ///       "name": "SECRET",
        ///       "value": "KEY"
        ///     }],
        ///     "essential": true,
        ///     "image": "mongo:latest",
        ///     "memory": 128,
        ///     "memoryReservation": 64,
        ///     "name": "mongodb"
        ///   }
        /// ]
        /// """)
        /// mongo_service = aws.ecs.Service("mongoService",
        ///     cluster=foo.id,
        ///     desired_count=2,
        ///     task_definition=mongo_task_definition.arn)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mongoTaskDefinition = Aws.Ecs.GetTaskDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = mongoEcs / taskDefinitionTaskDefinition.Family,
        ///     });
        /// 
        ///     var foo = new Aws.Ecs.Cluster("foo");
        /// 
        ///     var mongoEcs_taskDefinitionTaskDefinition = new Aws.Ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", new()
        ///     {
        ///         Family = "mongodb",
        ///         ContainerDefinitions = @"[
        ///   {
        ///     ""cpu"": 128,
        ///     ""environment"": [{
        ///       ""name"": ""SECRET"",
        ///       ""value"": ""KEY""
        ///     }],
        ///     ""essential"": true,
        ///     ""image"": ""mongo:latest"",
        ///     ""memory"": 128,
        ///     ""memoryReservation"": 64,
        ///     ""name"": ""mongodb""
        ///   }
        /// ]
        /// ",
        ///     });
        /// 
        ///     var mongoService = new Aws.Ecs.Service("mongoService", new()
        ///     {
        ///         Cluster = foo.Id,
        ///         DesiredCount = 2,
        ///         TaskDefinition = mongoTaskDefinition.Apply(getTaskDefinitionResult =&gt; getTaskDefinitionResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		mongoTaskDefinition, err := ecs.LookupTaskDefinition(ctx, &amp;ecs.LookupTaskDefinitionArgs{
        /// 			TaskDefinition: mongoEcs / taskDefinitionTaskDefinition.Family,
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		foo, err := ecs.NewCluster(ctx, "foo", nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ecs.NewTaskDefinition(ctx, "mongoEcs/taskDefinitionTaskDefinition", &amp;ecs.TaskDefinitionArgs{
        /// 			Family:               pulumi.String("mongodb"),
        /// 			ContainerDefinitions: pulumi.String("[\n  {\n    \"cpu\": 128,\n    \"environment\": [{\n      \"name\": \"SECRET\",\n      \"value\": \"KEY\"\n    }],\n    \"essential\": true,\n    \"image\": \"mongo:latest\",\n    \"memory\": 128,\n    \"memoryReservation\": 64,\n    \"name\": \"mongodb\"\n  }\n]\n"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ecs.NewService(ctx, "mongoService", &amp;ecs.ServiceArgs{
        /// 			Cluster:        foo.ID(),
        /// 			DesiredCount:   pulumi.Int(2),
        /// 			TaskDefinition: *pulumi.String(mongoTaskDefinition.Arn),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecs.EcsFunctions;
        /// import com.pulumi.aws.ecs.inputs.GetTaskDefinitionArgs;
        /// import com.pulumi.aws.ecs.Cluster;
        /// import com.pulumi.aws.ecs.TaskDefinition;
        /// import com.pulumi.aws.ecs.TaskDefinitionArgs;
        /// import com.pulumi.aws.ecs.Service;
        /// import com.pulumi.aws.ecs.ServiceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var mongoTaskDefinition = EcsFunctions.getTaskDefinition(GetTaskDefinitionArgs.builder()
        ///             .taskDefinition(mongoEcs / taskDefinitionTaskDefinition.family())
        ///             .build());
        /// 
        ///         var foo = new Cluster("foo");
        /// 
        ///         var mongoEcs_taskDefinitionTaskDefinition = new TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", TaskDefinitionArgs.builder()        
        ///             .family("mongodb")
        ///             .containerDefinitions("""
        /// [
        ///   {
        ///     "cpu": 128,
        ///     "environment": [{
        ///       "name": "SECRET",
        ///       "value": "KEY"
        ///     }],
        ///     "essential": true,
        ///     "image": "mongo:latest",
        ///     "memory": 128,
        ///     "memoryReservation": 64,
        ///     "name": "mongodb"
        ///   }
        /// ]
        ///             """)
        ///             .build());
        /// 
        ///         var mongoService = new Service("mongoService", ServiceArgs.builder()        
        ///             .cluster(foo.id())
        ///             .desiredCount(2)
        ///             .taskDefinition(mongoTaskDefinition.applyValue(getTaskDefinitionResult -&gt; getTaskDefinitionResult.arn()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTaskDefinitionResult> InvokeAsync(GetTaskDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskDefinitionResult>("aws:ecs/getTaskDefinition:getTaskDefinition", args ?? new GetTaskDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// The ECS task definition data source allows access to details of
        /// a specific AWS ECS task definition.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const mongoTaskDefinition = aws.ecs.getTaskDefinition({
        ///     taskDefinition: mongoEcs / taskDefinitionTaskDefinition.family,
        /// });
        /// const foo = new aws.ecs.Cluster("foo", {});
        /// const mongoEcs_taskDefinitionTaskDefinition = new aws.ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", {
        ///     family: "mongodb",
        ///     containerDefinitions: `[
        ///   {
        ///     "cpu": 128,
        ///     "environment": [{
        ///       "name": "SECRET",
        ///       "value": "KEY"
        ///     }],
        ///     "essential": true,
        ///     "image": "mongo:latest",
        ///     "memory": 128,
        ///     "memoryReservation": 64,
        ///     "name": "mongodb"
        ///   }
        /// ]
        /// `,
        /// });
        /// const mongoService = new aws.ecs.Service("mongoService", {
        ///     cluster: foo.id,
        ///     desiredCount: 2,
        ///     taskDefinition: mongoTaskDefinition.then(mongoTaskDefinition =&gt; mongoTaskDefinition.arn),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// mongo_task_definition = aws.ecs.get_task_definition(task_definition=mongo_ecs / task_definition_task_definition["family"])
        /// foo = aws.ecs.Cluster("foo")
        /// mongo_ecs_task_definition_task_definition = aws.ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition",
        ///     family="mongodb",
        ///     container_definitions="""[
        ///   {
        ///     "cpu": 128,
        ///     "environment": [{
        ///       "name": "SECRET",
        ///       "value": "KEY"
        ///     }],
        ///     "essential": true,
        ///     "image": "mongo:latest",
        ///     "memory": 128,
        ///     "memoryReservation": 64,
        ///     "name": "mongodb"
        ///   }
        /// ]
        /// """)
        /// mongo_service = aws.ecs.Service("mongoService",
        ///     cluster=foo.id,
        ///     desired_count=2,
        ///     task_definition=mongo_task_definition.arn)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var mongoTaskDefinition = Aws.Ecs.GetTaskDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = mongoEcs / taskDefinitionTaskDefinition.Family,
        ///     });
        /// 
        ///     var foo = new Aws.Ecs.Cluster("foo");
        /// 
        ///     var mongoEcs_taskDefinitionTaskDefinition = new Aws.Ecs.TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", new()
        ///     {
        ///         Family = "mongodb",
        ///         ContainerDefinitions = @"[
        ///   {
        ///     ""cpu"": 128,
        ///     ""environment"": [{
        ///       ""name"": ""SECRET"",
        ///       ""value"": ""KEY""
        ///     }],
        ///     ""essential"": true,
        ///     ""image"": ""mongo:latest"",
        ///     ""memory"": 128,
        ///     ""memoryReservation"": 64,
        ///     ""name"": ""mongodb""
        ///   }
        /// ]
        /// ",
        ///     });
        /// 
        ///     var mongoService = new Aws.Ecs.Service("mongoService", new()
        ///     {
        ///         Cluster = foo.Id,
        ///         DesiredCount = 2,
        ///         TaskDefinition = mongoTaskDefinition.Apply(getTaskDefinitionResult =&gt; getTaskDefinitionResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		mongoTaskDefinition, err := ecs.LookupTaskDefinition(ctx, &amp;ecs.LookupTaskDefinitionArgs{
        /// 			TaskDefinition: mongoEcs / taskDefinitionTaskDefinition.Family,
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		foo, err := ecs.NewCluster(ctx, "foo", nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ecs.NewTaskDefinition(ctx, "mongoEcs/taskDefinitionTaskDefinition", &amp;ecs.TaskDefinitionArgs{
        /// 			Family:               pulumi.String("mongodb"),
        /// 			ContainerDefinitions: pulumi.String("[\n  {\n    \"cpu\": 128,\n    \"environment\": [{\n      \"name\": \"SECRET\",\n      \"value\": \"KEY\"\n    }],\n    \"essential\": true,\n    \"image\": \"mongo:latest\",\n    \"memory\": 128,\n    \"memoryReservation\": 64,\n    \"name\": \"mongodb\"\n  }\n]\n"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ecs.NewService(ctx, "mongoService", &amp;ecs.ServiceArgs{
        /// 			Cluster:        foo.ID(),
        /// 			DesiredCount:   pulumi.Int(2),
        /// 			TaskDefinition: *pulumi.String(mongoTaskDefinition.Arn),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecs.EcsFunctions;
        /// import com.pulumi.aws.ecs.inputs.GetTaskDefinitionArgs;
        /// import com.pulumi.aws.ecs.Cluster;
        /// import com.pulumi.aws.ecs.TaskDefinition;
        /// import com.pulumi.aws.ecs.TaskDefinitionArgs;
        /// import com.pulumi.aws.ecs.Service;
        /// import com.pulumi.aws.ecs.ServiceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var mongoTaskDefinition = EcsFunctions.getTaskDefinition(GetTaskDefinitionArgs.builder()
        ///             .taskDefinition(mongoEcs / taskDefinitionTaskDefinition.family())
        ///             .build());
        /// 
        ///         var foo = new Cluster("foo");
        /// 
        ///         var mongoEcs_taskDefinitionTaskDefinition = new TaskDefinition("mongoEcs/taskDefinitionTaskDefinition", TaskDefinitionArgs.builder()        
        ///             .family("mongodb")
        ///             .containerDefinitions("""
        /// [
        ///   {
        ///     "cpu": 128,
        ///     "environment": [{
        ///       "name": "SECRET",
        ///       "value": "KEY"
        ///     }],
        ///     "essential": true,
        ///     "image": "mongo:latest",
        ///     "memory": 128,
        ///     "memoryReservation": 64,
        ///     "name": "mongodb"
        ///   }
        /// ]
        ///             """)
        ///             .build());
        /// 
        ///         var mongoService = new Service("mongoService", ServiceArgs.builder()        
        ///             .cluster(foo.id())
        ///             .desiredCount(2)
        ///             .taskDefinition(mongoTaskDefinition.applyValue(getTaskDefinitionResult -&gt; getTaskDefinitionResult.arn()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTaskDefinitionResult> Invoke(GetTaskDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskDefinitionResult>("aws:ecs/getTaskDefinition:getTaskDefinition", args ?? new GetTaskDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
        /// </summary>
        [Input("taskDefinition", required: true)]
        public string TaskDefinition { get; set; } = null!;

        public GetTaskDefinitionArgs()
        {
        }
        public static new GetTaskDefinitionArgs Empty => new GetTaskDefinitionArgs();
    }

    public sealed class GetTaskDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Family for the latest ACTIVE revision, family and revision (family:revision) for a specific revision in the family, the ARN of the task definition to access to.
        /// </summary>
        [Input("taskDefinition", required: true)]
        public Input<string> TaskDefinition { get; set; } = null!;

        public GetTaskDefinitionInvokeArgs()
        {
        }
        public static new GetTaskDefinitionInvokeArgs Empty => new GetTaskDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskDefinitionResult
    {
        /// <summary>
        /// ARN of the task definition.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
        /// </summary>
        public readonly string ArnWithoutRevision;
        /// <summary>
        /// ARN of the task execution role that the Amazon ECS container agent and the Docker.
        /// </summary>
        public readonly string ExecutionRoleArn;
        /// <summary>
        /// Family of this task definition.
        /// </summary>
        public readonly string Family;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Docker networking mode to use for the containers in this task.
        /// </summary>
        public readonly string NetworkMode;
        /// <summary>
        /// Revision of this task definition.
        /// </summary>
        public readonly int Revision;
        /// <summary>
        /// Status of this task definition.
        /// </summary>
        public readonly string Status;
        public readonly string TaskDefinition;
        /// <summary>
        /// ARN of the IAM role that containers in this task can assume.
        /// </summary>
        public readonly string TaskRoleArn;

        [OutputConstructor]
        private GetTaskDefinitionResult(
            string arn,

            string arnWithoutRevision,

            string executionRoleArn,

            string family,

            string id,

            string networkMode,

            int revision,

            string status,

            string taskDefinition,

            string taskRoleArn)
        {
            Arn = arn;
            ArnWithoutRevision = arnWithoutRevision;
            ExecutionRoleArn = executionRoleArn;
            Family = family;
            Id = id;
            NetworkMode = networkMode;
            Revision = revision;
            Status = status;
            TaskDefinition = taskDefinition;
            TaskRoleArn = taskRoleArn;
        }
    }
}
