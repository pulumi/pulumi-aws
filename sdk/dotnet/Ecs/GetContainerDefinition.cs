// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecs
{
    public static class GetContainerDefinition
    {
        /// <summary>
        /// The ECS container definition data source allows access to details of
        /// a specific container within an AWS ECS service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ecs-mongo = aws.ecs.getContainerDefinition({
        ///     taskDefinition: aws_ecs_task_definition.mongo.id,
        ///     containerName: "mongodb",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ecs_mongo = aws.ecs.get_container_definition(task_definition=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///     container_name="mongodb")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ecs_mongo = Aws.Ecs.GetContainerDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = aws_ecs_task_definition.Mongo.Id,
        ///         ContainerName = "mongodb",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecs.GetContainerDefinition(ctx, &amp;ecs.GetContainerDefinitionArgs{
        /// 			TaskDefinition: aws_ecs_task_definition.Mongo.Id,
        /// 			ContainerName:  "mongodb",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecs.EcsFunctions;
        /// import com.pulumi.aws.ecs.inputs.GetContainerDefinitionArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var ecs-mongo = EcsFunctions.getContainerDefinition(GetContainerDefinitionArgs.builder()
        ///             .taskDefinition(aws_ecs_task_definition.mongo().id())
        ///             .containerName("mongodb")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   ecs-mongo:
        ///     fn::invoke:
        ///       Function: aws:ecs:getContainerDefinition
        ///       Arguments:
        ///         taskDefinition: ${aws_ecs_task_definition.mongo.id}
        ///         containerName: mongodb
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetContainerDefinitionResult> InvokeAsync(GetContainerDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetContainerDefinitionResult>("aws:ecs/getContainerDefinition:getContainerDefinition", args ?? new GetContainerDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// The ECS container definition data source allows access to details of
        /// a specific container within an AWS ECS service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ecs-mongo = aws.ecs.getContainerDefinition({
        ///     taskDefinition: aws_ecs_task_definition.mongo.id,
        ///     containerName: "mongodb",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ecs_mongo = aws.ecs.get_container_definition(task_definition=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///     container_name="mongodb")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ecs_mongo = Aws.Ecs.GetContainerDefinition.Invoke(new()
        ///     {
        ///         TaskDefinition = aws_ecs_task_definition.Mongo.Id,
        ///         ContainerName = "mongodb",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecs.GetContainerDefinition(ctx, &amp;ecs.GetContainerDefinitionArgs{
        /// 			TaskDefinition: aws_ecs_task_definition.Mongo.Id,
        /// 			ContainerName:  "mongodb",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecs.EcsFunctions;
        /// import com.pulumi.aws.ecs.inputs.GetContainerDefinitionArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var ecs-mongo = EcsFunctions.getContainerDefinition(GetContainerDefinitionArgs.builder()
        ///             .taskDefinition(aws_ecs_task_definition.mongo().id())
        ///             .containerName("mongodb")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   ecs-mongo:
        ///     fn::invoke:
        ///       Function: aws:ecs:getContainerDefinition
        ///       Arguments:
        ///         taskDefinition: ${aws_ecs_task_definition.mongo.id}
        ///         containerName: mongodb
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetContainerDefinitionResult> Invoke(GetContainerDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetContainerDefinitionResult>("aws:ecs/getContainerDefinition:getContainerDefinition", args ?? new GetContainerDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetContainerDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the container definition
        /// </summary>
        [Input("containerName", required: true)]
        public string ContainerName { get; set; } = null!;

        /// <summary>
        /// ARN of the task definition which contains the container
        /// </summary>
        [Input("taskDefinition", required: true)]
        public string TaskDefinition { get; set; } = null!;

        public GetContainerDefinitionArgs()
        {
        }
        public static new GetContainerDefinitionArgs Empty => new GetContainerDefinitionArgs();
    }

    public sealed class GetContainerDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the container definition
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        /// <summary>
        /// ARN of the task definition which contains the container
        /// </summary>
        [Input("taskDefinition", required: true)]
        public Input<string> TaskDefinition { get; set; } = null!;

        public GetContainerDefinitionInvokeArgs()
        {
        }
        public static new GetContainerDefinitionInvokeArgs Empty => new GetContainerDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetContainerDefinitionResult
    {
        public readonly string ContainerName;
        /// <summary>
        /// CPU limit for this container definition
        /// </summary>
        public readonly int Cpu;
        /// <summary>
        /// Indicator if networking is disabled
        /// </summary>
        public readonly bool DisableNetworking;
        /// <summary>
        /// Set docker labels
        /// </summary>
        public readonly ImmutableDictionary<string, string> DockerLabels;
        /// <summary>
        /// Environment in use
        /// </summary>
        public readonly ImmutableDictionary<string, string> Environment;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Docker image in use, including the digest
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Digest of the docker image in use
        /// </summary>
        public readonly string ImageDigest;
        /// <summary>
        /// Memory limit for this container definition
        /// </summary>
        public readonly int Memory;
        /// <summary>
        /// Soft limit (in MiB) of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory to this soft limit
        /// </summary>
        public readonly int MemoryReservation;
        public readonly string TaskDefinition;

        [OutputConstructor]
        private GetContainerDefinitionResult(
            string containerName,

            int cpu,

            bool disableNetworking,

            ImmutableDictionary<string, string> dockerLabels,

            ImmutableDictionary<string, string> environment,

            string id,

            string image,

            string imageDigest,

            int memory,

            int memoryReservation,

            string taskDefinition)
        {
            ContainerName = containerName;
            Cpu = cpu;
            DisableNetworking = disableNetworking;
            DockerLabels = dockerLabels;
            Environment = environment;
            Id = id;
            Image = image;
            ImageDigest = imageDigest;
            Memory = memory;
            MemoryReservation = memoryReservation;
            TaskDefinition = taskDefinition;
        }
    }
}
