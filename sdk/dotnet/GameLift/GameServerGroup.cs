// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.GameLift
{
    [AwsResourceType("aws:gamelift/gameServerGroup:GameServerGroup")]
    public partial class GameServerGroup : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("autoScalingGroupArn")]
        public Output<string> AutoScalingGroupArn { get; private set; } = null!;

        [Output("autoScalingPolicy")]
        public Output<Outputs.GameServerGroupAutoScalingPolicy?> AutoScalingPolicy { get; private set; } = null!;

        [Output("balancingStrategy")]
        public Output<string> BalancingStrategy { get; private set; } = null!;

        [Output("gameServerGroupName")]
        public Output<string> GameServerGroupName { get; private set; } = null!;

        [Output("gameServerProtectionPolicy")]
        public Output<string> GameServerProtectionPolicy { get; private set; } = null!;

        [Output("instanceDefinitions")]
        public Output<ImmutableArray<Outputs.GameServerGroupInstanceDefinition>> InstanceDefinitions { get; private set; } = null!;

        [Output("launchTemplate")]
        public Output<Outputs.GameServerGroupLaunchTemplate> LaunchTemplate { get; private set; } = null!;

        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        [Output("minSize")]
        public Output<int> MinSize { get; private set; } = null!;

        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("vpcSubnets")]
        public Output<ImmutableArray<string>> VpcSubnets { get; private set; } = null!;


        /// <summary>
        /// Create a GameServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GameServerGroup(string name, GameServerGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:gamelift/gameServerGroup:GameServerGroup", name, args ?? new GameServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GameServerGroup(string name, Input<string> id, GameServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:gamelift/gameServerGroup:GameServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GameServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GameServerGroup Get(string name, Input<string> id, GameServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new GameServerGroup(name, id, state, options);
        }
    }

    public sealed class GameServerGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoScalingPolicy")]
        public Input<Inputs.GameServerGroupAutoScalingPolicyArgs>? AutoScalingPolicy { get; set; }

        [Input("balancingStrategy")]
        public Input<string>? BalancingStrategy { get; set; }

        [Input("gameServerGroupName", required: true)]
        public Input<string> GameServerGroupName { get; set; } = null!;

        [Input("gameServerProtectionPolicy")]
        public Input<string>? GameServerProtectionPolicy { get; set; }

        [Input("instanceDefinitions", required: true)]
        private InputList<Inputs.GameServerGroupInstanceDefinitionArgs>? _instanceDefinitions;
        public InputList<Inputs.GameServerGroupInstanceDefinitionArgs> InstanceDefinitions
        {
            get => _instanceDefinitions ?? (_instanceDefinitions = new InputList<Inputs.GameServerGroupInstanceDefinitionArgs>());
            set => _instanceDefinitions = value;
        }

        [Input("launchTemplate", required: true)]
        public Input<Inputs.GameServerGroupLaunchTemplateArgs> LaunchTemplate { get; set; } = null!;

        [Input("maxSize", required: true)]
        public Input<int> MaxSize { get; set; } = null!;

        [Input("minSize", required: true)]
        public Input<int> MinSize { get; set; } = null!;

        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcSubnets")]
        private InputList<string>? _vpcSubnets;
        public InputList<string> VpcSubnets
        {
            get => _vpcSubnets ?? (_vpcSubnets = new InputList<string>());
            set => _vpcSubnets = value;
        }

        public GameServerGroupArgs()
        {
        }
        public static new GameServerGroupArgs Empty => new GameServerGroupArgs();
    }

    public sealed class GameServerGroupState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("autoScalingGroupArn")]
        public Input<string>? AutoScalingGroupArn { get; set; }

        [Input("autoScalingPolicy")]
        public Input<Inputs.GameServerGroupAutoScalingPolicyGetArgs>? AutoScalingPolicy { get; set; }

        [Input("balancingStrategy")]
        public Input<string>? BalancingStrategy { get; set; }

        [Input("gameServerGroupName")]
        public Input<string>? GameServerGroupName { get; set; }

        [Input("gameServerProtectionPolicy")]
        public Input<string>? GameServerProtectionPolicy { get; set; }

        [Input("instanceDefinitions")]
        private InputList<Inputs.GameServerGroupInstanceDefinitionGetArgs>? _instanceDefinitions;
        public InputList<Inputs.GameServerGroupInstanceDefinitionGetArgs> InstanceDefinitions
        {
            get => _instanceDefinitions ?? (_instanceDefinitions = new InputList<Inputs.GameServerGroupInstanceDefinitionGetArgs>());
            set => _instanceDefinitions = value;
        }

        [Input("launchTemplate")]
        public Input<Inputs.GameServerGroupLaunchTemplateGetArgs>? LaunchTemplate { get; set; }

        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("vpcSubnets")]
        private InputList<string>? _vpcSubnets;
        public InputList<string> VpcSubnets
        {
            get => _vpcSubnets ?? (_vpcSubnets = new InputList<string>());
            set => _vpcSubnets = value;
        }

        public GameServerGroupState()
        {
        }
        public static new GameServerGroupState Empty => new GameServerGroupState();
    }
}
