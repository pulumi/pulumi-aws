// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.GameLift
{
    /// <summary>
    /// Provides a GameLift Matchmaking Rule Set resources.
    /// 
    /// ## Import
    /// 
    /// GameLift Matchmaking Rule Sets
    /// 
    /// can be imported using the ID, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet example &lt;ruleset-id&gt;
    /// ```
    /// </summary>
    [AwsResourceType("aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet")]
    public partial class MatchmakingRuleSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Rule Set ARN.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Name of the matchmaking rule set.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// JSON encoded string containing rule set data.
        /// </summary>
        [Output("ruleSetBody")]
        public Output<string> RuleSetBody { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a MatchmakingRuleSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MatchmakingRuleSet(string name, MatchmakingRuleSetArgs args, CustomResourceOptions? options = null)
            : base("aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet", name, args ?? new MatchmakingRuleSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MatchmakingRuleSet(string name, Input<string> id, MatchmakingRuleSetState? state = null, CustomResourceOptions? options = null)
            : base("aws:gamelift/matchmakingRuleSet:MatchmakingRuleSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MatchmakingRuleSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MatchmakingRuleSet Get(string name, Input<string> id, MatchmakingRuleSetState? state = null, CustomResourceOptions? options = null)
        {
            return new MatchmakingRuleSet(name, id, state, options);
        }
    }

    public sealed class MatchmakingRuleSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the matchmaking rule set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// JSON encoded string containing rule set data.
        /// </summary>
        [Input("ruleSetBody", required: true)]
        public Input<string> RuleSetBody { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public MatchmakingRuleSetArgs()
        {
        }
        public static new MatchmakingRuleSetArgs Empty => new MatchmakingRuleSetArgs();
    }

    public sealed class MatchmakingRuleSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Rule Set ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Name of the matchmaking rule set.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// JSON encoded string containing rule set data.
        /// </summary>
        [Input("ruleSetBody")]
        public Input<string>? RuleSetBody { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public MatchmakingRuleSetState()
        {
        }
        public static new MatchmakingRuleSetState Empty => new MatchmakingRuleSetState();
    }
}
