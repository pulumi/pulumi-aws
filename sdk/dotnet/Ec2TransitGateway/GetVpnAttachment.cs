// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    public static class GetVpnAttachment
    {
        /// <summary>
        /// Get information on an EC2 Transit Gateway VPN Attachment.
        /// 
        /// &gt; EC2 Transit Gateway VPN Attachments are implicitly created by VPN Connections referencing an EC2 Transit Gateway so there is no managed resource. For ease, the [`aws.ec2.VpnConnection` resource](https://www.terraform.io/docs/providers/aws/r/vpn_connection.html) includes a `transit_gateway_attachment_id` attribute which can replace some usage of this data source. For tagging the attachment, see the [`aws.ec2.Tag` resource](https://www.terraform.io/docs/providers/aws/r/ec2_tag.html).
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### By Transit Gateway and VPN Connection Identifiers
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Ec2TransitGateway.GetVpnAttachment.InvokeAsync(new Aws.Ec2TransitGateway.GetVpnAttachmentArgs
        ///         {
        ///             TransitGatewayId = aws_ec2_transit_gateway.Example.Id,
        ///             VpnConnectionId = aws_vpn_connection.Example.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.Ec2TransitGateway.GetVpnAttachment.InvokeAsync(new Aws.Ec2TransitGateway.GetVpnAttachmentArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2TransitGateway.Inputs.GetVpnAttachmentFilterArgs
        ///                 {
        ///                     Name = "resource-id",
        ///                     Values = 
        ///                     {
        ///                         "some-resource",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpnAttachmentResult> InvokeAsync(GetVpnAttachmentArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpnAttachmentResult>("aws:ec2transitgateway/getVpnAttachment:getVpnAttachment", args ?? new GetVpnAttachmentArgs(), options.WithVersion());
    }


    public sealed class GetVpnAttachmentArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpnAttachmentFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetVpnAttachmentFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpnAttachmentFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags, each pair of which must exactly match a pair on the desired Transit Gateway VPN Attachment.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// Identifier of the EC2 Transit Gateway.
        /// </summary>
        [Input("transitGatewayId")]
        public string? TransitGatewayId { get; set; }

        /// <summary>
        /// Identifier of the EC2 VPN Connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public string? VpnConnectionId { get; set; }

        public GetVpnAttachmentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVpnAttachmentResult
    {
        public readonly ImmutableArray<Outputs.GetVpnAttachmentFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Key-value tags for the EC2 Transit Gateway VPN Attachment
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string? TransitGatewayId;
        public readonly string? VpnConnectionId;

        [OutputConstructor]
        private GetVpnAttachmentResult(
            ImmutableArray<Outputs.GetVpnAttachmentFilterResult> filters,

            string id,

            ImmutableDictionary<string, string> tags,

            string? transitGatewayId,

            string? vpnConnectionId)
        {
            Filters = filters;
            Id = id;
            Tags = tags;
            TransitGatewayId = transitGatewayId;
            VpnConnectionId = vpnConnectionId;
        }
    }
}
