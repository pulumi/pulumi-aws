// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    public static class GetTransitGateway
    {
        public static Task<GetTransitGatewayResult> InvokeAsync(GetTransitGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransitGatewayResult>("aws:ec2transitgateway/getTransitGateway:getTransitGateway", args ?? new GetTransitGatewayArgs(), options.WithDefaults());

        public static Output<GetTransitGatewayResult> Invoke(GetTransitGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransitGatewayResult>("aws:ec2transitgateway/getTransitGateway:getTransitGateway", args ?? new GetTransitGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransitGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetTransitGatewayFilterArgs>? _filters;
        public List<Inputs.GetTransitGatewayFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetTransitGatewayFilterArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetTransitGatewayArgs()
        {
        }
        public static new GetTransitGatewayArgs Empty => new GetTransitGatewayArgs();
    }

    public sealed class GetTransitGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetTransitGatewayFilterInputArgs>? _filters;
        public InputList<Inputs.GetTransitGatewayFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetTransitGatewayFilterInputArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetTransitGatewayInvokeArgs()
        {
        }
        public static new GetTransitGatewayInvokeArgs Empty => new GetTransitGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransitGatewayResult
    {
        public readonly int AmazonSideAsn;
        public readonly string Arn;
        public readonly string AssociationDefaultRouteTableId;
        public readonly string AutoAcceptSharedAttachments;
        public readonly string DefaultRouteTableAssociation;
        public readonly string DefaultRouteTablePropagation;
        public readonly string Description;
        public readonly string DnsSupport;
        public readonly ImmutableArray<Outputs.GetTransitGatewayFilterResult> Filters;
        public readonly string Id;
        public readonly string MulticastSupport;
        public readonly string OwnerId;
        public readonly string PropagationDefaultRouteTableId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<string> TransitGatewayCidrBlocks;
        public readonly string VpnEcmpSupport;

        [OutputConstructor]
        private GetTransitGatewayResult(
            int amazonSideAsn,

            string arn,

            string associationDefaultRouteTableId,

            string autoAcceptSharedAttachments,

            string defaultRouteTableAssociation,

            string defaultRouteTablePropagation,

            string description,

            string dnsSupport,

            ImmutableArray<Outputs.GetTransitGatewayFilterResult> filters,

            string id,

            string multicastSupport,

            string ownerId,

            string propagationDefaultRouteTableId,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<string> transitGatewayCidrBlocks,

            string vpnEcmpSupport)
        {
            AmazonSideAsn = amazonSideAsn;
            Arn = arn;
            AssociationDefaultRouteTableId = associationDefaultRouteTableId;
            AutoAcceptSharedAttachments = autoAcceptSharedAttachments;
            DefaultRouteTableAssociation = defaultRouteTableAssociation;
            DefaultRouteTablePropagation = defaultRouteTablePropagation;
            Description = description;
            DnsSupport = dnsSupport;
            Filters = filters;
            Id = id;
            MulticastSupport = multicastSupport;
            OwnerId = ownerId;
            PropagationDefaultRouteTableId = propagationDefaultRouteTableId;
            Tags = tags;
            TransitGatewayCidrBlocks = transitGatewayCidrBlocks;
            VpnEcmpSupport = vpnEcmpSupport;
        }
    }
}
