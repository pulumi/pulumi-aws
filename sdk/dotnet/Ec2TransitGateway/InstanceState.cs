// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    /// <summary>
    /// Provides an EC2 instance state resource. This allows managing an instance power state.
    /// 
    /// &gt; **NOTE on Instance State Management:** AWS does not currently have an EC2 API operation to determine an instance has finished processing user data. As a result, this resource can interfere with user data processing. For example, this resource may stop an instance while the user data script is in mid run.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ubuntu = Aws.Ec2.GetAmi.Invoke(new()
    ///     {
    ///         MostRecent = true,
    ///         Filters = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.GetAmiFilterInputArgs
    ///             {
    ///                 Name = "name",
    ///                 Values = new[]
    ///                 {
    ///                     "ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*",
    ///                 },
    ///             },
    ///             new Aws.Ec2.Inputs.GetAmiFilterInputArgs
    ///             {
    ///                 Name = "virtualization-type",
    ///                 Values = new[]
    ///                 {
    ///                     "hvm",
    ///                 },
    ///             },
    ///         },
    ///         Owners = new[]
    ///         {
    ///             "099720109477",
    ///         },
    ///     });
    /// 
    ///     var testInstance = new Aws.Ec2.Instance("testInstance", new()
    ///     {
    ///         Ami = ubuntu.Apply(getAmiResult =&gt; getAmiResult.Id),
    ///         InstanceType = "t3.micro",
    ///         Tags = 
    ///         {
    ///             { "Name", "HelloWorld" },
    ///         },
    ///     });
    /// 
    ///     var testInstanceState = new Aws.Ec2TransitGateway.InstanceState("testInstanceState", new()
    ///     {
    ///         InstanceId = testInstance.Id,
    ///         State = "stopped",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_ec2_instance_state.test
    /// 
    ///  id = "i-02cae6557dfcf2f96" } Using `pulumi import`, import `aws_ec2_instance_state` using the `instance_id` attribute. For exampleconsole % pulumi import aws_ec2_instance_state.test i-02cae6557dfcf2f96
    /// </summary>
    [AwsResourceType("aws:ec2transitgateway/instanceState:InstanceState")]
    public partial class InstanceState : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
        /// </summary>
        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        /// <summary>
        /// ID of the instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// State of the instance. Valid values are `stopped`, `running`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceState resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceState(string name, InstanceStateArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2transitgateway/instanceState:InstanceState", name, args ?? new InstanceStateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceState(string name, Input<string> id, InstanceStateState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2transitgateway/instanceState:InstanceState", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceState resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceState Get(string name, Input<string> id, InstanceStateState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceState(name, id, state, options);
        }
    }

    public sealed class InstanceStateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// ID of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// State of the instance. Valid values are `stopped`, `running`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("state", required: true)]
        public Input<string> State { get; set; } = null!;

        public InstanceStateArgs()
        {
        }
        public static new InstanceStateArgs Empty => new InstanceStateArgs();
    }

    public sealed class InstanceStateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to request a forced stop when `state` is `stopped`. Otherwise (_i.e._, `state` is `running`), ignored. When an instance is forced to stop, it does not flush file system caches or file system metadata, and you must subsequently perform file system check and repair. Not recommended for Windows instances. Defaults to `false`.
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// ID of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// State of the instance. Valid values are `stopped`, `running`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public InstanceStateState()
        {
        }
        public static new InstanceStateState Empty => new InstanceStateState();
    }
}
