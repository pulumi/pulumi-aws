// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    public static class GetRouteTableRoutes
    {
        /// <summary>
        /// Provides informations for routes of a specific transit gateway, such as state, type, cidr
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Complexe use case with transit gateway peering
        /// 
        /// This example allow to create a mesh of transit gateway for diff√©rent regions routing all traffic to on-prem VPN
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = new Aws.Ec2TransitGateway.TransitGateway("this", new()
        ///     {
        ///         DefaultRouteTableAssociation = "disable",
        ///         DefaultRouteTablePropagation = "disable",
        ///     });
        /// 
        ///     var thisVpcAttachment = new Aws.Ec2TransitGateway.VpcAttachment("this", new()
        ///     {
        ///         SubnetIds = .Select(s =&gt; 
        ///         {
        ///             return s.Id;
        ///         }).ToList(),
        ///         TransitGatewayId = @this[0].Id,
        ///         VpcId = thisAwsVpc.Id,
        ///         TransitGatewayDefaultRouteTableAssociation = false,
        ///         TransitGatewayDefaultRouteTablePropagation = false,
        ///     });
        /// 
        ///     var thisRouteTable = new Aws.Ec2TransitGateway.RouteTable("this", new()
        ///     {
        ///         TransitGatewayId = myTransitGatewayId,
        ///     });
        /// 
        ///     var vpc = new Aws.Ec2TransitGateway.RouteTableAssociation("vpc", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisVpcAttachment.Id,
        ///         TransitGatewayRouteTableId = myTransitGatewayIdRouteTable,
        ///     });
        /// 
        ///     var vpn = new Aws.Ec2TransitGateway.RouteTableAssociation("vpn", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisAwsVpnConnection[0].TransitGatewayAttachmentId,
        ///         TransitGatewayRouteTableId = myTransitGatewayIdRouteTable,
        ///     });
        /// 
        ///     var vpcRouteTablePropagation = new Aws.Ec2TransitGateway.RouteTablePropagation("vpc", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisVpcAttachment.Id,
        ///         TransitGatewayRouteTableId = thisRouteTable.Id,
        ///     });
        /// 
        ///     var vpnRouteTablePropagation = new Aws.Ec2TransitGateway.RouteTablePropagation("vpn", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisAwsVpnConnection[0].TransitGatewayAttachmentId,
        ///         TransitGatewayRouteTableId = thisRouteTable.Id,
        ///     });
        /// 
        ///     var eu_central_1 = new Aws.Ec2TransitGateway.TransitGateway("eu-central-1", new()
        ///     {
        ///         DefaultRouteTableAssociation = "disable",
        ///         DefaultRouteTablePropagation = "disable",
        ///     });
        /// 
        ///     var eu_central_1PeeringAttachment = new Aws.Ec2TransitGateway.PeeringAttachment("eu-central-1", new()
        ///     {
        ///         PeerRegion = "eu-central-1",
        ///         PeerTransitGatewayId = eu_central_1.Id,
        ///         TransitGatewayId = @this[0].Id,
        ///         Tags = 
        ///         {
        ///             { "Name", "TGW mesh from eu-central-1" },
        ///         },
        ///     });
        /// 
        ///     var eu_central_1RouteTable = new Aws.Ec2TransitGateway.RouteTable("eu-central-1", new()
        ///     {
        ///         TransitGatewayId = eu_central_1.Id,
        ///         Tags = NotImplemented("merge({Name=\"wl-transit-gateway-routetable-eu-central-1\"},local.global_tags)"),
        ///     });
        /// 
        ///     var eu_central_1PeeringAttachmentAccepter = new Aws.Ec2TransitGateway.PeeringAttachmentAccepter("eu-central-1", new()
        ///     {
        ///         TransitGatewayAttachmentId = eu_central_1PeeringAttachment.Id,
        ///         Tags = 
        ///         {
        ///             { "Name", "Accepter TGW peering eu-central-1" },
        ///         },
        ///     });
        /// 
        ///     var filtered_eu_central_1 = Aws.Ec2TransitGateway.GetVpcAttachments.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetVpcAttachmentsFilterInputArgs
        ///             {
        ///                 Name = "state",
        ///                 Values = new[]
        ///                 {
        ///                     "pendingAcceptance",
        ///                     "available",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var unit_eu_central_1 = .ToDictionary(item =&gt; {
        ///         var __key = item.Key;
        ///         return __key;
        ///     }, item =&gt; {
        ///         var __value = item.Value;
        ///         return Aws.Ec2TransitGateway.GetVpcAttachment.Invoke(new()
        ///         {
        ///             Id = __value,
        ///         });
        ///     });
        /// 
        ///     var trustedAwsAccountsIds = null;
        /// 
        ///     var trustedVpcAttachmentsListEu_central_1 = NotImplemented("compact([fork,tvaindata.aws_ec2_transit_gateway_vpc_attachment.unit-eu-central-1:contains(local.trusted_aws_accounts_ids,lookup(tva,\"vpc_owner_id\",\"\"))?tva.id:\"\"])");
        /// 
        ///     //# create a map with all vpc attachments trusted to be able to use for_each to avoid conflict on plan/apply ##
        ///     var trustedVpcAttachementsEu_central_1 = NotImplemented("toset(sort(local.trusted_vpc_attachments_list_eu-central-1))");
        /// 
        ///     var trustedAccountsEu_central_1Tgw = new List&lt;Aws.Ec2TransitGateway.VpcAttachmentAccepter&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; trustedVpcAttachementsEu_central_1; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         trustedAccountsEu_central_1Tgw.Add(new Aws.Ec2TransitGateway.VpcAttachmentAccepter($"trusted_accounts_eu-central-1_tgw-{range.Value}", new()
        ///         {
        ///             TransitGatewayAttachmentId = range.Value,
        ///             TransitGatewayDefaultRouteTablePropagation = false,
        ///             TransitGatewayDefaultRouteTableAssociation = false,
        ///             Tags = globalTags,
        ///         }));
        ///     }
        ///     var trustedAccountsEu_central_1 = new List&lt;Aws.Ec2TransitGateway.RouteTableAssociation&gt;();
        ///     foreach (var range in trustedAccountsEu_central_1Tgw.Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         trustedAccountsEu_central_1.Add(new Aws.Ec2TransitGateway.RouteTableAssociation($"trusted_accounts_eu-central-1-{range.Key}", new()
        ///         {
        ///             TransitGatewayAttachmentId = range.Value.TransitGatewayAttachmentId,
        ///             TransitGatewayRouteTableId = eu_central_1RouteTable.Id,
        ///         }));
        ///     }
        ///     var trustedAccountsEu_central_1RouteTablePropagation = new List&lt;Aws.Ec2TransitGateway.RouteTablePropagation&gt;();
        ///     foreach (var range in trustedAccountsEu_central_1Tgw.Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         trustedAccountsEu_central_1RouteTablePropagation.Add(new Aws.Ec2TransitGateway.RouteTablePropagation($"trusted_accounts_eu-central-1-{range.Key}", new()
        ///         {
        ///             TransitGatewayAttachmentId = range.Value.TransitGatewayAttachmentId,
        ///             TransitGatewayRouteTableId = eu_central_1RouteTable.Id,
        ///         }));
        ///     }
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = eu_central_1RouteTable.Id,
        ///     });
        /// 
        ///     var default_region_to_eu_central_1 = new List&lt;Aws.Ec2TransitGateway.Route&gt;();
        ///     foreach (var range in .Select(pair =&gt; new { pair.Key, pair.Value }))
        ///     {
        ///         default_region_to_eu_central_1.Add(new Aws.Ec2TransitGateway.Route($"default-region-to-eu-central-1-{range.Key}", new()
        ///         {
        ///             DestinationCidrBlock = range.Key,
        ///             TransitGatewayRouteTableId = thisRouteTable.Id,
        ///             TransitGatewayAttachmentId = eu_central_1PeeringAttachment.Id,
        ///         }));
        ///     }
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRouteTableRoutesResult> InvokeAsync(GetRouteTableRoutesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableRoutesResult>("aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes", args ?? new GetRouteTableRoutesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides informations for routes of a specific transit gateway, such as state, type, cidr
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Complexe use case with transit gateway peering
        /// 
        /// This example allow to create a mesh of transit gateway for diff√©rent regions routing all traffic to on-prem VPN
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = new Aws.Ec2TransitGateway.TransitGateway("this", new()
        ///     {
        ///         DefaultRouteTableAssociation = "disable",
        ///         DefaultRouteTablePropagation = "disable",
        ///     });
        /// 
        ///     var thisVpcAttachment = new Aws.Ec2TransitGateway.VpcAttachment("this", new()
        ///     {
        ///         SubnetIds = .Select(s =&gt; 
        ///         {
        ///             return s.Id;
        ///         }).ToList(),
        ///         TransitGatewayId = @this[0].Id,
        ///         VpcId = thisAwsVpc.Id,
        ///         TransitGatewayDefaultRouteTableAssociation = false,
        ///         TransitGatewayDefaultRouteTablePropagation = false,
        ///     });
        /// 
        ///     var thisRouteTable = new Aws.Ec2TransitGateway.RouteTable("this", new()
        ///     {
        ///         TransitGatewayId = myTransitGatewayId,
        ///     });
        /// 
        ///     var vpc = new Aws.Ec2TransitGateway.RouteTableAssociation("vpc", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisVpcAttachment.Id,
        ///         TransitGatewayRouteTableId = myTransitGatewayIdRouteTable,
        ///     });
        /// 
        ///     var vpn = new Aws.Ec2TransitGateway.RouteTableAssociation("vpn", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisAwsVpnConnection[0].TransitGatewayAttachmentId,
        ///         TransitGatewayRouteTableId = myTransitGatewayIdRouteTable,
        ///     });
        /// 
        ///     var vpcRouteTablePropagation = new Aws.Ec2TransitGateway.RouteTablePropagation("vpc", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisVpcAttachment.Id,
        ///         TransitGatewayRouteTableId = thisRouteTable.Id,
        ///     });
        /// 
        ///     var vpnRouteTablePropagation = new Aws.Ec2TransitGateway.RouteTablePropagation("vpn", new()
        ///     {
        ///         TransitGatewayAttachmentId = thisAwsVpnConnection[0].TransitGatewayAttachmentId,
        ///         TransitGatewayRouteTableId = thisRouteTable.Id,
        ///     });
        /// 
        ///     var eu_central_1 = new Aws.Ec2TransitGateway.TransitGateway("eu-central-1", new()
        ///     {
        ///         DefaultRouteTableAssociation = "disable",
        ///         DefaultRouteTablePropagation = "disable",
        ///     });
        /// 
        ///     var eu_central_1PeeringAttachment = new Aws.Ec2TransitGateway.PeeringAttachment("eu-central-1", new()
        ///     {
        ///         PeerRegion = "eu-central-1",
        ///         PeerTransitGatewayId = eu_central_1.Id,
        ///         TransitGatewayId = @this[0].Id,
        ///         Tags = 
        ///         {
        ///             { "Name", "TGW mesh from eu-central-1" },
        ///         },
        ///     });
        /// 
        ///     var eu_central_1RouteTable = new Aws.Ec2TransitGateway.RouteTable("eu-central-1", new()
        ///     {
        ///         TransitGatewayId = eu_central_1.Id,
        ///         Tags = NotImplemented("merge({Name=\"wl-transit-gateway-routetable-eu-central-1\"},local.global_tags)"),
        ///     });
        /// 
        ///     var eu_central_1PeeringAttachmentAccepter = new Aws.Ec2TransitGateway.PeeringAttachmentAccepter("eu-central-1", new()
        ///     {
        ///         TransitGatewayAttachmentId = eu_central_1PeeringAttachment.Id,
        ///         Tags = 
        ///         {
        ///             { "Name", "Accepter TGW peering eu-central-1" },
        ///         },
        ///     });
        /// 
        ///     var filtered_eu_central_1 = Aws.Ec2TransitGateway.GetVpcAttachments.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetVpcAttachmentsFilterInputArgs
        ///             {
        ///                 Name = "state",
        ///                 Values = new[]
        ///                 {
        ///                     "pendingAcceptance",
        ///                     "available",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var unit_eu_central_1 = .ToDictionary(item =&gt; {
        ///         var __key = item.Key;
        ///         return __key;
        ///     }, item =&gt; {
        ///         var __value = item.Value;
        ///         return Aws.Ec2TransitGateway.GetVpcAttachment.Invoke(new()
        ///         {
        ///             Id = __value,
        ///         });
        ///     });
        /// 
        ///     var trustedAwsAccountsIds = null;
        /// 
        ///     var trustedVpcAttachmentsListEu_central_1 = NotImplemented("compact([fork,tvaindata.aws_ec2_transit_gateway_vpc_attachment.unit-eu-central-1:contains(local.trusted_aws_accounts_ids,lookup(tva,\"vpc_owner_id\",\"\"))?tva.id:\"\"])");
        /// 
        ///     //# create a map with all vpc attachments trusted to be able to use for_each to avoid conflict on plan/apply ##
        ///     var trustedVpcAttachementsEu_central_1 = NotImplemented("toset(sort(local.trusted_vpc_attachments_list_eu-central-1))");
        /// 
        ///     var trustedAccountsEu_central_1Tgw = new List&lt;Aws.Ec2TransitGateway.VpcAttachmentAccepter&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; trustedVpcAttachementsEu_central_1; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         trustedAccountsEu_central_1Tgw.Add(new Aws.Ec2TransitGateway.VpcAttachmentAccepter($"trusted_accounts_eu-central-1_tgw-{range.Value}", new()
        ///         {
        ///             TransitGatewayAttachmentId = range.Value,
        ///             TransitGatewayDefaultRouteTablePropagation = false,
        ///             TransitGatewayDefaultRouteTableAssociation = false,
        ///             Tags = globalTags,
        ///         }));
        ///     }
        ///     var trustedAccountsEu_central_1 = new List&lt;Aws.Ec2TransitGateway.RouteTableAssociation&gt;();
        ///     foreach (var range in trustedAccountsEu_central_1Tgw.Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         trustedAccountsEu_central_1.Add(new Aws.Ec2TransitGateway.RouteTableAssociation($"trusted_accounts_eu-central-1-{range.Key}", new()
        ///         {
        ///             TransitGatewayAttachmentId = range.Value.TransitGatewayAttachmentId,
        ///             TransitGatewayRouteTableId = eu_central_1RouteTable.Id,
        ///         }));
        ///     }
        ///     var trustedAccountsEu_central_1RouteTablePropagation = new List&lt;Aws.Ec2TransitGateway.RouteTablePropagation&gt;();
        ///     foreach (var range in trustedAccountsEu_central_1Tgw.Select((v, k) =&gt; new { Key = k, Value = v }))
        ///     {
        ///         trustedAccountsEu_central_1RouteTablePropagation.Add(new Aws.Ec2TransitGateway.RouteTablePropagation($"trusted_accounts_eu-central-1-{range.Key}", new()
        ///         {
        ///             TransitGatewayAttachmentId = range.Value.TransitGatewayAttachmentId,
        ///             TransitGatewayRouteTableId = eu_central_1RouteTable.Id,
        ///         }));
        ///     }
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = eu_central_1RouteTable.Id,
        ///     });
        /// 
        ///     var default_region_to_eu_central_1 = new List&lt;Aws.Ec2TransitGateway.Route&gt;();
        ///     foreach (var range in .Select(pair =&gt; new { pair.Key, pair.Value }))
        ///     {
        ///         default_region_to_eu_central_1.Add(new Aws.Ec2TransitGateway.Route($"default-region-to-eu-central-1-{range.Key}", new()
        ///         {
        ///             DestinationCidrBlock = range.Key,
        ///             TransitGatewayRouteTableId = thisRouteTable.Id,
        ///             TransitGatewayAttachmentId = eu_central_1PeeringAttachment.Id,
        ///         }));
        ///     }
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRouteTableRoutesResult> Invoke(GetRouteTableRoutesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableRoutesResult>("aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes", args ?? new GetRouteTableRoutesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteTableRoutesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private List<Inputs.GetRouteTableRoutesFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetRouteTableRoutesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTableRoutesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Route Table.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        [Input("transitGatewayRouteTableId", required: true)]
        public string TransitGatewayRouteTableId { get; set; } = null!;

        public GetRouteTableRoutesArgs()
        {
        }
        public static new GetRouteTableRoutesArgs Empty => new GetRouteTableRoutesArgs();
    }

    public sealed class GetRouteTableRoutesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private InputList<Inputs.GetRouteTableRoutesFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetRouteTableRoutesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteTableRoutesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Route Table.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        [Input("transitGatewayRouteTableId", required: true)]
        public Input<string> TransitGatewayRouteTableId { get; set; } = null!;

        public GetRouteTableRoutesInvokeArgs()
        {
        }
        public static new GetRouteTableRoutesInvokeArgs Empty => new GetRouteTableRoutesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteTableRoutesResult
    {
        public readonly ImmutableArray<Outputs.GetRouteTableRoutesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of Transit Gateway Routes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableRoutesRouteResult> Routes;
        public readonly string TransitGatewayRouteTableId;

        [OutputConstructor]
        private GetRouteTableRoutesResult(
            ImmutableArray<Outputs.GetRouteTableRoutesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetRouteTableRoutesRouteResult> routes,

            string transitGatewayRouteTableId)
        {
            Filters = filters;
            Id = id;
            Routes = routes;
            TransitGatewayRouteTableId = transitGatewayRouteTableId;
        }
    }
}
