// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    public static class GetRouteTableRoutes
    {
        /// <summary>
        /// Provides informations for routes of a specific transit gateway, such as state, type, cidr
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRouteTableRoutesResult> InvokeAsync(GetRouteTableRoutesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableRoutesResult>("aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes", args ?? new GetRouteTableRoutesArgs(), options.WithDefaults());

        /// <summary>
        /// Provides informations for routes of a specific transit gateway, such as state, type, cidr
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteTableRoutesResult> Invoke(GetRouteTableRoutesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableRoutesResult>("aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes", args ?? new GetRouteTableRoutesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides informations for routes of a specific transit gateway, such as state, type, cidr
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2TransitGateway.GetRouteTableRoutes.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2TransitGateway.Inputs.GetRouteTableRoutesFilterInputArgs
        ///             {
        ///                 Name = "type",
        ///                 Values = new[]
        ///                 {
        ///                     "propagated",
        ///                 },
        ///             },
        ///         },
        ///         TransitGatewayRouteTableId = example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRouteTableRoutesResult> Invoke(GetRouteTableRoutesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableRoutesResult>("aws:ec2transitgateway/getRouteTableRoutes:getRouteTableRoutes", args ?? new GetRouteTableRoutesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteTableRoutesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private List<Inputs.GetRouteTableRoutesFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetRouteTableRoutesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTableRoutesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Route Table.
        /// 
        /// More complex filters can be expressed using one or more `Filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        [Input("transitGatewayRouteTableId", required: true)]
        public string TransitGatewayRouteTableId { get; set; } = null!;

        public GetRouteTableRoutesArgs()
        {
        }
        public static new GetRouteTableRoutesArgs Empty => new GetRouteTableRoutesArgs();
    }

    public sealed class GetRouteTableRoutesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters", required: true)]
        private InputList<Inputs.GetRouteTableRoutesFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetRouteTableRoutesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteTableRoutesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Identifier of EC2 Transit Gateway Route Table.
        /// 
        /// More complex filters can be expressed using one or more `Filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        [Input("transitGatewayRouteTableId", required: true)]
        public Input<string> TransitGatewayRouteTableId { get; set; } = null!;

        public GetRouteTableRoutesInvokeArgs()
        {
        }
        public static new GetRouteTableRoutesInvokeArgs Empty => new GetRouteTableRoutesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteTableRoutesResult
    {
        public readonly ImmutableArray<Outputs.GetRouteTableRoutesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Region;
        /// <summary>
        /// List of Transit Gateway Routes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableRoutesRouteResult> Routes;
        public readonly string TransitGatewayRouteTableId;

        [OutputConstructor]
        private GetRouteTableRoutesResult(
            ImmutableArray<Outputs.GetRouteTableRoutesFilterResult> filters,

            string id,

            string region,

            ImmutableArray<Outputs.GetRouteTableRoutesRouteResult> routes,

            string transitGatewayRouteTableId)
        {
            Filters = filters;
            Id = id;
            Region = region;
            Routes = routes;
            TransitGatewayRouteTableId = transitGatewayRouteTableId;
        }
    }
}
