// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    public static class GetMulticastDomain
    {
        public static Task<GetMulticastDomainResult> InvokeAsync(GetMulticastDomainArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMulticastDomainResult>("aws:ec2transitgateway/getMulticastDomain:getMulticastDomain", args ?? new GetMulticastDomainArgs(), options.WithDefaults());

        public static Output<GetMulticastDomainResult> Invoke(GetMulticastDomainInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMulticastDomainResult>("aws:ec2transitgateway/getMulticastDomain:getMulticastDomain", args ?? new GetMulticastDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMulticastDomainArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetMulticastDomainFilterArgs>? _filters;
        public List<Inputs.GetMulticastDomainFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMulticastDomainFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("transitGatewayMulticastDomainId")]
        public string? TransitGatewayMulticastDomainId { get; set; }

        public GetMulticastDomainArgs()
        {
        }
        public static new GetMulticastDomainArgs Empty => new GetMulticastDomainArgs();
    }

    public sealed class GetMulticastDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetMulticastDomainFilterInputArgs>? _filters;
        public InputList<Inputs.GetMulticastDomainFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetMulticastDomainFilterInputArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transitGatewayMulticastDomainId")]
        public Input<string>? TransitGatewayMulticastDomainId { get; set; }

        public GetMulticastDomainInvokeArgs()
        {
        }
        public static new GetMulticastDomainInvokeArgs Empty => new GetMulticastDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetMulticastDomainResult
    {
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetMulticastDomainAssociationResult> Associations;
        public readonly string AutoAcceptSharedAssociations;
        public readonly ImmutableArray<Outputs.GetMulticastDomainFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Igmpv2Support;
        public readonly ImmutableArray<Outputs.GetMulticastDomainMemberResult> Members;
        public readonly string OwnerId;
        public readonly ImmutableArray<Outputs.GetMulticastDomainSourceResult> Sources;
        public readonly string State;
        public readonly string StaticSourcesSupport;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string TransitGatewayAttachmentId;
        public readonly string TransitGatewayId;
        public readonly string TransitGatewayMulticastDomainId;

        [OutputConstructor]
        private GetMulticastDomainResult(
            string arn,

            ImmutableArray<Outputs.GetMulticastDomainAssociationResult> associations,

            string autoAcceptSharedAssociations,

            ImmutableArray<Outputs.GetMulticastDomainFilterResult> filters,

            string id,

            string igmpv2Support,

            ImmutableArray<Outputs.GetMulticastDomainMemberResult> members,

            string ownerId,

            ImmutableArray<Outputs.GetMulticastDomainSourceResult> sources,

            string state,

            string staticSourcesSupport,

            ImmutableDictionary<string, string> tags,

            string transitGatewayAttachmentId,

            string transitGatewayId,

            string transitGatewayMulticastDomainId)
        {
            Arn = arn;
            Associations = associations;
            AutoAcceptSharedAssociations = autoAcceptSharedAssociations;
            Filters = filters;
            Id = id;
            Igmpv2Support = igmpv2Support;
            Members = members;
            OwnerId = ownerId;
            Sources = sources;
            State = state;
            StaticSourcesSupport = staticSourcesSupport;
            Tags = tags;
            TransitGatewayAttachmentId = transitGatewayAttachmentId;
            TransitGatewayId = transitGatewayId;
            TransitGatewayMulticastDomainId = transitGatewayMulticastDomainId;
        }
    }
}
