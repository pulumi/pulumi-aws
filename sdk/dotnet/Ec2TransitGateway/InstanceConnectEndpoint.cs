// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2TransitGateway
{
    /// <summary>
    /// Manages an EC2 Instance Connect Endpoint.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ec2TransitGateway.InstanceConnectEndpoint("example", new()
    ///     {
    ///         SubnetId = aws_subnet.Example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_ec2_instance_connect_endpoint.example
    /// 
    ///  id = "eice-012345678" } Using `pulumi import`, import EC2 Instance Connect Endpoints using the `id`. For exampleconsole % pulumi import aws_ec2_instance_connect_endpoint.example eice-012345678
    /// </summary>
    [AwsResourceType("aws:ec2transitgateway/instanceConnectEndpoint:InstanceConnectEndpoint")]
    public partial class InstanceConnectEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the EC2 Instance Connect Endpoint.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The Availability Zone of the EC2 Instance Connect Endpoint.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// The DNS name of the EC2 Instance Connect Endpoint.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// The DNS name of the EC2 Instance Connect FIPS Endpoint.
        /// </summary>
        [Output("fipsDnsName")]
        public Output<string> FipsDnsName { get; private set; } = null!;

        /// <summary>
        /// The IDs of the ENIs that Amazon EC2 automatically created when creating the EC2 Instance Connect Endpoint.
        /// </summary>
        [Output("networkInterfaceIds")]
        public Output<ImmutableArray<string>> NetworkInterfaceIds { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS account that created the EC2 Instance Connect Endpoint.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether your client's IP address is preserved as the source. Default: `true`.
        /// </summary>
        [Output("preserveClientIp")]
        public Output<bool> PreserveClientIp { get; private set; } = null!;

        /// <summary>
        /// One or more security groups to associate with the endpoint. If you don't specify a security group, the default security group for the VPC will be associated with the endpoint.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The ID of the subnet in which to create the EC2 Instance Connect Endpoint.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.InstanceConnectEndpointTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceConnectEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceConnectEndpoint(string name, InstanceConnectEndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2transitgateway/instanceConnectEndpoint:InstanceConnectEndpoint", name, args ?? new InstanceConnectEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceConnectEndpoint(string name, Input<string> id, InstanceConnectEndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2transitgateway/instanceConnectEndpoint:InstanceConnectEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceConnectEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceConnectEndpoint Get(string name, Input<string> id, InstanceConnectEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceConnectEndpoint(name, id, state, options);
        }
    }

    public sealed class InstanceConnectEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether your client's IP address is preserved as the source. Default: `true`.
        /// </summary>
        [Input("preserveClientIp")]
        public Input<bool>? PreserveClientIp { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security groups to associate with the endpoint. If you don't specify a security group, the default security group for the VPC will be associated with the endpoint.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The ID of the subnet in which to create the EC2 Instance Connect Endpoint.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.InstanceConnectEndpointTimeoutsArgs>? Timeouts { get; set; }

        public InstanceConnectEndpointArgs()
        {
        }
        public static new InstanceConnectEndpointArgs Empty => new InstanceConnectEndpointArgs();
    }

    public sealed class InstanceConnectEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the EC2 Instance Connect Endpoint.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The Availability Zone of the EC2 Instance Connect Endpoint.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// The DNS name of the EC2 Instance Connect Endpoint.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// The DNS name of the EC2 Instance Connect FIPS Endpoint.
        /// </summary>
        [Input("fipsDnsName")]
        public Input<string>? FipsDnsName { get; set; }

        [Input("networkInterfaceIds")]
        private InputList<string>? _networkInterfaceIds;

        /// <summary>
        /// The IDs of the ENIs that Amazon EC2 automatically created when creating the EC2 Instance Connect Endpoint.
        /// </summary>
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        /// <summary>
        /// The ID of the AWS account that created the EC2 Instance Connect Endpoint.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// Indicates whether your client's IP address is preserved as the source. Default: `true`.
        /// </summary>
        [Input("preserveClientIp")]
        public Input<bool>? PreserveClientIp { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security groups to associate with the endpoint. If you don't specify a security group, the default security group for the VPC will be associated with the endpoint.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The ID of the subnet in which to create the EC2 Instance Connect Endpoint.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.InstanceConnectEndpointTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the VPC in which the EC2 Instance Connect Endpoint was created.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public InstanceConnectEndpointState()
        {
        }
        public static new InstanceConnectEndpointState Empty => new InstanceConnectEndpointState();
    }
}
