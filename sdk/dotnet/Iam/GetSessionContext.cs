// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    public static class GetSessionContext
    {
        /// <summary>
        /// This data source provides information on the IAM source role of an STS assumed role. For non-role ARNs, this data source simply passes the ARN through in `issuer_arn`.
        /// 
        /// For some AWS resources, multiple types of principals are allowed in the same argument (e.g., IAM users and IAM roles). However, these arguments often do not allow assumed-role (i.e., STS, temporary credential) principals. Given an STS ARN, this data source provides the ARN for the source IAM role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Iam.GetSessionContext.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:sts::123456789012:assumed-role/Audien-Heaven/MatyNoyes",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Find the Provider's Source Role
        /// 
        /// Combined with `aws.getCallerIdentity`, you can get the current user's source IAM role ARN (`issuer_arn`) if you're using an assumed role. If you're not using an assumed role, the caller's (e.g., an IAM user's) ARN will simply be passed through. In environments where both IAM users and individuals using assumed roles need to apply the same configurations, this data source enables seamless use.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.GetCallerIdentity.Invoke();
        /// 
        ///     var example = Aws.Iam.GetSessionContext.Invoke(new()
        ///     {
        ///         Arn = current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSessionContextResult> InvokeAsync(GetSessionContextArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSessionContextResult>("aws:iam/getSessionContext:getSessionContext", args ?? new GetSessionContextArgs(), options.WithDefaults());

        /// <summary>
        /// This data source provides information on the IAM source role of an STS assumed role. For non-role ARNs, this data source simply passes the ARN through in `issuer_arn`.
        /// 
        /// For some AWS resources, multiple types of principals are allowed in the same argument (e.g., IAM users and IAM roles). However, these arguments often do not allow assumed-role (i.e., STS, temporary credential) principals. Given an STS ARN, this data source provides the ARN for the source IAM role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Iam.GetSessionContext.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:sts::123456789012:assumed-role/Audien-Heaven/MatyNoyes",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Find the Provider's Source Role
        /// 
        /// Combined with `aws.getCallerIdentity`, you can get the current user's source IAM role ARN (`issuer_arn`) if you're using an assumed role. If you're not using an assumed role, the caller's (e.g., an IAM user's) ARN will simply be passed through. In environments where both IAM users and individuals using assumed roles need to apply the same configurations, this data source enables seamless use.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.GetCallerIdentity.Invoke();
        /// 
        ///     var example = Aws.Iam.GetSessionContext.Invoke(new()
        ///     {
        ///         Arn = current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.Arn),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSessionContextResult> Invoke(GetSessionContextInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSessionContextResult>("aws:iam/getSessionContext:getSessionContext", args ?? new GetSessionContextInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSessionContextArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN for an assumed role.
        /// </summary>
        [Input("arn", required: true)]
        public string Arn { get; set; } = null!;

        public GetSessionContextArgs()
        {
        }
        public static new GetSessionContextArgs Empty => new GetSessionContextArgs();
    }

    public sealed class GetSessionContextInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN for an assumed role.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        public GetSessionContextInvokeArgs()
        {
        }
        public static new GetSessionContextInvokeArgs Empty => new GetSessionContextInvokeArgs();
    }


    [OutputType]
    public sealed class GetSessionContextResult
    {
        public readonly string Arn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IAM source role ARN if `arn` corresponds to an STS assumed role. Otherwise, `issuer_arn` is equal to `arn`.
        /// </summary>
        public readonly string IssuerArn;
        /// <summary>
        /// Unique identifier of the IAM role that issues the STS assumed role.
        /// </summary>
        public readonly string IssuerId;
        /// <summary>
        /// Name of the source role. Only available if `arn` corresponds to an STS assumed role.
        /// </summary>
        public readonly string IssuerName;
        /// <summary>
        /// Name of the STS session. Only available if `arn` corresponds to an STS assumed role.
        /// </summary>
        public readonly string SessionName;

        [OutputConstructor]
        private GetSessionContextResult(
            string arn,

            string id,

            string issuerArn,

            string issuerId,

            string issuerName,

            string sessionName)
        {
            Arn = arn;
            Id = id;
            IssuerArn = issuerArn;
            IssuerId = issuerId;
            IssuerName = issuerName;
            SessionName = sessionName;
        }
    }
}
