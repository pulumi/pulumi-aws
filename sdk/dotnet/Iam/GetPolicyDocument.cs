// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    public static class GetPolicyDocument
    {
        /// <summary>
        /// Generates an IAM policy document in JSON format for use with resources that expect policy documents such as `aws.iam.Policy`.
        /// 
        /// Using this data source to generate policy documents is *optional*. It is also valid to use literal JSON strings in your configuration or to use the `file` interpolation function to read a raw JSON policy document from a file.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "1",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListAllMyBuckets",
        ///                     "s3:GetBucketLocation",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListBucket",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "StringLike",
        ///                         Variable = "s3:prefix",
        ///                         Values = new[]
        ///                         {
        ///                             "",
        ///                             "home/",
        ///                             "home/&amp;{aws:username}/",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}",
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var examplePolicy = new Aws.Iam.Policy("examplePolicy", new()
        ///     {
        ///         Path = "/",
        ///         PolicyDocument = examplePolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Multiple Condition Keys and Values
        /// 
        /// You can specify a [condition with multiple keys and values](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_multi-value-conditions.html) by supplying multiple `condition` blocks with the same `test` value, but differing `variable` and `values` values.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMultipleConditionKeysAndValues = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "kms:Decrypt",
        ///                     "kms:GenerateDataKey",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "pi",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "rds",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:pi:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                             "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:rds:db-id",
        ///                     },
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.example_multiple_condition_keys_and_values.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Assume-Role Policy with Multiple Principals
        /// 
        /// You can specify multiple principal blocks with different types. You can also use this data source to generate an assume-role policy.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eventStreamBucketRoleAssumeRolePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "sts:AssumeRole",
        ///                 },
        ///                 Principals = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Service",
        ///                         Identifiers = new[]
        ///                         {
        ///                             "firehose.amazonaws.com",
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "AWS",
        ///                         Identifiers = new[]
        ///                         {
        ///                             @var.Trusted_role_arn,
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Federated",
        ///                         Identifiers = new[]
        ///                         {
        ///                             $"arn:aws:iam::{@var.Account_id}:saml-provider/{@var.Provider_name}",
        ///                             "cognito-identity.amazonaws.com",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using A Source Document
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.source_document_example.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using An Override Document
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var overridePolicyDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.override_policy_document_example.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example with Both Source and Override Documents
        /// 
        /// You can also combine `source_policy_documents` and `override_policy_documents` in the same document.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:DescribeAccountAttributes",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:GetObject",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var politik = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.politik.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Source Documents
        /// 
        /// Multiple documents can be combined using the `source_policy_documents` or `override_policy_documents` attributes. `source_policy_documents` requires that all documents have unique Sids, while `override_policy_documents` will iteratively override matching Sids.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sourceOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidOne",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidTwo",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "lambda:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             sourceOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             sourceTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Override Documents
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policyOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyThree = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "logs:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             policyOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyThree.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyDocumentResult> InvokeAsync(GetPolicyDocumentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyDocumentResult>("aws:iam/getPolicyDocument:getPolicyDocument", args ?? new GetPolicyDocumentArgs(), options.WithDefaults());

        /// <summary>
        /// Generates an IAM policy document in JSON format for use with resources that expect policy documents such as `aws.iam.Policy`.
        /// 
        /// Using this data source to generate policy documents is *optional*. It is also valid to use literal JSON strings in your configuration or to use the `file` interpolation function to read a raw JSON policy document from a file.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "1",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListAllMyBuckets",
        ///                     "s3:GetBucketLocation",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListBucket",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "StringLike",
        ///                         Variable = "s3:prefix",
        ///                         Values = new[]
        ///                         {
        ///                             "",
        ///                             "home/",
        ///                             "home/&amp;{aws:username}/",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}",
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var examplePolicy = new Aws.Iam.Policy("examplePolicy", new()
        ///     {
        ///         Path = "/",
        ///         PolicyDocument = examplePolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Multiple Condition Keys and Values
        /// 
        /// You can specify a [condition with multiple keys and values](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_multi-value-conditions.html) by supplying multiple `condition` blocks with the same `test` value, but differing `variable` and `values` values.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMultipleConditionKeysAndValues = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "kms:Decrypt",
        ///                     "kms:GenerateDataKey",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "pi",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "rds",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:pi:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                             "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:rds:db-id",
        ///                     },
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.example_multiple_condition_keys_and_values.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Assume-Role Policy with Multiple Principals
        /// 
        /// You can specify multiple principal blocks with different types. You can also use this data source to generate an assume-role policy.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eventStreamBucketRoleAssumeRolePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "sts:AssumeRole",
        ///                 },
        ///                 Principals = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Service",
        ///                         Identifiers = new[]
        ///                         {
        ///                             "firehose.amazonaws.com",
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "AWS",
        ///                         Identifiers = new[]
        ///                         {
        ///                             @var.Trusted_role_arn,
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Federated",
        ///                         Identifiers = new[]
        ///                         {
        ///                             $"arn:aws:iam::{@var.Account_id}:saml-provider/{@var.Provider_name}",
        ///                             "cognito-identity.amazonaws.com",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using A Source Document
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.source_document_example.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using An Override Document
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var overridePolicyDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.override_policy_document_example.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example with Both Source and Override Documents
        /// 
        /// You can also combine `source_policy_documents` and `override_policy_documents` in the same document.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:DescribeAccountAttributes",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:GetObject",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var politik = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.politik.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Source Documents
        /// 
        /// Multiple documents can be combined using the `source_policy_documents` or `override_policy_documents` attributes. `source_policy_documents` requires that all documents have unique Sids, while `override_policy_documents` will iteratively override matching Sids.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sourceOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidOne",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidTwo",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "lambda:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             sourceOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             sourceTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Override Documents
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policyOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyThree = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "logs:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             policyOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyThree.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyDocumentResult> Invoke(GetPolicyDocumentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyDocumentResult>("aws:iam/getPolicyDocument:getPolicyDocument", args ?? new GetPolicyDocumentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyDocumentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IAM policy document whose statements with non-blank `sid`s will override statements with the same `sid` from documents assigned to the `source_json`, `source_policy_documents`, and `override_policy_documents` arguments. Non-overriding statements will be added to the exported document.
        /// </summary>
        [Input("overrideJson")]
        public string? OverrideJson { get; set; }

        [Input("overridePolicyDocuments")]
        private List<string>? _overridePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from documents provided in the `source_json` and `source_policy_documents` arguments.  Non-overriding statements will be added to the exported document.
        /// </summary>
        public List<string> OverridePolicyDocuments
        {
            get => _overridePolicyDocuments ?? (_overridePolicyDocuments = new List<string>());
            set => _overridePolicyDocuments = value;
        }

        /// <summary>
        /// ID for the policy document.
        /// </summary>
        [Input("policyId")]
        public string? PolicyId { get; set; }

        /// <summary>
        /// IAM policy document used as a base for the exported policy document. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        [Input("sourceJson")]
        public string? SourceJson { get; set; }

        [Input("sourcePolicyDocuments")]
        private List<string>? _sourcePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. Statements defined in `source_policy_documents` or `source_json` must have unique `sid`s. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        public List<string> SourcePolicyDocuments
        {
            get => _sourcePolicyDocuments ?? (_sourcePolicyDocuments = new List<string>());
            set => _sourcePolicyDocuments = value;
        }

        [Input("statements")]
        private List<Inputs.GetPolicyDocumentStatementArgs>? _statements;

        /// <summary>
        /// Configuration block for a policy statement. Detailed below.
        /// </summary>
        public List<Inputs.GetPolicyDocumentStatementArgs> Statements
        {
            get => _statements ?? (_statements = new List<Inputs.GetPolicyDocumentStatementArgs>());
            set => _statements = value;
        }

        /// <summary>
        /// IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetPolicyDocumentArgs()
        {
        }
        public static new GetPolicyDocumentArgs Empty => new GetPolicyDocumentArgs();
    }

    public sealed class GetPolicyDocumentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IAM policy document whose statements with non-blank `sid`s will override statements with the same `sid` from documents assigned to the `source_json`, `source_policy_documents`, and `override_policy_documents` arguments. Non-overriding statements will be added to the exported document.
        /// </summary>
        [Input("overrideJson")]
        public Input<string>? OverrideJson { get; set; }

        [Input("overridePolicyDocuments")]
        private InputList<string>? _overridePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from documents provided in the `source_json` and `source_policy_documents` arguments.  Non-overriding statements will be added to the exported document.
        /// </summary>
        public InputList<string> OverridePolicyDocuments
        {
            get => _overridePolicyDocuments ?? (_overridePolicyDocuments = new InputList<string>());
            set => _overridePolicyDocuments = value;
        }

        /// <summary>
        /// ID for the policy document.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// IAM policy document used as a base for the exported policy document. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        [Input("sourceJson")]
        public Input<string>? SourceJson { get; set; }

        [Input("sourcePolicyDocuments")]
        private InputList<string>? _sourcePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. Statements defined in `source_policy_documents` or `source_json` must have unique `sid`s. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        public InputList<string> SourcePolicyDocuments
        {
            get => _sourcePolicyDocuments ?? (_sourcePolicyDocuments = new InputList<string>());
            set => _sourcePolicyDocuments = value;
        }

        [Input("statements")]
        private InputList<Inputs.GetPolicyDocumentStatementInputArgs>? _statements;

        /// <summary>
        /// Configuration block for a policy statement. Detailed below.
        /// </summary>
        public InputList<Inputs.GetPolicyDocumentStatementInputArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.GetPolicyDocumentStatementInputArgs>());
            set => _statements = value;
        }

        /// <summary>
        /// IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetPolicyDocumentInvokeArgs()
        {
        }
        public static new GetPolicyDocumentInvokeArgs Empty => new GetPolicyDocumentInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyDocumentResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Standard JSON policy document rendered based on the arguments above.
        /// </summary>
        public readonly string Json;
        public readonly string? OverrideJson;
        public readonly ImmutableArray<string> OverridePolicyDocuments;
        public readonly string? PolicyId;
        public readonly string? SourceJson;
        public readonly ImmutableArray<string> SourcePolicyDocuments;
        public readonly ImmutableArray<Outputs.GetPolicyDocumentStatementResult> Statements;
        public readonly string? Version;

        [OutputConstructor]
        private GetPolicyDocumentResult(
            string id,

            string json,

            string? overrideJson,

            ImmutableArray<string> overridePolicyDocuments,

            string? policyId,

            string? sourceJson,

            ImmutableArray<string> sourcePolicyDocuments,

            ImmutableArray<Outputs.GetPolicyDocumentStatementResult> statements,

            string? version)
        {
            Id = id;
            Json = json;
            OverrideJson = overrideJson;
            OverridePolicyDocuments = overridePolicyDocuments;
            PolicyId = policyId;
            SourceJson = sourceJson;
            SourcePolicyDocuments = sourcePolicyDocuments;
            Statements = statements;
            Version = version;
        }
    }
}
