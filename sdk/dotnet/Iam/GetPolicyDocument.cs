// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    public static class GetPolicyDocument
    {
        /// <summary>
        /// Generates an IAM policy document in JSON format for use with resources that expect policy documents such as `aws.iam.Policy`.
        /// 
        /// Using this data source to generate policy documents is *optional*. It is also valid to use literal JSON strings in your configuration or to use the `file` interpolation function to read a raw JSON policy document from a file.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const examplePolicyDocument = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             sid: "1",
        ///             actions: [
        ///                 "s3:ListAllMyBuckets",
        ///                 "s3:GetBucketLocation",
        ///             ],
        ///             resources: ["arn:aws:s3:::*"],
        ///         },
        ///         {
        ///             actions: ["s3:ListBucket"],
        ///             resources: [`arn:aws:s3:::${_var.s3_bucket_name}`],
        ///             conditions: [{
        ///                 test: "StringLike",
        ///                 variable: "s3:prefix",
        ///                 values: [
        ///                     "",
        ///                     "home/",
        ///                     "home/&amp;{aws:username}/",
        ///                 ],
        ///             }],
        ///         },
        ///         {
        ///             actions: ["s3:*"],
        ///             resources: [
        ///                 `arn:aws:s3:::${_var.s3_bucket_name}/home/&amp;{aws:username}`,
        ///                 `arn:aws:s3:::${_var.s3_bucket_name}/home/&amp;{aws:username}/*`,
        ///             ],
        ///         },
        ///     ],
        /// });
        /// const examplePolicy = new aws.iam.Policy("examplePolicy", {
        ///     path: "/",
        ///     policy: examplePolicyDocument.then(examplePolicyDocument =&gt; examplePolicyDocument.json),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example_policy_document = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="1",
        ///         actions=[
        ///             "s3:ListAllMyBuckets",
        ///             "s3:GetBucketLocation",
        ///         ],
        ///         resources=["arn:aws:s3:::*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["s3:ListBucket"],
        ///         resources=[f"arn:aws:s3:::{var['s3_bucket_name']}"],
        ///         conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="StringLike",
        ///             variable="s3:prefix",
        ///             values=[
        ///                 "",
        ///                 "home/",
        ///                 "home/&amp;{aws:username}/",
        ///             ],
        ///         )],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["s3:*"],
        ///         resources=[
        ///             f"arn:aws:s3:::{var['s3_bucket_name']}/home/&amp;{{aws:username}}",
        ///             f"arn:aws:s3:::{var['s3_bucket_name']}/home/&amp;{{aws:username}}/*",
        ///         ],
        ///     ),
        /// ])
        /// example_policy = aws.iam.Policy("examplePolicy",
        ///     path="/",
        ///     policy=example_policy_document.json)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "1",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListAllMyBuckets",
        ///                     "s3:GetBucketLocation",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListBucket",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "StringLike",
        ///                         Variable = "s3:prefix",
        ///                         Values = new[]
        ///                         {
        ///                             "",
        ///                             "home/",
        ///                             "home/&amp;{aws:username}/",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}",
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var examplePolicy = new Aws.Iam.Policy("examplePolicy", new()
        ///     {
        ///         Path = "/",
        ///         PolicyDocument = examplePolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"fmt"
        /// 
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		examplePolicyDocument, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// 			Statements: pulumi.Array{
        /// 				iam.GetPolicyDocumentStatement{
        /// 					Sid: pulumi.StringRef("1"),
        /// 					Actions: []string{
        /// 						"s3:ListAllMyBuckets",
        /// 						"s3:GetBucketLocation",
        /// 					},
        /// 					Resources: []string{
        /// 						"arn:aws:s3:::*",
        /// 					},
        /// 				},
        /// 				iam.GetPolicyDocumentStatement{
        /// 					Actions: []string{
        /// 						"s3:ListBucket",
        /// 					},
        /// 					Resources: []string{
        /// 						fmt.Sprintf("arn:aws:s3:::%v", _var.S3_bucket_name),
        /// 					},
        /// 					Conditions: []iam.GetPolicyDocumentStatementCondition{
        /// 						{
        /// 							Test:     "StringLike",
        /// 							Variable: "s3:prefix",
        /// 							Values: []string{
        /// 								"",
        /// 								"home/",
        /// 								"home/&amp;{aws:username}/",
        /// 							},
        /// 						},
        /// 					},
        /// 				},
        /// 				iam.GetPolicyDocumentStatement{
        /// 					Actions: []string{
        /// 						"s3:*",
        /// 					},
        /// 					Resources: []string{
        /// 						fmt.Sprintf("arn:aws:s3:::%v/home/&amp;{aws:username}", _var.S3_bucket_name),
        /// 						fmt.Sprintf("arn:aws:s3:::%v/home/&amp;{aws:username}/*", _var.S3_bucket_name),
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = iam.NewPolicy(ctx, "examplePolicy", &amp;iam.PolicyArgs{
        /// 			Path:   pulumi.String("/"),
        /// 			Policy: *pulumi.String(examplePolicyDocument.Json),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import com.pulumi.aws.iam.Policy;
        /// import com.pulumi.aws.iam.PolicyArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var examplePolicyDocument = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("1")
        ///                     .actions(                    
        ///                         "s3:ListAllMyBuckets",
        ///                         "s3:GetBucketLocation")
        ///                     .resources("arn:aws:s3:::*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("s3:ListBucket")
        ///                     .resources(String.format("arn:aws:s3:::%s", var_.s3_bucket_name()))
        ///                     .conditions(GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("StringLike")
        ///                         .variable("s3:prefix")
        ///                         .values(                        
        ///                             "",
        ///                             "home/",
        ///                             "home/&amp;{aws:username}/")
        ///                         .build())
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("s3:*")
        ///                     .resources(                    
        ///                         String.format("arn:aws:s3:::%s/home/&amp;{{aws:username}}", var_.s3_bucket_name()),
        ///                         String.format("arn:aws:s3:::%s/home/&amp;{{aws:username}}/*", var_.s3_bucket_name()))
        ///                     .build())
        ///             .build());
        /// 
        ///         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()        
        ///             .path("/")
        ///             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   examplePolicy:
        ///     type: aws:iam:Policy
        ///     properties:
        ///       path: /
        ///       policy: ${examplePolicyDocument.json}
        /// variables:
        ///   examplePolicyDocument:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: '1'
        ///             actions:
        ///               - s3:ListAllMyBuckets
        ///               - s3:GetBucketLocation
        ///             resources:
        ///               - arn:aws:s3:::*
        ///           - actions:
        ///               - s3:ListBucket
        ///             resources:
        ///               - arn:aws:s3:::${var.s3_bucket_name}
        ///             conditions:
        ///               - test: StringLike
        ///                 variable: s3:prefix
        ///                 values:
        ///                   -
        ///                   - home/
        ///                   - home/&amp;{aws:username}/
        ///           - actions:
        ///               - s3:*
        ///             resources:
        ///               - arn:aws:s3:::${var.s3_bucket_name}/home/&amp;{aws:username}
        ///               - arn:aws:s3:::${var.s3_bucket_name}/home/&amp;{aws:username}/*
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Multiple Condition Keys and Values
        /// 
        /// You can specify a [condition with multiple keys and values](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_multi-value-conditions.html) by supplying multiple `condition` blocks with the same `test` value, but differing `variable` and `values` values.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const exampleMultipleConditionKeysAndValues = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         actions: [
        ///             "kms:Decrypt",
        ///             "kms:GenerateDataKey",
        ///         ],
        ///         conditions: [
        ///             {
        ///                 test: "ForAnyValue:StringEquals",
        ///                 values: ["pi"],
        ///                 variable: "kms:EncryptionContext:service",
        ///             },
        ///             {
        ///                 test: "ForAnyValue:StringEquals",
        ///                 values: ["rds"],
        ///                 variable: "kms:EncryptionContext:aws:pi:service",
        ///             },
        ///             {
        ///                 test: "ForAnyValue:StringEquals",
        ///                 values: [
        ///                     "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                     "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///                 ],
        ///                 variable: "kms:EncryptionContext:aws:rds:db-id",
        ///             },
        ///         ],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example_multiple_condition_keys_and_values = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     actions=[
        ///         "kms:Decrypt",
        ///         "kms:GenerateDataKey",
        ///     ],
        ///     conditions=[
        ///         aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="ForAnyValue:StringEquals",
        ///             values=["pi"],
        ///             variable="kms:EncryptionContext:service",
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="ForAnyValue:StringEquals",
        ///             values=["rds"],
        ///             variable="kms:EncryptionContext:aws:pi:service",
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="ForAnyValue:StringEquals",
        ///             values=[
        ///                 "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                 "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///             ],
        ///             variable="kms:EncryptionContext:aws:rds:db-id",
        ///         ),
        ///     ],
        ///     resources=["*"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMultipleConditionKeysAndValues = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "kms:Decrypt",
        ///                     "kms:GenerateDataKey",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "pi",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "rds",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:pi:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                             "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:rds:db-id",
        ///                     },
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// 			Statements: []iam.GetPolicyDocumentStatement{
        /// 				{
        /// 					Actions: []string{
        /// 						"kms:Decrypt",
        /// 						"kms:GenerateDataKey",
        /// 					},
        /// 					Conditions: []iam.GetPolicyDocumentStatementCondition{
        /// 						{
        /// 							Test: "ForAnyValue:StringEquals",
        /// 							Values: []string{
        /// 								"pi",
        /// 							},
        /// 							Variable: "kms:EncryptionContext:service",
        /// 						},
        /// 						{
        /// 							Test: "ForAnyValue:StringEquals",
        /// 							Values: []string{
        /// 								"rds",
        /// 							},
        /// 							Variable: "kms:EncryptionContext:aws:pi:service",
        /// 						},
        /// 						{
        /// 							Test: "ForAnyValue:StringEquals",
        /// 							Values: []string{
        /// 								"db-AAAAABBBBBCCCCCDDDDDEEEEE",
        /// 								"db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        /// 							},
        /// 							Variable: "kms:EncryptionContext:aws:rds:db-id",
        /// 						},
        /// 					},
        /// 					Resources: []string{
        /// 						"*",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var exampleMultipleConditionKeysAndValues = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .actions(                
        ///                     "kms:Decrypt",
        ///                     "kms:GenerateDataKey")
        ///                 .conditions(                
        ///                     GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("ForAnyValue:StringEquals")
        ///                         .values("pi")
        ///                         .variable("kms:EncryptionContext:service")
        ///                         .build(),
        ///                     GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("ForAnyValue:StringEquals")
        ///                         .values("rds")
        ///                         .variable("kms:EncryptionContext:aws:pi:service")
        ///                         .build(),
        ///                     GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("ForAnyValue:StringEquals")
        ///                         .values(                        
        ///                             "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                             "db-EEEEEDDDDDCCCCCBBBBBAAAAA")
        ///                         .variable("kms:EncryptionContext:aws:rds:db-id")
        ///                         .build())
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   exampleMultipleConditionKeysAndValues:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - kms:Decrypt
        ///               - kms:GenerateDataKey
        ///             conditions:
        ///               - test: ForAnyValue:StringEquals
        ///                 values:
        ///                   - pi
        ///                 variable: kms:EncryptionContext:service
        ///               - test: ForAnyValue:StringEquals
        ///                 values:
        ///                   - rds
        ///                 variable: kms:EncryptionContext:aws:pi:service
        ///               - test: ForAnyValue:StringEquals
        ///                 values:
        ///                   - db-AAAAABBBBBCCCCCDDDDDEEEEE
        ///                   - db-EEEEEDDDDDCCCCCBBBBBAAAAA
        ///                 variable: kms:EncryptionContext:aws:rds:db-id
        ///             resources:
        ///               - '*'
        /// ```
        /// 
        /// `data.aws_iam_policy_document.example_multiple_condition_keys_and_values.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Assume-Role Policy with Multiple Principals
        /// 
        /// You can specify multiple principal blocks with different types. You can also use this data source to generate an assume-role policy.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const eventStreamBucketRoleAssumeRolePolicy = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         actions: ["sts:AssumeRole"],
        ///         principals: [
        ///             {
        ///                 type: "Service",
        ///                 identifiers: ["firehose.amazonaws.com"],
        ///             },
        ///             {
        ///                 type: "AWS",
        ///                 identifiers: [_var.trusted_role_arn],
        ///             },
        ///             {
        ///                 type: "Federated",
        ///                 identifiers: [
        ///                     `arn:aws:iam::${_var.account_id}:saml-provider/${_var.provider_name}`,
        ///                     "cognito-identity.amazonaws.com",
        ///                 ],
        ///             },
        ///         ],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// event_stream_bucket_role_assume_role_policy = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     actions=["sts:AssumeRole"],
        ///     principals=[
        ///         aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///             type="Service",
        ///             identifiers=["firehose.amazonaws.com"],
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///             type="AWS",
        ///             identifiers=[var["trusted_role_arn"]],
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///             type="Federated",
        ///             identifiers=[
        ///                 f"arn:aws:iam::{var['account_id']}:saml-provider/{var['provider_name']}",
        ///                 "cognito-identity.amazonaws.com",
        ///             ],
        ///         ),
        ///     ],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eventStreamBucketRoleAssumeRolePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "sts:AssumeRole",
        ///                 },
        ///                 Principals = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Service",
        ///                         Identifiers = new[]
        ///                         {
        ///                             "firehose.amazonaws.com",
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "AWS",
        ///                         Identifiers = new[]
        ///                         {
        ///                             @var.Trusted_role_arn,
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Federated",
        ///                         Identifiers = new[]
        ///                         {
        ///                             $"arn:aws:iam::{@var.Account_id}:saml-provider/{@var.Provider_name}",
        ///                             "cognito-identity.amazonaws.com",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// "fmt"
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// _, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "sts:AssumeRole",
        /// },
        /// Principals: []iam.GetPolicyDocumentStatementPrincipal{
        /// {
        /// Type: "Service",
        /// Identifiers: []string{
        /// "firehose.amazonaws.com",
        /// },
        /// },
        /// {
        /// Type: "AWS",
        /// Identifiers: interface{}{
        /// _var.Trusted_role_arn,
        /// },
        /// },
        /// {
        /// Type: "Federated",
        /// Identifiers: []string{
        /// fmt.Sprintf("arn:aws:iam::%v:saml-provider/%v", _var.Account_id, _var.Provider_name),
        /// "cognito-identity.amazonaws.com",
        /// },
        /// },
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var eventStreamBucketRoleAssumeRolePolicy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .actions("sts:AssumeRole")
        ///                 .principals(                
        ///                     GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                         .type("Service")
        ///                         .identifiers("firehose.amazonaws.com")
        ///                         .build(),
        ///                     GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                         .type("AWS")
        ///                         .identifiers(var_.trusted_role_arn())
        ///                         .build(),
        ///                     GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                         .type("Federated")
        ///                         .identifiers(                        
        ///                             String.format("arn:aws:iam::%s:saml-provider/%s", var_.account_id(),var_.provider_name()),
        ///                             "cognito-identity.amazonaws.com")
        ///                         .build())
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   eventStreamBucketRoleAssumeRolePolicy:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - sts:AssumeRole
        ///             principals:
        ///               - type: Service
        ///                 identifiers:
        ///                   - firehose.amazonaws.com
        ///               - type: AWS
        ///                 identifiers:
        ///                   - ${var.trusted_role_arn}
        ///               - type: Federated
        ///                 identifiers:
        ///                   - arn:aws:iam::${var.account_id}:saml-provider/${var.provider_name}
        ///                   - cognito-identity.amazonaws.com
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using A Source Document
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const source = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "SidToOverride",
        ///             actions: ["s3:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const sourceDocumentExample = source.then(source =&gt; aws.iam.getPolicyDocument({
        ///     sourcePolicyDocuments: [source.json],
        ///     statements: [{
        ///         sid: "SidToOverride",
        ///         actions: ["s3:*"],
        ///         resources: [
        ///             "arn:aws:s3:::somebucket",
        ///             "arn:aws:s3:::somebucket/*",
        ///         ],
        ///     }],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// source = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["ec2:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="SidToOverride",
        ///         actions=["s3:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// source_document_example = aws.iam.get_policy_document(source_policy_documents=[source.json],
        ///     statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="SidToOverride",
        ///         actions=["s3:*"],
        ///         resources=[
        ///             "arn:aws:s3:::somebucket",
        ///             "arn:aws:s3:::somebucket/*",
        ///         ],
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// source, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// SourcePolicyDocuments: interface{}{
        /// source.Json,
        /// },
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "arn:aws:s3:::somebucket",
        /// "arn:aws:s3:::somebucket/*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var source = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("SidToOverride")
        ///                     .actions("s3:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var sourceDocumentExample = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .sourcePolicyDocuments(source.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("SidToOverride")
        ///                 .actions("s3:*")
        ///                 .resources(                
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   source:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   sourceDocumentExample:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         sourcePolicyDocuments:
        ///           - ${source.json}
        ///         statements:
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - arn:aws:s3:::somebucket
        ///               - arn:aws:s3:::somebucket/*
        /// ```
        /// 
        /// `data.aws_iam_policy_document.source_document_example.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using An Override Document
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const override = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "SidToOverride",
        ///         actions: ["s3:*"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const overridePolicyDocumentExample = override.then(override =&gt; aws.iam.getPolicyDocument({
        ///     overridePolicyDocuments: [override.json],
        ///     statements: [
        ///         {
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "SidToOverride",
        ///             actions: ["s3:*"],
        ///             resources: [
        ///                 "arn:aws:s3:::somebucket",
        ///                 "arn:aws:s3:::somebucket/*",
        ///             ],
        ///         },
        ///     ],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// override = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="SidToOverride",
        ///     actions=["s3:*"],
        ///     resources=["*"],
        /// )])
        /// override_policy_document_example = aws.iam.get_policy_document(override_policy_documents=[override.json],
        ///     statements=[
        ///         aws.iam.GetPolicyDocumentStatementArgs(
        ///             actions=["ec2:*"],
        ///             resources=["*"],
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementArgs(
        ///             sid="SidToOverride",
        ///             actions=["s3:*"],
        ///             resources=[
        ///                 "arn:aws:s3:::somebucket",
        ///                 "arn:aws:s3:::somebucket/*",
        ///             ],
        ///         ),
        ///     ])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var overridePolicyDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// override, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// OverridePolicyDocuments: interface{}{
        /// override.Json,
        /// },
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "arn:aws:s3:::somebucket",
        /// "arn:aws:s3:::somebucket/*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var override = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("SidToOverride")
        ///                 .actions("s3:*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var overridePolicyDocumentExample = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .overridePolicyDocuments(override.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("SidToOverride")
        ///                     .actions("s3:*")
        ///                     .resources(                    
        ///                         "arn:aws:s3:::somebucket",
        ///                         "arn:aws:s3:::somebucket/*")
        ///                     .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   override:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   overridePolicyDocumentExample:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         overridePolicyDocuments:
        ///           - ${override.json}
        ///         statements:
        ///           - actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - arn:aws:s3:::somebucket
        ///               - arn:aws:s3:::somebucket/*
        /// ```
        /// 
        /// `data.aws_iam_policy_document.override_policy_document_example.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example with Both Source and Override Documents
        /// 
        /// You can also combine `source_policy_documents` and `override_policy_documents` in the same document.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const source = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceholder",
        ///         actions: ["ec2:DescribeAccountAttributes"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const override = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceholder",
        ///         actions: ["s3:GetObject"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const politik = Promise.all([source, override]).then(([source, override]) =&gt; aws.iam.getPolicyDocument({
        ///     sourcePolicyDocuments: [source.json],
        ///     overridePolicyDocuments: [override.json],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// source = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceholder",
        ///     actions=["ec2:DescribeAccountAttributes"],
        ///     resources=["*"],
        /// )])
        /// override = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceholder",
        ///     actions=["s3:GetObject"],
        ///     resources=["*"],
        /// )])
        /// politik = aws.iam.get_policy_document(source_policy_documents=[source.json],
        ///     override_policy_documents=[override.json])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:DescribeAccountAttributes",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:GetObject",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var politik = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// source, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceholder"),
        /// Actions: []string{
        /// "ec2:DescribeAccountAttributes",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// override, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceholder"),
        /// Actions: []string{
        /// "s3:GetObject",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// SourcePolicyDocuments: interface{}{
        /// source.Json,
        /// },
        /// OverridePolicyDocuments: interface{}{
        /// override.Json,
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var source = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceholder")
        ///                 .actions("ec2:DescribeAccountAttributes")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var override = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceholder")
        ///                 .actions("s3:GetObject")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var politik = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .sourcePolicyDocuments(source.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .overridePolicyDocuments(override.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   source:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceholder
        ///             actions:
        ///               - ec2:DescribeAccountAttributes
        ///             resources:
        ///               - '*'
        ///   override:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceholder
        ///             actions:
        ///               - s3:GetObject
        ///             resources:
        ///               - '*'
        ///   politik:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         sourcePolicyDocuments:
        ///           - ${source.json}
        ///         overridePolicyDocuments:
        ///           - ${override.json}
        /// ```
        /// 
        /// `data.aws_iam_policy_document.politik.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Source Documents
        /// 
        /// Multiple documents can be combined using the `source_policy_documents` or `override_policy_documents` attributes. `source_policy_documents` requires that all documents have unique Sids, while `override_policy_documents` will iteratively override matching Sids.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const sourceOne = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "UniqueSidOne",
        ///             actions: ["s3:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const sourceTwo = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             sid: "UniqueSidTwo",
        ///             actions: ["iam:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             actions: ["lambda:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const combined = Promise.all([sourceOne, sourceTwo]).then(([sourceOne, sourceTwo]) =&gt; aws.iam.getPolicyDocument({
        ///     sourcePolicyDocuments: [
        ///         sourceOne.json,
        ///         sourceTwo.json,
        ///     ],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// source_one = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["ec2:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="UniqueSidOne",
        ///         actions=["s3:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// source_two = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="UniqueSidTwo",
        ///         actions=["iam:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["lambda:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// combined = aws.iam.get_policy_document(source_policy_documents=[
        ///     source_one.json,
        ///     source_two.json,
        /// ])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sourceOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidOne",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidTwo",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "lambda:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             sourceOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             sourceTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// sourceOne, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("UniqueSidOne"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// sourceTwo, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: pulumi.Array{
        /// iam.GetPolicyDocumentStatement{
        /// Sid: pulumi.StringRef("UniqueSidTwo"),
        /// Actions: []string{
        /// "iam:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// iam.GetPolicyDocumentStatement{
        /// Actions: []string{
        /// "lambda:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// SourcePolicyDocuments: interface{}{
        /// sourceOne.Json,
        /// sourceTwo.Json,
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var sourceOne = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("UniqueSidOne")
        ///                     .actions("s3:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var sourceTwo = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("UniqueSidTwo")
        ///                     .actions("iam:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("lambda:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var combined = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .sourcePolicyDocuments(            
        ///                 sourceOne.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()),
        ///                 sourceTwo.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   sourceOne:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: UniqueSidOne
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   sourceTwo:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: UniqueSidTwo
        ///             actions:
        ///               - iam:*
        ///             resources:
        ///               - '*'
        ///           - actions:
        ///               - lambda:*
        ///             resources:
        ///               - '*'
        ///   combined:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         sourcePolicyDocuments:
        ///           - ${sourceOne.json}
        ///           - ${sourceTwo.json}
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Override Documents
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const policyOne = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceHolderOne",
        ///         effect: "Allow",
        ///         actions: ["s3:*"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const policyTwo = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             effect: "Allow",
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "OverridePlaceHolderTwo",
        ///             effect: "Allow",
        ///             actions: ["iam:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const policyThree = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceHolderOne",
        ///         effect: "Deny",
        ///         actions: ["logs:*"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const combined = Promise.all([policyOne, policyTwo, policyThree]).then(([policyOne, policyTwo, policyThree]) =&gt; aws.iam.getPolicyDocument({
        ///     overridePolicyDocuments: [
        ///         policyOne.json,
        ///         policyTwo.json,
        ///         policyThree.json,
        ///     ],
        ///     statements: [{
        ///         sid: "OverridePlaceHolderTwo",
        ///         effect: "Deny",
        ///         actions: ["*"],
        ///         resources: ["*"],
        ///     }],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// policy_one = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceHolderOne",
        ///     effect="Allow",
        ///     actions=["s3:*"],
        ///     resources=["*"],
        /// )])
        /// policy_two = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         effect="Allow",
        ///         actions=["ec2:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="OverridePlaceHolderTwo",
        ///         effect="Allow",
        ///         actions=["iam:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// policy_three = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceHolderOne",
        ///     effect="Deny",
        ///     actions=["logs:*"],
        ///     resources=["*"],
        /// )])
        /// combined = aws.iam.get_policy_document(override_policy_documents=[
        ///         policy_one.json,
        ///         policy_two.json,
        ///         policy_three.json,
        ///     ],
        ///     statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="OverridePlaceHolderTwo",
        ///         effect="Deny",
        ///         actions=["*"],
        ///         resources=["*"],
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policyOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyThree = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "logs:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             policyOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyThree.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// policyOne, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderOne"),
        /// Effect: pulumi.StringRef("Allow"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// policyTwo, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Effect: pulumi.StringRef("Allow"),
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderTwo"),
        /// Effect: pulumi.StringRef("Allow"),
        /// Actions: []string{
        /// "iam:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// policyThree, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderOne"),
        /// Effect: pulumi.StringRef("Deny"),
        /// Actions: []string{
        /// "logs:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// OverridePolicyDocuments: interface{}{
        /// policyOne.Json,
        /// policyTwo.Json,
        /// policyThree.Json,
        /// },
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderTwo"),
        /// Effect: pulumi.StringRef("Deny"),
        /// Actions: []string{
        /// "*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var policyOne = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceHolderOne")
        ///                 .effect("Allow")
        ///                 .actions("s3:*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var policyTwo = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .effect("Allow")
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("OverridePlaceHolderTwo")
        ///                     .effect("Allow")
        ///                     .actions("iam:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var policyThree = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceHolderOne")
        ///                 .effect("Deny")
        ///                 .actions("logs:*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var combined = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .overridePolicyDocuments(            
        ///                 policyOne.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()),
        ///                 policyTwo.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()),
        ///                 policyThree.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceHolderTwo")
        ///                 .effect("Deny")
        ///                 .actions("*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   policyOne:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceHolderOne
        ///             effect: Allow
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   policyTwo:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - effect: Allow
        ///             actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: OverridePlaceHolderTwo
        ///             effect: Allow
        ///             actions:
        ///               - iam:*
        ///             resources:
        ///               - '*'
        ///   policyThree:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceHolderOne
        ///             effect: Deny
        ///             actions:
        ///               - logs:*
        ///             resources:
        ///               - '*'
        ///   combined:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         overridePolicyDocuments:
        ///           - ${policyOne.json}
        ///           - ${policyTwo.json}
        ///           - ${policyThree.json}
        ///         statements:
        ///           - sid: OverridePlaceHolderTwo
        ///             effect: Deny
        ///             actions:
        ///               - '*'
        ///             resources:
        ///               - '*'
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyDocumentResult> InvokeAsync(GetPolicyDocumentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyDocumentResult>("aws:iam/getPolicyDocument:getPolicyDocument", args ?? new GetPolicyDocumentArgs(), options.WithDefaults());

        /// <summary>
        /// Generates an IAM policy document in JSON format for use with resources that expect policy documents such as `aws.iam.Policy`.
        /// 
        /// Using this data source to generate policy documents is *optional*. It is also valid to use literal JSON strings in your configuration or to use the `file` interpolation function to read a raw JSON policy document from a file.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const examplePolicyDocument = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             sid: "1",
        ///             actions: [
        ///                 "s3:ListAllMyBuckets",
        ///                 "s3:GetBucketLocation",
        ///             ],
        ///             resources: ["arn:aws:s3:::*"],
        ///         },
        ///         {
        ///             actions: ["s3:ListBucket"],
        ///             resources: [`arn:aws:s3:::${_var.s3_bucket_name}`],
        ///             conditions: [{
        ///                 test: "StringLike",
        ///                 variable: "s3:prefix",
        ///                 values: [
        ///                     "",
        ///                     "home/",
        ///                     "home/&amp;{aws:username}/",
        ///                 ],
        ///             }],
        ///         },
        ///         {
        ///             actions: ["s3:*"],
        ///             resources: [
        ///                 `arn:aws:s3:::${_var.s3_bucket_name}/home/&amp;{aws:username}`,
        ///                 `arn:aws:s3:::${_var.s3_bucket_name}/home/&amp;{aws:username}/*`,
        ///             ],
        ///         },
        ///     ],
        /// });
        /// const examplePolicy = new aws.iam.Policy("examplePolicy", {
        ///     path: "/",
        ///     policy: examplePolicyDocument.then(examplePolicyDocument =&gt; examplePolicyDocument.json),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example_policy_document = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="1",
        ///         actions=[
        ///             "s3:ListAllMyBuckets",
        ///             "s3:GetBucketLocation",
        ///         ],
        ///         resources=["arn:aws:s3:::*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["s3:ListBucket"],
        ///         resources=[f"arn:aws:s3:::{var['s3_bucket_name']}"],
        ///         conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="StringLike",
        ///             variable="s3:prefix",
        ///             values=[
        ///                 "",
        ///                 "home/",
        ///                 "home/&amp;{aws:username}/",
        ///             ],
        ///         )],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["s3:*"],
        ///         resources=[
        ///             f"arn:aws:s3:::{var['s3_bucket_name']}/home/&amp;{{aws:username}}",
        ///             f"arn:aws:s3:::{var['s3_bucket_name']}/home/&amp;{{aws:username}}/*",
        ///         ],
        ///     ),
        /// ])
        /// example_policy = aws.iam.Policy("examplePolicy",
        ///     path="/",
        ///     policy=example_policy_document.json)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "1",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListAllMyBuckets",
        ///                     "s3:GetBucketLocation",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:ListBucket",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "StringLike",
        ///                         Variable = "s3:prefix",
        ///                         Values = new[]
        ///                         {
        ///                             "",
        ///                             "home/",
        ///                             "home/&amp;{aws:username}/",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}",
        ///                     $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var examplePolicy = new Aws.Iam.Policy("examplePolicy", new()
        ///     {
        ///         Path = "/",
        ///         PolicyDocument = examplePolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"fmt"
        /// 
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		examplePolicyDocument, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// 			Statements: pulumi.Array{
        /// 				iam.GetPolicyDocumentStatement{
        /// 					Sid: pulumi.StringRef("1"),
        /// 					Actions: []string{
        /// 						"s3:ListAllMyBuckets",
        /// 						"s3:GetBucketLocation",
        /// 					},
        /// 					Resources: []string{
        /// 						"arn:aws:s3:::*",
        /// 					},
        /// 				},
        /// 				iam.GetPolicyDocumentStatement{
        /// 					Actions: []string{
        /// 						"s3:ListBucket",
        /// 					},
        /// 					Resources: []string{
        /// 						fmt.Sprintf("arn:aws:s3:::%v", _var.S3_bucket_name),
        /// 					},
        /// 					Conditions: []iam.GetPolicyDocumentStatementCondition{
        /// 						{
        /// 							Test:     "StringLike",
        /// 							Variable: "s3:prefix",
        /// 							Values: []string{
        /// 								"",
        /// 								"home/",
        /// 								"home/&amp;{aws:username}/",
        /// 							},
        /// 						},
        /// 					},
        /// 				},
        /// 				iam.GetPolicyDocumentStatement{
        /// 					Actions: []string{
        /// 						"s3:*",
        /// 					},
        /// 					Resources: []string{
        /// 						fmt.Sprintf("arn:aws:s3:::%v/home/&amp;{aws:username}", _var.S3_bucket_name),
        /// 						fmt.Sprintf("arn:aws:s3:::%v/home/&amp;{aws:username}/*", _var.S3_bucket_name),
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = iam.NewPolicy(ctx, "examplePolicy", &amp;iam.PolicyArgs{
        /// 			Path:   pulumi.String("/"),
        /// 			Policy: *pulumi.String(examplePolicyDocument.Json),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import com.pulumi.aws.iam.Policy;
        /// import com.pulumi.aws.iam.PolicyArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var examplePolicyDocument = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("1")
        ///                     .actions(                    
        ///                         "s3:ListAllMyBuckets",
        ///                         "s3:GetBucketLocation")
        ///                     .resources("arn:aws:s3:::*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("s3:ListBucket")
        ///                     .resources(String.format("arn:aws:s3:::%s", var_.s3_bucket_name()))
        ///                     .conditions(GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("StringLike")
        ///                         .variable("s3:prefix")
        ///                         .values(                        
        ///                             "",
        ///                             "home/",
        ///                             "home/&amp;{aws:username}/")
        ///                         .build())
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("s3:*")
        ///                     .resources(                    
        ///                         String.format("arn:aws:s3:::%s/home/&amp;{{aws:username}}", var_.s3_bucket_name()),
        ///                         String.format("arn:aws:s3:::%s/home/&amp;{{aws:username}}/*", var_.s3_bucket_name()))
        ///                     .build())
        ///             .build());
        /// 
        ///         var examplePolicy = new Policy("examplePolicy", PolicyArgs.builder()        
        ///             .path("/")
        ///             .policy(examplePolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   examplePolicy:
        ///     type: aws:iam:Policy
        ///     properties:
        ///       path: /
        ///       policy: ${examplePolicyDocument.json}
        /// variables:
        ///   examplePolicyDocument:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: '1'
        ///             actions:
        ///               - s3:ListAllMyBuckets
        ///               - s3:GetBucketLocation
        ///             resources:
        ///               - arn:aws:s3:::*
        ///           - actions:
        ///               - s3:ListBucket
        ///             resources:
        ///               - arn:aws:s3:::${var.s3_bucket_name}
        ///             conditions:
        ///               - test: StringLike
        ///                 variable: s3:prefix
        ///                 values:
        ///                   -
        ///                   - home/
        ///                   - home/&amp;{aws:username}/
        ///           - actions:
        ///               - s3:*
        ///             resources:
        ///               - arn:aws:s3:::${var.s3_bucket_name}/home/&amp;{aws:username}
        ///               - arn:aws:s3:::${var.s3_bucket_name}/home/&amp;{aws:username}/*
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Multiple Condition Keys and Values
        /// 
        /// You can specify a [condition with multiple keys and values](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_multi-value-conditions.html) by supplying multiple `condition` blocks with the same `test` value, but differing `variable` and `values` values.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const exampleMultipleConditionKeysAndValues = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         actions: [
        ///             "kms:Decrypt",
        ///             "kms:GenerateDataKey",
        ///         ],
        ///         conditions: [
        ///             {
        ///                 test: "ForAnyValue:StringEquals",
        ///                 values: ["pi"],
        ///                 variable: "kms:EncryptionContext:service",
        ///             },
        ///             {
        ///                 test: "ForAnyValue:StringEquals",
        ///                 values: ["rds"],
        ///                 variable: "kms:EncryptionContext:aws:pi:service",
        ///             },
        ///             {
        ///                 test: "ForAnyValue:StringEquals",
        ///                 values: [
        ///                     "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                     "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///                 ],
        ///                 variable: "kms:EncryptionContext:aws:rds:db-id",
        ///             },
        ///         ],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example_multiple_condition_keys_and_values = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     actions=[
        ///         "kms:Decrypt",
        ///         "kms:GenerateDataKey",
        ///     ],
        ///     conditions=[
        ///         aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="ForAnyValue:StringEquals",
        ///             values=["pi"],
        ///             variable="kms:EncryptionContext:service",
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="ForAnyValue:StringEquals",
        ///             values=["rds"],
        ///             variable="kms:EncryptionContext:aws:pi:service",
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///             test="ForAnyValue:StringEquals",
        ///             values=[
        ///                 "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                 "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///             ],
        ///             variable="kms:EncryptionContext:aws:rds:db-id",
        ///         ),
        ///     ],
        ///     resources=["*"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleMultipleConditionKeysAndValues = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "kms:Decrypt",
        ///                     "kms:GenerateDataKey",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "pi",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "rds",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:pi:service",
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "ForAnyValue:StringEquals",
        ///                         Values = new[]
        ///                         {
        ///                             "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                             "db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        ///                         },
        ///                         Variable = "kms:EncryptionContext:aws:rds:db-id",
        ///                     },
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// 			Statements: []iam.GetPolicyDocumentStatement{
        /// 				{
        /// 					Actions: []string{
        /// 						"kms:Decrypt",
        /// 						"kms:GenerateDataKey",
        /// 					},
        /// 					Conditions: []iam.GetPolicyDocumentStatementCondition{
        /// 						{
        /// 							Test: "ForAnyValue:StringEquals",
        /// 							Values: []string{
        /// 								"pi",
        /// 							},
        /// 							Variable: "kms:EncryptionContext:service",
        /// 						},
        /// 						{
        /// 							Test: "ForAnyValue:StringEquals",
        /// 							Values: []string{
        /// 								"rds",
        /// 							},
        /// 							Variable: "kms:EncryptionContext:aws:pi:service",
        /// 						},
        /// 						{
        /// 							Test: "ForAnyValue:StringEquals",
        /// 							Values: []string{
        /// 								"db-AAAAABBBBBCCCCCDDDDDEEEEE",
        /// 								"db-EEEEEDDDDDCCCCCBBBBBAAAAA",
        /// 							},
        /// 							Variable: "kms:EncryptionContext:aws:rds:db-id",
        /// 						},
        /// 					},
        /// 					Resources: []string{
        /// 						"*",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var exampleMultipleConditionKeysAndValues = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .actions(                
        ///                     "kms:Decrypt",
        ///                     "kms:GenerateDataKey")
        ///                 .conditions(                
        ///                     GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("ForAnyValue:StringEquals")
        ///                         .values("pi")
        ///                         .variable("kms:EncryptionContext:service")
        ///                         .build(),
        ///                     GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("ForAnyValue:StringEquals")
        ///                         .values("rds")
        ///                         .variable("kms:EncryptionContext:aws:pi:service")
        ///                         .build(),
        ///                     GetPolicyDocumentStatementConditionArgs.builder()
        ///                         .test("ForAnyValue:StringEquals")
        ///                         .values(                        
        ///                             "db-AAAAABBBBBCCCCCDDDDDEEEEE",
        ///                             "db-EEEEEDDDDDCCCCCBBBBBAAAAA")
        ///                         .variable("kms:EncryptionContext:aws:rds:db-id")
        ///                         .build())
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   exampleMultipleConditionKeysAndValues:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - kms:Decrypt
        ///               - kms:GenerateDataKey
        ///             conditions:
        ///               - test: ForAnyValue:StringEquals
        ///                 values:
        ///                   - pi
        ///                 variable: kms:EncryptionContext:service
        ///               - test: ForAnyValue:StringEquals
        ///                 values:
        ///                   - rds
        ///                 variable: kms:EncryptionContext:aws:pi:service
        ///               - test: ForAnyValue:StringEquals
        ///                 values:
        ///                   - db-AAAAABBBBBCCCCCDDDDDEEEEE
        ///                   - db-EEEEEDDDDDCCCCCBBBBBAAAAA
        ///                 variable: kms:EncryptionContext:aws:rds:db-id
        ///             resources:
        ///               - '*'
        /// ```
        /// 
        /// `data.aws_iam_policy_document.example_multiple_condition_keys_and_values.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Assume-Role Policy with Multiple Principals
        /// 
        /// You can specify multiple principal blocks with different types. You can also use this data source to generate an assume-role policy.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const eventStreamBucketRoleAssumeRolePolicy = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         actions: ["sts:AssumeRole"],
        ///         principals: [
        ///             {
        ///                 type: "Service",
        ///                 identifiers: ["firehose.amazonaws.com"],
        ///             },
        ///             {
        ///                 type: "AWS",
        ///                 identifiers: [_var.trusted_role_arn],
        ///             },
        ///             {
        ///                 type: "Federated",
        ///                 identifiers: [
        ///                     `arn:aws:iam::${_var.account_id}:saml-provider/${_var.provider_name}`,
        ///                     "cognito-identity.amazonaws.com",
        ///                 ],
        ///             },
        ///         ],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// event_stream_bucket_role_assume_role_policy = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     actions=["sts:AssumeRole"],
        ///     principals=[
        ///         aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///             type="Service",
        ///             identifiers=["firehose.amazonaws.com"],
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///             type="AWS",
        ///             identifiers=[var["trusted_role_arn"]],
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///             type="Federated",
        ///             identifiers=[
        ///                 f"arn:aws:iam::{var['account_id']}:saml-provider/{var['provider_name']}",
        ///                 "cognito-identity.amazonaws.com",
        ///             ],
        ///         ),
        ///     ],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var eventStreamBucketRoleAssumeRolePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "sts:AssumeRole",
        ///                 },
        ///                 Principals = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Service",
        ///                         Identifiers = new[]
        ///                         {
        ///                             "firehose.amazonaws.com",
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "AWS",
        ///                         Identifiers = new[]
        ///                         {
        ///                             @var.Trusted_role_arn,
        ///                         },
        ///                     },
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "Federated",
        ///                         Identifiers = new[]
        ///                         {
        ///                             $"arn:aws:iam::{@var.Account_id}:saml-provider/{@var.Provider_name}",
        ///                             "cognito-identity.amazonaws.com",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// "fmt"
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// _, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "sts:AssumeRole",
        /// },
        /// Principals: []iam.GetPolicyDocumentStatementPrincipal{
        /// {
        /// Type: "Service",
        /// Identifiers: []string{
        /// "firehose.amazonaws.com",
        /// },
        /// },
        /// {
        /// Type: "AWS",
        /// Identifiers: interface{}{
        /// _var.Trusted_role_arn,
        /// },
        /// },
        /// {
        /// Type: "Federated",
        /// Identifiers: []string{
        /// fmt.Sprintf("arn:aws:iam::%v:saml-provider/%v", _var.Account_id, _var.Provider_name),
        /// "cognito-identity.amazonaws.com",
        /// },
        /// },
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var eventStreamBucketRoleAssumeRolePolicy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .actions("sts:AssumeRole")
        ///                 .principals(                
        ///                     GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                         .type("Service")
        ///                         .identifiers("firehose.amazonaws.com")
        ///                         .build(),
        ///                     GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                         .type("AWS")
        ///                         .identifiers(var_.trusted_role_arn())
        ///                         .build(),
        ///                     GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                         .type("Federated")
        ///                         .identifiers(                        
        ///                             String.format("arn:aws:iam::%s:saml-provider/%s", var_.account_id(),var_.provider_name()),
        ///                             "cognito-identity.amazonaws.com")
        ///                         .build())
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   eventStreamBucketRoleAssumeRolePolicy:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - sts:AssumeRole
        ///             principals:
        ///               - type: Service
        ///                 identifiers:
        ///                   - firehose.amazonaws.com
        ///               - type: AWS
        ///                 identifiers:
        ///                   - ${var.trusted_role_arn}
        ///               - type: Federated
        ///                 identifiers:
        ///                   - arn:aws:iam::${var.account_id}:saml-provider/${var.provider_name}
        ///                   - cognito-identity.amazonaws.com
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using A Source Document
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const source = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "SidToOverride",
        ///             actions: ["s3:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const sourceDocumentExample = source.then(source =&gt; aws.iam.getPolicyDocument({
        ///     sourcePolicyDocuments: [source.json],
        ///     statements: [{
        ///         sid: "SidToOverride",
        ///         actions: ["s3:*"],
        ///         resources: [
        ///             "arn:aws:s3:::somebucket",
        ///             "arn:aws:s3:::somebucket/*",
        ///         ],
        ///     }],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// source = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["ec2:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="SidToOverride",
        ///         actions=["s3:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// source_document_example = aws.iam.get_policy_document(source_policy_documents=[source.json],
        ///     statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="SidToOverride",
        ///         actions=["s3:*"],
        ///         resources=[
        ///             "arn:aws:s3:::somebucket",
        ///             "arn:aws:s3:::somebucket/*",
        ///         ],
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// source, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// SourcePolicyDocuments: interface{}{
        /// source.Json,
        /// },
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "arn:aws:s3:::somebucket",
        /// "arn:aws:s3:::somebucket/*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var source = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("SidToOverride")
        ///                     .actions("s3:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var sourceDocumentExample = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .sourcePolicyDocuments(source.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("SidToOverride")
        ///                 .actions("s3:*")
        ///                 .resources(                
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   source:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   sourceDocumentExample:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         sourcePolicyDocuments:
        ///           - ${source.json}
        ///         statements:
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - arn:aws:s3:::somebucket
        ///               - arn:aws:s3:::somebucket/*
        /// ```
        /// 
        /// `data.aws_iam_policy_document.source_document_example.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example Using An Override Document
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const override = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "SidToOverride",
        ///         actions: ["s3:*"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const overridePolicyDocumentExample = override.then(override =&gt; aws.iam.getPolicyDocument({
        ///     overridePolicyDocuments: [override.json],
        ///     statements: [
        ///         {
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "SidToOverride",
        ///             actions: ["s3:*"],
        ///             resources: [
        ///                 "arn:aws:s3:::somebucket",
        ///                 "arn:aws:s3:::somebucket/*",
        ///             ],
        ///         },
        ///     ],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// override = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="SidToOverride",
        ///     actions=["s3:*"],
        ///     resources=["*"],
        /// )])
        /// override_policy_document_example = aws.iam.get_policy_document(override_policy_documents=[override.json],
        ///     statements=[
        ///         aws.iam.GetPolicyDocumentStatementArgs(
        ///             actions=["ec2:*"],
        ///             resources=["*"],
        ///         ),
        ///         aws.iam.GetPolicyDocumentStatementArgs(
        ///             sid="SidToOverride",
        ///             actions=["s3:*"],
        ///             resources=[
        ///                 "arn:aws:s3:::somebucket",
        ///                 "arn:aws:s3:::somebucket/*",
        ///             ],
        ///         ),
        ///     ])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var overridePolicyDocumentExample = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "SidToOverride",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "arn:aws:s3:::somebucket",
        ///                     "arn:aws:s3:::somebucket/*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// override, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// OverridePolicyDocuments: interface{}{
        /// override.Json,
        /// },
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("SidToOverride"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "arn:aws:s3:::somebucket",
        /// "arn:aws:s3:::somebucket/*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var override = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("SidToOverride")
        ///                 .actions("s3:*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var overridePolicyDocumentExample = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .overridePolicyDocuments(override.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("SidToOverride")
        ///                     .actions("s3:*")
        ///                     .resources(                    
        ///                         "arn:aws:s3:::somebucket",
        ///                         "arn:aws:s3:::somebucket/*")
        ///                     .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   override:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   overridePolicyDocumentExample:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         overridePolicyDocuments:
        ///           - ${override.json}
        ///         statements:
        ///           - actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: SidToOverride
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - arn:aws:s3:::somebucket
        ///               - arn:aws:s3:::somebucket/*
        /// ```
        /// 
        /// `data.aws_iam_policy_document.override_policy_document_example.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example with Both Source and Override Documents
        /// 
        /// You can also combine `source_policy_documents` and `override_policy_documents` in the same document.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const source = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceholder",
        ///         actions: ["ec2:DescribeAccountAttributes"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const override = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceholder",
        ///         actions: ["s3:GetObject"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const politik = Promise.all([source, override]).then(([source, override]) =&gt; aws.iam.getPolicyDocument({
        ///     sourcePolicyDocuments: [source.json],
        ///     overridePolicyDocuments: [override.json],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// source = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceholder",
        ///     actions=["ec2:DescribeAccountAttributes"],
        ///     resources=["*"],
        /// )])
        /// override = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceholder",
        ///     actions=["s3:GetObject"],
        ///     resources=["*"],
        /// )])
        /// politik = aws.iam.get_policy_document(source_policy_documents=[source.json],
        ///     override_policy_documents=[override.json])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var source = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:DescribeAccountAttributes",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @override = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceholder",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:GetObject",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var politik = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             source.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             @override.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// source, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceholder"),
        /// Actions: []string{
        /// "ec2:DescribeAccountAttributes",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// override, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceholder"),
        /// Actions: []string{
        /// "s3:GetObject",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// SourcePolicyDocuments: interface{}{
        /// source.Json,
        /// },
        /// OverridePolicyDocuments: interface{}{
        /// override.Json,
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var source = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceholder")
        ///                 .actions("ec2:DescribeAccountAttributes")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var override = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceholder")
        ///                 .actions("s3:GetObject")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var politik = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .sourcePolicyDocuments(source.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .overridePolicyDocuments(override.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   source:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceholder
        ///             actions:
        ///               - ec2:DescribeAccountAttributes
        ///             resources:
        ///               - '*'
        ///   override:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceholder
        ///             actions:
        ///               - s3:GetObject
        ///             resources:
        ///               - '*'
        ///   politik:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         sourcePolicyDocuments:
        ///           - ${source.json}
        ///         overridePolicyDocuments:
        ///           - ${override.json}
        /// ```
        /// 
        /// `data.aws_iam_policy_document.politik.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Source Documents
        /// 
        /// Multiple documents can be combined using the `source_policy_documents` or `override_policy_documents` attributes. `source_policy_documents` requires that all documents have unique Sids, while `override_policy_documents` will iteratively override matching Sids.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const sourceOne = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "UniqueSidOne",
        ///             actions: ["s3:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const sourceTwo = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             sid: "UniqueSidTwo",
        ///             actions: ["iam:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             actions: ["lambda:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const combined = Promise.all([sourceOne, sourceTwo]).then(([sourceOne, sourceTwo]) =&gt; aws.iam.getPolicyDocument({
        ///     sourcePolicyDocuments: [
        ///         sourceOne.json,
        ///         sourceTwo.json,
        ///     ],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// source_one = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["ec2:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="UniqueSidOne",
        ///         actions=["s3:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// source_two = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="UniqueSidTwo",
        ///         actions=["iam:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         actions=["lambda:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// combined = aws.iam.get_policy_document(source_policy_documents=[
        ///     source_one.json,
        ///     source_two.json,
        /// ])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sourceOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidOne",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var sourceTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "UniqueSidTwo",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Actions = new[]
        ///                 {
        ///                     "lambda:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         SourcePolicyDocuments = new[]
        ///         {
        ///             sourceOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             sourceTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// sourceOne, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("UniqueSidOne"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// sourceTwo, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: pulumi.Array{
        /// iam.GetPolicyDocumentStatement{
        /// Sid: pulumi.StringRef("UniqueSidTwo"),
        /// Actions: []string{
        /// "iam:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// iam.GetPolicyDocumentStatement{
        /// Actions: []string{
        /// "lambda:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// SourcePolicyDocuments: interface{}{
        /// sourceOne.Json,
        /// sourceTwo.Json,
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var sourceOne = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("UniqueSidOne")
        ///                     .actions("s3:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var sourceTwo = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("UniqueSidTwo")
        ///                     .actions("iam:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .actions("lambda:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var combined = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .sourcePolicyDocuments(            
        ///                 sourceOne.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()),
        ///                 sourceTwo.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   sourceOne:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: UniqueSidOne
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   sourceTwo:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: UniqueSidTwo
        ///             actions:
        ///               - iam:*
        ///             resources:
        ///               - '*'
        ///           - actions:
        ///               - lambda:*
        ///             resources:
        ///               - '*'
        ///   combined:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         sourcePolicyDocuments:
        ///           - ${sourceOne.json}
        ///           - ${sourceTwo.json}
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Example of Merging Override Documents
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const policyOne = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceHolderOne",
        ///         effect: "Allow",
        ///         actions: ["s3:*"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const policyTwo = aws.iam.getPolicyDocument({
        ///     statements: [
        ///         {
        ///             effect: "Allow",
        ///             actions: ["ec2:*"],
        ///             resources: ["*"],
        ///         },
        ///         {
        ///             sid: "OverridePlaceHolderTwo",
        ///             effect: "Allow",
        ///             actions: ["iam:*"],
        ///             resources: ["*"],
        ///         },
        ///     ],
        /// });
        /// const policyThree = aws.iam.getPolicyDocument({
        ///     statements: [{
        ///         sid: "OverridePlaceHolderOne",
        ///         effect: "Deny",
        ///         actions: ["logs:*"],
        ///         resources: ["*"],
        ///     }],
        /// });
        /// const combined = Promise.all([policyOne, policyTwo, policyThree]).then(([policyOne, policyTwo, policyThree]) =&gt; aws.iam.getPolicyDocument({
        ///     overridePolicyDocuments: [
        ///         policyOne.json,
        ///         policyTwo.json,
        ///         policyThree.json,
        ///     ],
        ///     statements: [{
        ///         sid: "OverridePlaceHolderTwo",
        ///         effect: "Deny",
        ///         actions: ["*"],
        ///         resources: ["*"],
        ///     }],
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// policy_one = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceHolderOne",
        ///     effect="Allow",
        ///     actions=["s3:*"],
        ///     resources=["*"],
        /// )])
        /// policy_two = aws.iam.get_policy_document(statements=[
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         effect="Allow",
        ///         actions=["ec2:*"],
        ///         resources=["*"],
        ///     ),
        ///     aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="OverridePlaceHolderTwo",
        ///         effect="Allow",
        ///         actions=["iam:*"],
        ///         resources=["*"],
        ///     ),
        /// ])
        /// policy_three = aws.iam.get_policy_document(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     sid="OverridePlaceHolderOne",
        ///     effect="Deny",
        ///     actions=["logs:*"],
        ///     resources=["*"],
        /// )])
        /// combined = aws.iam.get_policy_document(override_policy_documents=[
        ///         policy_one.json,
        ///         policy_two.json,
        ///         policy_three.json,
        ///     ],
        ///     statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///         sid="OverridePlaceHolderTwo",
        ///         effect="Deny",
        ///         actions=["*"],
        ///         resources=["*"],
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var policyOne = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "s3:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyTwo = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "ec2:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "iam:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var policyThree = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderOne",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "logs:*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var combined = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         OverridePolicyDocuments = new[]
        ///         {
        ///             policyOne.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyTwo.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///             policyThree.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///         },
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Sid = "OverridePlaceHolderTwo",
        ///                 Effect = "Deny",
        ///                 Actions = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     "*",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// policyOne, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderOne"),
        /// Effect: pulumi.StringRef("Allow"),
        /// Actions: []string{
        /// "s3:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// policyTwo, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Effect: pulumi.StringRef("Allow"),
        /// Actions: []string{
        /// "ec2:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderTwo"),
        /// Effect: pulumi.StringRef("Allow"),
        /// Actions: []string{
        /// "iam:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// policyThree, err := iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderOne"),
        /// Effect: pulumi.StringRef("Deny"),
        /// Actions: []string{
        /// "logs:*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// _, err = iam.GetPolicyDocument(ctx, &amp;iam.GetPolicyDocumentArgs{
        /// OverridePolicyDocuments: interface{}{
        /// policyOne.Json,
        /// policyTwo.Json,
        /// policyThree.Json,
        /// },
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Sid: pulumi.StringRef("OverridePlaceHolderTwo"),
        /// Effect: pulumi.StringRef("Deny"),
        /// Actions: []string{
        /// "*",
        /// },
        /// Resources: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// }, nil);
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var policyOne = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceHolderOne")
        ///                 .effect("Allow")
        ///                 .actions("s3:*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var policyTwo = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(            
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .effect("Allow")
        ///                     .actions("ec2:*")
        ///                     .resources("*")
        ///                     .build(),
        ///                 GetPolicyDocumentStatementArgs.builder()
        ///                     .sid("OverridePlaceHolderTwo")
        ///                     .effect("Allow")
        ///                     .actions("iam:*")
        ///                     .resources("*")
        ///                     .build())
        ///             .build());
        /// 
        ///         final var policyThree = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceHolderOne")
        ///                 .effect("Deny")
        ///                 .actions("logs:*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///         final var combined = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .overridePolicyDocuments(            
        ///                 policyOne.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()),
        ///                 policyTwo.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()),
        ///                 policyThree.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json()))
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .sid("OverridePlaceHolderTwo")
        ///                 .effect("Deny")
        ///                 .actions("*")
        ///                 .resources("*")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   policyOne:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceHolderOne
        ///             effect: Allow
        ///             actions:
        ///               - s3:*
        ///             resources:
        ///               - '*'
        ///   policyTwo:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - effect: Allow
        ///             actions:
        ///               - ec2:*
        ///             resources:
        ///               - '*'
        ///           - sid: OverridePlaceHolderTwo
        ///             effect: Allow
        ///             actions:
        ///               - iam:*
        ///             resources:
        ///               - '*'
        ///   policyThree:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - sid: OverridePlaceHolderOne
        ///             effect: Deny
        ///             actions:
        ///               - logs:*
        ///             resources:
        ///               - '*'
        ///   combined:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         overridePolicyDocuments:
        ///           - ${policyOne.json}
        ///           - ${policyTwo.json}
        ///           - ${policyThree.json}
        ///         statements:
        ///           - sid: OverridePlaceHolderTwo
        ///             effect: Deny
        ///             actions:
        ///               - '*'
        ///             resources:
        ///               - '*'
        /// ```
        /// 
        /// `data.aws_iam_policy_document.combined.json` will evaluate to:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// ```
        /// ```python
        /// import pulumi
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// {}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyDocumentResult> Invoke(GetPolicyDocumentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyDocumentResult>("aws:iam/getPolicyDocument:getPolicyDocument", args ?? new GetPolicyDocumentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyDocumentArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IAM policy document whose statements with non-blank `sid`s will override statements with the same `sid` from documents assigned to the `source_json`, `source_policy_documents`, and `override_policy_documents` arguments. Non-overriding statements will be added to the exported document.
        /// 
        /// &gt; **NOTE:** Statements without a `sid` cannot be overridden. In other words, a statement without a `sid` from documents assigned to the `source_json` or `source_policy_documents` arguments cannot be overridden by statements from documents assigned to the `override_json` or `override_policy_documents` arguments.
        /// </summary>
        [Input("overrideJson")]
        public string? OverrideJson { get; set; }

        [Input("overridePolicyDocuments")]
        private List<string>? _overridePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from documents provided in the `source_json` and `source_policy_documents` arguments.  Non-overriding statements will be added to the exported document.
        /// </summary>
        public List<string> OverridePolicyDocuments
        {
            get => _overridePolicyDocuments ?? (_overridePolicyDocuments = new List<string>());
            set => _overridePolicyDocuments = value;
        }

        /// <summary>
        /// ID for the policy document.
        /// </summary>
        [Input("policyId")]
        public string? PolicyId { get; set; }

        /// <summary>
        /// IAM policy document used as a base for the exported policy document. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        [Input("sourceJson")]
        public string? SourceJson { get; set; }

        [Input("sourcePolicyDocuments")]
        private List<string>? _sourcePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. Statements defined in `source_policy_documents` or `source_json` must have unique `sid`s. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        public List<string> SourcePolicyDocuments
        {
            get => _sourcePolicyDocuments ?? (_sourcePolicyDocuments = new List<string>());
            set => _sourcePolicyDocuments = value;
        }

        [Input("statements")]
        private List<Inputs.GetPolicyDocumentStatementArgs>? _statements;

        /// <summary>
        /// Configuration block for a policy statement. Detailed below.
        /// </summary>
        public List<Inputs.GetPolicyDocumentStatementArgs> Statements
        {
            get => _statements ?? (_statements = new List<Inputs.GetPolicyDocumentStatementArgs>());
            set => _statements = value;
        }

        /// <summary>
        /// IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetPolicyDocumentArgs()
        {
        }
        public static new GetPolicyDocumentArgs Empty => new GetPolicyDocumentArgs();
    }

    public sealed class GetPolicyDocumentInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// IAM policy document whose statements with non-blank `sid`s will override statements with the same `sid` from documents assigned to the `source_json`, `source_policy_documents`, and `override_policy_documents` arguments. Non-overriding statements will be added to the exported document.
        /// 
        /// &gt; **NOTE:** Statements without a `sid` cannot be overridden. In other words, a statement without a `sid` from documents assigned to the `source_json` or `source_policy_documents` arguments cannot be overridden by statements from documents assigned to the `override_json` or `override_policy_documents` arguments.
        /// </summary>
        [Input("overrideJson")]
        public Input<string>? OverrideJson { get; set; }

        [Input("overridePolicyDocuments")]
        private InputList<string>? _overridePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. In merging, statements with non-blank `sid`s will override statements with the same `sid` from earlier documents in the list. Statements with non-blank `sid`s will also override statements with the same `sid` from documents provided in the `source_json` and `source_policy_documents` arguments.  Non-overriding statements will be added to the exported document.
        /// </summary>
        public InputList<string> OverridePolicyDocuments
        {
            get => _overridePolicyDocuments ?? (_overridePolicyDocuments = new InputList<string>());
            set => _overridePolicyDocuments = value;
        }

        /// <summary>
        /// ID for the policy document.
        /// </summary>
        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// IAM policy document used as a base for the exported policy document. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        [Input("sourceJson")]
        public Input<string>? SourceJson { get; set; }

        [Input("sourcePolicyDocuments")]
        private InputList<string>? _sourcePolicyDocuments;

        /// <summary>
        /// List of IAM policy documents that are merged together into the exported document. Statements defined in `source_policy_documents` or `source_json` must have unique `sid`s. Statements with the same `sid` from documents assigned to the `override_json` and `override_policy_documents` arguments will override source statements.
        /// </summary>
        public InputList<string> SourcePolicyDocuments
        {
            get => _sourcePolicyDocuments ?? (_sourcePolicyDocuments = new InputList<string>());
            set => _sourcePolicyDocuments = value;
        }

        [Input("statements")]
        private InputList<Inputs.GetPolicyDocumentStatementInputArgs>? _statements;

        /// <summary>
        /// Configuration block for a policy statement. Detailed below.
        /// </summary>
        public InputList<Inputs.GetPolicyDocumentStatementInputArgs> Statements
        {
            get => _statements ?? (_statements = new InputList<Inputs.GetPolicyDocumentStatementInputArgs>());
            set => _statements = value;
        }

        /// <summary>
        /// IAM policy document version. Valid values are `2008-10-17` and `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetPolicyDocumentInvokeArgs()
        {
        }
        public static new GetPolicyDocumentInvokeArgs Empty => new GetPolicyDocumentInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyDocumentResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Standard JSON policy document rendered based on the arguments above.
        /// </summary>
        public readonly string Json;
        public readonly string? OverrideJson;
        public readonly ImmutableArray<string> OverridePolicyDocuments;
        public readonly string? PolicyId;
        public readonly string? SourceJson;
        public readonly ImmutableArray<string> SourcePolicyDocuments;
        public readonly ImmutableArray<Outputs.GetPolicyDocumentStatementResult> Statements;
        public readonly string? Version;

        [OutputConstructor]
        private GetPolicyDocumentResult(
            string id,

            string json,

            string? overrideJson,

            ImmutableArray<string> overridePolicyDocuments,

            string? policyId,

            string? sourceJson,

            ImmutableArray<string> sourcePolicyDocuments,

            ImmutableArray<Outputs.GetPolicyDocumentStatementResult> statements,

            string? version)
        {
            Id = id;
            Json = json;
            OverrideJson = overrideJson;
            OverridePolicyDocuments = overridePolicyDocuments;
            PolicyId = policyId;
            SourceJson = sourceJson;
            SourcePolicyDocuments = sourcePolicyDocuments;
            Statements = statements;
            Version = version;
        }
    }
}
