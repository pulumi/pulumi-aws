// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    public static class GetPolicyDocument
    {
        /// <summary>
        /// Generates an IAM policy document in JSON format.
        /// 
        /// This is a data source which can be used to construct a JSON representation of
        /// an IAM policy document, for use with resources which expect policy documents,
        /// such as the `aws.iam.Policy` resource.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var examplePolicyDocument = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:ListAllMyBuckets",
        ///                         "s3:GetBucketLocation",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "arn:aws:s3:::*",
        ///                     },
        ///                     Sid = "1",
        ///                 },
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:ListBucket",
        ///                     },
        ///                     Conditions = 
        ///                     {
        ///                         new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionArgs
        ///                         {
        ///                             Test = "StringLike",
        ///                             Values = 
        ///                             {
        ///                                 "",
        ///                                 "home/",
        ///                                 "home/&amp;{aws:username}/",
        ///                             },
        ///                             Variable = "s3:prefix",
        ///                         },
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         $"arn:aws:s3:::{@var.S3_bucket_name}",
        ///                     },
        ///                 },
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}",
        ///                         $"arn:aws:s3:::{@var.S3_bucket_name}/home/&amp;{{aws:username}}/*",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///         var examplePolicy = new Aws.Iam.Policy("examplePolicy", new Aws.Iam.PolicyArgs
        ///         {
        ///             Path = "/",
        ///             Policy = examplePolicyDocument.Apply(examplePolicyDocument =&gt; examplePolicyDocument.Json),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// Using this data source to generate policy documents is *optional*. It is also
        /// valid to use literal JSON strings within your configuration, or to use the
        /// `file` interpolation function to read a raw JSON policy document from a file.
        /// 
        /// ## Context Variable Interpolation
        /// 
        /// The IAM policy document format allows context variables to be interpolated
        /// into various strings within a statement. The native IAM policy document format
        /// uses `${...}`-style syntax that is in conflict with interpolation
        /// syntax, so this data source instead uses `&amp;{...}` syntax for interpolations that
        /// should be processed by AWS rather than by this provider.
        /// 
        /// ## Wildcard Principal
        /// 
        /// In order to define wildcard principal (a.k.a. anonymous user) use `type = "*"` and
        /// `identifiers = ["*"]`. In that case the rendered json will contain `"Principal": "*"`.
        /// Note, that even though the [IAM Documentation](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html)
        /// states that `"Principal": "*"` and `"Principal": {"AWS": "*"}` are equivalent,
        /// those principals have different behavior for IAM Role Trust Policy. Therefore
        /// this provider will normalize the principal field only in above-mentioned case and principals
        /// like `type = "AWS"` and `identifiers = ["*"]` will be rendered as `"Principal": {"AWS": "*"}`.
        /// 
        /// ## Example with Multiple Principals
        /// 
        /// Showing how you can use this as an assume role policy as well as showing how you can specify multiple principal blocks with different types.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var eventStreamBucketRoleAssumeRolePolicy = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "sts:AssumeRole",
        ///                     },
        ///                     Principals = 
        ///                     {
        ///                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
        ///                         {
        ///                             Identifiers = 
        ///                             {
        ///                                 "firehose.amazonaws.com",
        ///                             },
        ///                             Type = "Service",
        ///                         },
        ///                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
        ///                         {
        ///                             Identifiers = 
        ///                             {
        ///                                 @var.Trusted_role_arn,
        ///                             },
        ///                             Type = "AWS",
        ///                         },
        ///                         new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalArgs
        ///                         {
        ///                             Identifiers = 
        ///                             {
        ///                                 $"arn:aws:iam::{@var.Account_id}:saml-provider/{@var.Provider_name}",
        ///                                 "cognito-identity.amazonaws.com",
        ///                             },
        ///                             Type = "Federated",
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ## Example with Source and Override
        /// 
        /// Showing how you can use `source_json` and `override_json`
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var source = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "ec2:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "*",
        ///                     },
        ///                 },
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "*",
        ///                     },
        ///                     Sid = "SidToOverwrite",
        ///                 },
        ///             },
        ///         }));
        ///         var sourceJsonExample = source.Apply(source =&gt; Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             SourceJson = source.Json,
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "arn:aws:s3:::somebucket",
        ///                         "arn:aws:s3:::somebucket/*",
        ///                     },
        ///                     Sid = "SidToOverwrite",
        ///                 },
        ///             },
        ///         })));
        ///         var @override = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "*",
        ///                     },
        ///                     Sid = "SidToOverwrite",
        ///                 },
        ///             },
        ///         }));
        ///         var overrideJsonExample = @override.Apply(@override =&gt; Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             OverrideJson = @override.Json,
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "ec2:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "*",
        ///                     },
        ///                 },
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:*",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "arn:aws:s3:::somebucket",
        ///                         "arn:aws:s3:::somebucket/*",
        ///                     },
        ///                     Sid = "SidToOverwrite",
        ///                 },
        ///             },
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// `data.aws_iam_policy_document.source_json_example.json` will evaluate to:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// `data.aws_iam_policy_document.override_json_example.json` will evaluate to:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// You can also combine `source_json` and `override_json` in the same document.
        /// 
        /// ## Example without Statement
        /// 
        /// Use without a `statement`:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var source = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "ec2:DescribeAccountAttributes",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "*",
        ///                     },
        ///                     Sid = "OverridePlaceholder",
        ///                 },
        ///             },
        ///         }));
        ///         var @override = Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///         {
        ///             Statements = 
        ///             {
        ///                 new Aws.Iam.Inputs.GetPolicyDocumentStatementArgs
        ///                 {
        ///                     Actions = 
        ///                     {
        ///                         "s3:GetObject",
        ///                     },
        ///                     Resources = 
        ///                     {
        ///                         "*",
        ///                     },
        ///                     Sid = "OverridePlaceholder",
        ///                 },
        ///             },
        ///         }));
        ///         var politik = Output.Tuple(@override, source).Apply(values =&gt;
        ///         {
        ///             var @override = values.Item1;
        ///             var source = values.Item2;
        ///             return Output.Create(Aws.Iam.GetPolicyDocument.InvokeAsync(new Aws.Iam.GetPolicyDocumentArgs
        ///             {
        ///                 OverrideJson = @override.Json,
        ///                 SourceJson = source.Json,
        ///             }));
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// `data.aws_iam_policy_document.politik.json` will evaluate to:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///     }
        /// 
        /// }
        /// ```
        /// </summary>
        public static Task<GetPolicyDocumentResult> InvokeAsync(GetPolicyDocumentArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPolicyDocumentResult>("aws:iam/getPolicyDocument:getPolicyDocument", args ?? new GetPolicyDocumentArgs(), options.WithVersion());
    }


    public sealed class GetPolicyDocumentArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// An IAM policy document to import and override the
        /// current policy document.  Statements with non-blank `sid`s in the override
        /// document will overwrite statements with the same `sid` in the current document.
        /// Statements without an `sid` cannot be overwritten.
        /// </summary>
        [Input("overrideJson")]
        public string? OverrideJson { get; set; }

        /// <summary>
        /// An ID for the policy document.
        /// </summary>
        [Input("policyId")]
        public string? PolicyId { get; set; }

        /// <summary>
        /// An IAM policy document to import as a base for the
        /// current policy document.  Statements with non-blank `sid`s in the current
        /// policy document will overwrite statements with the same `sid` in the source
        /// json.  Statements without an `sid` cannot be overwritten.
        /// </summary>
        [Input("sourceJson")]
        public string? SourceJson { get; set; }

        [Input("statements")]
        private List<Inputs.GetPolicyDocumentStatementArgs>? _statements;

        /// <summary>
        /// A nested configuration block (described below)
        /// configuring one *statement* to be included in the policy document.
        /// </summary>
        public List<Inputs.GetPolicyDocumentStatementArgs> Statements
        {
            get => _statements ?? (_statements = new List<Inputs.GetPolicyDocumentStatementArgs>());
            set => _statements = value;
        }

        /// <summary>
        /// IAM policy document version. Valid values: `2008-10-17`, `2012-10-17`. Defaults to `2012-10-17`. For more information, see the [AWS IAM User Guide](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_version.html).
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetPolicyDocumentArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPolicyDocumentResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The above arguments serialized as a standard JSON policy document.
        /// </summary>
        public readonly string Json;
        public readonly string? OverrideJson;
        public readonly string? PolicyId;
        public readonly string? SourceJson;
        public readonly ImmutableArray<Outputs.GetPolicyDocumentStatementResult> Statements;
        public readonly string? Version;

        [OutputConstructor]
        private GetPolicyDocumentResult(
            string id,

            string json,

            string? overrideJson,

            string? policyId,

            string? sourceJson,

            ImmutableArray<Outputs.GetPolicyDocumentStatementResult> statements,

            string? version)
        {
            Id = id;
            Json = json;
            OverrideJson = overrideJson;
            PolicyId = policyId;
            SourceJson = sourceJson;
            Statements = statements;
            Version = version;
        }
    }
}
