// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    /// <summary>
    /// Manages centralized root access features across AWS member accounts managed using AWS Organizations. More information about managing root access in IAM can be found in the [Centralize root access for member accounts](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_root-enable-root-access.html).
    /// 
    /// &gt; **NOTE:** The AWS account utilizing this resource must be an Organizations management account. Also, you must enable trusted access for AWS Identity and Access Management in AWS Organizations.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Organizations.Organization("example", new()
    ///     {
    ///         AwsServiceAccessPrincipals = new[]
    ///         {
    ///             "iam.amazonaws.com",
    ///         },
    ///         FeatureSet = "ALL",
    ///     });
    /// 
    ///     var exampleOrganizationsFeatures = new Aws.Iam.OrganizationsFeatures("example", new()
    ///     {
    ///         EnabledFeatures = new[]
    ///         {
    ///             "RootCredentialsManagement",
    ///             "RootSessions",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import root access features using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:iam/organizationsFeatures:OrganizationsFeatures example o-1234567
    /// ```
    /// </summary>
    [AwsResourceType("aws:iam/organizationsFeatures:OrganizationsFeatures")]
    public partial class OrganizationsFeatures : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of IAM features to enable. Valid values are `RootCredentialsManagement` and `RootSessions`.
        /// </summary>
        [Output("enabledFeatures")]
        public Output<ImmutableArray<string>> EnabledFeatures { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationsFeatures resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationsFeatures(string name, OrganizationsFeaturesArgs args, CustomResourceOptions? options = null)
            : base("aws:iam/organizationsFeatures:OrganizationsFeatures", name, args ?? new OrganizationsFeaturesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationsFeatures(string name, Input<string> id, OrganizationsFeaturesState? state = null, CustomResourceOptions? options = null)
            : base("aws:iam/organizationsFeatures:OrganizationsFeatures", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationsFeatures resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationsFeatures Get(string name, Input<string> id, OrganizationsFeaturesState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationsFeatures(name, id, state, options);
        }
    }

    public sealed class OrganizationsFeaturesArgs : global::Pulumi.ResourceArgs
    {
        [Input("enabledFeatures", required: true)]
        private InputList<string>? _enabledFeatures;

        /// <summary>
        /// List of IAM features to enable. Valid values are `RootCredentialsManagement` and `RootSessions`.
        /// </summary>
        public InputList<string> EnabledFeatures
        {
            get => _enabledFeatures ?? (_enabledFeatures = new InputList<string>());
            set => _enabledFeatures = value;
        }

        public OrganizationsFeaturesArgs()
        {
        }
        public static new OrganizationsFeaturesArgs Empty => new OrganizationsFeaturesArgs();
    }

    public sealed class OrganizationsFeaturesState : global::Pulumi.ResourceArgs
    {
        [Input("enabledFeatures")]
        private InputList<string>? _enabledFeatures;

        /// <summary>
        /// List of IAM features to enable. Valid values are `RootCredentialsManagement` and `RootSessions`.
        /// </summary>
        public InputList<string> EnabledFeatures
        {
            get => _enabledFeatures ?? (_enabledFeatures = new InputList<string>());
            set => _enabledFeatures = value;
        }

        public OrganizationsFeaturesState()
        {
        }
        public static new OrganizationsFeaturesState Empty => new OrganizationsFeaturesState();
    }
}
