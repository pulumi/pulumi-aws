// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    /// <summary>
    /// Provides an IAM Virtual MFA Device.
    /// 
    /// &gt; **Note:** All attributes will be stored in the raw state as plain-text.
    /// **Note:** A virtual MFA device cannot be directly associated with an IAM User from the provider.
    ///   To associate the virtual MFA device with a user and enable it, use the code returned in either `base_32_string_seed` or `qr_code_png` to generate TOTP authentication codes.
    ///   The authentication codes can then be used with the AWS CLI command [`aws iam enable-mfa-device`](https://docs.aws.amazon.com/cli/latest/reference/iam/enable-mfa-device.html) or the AWS API call [`EnableMFADevice`](https://docs.aws.amazon.com/IAM/latest/APIReference/API_EnableMFADevice.html).
    /// 
    /// ## Example Usage
    /// 
    /// **Using certs on file:**
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Iam.VirtualMfaDevice("example", new()
    ///     {
    ///         VirtualMfaDeviceName = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_iam_virtual_mfa_device.example
    /// 
    ///  id = "arn:aws:iam::123456789012:mfa/example" } Using `pulumi import`, import IAM Virtual MFA Devices using the `arn`. For exampleconsole % pulumi import aws_iam_virtual_mfa_device.example arn:aws:iam::123456789012:mfa/example
    /// </summary>
    [AwsResourceType("aws:iam/virtualMfaDevice:VirtualMfaDevice")]
    public partial class VirtualMfaDevice : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) specifying the virtual mfa device.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base_32_string_seed` is base64-encoded.
        /// </summary>
        [Output("base32StringSeed")]
        public Output<string> Base32StringSeed { get; private set; } = null!;

        /// <summary>
        /// The date and time when the virtual MFA device was enabled.
        /// </summary>
        [Output("enableDate")]
        public Output<string> EnableDate { get; private set; } = null!;

        /// <summary>
        /// The path for the virtual MFA device.
        /// </summary>
        [Output("path")]
        public Output<string?> Path { get; private set; } = null!;

        /// <summary>
        /// A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
        /// </summary>
        [Output("qrCodePng")]
        public Output<string> QrCodePng { get; private set; } = null!;

        /// <summary>
        /// Map of resource tags for the virtual mfa device. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The associated IAM User name if the virtual MFA device is enabled.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
        /// </summary>
        [Output("virtualMfaDeviceName")]
        public Output<string> VirtualMfaDeviceName { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMfaDevice resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMfaDevice(string name, VirtualMfaDeviceArgs args, CustomResourceOptions? options = null)
            : base("aws:iam/virtualMfaDevice:VirtualMfaDevice", name, args ?? new VirtualMfaDeviceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMfaDevice(string name, Input<string> id, VirtualMfaDeviceState? state = null, CustomResourceOptions? options = null)
            : base("aws:iam/virtualMfaDevice:VirtualMfaDevice", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMfaDevice resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMfaDevice Get(string name, Input<string> id, VirtualMfaDeviceState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMfaDevice(name, id, state, options);
        }
    }

    public sealed class VirtualMfaDeviceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The path for the virtual MFA device.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of resource tags for the virtual mfa device. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
        /// </summary>
        [Input("virtualMfaDeviceName", required: true)]
        public Input<string> VirtualMfaDeviceName { get; set; } = null!;

        public VirtualMfaDeviceArgs()
        {
        }
        public static new VirtualMfaDeviceArgs Empty => new VirtualMfaDeviceArgs();
    }

    public sealed class VirtualMfaDeviceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) specifying the virtual mfa device.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The base32 seed defined as specified in [RFC3548](https://tools.ietf.org/html/rfc3548.txt). The `base_32_string_seed` is base64-encoded.
        /// </summary>
        [Input("base32StringSeed")]
        public Input<string>? Base32StringSeed { get; set; }

        /// <summary>
        /// The date and time when the virtual MFA device was enabled.
        /// </summary>
        [Input("enableDate")]
        public Input<string>? EnableDate { get; set; }

        /// <summary>
        /// The path for the virtual MFA device.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// A QR code PNG image that encodes `otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String` where `$virtualMFADeviceName` is one of the create call arguments. AccountName is the user name if set (otherwise, the account ID), and Base32String is the seed in base32 format.
        /// </summary>
        [Input("qrCodePng")]
        public Input<string>? QrCodePng { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of resource tags for the virtual mfa device. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The associated IAM User name if the virtual MFA device is enabled.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device.
        /// </summary>
        [Input("virtualMfaDeviceName")]
        public Input<string>? VirtualMfaDeviceName { get; set; }

        public VirtualMfaDeviceState()
        {
        }
        public static new VirtualMfaDeviceState Empty => new VirtualMfaDeviceState();
    }
}
