// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam.Outputs
{

    [OutputType]
    public sealed class GetPrincipalPolicySimulationResultResult
    {
        /// <summary>
        /// The name of the single IAM action used for this particular request.
        /// </summary>
        public readonly string ActionName;
        /// <summary>
        /// `true` if `decision` is "allowed", and `false` otherwise.
        /// </summary>
        public readonly bool Allowed;
        /// <summary>
        /// The raw decision determined from all of the policies in scope; either "allowed", "explicitDeny", or "implicitDeny".
        /// </summary>
        public readonly string Decision;
        /// <summary>
        /// A map of arbitrary metadata entries returned by the policy simulator for this request.
        /// </summary>
        public readonly ImmutableDictionary<string, string> DecisionDetails;
        /// <summary>
        /// A nested set of objects describing which policies contained statements that were relevant to this simulation request. Each object has attributes `source_policy_id` and `source_policy_type` to identify one of the policies.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrincipalPolicySimulationResultMatchedStatementResult> MatchedStatements;
        /// <summary>
        /// A set of context keys (or condition keys) that were needed by some of the policies contributing to this result but not specified using a `context` block in the configuration. Missing or incorrect context keys will typically cause a simulated request to be disallowed.
        /// </summary>
        public readonly ImmutableArray<string> MissingContextKeys;
        /// <summary>
        /// ARN of the resource that was used for this particular request. When you specify multiple actions and multiple resource ARNs, that causes a separate policy request for each combination of unique action and resource.
        /// </summary>
        public readonly string ResourceArn;

        [OutputConstructor]
        private GetPrincipalPolicySimulationResultResult(
            string actionName,

            bool allowed,

            string decision,

            ImmutableDictionary<string, string> decisionDetails,

            ImmutableArray<Outputs.GetPrincipalPolicySimulationResultMatchedStatementResult> matchedStatements,

            ImmutableArray<string> missingContextKeys,

            string resourceArn)
        {
            ActionName = actionName;
            Allowed = allowed;
            Decision = decision;
            DecisionDetails = decisionDetails;
            MatchedStatements = matchedStatements;
            MissingContextKeys = missingContextKeys;
            ResourceArn = resourceArn;
        }
    }
}
