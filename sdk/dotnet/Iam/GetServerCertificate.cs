// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    public static class GetServerCertificate
    {
        /// <summary>
        /// Use this data source to lookup information about IAM Server Certificates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const my-domain = aws.iam.getServerCertificate({
        ///     namePrefix: "my-domain.org",
        ///     latest: true,
        /// });
        /// const elb = new aws.elb.LoadBalancer("elb", {listeners: [{
        ///     instancePort: 8000,
        ///     instanceProtocol: "https",
        ///     lbPort: 443,
        ///     lbProtocol: "https",
        ///     sslCertificateId: my_domain.then(my_domain =&gt; my_domain.arn),
        /// }]});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// my_domain = aws.iam.get_server_certificate(name_prefix="my-domain.org",
        ///     latest=True)
        /// elb = aws.elb.LoadBalancer("elb", listeners=[aws.elb.LoadBalancerListenerArgs(
        ///     instance_port=8000,
        ///     instance_protocol="https",
        ///     lb_port=443,
        ///     lb_protocol="https",
        ///     ssl_certificate_id=my_domain.arn,
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_domain = Aws.Iam.GetServerCertificate.Invoke(new()
        ///     {
        ///         NamePrefix = "my-domain.org",
        ///         Latest = true,
        ///     });
        /// 
        ///     var elb = new Aws.Elb.LoadBalancer("elb", new()
        ///     {
        ///         Listeners = new[]
        ///         {
        ///             new Aws.Elb.Inputs.LoadBalancerListenerArgs
        ///             {
        ///                 InstancePort = 8000,
        ///                 InstanceProtocol = "https",
        ///                 LbPort = 443,
        ///                 LbProtocol = "https",
        ///                 SslCertificateId = my_domain.Apply(my_domain =&gt; my_domain.Apply(getServerCertificateResult =&gt; getServerCertificateResult.Arn)),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/elb"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		my_domain, err := iam.LookupServerCertificate(ctx, &amp;iam.LookupServerCertificateArgs{
        /// 			NamePrefix: pulumi.StringRef("my-domain.org"),
        /// 			Latest:     pulumi.BoolRef(true),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = elb.NewLoadBalancer(ctx, "elb", &amp;elb.LoadBalancerArgs{
        /// 			Listeners: elb.LoadBalancerListenerArray{
        /// 				&amp;elb.LoadBalancerListenerArgs{
        /// 					InstancePort:     pulumi.Int(8000),
        /// 					InstanceProtocol: pulumi.String("https"),
        /// 					LbPort:           pulumi.Int(443),
        /// 					LbProtocol:       pulumi.String("https"),
        /// 					SslCertificateId: *pulumi.String(my_domain.Arn),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetServerCertificateArgs;
        /// import com.pulumi.aws.elb.LoadBalancer;
        /// import com.pulumi.aws.elb.LoadBalancerArgs;
        /// import com.pulumi.aws.elb.inputs.LoadBalancerListenerArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var my-domain = IamFunctions.getServerCertificate(GetServerCertificateArgs.builder()
        ///             .namePrefix("my-domain.org")
        ///             .latest(true)
        ///             .build());
        /// 
        ///         var elb = new LoadBalancer("elb", LoadBalancerArgs.builder()        
        ///             .listeners(LoadBalancerListenerArgs.builder()
        ///                 .instancePort(8000)
        ///                 .instanceProtocol("https")
        ///                 .lbPort(443)
        ///                 .lbProtocol("https")
        ///                 .sslCertificateId(my_domain.arn())
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   elb:
        ///     type: aws:elb:LoadBalancer
        ///     properties:
        ///       listeners:
        ///         - instancePort: 8000
        ///           instanceProtocol: https
        ///           lbPort: 443
        ///           lbProtocol: https
        ///           sslCertificateId: ${["my-domain"].arn}
        /// variables:
        ///   my-domain:
        ///     fn::invoke:
        ///       Function: aws:iam:getServerCertificate
        ///       Arguments:
        ///         namePrefix: my-domain.org
        ///         latest: true
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServerCertificateResult> InvokeAsync(GetServerCertificateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerCertificateResult>("aws:iam/getServerCertificate:getServerCertificate", args ?? new GetServerCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to lookup information about IAM Server Certificates.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const my-domain = aws.iam.getServerCertificate({
        ///     namePrefix: "my-domain.org",
        ///     latest: true,
        /// });
        /// const elb = new aws.elb.LoadBalancer("elb", {listeners: [{
        ///     instancePort: 8000,
        ///     instanceProtocol: "https",
        ///     lbPort: 443,
        ///     lbProtocol: "https",
        ///     sslCertificateId: my_domain.then(my_domain =&gt; my_domain.arn),
        /// }]});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// my_domain = aws.iam.get_server_certificate(name_prefix="my-domain.org",
        ///     latest=True)
        /// elb = aws.elb.LoadBalancer("elb", listeners=[aws.elb.LoadBalancerListenerArgs(
        ///     instance_port=8000,
        ///     instance_protocol="https",
        ///     lb_port=443,
        ///     lb_protocol="https",
        ///     ssl_certificate_id=my_domain.arn,
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var my_domain = Aws.Iam.GetServerCertificate.Invoke(new()
        ///     {
        ///         NamePrefix = "my-domain.org",
        ///         Latest = true,
        ///     });
        /// 
        ///     var elb = new Aws.Elb.LoadBalancer("elb", new()
        ///     {
        ///         Listeners = new[]
        ///         {
        ///             new Aws.Elb.Inputs.LoadBalancerListenerArgs
        ///             {
        ///                 InstancePort = 8000,
        ///                 InstanceProtocol = "https",
        ///                 LbPort = 443,
        ///                 LbProtocol = "https",
        ///                 SslCertificateId = my_domain.Apply(my_domain =&gt; my_domain.Apply(getServerCertificateResult =&gt; getServerCertificateResult.Arn)),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/elb"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		my_domain, err := iam.LookupServerCertificate(ctx, &amp;iam.LookupServerCertificateArgs{
        /// 			NamePrefix: pulumi.StringRef("my-domain.org"),
        /// 			Latest:     pulumi.BoolRef(true),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = elb.NewLoadBalancer(ctx, "elb", &amp;elb.LoadBalancerArgs{
        /// 			Listeners: elb.LoadBalancerListenerArray{
        /// 				&amp;elb.LoadBalancerListenerArgs{
        /// 					InstancePort:     pulumi.Int(8000),
        /// 					InstanceProtocol: pulumi.String("https"),
        /// 					LbPort:           pulumi.Int(443),
        /// 					LbProtocol:       pulumi.String("https"),
        /// 					SslCertificateId: *pulumi.String(my_domain.Arn),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetServerCertificateArgs;
        /// import com.pulumi.aws.elb.LoadBalancer;
        /// import com.pulumi.aws.elb.LoadBalancerArgs;
        /// import com.pulumi.aws.elb.inputs.LoadBalancerListenerArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var my-domain = IamFunctions.getServerCertificate(GetServerCertificateArgs.builder()
        ///             .namePrefix("my-domain.org")
        ///             .latest(true)
        ///             .build());
        /// 
        ///         var elb = new LoadBalancer("elb", LoadBalancerArgs.builder()        
        ///             .listeners(LoadBalancerListenerArgs.builder()
        ///                 .instancePort(8000)
        ///                 .instanceProtocol("https")
        ///                 .lbPort(443)
        ///                 .lbProtocol("https")
        ///                 .sslCertificateId(my_domain.arn())
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   elb:
        ///     type: aws:elb:LoadBalancer
        ///     properties:
        ///       listeners:
        ///         - instancePort: 8000
        ///           instanceProtocol: https
        ///           lbPort: 443
        ///           lbProtocol: https
        ///           sslCertificateId: ${["my-domain"].arn}
        /// variables:
        ///   my-domain:
        ///     fn::invoke:
        ///       Function: aws:iam:getServerCertificate
        ///       Arguments:
        ///         namePrefix: my-domain.org
        ///         latest: true
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServerCertificateResult> Invoke(GetServerCertificateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerCertificateResult>("aws:iam/getServerCertificate:getServerCertificate", args ?? new GetServerCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// sort results by expiration date. returns the certificate with expiration date in furthest in the future.
        /// </summary>
        [Input("latest")]
        public bool? Latest { get; set; }

        /// <summary>
        /// exact name of the cert to lookup
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// prefix of cert to filter by
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        /// <summary>
        /// prefix of path to filter by
        /// </summary>
        [Input("pathPrefix")]
        public string? PathPrefix { get; set; }

        public GetServerCertificateArgs()
        {
        }
        public static new GetServerCertificateArgs Empty => new GetServerCertificateArgs();
    }

    public sealed class GetServerCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// sort results by expiration date. returns the certificate with expiration date in furthest in the future.
        /// </summary>
        [Input("latest")]
        public Input<bool>? Latest { get; set; }

        /// <summary>
        /// exact name of the cert to lookup
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// prefix of cert to filter by
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// prefix of path to filter by
        /// </summary>
        [Input("pathPrefix")]
        public Input<string>? PathPrefix { get; set; }

        public GetServerCertificateInvokeArgs()
        {
        }
        public static new GetServerCertificateInvokeArgs Empty => new GetServerCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerCertificateResult
    {
        /// <summary>
        /// is set to the ARN of the IAM Server Certificate
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// is the public key certificate (PEM-encoded). This is useful when [configuring back-end instance authentication](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-create-https-ssl-load-balancer.html) policy for load balancer
        /// </summary>
        public readonly string CertificateBody;
        /// <summary>
        /// is the public key certificate chain (PEM-encoded) if exists, empty otherwise
        /// </summary>
        public readonly string CertificateChain;
        /// <summary>
        /// is set to the expiration date of the IAM Server Certificate
        /// </summary>
        public readonly string ExpirationDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? Latest;
        public readonly string Name;
        public readonly string? NamePrefix;
        /// <summary>
        /// is set to the path of the IAM Server Certificate
        /// </summary>
        public readonly string Path;
        public readonly string? PathPrefix;
        /// <summary>
        /// is the date when the server certificate was uploaded
        /// </summary>
        public readonly string UploadDate;

        [OutputConstructor]
        private GetServerCertificateResult(
            string arn,

            string certificateBody,

            string certificateChain,

            string expirationDate,

            string id,

            bool? latest,

            string name,

            string? namePrefix,

            string path,

            string? pathPrefix,

            string uploadDate)
        {
            Arn = arn;
            CertificateBody = certificateBody;
            CertificateChain = certificateChain;
            ExpirationDate = expirationDate;
            Id = id;
            Latest = latest;
            Name = name;
            NamePrefix = namePrefix;
            Path = path;
            PathPrefix = pathPrefix;
            UploadDate = uploadDate;
        }
    }
}
