// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    /// <summary>
    /// Provides an IAM Service Specific Credential.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleUser = new Aws.Iam.User("exampleUser", new Aws.Iam.UserArgs
    ///         {
    ///         });
    ///         var exampleServiceSpecificCredential = new Aws.Iam.ServiceSpecificCredential("exampleServiceSpecificCredential", new Aws.Iam.ServiceSpecificCredentialArgs
    ///         {
    ///             ServiceName = "codecommit.amazonaws.com",
    ///             UserName = exampleUser.Name,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// IAM Service Specific Credentials can be imported using the `service_name:user_name:service_specific_credential_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:iam/serviceSpecificCredential:ServiceSpecificCredential default `codecommit.amazonaws.com:example:some-id`
    /// ```
    /// </summary>
    [AwsResourceType("aws:iam/serviceSpecificCredential:ServiceSpecificCredential")]
    public partial class ServiceSpecificCredential : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// The generated password for the service-specific credential.
        /// </summary>
        [Output("servicePassword")]
        public Output<string> ServicePassword { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the service-specific credential.
        /// </summary>
        [Output("serviceSpecificCredentialId")]
        public Output<string> ServiceSpecificCredentialId { get; private set; } = null!;

        /// <summary>
        /// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
        /// </summary>
        [Output("serviceUserName")]
        public Output<string> ServiceUserName { get; private set; } = null!;

        /// <summary>
        /// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceSpecificCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceSpecificCredential(string name, ServiceSpecificCredentialArgs args, CustomResourceOptions? options = null)
            : base("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, args ?? new ServiceSpecificCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceSpecificCredential(string name, Input<string> id, ServiceSpecificCredentialState? state = null, CustomResourceOptions? options = null)
            : base("aws:iam/serviceSpecificCredential:ServiceSpecificCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceSpecificCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceSpecificCredential Get(string name, Input<string> id, ServiceSpecificCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceSpecificCredential(name, id, state, options);
        }
    }

    public sealed class ServiceSpecificCredentialArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public ServiceSpecificCredentialArgs()
        {
        }
    }

    public sealed class ServiceSpecificCredentialState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// The generated password for the service-specific credential.
        /// </summary>
        [Input("servicePassword")]
        public Input<string>? ServicePassword { get; set; }

        /// <summary>
        /// The unique identifier for the service-specific credential.
        /// </summary>
        [Input("serviceSpecificCredentialId")]
        public Input<string>? ServiceSpecificCredentialId { get; set; }

        /// <summary>
        /// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in `jane-at-123456789012`, for example.
        /// </summary>
        [Input("serviceUserName")]
        public Input<string>? ServiceUserName { get; set; }

        /// <summary>
        /// The status to be assigned to the service-specific credential. Valid values are `Active` and `Inactive`. Default value is `Active`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public ServiceSpecificCredentialState()
        {
        }
    }
}
