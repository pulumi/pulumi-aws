// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    [AwsResourceType("aws:iam/accountPasswordPolicy:AccountPasswordPolicy")]
    public partial class AccountPasswordPolicy : global::Pulumi.CustomResource
    {
        [Output("allowUsersToChangePassword")]
        public Output<bool?> AllowUsersToChangePassword { get; private set; } = null!;

        [Output("expirePasswords")]
        public Output<bool> ExpirePasswords { get; private set; } = null!;

        [Output("hardExpiry")]
        public Output<bool> HardExpiry { get; private set; } = null!;

        [Output("maxPasswordAge")]
        public Output<int> MaxPasswordAge { get; private set; } = null!;

        [Output("minimumPasswordLength")]
        public Output<int?> MinimumPasswordLength { get; private set; } = null!;

        [Output("passwordReusePrevention")]
        public Output<int> PasswordReusePrevention { get; private set; } = null!;

        [Output("requireLowercaseCharacters")]
        public Output<bool> RequireLowercaseCharacters { get; private set; } = null!;

        [Output("requireNumbers")]
        public Output<bool> RequireNumbers { get; private set; } = null!;

        [Output("requireSymbols")]
        public Output<bool> RequireSymbols { get; private set; } = null!;

        [Output("requireUppercaseCharacters")]
        public Output<bool> RequireUppercaseCharacters { get; private set; } = null!;


        /// <summary>
        /// Create a AccountPasswordPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountPasswordPolicy(string name, AccountPasswordPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, args ?? new AccountPasswordPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountPasswordPolicy(string name, Input<string> id, AccountPasswordPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:iam/accountPasswordPolicy:AccountPasswordPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountPasswordPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountPasswordPolicy Get(string name, Input<string> id, AccountPasswordPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountPasswordPolicy(name, id, state, options);
        }
    }

    public sealed class AccountPasswordPolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowUsersToChangePassword")]
        public Input<bool>? AllowUsersToChangePassword { get; set; }

        [Input("hardExpiry")]
        public Input<bool>? HardExpiry { get; set; }

        [Input("maxPasswordAge")]
        public Input<int>? MaxPasswordAge { get; set; }

        [Input("minimumPasswordLength")]
        public Input<int>? MinimumPasswordLength { get; set; }

        [Input("passwordReusePrevention")]
        public Input<int>? PasswordReusePrevention { get; set; }

        [Input("requireLowercaseCharacters")]
        public Input<bool>? RequireLowercaseCharacters { get; set; }

        [Input("requireNumbers")]
        public Input<bool>? RequireNumbers { get; set; }

        [Input("requireSymbols")]
        public Input<bool>? RequireSymbols { get; set; }

        [Input("requireUppercaseCharacters")]
        public Input<bool>? RequireUppercaseCharacters { get; set; }

        public AccountPasswordPolicyArgs()
        {
        }
        public static new AccountPasswordPolicyArgs Empty => new AccountPasswordPolicyArgs();
    }

    public sealed class AccountPasswordPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("allowUsersToChangePassword")]
        public Input<bool>? AllowUsersToChangePassword { get; set; }

        [Input("expirePasswords")]
        public Input<bool>? ExpirePasswords { get; set; }

        [Input("hardExpiry")]
        public Input<bool>? HardExpiry { get; set; }

        [Input("maxPasswordAge")]
        public Input<int>? MaxPasswordAge { get; set; }

        [Input("minimumPasswordLength")]
        public Input<int>? MinimumPasswordLength { get; set; }

        [Input("passwordReusePrevention")]
        public Input<int>? PasswordReusePrevention { get; set; }

        [Input("requireLowercaseCharacters")]
        public Input<bool>? RequireLowercaseCharacters { get; set; }

        [Input("requireNumbers")]
        public Input<bool>? RequireNumbers { get; set; }

        [Input("requireSymbols")]
        public Input<bool>? RequireSymbols { get; set; }

        [Input("requireUppercaseCharacters")]
        public Input<bool>? RequireUppercaseCharacters { get; set; }

        public AccountPasswordPolicyState()
        {
        }
        public static new AccountPasswordPolicyState Empty => new AccountPasswordPolicyState();
    }
}
