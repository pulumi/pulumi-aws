// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iam
{
    public static class GetPrincipalPolicySimulation
    {
        /// <summary>
        /// Runs a simulation of the IAM policies of a particular principal against a given hypothetical request.
        /// 
        /// You can use this data source in conjunction with
        /// Preconditions and Postconditions so that your configuration can test either whether it should have sufficient access to do its own work, or whether policies your configuration declares itself are sufficient for their intended use elsewhere.
        /// 
        /// &gt; **Note:** Correctly using this data source requires familiarity with various details of AWS Identity and Access Management, and how various AWS services integrate with it. For general information on the AWS IAM policy simulator, see [Testing IAM policies with the IAM policy simulator](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html). This data source wraps the `iam:SimulatePrincipalPolicy` API action described on that page.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPrincipalPolicySimulationResult> InvokeAsync(GetPrincipalPolicySimulationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrincipalPolicySimulationResult>("aws:iam/getPrincipalPolicySimulation:getPrincipalPolicySimulation", args ?? new GetPrincipalPolicySimulationArgs(), options.WithDefaults());

        /// <summary>
        /// Runs a simulation of the IAM policies of a particular principal against a given hypothetical request.
        /// 
        /// You can use this data source in conjunction with
        /// Preconditions and Postconditions so that your configuration can test either whether it should have sufficient access to do its own work, or whether policies your configuration declares itself are sufficient for their intended use elsewhere.
        /// 
        /// &gt; **Note:** Correctly using this data source requires familiarity with various details of AWS Identity and Access Management, and how various AWS services integrate with it. For general information on the AWS IAM policy simulator, see [Testing IAM policies with the IAM policy simulator](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html). This data source wraps the `iam:SimulatePrincipalPolicy` API action described on that page.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPrincipalPolicySimulationResult> Invoke(GetPrincipalPolicySimulationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrincipalPolicySimulationResult>("aws:iam/getPrincipalPolicySimulation:getPrincipalPolicySimulation", args ?? new GetPrincipalPolicySimulationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrincipalPolicySimulationArgs : global::Pulumi.InvokeArgs
    {
        [Input("actionNames", required: true)]
        private List<string>? _actionNames;

        /// <summary>
        /// A set of IAM action names to run simulations for. Each entry in this set adds an additional hypothetical request to the simulation.
        /// 
        /// Action names consist of a service prefix and an action verb separated by a colon, such as `s3:GetObject`. Refer to [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to see the full set of possible IAM action names across all AWS services.
        /// </summary>
        public List<string> ActionNames
        {
            get => _actionNames ?? (_actionNames = new List<string>());
            set => _actionNames = value;
        }

        [Input("additionalPoliciesJsons")]
        private List<string>? _additionalPoliciesJsons;

        /// <summary>
        /// A set of additional principal policy documents to include in the simulation. The simulator will behave as if each of these policies were associated with the object specified in `policy_source_arn`, allowing you to test the effect of hypothetical policies not yet created.
        /// </summary>
        public List<string> AdditionalPoliciesJsons
        {
            get => _additionalPoliciesJsons ?? (_additionalPoliciesJsons = new List<string>());
            set => _additionalPoliciesJsons = value;
        }

        /// <summary>
        /// The ARN of an user that will appear as the "caller" of the simulated requests. If you do not specify `caller_arn` then the simulation will use the `policy_source_arn` instead, if it contains a user ARN.
        /// </summary>
        [Input("callerArn")]
        public string? CallerArn { get; set; }

        [Input("contexts")]
        private List<Inputs.GetPrincipalPolicySimulationContextArgs>? _contexts;

        /// <summary>
        /// Each `context` block defines an entry in the table of additional context keys in the simulated request.
        /// 
        /// IAM uses context keys for both custom conditions and for interpolating dynamic request-specific values into policy values. If you use policies that include those features then you will need to provide suitable example values for those keys to achieve a realistic simulation.
        /// </summary>
        public List<Inputs.GetPrincipalPolicySimulationContextArgs> Contexts
        {
            get => _contexts ?? (_contexts = new List<Inputs.GetPrincipalPolicySimulationContextArgs>());
            set => _contexts = value;
        }

        [Input("permissionsBoundaryPoliciesJsons")]
        private List<string>? _permissionsBoundaryPoliciesJsons;

        /// <summary>
        /// A set of [permissions boundary policy documents](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) to include in the simulation.
        /// </summary>
        public List<string> PermissionsBoundaryPoliciesJsons
        {
            get => _permissionsBoundaryPoliciesJsons ?? (_permissionsBoundaryPoliciesJsons = new List<string>());
            set => _permissionsBoundaryPoliciesJsons = value;
        }

        /// <summary>
        /// The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the IAM user, group, or role whose policies will be included in the simulation.
        /// 
        /// You must closely match the form of the real service request you are simulating in order to achieve a realistic result. You can use the following additional arguments to specify other characteristics of the simulated requests:
        /// </summary>
        [Input("policySourceArn", required: true)]
        public string PolicySourceArn { get; set; } = null!;

        [Input("resourceArns")]
        private List<string>? _resourceArns;

        /// <summary>
        /// A set of ARNs of resources to include in the simulation.
        /// 
        /// This argument is important for actions that have either required or optional resource types listed in [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html), and you must provide ARNs that identify AWS objects of the appropriate types for the chosen actions.
        /// 
        /// The policy simulator only automatically loads policies associated with the `policy_source_arn`, so if your given resources have their own resource-level policy then you'll also need to provide that explicitly using the `resource_policy_json` argument to achieve a realistic simulation.
        /// </summary>
        public List<string> ResourceArns
        {
            get => _resourceArns ?? (_resourceArns = new List<string>());
            set => _resourceArns = value;
        }

        /// <summary>
        /// Specifies a special simulation type to run. Some EC2 actions require special simulation behaviors and a particular set of resource ARNs to achieve a realistic result.
        /// 
        /// For more details, see the `ResourceHandlingOption` request parameter for [the underlying `iam:SimulatePrincipalPolicy` action](https://docs.aws.amazon.com/IAM/latest/APIReference/API_SimulatePrincipalPolicy.html).
        /// </summary>
        [Input("resourceHandlingOption")]
        public string? ResourceHandlingOption { get; set; }

        /// <summary>
        /// An AWS account ID to use for any resource ARN in `resource_arns` that doesn't include its own AWS account ID. If unspecified, the simulator will use the account ID from the `caller_arn` argument as a placeholder.
        /// </summary>
        [Input("resourceOwnerAccountId")]
        public string? ResourceOwnerAccountId { get; set; }

        /// <summary>
        /// An IAM policy document representing the resource-level policy of all of the resources specified in `resource_arns`.
        /// 
        /// The policy simulator cannot automatically load policies that are associated with individual resources, as described in the documentation for `resource_arns` above.
        /// </summary>
        [Input("resourcePolicyJson")]
        public string? ResourcePolicyJson { get; set; }

        public GetPrincipalPolicySimulationArgs()
        {
        }
        public static new GetPrincipalPolicySimulationArgs Empty => new GetPrincipalPolicySimulationArgs();
    }

    public sealed class GetPrincipalPolicySimulationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("actionNames", required: true)]
        private InputList<string>? _actionNames;

        /// <summary>
        /// A set of IAM action names to run simulations for. Each entry in this set adds an additional hypothetical request to the simulation.
        /// 
        /// Action names consist of a service prefix and an action verb separated by a colon, such as `s3:GetObject`. Refer to [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html) to see the full set of possible IAM action names across all AWS services.
        /// </summary>
        public InputList<string> ActionNames
        {
            get => _actionNames ?? (_actionNames = new InputList<string>());
            set => _actionNames = value;
        }

        [Input("additionalPoliciesJsons")]
        private InputList<string>? _additionalPoliciesJsons;

        /// <summary>
        /// A set of additional principal policy documents to include in the simulation. The simulator will behave as if each of these policies were associated with the object specified in `policy_source_arn`, allowing you to test the effect of hypothetical policies not yet created.
        /// </summary>
        public InputList<string> AdditionalPoliciesJsons
        {
            get => _additionalPoliciesJsons ?? (_additionalPoliciesJsons = new InputList<string>());
            set => _additionalPoliciesJsons = value;
        }

        /// <summary>
        /// The ARN of an user that will appear as the "caller" of the simulated requests. If you do not specify `caller_arn` then the simulation will use the `policy_source_arn` instead, if it contains a user ARN.
        /// </summary>
        [Input("callerArn")]
        public Input<string>? CallerArn { get; set; }

        [Input("contexts")]
        private InputList<Inputs.GetPrincipalPolicySimulationContextInputArgs>? _contexts;

        /// <summary>
        /// Each `context` block defines an entry in the table of additional context keys in the simulated request.
        /// 
        /// IAM uses context keys for both custom conditions and for interpolating dynamic request-specific values into policy values. If you use policies that include those features then you will need to provide suitable example values for those keys to achieve a realistic simulation.
        /// </summary>
        public InputList<Inputs.GetPrincipalPolicySimulationContextInputArgs> Contexts
        {
            get => _contexts ?? (_contexts = new InputList<Inputs.GetPrincipalPolicySimulationContextInputArgs>());
            set => _contexts = value;
        }

        [Input("permissionsBoundaryPoliciesJsons")]
        private InputList<string>? _permissionsBoundaryPoliciesJsons;

        /// <summary>
        /// A set of [permissions boundary policy documents](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) to include in the simulation.
        /// </summary>
        public InputList<string> PermissionsBoundaryPoliciesJsons
        {
            get => _permissionsBoundaryPoliciesJsons ?? (_permissionsBoundaryPoliciesJsons = new InputList<string>());
            set => _permissionsBoundaryPoliciesJsons = value;
        }

        /// <summary>
        /// The [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) of the IAM user, group, or role whose policies will be included in the simulation.
        /// 
        /// You must closely match the form of the real service request you are simulating in order to achieve a realistic result. You can use the following additional arguments to specify other characteristics of the simulated requests:
        /// </summary>
        [Input("policySourceArn", required: true)]
        public Input<string> PolicySourceArn { get; set; } = null!;

        [Input("resourceArns")]
        private InputList<string>? _resourceArns;

        /// <summary>
        /// A set of ARNs of resources to include in the simulation.
        /// 
        /// This argument is important for actions that have either required or optional resource types listed in [Actions, resources, and condition keys for AWS services](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html), and you must provide ARNs that identify AWS objects of the appropriate types for the chosen actions.
        /// 
        /// The policy simulator only automatically loads policies associated with the `policy_source_arn`, so if your given resources have their own resource-level policy then you'll also need to provide that explicitly using the `resource_policy_json` argument to achieve a realistic simulation.
        /// </summary>
        public InputList<string> ResourceArns
        {
            get => _resourceArns ?? (_resourceArns = new InputList<string>());
            set => _resourceArns = value;
        }

        /// <summary>
        /// Specifies a special simulation type to run. Some EC2 actions require special simulation behaviors and a particular set of resource ARNs to achieve a realistic result.
        /// 
        /// For more details, see the `ResourceHandlingOption` request parameter for [the underlying `iam:SimulatePrincipalPolicy` action](https://docs.aws.amazon.com/IAM/latest/APIReference/API_SimulatePrincipalPolicy.html).
        /// </summary>
        [Input("resourceHandlingOption")]
        public Input<string>? ResourceHandlingOption { get; set; }

        /// <summary>
        /// An AWS account ID to use for any resource ARN in `resource_arns` that doesn't include its own AWS account ID. If unspecified, the simulator will use the account ID from the `caller_arn` argument as a placeholder.
        /// </summary>
        [Input("resourceOwnerAccountId")]
        public Input<string>? ResourceOwnerAccountId { get; set; }

        /// <summary>
        /// An IAM policy document representing the resource-level policy of all of the resources specified in `resource_arns`.
        /// 
        /// The policy simulator cannot automatically load policies that are associated with individual resources, as described in the documentation for `resource_arns` above.
        /// </summary>
        [Input("resourcePolicyJson")]
        public Input<string>? ResourcePolicyJson { get; set; }

        public GetPrincipalPolicySimulationInvokeArgs()
        {
        }
        public static new GetPrincipalPolicySimulationInvokeArgs Empty => new GetPrincipalPolicySimulationInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrincipalPolicySimulationResult
    {
        public readonly ImmutableArray<string> ActionNames;
        public readonly ImmutableArray<string> AdditionalPoliciesJsons;
        /// <summary>
        /// `true` if all of the simulation results have decision "allowed", or `false` otherwise.
        /// </summary>
        public readonly bool AllAllowed;
        public readonly string? CallerArn;
        public readonly ImmutableArray<Outputs.GetPrincipalPolicySimulationContextResult> Contexts;
        public readonly string Id;
        public readonly ImmutableArray<string> PermissionsBoundaryPoliciesJsons;
        public readonly string PolicySourceArn;
        public readonly ImmutableArray<string> ResourceArns;
        public readonly string? ResourceHandlingOption;
        public readonly string? ResourceOwnerAccountId;
        public readonly string? ResourcePolicyJson;
        /// <summary>
        /// A set of result objects, one for each of the simulated requests, with the following nested attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrincipalPolicySimulationResultResult> Results;

        [OutputConstructor]
        private GetPrincipalPolicySimulationResult(
            ImmutableArray<string> actionNames,

            ImmutableArray<string> additionalPoliciesJsons,

            bool allAllowed,

            string? callerArn,

            ImmutableArray<Outputs.GetPrincipalPolicySimulationContextResult> contexts,

            string id,

            ImmutableArray<string> permissionsBoundaryPoliciesJsons,

            string policySourceArn,

            ImmutableArray<string> resourceArns,

            string? resourceHandlingOption,

            string? resourceOwnerAccountId,

            string? resourcePolicyJson,

            ImmutableArray<Outputs.GetPrincipalPolicySimulationResultResult> results)
        {
            ActionNames = actionNames;
            AdditionalPoliciesJsons = additionalPoliciesJsons;
            AllAllowed = allAllowed;
            CallerArn = callerArn;
            Contexts = contexts;
            Id = id;
            PermissionsBoundaryPoliciesJsons = permissionsBoundaryPoliciesJsons;
            PolicySourceArn = policySourceArn;
            ResourceArns = resourceArns;
            ResourceHandlingOption = resourceHandlingOption;
            ResourceOwnerAccountId = resourceOwnerAccountId;
            ResourcePolicyJson = resourcePolicyJson;
            Results = results;
        }
    }
}
