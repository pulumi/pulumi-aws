// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LicenseManager
{
    /// <summary>
    /// Accepts a License Manager grant. This allows for sharing licenses with other aws accounts.
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_licensemanager_grant_accepter.test
    /// 
    ///  id = "arn:aws:license-manager::123456789012:grant:g-1cf9fba4ba2f42dcab11c686c4b4d329" } Using `pulumi import`, import `aws_licensemanager_grant_accepter` using the grant arn. For exampleconsole % pulumi import aws_licensemanager_grant_accepter.test arn:aws:license-manager::123456789012:grant:g-1cf9fba4ba2f42dcab11c686c4b4d329
    /// </summary>
    [AwsResourceType("aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter")]
    public partial class LicenseGrantAccepter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of the allowed operations for the grant.
        /// </summary>
        [Output("allowedOperations")]
        public Output<ImmutableArray<string>> AllowedOperations { get; private set; } = null!;

        /// <summary>
        /// The ARN of the grant to accept.
        /// </summary>
        [Output("grantArn")]
        public Output<string> GrantArn { get; private set; } = null!;

        /// <summary>
        /// The home region for the license.
        /// </summary>
        [Output("homeRegion")]
        public Output<string> HomeRegion { get; private set; } = null!;

        /// <summary>
        /// The ARN of the license for the grant.
        /// </summary>
        [Output("licenseArn")]
        public Output<string> LicenseArn { get; private set; } = null!;

        /// <summary>
        /// The Name of the grant.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parent ARN.
        /// </summary>
        [Output("parentArn")]
        public Output<string> ParentArn { get; private set; } = null!;

        /// <summary>
        /// The target account for the grant.
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// The grant status.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The grant version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a LicenseGrantAccepter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LicenseGrantAccepter(string name, LicenseGrantAccepterArgs args, CustomResourceOptions? options = null)
            : base("aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter", name, args ?? new LicenseGrantAccepterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LicenseGrantAccepter(string name, Input<string> id, LicenseGrantAccepterState? state = null, CustomResourceOptions? options = null)
            : base("aws:licensemanager/licenseGrantAccepter:LicenseGrantAccepter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LicenseGrantAccepter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LicenseGrantAccepter Get(string name, Input<string> id, LicenseGrantAccepterState? state = null, CustomResourceOptions? options = null)
        {
            return new LicenseGrantAccepter(name, id, state, options);
        }
    }

    public sealed class LicenseGrantAccepterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the grant to accept.
        /// </summary>
        [Input("grantArn", required: true)]
        public Input<string> GrantArn { get; set; } = null!;

        public LicenseGrantAccepterArgs()
        {
        }
        public static new LicenseGrantAccepterArgs Empty => new LicenseGrantAccepterArgs();
    }

    public sealed class LicenseGrantAccepterState : global::Pulumi.ResourceArgs
    {
        [Input("allowedOperations")]
        private InputList<string>? _allowedOperations;

        /// <summary>
        /// A list of the allowed operations for the grant.
        /// </summary>
        public InputList<string> AllowedOperations
        {
            get => _allowedOperations ?? (_allowedOperations = new InputList<string>());
            set => _allowedOperations = value;
        }

        /// <summary>
        /// The ARN of the grant to accept.
        /// </summary>
        [Input("grantArn")]
        public Input<string>? GrantArn { get; set; }

        /// <summary>
        /// The home region for the license.
        /// </summary>
        [Input("homeRegion")]
        public Input<string>? HomeRegion { get; set; }

        /// <summary>
        /// The ARN of the license for the grant.
        /// </summary>
        [Input("licenseArn")]
        public Input<string>? LicenseArn { get; set; }

        /// <summary>
        /// The Name of the grant.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The parent ARN.
        /// </summary>
        [Input("parentArn")]
        public Input<string>? ParentArn { get; set; }

        /// <summary>
        /// The target account for the grant.
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// The grant status.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The grant version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public LicenseGrantAccepterState()
        {
        }
        public static new LicenseGrantAccepterState Empty => new LicenseGrantAccepterState();
    }
}
