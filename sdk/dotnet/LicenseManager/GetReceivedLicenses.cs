// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LicenseManager
{
    public static class GetReceivedLicenses
    {
        /// <summary>
        /// This resource can be used to get a set of license ARNs matching a filter.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows getting all license ARNs issued from the AWS marketplace. Providing no filter, would provide all license ARNs for the entire account.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const test = aws.licensemanager.getReceivedLicenses({
        ///     filters: [{
        ///         name: "IssuerName",
        ///         values: ["AWS/Marketplace"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test = aws.licensemanager.get_received_licenses(filters=[aws.licensemanager.GetReceivedLicensesFilterArgs(
        ///     name="IssuerName",
        ///     values=["AWS/Marketplace"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LicenseManager.GetReceivedLicenses.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.LicenseManager.Inputs.GetReceivedLicensesFilterInputArgs
        ///             {
        ///                 Name = "IssuerName",
        ///                 Values = new[]
        ///                 {
        ///                     "AWS/Marketplace",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/licensemanager"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := licensemanager.GetReceivedLicenses(ctx, &amp;licensemanager.GetReceivedLicensesArgs{
        /// 			Filters: []licensemanager.GetReceivedLicensesFilter{
        /// 				{
        /// 					Name: "IssuerName",
        /// 					Values: []string{
        /// 						"AWS/Marketplace",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.licensemanager.LicensemanagerFunctions;
        /// import com.pulumi.aws.licensemanager.inputs.GetReceivedLicensesArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var test = LicensemanagerFunctions.getReceivedLicenses(GetReceivedLicensesArgs.builder()
        ///             .filters(GetReceivedLicensesFilterArgs.builder()
        ///                 .name("IssuerName")
        ///                 .values("AWS/Marketplace")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:licensemanager:getReceivedLicenses
        ///       Arguments:
        ///         filters:
        ///           - name: IssuerName
        ///             values:
        ///               - AWS/Marketplace
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReceivedLicensesResult> InvokeAsync(GetReceivedLicensesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReceivedLicensesResult>("aws:licensemanager/getReceivedLicenses:getReceivedLicenses", args ?? new GetReceivedLicensesArgs(), options.WithDefaults());

        /// <summary>
        /// This resource can be used to get a set of license ARNs matching a filter.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows getting all license ARNs issued from the AWS marketplace. Providing no filter, would provide all license ARNs for the entire account.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const test = aws.licensemanager.getReceivedLicenses({
        ///     filters: [{
        ///         name: "IssuerName",
        ///         values: ["AWS/Marketplace"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test = aws.licensemanager.get_received_licenses(filters=[aws.licensemanager.GetReceivedLicensesFilterArgs(
        ///     name="IssuerName",
        ///     values=["AWS/Marketplace"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.LicenseManager.GetReceivedLicenses.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.LicenseManager.Inputs.GetReceivedLicensesFilterInputArgs
        ///             {
        ///                 Name = "IssuerName",
        ///                 Values = new[]
        ///                 {
        ///                     "AWS/Marketplace",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/licensemanager"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := licensemanager.GetReceivedLicenses(ctx, &amp;licensemanager.GetReceivedLicensesArgs{
        /// 			Filters: []licensemanager.GetReceivedLicensesFilter{
        /// 				{
        /// 					Name: "IssuerName",
        /// 					Values: []string{
        /// 						"AWS/Marketplace",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.licensemanager.LicensemanagerFunctions;
        /// import com.pulumi.aws.licensemanager.inputs.GetReceivedLicensesArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var test = LicensemanagerFunctions.getReceivedLicenses(GetReceivedLicensesArgs.builder()
        ///             .filters(GetReceivedLicensesFilterArgs.builder()
        ///                 .name("IssuerName")
        ///                 .values("AWS/Marketplace")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:licensemanager:getReceivedLicenses
        ///       Arguments:
        ///         filters:
        ///           - name: IssuerName
        ///             values:
        ///               - AWS/Marketplace
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReceivedLicensesResult> Invoke(GetReceivedLicensesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReceivedLicensesResult>("aws:licensemanager/getReceivedLicenses:getReceivedLicenses", args ?? new GetReceivedLicensesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReceivedLicensesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetReceivedLicensesFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public List<Inputs.GetReceivedLicensesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetReceivedLicensesFilterArgs>());
            set => _filters = value;
        }

        public GetReceivedLicensesArgs()
        {
        }
        public static new GetReceivedLicensesArgs Empty => new GetReceivedLicensesArgs();
    }

    public sealed class GetReceivedLicensesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetReceivedLicensesFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public InputList<Inputs.GetReceivedLicensesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetReceivedLicensesFilterInputArgs>());
            set => _filters = value;
        }

        public GetReceivedLicensesInvokeArgs()
        {
        }
        public static new GetReceivedLicensesInvokeArgs Empty => new GetReceivedLicensesInvokeArgs();
    }


    [OutputType]
    public sealed class GetReceivedLicensesResult
    {
        /// <summary>
        /// List of all the license ARNs found.
        /// </summary>
        public readonly ImmutableArray<string> Arns;
        public readonly ImmutableArray<Outputs.GetReceivedLicensesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetReceivedLicensesResult(
            ImmutableArray<string> arns,

            ImmutableArray<Outputs.GetReceivedLicensesFilterResult> filters,

            string id)
        {
            Arns = arns;
            Filters = filters;
            Id = id;
        }
    }
}
