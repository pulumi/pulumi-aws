// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MediaLive
{
    public static class GetInput
    {
        /// <summary>
        /// Data source for managing an AWS Elemental MediaLive Input.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.MediaLive.GetInput.Invoke(new()
        ///     {
        ///         Id = exampleAwsMedialiveInput.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetInputResult> InvokeAsync(GetInputArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInputResult>("aws:medialive/getInput:getInput", args ?? new GetInputArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS Elemental MediaLive Input.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.MediaLive.GetInput.Invoke(new()
        ///     {
        ///         Id = exampleAwsMedialiveInput.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetInputResult> Invoke(GetInputInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInputResult>("aws:medialive/getInput:getInput", args ?? new GetInputInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInputArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Input.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetInputArgs()
        {
        }
        public static new GetInputArgs Empty => new GetInputArgs();
    }

    public sealed class GetInputInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the Input.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetInputInvokeArgs()
        {
        }
        public static new GetInputInvokeArgs Empty => new GetInputInvokeArgs();
    }


    [OutputType]
    public sealed class GetInputResult
    {
        /// <summary>
        /// ARN of the Input.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Channels attached to Input.
        /// </summary>
        public readonly ImmutableArray<string> AttachedChannels;
        public readonly ImmutableArray<Outputs.GetInputDestinationResult> Destinations;
        public readonly string Id;
        /// <summary>
        /// The input class.
        /// </summary>
        public readonly string InputClass;
        /// <summary>
        /// Settings for the devices.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInputInputDeviceResult> InputDevices;
        /// <summary>
        /// A list of IDs for all Inputs which are partners of this one.
        /// </summary>
        public readonly ImmutableArray<string> InputPartnerIds;
        /// <summary>
        /// Source type of the input.
        /// </summary>
        public readonly string InputSourceType;
        /// <summary>
        /// A list of the MediaConnect Flows.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInputMediaConnectFlowResult> MediaConnectFlows;
        /// <summary>
        /// Name of the input.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The ARN of the role this input assumes during and after creation.
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// List of input security groups.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroups;
        /// <summary>
        /// The source URLs for a PULL-type input.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInputSourceResult> Sources;
        /// <summary>
        /// The state of the input.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// A map of tags assigned to the Input.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The type of the input.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetInputResult(
            string arn,

            ImmutableArray<string> attachedChannels,

            ImmutableArray<Outputs.GetInputDestinationResult> destinations,

            string id,

            string inputClass,

            ImmutableArray<Outputs.GetInputInputDeviceResult> inputDevices,

            ImmutableArray<string> inputPartnerIds,

            string inputSourceType,

            ImmutableArray<Outputs.GetInputMediaConnectFlowResult> mediaConnectFlows,

            string name,

            string roleArn,

            ImmutableArray<string> securityGroups,

            ImmutableArray<Outputs.GetInputSourceResult> sources,

            string state,

            ImmutableDictionary<string, string> tags,

            string type)
        {
            Arn = arn;
            AttachedChannels = attachedChannels;
            Destinations = destinations;
            Id = id;
            InputClass = inputClass;
            InputDevices = inputDevices;
            InputPartnerIds = inputPartnerIds;
            InputSourceType = inputSourceType;
            MediaConnectFlows = mediaConnectFlows;
            Name = name;
            RoleArn = roleArn;
            SecurityGroups = securityGroups;
            Sources = sources;
            State = state;
            Tags = tags;
            Type = type;
        }
    }
}
