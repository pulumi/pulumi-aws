// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MediaLive.Outputs
{

    [OutputType]
    public sealed class ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings
    {
        public readonly string? AcquisitionPointId;
        public readonly string? AudioOnlyTimecodecControl;
        /// <summary>
        /// Setting to allow self signed or verified RTMP certificates.
        /// </summary>
        public readonly string? CertificateMode;
        /// <summary>
        /// Number of seconds to wait before retrying connection to the flash media server if the connection is lost.
        /// </summary>
        public readonly int? ConnectionRetryInterval;
        /// <summary>
        /// A director and base filename where archive files should be written. See Destination for more details.
        /// </summary>
        public readonly Outputs.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination Destination;
        public readonly int? EventId;
        public readonly string? EventIdMode;
        public readonly string? EventStopBehavior;
        public readonly int? FilecacheDuration;
        public readonly int? FragmentLength;
        /// <summary>
        /// Controls the behavior of the RTMP group if input becomes unavailable.
        /// </summary>
        public readonly string? InputLossAction;
        /// <summary>
        /// Number of retry attempts.
        /// </summary>
        public readonly int? NumRetries;
        /// <summary>
        /// Number of seconds to wait until a restart is initiated.
        /// </summary>
        public readonly int? RestartDelay;
        public readonly string? SegmentationMode;
        public readonly int? SendDelayMs;
        public readonly string? SparseTrackType;
        public readonly string? StreamManifestBehavior;
        public readonly string? TimestampOffset;
        public readonly string? TimestampOffsetMode;

        [OutputConstructor]
        private ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettings(
            string? acquisitionPointId,

            string? audioOnlyTimecodecControl,

            string? certificateMode,

            int? connectionRetryInterval,

            Outputs.ChannelEncoderSettingsOutputGroupOutputGroupSettingsMsSmoothGroupSettingsDestination destination,

            int? eventId,

            string? eventIdMode,

            string? eventStopBehavior,

            int? filecacheDuration,

            int? fragmentLength,

            string? inputLossAction,

            int? numRetries,

            int? restartDelay,

            string? segmentationMode,

            int? sendDelayMs,

            string? sparseTrackType,

            string? streamManifestBehavior,

            string? timestampOffset,

            string? timestampOffsetMode)
        {
            AcquisitionPointId = acquisitionPointId;
            AudioOnlyTimecodecControl = audioOnlyTimecodecControl;
            CertificateMode = certificateMode;
            ConnectionRetryInterval = connectionRetryInterval;
            Destination = destination;
            EventId = eventId;
            EventIdMode = eventIdMode;
            EventStopBehavior = eventStopBehavior;
            FilecacheDuration = filecacheDuration;
            FragmentLength = fragmentLength;
            InputLossAction = inputLossAction;
            NumRetries = numRetries;
            RestartDelay = restartDelay;
            SegmentationMode = segmentationMode;
            SendDelayMs = sendDelayMs;
            SparseTrackType = sparseTrackType;
            StreamManifestBehavior = streamManifestBehavior;
            TimestampOffset = timestampOffset;
            TimestampOffsetMode = timestampOffsetMode;
        }
    }
}
