// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MediaLive.Outputs
{

    [OutputType]
    public sealed class ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings
    {
        /// <summary>
        /// Enables or disables adaptive quantization.
        /// </summary>
        public readonly string? AdaptiveQuantization;
        /// <summary>
        /// Indicates that AFD values will be written into the output stream.
        /// </summary>
        public readonly string? AfdSignaling;
        /// <summary>
        /// Whether or not EML should insert an Alternative Transfer Function SEI message.
        /// </summary>
        public readonly string? AlternativeTransferFunction;
        /// <summary>
        /// Average bitrate in bits/second.
        /// </summary>
        public readonly int Bitrate;
        /// <summary>
        /// Size of buffer in bits.
        /// </summary>
        public readonly int? BufSize;
        /// <summary>
        /// Includes color space metadata in the output.
        /// </summary>
        public readonly string? ColorMetadata;
        /// <summary>
        /// Define the color metadata for the output. H265 Color Space Settings for more details.
        /// </summary>
        public readonly Outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings? ColorSpaceSettings;
        /// <summary>
        /// Filters to apply to an encode. See H264 Filter Settings for more details.
        /// </summary>
        public readonly Outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings? FilterSettings;
        /// <summary>
        /// Four bit AFD value to write on all frames of video in the output stream.
        /// </summary>
        public readonly string? FixedAfd;
        public readonly string? FlickerAq;
        /// <summary>
        /// Framerate denominator.
        /// </summary>
        public readonly int FramerateDenominator;
        /// <summary>
        /// Framerate numerator.
        /// </summary>
        public readonly int FramerateNumerator;
        /// <summary>
        /// Frequency of closed GOPs.
        /// </summary>
        public readonly int? GopClosedCadence;
        /// <summary>
        /// GOP size in units of either frames of seconds per `gop_size_units`.
        /// </summary>
        public readonly double? GopSize;
        /// <summary>
        /// Indicates if the `gop_size` is specified in frames or seconds.
        /// </summary>
        public readonly string? GopSizeUnits;
        /// <summary>
        /// H264 level.
        /// </summary>
        public readonly string? Level;
        /// <summary>
        /// Amount of lookahead.
        /// </summary>
        public readonly string? LookAheadRateControl;
        /// <summary>
        /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
        /// </summary>
        public readonly int? MaxBitrate;
        public readonly int? MinIInterval;
        /// <summary>
        /// Pixel Aspect Ratio denominator.
        /// </summary>
        public readonly int? ParDenominator;
        /// <summary>
        /// Pixel Aspect Ratio numerator.
        /// </summary>
        public readonly int? ParNumerator;
        /// <summary>
        /// AAC profile.
        /// </summary>
        public readonly string? Profile;
        /// <summary>
        /// Controls the target quality for the video encode.
        /// </summary>
        public readonly int? QvbrQualityLevel;
        /// <summary>
        /// The rate control mode.
        /// </summary>
        public readonly string? RateControlMode;
        /// <summary>
        /// Sets the scan type of the output.
        /// </summary>
        public readonly string? ScanType;
        /// <summary>
        /// Scene change detection.
        /// </summary>
        public readonly string? SceneChangeDetect;
        /// <summary>
        /// Number of slices per picture.
        /// </summary>
        public readonly int? Slices;
        /// <summary>
        /// Set the H265 tier in the output.
        /// </summary>
        public readonly string? Tier;
        /// <summary>
        /// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
        /// </summary>
        public readonly Outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings? TimecodeBurninSettings;
        /// <summary>
        /// Determines how timecodes should be inserted into the video elementary stream.
        /// </summary>
        public readonly string? TimecodeInsertion;

        [OutputConstructor]
        private ChannelEncoderSettingsVideoDescriptionCodecSettingsH265Settings(
            string? adaptiveQuantization,

            string? afdSignaling,

            string? alternativeTransferFunction,

            int bitrate,

            int? bufSize,

            string? colorMetadata,

            Outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettings? colorSpaceSettings,

            Outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettings? filterSettings,

            string? fixedAfd,

            string? flickerAq,

            int framerateDenominator,

            int framerateNumerator,

            int? gopClosedCadence,

            double? gopSize,

            string? gopSizeUnits,

            string? level,

            string? lookAheadRateControl,

            int? maxBitrate,

            int? minIInterval,

            int? parDenominator,

            int? parNumerator,

            string? profile,

            int? qvbrQualityLevel,

            string? rateControlMode,

            string? scanType,

            string? sceneChangeDetect,

            int? slices,

            string? tier,

            Outputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettings? timecodeBurninSettings,

            string? timecodeInsertion)
        {
            AdaptiveQuantization = adaptiveQuantization;
            AfdSignaling = afdSignaling;
            AlternativeTransferFunction = alternativeTransferFunction;
            Bitrate = bitrate;
            BufSize = bufSize;
            ColorMetadata = colorMetadata;
            ColorSpaceSettings = colorSpaceSettings;
            FilterSettings = filterSettings;
            FixedAfd = fixedAfd;
            FlickerAq = flickerAq;
            FramerateDenominator = framerateDenominator;
            FramerateNumerator = framerateNumerator;
            GopClosedCadence = gopClosedCadence;
            GopSize = gopSize;
            GopSizeUnits = gopSizeUnits;
            Level = level;
            LookAheadRateControl = lookAheadRateControl;
            MaxBitrate = maxBitrate;
            MinIInterval = minIInterval;
            ParDenominator = parDenominator;
            ParNumerator = parNumerator;
            Profile = profile;
            QvbrQualityLevel = qvbrQualityLevel;
            RateControlMode = rateControlMode;
            ScanType = scanType;
            SceneChangeDetect = sceneChangeDetect;
            Slices = slices;
            Tier = tier;
            TimecodeBurninSettings = timecodeBurninSettings;
            TimecodeInsertion = timecodeInsertion;
        }
    }
}
