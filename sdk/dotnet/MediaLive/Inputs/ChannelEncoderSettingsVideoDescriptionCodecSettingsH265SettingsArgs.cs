// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MediaLive.Inputs
{

    public sealed class ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables or disables adaptive quantization.
        /// </summary>
        [Input("adaptiveQuantization")]
        public Input<string>? AdaptiveQuantization { get; set; }

        /// <summary>
        /// Indicates that AFD values will be written into the output stream.
        /// </summary>
        [Input("afdSignaling")]
        public Input<string>? AfdSignaling { get; set; }

        /// <summary>
        /// Whether or not EML should insert an Alternative Transfer Function SEI message.
        /// </summary>
        [Input("alternativeTransferFunction")]
        public Input<string>? AlternativeTransferFunction { get; set; }

        /// <summary>
        /// Average bitrate in bits/second.
        /// </summary>
        [Input("bitrate", required: true)]
        public Input<int> Bitrate { get; set; } = null!;

        /// <summary>
        /// Size of buffer in bits.
        /// </summary>
        [Input("bufSize")]
        public Input<int>? BufSize { get; set; }

        /// <summary>
        /// Includes color space metadata in the output.
        /// </summary>
        [Input("colorMetadata")]
        public Input<string>? ColorMetadata { get; set; }

        /// <summary>
        /// Define the color metadata for the output. H265 Color Space Settings for more details.
        /// </summary>
        [Input("colorSpaceSettings")]
        public Input<Inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsColorSpaceSettingsArgs>? ColorSpaceSettings { get; set; }

        /// <summary>
        /// Filters to apply to an encode. See H265 Filter Settings for more details.
        /// </summary>
        [Input("filterSettings")]
        public Input<Inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsFilterSettingsArgs>? FilterSettings { get; set; }

        /// <summary>
        /// Four bit AFD value to write on all frames of video in the output stream.
        /// </summary>
        [Input("fixedAfd")]
        public Input<string>? FixedAfd { get; set; }

        [Input("flickerAq")]
        public Input<string>? FlickerAq { get; set; }

        /// <summary>
        /// Framerate denominator.
        /// </summary>
        [Input("framerateDenominator", required: true)]
        public Input<int> FramerateDenominator { get; set; } = null!;

        /// <summary>
        /// Framerate numerator.
        /// </summary>
        [Input("framerateNumerator", required: true)]
        public Input<int> FramerateNumerator { get; set; } = null!;

        /// <summary>
        /// Frequency of closed GOPs.
        /// </summary>
        [Input("gopClosedCadence")]
        public Input<int>? GopClosedCadence { get; set; }

        /// <summary>
        /// GOP size in units of either frames of seconds per `gop_size_units`.
        /// </summary>
        [Input("gopSize")]
        public Input<double>? GopSize { get; set; }

        /// <summary>
        /// Indicates if the `gop_size` is specified in frames or seconds.
        /// </summary>
        [Input("gopSizeUnits")]
        public Input<string>? GopSizeUnits { get; set; }

        /// <summary>
        /// H265 level.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        /// <summary>
        /// Amount of lookahead.
        /// </summary>
        [Input("lookAheadRateControl")]
        public Input<string>? LookAheadRateControl { get; set; }

        /// <summary>
        /// Set the maximum bitrate in order to accommodate expected spikes in the complexity of the video.
        /// </summary>
        [Input("maxBitrate")]
        public Input<int>? MaxBitrate { get; set; }

        [Input("minIInterval")]
        public Input<int>? MinIInterval { get; set; }

        /// <summary>
        /// Pixel Aspect Ratio denominator.
        /// </summary>
        [Input("parDenominator")]
        public Input<int>? ParDenominator { get; set; }

        /// <summary>
        /// Pixel Aspect Ratio numerator.
        /// </summary>
        [Input("parNumerator")]
        public Input<int>? ParNumerator { get; set; }

        /// <summary>
        /// AAC profile.
        /// </summary>
        [Input("profile")]
        public Input<string>? Profile { get; set; }

        /// <summary>
        /// Controls the target quality for the video encode.
        /// </summary>
        [Input("qvbrQualityLevel")]
        public Input<int>? QvbrQualityLevel { get; set; }

        /// <summary>
        /// The rate control mode.
        /// </summary>
        [Input("rateControlMode")]
        public Input<string>? RateControlMode { get; set; }

        /// <summary>
        /// Sets the scan type of the output.
        /// </summary>
        [Input("scanType")]
        public Input<string>? ScanType { get; set; }

        /// <summary>
        /// Scene change detection.
        /// </summary>
        [Input("sceneChangeDetect")]
        public Input<string>? SceneChangeDetect { get; set; }

        /// <summary>
        /// Number of slices per picture.
        /// </summary>
        [Input("slices")]
        public Input<int>? Slices { get; set; }

        /// <summary>
        /// Set the H265 tier in the output.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        /// <summary>
        /// Apply a burned in timecode. See H265 Timecode Burnin Settings for more details.
        /// </summary>
        [Input("timecodeBurninSettings")]
        public Input<Inputs.ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsTimecodeBurninSettingsArgs>? TimecodeBurninSettings { get; set; }

        /// <summary>
        /// Determines how timecodes should be inserted into the video elementary stream.
        /// </summary>
        [Input("timecodeInsertion")]
        public Input<string>? TimecodeInsertion { get; set; }

        public ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs()
        {
        }
        public static new ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs Empty => new ChannelEncoderSettingsVideoDescriptionCodecSettingsH265SettingsArgs();
    }
}
