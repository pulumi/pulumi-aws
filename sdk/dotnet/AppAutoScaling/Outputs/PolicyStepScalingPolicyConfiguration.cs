// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppAutoScaling.Outputs
{

    [OutputType]
    public sealed class PolicyStepScalingPolicyConfiguration
    {
        /// <summary>
        /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
        /// </summary>
        public readonly string? AdjustmentType;
        /// <summary>
        /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
        /// </summary>
        public readonly int? Cooldown;
        /// <summary>
        /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
        /// </summary>
        public readonly string? MetricAggregationType;
        /// <summary>
        /// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
        /// </summary>
        public readonly int? MinAdjustmentMagnitude;
        /// <summary>
        /// Set of adjustments that manage scaling. These have the following structure:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ecsPolicy = new aws.appautoscaling.Policy("ecsPolicy", {stepScalingPolicyConfiguration: {
        ///     stepAdjustments: [
        ///         {
        ///             metricIntervalLowerBound: "1",
        ///             metricIntervalUpperBound: "2",
        ///             scalingAdjustment: -1,
        ///         },
        ///         {
        ///             metricIntervalLowerBound: "2",
        ///             metricIntervalUpperBound: "3",
        ///             scalingAdjustment: 1,
        ///         },
        ///     ],
        /// }});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ecs_policy = aws.appautoscaling.Policy("ecsPolicy", step_scaling_policy_configuration=aws.appautoscaling.PolicyStepScalingPolicyConfigurationArgs(
        ///     step_adjustments=[
        ///         aws.appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs(
        ///             metric_interval_lower_bound="1",
        ///             metric_interval_upper_bound="2",
        ///             scaling_adjustment=-1,
        ///         ),
        ///         aws.appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs(
        ///             metric_interval_lower_bound="2",
        ///             metric_interval_upper_bound="3",
        ///             scaling_adjustment=1,
        ///         ),
        ///     ],
        /// ))
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ecsPolicy = new Aws.AppAutoScaling.Policy("ecsPolicy", new()
        ///     {
        ///         StepScalingPolicyConfiguration = new Aws.AppAutoScaling.Inputs.PolicyStepScalingPolicyConfigurationArgs
        ///         {
        ///             StepAdjustments = new[]
        ///             {
        ///                 new Aws.AppAutoScaling.Inputs.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs
        ///                 {
        ///                     MetricIntervalLowerBound = "1",
        ///                     MetricIntervalUpperBound = "2",
        ///                     ScalingAdjustment = -1,
        ///                 },
        ///                 new Aws.AppAutoScaling.Inputs.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs
        ///                 {
        ///                     MetricIntervalLowerBound = "2",
        ///                     MetricIntervalUpperBound = "3",
        ///                     ScalingAdjustment = 1,
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/appautoscaling"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := appautoscaling.NewPolicy(ctx, "ecsPolicy", &amp;appautoscaling.PolicyArgs{
        /// 			StepScalingPolicyConfiguration: &amp;appautoscaling.PolicyStepScalingPolicyConfigurationArgs{
        /// 				StepAdjustments: appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArray{
        /// 					&amp;appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs{
        /// 						MetricIntervalLowerBound: pulumi.String("1"),
        /// 						MetricIntervalUpperBound: pulumi.String("2"),
        /// 						ScalingAdjustment:        -1,
        /// 					},
        /// 					&amp;appautoscaling.PolicyStepScalingPolicyConfigurationStepAdjustmentArgs{
        /// 						MetricIntervalLowerBound: pulumi.String("2"),
        /// 						MetricIntervalUpperBound: pulumi.String("3"),
        /// 						ScalingAdjustment:        pulumi.Int(1),
        /// 					},
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// </summary>
        public readonly ImmutableArray<Outputs.PolicyStepScalingPolicyConfigurationStepAdjustment> StepAdjustments;

        [OutputConstructor]
        private PolicyStepScalingPolicyConfiguration(
            string? adjustmentType,

            int? cooldown,

            string? metricAggregationType,

            int? minAdjustmentMagnitude,

            ImmutableArray<Outputs.PolicyStepScalingPolicyConfigurationStepAdjustment> stepAdjustments)
        {
            AdjustmentType = adjustmentType;
            Cooldown = cooldown;
            MetricAggregationType = metricAggregationType;
            MinAdjustmentMagnitude = minAdjustmentMagnitude;
            StepAdjustments = stepAdjustments;
        }
    }
}
