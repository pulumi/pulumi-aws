// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppAutoScaling
{
    [AwsResourceType("aws:appautoscaling/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        [Output("alarmArns")]
        public Output<ImmutableArray<string>> AlarmArns { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policyType")]
        public Output<string?> PolicyType { get; private set; } = null!;

        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        [Output("scalableDimension")]
        public Output<string> ScalableDimension { get; private set; } = null!;

        [Output("serviceNamespace")]
        public Output<string> ServiceNamespace { get; private set; } = null!;

        [Output("stepScalingPolicyConfiguration")]
        public Output<Outputs.PolicyStepScalingPolicyConfiguration?> StepScalingPolicyConfiguration { get; private set; } = null!;

        [Output("targetTrackingScalingPolicyConfiguration")]
        public Output<Outputs.PolicyTargetTrackingScalingPolicyConfiguration?> TargetTrackingScalingPolicyConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:appautoscaling/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:appautoscaling/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        [Input("scalableDimension", required: true)]
        public Input<string> ScalableDimension { get; set; } = null!;

        [Input("serviceNamespace", required: true)]
        public Input<string> ServiceNamespace { get; set; } = null!;

        [Input("stepScalingPolicyConfiguration")]
        public Input<Inputs.PolicyStepScalingPolicyConfigurationArgs>? StepScalingPolicyConfiguration { get; set; }

        [Input("targetTrackingScalingPolicyConfiguration")]
        public Input<Inputs.PolicyTargetTrackingScalingPolicyConfigurationArgs>? TargetTrackingScalingPolicyConfiguration { get; set; }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        [Input("alarmArns")]
        private InputList<string>? _alarmArns;
        public InputList<string> AlarmArns
        {
            get => _alarmArns ?? (_alarmArns = new InputList<string>());
            set => _alarmArns = value;
        }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        [Input("scalableDimension")]
        public Input<string>? ScalableDimension { get; set; }

        [Input("serviceNamespace")]
        public Input<string>? ServiceNamespace { get; set; }

        [Input("stepScalingPolicyConfiguration")]
        public Input<Inputs.PolicyStepScalingPolicyConfigurationGetArgs>? StepScalingPolicyConfiguration { get; set; }

        [Input("targetTrackingScalingPolicyConfiguration")]
        public Input<Inputs.PolicyTargetTrackingScalingPolicyConfigurationGetArgs>? TargetTrackingScalingPolicyConfiguration { get; set; }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
