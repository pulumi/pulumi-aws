// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cognito
{
    [AwsResourceType("aws:cognito/identityPool:IdentityPool")]
    public partial class IdentityPool : global::Pulumi.CustomResource
    {
        [Output("allowClassicFlow")]
        public Output<bool?> AllowClassicFlow { get; private set; } = null!;

        [Output("allowUnauthenticatedIdentities")]
        public Output<bool?> AllowUnauthenticatedIdentities { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("cognitoIdentityProviders")]
        public Output<ImmutableArray<Outputs.IdentityPoolCognitoIdentityProvider>> CognitoIdentityProviders { get; private set; } = null!;

        [Output("developerProviderName")]
        public Output<string?> DeveloperProviderName { get; private set; } = null!;

        [Output("identityPoolName")]
        public Output<string> IdentityPoolName { get; private set; } = null!;

        [Output("openidConnectProviderArns")]
        public Output<ImmutableArray<string>> OpenidConnectProviderArns { get; private set; } = null!;

        [Output("samlProviderArns")]
        public Output<ImmutableArray<string>> SamlProviderArns { get; private set; } = null!;

        [Output("supportedLoginProviders")]
        public Output<ImmutableDictionary<string, string>?> SupportedLoginProviders { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a IdentityPool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IdentityPool(string name, IdentityPoolArgs args, CustomResourceOptions? options = null)
            : base("aws:cognito/identityPool:IdentityPool", name, args ?? new IdentityPoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IdentityPool(string name, Input<string> id, IdentityPoolState? state = null, CustomResourceOptions? options = null)
            : base("aws:cognito/identityPool:IdentityPool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IdentityPool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IdentityPool Get(string name, Input<string> id, IdentityPoolState? state = null, CustomResourceOptions? options = null)
        {
            return new IdentityPool(name, id, state, options);
        }
    }

    public sealed class IdentityPoolArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowClassicFlow")]
        public Input<bool>? AllowClassicFlow { get; set; }

        [Input("allowUnauthenticatedIdentities")]
        public Input<bool>? AllowUnauthenticatedIdentities { get; set; }

        [Input("cognitoIdentityProviders")]
        private InputList<Inputs.IdentityPoolCognitoIdentityProviderArgs>? _cognitoIdentityProviders;
        public InputList<Inputs.IdentityPoolCognitoIdentityProviderArgs> CognitoIdentityProviders
        {
            get => _cognitoIdentityProviders ?? (_cognitoIdentityProviders = new InputList<Inputs.IdentityPoolCognitoIdentityProviderArgs>());
            set => _cognitoIdentityProviders = value;
        }

        [Input("developerProviderName")]
        public Input<string>? DeveloperProviderName { get; set; }

        [Input("identityPoolName", required: true)]
        public Input<string> IdentityPoolName { get; set; } = null!;

        [Input("openidConnectProviderArns")]
        private InputList<string>? _openidConnectProviderArns;
        public InputList<string> OpenidConnectProviderArns
        {
            get => _openidConnectProviderArns ?? (_openidConnectProviderArns = new InputList<string>());
            set => _openidConnectProviderArns = value;
        }

        [Input("samlProviderArns")]
        private InputList<string>? _samlProviderArns;
        public InputList<string> SamlProviderArns
        {
            get => _samlProviderArns ?? (_samlProviderArns = new InputList<string>());
            set => _samlProviderArns = value;
        }

        [Input("supportedLoginProviders")]
        private InputMap<string>? _supportedLoginProviders;
        public InputMap<string> SupportedLoginProviders
        {
            get => _supportedLoginProviders ?? (_supportedLoginProviders = new InputMap<string>());
            set => _supportedLoginProviders = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public IdentityPoolArgs()
        {
        }
        public static new IdentityPoolArgs Empty => new IdentityPoolArgs();
    }

    public sealed class IdentityPoolState : global::Pulumi.ResourceArgs
    {
        [Input("allowClassicFlow")]
        public Input<bool>? AllowClassicFlow { get; set; }

        [Input("allowUnauthenticatedIdentities")]
        public Input<bool>? AllowUnauthenticatedIdentities { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("cognitoIdentityProviders")]
        private InputList<Inputs.IdentityPoolCognitoIdentityProviderGetArgs>? _cognitoIdentityProviders;
        public InputList<Inputs.IdentityPoolCognitoIdentityProviderGetArgs> CognitoIdentityProviders
        {
            get => _cognitoIdentityProviders ?? (_cognitoIdentityProviders = new InputList<Inputs.IdentityPoolCognitoIdentityProviderGetArgs>());
            set => _cognitoIdentityProviders = value;
        }

        [Input("developerProviderName")]
        public Input<string>? DeveloperProviderName { get; set; }

        [Input("identityPoolName")]
        public Input<string>? IdentityPoolName { get; set; }

        [Input("openidConnectProviderArns")]
        private InputList<string>? _openidConnectProviderArns;
        public InputList<string> OpenidConnectProviderArns
        {
            get => _openidConnectProviderArns ?? (_openidConnectProviderArns = new InputList<string>());
            set => _openidConnectProviderArns = value;
        }

        [Input("samlProviderArns")]
        private InputList<string>? _samlProviderArns;
        public InputList<string> SamlProviderArns
        {
            get => _samlProviderArns ?? (_samlProviderArns = new InputList<string>());
            set => _samlProviderArns = value;
        }

        [Input("supportedLoginProviders")]
        private InputMap<string>? _supportedLoginProviders;
        public InputMap<string> SupportedLoginProviders
        {
            get => _supportedLoginProviders ?? (_supportedLoginProviders = new InputMap<string>());
            set => _supportedLoginProviders = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public IdentityPoolState()
        {
        }
        public static new IdentityPoolState Empty => new IdentityPoolState();
    }
}
