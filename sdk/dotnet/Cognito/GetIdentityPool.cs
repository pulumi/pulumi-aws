// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cognito
{
    public static class GetIdentityPool
    {
        /// <summary>
        /// Data source for managing an AWS Cognito Identity Pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Cognito.GetIdentityPool.Invoke(new()
        ///     {
        ///         IdentityPoolName = "test pool",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIdentityPoolResult> InvokeAsync(GetIdentityPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIdentityPoolResult>("aws:cognito/getIdentityPool:getIdentityPool", args ?? new GetIdentityPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS Cognito Identity Pool.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Cognito.GetIdentityPool.Invoke(new()
        ///     {
        ///         IdentityPoolName = "test pool",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIdentityPoolResult> Invoke(GetIdentityPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIdentityPoolResult>("aws:cognito/getIdentityPool:getIdentityPool", args ?? new GetIdentityPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIdentityPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Cognito Identity Pool name.
        /// </summary>
        [Input("identityPoolName", required: true)]
        public string IdentityPoolName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags to assigned to the Identity Pool.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetIdentityPoolArgs()
        {
        }
        public static new GetIdentityPoolArgs Empty => new GetIdentityPoolArgs();
    }

    public sealed class GetIdentityPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Cognito Identity Pool name.
        /// </summary>
        [Input("identityPoolName", required: true)]
        public Input<string> IdentityPoolName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assigned to the Identity Pool.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetIdentityPoolInvokeArgs()
        {
        }
        public static new GetIdentityPoolInvokeArgs Empty => new GetIdentityPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetIdentityPoolResult
    {
        /// <summary>
        /// Whether the classic / basic authentication flow is enabled.
        /// </summary>
        public readonly bool AllowClassicFlow;
        /// <summary>
        /// Whether the identity pool supports unauthenticated logins or not.
        /// </summary>
        public readonly bool AllowUnauthenticatedIdentities;
        /// <summary>
        /// ARN of the Pool.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// An array of Amazon Cognito Identity user pools and their client IDs.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIdentityPoolCognitoIdentityProviderResult> CognitoIdentityProviders;
        /// <summary>
        /// The "domain" by which Cognito will refer to your users.
        /// </summary>
        public readonly string DeveloperProviderName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdentityPoolName;
        /// <summary>
        /// Set of OpendID Connect provider ARNs.
        /// </summary>
        public readonly ImmutableArray<string> OpenidConnectProviderArns;
        /// <summary>
        /// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
        /// </summary>
        public readonly ImmutableArray<string> SamlProviderArns;
        /// <summary>
        /// Key-Value pairs mapping provider names to provider app IDs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> SupportedLoginProviders;
        /// <summary>
        /// A map of tags to assigned to the Identity Pool.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetIdentityPoolResult(
            bool allowClassicFlow,

            bool allowUnauthenticatedIdentities,

            string arn,

            ImmutableArray<Outputs.GetIdentityPoolCognitoIdentityProviderResult> cognitoIdentityProviders,

            string developerProviderName,

            string id,

            string identityPoolName,

            ImmutableArray<string> openidConnectProviderArns,

            ImmutableArray<string> samlProviderArns,

            ImmutableDictionary<string, string> supportedLoginProviders,

            ImmutableDictionary<string, string> tags)
        {
            AllowClassicFlow = allowClassicFlow;
            AllowUnauthenticatedIdentities = allowUnauthenticatedIdentities;
            Arn = arn;
            CognitoIdentityProviders = cognitoIdentityProviders;
            DeveloperProviderName = developerProviderName;
            Id = id;
            IdentityPoolName = identityPoolName;
            OpenidConnectProviderArns = openidConnectProviderArns;
            SamlProviderArns = samlProviderArns;
            SupportedLoginProviders = supportedLoginProviders;
            Tags = tags;
        }
    }
}
