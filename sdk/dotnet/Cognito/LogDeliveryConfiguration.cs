// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cognito
{
    /// <summary>
    /// Manages an AWS Cognito IDP (Identity Provider) Log Delivery Configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage with CloudWatch Logs
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Cognito.UserPool("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleLogGroup = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleLogDeliveryConfiguration = new Aws.Cognito.LogDeliveryConfiguration("example", new()
    ///     {
    ///         UserPoolId = example.Id,
    ///         LogConfigurations = new[]
    ///         {
    ///             new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationArgs
    ///             {
    ///                 EventSource = "userNotification",
    ///                 LogLevel = "ERROR",
    ///                 CloudWatchLogsConfiguration = new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs
    ///                 {
    ///                     LogGroupArn = exampleLogGroup.Arn,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Multiple Log Configurations with Different Destinations
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Cognito.UserPool("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleLogGroup = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleBucket = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "example-bucket",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var firehose = new Aws.Iam.Role("firehose", new()
    ///     {
    ///         Name = "firehose-role",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "sts:AssumeRole",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "firehose.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var firehoseRolePolicy = new Aws.Iam.RolePolicy("firehose", new()
    ///     {
    ///         Name = "firehose-policy",
    ///         Role = firehose.Id,
    ///         Policy = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "s3:AbortMultipartUpload",
    ///                         "s3:GetBucketLocation",
    ///                         "s3:GetObject",
    ///                         "s3:ListBucket",
    ///                         "s3:ListBucketMultipartUploads",
    ///                         "s3:PutObject",
    ///                     },
    ///                     ["Resource"] = new[]
    ///                     {
    ///                         exampleBucket.Arn,
    ///                         exampleBucket.Arn.Apply(arn =&gt; $"{arn}/*"),
    ///                     },
    ///                 },
    ///             },
    ///         })),
    ///     });
    /// 
    ///     var exampleFirehoseDeliveryStream = new Aws.Kinesis.FirehoseDeliveryStream("example", new()
    ///     {
    ///         Name = "example-stream",
    ///         Destination = "extended_s3",
    ///         ExtendedS3Configuration = new Aws.Kinesis.Inputs.FirehoseDeliveryStreamExtendedS3ConfigurationArgs
    ///         {
    ///             RoleArn = firehose.Arn,
    ///             BucketArn = exampleBucket.Arn,
    ///         },
    ///     });
    /// 
    ///     var exampleLogDeliveryConfiguration = new Aws.Cognito.LogDeliveryConfiguration("example", new()
    ///     {
    ///         UserPoolId = example.Id,
    ///         LogConfigurations = new[]
    ///         {
    ///             new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationArgs
    ///             {
    ///                 EventSource = "userNotification",
    ///                 LogLevel = "INFO",
    ///                 CloudWatchLogsConfiguration = new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationCloudWatchLogsConfigurationArgs
    ///                 {
    ///                     LogGroupArn = exampleLogGroup.Arn,
    ///                 },
    ///             },
    ///             new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationArgs
    ///             {
    ///                 EventSource = "userAuthEvents",
    ///                 LogLevel = "ERROR",
    ///                 FirehoseConfiguration = new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationFirehoseConfigurationArgs
    ///                 {
    ///                     StreamArn = exampleFirehoseDeliveryStream.Arn,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### S3 Configuration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Cognito.UserPool("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleBucket = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "example-bucket",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var exampleLogDeliveryConfiguration = new Aws.Cognito.LogDeliveryConfiguration("example", new()
    ///     {
    ///         UserPoolId = example.Id,
    ///         LogConfigurations = new[]
    ///         {
    ///             new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationArgs
    ///             {
    ///                 EventSource = "userNotification",
    ///                 LogLevel = "ERROR",
    ///                 S3Configuration = new Aws.Cognito.Inputs.LogDeliveryConfigurationLogConfigurationS3ConfigurationArgs
    ///                 {
    ///                     BucketArn = exampleBucket.Arn,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ### Identity Schema
    /// 
    /// #### Required
    /// 
    /// * `user_pool_id` (String) ID of the Cognito User Pool.
    /// 
    /// #### Optional
    /// 
    /// * `account_id` (String) AWS Account where this resource is managed.
    /// 
    /// * `region` (String) Region where this resource is managed.
    /// 
    /// Using `pulumi import`, import Cognito IDP (Identity Provider) Log Delivery Configuration using the `user_pool_id`. For example:
    /// 
    /// console
    /// 
    /// % pulumi import aws_cognito_log_delivery_configuration.example us-west-2_example123
    /// </summary>
    [AwsResourceType("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration")]
    public partial class LogDeliveryConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
        /// </summary>
        [Output("logConfigurations")]
        public Output<ImmutableArray<Outputs.LogDeliveryConfigurationLogConfiguration>> LogConfigurations { get; private set; } = null!;

        /// <summary>
        /// The AWS region.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The ID of the user pool for which to configure log delivery.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("userPoolId")]
        public Output<string> UserPoolId { get; private set; } = null!;


        /// <summary>
        /// Create a LogDeliveryConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogDeliveryConfiguration(string name, LogDeliveryConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration", name, args ?? new LogDeliveryConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogDeliveryConfiguration(string name, Input<string> id, LogDeliveryConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:cognito/logDeliveryConfiguration:LogDeliveryConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogDeliveryConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogDeliveryConfiguration Get(string name, Input<string> id, LogDeliveryConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new LogDeliveryConfiguration(name, id, state, options);
        }
    }

    public sealed class LogDeliveryConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("logConfigurations")]
        private InputList<Inputs.LogDeliveryConfigurationLogConfigurationArgs>? _logConfigurations;

        /// <summary>
        /// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
        /// </summary>
        public InputList<Inputs.LogDeliveryConfigurationLogConfigurationArgs> LogConfigurations
        {
            get => _logConfigurations ?? (_logConfigurations = new InputList<Inputs.LogDeliveryConfigurationLogConfigurationArgs>());
            set => _logConfigurations = value;
        }

        /// <summary>
        /// The AWS region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the user pool for which to configure log delivery.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("userPoolId", required: true)]
        public Input<string> UserPoolId { get; set; } = null!;

        public LogDeliveryConfigurationArgs()
        {
        }
        public static new LogDeliveryConfigurationArgs Empty => new LogDeliveryConfigurationArgs();
    }

    public sealed class LogDeliveryConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("logConfigurations")]
        private InputList<Inputs.LogDeliveryConfigurationLogConfigurationGetArgs>? _logConfigurations;

        /// <summary>
        /// Configuration block for log delivery. At least one configuration block is required. See Log Configurations below.
        /// </summary>
        public InputList<Inputs.LogDeliveryConfigurationLogConfigurationGetArgs> LogConfigurations
        {
            get => _logConfigurations ?? (_logConfigurations = new InputList<Inputs.LogDeliveryConfigurationLogConfigurationGetArgs>());
            set => _logConfigurations = value;
        }

        /// <summary>
        /// The AWS region.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the user pool for which to configure log delivery.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("userPoolId")]
        public Input<string>? UserPoolId { get; set; }

        public LogDeliveryConfigurationState()
        {
        }
        public static new LogDeliveryConfigurationState Empty => new LogDeliveryConfigurationState();
    }
}
