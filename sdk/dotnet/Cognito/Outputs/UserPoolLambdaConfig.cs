// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cognito.Outputs
{

    [OutputType]
    public sealed class UserPoolLambdaConfig
    {
        /// <summary>
        /// ARN of the lambda creating an authentication challenge.
        /// </summary>
        public readonly string? CreateAuthChallenge;
        /// <summary>
        /// A custom email sender AWS Lambda trigger. See custom_email_sender Below.
        /// </summary>
        public readonly Outputs.UserPoolLambdaConfigCustomEmailSender? CustomEmailSender;
        /// <summary>
        /// Custom Message AWS Lambda trigger.
        /// </summary>
        public readonly string? CustomMessage;
        /// <summary>
        /// A custom SMS sender AWS Lambda trigger. See custom_sms_sender Below.
        /// </summary>
        public readonly Outputs.UserPoolLambdaConfigCustomSmsSender? CustomSmsSender;
        /// <summary>
        /// Defines the authentication challenge.
        /// </summary>
        public readonly string? DefineAuthChallenge;
        /// <summary>
        /// The Amazon Resource Name of Key Management Service Customer master keys. Amazon Cognito uses the key to encrypt codes and temporary passwords sent to CustomEmailSender and CustomSMSSender.
        /// </summary>
        public readonly string? KmsKeyId;
        /// <summary>
        /// Post-authentication AWS Lambda trigger.
        /// </summary>
        public readonly string? PostAuthentication;
        /// <summary>
        /// Post-confirmation AWS Lambda trigger.
        /// </summary>
        public readonly string? PostConfirmation;
        /// <summary>
        /// Pre-authentication AWS Lambda trigger.
        /// </summary>
        public readonly string? PreAuthentication;
        /// <summary>
        /// Pre-registration AWS Lambda trigger.
        /// </summary>
        public readonly string? PreSignUp;
        /// <summary>
        /// Allow to customize identity token claims before token generation. Set this parameter for legacy purposes; for new instances of pre token generation triggers, set the lambda_arn of `pre_token_generation_config`.
        /// </summary>
        public readonly string? PreTokenGeneration;
        /// <summary>
        /// Allow to customize access tokens. See pre_token_configuration_type
        /// </summary>
        public readonly Outputs.UserPoolLambdaConfigPreTokenGenerationConfig? PreTokenGenerationConfig;
        /// <summary>
        /// User migration Lambda config type.
        /// </summary>
        public readonly string? UserMigration;
        /// <summary>
        /// Verifies the authentication challenge response.
        /// </summary>
        public readonly string? VerifyAuthChallengeResponse;

        [OutputConstructor]
        private UserPoolLambdaConfig(
            string? createAuthChallenge,

            Outputs.UserPoolLambdaConfigCustomEmailSender? customEmailSender,

            string? customMessage,

            Outputs.UserPoolLambdaConfigCustomSmsSender? customSmsSender,

            string? defineAuthChallenge,

            string? kmsKeyId,

            string? postAuthentication,

            string? postConfirmation,

            string? preAuthentication,

            string? preSignUp,

            string? preTokenGeneration,

            Outputs.UserPoolLambdaConfigPreTokenGenerationConfig? preTokenGenerationConfig,

            string? userMigration,

            string? verifyAuthChallengeResponse)
        {
            CreateAuthChallenge = createAuthChallenge;
            CustomEmailSender = customEmailSender;
            CustomMessage = customMessage;
            CustomSmsSender = customSmsSender;
            DefineAuthChallenge = defineAuthChallenge;
            KmsKeyId = kmsKeyId;
            PostAuthentication = postAuthentication;
            PostConfirmation = postConfirmation;
            PreAuthentication = preAuthentication;
            PreSignUp = preSignUp;
            PreTokenGeneration = preTokenGeneration;
            PreTokenGenerationConfig = preTokenGenerationConfig;
            UserMigration = userMigration;
            VerifyAuthChallengeResponse = verifyAuthChallengeResponse;
        }
    }
}
