// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cognito.Outputs
{

    [OutputType]
    public sealed class UserPoolLambdaConfig
    {
        /// <summary>
        /// The ARN of the lambda creating an authentication challenge.
        /// </summary>
        public readonly string? CreateAuthChallenge;
        /// <summary>
        /// A custom Message AWS Lambda trigger.
        /// </summary>
        public readonly string? CustomMessage;
        /// <summary>
        /// Defines the authentication challenge.
        /// </summary>
        public readonly string? DefineAuthChallenge;
        /// <summary>
        /// A post-authentication AWS Lambda trigger.
        /// </summary>
        public readonly string? PostAuthentication;
        /// <summary>
        /// A post-confirmation AWS Lambda trigger.
        /// </summary>
        public readonly string? PostConfirmation;
        /// <summary>
        /// A pre-authentication AWS Lambda trigger.
        /// </summary>
        public readonly string? PreAuthentication;
        /// <summary>
        /// A pre-registration AWS Lambda trigger.
        /// </summary>
        public readonly string? PreSignUp;
        /// <summary>
        /// Allow to customize identity token claims before token generation.
        /// </summary>
        public readonly string? PreTokenGeneration;
        /// <summary>
        /// The user migration Lambda config type.
        /// </summary>
        public readonly string? UserMigration;
        /// <summary>
        /// Verifies the authentication challenge response.
        /// </summary>
        public readonly string? VerifyAuthChallengeResponse;

        [OutputConstructor]
        private UserPoolLambdaConfig(
            string? createAuthChallenge,

            string? customMessage,

            string? defineAuthChallenge,

            string? postAuthentication,

            string? postConfirmation,

            string? preAuthentication,

            string? preSignUp,

            string? preTokenGeneration,

            string? userMigration,

            string? verifyAuthChallengeResponse)
        {
            CreateAuthChallenge = createAuthChallenge;
            CustomMessage = customMessage;
            DefineAuthChallenge = defineAuthChallenge;
            PostAuthentication = postAuthentication;
            PostConfirmation = postConfirmation;
            PreAuthentication = preAuthentication;
            PreSignUp = preSignUp;
            PreTokenGeneration = preTokenGeneration;
            UserMigration = userMigration;
            VerifyAuthChallengeResponse = verifyAuthChallengeResponse;
        }
    }
}
