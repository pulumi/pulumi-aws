// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cognito
{
    public static class GetUserPoolClient
    {
        public static Task<GetUserPoolClientResult> InvokeAsync(GetUserPoolClientArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserPoolClientResult>("aws:cognito/getUserPoolClient:getUserPoolClient", args ?? new GetUserPoolClientArgs(), options.WithDefaults());

        public static Output<GetUserPoolClientResult> Invoke(GetUserPoolClientInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserPoolClientResult>("aws:cognito/getUserPoolClient:getUserPoolClient", args ?? new GetUserPoolClientInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserPoolClientArgs : global::Pulumi.InvokeArgs
    {
        [Input("clientId", required: true)]
        public string ClientId { get; set; } = null!;

        [Input("userPoolId", required: true)]
        public string UserPoolId { get; set; } = null!;

        public GetUserPoolClientArgs()
        {
        }
        public static new GetUserPoolClientArgs Empty => new GetUserPoolClientArgs();
    }

    public sealed class GetUserPoolClientInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clientId", required: true)]
        public Input<string> ClientId { get; set; } = null!;

        [Input("userPoolId", required: true)]
        public Input<string> UserPoolId { get; set; } = null!;

        public GetUserPoolClientInvokeArgs()
        {
        }
        public static new GetUserPoolClientInvokeArgs Empty => new GetUserPoolClientInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserPoolClientResult
    {
        public readonly int AccessTokenValidity;
        public readonly ImmutableArray<string> AllowedOauthFlows;
        public readonly bool AllowedOauthFlowsUserPoolClient;
        public readonly ImmutableArray<string> AllowedOauthScopes;
        public readonly ImmutableArray<Outputs.GetUserPoolClientAnalyticsConfigurationResult> AnalyticsConfigurations;
        public readonly ImmutableArray<string> CallbackUrls;
        public readonly string ClientId;
        public readonly string ClientSecret;
        public readonly string DefaultRedirectUri;
        public readonly bool EnablePropagateAdditionalUserContextData;
        public readonly bool EnableTokenRevocation;
        public readonly ImmutableArray<string> ExplicitAuthFlows;
        public readonly bool GenerateSecret;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int IdTokenValidity;
        public readonly ImmutableArray<string> LogoutUrls;
        public readonly string Name;
        public readonly string PreventUserExistenceErrors;
        public readonly ImmutableArray<string> ReadAttributes;
        public readonly int RefreshTokenValidity;
        public readonly ImmutableArray<string> SupportedIdentityProviders;
        public readonly ImmutableArray<Outputs.GetUserPoolClientTokenValidityUnitResult> TokenValidityUnits;
        public readonly string UserPoolId;
        public readonly ImmutableArray<string> WriteAttributes;

        [OutputConstructor]
        private GetUserPoolClientResult(
            int accessTokenValidity,

            ImmutableArray<string> allowedOauthFlows,

            bool allowedOauthFlowsUserPoolClient,

            ImmutableArray<string> allowedOauthScopes,

            ImmutableArray<Outputs.GetUserPoolClientAnalyticsConfigurationResult> analyticsConfigurations,

            ImmutableArray<string> callbackUrls,

            string clientId,

            string clientSecret,

            string defaultRedirectUri,

            bool enablePropagateAdditionalUserContextData,

            bool enableTokenRevocation,

            ImmutableArray<string> explicitAuthFlows,

            bool generateSecret,

            string id,

            int idTokenValidity,

            ImmutableArray<string> logoutUrls,

            string name,

            string preventUserExistenceErrors,

            ImmutableArray<string> readAttributes,

            int refreshTokenValidity,

            ImmutableArray<string> supportedIdentityProviders,

            ImmutableArray<Outputs.GetUserPoolClientTokenValidityUnitResult> tokenValidityUnits,

            string userPoolId,

            ImmutableArray<string> writeAttributes)
        {
            AccessTokenValidity = accessTokenValidity;
            AllowedOauthFlows = allowedOauthFlows;
            AllowedOauthFlowsUserPoolClient = allowedOauthFlowsUserPoolClient;
            AllowedOauthScopes = allowedOauthScopes;
            AnalyticsConfigurations = analyticsConfigurations;
            CallbackUrls = callbackUrls;
            ClientId = clientId;
            ClientSecret = clientSecret;
            DefaultRedirectUri = defaultRedirectUri;
            EnablePropagateAdditionalUserContextData = enablePropagateAdditionalUserContextData;
            EnableTokenRevocation = enableTokenRevocation;
            ExplicitAuthFlows = explicitAuthFlows;
            GenerateSecret = generateSecret;
            Id = id;
            IdTokenValidity = idTokenValidity;
            LogoutUrls = logoutUrls;
            Name = name;
            PreventUserExistenceErrors = preventUserExistenceErrors;
            ReadAttributes = readAttributes;
            RefreshTokenValidity = refreshTokenValidity;
            SupportedIdentityProviders = supportedIdentityProviders;
            TokenValidityUnits = tokenValidityUnits;
            UserPoolId = userPoolId;
            WriteAttributes = writeAttributes;
        }
    }
}
