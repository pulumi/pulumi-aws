// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGatewayV2
{
    /// <summary>
    /// Manages an Amazon API Gateway Version 2 authorizer.
    /// More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
    /// 
    /// ## Example Usage
    /// ### Basic WebSocket API
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.ApiGatewayV2.Authorizer("example", new Aws.ApiGatewayV2.AuthorizerArgs
    ///         {
    ///             ApiId = aws_apigatewayv2_api.Example.Id,
    ///             AuthorizerType = "REQUEST",
    ///             AuthorizerUri = aws_lambda_function.Example.Invoke_arn,
    ///             IdentitySources = 
    ///             {
    ///                 "route.request.header.Auth",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Basic HTTP API
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.ApiGatewayV2.Authorizer("example", new Aws.ApiGatewayV2.AuthorizerArgs
    ///         {
    ///             ApiId = aws_apigatewayv2_api.Example.Id,
    ///             AuthorizerType = "JWT",
    ///             IdentitySources = 
    ///             {
    ///                 "$request.header.Authorization",
    ///             },
    ///             JwtConfiguration = new Aws.ApiGatewayV2.Inputs.AuthorizerJwtConfigurationArgs
    ///             {
    ///                 Audience = 
    ///                 {
    ///                     "example",
    ///                 },
    ///                 Issuer = $"https://{aws_cognito_user_pool.Example.Endpoint}",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Authorizer : Pulumi.CustomResource
    {
        /// <summary>
        /// The API identifier.
        /// </summary>
        [Output("apiId")]
        public Output<string> ApiId { get; private set; } = null!;

        /// <summary>
        /// The required credentials as an IAM role for API Gateway to invoke the authorizer.
        /// Supported only for `REQUEST` authorizers.
        /// </summary>
        [Output("authorizerCredentialsArn")]
        public Output<string?> AuthorizerCredentialsArn { get; private set; } = null!;

        /// <summary>
        /// The authorizer type. Valid values: `JWT`, `REQUEST`.
        /// For WebSocket APIs, specify `REQUEST` for a Lambda function using incoming request parameters.
        /// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
        /// </summary>
        [Output("authorizerType")]
        public Output<string> AuthorizerType { get; private set; } = null!;

        /// <summary>
        /// The authorizer's Uniform Resource Identifier (URI).
        /// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
        /// Supported only for `REQUEST` authorizers.
        /// </summary>
        [Output("authorizerUri")]
        public Output<string?> AuthorizerUri { get; private set; } = null!;

        /// <summary>
        /// The identity sources for which authorization is requested.
        /// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
        /// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
        /// </summary>
        [Output("identitySources")]
        public Output<ImmutableArray<string>> IdentitySources { get; private set; } = null!;

        /// <summary>
        /// The configuration of a JWT authorizer. Required for the `JWT` authorizer type.
        /// Supported only for HTTP APIs.
        /// </summary>
        [Output("jwtConfiguration")]
        public Output<Outputs.AuthorizerJwtConfiguration?> JwtConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the authorizer.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Authorizer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authorizer(string name, AuthorizerArgs args, CustomResourceOptions? options = null)
            : base("aws:apigatewayv2/authorizer:Authorizer", name, args ?? new AuthorizerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authorizer(string name, Input<string> id, AuthorizerState? state = null, CustomResourceOptions? options = null)
            : base("aws:apigatewayv2/authorizer:Authorizer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authorizer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authorizer Get(string name, Input<string> id, AuthorizerState? state = null, CustomResourceOptions? options = null)
        {
            return new Authorizer(name, id, state, options);
        }
    }

    public sealed class AuthorizerArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The API identifier.
        /// </summary>
        [Input("apiId", required: true)]
        public Input<string> ApiId { get; set; } = null!;

        /// <summary>
        /// The required credentials as an IAM role for API Gateway to invoke the authorizer.
        /// Supported only for `REQUEST` authorizers.
        /// </summary>
        [Input("authorizerCredentialsArn")]
        public Input<string>? AuthorizerCredentialsArn { get; set; }

        /// <summary>
        /// The authorizer type. Valid values: `JWT`, `REQUEST`.
        /// For WebSocket APIs, specify `REQUEST` for a Lambda function using incoming request parameters.
        /// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
        /// </summary>
        [Input("authorizerType", required: true)]
        public Input<string> AuthorizerType { get; set; } = null!;

        /// <summary>
        /// The authorizer's Uniform Resource Identifier (URI).
        /// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
        /// Supported only for `REQUEST` authorizers.
        /// </summary>
        [Input("authorizerUri")]
        public Input<string>? AuthorizerUri { get; set; }

        [Input("identitySources", required: true)]
        private InputList<string>? _identitySources;

        /// <summary>
        /// The identity sources for which authorization is requested.
        /// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
        /// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
        /// </summary>
        public InputList<string> IdentitySources
        {
            get => _identitySources ?? (_identitySources = new InputList<string>());
            set => _identitySources = value;
        }

        /// <summary>
        /// The configuration of a JWT authorizer. Required for the `JWT` authorizer type.
        /// Supported only for HTTP APIs.
        /// </summary>
        [Input("jwtConfiguration")]
        public Input<Inputs.AuthorizerJwtConfigurationArgs>? JwtConfiguration { get; set; }

        /// <summary>
        /// The name of the authorizer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AuthorizerArgs()
        {
        }
    }

    public sealed class AuthorizerState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The API identifier.
        /// </summary>
        [Input("apiId")]
        public Input<string>? ApiId { get; set; }

        /// <summary>
        /// The required credentials as an IAM role for API Gateway to invoke the authorizer.
        /// Supported only for `REQUEST` authorizers.
        /// </summary>
        [Input("authorizerCredentialsArn")]
        public Input<string>? AuthorizerCredentialsArn { get; set; }

        /// <summary>
        /// The authorizer type. Valid values: `JWT`, `REQUEST`.
        /// For WebSocket APIs, specify `REQUEST` for a Lambda function using incoming request parameters.
        /// For HTTP APIs, specify `JWT` to use JSON Web Tokens.
        /// </summary>
        [Input("authorizerType")]
        public Input<string>? AuthorizerType { get; set; }

        /// <summary>
        /// The authorizer's Uniform Resource Identifier (URI).
        /// For `REQUEST` authorizers this must be a well-formed Lambda function URI, such as the `invoke_arn` attribute of the `aws.lambda.Function` resource.
        /// Supported only for `REQUEST` authorizers.
        /// </summary>
        [Input("authorizerUri")]
        public Input<string>? AuthorizerUri { get; set; }

        [Input("identitySources")]
        private InputList<string>? _identitySources;

        /// <summary>
        /// The identity sources for which authorization is requested.
        /// For `REQUEST` authorizers the value is a list of one or more mapping expressions of the specified request parameters.
        /// For `JWT` authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
        /// </summary>
        public InputList<string> IdentitySources
        {
            get => _identitySources ?? (_identitySources = new InputList<string>());
            set => _identitySources = value;
        }

        /// <summary>
        /// The configuration of a JWT authorizer. Required for the `JWT` authorizer type.
        /// Supported only for HTTP APIs.
        /// </summary>
        [Input("jwtConfiguration")]
        public Input<Inputs.AuthorizerJwtConfigurationGetArgs>? JwtConfiguration { get; set; }

        /// <summary>
        /// The name of the authorizer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public AuthorizerState()
        {
        }
    }
}
