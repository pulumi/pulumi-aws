// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VerifiedPermissions
{
    /// <summary>
    /// Resource for managing an AWS Verified Permissions Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.VerifiedPermissions.Policy("test", new()
    ///     {
    ///         PolicyStoreId = testAwsVerifiedpermissionsPolicyStore.Id,
    ///         Definition = new Aws.VerifiedPermissions.Inputs.PolicyDefinitionArgs
    ///         {
    ///             Static = new Aws.VerifiedPermissions.Inputs.PolicyDefinitionStaticArgs
    ///             {
    ///                 Statement = "permit (principal, action == Action::\"view\", resource in Album:: \"test_album\");",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Verified Permissions Policy using the `policy_id,policy_store_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:verifiedpermissions/policy:Policy example policy-id-12345678,policy-store-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:verifiedpermissions/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// The definition of the policy. See Definition below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("definition")]
        public Output<Outputs.PolicyDefinition?> Definition { get; private set; } = null!;

        [Output("policyId")]
        public Output<string> PolicyId { get; private set; } = null!;

        /// <summary>
        /// The Policy Store ID of the policy store.
        /// </summary>
        [Output("policyStoreId")]
        public Output<string> PolicyStoreId { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:verifiedpermissions/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:verifiedpermissions/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The definition of the policy. See Definition below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("definition")]
        public Input<Inputs.PolicyDefinitionArgs>? Definition { get; set; }

        /// <summary>
        /// The Policy Store ID of the policy store.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public Input<string> PolicyStoreId { get; set; } = null!;

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// The definition of the policy. See Definition below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("definition")]
        public Input<Inputs.PolicyDefinitionGetArgs>? Definition { get; set; }

        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        /// <summary>
        /// The Policy Store ID of the policy store.
        /// </summary>
        [Input("policyStoreId")]
        public Input<string>? PolicyStoreId { get; set; }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
