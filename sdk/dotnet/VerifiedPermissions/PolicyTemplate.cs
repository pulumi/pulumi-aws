// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VerifiedPermissions
{
    /// <summary>
    /// Resource for managing an AWS Verified Permissions Policy Template.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.VerifiedPermissions.PolicyTemplate("example", new()
    ///     {
    ///         PolicyStoreId = exampleAwsVerifiedpermissionsPolicyStore.Id,
    ///         Statement = "permit (principal in ?principal, action in PhotoFlash::Action::\"FullPhotoAccess\", resource == ?resource) unless { resource.IsPrivate };",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Verified Permissions Policy Store using the `policy_store_id:policy_template_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:verifiedpermissions/policyTemplate:PolicyTemplate example policyStoreId:policyTemplateId
    /// ```
    /// </summary>
    [AwsResourceType("aws:verifiedpermissions/policyTemplate:PolicyTemplate")]
    public partial class PolicyTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date the Policy Store was created.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// Provides a description for the policy template.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the Policy Store.
        /// </summary>
        [Output("policyStoreId")]
        public Output<string> PolicyStoreId { get; private set; } = null!;

        /// <summary>
        /// The ID of the Policy Store.
        /// </summary>
        [Output("policyTemplateId")]
        public Output<string> PolicyTemplateId { get; private set; } = null!;

        /// <summary>
        /// Defines the content of the statement, written in Cedar policy language.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("statement")]
        public Output<string> Statement { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyTemplate(string name, PolicyTemplateArgs args, CustomResourceOptions? options = null)
            : base("aws:verifiedpermissions/policyTemplate:PolicyTemplate", name, args ?? new PolicyTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyTemplate(string name, Input<string> id, PolicyTemplateState? state = null, CustomResourceOptions? options = null)
            : base("aws:verifiedpermissions/policyTemplate:PolicyTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyTemplate Get(string name, Input<string> id, PolicyTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyTemplate(name, id, state, options);
        }
    }

    public sealed class PolicyTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Provides a description for the policy template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the Policy Store.
        /// </summary>
        [Input("policyStoreId", required: true)]
        public Input<string> PolicyStoreId { get; set; } = null!;

        /// <summary>
        /// Defines the content of the statement, written in Cedar policy language.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("statement", required: true)]
        public Input<string> Statement { get; set; } = null!;

        public PolicyTemplateArgs()
        {
        }
        public static new PolicyTemplateArgs Empty => new PolicyTemplateArgs();
    }

    public sealed class PolicyTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date the Policy Store was created.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// Provides a description for the policy template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the Policy Store.
        /// </summary>
        [Input("policyStoreId")]
        public Input<string>? PolicyStoreId { get; set; }

        /// <summary>
        /// The ID of the Policy Store.
        /// </summary>
        [Input("policyTemplateId")]
        public Input<string>? PolicyTemplateId { get; set; }

        /// <summary>
        /// Defines the content of the statement, written in Cedar policy language.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("statement")]
        public Input<string>? Statement { get; set; }

        public PolicyTemplateState()
        {
        }
        public static new PolicyTemplateState Empty => new PolicyTemplateState();
    }
}
