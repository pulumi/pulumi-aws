// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.VerifiedPermissions.Inputs
{

    public sealed class IdentitySourceConfigurationOpenIdConnectConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A descriptive string that you want to prefix to user entities from your OIDC identity provider.
        /// </summary>
        [Input("entityIdPrefix")]
        public Input<string>? EntityIdPrefix { get; set; }

        /// <summary>
        /// The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See Group Configuration below.
        /// </summary>
        [Input("groupConfiguration")]
        public Input<Inputs.IdentitySourceConfigurationOpenIdConnectConfigurationGroupConfigurationArgs>? GroupConfiguration { get; set; }

        /// <summary>
        /// The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
        /// </summary>
        [Input("issuer", required: true)]
        public Input<string> Issuer { get; set; } = null!;

        /// <summary>
        /// The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See Token Selection below.
        /// </summary>
        [Input("tokenSelection")]
        public Input<Inputs.IdentitySourceConfigurationOpenIdConnectConfigurationTokenSelectionArgs>? TokenSelection { get; set; }

        public IdentitySourceConfigurationOpenIdConnectConfigurationArgs()
        {
        }
        public static new IdentitySourceConfigurationOpenIdConnectConfigurationArgs Empty => new IdentitySourceConfigurationOpenIdConnectConfigurationArgs();
    }
}
