// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// Manages an AWS Bedrock AgentCore Memory Strategy. Memory strategies define how the agent processes and organizes information within a memory, such as semantic understanding, summarization, or custom processing logic.
    /// 
    /// **Important Limitations:**
    /// 
    /// - Each memory can have a maximum of 6 strategies total
    /// - Only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory
    /// - Multiple `CUSTOM` strategies are allowed (subject to the total limit of 6)
    /// 
    /// ## Example Usage
    /// 
    /// ### Semantic Strategy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var semantic = new Aws.Bedrock.AgentcoreMemoryStrategy("semantic", new()
    ///     {
    ///         Name = "semantic-strategy",
    ///         MemoryId = example.Id,
    ///         Type = "SEMANTIC",
    ///         Description = "Semantic understanding strategy",
    ///         Namespaces = new[]
    ///         {
    ///             "default",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Summarization Strategy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var summary = new Aws.Bedrock.AgentcoreMemoryStrategy("summary", new()
    ///     {
    ///         Name = "summary-strategy",
    ///         MemoryId = example.Id,
    ///         Type = "SUMMARIZATION",
    ///         Description = "Text summarization strategy",
    ///         Namespaces = new[]
    ///         {
    ///             "{sessionId}",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### User Preference Strategy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var userPref = new Aws.Bedrock.AgentcoreMemoryStrategy("user_pref", new()
    ///     {
    ///         Name = "user-preference-strategy",
    ///         MemoryId = example.Id,
    ///         Type = "USER_PREFERENCE",
    ///         Description = "User preference tracking strategy",
    ///         Namespaces = new[]
    ///         {
    ///             "preferences",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom Strategy with Semantic Override
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customSemantic = new Aws.Bedrock.AgentcoreMemoryStrategy("custom_semantic", new()
    ///     {
    ///         Name = "custom-semantic-strategy",
    ///         MemoryId = example.Id,
    ///         MemoryExecutionRoleArn = example.MemoryExecutionRoleArn,
    ///         Type = "CUSTOM",
    ///         Description = "Custom semantic processing strategy",
    ///         Namespaces = new[]
    ///         {
    ///             "{sessionId}",
    ///         },
    ///         Configuration = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationArgs
    ///         {
    ///             Type = "SEMANTIC_OVERRIDE",
    ///             Consolidation = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationConsolidationArgs
    ///             {
    ///                 AppendToPrompt = "Focus on extracting key semantic relationships and concepts",
    ///                 ModelId = "anthropic.claude-3-sonnet-20240229-v1:0",
    ///             },
    ///             Extraction = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationExtractionArgs
    ///             {
    ///                 AppendToPrompt = "Extract and categorize semantic information",
    ///                 ModelId = "anthropic.claude-3-haiku-20240307-v1:0",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom Strategy with Summary Override
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customSummary = new Aws.Bedrock.AgentcoreMemoryStrategy("custom_summary", new()
    ///     {
    ///         Name = "custom-summary-strategy",
    ///         MemoryId = example.Id,
    ///         Type = "CUSTOM",
    ///         Description = "Custom summarization strategy",
    ///         Namespaces = new[]
    ///         {
    ///             "summaries",
    ///         },
    ///         Configuration = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationArgs
    ///         {
    ///             Type = "SUMMARY_OVERRIDE",
    ///             Consolidation = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationConsolidationArgs
    ///             {
    ///                 AppendToPrompt = "Create concise summaries while preserving key details",
    ///                 ModelId = "anthropic.claude-3-sonnet-20240229-v1:0",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom Strategy with User Preference Override
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var customUserPref = new Aws.Bedrock.AgentcoreMemoryStrategy("custom_user_pref", new()
    ///     {
    ///         Name = "custom-user-preference-strategy",
    ///         MemoryId = example.Id,
    ///         Type = "CUSTOM",
    ///         Description = "Custom user preference tracking strategy",
    ///         Namespaces = new[]
    ///         {
    ///             "user_prefs",
    ///         },
    ///         Configuration = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationArgs
    ///         {
    ///             Type = "USER_PREFERENCE_OVERRIDE",
    ///             Consolidation = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationConsolidationArgs
    ///             {
    ///                 AppendToPrompt = "Consolidate user preferences and behavioral patterns",
    ///                 ModelId = "anthropic.claude-3-sonnet-20240229-v1:0",
    ///             },
    ///             Extraction = new Aws.Bedrock.Inputs.AgentcoreMemoryStrategyConfigurationExtractionArgs
    ///             {
    ///                 AppendToPrompt = "Extract user preferences and interaction patterns",
    ///                 ModelId = "anthropic.claude-3-haiku-20240307-v1:0",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Bedrock AgentCore Memory Strategy using the `memory_id,strategy_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy example MEMORY1234567890,STRATEGY0987654321
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy")]
    public partial class AgentcoreMemoryStrategy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Custom configuration block. Required when `Type` is `CUSTOM`, must be omitted for other types. See `Configuration` below.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.AgentcoreMemoryStrategyConfiguration?> Configuration { get; private set; } = null!;

        /// <summary>
        /// Description of the memory strategy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("memoryExecutionRoleArn")]
        public Output<string?> MemoryExecutionRoleArn { get; private set; } = null!;

        /// <summary>
        /// ID of the memory to associate with this strategy. Changing this forces a new resource.
        /// </summary>
        [Output("memoryId")]
        public Output<string> MemoryId { get; private set; } = null!;

        [Output("memoryStrategyId")]
        public Output<string> MemoryStrategyId { get; private set; } = null!;

        /// <summary>
        /// Name of the memory strategy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("namespaces")]
        public Output<ImmutableArray<string>> Namespaces { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.AgentcoreMemoryStrategyTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AgentcoreMemoryStrategy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentcoreMemoryStrategy(string name, AgentcoreMemoryStrategyArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy", name, args ?? new AgentcoreMemoryStrategyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentcoreMemoryStrategy(string name, Input<string> id, AgentcoreMemoryStrategyState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreMemoryStrategy:AgentcoreMemoryStrategy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentcoreMemoryStrategy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentcoreMemoryStrategy Get(string name, Input<string> id, AgentcoreMemoryStrategyState? state = null, CustomResourceOptions? options = null)
        {
            return new AgentcoreMemoryStrategy(name, id, state, options);
        }
    }

    public sealed class AgentcoreMemoryStrategyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom configuration block. Required when `Type` is `CUSTOM`, must be omitted for other types. See `Configuration` below.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.AgentcoreMemoryStrategyConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// Description of the memory strategy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("memoryExecutionRoleArn")]
        public Input<string>? MemoryExecutionRoleArn { get; set; }

        /// <summary>
        /// ID of the memory to associate with this strategy. Changing this forces a new resource.
        /// </summary>
        [Input("memoryId", required: true)]
        public Input<string> MemoryId { get; set; } = null!;

        /// <summary>
        /// Name of the memory strategy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces", required: true)]
        private InputList<string>? _namespaces;

        /// <summary>
        /// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AgentcoreMemoryStrategyTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AgentcoreMemoryStrategyArgs()
        {
        }
        public static new AgentcoreMemoryStrategyArgs Empty => new AgentcoreMemoryStrategyArgs();
    }

    public sealed class AgentcoreMemoryStrategyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Custom configuration block. Required when `Type` is `CUSTOM`, must be omitted for other types. See `Configuration` below.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.AgentcoreMemoryStrategyConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// Description of the memory strategy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("memoryExecutionRoleArn")]
        public Input<string>? MemoryExecutionRoleArn { get; set; }

        /// <summary>
        /// ID of the memory to associate with this strategy. Changing this forces a new resource.
        /// </summary>
        [Input("memoryId")]
        public Input<string>? MemoryId { get; set; }

        [Input("memoryStrategyId")]
        public Input<string>? MemoryStrategyId { get; set; }

        /// <summary>
        /// Name of the memory strategy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespaces")]
        private InputList<string>? _namespaces;

        /// <summary>
        /// Set of namespace identifiers where this strategy applies. Namespaces help organize and scope memory content.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<string> Namespaces
        {
            get => _namespaces ?? (_namespaces = new InputList<string>());
            set => _namespaces = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AgentcoreMemoryStrategyTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Type of memory strategy. Valid values: `SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`, `CUSTOM`. Changing this forces a new resource. Note that only one strategy of each built-in type (`SEMANTIC`, `SUMMARIZATION`, `USER_PREFERENCE`) can exist per memory.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public AgentcoreMemoryStrategyState()
        {
        }
        public static new AgentcoreMemoryStrategyState Empty => new AgentcoreMemoryStrategyState();
    }
}
