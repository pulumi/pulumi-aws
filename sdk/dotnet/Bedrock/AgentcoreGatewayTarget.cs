// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// Manages an AWS Bedrock AgentCore Gateway Target. Gateway targets define the endpoints and configurations that a gateway can invoke, such as Lambda functions or APIs, allowing agents to interact with external services through the Model Context Protocol (MCP).
    /// 
    /// ## Example Usage
    /// 
    /// ### Lambda Target with Gateway IAM Role
    /// 
    /// ### Target with API Key Authentication
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var apiKeyExample = new Aws.Bedrock.AgentcoreGatewayTarget("api_key_example", new()
    ///     {
    ///         Name = "api-target",
    ///         GatewayIdentifier = exampleAwsBedrockagentcoreGateway.GatewayId,
    ///         Description = "External API target with API key authentication",
    ///         CredentialProviderConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationArgs
    ///         {
    ///             ApiKey = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationApiKeyArgs
    ///             {
    ///                 ProviderArn = "arn:aws:iam::123456789012:oidc-provider/example.com",
    ///                 CredentialLocation = "HEADER",
    ///                 CredentialParameterName = "X-API-Key",
    ///                 CredentialPrefix = "Bearer",
    ///             },
    ///         },
    ///         TargetConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationArgs
    ///         {
    ///             Mcp = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpArgs
    ///             {
    ///                 Lambda = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaArgs
    ///                 {
    ///                     LambdaArn = example.Arn,
    ///                     ToolSchema = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaArgs
    ///                     {
    ///                         InlinePayloads = new[]
    ///                         {
    ///                             new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadArgs
    ///                             {
    ///                                 Name = "api_tool",
    ///                                 Description = "External API integration tool",
    ///                                 InputSchema = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaArgs
    ///                                 {
    ///                                     Type = "string",
    ///                                     Description = "Simple string input for API calls",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Target with OAuth Authentication
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oauthExample = new Aws.Bedrock.AgentcoreGatewayTarget("oauth_example", new()
    ///     {
    ///         Name = "oauth-target",
    ///         GatewayIdentifier = exampleAwsBedrockagentcoreGateway.GatewayId,
    ///         CredentialProviderConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationArgs
    ///         {
    ///             Oauth = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationOauthArgs
    ///             {
    ///                 ProviderArn = "arn:aws:iam::123456789012:oidc-provider/oauth.example.com",
    ///                 Scopes = new[]
    ///                 {
    ///                     "read",
    ///                     "write",
    ///                 },
    ///                 CustomParameters = 
    ///                 {
    ///                     { "client_type", "confidential" },
    ///                     { "grant_type", "authorization_code" },
    ///                 },
    ///             },
    ///         },
    ///         TargetConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationArgs
    ///         {
    ///             Mcp = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpArgs
    ///             {
    ///                 Lambda = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaArgs
    ///                 {
    ///                     LambdaArn = example.Arn,
    ///                     ToolSchema = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaArgs
    ///                     {
    ///                         InlinePayloads = new[]
    ///                         {
    ///                             new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadArgs
    ///                             {
    ///                                 Name = "oauth_tool",
    ///                                 Description = "OAuth-authenticated service",
    ///                                 InputSchema = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaArgs
    ///                                 {
    ///                                     Type = "array",
    ///                                     Items = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsArgs
    ///                                     {
    ///                                         Type = "object",
    ///                                         Properties = new[]
    ///                                         {
    ///                                             new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs
    ///                                             {
    ///                                                 Name = "id",
    ///                                                 Type = "string",
    ///                                                 Required = true,
    ///                                             },
    ///                                             new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaItemsPropertyArgs
    ///                                             {
    ///                                                 Name = "value",
    ///                                                 Type = "number",
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Complex Schema with JSON Serialization
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var complexSchema = new Aws.Bedrock.AgentcoreGatewayTarget("complex_schema", new()
    ///     {
    ///         Name = "complex-target",
    ///         GatewayIdentifier = exampleAwsBedrockagentcoreGateway.GatewayId,
    ///         CredentialProviderConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationArgs
    ///         {
    ///             GatewayIamRole = null,
    ///         },
    ///         TargetConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationArgs
    ///         {
    ///             Mcp = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpArgs
    ///             {
    ///                 Lambda = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaArgs
    ///                 {
    ///                     LambdaArn = example.Arn,
    ///                     ToolSchema = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaArgs
    ///                     {
    ///                         InlinePayloads = new[]
    ///                         {
    ///                             new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadArgs
    ///                             {
    ///                                 Name = "complex_tool",
    ///                                 Description = "Tool with complex nested schema",
    ///                                 InputSchema = new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaArgs
    ///                                 {
    ///                                     Type = "object",
    ///                                     Properties = new[]
    ///                                     {
    ///                                         new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaPropertyArgs
    ///                                         {
    ///                                             Name = "profile",
    ///                                             Type = "object",
    ///                                             Properties = new[]
    ///                                             {
    ///                                                 new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaPropertyPropertyArgs
    ///                                                 {
    ///                                                     Name = "nested_tags",
    ///                                                     Type = "array",
    ///                                                     ItemsJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                                                     {
    ///                                                         ["type"] = "string",
    ///                                                     }),
    ///                                                 },
    ///                                                 new Aws.Bedrock.Inputs.AgentcoreGatewayTargetTargetConfigurationMcpLambdaToolSchemaInlinePayloadInputSchemaPropertyPropertyArgs
    ///                                                 {
    ///                                                     Name = "metadata",
    ///                                                     Type = "object",
    ///                                                     PropertiesJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                                                     {
    ///                                                         ["properties"] = new Dictionary&lt;string, object?&gt;
    ///                                                         {
    ///                                                             ["created_at"] = new Dictionary&lt;string, object?&gt;
    ///                                                             {
    ///                                                                 ["type"] = "string",
    ///                                                             },
    ///                                                             ["version"] = new Dictionary&lt;string, object?&gt;
    ///                                                             {
    ///                                                                 ["type"] = "number",
    ///                                                             },
    ///                                                         },
    ///                                                         ["required"] = new[]
    ///                                                         {
    ///                                                             "created_at",
    ///                                                         },
    ///                                                     }),
    ///                                                 },
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Bedrock AgentCore Gateway Target using the gateway identifier and target ID separated by a comma. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/agentcoreGatewayTarget:AgentcoreGatewayTarget example GATEWAY1234567890,TARGET0987654321
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/agentcoreGatewayTarget:AgentcoreGatewayTarget")]
    public partial class AgentcoreGatewayTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for authenticating requests to the target. See `CredentialProviderConfiguration` below.
        /// </summary>
        [Output("credentialProviderConfiguration")]
        public Output<Outputs.AgentcoreGatewayTargetCredentialProviderConfiguration?> CredentialProviderConfiguration { get; private set; } = null!;

        /// <summary>
        /// Description of the gateway target.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Identifier of the gateway that this target belongs to.
        /// </summary>
        [Output("gatewayIdentifier")]
        public Output<string> GatewayIdentifier { get; private set; } = null!;

        /// <summary>
        /// Name of the gateway target.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// AWS region where the resource will be created. If not provided, the region from the provider configuration will be used.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Configuration for the target endpoint. See `TargetConfiguration` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("targetConfiguration")]
        public Output<Outputs.AgentcoreGatewayTargetTargetConfiguration?> TargetConfiguration { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the gateway target.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.AgentcoreGatewayTargetTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a AgentcoreGatewayTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentcoreGatewayTarget(string name, AgentcoreGatewayTargetArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreGatewayTarget:AgentcoreGatewayTarget", name, args ?? new AgentcoreGatewayTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentcoreGatewayTarget(string name, Input<string> id, AgentcoreGatewayTargetState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreGatewayTarget:AgentcoreGatewayTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentcoreGatewayTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentcoreGatewayTarget Get(string name, Input<string> id, AgentcoreGatewayTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new AgentcoreGatewayTarget(name, id, state, options);
        }
    }

    public sealed class AgentcoreGatewayTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for authenticating requests to the target. See `CredentialProviderConfiguration` below.
        /// </summary>
        [Input("credentialProviderConfiguration")]
        public Input<Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationArgs>? CredentialProviderConfiguration { get; set; }

        /// <summary>
        /// Description of the gateway target.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of the gateway that this target belongs to.
        /// </summary>
        [Input("gatewayIdentifier", required: true)]
        public Input<string> GatewayIdentifier { get; set; } = null!;

        /// <summary>
        /// Name of the gateway target.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// AWS region where the resource will be created. If not provided, the region from the provider configuration will be used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Configuration for the target endpoint. See `TargetConfiguration` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetConfiguration")]
        public Input<Inputs.AgentcoreGatewayTargetTargetConfigurationArgs>? TargetConfiguration { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AgentcoreGatewayTargetTimeoutsArgs>? Timeouts { get; set; }

        public AgentcoreGatewayTargetArgs()
        {
        }
        public static new AgentcoreGatewayTargetArgs Empty => new AgentcoreGatewayTargetArgs();
    }

    public sealed class AgentcoreGatewayTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for authenticating requests to the target. See `CredentialProviderConfiguration` below.
        /// </summary>
        [Input("credentialProviderConfiguration")]
        public Input<Inputs.AgentcoreGatewayTargetCredentialProviderConfigurationGetArgs>? CredentialProviderConfiguration { get; set; }

        /// <summary>
        /// Description of the gateway target.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of the gateway that this target belongs to.
        /// </summary>
        [Input("gatewayIdentifier")]
        public Input<string>? GatewayIdentifier { get; set; }

        /// <summary>
        /// Name of the gateway target.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// AWS region where the resource will be created. If not provided, the region from the provider configuration will be used.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Configuration for the target endpoint. See `TargetConfiguration` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetConfiguration")]
        public Input<Inputs.AgentcoreGatewayTargetTargetConfigurationGetArgs>? TargetConfiguration { get; set; }

        /// <summary>
        /// Unique identifier of the gateway target.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AgentcoreGatewayTargetTimeoutsGetArgs>? Timeouts { get; set; }

        public AgentcoreGatewayTargetState()
        {
        }
        public static new AgentcoreGatewayTargetState Empty => new AgentcoreGatewayTargetState();
    }
}
