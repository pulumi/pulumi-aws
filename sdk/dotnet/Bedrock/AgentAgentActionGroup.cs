// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// Resource for managing an AWS Agents for Amazon Bedrock Agent Action Group.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Bedrock.AgentAgentActionGroup("example", new()
    ///     {
    ///         ActionGroupName = "example",
    ///         AgentId = "GGRRAED6JP",
    ///         AgentVersion = "DRAFT",
    ///         SkipResourceInUseCheck = true,
    ///         ActionGroupExecutor = new Aws.Bedrock.Inputs.AgentAgentActionGroupActionGroupExecutorArgs
    ///         {
    ///             Lambda = "arn:aws:lambda:us-west-2:123456789012:function:example-function",
    ///         },
    ///         ApiSchema = new Aws.Bedrock.Inputs.AgentAgentActionGroupApiSchemaArgs
    ///         {
    ///             Payload = Std.File.Invoke(new()
    ///             {
    ///                 Input = "path/to/schema.yaml",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### API Schema in S3 Bucket
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Bedrock.AgentAgentActionGroup("example", new()
    ///     {
    ///         ActionGroupName = "example",
    ///         AgentId = "GGRRAED6JP",
    ///         AgentVersion = "DRAFT",
    ///         SkipResourceInUseCheck = true,
    ///         ActionGroupExecutor = new Aws.Bedrock.Inputs.AgentAgentActionGroupActionGroupExecutorArgs
    ///         {
    ///             Lambda = "arn:aws:lambda:us-west-2:123456789012:function:example-function",
    ///         },
    ///         ApiSchema = new Aws.Bedrock.Inputs.AgentAgentActionGroupApiSchemaArgs
    ///         {
    ///             S3 = new Aws.Bedrock.Inputs.AgentAgentActionGroupApiSchemaS3Args
    ///             {
    ///                 S3BucketName = "example-bucket",
    ///                 S3ObjectKey = "path/to/schema.json",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Function Schema (Simplified Schema)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Bedrock.AgentAgentActionGroup("example", new()
    ///     {
    ///         ActionGroupName = "example",
    ///         AgentId = "GGRRAED6JP",
    ///         AgentVersion = "DRAFT",
    ///         SkipResourceInUseCheck = true,
    ///         ActionGroupExecutor = new Aws.Bedrock.Inputs.AgentAgentActionGroupActionGroupExecutorArgs
    ///         {
    ///             Lambda = "arn:aws:lambda:us-west-2:123456789012:function:example-function",
    ///         },
    ///         FunctionSchema = new Aws.Bedrock.Inputs.AgentAgentActionGroupFunctionSchemaArgs
    ///         {
    ///             MemberFunctions = new Aws.Bedrock.Inputs.AgentAgentActionGroupFunctionSchemaMemberFunctionsArgs
    ///             {
    ///                 Functions = new[]
    ///                 {
    ///                     new Aws.Bedrock.Inputs.AgentAgentActionGroupFunctionSchemaMemberFunctionsFunctionArgs
    ///                     {
    ///                         Name = "example-function",
    ///                         Description = "Example function",
    ///                         Parameters = new[]
    ///                         {
    ///                             new Aws.Bedrock.Inputs.AgentAgentActionGroupFunctionSchemaMemberFunctionsFunctionParameterArgs
    ///                             {
    ///                                 MapBlockKey = "param1",
    ///                                 Type = "string",
    ///                                 Description = "The first parameter",
    ///                                 Required = true,
    ///                             },
    ///                             new Aws.Bedrock.Inputs.AgentAgentActionGroupFunctionSchemaMemberFunctionsFunctionParameterArgs
    ///                             {
    ///                                 MapBlockKey = "param2",
    ///                                 Type = "integer",
    ///                                 Description = "The second parameter",
    ///                                 Required = false,
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Return of Control
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Bedrock.AgentAgentActionGroup("example", new()
    ///     {
    ///         ActionGroupName = "example",
    ///         AgentId = "GGRRAED6JP",
    ///         AgentVersion = "DRAFT",
    ///         SkipResourceInUseCheck = true,
    ///         ActionGroupExecutor = new Aws.Bedrock.Inputs.AgentAgentActionGroupActionGroupExecutorArgs
    ///         {
    ///             CustomControl = "RETURN_CONTROL",
    ///         },
    ///         ApiSchema = new Aws.Bedrock.Inputs.AgentAgentActionGroupApiSchemaArgs
    ///         {
    ///             Payload = Std.File.Invoke(new()
    ///             {
    ///                 Input = "path/to/schema.yaml",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Agents for Amazon Bedrock Agent Action Group the action group ID, the agent ID, and the agent version separated by `,`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup example MMAUDBZTH4,GGRRAED6JP,DRAFT
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup")]
    public partial class AgentAgentActionGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Lambda function containing the business logic that is carried out upon invoking the action or custom control method for handling the information elicited from the user. See `action_group_executor` Block for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("actionGroupExecutor")]
        public Output<Outputs.AgentAgentActionGroupActionGroupExecutor?> ActionGroupExecutor { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the action group.
        /// </summary>
        [Output("actionGroupId")]
        public Output<string> ActionGroupId { get; private set; } = null!;

        /// <summary>
        /// Name of the action group.
        /// </summary>
        [Output("actionGroupName")]
        public Output<string> ActionGroupName { get; private set; } = null!;

        /// <summary>
        /// Whether the action group is available for the agent to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) request. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Output("actionGroupState")]
        public Output<string> ActionGroupState { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the agent for which to create the action group.
        /// </summary>
        [Output("agentId")]
        public Output<string> AgentId { get; private set; } = null!;

        /// <summary>
        /// Version of the agent for which to create the action group. Valid values: `DRAFT`.
        /// </summary>
        [Output("agentVersion")]
        public Output<string> AgentVersion { get; private set; } = null!;

        /// <summary>
        /// Either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html). See `api_schema` Block for details.
        /// </summary>
        [Output("apiSchema")]
        public Output<Outputs.AgentAgentActionGroupApiSchema?> ApiSchema { get; private set; } = null!;

        /// <summary>
        /// Description of the action group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Describes the function schema for the action group.
        /// Each function represents an action in an action group.
        /// See `function_schema` Block for details.
        /// </summary>
        [Output("functionSchema")]
        public Output<Outputs.AgentAgentActionGroupFunctionSchema?> FunctionSchema { get; private set; } = null!;

        /// <summary>
        /// To allow your agent to request the user for additional information when trying to complete a task, set this argument to `AMAZON.UserInput`. You must leave the `description`, `api_schema`, and `action_group_executor` arguments blank for this action group. Valid values: `AMAZON.UserInput`.
        /// </summary>
        [Output("parentActionGroupSignature")]
        public Output<string?> ParentActionGroupSignature { get; private set; } = null!;

        /// <summary>
        /// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
        /// </summary>
        [Output("prepareAgent")]
        public Output<bool> PrepareAgent { get; private set; } = null!;

        /// <summary>
        /// Whether the in-use check is skipped when deleting the action group.
        /// </summary>
        [Output("skipResourceInUseCheck")]
        public Output<bool> SkipResourceInUseCheck { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.AgentAgentActionGroupTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a AgentAgentActionGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentAgentActionGroup(string name, AgentAgentActionGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup", name, args ?? new AgentAgentActionGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentAgentActionGroup(string name, Input<string> id, AgentAgentActionGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentAgentActionGroup:AgentAgentActionGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentAgentActionGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentAgentActionGroup Get(string name, Input<string> id, AgentAgentActionGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new AgentAgentActionGroup(name, id, state, options);
        }
    }

    public sealed class AgentAgentActionGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Lambda function containing the business logic that is carried out upon invoking the action or custom control method for handling the information elicited from the user. See `action_group_executor` Block for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("actionGroupExecutor")]
        public Input<Inputs.AgentAgentActionGroupActionGroupExecutorArgs>? ActionGroupExecutor { get; set; }

        /// <summary>
        /// Name of the action group.
        /// </summary>
        [Input("actionGroupName", required: true)]
        public Input<string> ActionGroupName { get; set; } = null!;

        /// <summary>
        /// Whether the action group is available for the agent to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) request. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("actionGroupState")]
        public Input<string>? ActionGroupState { get; set; }

        /// <summary>
        /// The unique identifier of the agent for which to create the action group.
        /// </summary>
        [Input("agentId", required: true)]
        public Input<string> AgentId { get; set; } = null!;

        /// <summary>
        /// Version of the agent for which to create the action group. Valid values: `DRAFT`.
        /// </summary>
        [Input("agentVersion", required: true)]
        public Input<string> AgentVersion { get; set; } = null!;

        /// <summary>
        /// Either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html). See `api_schema` Block for details.
        /// </summary>
        [Input("apiSchema")]
        public Input<Inputs.AgentAgentActionGroupApiSchemaArgs>? ApiSchema { get; set; }

        /// <summary>
        /// Description of the action group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Describes the function schema for the action group.
        /// Each function represents an action in an action group.
        /// See `function_schema` Block for details.
        /// </summary>
        [Input("functionSchema")]
        public Input<Inputs.AgentAgentActionGroupFunctionSchemaArgs>? FunctionSchema { get; set; }

        /// <summary>
        /// To allow your agent to request the user for additional information when trying to complete a task, set this argument to `AMAZON.UserInput`. You must leave the `description`, `api_schema`, and `action_group_executor` arguments blank for this action group. Valid values: `AMAZON.UserInput`.
        /// </summary>
        [Input("parentActionGroupSignature")]
        public Input<string>? ParentActionGroupSignature { get; set; }

        /// <summary>
        /// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
        /// </summary>
        [Input("prepareAgent")]
        public Input<bool>? PrepareAgent { get; set; }

        /// <summary>
        /// Whether the in-use check is skipped when deleting the action group.
        /// </summary>
        [Input("skipResourceInUseCheck")]
        public Input<bool>? SkipResourceInUseCheck { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AgentAgentActionGroupTimeoutsArgs>? Timeouts { get; set; }

        public AgentAgentActionGroupArgs()
        {
        }
        public static new AgentAgentActionGroupArgs Empty => new AgentAgentActionGroupArgs();
    }

    public sealed class AgentAgentActionGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Lambda function containing the business logic that is carried out upon invoking the action or custom control method for handling the information elicited from the user. See `action_group_executor` Block for details.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("actionGroupExecutor")]
        public Input<Inputs.AgentAgentActionGroupActionGroupExecutorGetArgs>? ActionGroupExecutor { get; set; }

        /// <summary>
        /// Unique identifier of the action group.
        /// </summary>
        [Input("actionGroupId")]
        public Input<string>? ActionGroupId { get; set; }

        /// <summary>
        /// Name of the action group.
        /// </summary>
        [Input("actionGroupName")]
        public Input<string>? ActionGroupName { get; set; }

        /// <summary>
        /// Whether the action group is available for the agent to invoke or not when sending an [InvokeAgent](https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html) request. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("actionGroupState")]
        public Input<string>? ActionGroupState { get; set; }

        /// <summary>
        /// The unique identifier of the agent for which to create the action group.
        /// </summary>
        [Input("agentId")]
        public Input<string>? AgentId { get; set; }

        /// <summary>
        /// Version of the agent for which to create the action group. Valid values: `DRAFT`.
        /// </summary>
        [Input("agentVersion")]
        public Input<string>? AgentVersion { get; set; }

        /// <summary>
        /// Either details about the S3 object containing the OpenAPI schema for the action group or the JSON or YAML-formatted payload defining the schema. For more information, see [Action group OpenAPI schemas](https://docs.aws.amazon.com/bedrock/latest/userguide/agents-api-schema.html). See `api_schema` Block for details.
        /// </summary>
        [Input("apiSchema")]
        public Input<Inputs.AgentAgentActionGroupApiSchemaGetArgs>? ApiSchema { get; set; }

        /// <summary>
        /// Description of the action group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Describes the function schema for the action group.
        /// Each function represents an action in an action group.
        /// See `function_schema` Block for details.
        /// </summary>
        [Input("functionSchema")]
        public Input<Inputs.AgentAgentActionGroupFunctionSchemaGetArgs>? FunctionSchema { get; set; }

        /// <summary>
        /// To allow your agent to request the user for additional information when trying to complete a task, set this argument to `AMAZON.UserInput`. You must leave the `description`, `api_schema`, and `action_group_executor` arguments blank for this action group. Valid values: `AMAZON.UserInput`.
        /// </summary>
        [Input("parentActionGroupSignature")]
        public Input<string>? ParentActionGroupSignature { get; set; }

        /// <summary>
        /// Whether or not to prepare the agent after creation or modification. Defaults to `true`.
        /// </summary>
        [Input("prepareAgent")]
        public Input<bool>? PrepareAgent { get; set; }

        /// <summary>
        /// Whether the in-use check is skipped when deleting the action group.
        /// </summary>
        [Input("skipResourceInUseCheck")]
        public Input<bool>? SkipResourceInUseCheck { get; set; }

        [Input("timeouts")]
        public Input<Inputs.AgentAgentActionGroupTimeoutsGetArgs>? Timeouts { get; set; }

        public AgentAgentActionGroupState()
        {
        }
        public static new AgentAgentActionGroupState Empty => new AgentAgentActionGroupState();
    }
}
