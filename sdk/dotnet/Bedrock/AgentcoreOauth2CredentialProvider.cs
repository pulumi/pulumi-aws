// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### GitHub OAuth Provider
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var github = new Aws.Bedrock.AgentcoreOauth2CredentialProvider("github", new()
    ///     {
    ///         Name = "github-oauth-provider",
    ///         CredentialProviderVendor = "GithubOauth2",
    ///         Oauth2ProviderConfig = new Aws.Bedrock.Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs
    ///         {
    ///             GithubOauth2ProviderConfig = new Aws.Bedrock.Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigGithubOauth2ProviderConfigArgs
    ///             {
    ///                 ClientId = "your-github-client-id",
    ///                 ClientSecret = "your-github-client-secret",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom OAuth Provider with Discovery URL
    /// 
    /// ### Custom OAuth Provider with Authorization Server Metadata
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keycloak = new Aws.Bedrock.AgentcoreOauth2CredentialProvider("keycloak", new()
    ///     {
    ///         Name = "keycloak-oauth-provider",
    ///         CredentialProviderVendor = "CustomOauth2",
    ///         Oauth2ProviderConfig = new Aws.Bedrock.Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs
    ///         {
    ///             CustomOauth2ProviderConfig = new Aws.Bedrock.Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigArgs
    ///             {
    ///                 ClientIdWo = "keycloak-client-id",
    ///                 ClientSecretWo = "keycloak-client-secret",
    ///                 ClientCredentialsWoVersion = 1,
    ///                 OauthDiscovery = new Aws.Bedrock.Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigOauthDiscoveryArgs
    ///                 {
    ///                     AuthorizationServerMetadata = new Aws.Bedrock.Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigCustomOauth2ProviderConfigOauthDiscoveryAuthorizationServerMetadataArgs
    ///                     {
    ///                         Issuer = "https://auth.company.com/realms/production",
    ///                         AuthorizationEndpoint = "https://auth.company.com/realms/production/protocol/openid-connect/auth",
    ///                         TokenEndpoint = "https://auth.company.com/realms/production/protocol/openid-connect/token",
    ///                         ResponseTypes = new[]
    ///                         {
    ///                             "code",
    ///                             "id_token",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Bedrock AgentCore OAuth2 Credential Provider using the provider name. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider example oauth2-provider-name
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider")]
    public partial class AgentcoreOauth2CredentialProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the AWS Secrets Manager secret containing the client secret.
        /// </summary>
        [Output("clientSecretArns")]
        public Output<ImmutableArray<Outputs.AgentcoreOauth2CredentialProviderClientSecretArn>> ClientSecretArns { get; private set; } = null!;

        /// <summary>
        /// ARN of the OAuth2 credential provider.
        /// </summary>
        [Output("credentialProviderArn")]
        public Output<string> CredentialProviderArn { get; private set; } = null!;

        /// <summary>
        /// Vendor of the OAuth2 credential provider. Valid values: `CustomOauth2`, `GithubOauth2`, `GoogleOauth2`, `Microsoft`, `SalesforceOauth2`, `SlackOauth2`.
        /// </summary>
        [Output("credentialProviderVendor")]
        public Output<string> CredentialProviderVendor { get; private set; } = null!;

        /// <summary>
        /// Name of the OAuth2 credential provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// OAuth2 provider configuration. Must contain exactly one provider type. See `Oauth2ProviderConfig` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("oauth2ProviderConfig")]
        public Output<Outputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfig?> Oauth2ProviderConfig { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a AgentcoreOauth2CredentialProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentcoreOauth2CredentialProvider(string name, AgentcoreOauth2CredentialProviderArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider", name, args ?? new AgentcoreOauth2CredentialProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentcoreOauth2CredentialProvider(string name, Input<string> id, AgentcoreOauth2CredentialProviderState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreOauth2CredentialProvider:AgentcoreOauth2CredentialProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentcoreOauth2CredentialProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentcoreOauth2CredentialProvider Get(string name, Input<string> id, AgentcoreOauth2CredentialProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new AgentcoreOauth2CredentialProvider(name, id, state, options);
        }
    }

    public sealed class AgentcoreOauth2CredentialProviderArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Vendor of the OAuth2 credential provider. Valid values: `CustomOauth2`, `GithubOauth2`, `GoogleOauth2`, `Microsoft`, `SalesforceOauth2`, `SlackOauth2`.
        /// </summary>
        [Input("credentialProviderVendor", required: true)]
        public Input<string> CredentialProviderVendor { get; set; } = null!;

        /// <summary>
        /// Name of the OAuth2 credential provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OAuth2 provider configuration. Must contain exactly one provider type. See `Oauth2ProviderConfig` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("oauth2ProviderConfig")]
        public Input<Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigArgs>? Oauth2ProviderConfig { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AgentcoreOauth2CredentialProviderArgs()
        {
        }
        public static new AgentcoreOauth2CredentialProviderArgs Empty => new AgentcoreOauth2CredentialProviderArgs();
    }

    public sealed class AgentcoreOauth2CredentialProviderState : global::Pulumi.ResourceArgs
    {
        [Input("clientSecretArns")]
        private InputList<Inputs.AgentcoreOauth2CredentialProviderClientSecretArnGetArgs>? _clientSecretArns;

        /// <summary>
        /// ARN of the AWS Secrets Manager secret containing the client secret.
        /// </summary>
        public InputList<Inputs.AgentcoreOauth2CredentialProviderClientSecretArnGetArgs> ClientSecretArns
        {
            get => _clientSecretArns ?? (_clientSecretArns = new InputList<Inputs.AgentcoreOauth2CredentialProviderClientSecretArnGetArgs>());
            set => _clientSecretArns = value;
        }

        /// <summary>
        /// ARN of the OAuth2 credential provider.
        /// </summary>
        [Input("credentialProviderArn")]
        public Input<string>? CredentialProviderArn { get; set; }

        /// <summary>
        /// Vendor of the OAuth2 credential provider. Valid values: `CustomOauth2`, `GithubOauth2`, `GoogleOauth2`, `Microsoft`, `SalesforceOauth2`, `SlackOauth2`.
        /// </summary>
        [Input("credentialProviderVendor")]
        public Input<string>? CredentialProviderVendor { get; set; }

        /// <summary>
        /// Name of the OAuth2 credential provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// OAuth2 provider configuration. Must contain exactly one provider type. See `Oauth2ProviderConfig` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("oauth2ProviderConfig")]
        public Input<Inputs.AgentcoreOauth2CredentialProviderOauth2ProviderConfigGetArgs>? Oauth2ProviderConfig { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public AgentcoreOauth2CredentialProviderState()
        {
        }
        public static new AgentcoreOauth2CredentialProviderState Empty => new AgentcoreOauth2CredentialProviderState();
    }
}
