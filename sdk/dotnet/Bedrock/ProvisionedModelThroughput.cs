// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// Manages [Provisioned Throughput](https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html) for an Amazon Bedrock model.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Bedrock.ProvisionedModelThroughput("example", new()
    ///     {
    ///         ProvisionedModelName = "example-model",
    ///         ModelArn = "arn:aws:bedrock:us-east-1::foundation-model/anthropic.claude-v2",
    ///         CommitmentDuration = "SixMonths",
    ///         ModelUnits = 1,
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Provisioned Throughput using the `provisioned_model_arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput example arn:aws:bedrock:us-west-2:123456789012:provisioned-model/1y5n57gh5y2e
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput")]
    public partial class ProvisionedModelThroughput : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
        /// </summary>
        [Output("commitmentDuration")]
        public Output<string?> CommitmentDuration { get; private set; } = null!;

        /// <summary>
        /// ARN of the model to associate with this Provisioned Throughput.
        /// </summary>
        [Output("modelArn")]
        public Output<string> ModelArn { get; private set; } = null!;

        /// <summary>
        /// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
        /// </summary>
        [Output("modelUnits")]
        public Output<int> ModelUnits { get; private set; } = null!;

        /// <summary>
        /// The ARN of the Provisioned Throughput.
        /// </summary>
        [Output("provisionedModelArn")]
        public Output<string> ProvisionedModelArn { get; private set; } = null!;

        /// <summary>
        /// Unique name for this Provisioned Throughput.
        /// </summary>
        [Output("provisionedModelName")]
        public Output<string> ProvisionedModelName { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ProvisionedModelThroughputTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a ProvisionedModelThroughput resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProvisionedModelThroughput(string name, ProvisionedModelThroughputArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput", name, args ?? new ProvisionedModelThroughputArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProvisionedModelThroughput(string name, Input<string> id, ProvisionedModelThroughputState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/provisionedModelThroughput:ProvisionedModelThroughput", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProvisionedModelThroughput resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProvisionedModelThroughput Get(string name, Input<string> id, ProvisionedModelThroughputState? state = null, CustomResourceOptions? options = null)
        {
            return new ProvisionedModelThroughput(name, id, state, options);
        }
    }

    public sealed class ProvisionedModelThroughputArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
        /// </summary>
        [Input("commitmentDuration")]
        public Input<string>? CommitmentDuration { get; set; }

        /// <summary>
        /// ARN of the model to associate with this Provisioned Throughput.
        /// </summary>
        [Input("modelArn", required: true)]
        public Input<string> ModelArn { get; set; } = null!;

        /// <summary>
        /// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
        /// </summary>
        [Input("modelUnits", required: true)]
        public Input<int> ModelUnits { get; set; } = null!;

        /// <summary>
        /// Unique name for this Provisioned Throughput.
        /// </summary>
        [Input("provisionedModelName", required: true)]
        public Input<string> ProvisionedModelName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ProvisionedModelThroughputTimeoutsArgs>? Timeouts { get; set; }

        public ProvisionedModelThroughputArgs()
        {
        }
        public static new ProvisionedModelThroughputArgs Empty => new ProvisionedModelThroughputArgs();
    }

    public sealed class ProvisionedModelThroughputState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Commitment duration requested for the Provisioned Throughput. For custom models, you can purchase on-demand Provisioned Throughput by omitting this argument. Valid values: `OneMonth`, `SixMonths`.
        /// </summary>
        [Input("commitmentDuration")]
        public Input<string>? CommitmentDuration { get; set; }

        /// <summary>
        /// ARN of the model to associate with this Provisioned Throughput.
        /// </summary>
        [Input("modelArn")]
        public Input<string>? ModelArn { get; set; }

        /// <summary>
        /// Number of model units to allocate. A model unit delivers a specific throughput level for the specified model.
        /// </summary>
        [Input("modelUnits")]
        public Input<int>? ModelUnits { get; set; }

        /// <summary>
        /// The ARN of the Provisioned Throughput.
        /// </summary>
        [Input("provisionedModelArn")]
        public Input<string>? ProvisionedModelArn { get; set; }

        /// <summary>
        /// Unique name for this Provisioned Throughput.
        /// </summary>
        [Input("provisionedModelName")]
        public Input<string>? ProvisionedModelName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ProvisionedModelThroughputTimeoutsGetArgs>? Timeouts { get; set; }

        public ProvisionedModelThroughputState()
        {
        }
        public static new ProvisionedModelThroughputState Empty => new ProvisionedModelThroughputState();
    }
}
