// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock.Inputs
{

    public sealed class AgentDataSourceVectorIngestionConfigurationChunkingConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Option for chunking your source data, either in fixed-sized chunks or as one chunk. Valid values: `FIXED_SIZE`, `HIERARCHICAL`, `SEMANTIC`, `NONE`.
        /// </summary>
        [Input("chunkingStrategy", required: true)]
        public Input<string> ChunkingStrategy { get; set; } = null!;

        /// <summary>
        /// Configurations for when you choose fixed-size chunking. Requires ChunkingStrategy as `FIXED_SIZE`. See `FixedSizeChunkingConfiguration` for details.
        /// </summary>
        [Input("fixedSizeChunkingConfiguration")]
        public Input<Inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationFixedSizeChunkingConfigurationGetArgs>? FixedSizeChunkingConfiguration { get; set; }

        /// <summary>
        /// Configurations for when you choose hierarchical chunking. Requires ChunkingStrategy as `HIERARCHICAL`. See `HierarchicalChunkingConfiguration` for details.
        /// </summary>
        [Input("hierarchicalChunkingConfiguration")]
        public Input<Inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationHierarchicalChunkingConfigurationGetArgs>? HierarchicalChunkingConfiguration { get; set; }

        /// <summary>
        /// Configurations for when you choose semantic chunking. Requires ChunkingStrategy as `SEMANTIC`. See `SemanticChunkingConfiguration` for details.
        /// </summary>
        [Input("semanticChunkingConfiguration")]
        public Input<Inputs.AgentDataSourceVectorIngestionConfigurationChunkingConfigurationSemanticChunkingConfigurationGetArgs>? SemanticChunkingConfiguration { get; set; }

        public AgentDataSourceVectorIngestionConfigurationChunkingConfigurationGetArgs()
        {
        }
        public static new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationGetArgs Empty => new AgentDataSourceVectorIngestionConfigurationChunkingConfigurationGetArgs();
    }
}
