// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// Resource for managing an AWS Agents for Amazon Bedrock Knowledge Base.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Bedrock.AgentKnowledgeBase("test", new()
    ///     {
    ///         Name = "example",
    ///         RoleArn = example.Arn,
    ///         KnowledgeBaseConfiguration = new Aws.Bedrock.Inputs.AgentKnowledgeBaseKnowledgeBaseConfigurationArgs
    ///         {
    ///             VectorKnowledgeBaseConfiguration = new Aws.Bedrock.Inputs.AgentKnowledgeBaseKnowledgeBaseConfigurationVectorKnowledgeBaseConfigurationArgs
    ///             {
    ///                 EmbeddingModelArn = "arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v1",
    ///             },
    ///             Type = "VECTOR",
    ///         },
    ///         StorageConfiguration = new Aws.Bedrock.Inputs.AgentKnowledgeBaseStorageConfigurationArgs
    ///         {
    ///             Type = "OPENSEARCH_SERVERLESS",
    ///             OpensearchServerlessConfiguration = new Aws.Bedrock.Inputs.AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationArgs
    ///             {
    ///                 CollectionArn = "arn:aws:aoss:us-west-2:1234567890:collection/142bezjddq707i5stcrf",
    ///                 VectorIndexName = "bedrock-knowledge-base-default-index",
    ///                 FieldMapping = new Aws.Bedrock.Inputs.AgentKnowledgeBaseStorageConfigurationOpensearchServerlessConfigurationFieldMappingArgs
    ///                 {
    ///                     VectorField = "bedrock-knowledge-base-default-vector",
    ///                     TextField = "AMAZON_BEDROCK_TEXT_CHUNK",
    ///                     MetadataField = "AMAZON_BEDROCK_METADATA",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Agents for Amazon Bedrock Knowledge Base using the `Q1IYMH6GQG`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/agentKnowledgeBase:AgentKnowledgeBase example Q1IYMH6GQG
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/agentKnowledgeBase:AgentKnowledgeBase")]
    public partial class AgentKnowledgeBase : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Knowledge Base. Do not begin the description with "An", "The", "Defines", "Indicates", or "Specifies," as these are verbose. In other words, "Indicates the amount of storage," can be rewritten as "Amount of storage," without losing any information.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A description of the knowledge base.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("failureReasons")]
        public Output<ImmutableArray<string>> FailureReasons { get; private set; } = null!;

        /// <summary>
        /// Contains details about the embeddings model used for the knowledge base.
        /// </summary>
        [Output("knowledgeBaseConfiguration")]
        public Output<Outputs.AgentKnowledgeBaseKnowledgeBaseConfiguration?> KnowledgeBaseConfiguration { get; private set; } = null!;

        /// <summary>
        /// A name for the knowledge base.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ARN of the IAM role with permissions to create the knowledge base.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// Contains details about the configuration of the vector database used for the knowledge base.
        /// </summary>
        [Output("storageConfiguration")]
        public Output<Outputs.AgentKnowledgeBaseStorageConfiguration?> StorageConfiguration { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.AgentKnowledgeBaseTimeouts?> Timeouts { get; private set; } = null!;

        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a AgentKnowledgeBase resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentKnowledgeBase(string name, AgentKnowledgeBaseArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentKnowledgeBase:AgentKnowledgeBase", name, args ?? new AgentKnowledgeBaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentKnowledgeBase(string name, Input<string> id, AgentKnowledgeBaseState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentKnowledgeBase:AgentKnowledgeBase", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentKnowledgeBase resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentKnowledgeBase Get(string name, Input<string> id, AgentKnowledgeBaseState? state = null, CustomResourceOptions? options = null)
        {
            return new AgentKnowledgeBase(name, id, state, options);
        }
    }

    public sealed class AgentKnowledgeBaseArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the knowledge base.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Contains details about the embeddings model used for the knowledge base.
        /// </summary>
        [Input("knowledgeBaseConfiguration")]
        public Input<Inputs.AgentKnowledgeBaseKnowledgeBaseConfigurationArgs>? KnowledgeBaseConfiguration { get; set; }

        /// <summary>
        /// A name for the knowledge base.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ARN of the IAM role with permissions to create the knowledge base.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// Contains details about the configuration of the vector database used for the knowledge base.
        /// </summary>
        [Input("storageConfiguration")]
        public Input<Inputs.AgentKnowledgeBaseStorageConfigurationArgs>? StorageConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.AgentKnowledgeBaseTimeoutsArgs>? Timeouts { get; set; }

        public AgentKnowledgeBaseArgs()
        {
        }
        public static new AgentKnowledgeBaseArgs Empty => new AgentKnowledgeBaseArgs();
    }

    public sealed class AgentKnowledgeBaseState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Knowledge Base. Do not begin the description with "An", "The", "Defines", "Indicates", or "Specifies," as these are verbose. In other words, "Indicates the amount of storage," can be rewritten as "Amount of storage," without losing any information.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// A description of the knowledge base.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("failureReasons")]
        private InputList<string>? _failureReasons;
        public InputList<string> FailureReasons
        {
            get => _failureReasons ?? (_failureReasons = new InputList<string>());
            set => _failureReasons = value;
        }

        /// <summary>
        /// Contains details about the embeddings model used for the knowledge base.
        /// </summary>
        [Input("knowledgeBaseConfiguration")]
        public Input<Inputs.AgentKnowledgeBaseKnowledgeBaseConfigurationGetArgs>? KnowledgeBaseConfiguration { get; set; }

        /// <summary>
        /// A name for the knowledge base.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ARN of the IAM role with permissions to create the knowledge base.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// Contains details about the configuration of the vector database used for the knowledge base.
        /// </summary>
        [Input("storageConfiguration")]
        public Input<Inputs.AgentKnowledgeBaseStorageConfigurationGetArgs>? StorageConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.AgentKnowledgeBaseTimeoutsGetArgs>? Timeouts { get; set; }

        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public AgentKnowledgeBaseState()
        {
        }
        public static new AgentKnowledgeBaseState Empty => new AgentKnowledgeBaseState();
    }
}
