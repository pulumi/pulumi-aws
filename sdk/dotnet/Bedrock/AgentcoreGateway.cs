// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Bedrock
{
    /// <summary>
    /// Manages an AWS Bedrock AgentCore Gateway. With Gateway, developers can convert APIs, Lambda functions, and existing services into Model Context Protocol (MCP)-compatible tools.
    /// 
    /// ## Example Usage
    /// 
    /// ### Gateway with JWT Authorization
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var assumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "bedrock-agentcore.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = new Aws.Iam.Role("example", new()
    ///     {
    ///         Name = "bedrock-agentcore-gateway-role",
    ///         AssumeRolePolicy = assumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var exampleAgentcoreGateway = new Aws.Bedrock.AgentcoreGateway("example", new()
    ///     {
    ///         Name = "example-gateway",
    ///         RoleArn = example.Arn,
    ///         AuthorizerType = "CUSTOM_JWT",
    ///         AuthorizerConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayAuthorizerConfigurationArgs
    ///         {
    ///             CustomJwtAuthorizer = new Aws.Bedrock.Inputs.AgentcoreGatewayAuthorizerConfigurationCustomJwtAuthorizerArgs
    ///             {
    ///                 DiscoveryUrl = "https://accounts.google.com/.well-known/openid-configuration",
    ///                 AllowedAudiences = new[]
    ///                 {
    ///                     "test1",
    ///                     "test2",
    ///                 },
    ///             },
    ///         },
    ///         ProtocolType = "MCP",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Gateway with advanced JWT Authorization and MCP Configuration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Bedrock.AgentcoreGateway("example", new()
    ///     {
    ///         Name = "mcp-gateway",
    ///         Description = "Gateway for MCP communication",
    ///         RoleArn = exampleAwsIamRole.Arn,
    ///         AuthorizerType = "CUSTOM_JWT",
    ///         AuthorizerConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayAuthorizerConfigurationArgs
    ///         {
    ///             CustomJwtAuthorizer = new Aws.Bedrock.Inputs.AgentcoreGatewayAuthorizerConfigurationCustomJwtAuthorizerArgs
    ///             {
    ///                 DiscoveryUrl = "https://auth.example.com/.well-known/openid-configuration",
    ///                 AllowedAudiences = new[]
    ///                 {
    ///                     "app-client",
    ///                     "web-client",
    ///                 },
    ///                 AllowedClients = new[]
    ///                 {
    ///                     "client-123",
    ///                     "client-456",
    ///                 },
    ///             },
    ///         },
    ///         ProtocolType = "MCP",
    ///         ProtocolConfiguration = new Aws.Bedrock.Inputs.AgentcoreGatewayProtocolConfigurationArgs
    ///         {
    ///             Mcp = new Aws.Bedrock.Inputs.AgentcoreGatewayProtocolConfigurationMcpArgs
    ///             {
    ///                 Instructions = "Gateway for handling MCP requests",
    ///                 SearchType = "HYBRID",
    ///                 SupportedVersions = new[]
    ///                 {
    ///                     "2025-03-26",
    ///                     "2025-06-18",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Bedrock AgentCore Gateway using the gateway ID. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:bedrock/agentcoreGateway:AgentcoreGateway example GATEWAY1234567890
    /// ```
    /// </summary>
    [AwsResourceType("aws:bedrock/agentcoreGateway:AgentcoreGateway")]
    public partial class AgentcoreGateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration for request authorization. See `AuthorizerConfiguration` below.
        /// </summary>
        [Output("authorizerConfiguration")]
        public Output<Outputs.AgentcoreGatewayAuthorizerConfiguration?> AuthorizerConfiguration { get; private set; } = null!;

        /// <summary>
        /// Type of authorizer to use. Valid values: `CUSTOM_JWT`, `AWS_IAM`.
        /// </summary>
        [Output("authorizerType")]
        public Output<string> AuthorizerType { get; private set; } = null!;

        /// <summary>
        /// Description of the gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Exception level for the gateway. Valid values: `INFO`, `WARN`, `ERROR`.
        /// </summary>
        [Output("exceptionLevel")]
        public Output<string?> ExceptionLevel { get; private set; } = null!;

        /// <summary>
        /// ARN of the Gateway.
        /// </summary>
        [Output("gatewayArn")]
        public Output<string> GatewayArn { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the Gateway.
        /// </summary>
        [Output("gatewayId")]
        public Output<string> GatewayId { get; private set; } = null!;

        /// <summary>
        /// URL endpoint for the gateway.
        /// </summary>
        [Output("gatewayUrl")]
        public Output<string> GatewayUrl { get; private set; } = null!;

        /// <summary>
        /// ARN of the KMS key used to encrypt the gateway data.
        /// </summary>
        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        /// <summary>
        /// Name of the gateway.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Protocol-specific configuration for the gateway. See `ProtocolConfiguration` below.
        /// </summary>
        [Output("protocolConfiguration")]
        public Output<Outputs.AgentcoreGatewayProtocolConfiguration?> ProtocolConfiguration { get; private set; } = null!;

        /// <summary>
        /// Protocol type for the gateway. Valid values: `MCP`.
        /// </summary>
        [Output("protocolType")]
        public Output<string> ProtocolType { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// ARN of the IAM role that the gateway assumes to access AWS services.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.AgentcoreGatewayTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Workload identity details for the gateway. See `WorkloadIdentityDetails` below.
        /// </summary>
        [Output("workloadIdentityDetails")]
        public Output<ImmutableArray<Outputs.AgentcoreGatewayWorkloadIdentityDetail>> WorkloadIdentityDetails { get; private set; } = null!;


        /// <summary>
        /// Create a AgentcoreGateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AgentcoreGateway(string name, AgentcoreGatewayArgs args, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreGateway:AgentcoreGateway", name, args ?? new AgentcoreGatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AgentcoreGateway(string name, Input<string> id, AgentcoreGatewayState? state = null, CustomResourceOptions? options = null)
            : base("aws:bedrock/agentcoreGateway:AgentcoreGateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AgentcoreGateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AgentcoreGateway Get(string name, Input<string> id, AgentcoreGatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new AgentcoreGateway(name, id, state, options);
        }
    }

    public sealed class AgentcoreGatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for request authorization. See `AuthorizerConfiguration` below.
        /// </summary>
        [Input("authorizerConfiguration")]
        public Input<Inputs.AgentcoreGatewayAuthorizerConfigurationArgs>? AuthorizerConfiguration { get; set; }

        /// <summary>
        /// Type of authorizer to use. Valid values: `CUSTOM_JWT`, `AWS_IAM`.
        /// </summary>
        [Input("authorizerType", required: true)]
        public Input<string> AuthorizerType { get; set; } = null!;

        /// <summary>
        /// Description of the gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Exception level for the gateway. Valid values: `INFO`, `WARN`, `ERROR`.
        /// </summary>
        [Input("exceptionLevel")]
        public Input<string>? ExceptionLevel { get; set; }

        /// <summary>
        /// ARN of the KMS key used to encrypt the gateway data.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Name of the gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Protocol-specific configuration for the gateway. See `ProtocolConfiguration` below.
        /// </summary>
        [Input("protocolConfiguration")]
        public Input<Inputs.AgentcoreGatewayProtocolConfigurationArgs>? ProtocolConfiguration { get; set; }

        /// <summary>
        /// Protocol type for the gateway. Valid values: `MCP`.
        /// </summary>
        [Input("protocolType", required: true)]
        public Input<string> ProtocolType { get; set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ARN of the IAM role that the gateway assumes to access AWS services.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.AgentcoreGatewayTimeoutsArgs>? Timeouts { get; set; }

        public AgentcoreGatewayArgs()
        {
        }
        public static new AgentcoreGatewayArgs Empty => new AgentcoreGatewayArgs();
    }

    public sealed class AgentcoreGatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for request authorization. See `AuthorizerConfiguration` below.
        /// </summary>
        [Input("authorizerConfiguration")]
        public Input<Inputs.AgentcoreGatewayAuthorizerConfigurationGetArgs>? AuthorizerConfiguration { get; set; }

        /// <summary>
        /// Type of authorizer to use. Valid values: `CUSTOM_JWT`, `AWS_IAM`.
        /// </summary>
        [Input("authorizerType")]
        public Input<string>? AuthorizerType { get; set; }

        /// <summary>
        /// Description of the gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Exception level for the gateway. Valid values: `INFO`, `WARN`, `ERROR`.
        /// </summary>
        [Input("exceptionLevel")]
        public Input<string>? ExceptionLevel { get; set; }

        /// <summary>
        /// ARN of the Gateway.
        /// </summary>
        [Input("gatewayArn")]
        public Input<string>? GatewayArn { get; set; }

        /// <summary>
        /// Unique identifier of the Gateway.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// URL endpoint for the gateway.
        /// </summary>
        [Input("gatewayUrl")]
        public Input<string>? GatewayUrl { get; set; }

        /// <summary>
        /// ARN of the KMS key used to encrypt the gateway data.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Name of the gateway.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Protocol-specific configuration for the gateway. See `ProtocolConfiguration` below.
        /// </summary>
        [Input("protocolConfiguration")]
        public Input<Inputs.AgentcoreGatewayProtocolConfigurationGetArgs>? ProtocolConfiguration { get; set; }

        /// <summary>
        /// Protocol type for the gateway. Valid values: `MCP`.
        /// </summary>
        [Input("protocolType")]
        public Input<string>? ProtocolType { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ARN of the IAM role that the gateway assumes to access AWS services.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.AgentcoreGatewayTimeoutsGetArgs>? Timeouts { get; set; }

        [Input("workloadIdentityDetails")]
        private InputList<Inputs.AgentcoreGatewayWorkloadIdentityDetailGetArgs>? _workloadIdentityDetails;

        /// <summary>
        /// Workload identity details for the gateway. See `WorkloadIdentityDetails` below.
        /// </summary>
        public InputList<Inputs.AgentcoreGatewayWorkloadIdentityDetailGetArgs> WorkloadIdentityDetails
        {
            get => _workloadIdentityDetails ?? (_workloadIdentityDetails = new InputList<Inputs.AgentcoreGatewayWorkloadIdentityDetailGetArgs>());
            set => _workloadIdentityDetails = value;
        }

        public AgentcoreGatewayState()
        {
        }
        public static new AgentcoreGatewayState Empty => new AgentcoreGatewayState();
    }
}
