// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LightSail
{
    /// <summary>
    /// Manages a Lightsail container service. Use this resource to create and manage a scalable compute and networking platform for deploying, running, and managing containerized applications in Lightsail.
    /// 
    /// &gt; **Note:** For more information about the AWS Regions in which you can create Amazon Lightsail container services, see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail).
    /// 
    /// &gt; **NOTE:** You must create and validate an SSL/TLS certificate before you can use `public_domain_names` with your container service. For more information, see [Enabling and managing custom domains for your Amazon Lightsail container services](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-services-certificates).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.LightSail.ContainerService("example", new()
    ///     {
    ///         Name = "container-service-1",
    ///         Power = "nano",
    ///         Scale = 1,
    ///         IsDisabled = false,
    ///         Tags = 
    ///         {
    ///             { "foo1", "bar1" },
    ///             { "foo2", "" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Public Domain Names
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.LightSail.ContainerService("example", new()
    ///     {
    ///         PublicDomainNames = new Aws.LightSail.Inputs.ContainerServicePublicDomainNamesArgs
    ///         {
    ///             Certificates = new[]
    ///             {
    ///                 new Aws.LightSail.Inputs.ContainerServicePublicDomainNamesCertificateArgs
    ///                 {
    ///                     CertificateName = "example-certificate",
    ///                     DomainNames = new[]
    ///                     {
    ///                         "www.example.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Private Registry Access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleContainerService = new Aws.LightSail.ContainerService("example", new()
    ///     {
    ///         PrivateRegistryAccess = new Aws.LightSail.Inputs.ContainerServicePrivateRegistryAccessArgs
    ///         {
    ///             EcrImagePullerRole = new Aws.LightSail.Inputs.ContainerServicePrivateRegistryAccessEcrImagePullerRoleArgs
    ///             {
    ///                 IsActive = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             exampleContainerService.PrivateRegistryAccess.EcrImagePullerRole?.PrincipalArn,
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "ecr:BatchGetImage",
    ///                     "ecr:GetDownloadUrlForLayer",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRepositoryPolicy = new Aws.Ecr.RepositoryPolicy("example", new()
    ///     {
    ///         Repository = exampleAwsEcrRepository.Name,
    ///         Policy = example.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Lightsail Container Service using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:lightsail/containerService:ContainerService example container-service-1
    /// ```
    /// </summary>
    [AwsResourceType("aws:lightsail/containerService:ContainerService")]
    public partial class ContainerService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the container service.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Availability Zone. Follows the format us-east-2a (case-sensitive).
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// Date and time when the container service was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Whether to disable the container service. Defaults to `false`.
        /// </summary>
        [Output("isDisabled")]
        public Output<bool?> IsDisabled { get; private set; } = null!;

        /// <summary>
        /// Name of the container service. Names must be of length 1 to 63, and be unique within each AWS Region in your Lightsail account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
        /// </summary>
        [Output("power")]
        public Output<string> Power { get; private set; } = null!;

        /// <summary>
        /// Power ID of the container service.
        /// </summary>
        [Output("powerId")]
        public Output<string> PowerId { get; private set; } = null!;

        /// <summary>
        /// Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service.
        /// </summary>
        [Output("principalArn")]
        public Output<string> PrincipalArn { get; private set; } = null!;

        /// <summary>
        /// Private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
        /// </summary>
        [Output("privateDomainName")]
        public Output<string> PrivateDomainName { get; private set; } = null!;

        /// <summary>
        /// Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
        /// </summary>
        [Output("privateRegistryAccess")]
        public Output<Outputs.ContainerServicePrivateRegistryAccess> PrivateRegistryAccess { get; private set; } = null!;

        /// <summary>
        /// Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. See below.
        /// </summary>
        [Output("publicDomainNames")]
        public Output<Outputs.ContainerServicePublicDomainNames?> PublicDomainNames { get; private set; } = null!;

        /// <summary>
        /// Lightsail resource type of the container service (i.e., ContainerService).
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("scale")]
        public Output<int> Scale { get; private set; } = null!;

        /// <summary>
        /// Current state of the container service.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerService(string name, ContainerServiceArgs args, CustomResourceOptions? options = null)
            : base("aws:lightsail/containerService:ContainerService", name, args ?? new ContainerServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerService(string name, Input<string> id, ContainerServiceState? state = null, CustomResourceOptions? options = null)
            : base("aws:lightsail/containerService:ContainerService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerService Get(string name, Input<string> id, ContainerServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerService(name, id, state, options);
        }
    }

    public sealed class ContainerServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to disable the container service. Defaults to `false`.
        /// </summary>
        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        /// <summary>
        /// Name of the container service. Names must be of length 1 to 63, and be unique within each AWS Region in your Lightsail account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
        /// </summary>
        [Input("power", required: true)]
        public Input<string> Power { get; set; } = null!;

        /// <summary>
        /// Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
        /// </summary>
        [Input("privateRegistryAccess")]
        public Input<Inputs.ContainerServicePrivateRegistryAccessArgs>? PrivateRegistryAccess { get; set; }

        /// <summary>
        /// Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. See below.
        /// </summary>
        [Input("publicDomainNames")]
        public Input<Inputs.ContainerServicePublicDomainNamesArgs>? PublicDomainNames { get; set; }

        /// <summary>
        /// Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("scale", required: true)]
        public Input<int> Scale { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ContainerServiceArgs()
        {
        }
        public static new ContainerServiceArgs Empty => new ContainerServiceArgs();
    }

    public sealed class ContainerServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the container service.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Availability Zone. Follows the format us-east-2a (case-sensitive).
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Date and time when the container service was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Whether to disable the container service. Defaults to `false`.
        /// </summary>
        [Input("isDisabled")]
        public Input<bool>? IsDisabled { get; set; }

        /// <summary>
        /// Name of the container service. Names must be of length 1 to 63, and be unique within each AWS Region in your Lightsail account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
        /// </summary>
        [Input("power")]
        public Input<string>? Power { get; set; }

        /// <summary>
        /// Power ID of the container service.
        /// </summary>
        [Input("powerId")]
        public Input<string>? PowerId { get; set; }

        /// <summary>
        /// Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service.
        /// </summary>
        [Input("principalArn")]
        public Input<string>? PrincipalArn { get; set; }

        /// <summary>
        /// Private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
        /// </summary>
        [Input("privateDomainName")]
        public Input<string>? PrivateDomainName { get; set; }

        /// <summary>
        /// Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. See below.
        /// </summary>
        [Input("privateRegistryAccess")]
        public Input<Inputs.ContainerServicePrivateRegistryAccessGetArgs>? PrivateRegistryAccess { get; set; }

        /// <summary>
        /// Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. See below.
        /// </summary>
        [Input("publicDomainNames")]
        public Input<Inputs.ContainerServicePublicDomainNamesGetArgs>? PublicDomainNames { get; set; }

        /// <summary>
        /// Lightsail resource type of the container service (i.e., ContainerService).
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("scale")]
        public Input<int>? Scale { get; set; }

        /// <summary>
        /// Current state of the container service.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ContainerServiceState()
        {
        }
        public static new ContainerServiceState Empty => new ContainerServiceState();
    }
}
