// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LightSail
{
    [AwsResourceType("aws:lightsail/disk_attachment:Disk_attachment")]
    public partial class Disk_attachment : global::Pulumi.CustomResource
    {
        [Output("diskName")]
        public Output<string> DiskName { get; private set; } = null!;

        [Output("diskPath")]
        public Output<string> DiskPath { get; private set; } = null!;

        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;


        /// <summary>
        /// Create a Disk_attachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Disk_attachment(string name, Disk_attachmentArgs args, CustomResourceOptions? options = null)
            : base("aws:lightsail/disk_attachment:Disk_attachment", name, args ?? new Disk_attachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Disk_attachment(string name, Input<string> id, Disk_attachmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:lightsail/disk_attachment:Disk_attachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Disk_attachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Disk_attachment Get(string name, Input<string> id, Disk_attachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Disk_attachment(name, id, state, options);
        }
    }

    public sealed class Disk_attachmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("diskName", required: true)]
        public Input<string> DiskName { get; set; } = null!;

        [Input("diskPath", required: true)]
        public Input<string> DiskPath { get; set; } = null!;

        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        public Disk_attachmentArgs()
        {
        }
        public static new Disk_attachmentArgs Empty => new Disk_attachmentArgs();
    }

    public sealed class Disk_attachmentState : global::Pulumi.ResourceArgs
    {
        [Input("diskName")]
        public Input<string>? DiskName { get; set; }

        [Input("diskPath")]
        public Input<string>? DiskPath { get; set; }

        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        public Disk_attachmentState()
        {
        }
        public static new Disk_attachmentState Empty => new Disk_attachmentState();
    }
}
