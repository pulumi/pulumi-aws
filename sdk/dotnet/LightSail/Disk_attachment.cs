// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LightSail
{
    /// <summary>
    /// Attaches a Lightsail disk to a Lightsail Instance
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var available = Aws.GetAvailabilityZones.Invoke(new()
    ///     {
    ///         State = "available",
    ///         Filters = new[]
    ///         {
    ///             new Aws.Inputs.GetAvailabilityZonesFilterInputArgs
    ///             {
    ///                 Name = "opt-in-status",
    ///                 Values = new[]
    ///                 {
    ///                     "opt-in-not-required",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testDisk = new Aws.LightSail.Disk("testDisk", new()
    ///     {
    ///         SizeInGb = 8,
    ///         AvailabilityZone = available.Apply(getAvailabilityZonesResult =&gt; getAvailabilityZonesResult.Names[0]),
    ///     });
    /// 
    ///     var testInstance = new Aws.LightSail.Instance("testInstance", new()
    ///     {
    ///         AvailabilityZone = available.Apply(getAvailabilityZonesResult =&gt; getAvailabilityZonesResult.Names[0]),
    ///         BlueprintId = "amazon_linux",
    ///         BundleId = "nano_1_0",
    ///     });
    /// 
    ///     var testDisk_attachment = new Aws.LightSail.Disk_attachment("testDisk_attachment", new()
    ///     {
    ///         DiskName = testDisk.Name,
    ///         InstanceName = testInstance.Name,
    ///         DiskPath = "/dev/xvdf",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_lightsail_disk` can be imported by using the id attribute, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:lightsail/disk_attachment:Disk_attachment test test-disk,test-instance
    /// ```
    /// </summary>
    [AwsResourceType("aws:lightsail/disk_attachment:Disk_attachment")]
    public partial class Disk_attachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the Lightsail Disk.
        /// </summary>
        [Output("diskName")]
        public Output<string> DiskName { get; private set; } = null!;

        /// <summary>
        /// The disk path to expose to the instance.
        /// </summary>
        [Output("diskPath")]
        public Output<string> DiskPath { get; private set; } = null!;

        /// <summary>
        /// The name of the Lightsail Instance to attach to.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;


        /// <summary>
        /// Create a Disk_attachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Disk_attachment(string name, Disk_attachmentArgs args, CustomResourceOptions? options = null)
            : base("aws:lightsail/disk_attachment:Disk_attachment", name, args ?? new Disk_attachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Disk_attachment(string name, Input<string> id, Disk_attachmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:lightsail/disk_attachment:Disk_attachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Disk_attachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Disk_attachment Get(string name, Input<string> id, Disk_attachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Disk_attachment(name, id, state, options);
        }
    }

    public sealed class Disk_attachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Lightsail Disk.
        /// </summary>
        [Input("diskName", required: true)]
        public Input<string> DiskName { get; set; } = null!;

        /// <summary>
        /// The disk path to expose to the instance.
        /// </summary>
        [Input("diskPath", required: true)]
        public Input<string> DiskPath { get; set; } = null!;

        /// <summary>
        /// The name of the Lightsail Instance to attach to.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        public Disk_attachmentArgs()
        {
        }
        public static new Disk_attachmentArgs Empty => new Disk_attachmentArgs();
    }

    public sealed class Disk_attachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Lightsail Disk.
        /// </summary>
        [Input("diskName")]
        public Input<string>? DiskName { get; set; }

        /// <summary>
        /// The disk path to expose to the instance.
        /// </summary>
        [Input("diskPath")]
        public Input<string>? DiskPath { get; set; }

        /// <summary>
        /// The name of the Lightsail Instance to attach to.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        public Disk_attachmentState()
        {
        }
        public static new Disk_attachmentState Empty => new Disk_attachmentState();
    }
}
