// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LightSail.Inputs
{

    public sealed class ContainerServiceDeploymentVersionContainerGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("commands")]
        private InputList<string>? _commands;

        /// <summary>
        /// The launch command for the container. A list of string.
        /// </summary>
        public InputList<string> Commands
        {
            get => _commands ?? (_commands = new InputList<string>());
            set => _commands = value;
        }

        /// <summary>
        /// The name for the container.
        /// </summary>
        [Input("containerName", required: true)]
        public Input<string> ContainerName { get; set; } = null!;

        [Input("environment")]
        private InputMap<string>? _environment;

        /// <summary>
        /// A key-value map of the environment variables of the container.
        /// </summary>
        public InputMap<string> Environment
        {
            get => _environment ?? (_environment = new InputMap<string>());
            set => _environment = value;
        }

        /// <summary>
        /// The name of the image used for the container. Container images sourced from your Lightsail container service, that are registered and stored on your service, start with a colon (`:`). For example, `:container-service-1.mystaticwebsite.1`. Container images sourced from a public registry like Docker Hub don't start with a colon. For example, `nginx:latest` or `nginx`.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("ports")]
        private InputMap<string>? _ports;

        /// <summary>
        /// A key-value map of the open firewall ports of the container. Valid values: `HTTP`, `HTTPS`, `TCP`, `UDP`.
        /// </summary>
        public InputMap<string> Ports
        {
            get => _ports ?? (_ports = new InputMap<string>());
            set => _ports = value;
        }

        public ContainerServiceDeploymentVersionContainerGetArgs()
        {
        }
        public static new ContainerServiceDeploymentVersionContainerGetArgs Empty => new ContainerServiceDeploymentVersionContainerGetArgs();
    }
}
