// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LightSail
{
    [AwsResourceType("aws:lightsail/database:Database")]
    public partial class Database : global::Pulumi.CustomResource
    {
        [Output("applyImmediately")]
        public Output<bool> ApplyImmediately { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("backupRetentionEnabled")]
        public Output<bool?> BackupRetentionEnabled { get; private set; } = null!;

        [Output("blueprintId")]
        public Output<string> BlueprintId { get; private set; } = null!;

        [Output("bundleId")]
        public Output<string> BundleId { get; private set; } = null!;

        [Output("caCertificateIdentifier")]
        public Output<string> CaCertificateIdentifier { get; private set; } = null!;

        [Output("cpuCount")]
        public Output<int> CpuCount { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("diskSize")]
        public Output<double> DiskSize { get; private set; } = null!;

        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        [Output("finalSnapshotName")]
        public Output<string?> FinalSnapshotName { get; private set; } = null!;

        [Output("masterDatabaseName")]
        public Output<string> MasterDatabaseName { get; private set; } = null!;

        [Output("masterEndpointAddress")]
        public Output<string> MasterEndpointAddress { get; private set; } = null!;

        [Output("masterEndpointPort")]
        public Output<int> MasterEndpointPort { get; private set; } = null!;

        [Output("masterPassword")]
        public Output<string> MasterPassword { get; private set; } = null!;

        [Output("masterUsername")]
        public Output<string> MasterUsername { get; private set; } = null!;

        [Output("preferredBackupWindow")]
        public Output<string> PreferredBackupWindow { get; private set; } = null!;

        [Output("preferredMaintenanceWindow")]
        public Output<string> PreferredMaintenanceWindow { get; private set; } = null!;

        [Output("publiclyAccessible")]
        public Output<bool?> PubliclyAccessible { get; private set; } = null!;

        [Output("ramSize")]
        public Output<double> RamSize { get; private set; } = null!;

        [Output("relationalDatabaseName")]
        public Output<string> RelationalDatabaseName { get; private set; } = null!;

        [Output("secondaryAvailabilityZone")]
        public Output<string> SecondaryAvailabilityZone { get; private set; } = null!;

        [Output("skipFinalSnapshot")]
        public Output<bool?> SkipFinalSnapshot { get; private set; } = null!;

        [Output("supportCode")]
        public Output<string> SupportCode { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Database resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Database(string name, DatabaseArgs args, CustomResourceOptions? options = null)
            : base("aws:lightsail/database:Database", name, args ?? new DatabaseArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Database(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
            : base("aws:lightsail/database:Database", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "masterPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Database resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Database Get(string name, Input<string> id, DatabaseState? state = null, CustomResourceOptions? options = null)
        {
            return new Database(name, id, state, options);
        }
    }

    public sealed class DatabaseArgs : global::Pulumi.ResourceArgs
    {
        [Input("applyImmediately")]
        public Input<bool>? ApplyImmediately { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("backupRetentionEnabled")]
        public Input<bool>? BackupRetentionEnabled { get; set; }

        [Input("blueprintId", required: true)]
        public Input<string> BlueprintId { get; set; } = null!;

        [Input("bundleId", required: true)]
        public Input<string> BundleId { get; set; } = null!;

        [Input("finalSnapshotName")]
        public Input<string>? FinalSnapshotName { get; set; }

        [Input("masterDatabaseName", required: true)]
        public Input<string> MasterDatabaseName { get; set; } = null!;

        [Input("masterPassword", required: true)]
        private Input<string>? _masterPassword;
        public Input<string>? MasterPassword
        {
            get => _masterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _masterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("masterUsername", required: true)]
        public Input<string> MasterUsername { get; set; } = null!;

        [Input("preferredBackupWindow")]
        public Input<string>? PreferredBackupWindow { get; set; }

        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        [Input("relationalDatabaseName", required: true)]
        public Input<string> RelationalDatabaseName { get; set; } = null!;

        [Input("skipFinalSnapshot")]
        public Input<bool>? SkipFinalSnapshot { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DatabaseArgs()
        {
        }
        public static new DatabaseArgs Empty => new DatabaseArgs();
    }

    public sealed class DatabaseState : global::Pulumi.ResourceArgs
    {
        [Input("applyImmediately")]
        public Input<bool>? ApplyImmediately { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("backupRetentionEnabled")]
        public Input<bool>? BackupRetentionEnabled { get; set; }

        [Input("blueprintId")]
        public Input<string>? BlueprintId { get; set; }

        [Input("bundleId")]
        public Input<string>? BundleId { get; set; }

        [Input("caCertificateIdentifier")]
        public Input<string>? CaCertificateIdentifier { get; set; }

        [Input("cpuCount")]
        public Input<int>? CpuCount { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("diskSize")]
        public Input<double>? DiskSize { get; set; }

        [Input("engine")]
        public Input<string>? Engine { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("finalSnapshotName")]
        public Input<string>? FinalSnapshotName { get; set; }

        [Input("masterDatabaseName")]
        public Input<string>? MasterDatabaseName { get; set; }

        [Input("masterEndpointAddress")]
        public Input<string>? MasterEndpointAddress { get; set; }

        [Input("masterEndpointPort")]
        public Input<int>? MasterEndpointPort { get; set; }

        [Input("masterPassword")]
        private Input<string>? _masterPassword;
        public Input<string>? MasterPassword
        {
            get => _masterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _masterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("masterUsername")]
        public Input<string>? MasterUsername { get; set; }

        [Input("preferredBackupWindow")]
        public Input<string>? PreferredBackupWindow { get; set; }

        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        [Input("ramSize")]
        public Input<double>? RamSize { get; set; }

        [Input("relationalDatabaseName")]
        public Input<string>? RelationalDatabaseName { get; set; }

        [Input("secondaryAvailabilityZone")]
        public Input<string>? SecondaryAvailabilityZone { get; set; }

        [Input("skipFinalSnapshot")]
        public Input<bool>? SkipFinalSnapshot { get; set; }

        [Input("supportCode")]
        public Input<string>? SupportCode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public DatabaseState()
        {
        }
        public static new DatabaseState Empty => new DatabaseState();
    }
}
