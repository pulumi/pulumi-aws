// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LightSail
{
    /// <summary>
    /// Configures Session Stickiness for a Lightsail Load Balancer.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testLb = new Aws.LightSail.Lb("testLb", new()
    ///     {
    ///         HealthCheckPath = "/",
    ///         InstancePort = 80,
    ///         Tags = 
    ///         {
    ///             { "foo", "bar" },
    ///         },
    ///     });
    /// 
    ///     var testLbStickinessPolicy = new Aws.LightSail.LbStickinessPolicy("testLbStickinessPolicy", new()
    ///     {
    ///         LbName = testLb.Name,
    ///         CookieDuration = 900,
    ///         Enabled = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_lightsail_lb_stickiness_policy` can be imported by using the `lb_name` attribute, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:lightsail/lbStickinessPolicy:LbStickinessPolicy test example-load-balancer
    /// ```
    /// </summary>
    [AwsResourceType("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy")]
    public partial class LbStickinessPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The cookie duration in seconds. This determines the length of the session stickiness.
        /// </summary>
        [Output("cookieDuration")]
        public Output<int> CookieDuration { get; private set; } = null!;

        /// <summary>
        /// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The name of the load balancer to which you want to enable session stickiness.
        /// </summary>
        [Output("lbName")]
        public Output<string> LbName { get; private set; } = null!;


        /// <summary>
        /// Create a LbStickinessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LbStickinessPolicy(string name, LbStickinessPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy", name, args ?? new LbStickinessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LbStickinessPolicy(string name, Input<string> id, LbStickinessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:lightsail/lbStickinessPolicy:LbStickinessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LbStickinessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LbStickinessPolicy Get(string name, Input<string> id, LbStickinessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new LbStickinessPolicy(name, id, state, options);
        }
    }

    public sealed class LbStickinessPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cookie duration in seconds. This determines the length of the session stickiness.
        /// </summary>
        [Input("cookieDuration", required: true)]
        public Input<int> CookieDuration { get; set; } = null!;

        /// <summary>
        /// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The name of the load balancer to which you want to enable session stickiness.
        /// </summary>
        [Input("lbName", required: true)]
        public Input<string> LbName { get; set; } = null!;

        public LbStickinessPolicyArgs()
        {
        }
        public static new LbStickinessPolicyArgs Empty => new LbStickinessPolicyArgs();
    }

    public sealed class LbStickinessPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cookie duration in seconds. This determines the length of the session stickiness.
        /// </summary>
        [Input("cookieDuration")]
        public Input<int>? CookieDuration { get; set; }

        /// <summary>
        /// The Session Stickiness state of the load balancer. `true` to activate session stickiness or `false` to deactivate session stickiness.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The name of the load balancer to which you want to enable session stickiness.
        /// </summary>
        [Input("lbName")]
        public Input<string>? LbName { get; set; }

        public LbStickinessPolicyState()
        {
        }
        public static new LbStickinessPolicyState Empty => new LbStickinessPolicyState();
    }
}
