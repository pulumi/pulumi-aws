// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dsql
{
    /// <summary>
    /// Resource for managing an Amazon Aurora DSQL Cluster Peering.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example1 = new Aws.Dsql.Cluster("example_1", new()
    ///     {
    ///         MultiRegionProperties = new Aws.Dsql.Inputs.ClusterMultiRegionPropertiesArgs
    ///         {
    ///             WitnessRegion = "us-west-2",
    ///         },
    ///     });
    /// 
    ///     var example2 = new Aws.Dsql.Cluster("example_2", new()
    ///     {
    ///         MultiRegionProperties = new Aws.Dsql.Inputs.ClusterMultiRegionPropertiesArgs
    ///         {
    ///             WitnessRegion = "us-west-2",
    ///         },
    ///     });
    /// 
    ///     var example1ClusterPeering = new Aws.Dsql.ClusterPeering("example_1", new()
    ///     {
    ///         Identifier = example1.Identifier,
    ///         Clusters = new[]
    ///         {
    ///             example2.Arn,
    ///         },
    ///         WitnessRegion = example1.MultiRegionProperties.Apply(multiRegionProperties =&gt; multiRegionProperties?.WitnessRegion),
    ///     });
    /// 
    ///     var example2ClusterPeering = new Aws.Dsql.ClusterPeering("example_2", new()
    ///     {
    ///         Identifier = example2.Identifier,
    ///         Clusters = new[]
    ///         {
    ///             example1.Arn,
    ///         },
    ///         WitnessRegion = example2.MultiRegionProperties.Apply(multiRegionProperties =&gt; multiRegionProperties?.WitnessRegion),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DSQL Cluster Peering using the `identifier`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:dsql/clusterPeering:ClusterPeering example cluster-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:dsql/clusterPeering:ClusterPeering")]
    public partial class ClusterPeering : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of DSQL Cluster ARNs to be peered to this cluster.
        /// </summary>
        [Output("clusters")]
        public Output<ImmutableArray<string>> Clusters { get; private set; } = null!;

        /// <summary>
        /// DSQL Cluster Identifier.
        /// </summary>
        [Output("identifier")]
        public Output<string> Identifier { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ClusterPeeringTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Witness region for a multi-region cluster.
        /// </summary>
        [Output("witnessRegion")]
        public Output<string> WitnessRegion { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterPeering resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterPeering(string name, ClusterPeeringArgs args, CustomResourceOptions? options = null)
            : base("aws:dsql/clusterPeering:ClusterPeering", name, args ?? new ClusterPeeringArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterPeering(string name, Input<string> id, ClusterPeeringState? state = null, CustomResourceOptions? options = null)
            : base("aws:dsql/clusterPeering:ClusterPeering", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterPeering resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterPeering Get(string name, Input<string> id, ClusterPeeringState? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterPeering(name, id, state, options);
        }
    }

    public sealed class ClusterPeeringArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusters", required: true)]
        private InputList<string>? _clusters;

        /// <summary>
        /// List of DSQL Cluster ARNs to be peered to this cluster.
        /// </summary>
        public InputList<string> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<string>());
            set => _clusters = value;
        }

        /// <summary>
        /// DSQL Cluster Identifier.
        /// </summary>
        [Input("identifier", required: true)]
        public Input<string> Identifier { get; set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ClusterPeeringTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// Witness region for a multi-region cluster.
        /// </summary>
        [Input("witnessRegion", required: true)]
        public Input<string> WitnessRegion { get; set; } = null!;

        public ClusterPeeringArgs()
        {
        }
        public static new ClusterPeeringArgs Empty => new ClusterPeeringArgs();
    }

    public sealed class ClusterPeeringState : global::Pulumi.ResourceArgs
    {
        [Input("clusters")]
        private InputList<string>? _clusters;

        /// <summary>
        /// List of DSQL Cluster ARNs to be peered to this cluster.
        /// </summary>
        public InputList<string> Clusters
        {
            get => _clusters ?? (_clusters = new InputList<string>());
            set => _clusters = value;
        }

        /// <summary>
        /// DSQL Cluster Identifier.
        /// </summary>
        [Input("identifier")]
        public Input<string>? Identifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ClusterPeeringTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Witness region for a multi-region cluster.
        /// </summary>
        [Input("witnessRegion")]
        public Input<string>? WitnessRegion { get; set; }

        public ClusterPeeringState()
        {
        }
        public static new ClusterPeeringState Empty => new ClusterPeeringState();
    }
}
