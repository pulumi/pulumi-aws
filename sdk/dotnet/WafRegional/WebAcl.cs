// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.WafRegional
{
    /// <summary>
    /// Provides a WAF Regional Web ACL Resource for use with Application Load Balancer.
    /// 
    /// ## Example Usage
    /// ### Regular Rule
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var ipset = new Aws.WafRegional.IpSet("ipset", new Aws.WafRegional.IpSetArgs
    ///         {
    ///             IpSetDescriptors = 
    ///             {
    ///                 new Aws.WafRegional.Inputs.IpSetIpSetDescriptorArgs
    ///                 {
    ///                     Type = "IPV4",
    ///                     Value = "192.0.7.0/24",
    ///                 },
    ///             },
    ///         });
    ///         var wafrule = new Aws.WafRegional.Rule("wafrule", new Aws.WafRegional.RuleArgs
    ///         {
    ///             MetricName = "tfWAFRule",
    ///             Predicates = 
    ///             {
    ///                 new Aws.WafRegional.Inputs.RulePredicateArgs
    ///                 {
    ///                     DataId = ipset.Id,
    ///                     Negated = false,
    ///                     Type = "IPMatch",
    ///                 },
    ///             },
    ///         });
    ///         var wafacl = new Aws.WafRegional.WebAcl("wafacl", new Aws.WafRegional.WebAclArgs
    ///         {
    ///             MetricName = "tfWebACL",
    ///             DefaultAction = new Aws.WafRegional.Inputs.WebAclDefaultActionArgs
    ///             {
    ///                 Type = "ALLOW",
    ///             },
    ///             Rules = 
    ///             {
    ///                 new Aws.WafRegional.Inputs.WebAclRuleArgs
    ///                 {
    ///                     Action = new Aws.WafRegional.Inputs.WebAclRuleActionArgs
    ///                     {
    ///                         Type = "BLOCK",
    ///                     },
    ///                     Priority = 1,
    ///                     RuleId = wafrule.Id,
    ///                     Type = "REGULAR",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Group Rule
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.WafRegional.WebAcl("example", new Aws.WafRegional.WebAclArgs
    ///         {
    ///             MetricName = "example",
    ///             DefaultAction = new Aws.WafRegional.Inputs.WebAclDefaultActionArgs
    ///             {
    ///                 Type = "ALLOW",
    ///             },
    ///             Rules = 
    ///             {
    ///                 new Aws.WafRegional.Inputs.WebAclRuleArgs
    ///                 {
    ///                     Priority = 1,
    ///                     RuleId = aws_wafregional_rule_group.Example.Id,
    ///                     Type = "GROUP",
    ///                     OverrideAction = new Aws.WafRegional.Inputs.WebAclRuleOverrideActionArgs
    ///                     {
    ///                         Type = "NONE",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Logging
    /// 
    /// &gt; *NOTE:* The Kinesis Firehose Delivery Stream name must begin with `aws-waf-logs-`. See the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) for more information about enabling WAF logging.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         // ... other configuration ...
    ///         var example = new Aws.WafRegional.WebAcl("example", new Aws.WafRegional.WebAclArgs
    ///         {
    ///             LoggingConfiguration = new Aws.WafRegional.Inputs.WebAclLoggingConfigurationArgs
    ///             {
    ///                 LogDestination = aws_kinesis_firehose_delivery_stream.Example.Arn,
    ///                 RedactedFields = new Aws.WafRegional.Inputs.WebAclLoggingConfigurationRedactedFieldsArgs
    ///                 {
    ///                     FieldToMatches = 
    ///                     {
    ///                         new Aws.WafRegional.Inputs.WebAclLoggingConfigurationRedactedFieldsFieldToMatchArgs
    ///                         {
    ///                             Type = "URI",
    ///                         },
    ///                         new Aws.WafRegional.Inputs.WebAclLoggingConfigurationRedactedFieldsFieldToMatchArgs
    ///                         {
    ///                             Data = "referer",
    ///                             Type = "HEADER",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// WAF Regional Web ACL can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:wafregional/webAcl:WebAcl wafacl a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc
    /// ```
    /// </summary>
    public partial class WebAcl : Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the WAF Regional WebACL.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
        /// </summary>
        [Output("defaultAction")]
        public Output<Outputs.WebAclDefaultAction> DefaultAction { get; private set; } = null!;

        /// <summary>
        /// Configuration block to enable WAF logging. Detailed below.
        /// </summary>
        [Output("loggingConfiguration")]
        public Output<Outputs.WebAclLoggingConfiguration?> LoggingConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name or description for the Amazon CloudWatch metric of this web ACL.
        /// </summary>
        [Output("metricName")]
        public Output<string> MetricName { get; private set; } = null!;

        /// <summary>
        /// The name or description of the web ACL.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set of configuration blocks containing rules for the web ACL. Detailed below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.WebAclRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a WebAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAcl(string name, WebAclArgs args, CustomResourceOptions? options = null)
            : base("aws:wafregional/webAcl:WebAcl", name, args ?? new WebAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAcl(string name, Input<string> id, WebAclState? state = null, CustomResourceOptions? options = null)
            : base("aws:wafregional/webAcl:WebAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAcl Get(string name, Input<string> id, WebAclState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAcl(name, id, state, options);
        }
    }

    public sealed class WebAclArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
        /// </summary>
        [Input("defaultAction", required: true)]
        public Input<Inputs.WebAclDefaultActionArgs> DefaultAction { get; set; } = null!;

        /// <summary>
        /// Configuration block to enable WAF logging. Detailed below.
        /// </summary>
        [Input("loggingConfiguration")]
        public Input<Inputs.WebAclLoggingConfigurationArgs>? LoggingConfiguration { get; set; }

        /// <summary>
        /// The name or description for the Amazon CloudWatch metric of this web ACL.
        /// </summary>
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        /// <summary>
        /// The name or description of the web ACL.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.WebAclRuleArgs>? _rules;

        /// <summary>
        /// Set of configuration blocks containing rules for the web ACL. Detailed below.
        /// </summary>
        public InputList<Inputs.WebAclRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WebAclRuleArgs>());
            set => _rules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public WebAclArgs()
        {
        }
    }

    public sealed class WebAclState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the WAF Regional WebACL.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
        /// </summary>
        [Input("defaultAction")]
        public Input<Inputs.WebAclDefaultActionGetArgs>? DefaultAction { get; set; }

        /// <summary>
        /// Configuration block to enable WAF logging. Detailed below.
        /// </summary>
        [Input("loggingConfiguration")]
        public Input<Inputs.WebAclLoggingConfigurationGetArgs>? LoggingConfiguration { get; set; }

        /// <summary>
        /// The name or description for the Amazon CloudWatch metric of this web ACL.
        /// </summary>
        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        /// <summary>
        /// The name or description of the web ACL.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("rules")]
        private InputList<Inputs.WebAclRuleGetArgs>? _rules;

        /// <summary>
        /// Set of configuration blocks containing rules for the web ACL. Detailed below.
        /// </summary>
        public InputList<Inputs.WebAclRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WebAclRuleGetArgs>());
            set => _rules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public WebAclState()
        {
        }
    }
}
