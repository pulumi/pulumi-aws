// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.EmrServerless
{
    [AwsResourceType("aws:emrserverless/application:Application")]
    public partial class Application : global::Pulumi.CustomResource
    {
        [Output("architecture")]
        public Output<string?> Architecture { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("autoStartConfiguration")]
        public Output<Outputs.ApplicationAutoStartConfiguration> AutoStartConfiguration { get; private set; } = null!;

        [Output("autoStopConfiguration")]
        public Output<Outputs.ApplicationAutoStopConfiguration> AutoStopConfiguration { get; private set; } = null!;

        [Output("initialCapacities")]
        public Output<ImmutableArray<Outputs.ApplicationInitialCapacity>> InitialCapacities { get; private set; } = null!;

        [Output("maximumCapacity")]
        public Output<Outputs.ApplicationMaximumCapacity> MaximumCapacity { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkConfiguration")]
        public Output<Outputs.ApplicationNetworkConfiguration?> NetworkConfiguration { get; private set; } = null!;

        [Output("releaseLabel")]
        public Output<string> ReleaseLabel { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("aws:emrserverless/application:Application", name, args ?? new ApplicationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("aws:emrserverless/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : global::Pulumi.ResourceArgs
    {
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("autoStartConfiguration")]
        public Input<Inputs.ApplicationAutoStartConfigurationArgs>? AutoStartConfiguration { get; set; }

        [Input("autoStopConfiguration")]
        public Input<Inputs.ApplicationAutoStopConfigurationArgs>? AutoStopConfiguration { get; set; }

        [Input("initialCapacities")]
        private InputList<Inputs.ApplicationInitialCapacityArgs>? _initialCapacities;
        public InputList<Inputs.ApplicationInitialCapacityArgs> InitialCapacities
        {
            get => _initialCapacities ?? (_initialCapacities = new InputList<Inputs.ApplicationInitialCapacityArgs>());
            set => _initialCapacities = value;
        }

        [Input("maximumCapacity")]
        public Input<Inputs.ApplicationMaximumCapacityArgs>? MaximumCapacity { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkConfiguration")]
        public Input<Inputs.ApplicationNetworkConfigurationArgs>? NetworkConfiguration { get; set; }

        [Input("releaseLabel", required: true)]
        public Input<string> ReleaseLabel { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ApplicationArgs()
        {
        }
        public static new ApplicationArgs Empty => new ApplicationArgs();
    }

    public sealed class ApplicationState : global::Pulumi.ResourceArgs
    {
        [Input("architecture")]
        public Input<string>? Architecture { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("autoStartConfiguration")]
        public Input<Inputs.ApplicationAutoStartConfigurationGetArgs>? AutoStartConfiguration { get; set; }

        [Input("autoStopConfiguration")]
        public Input<Inputs.ApplicationAutoStopConfigurationGetArgs>? AutoStopConfiguration { get; set; }

        [Input("initialCapacities")]
        private InputList<Inputs.ApplicationInitialCapacityGetArgs>? _initialCapacities;
        public InputList<Inputs.ApplicationInitialCapacityGetArgs> InitialCapacities
        {
            get => _initialCapacities ?? (_initialCapacities = new InputList<Inputs.ApplicationInitialCapacityGetArgs>());
            set => _initialCapacities = value;
        }

        [Input("maximumCapacity")]
        public Input<Inputs.ApplicationMaximumCapacityGetArgs>? MaximumCapacity { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkConfiguration")]
        public Input<Inputs.ApplicationNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        [Input("releaseLabel")]
        public Input<string>? ReleaseLabel { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApplicationState()
        {
        }
        public static new ApplicationState Empty => new ApplicationState();
    }
}
