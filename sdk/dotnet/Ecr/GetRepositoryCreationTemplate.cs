// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    public static class GetRepositoryCreationTemplate
    {
        /// <summary>
        /// The ECR Repository Creation Template data source allows the template details to be retrieved for a Repository Creation Template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ecr.GetRepositoryCreationTemplate.Invoke(new()
        ///     {
        ///         Prefix = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRepositoryCreationTemplateResult> InvokeAsync(GetRepositoryCreationTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRepositoryCreationTemplateResult>("aws:ecr/getRepositoryCreationTemplate:getRepositoryCreationTemplate", args ?? new GetRepositoryCreationTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// The ECR Repository Creation Template data source allows the template details to be retrieved for a Repository Creation Template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ecr.GetRepositoryCreationTemplate.Invoke(new()
        ///     {
        ///         Prefix = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryCreationTemplateResult> Invoke(GetRepositoryCreationTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryCreationTemplateResult>("aws:ecr/getRepositoryCreationTemplate:getRepositoryCreationTemplate", args ?? new GetRepositoryCreationTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The ECR Repository Creation Template data source allows the template details to be retrieved for a Repository Creation Template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ecr.GetRepositoryCreationTemplate.Invoke(new()
        ///     {
        ///         Prefix = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRepositoryCreationTemplateResult> Invoke(GetRepositoryCreationTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRepositoryCreationTemplateResult>("aws:ecr/getRepositoryCreationTemplate:getRepositoryCreationTemplate", args ?? new GetRepositoryCreationTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRepositoryCreationTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The repository name prefix that the template matches against.
        /// </summary>
        [Input("prefix", required: true)]
        public string Prefix { get; set; } = null!;

        [Input("resourceTags")]
        private Dictionary<string, string>? _resourceTags;

        /// <summary>
        /// A map of tags to assign to any created repositories.
        /// </summary>
        public Dictionary<string, string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new Dictionary<string, string>());
            set => _resourceTags = value;
        }

        public GetRepositoryCreationTemplateArgs()
        {
        }
        public static new GetRepositoryCreationTemplateArgs Empty => new GetRepositoryCreationTemplateArgs();
    }

    public sealed class GetRepositoryCreationTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The repository name prefix that the template matches against.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// A map of tags to assign to any created repositories.
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        public GetRepositoryCreationTemplateInvokeArgs()
        {
        }
        public static new GetRepositoryCreationTemplateInvokeArgs Empty => new GetRepositoryCreationTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetRepositoryCreationTemplateResult
    {
        /// <summary>
        /// Which features this template applies to. Contains one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
        /// </summary>
        public readonly ImmutableArray<string> AppliedFors;
        /// <summary>
        /// The ARN of the custom role used for repository creation.
        /// </summary>
        public readonly string CustomRoleArn;
        /// <summary>
        /// The description for this template.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Encryption configuration for any created repositories. See Encryption Configuration below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRepositoryCreationTemplateEncryptionConfigurationResult> EncryptionConfigurations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The tag mutability setting for any created repositories.
        /// </summary>
        public readonly string ImageTagMutability;
        /// <summary>
        /// The lifecycle policy document to apply to any created repositories.
        /// </summary>
        public readonly string LifecyclePolicy;
        public readonly string Prefix;
        /// <summary>
        /// The registry ID the repository creation template applies to.
        /// </summary>
        public readonly string RegistryId;
        /// <summary>
        /// The registry policy document to apply to any created repositories.
        /// </summary>
        public readonly string RepositoryPolicy;
        /// <summary>
        /// A map of tags to assign to any created repositories.
        /// </summary>
        public readonly ImmutableDictionary<string, string> ResourceTags;

        [OutputConstructor]
        private GetRepositoryCreationTemplateResult(
            ImmutableArray<string> appliedFors,

            string customRoleArn,

            string description,

            ImmutableArray<Outputs.GetRepositoryCreationTemplateEncryptionConfigurationResult> encryptionConfigurations,

            string id,

            string imageTagMutability,

            string lifecyclePolicy,

            string prefix,

            string registryId,

            string repositoryPolicy,

            ImmutableDictionary<string, string> resourceTags)
        {
            AppliedFors = appliedFors;
            CustomRoleArn = customRoleArn;
            Description = description;
            EncryptionConfigurations = encryptionConfigurations;
            Id = id;
            ImageTagMutability = imageTagMutability;
            LifecyclePolicy = lifecyclePolicy;
            Prefix = prefix;
            RegistryId = registryId;
            RepositoryPolicy = repositoryPolicy;
            ResourceTags = resourceTags;
        }
    }
}
