// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Aws.Ecr
{
    /// <summary>
    /// The type of action to take.
    /// </summary>
    [EnumType]
    public readonly struct LifecyclePolicyActionType : IEquatable<LifecyclePolicyActionType>
    {
        private readonly string _value;

        private LifecyclePolicyActionType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LifecyclePolicyActionType Expire { get; } = new LifecyclePolicyActionType("expire");

        public static bool operator ==(LifecyclePolicyActionType left, LifecyclePolicyActionType right) => left.Equals(right);
        public static bool operator !=(LifecyclePolicyActionType left, LifecyclePolicyActionType right) => !left.Equals(right);

        public static explicit operator string(LifecyclePolicyActionType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LifecyclePolicyActionType other && Equals(other);
        public bool Equals(LifecyclePolicyActionType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The type of count to perform.
    /// </summary>
    [EnumType]
    public readonly struct LifecyclePolicyCountType : IEquatable<LifecyclePolicyCountType>
    {
        private readonly string _value;

        private LifecyclePolicyCountType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LifecyclePolicyCountType ImageCountMoreThan { get; } = new LifecyclePolicyCountType("imageCountMoreThan");
        public static LifecyclePolicyCountType SinceImagePushed { get; } = new LifecyclePolicyCountType("sinceImagePushed");

        public static bool operator ==(LifecyclePolicyCountType left, LifecyclePolicyCountType right) => left.Equals(right);
        public static bool operator !=(LifecyclePolicyCountType left, LifecyclePolicyCountType right) => !left.Equals(right);

        public static explicit operator string(LifecyclePolicyCountType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LifecyclePolicyCountType other && Equals(other);
        public bool Equals(LifecyclePolicyCountType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// The tag status of the image.
    /// </summary>
    [EnumType]
    public readonly struct LifecyclePolicyTagStatus : IEquatable<LifecyclePolicyTagStatus>
    {
        private readonly string _value;

        private LifecyclePolicyTagStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static LifecyclePolicyTagStatus Tagged { get; } = new LifecyclePolicyTagStatus("tagged");
        public static LifecyclePolicyTagStatus Untagged { get; } = new LifecyclePolicyTagStatus("untagged");
        public static LifecyclePolicyTagStatus Any { get; } = new LifecyclePolicyTagStatus("any");

        public static bool operator ==(LifecyclePolicyTagStatus left, LifecyclePolicyTagStatus right) => left.Equals(right);
        public static bool operator !=(LifecyclePolicyTagStatus left, LifecyclePolicyTagStatus right) => !left.Equals(right);

        public static explicit operator string(LifecyclePolicyTagStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is LifecyclePolicyTagStatus other && Equals(other);
        public bool Equals(LifecyclePolicyTagStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
