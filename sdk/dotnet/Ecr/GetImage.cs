// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    public static class GetImage
    {
        /// <summary>
        /// The ECR Image data source allows the details of an image with a particular tag or digest to be retrieved.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const serviceImage = aws.ecr.getImage({
        ///     imageTag: "latest",
        ///     repositoryName: "my/service",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// service_image = aws.ecr.get_image(image_tag="latest",
        ///     repository_name="my/service")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serviceImage = Aws.Ecr.GetImage.Invoke(new()
        ///     {
        ///         ImageTag = "latest",
        ///         RepositoryName = "my/service",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecr"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecr.GetImage(ctx, &amp;ecr.GetImageArgs{
        /// 			ImageTag:       pulumi.StringRef("latest"),
        /// 			RepositoryName: "my/service",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecr.EcrFunctions;
        /// import com.pulumi.aws.ecr.inputs.GetImageArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var serviceImage = EcrFunctions.getImage(GetImageArgs.builder()
        ///             .imageTag("latest")
        ///             .repositoryName("my/service")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   serviceImage:
        ///     fn::invoke:
        ///       Function: aws:ecr:getImage
        ///       Arguments:
        ///         imageTag: latest
        ///         repositoryName: my/service
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("aws:ecr/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// The ECR Image data source allows the details of an image with a particular tag or digest to be retrieved.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const serviceImage = aws.ecr.getImage({
        ///     imageTag: "latest",
        ///     repositoryName: "my/service",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// service_image = aws.ecr.get_image(image_tag="latest",
        ///     repository_name="my/service")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var serviceImage = Aws.Ecr.GetImage.Invoke(new()
        ///     {
        ///         ImageTag = "latest",
        ///         RepositoryName = "my/service",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecr"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecr.GetImage(ctx, &amp;ecr.GetImageArgs{
        /// 			ImageTag:       pulumi.StringRef("latest"),
        /// 			RepositoryName: "my/service",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecr.EcrFunctions;
        /// import com.pulumi.aws.ecr.inputs.GetImageArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var serviceImage = EcrFunctions.getImage(GetImageArgs.builder()
        ///             .imageTag("latest")
        ///             .repositoryName("my/service")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   serviceImage:
        ///     fn::invoke:
        ///       Function: aws:ecr:getImage
        ///       Arguments:
        ///         imageTag: latest
        ///         repositoryName: my/service
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("aws:ecr/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Sha256 digest of the image manifest. At least one of `image_digest`, `image_tag`, or `most_recent` must be specified.
        /// </summary>
        [Input("imageDigest")]
        public string? ImageDigest { get; set; }

        /// <summary>
        /// Tag associated with this image. At least one of `image_digest`, `image_tag`, or `most_recent` must be specified.
        /// </summary>
        [Input("imageTag")]
        public string? ImageTag { get; set; }

        /// <summary>
        /// Return the most recently pushed image. At least one of `image_digest`, `image_tag`, or `most_recent` must be specified.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// ID of the Registry where the repository resides.
        /// </summary>
        [Input("registryId")]
        public string? RegistryId { get; set; }

        /// <summary>
        /// Name of the ECR Repository.
        /// </summary>
        [Input("repositoryName", required: true)]
        public string RepositoryName { get; set; } = null!;

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Sha256 digest of the image manifest. At least one of `image_digest`, `image_tag`, or `most_recent` must be specified.
        /// </summary>
        [Input("imageDigest")]
        public Input<string>? ImageDigest { get; set; }

        /// <summary>
        /// Tag associated with this image. At least one of `image_digest`, `image_tag`, or `most_recent` must be specified.
        /// </summary>
        [Input("imageTag")]
        public Input<string>? ImageTag { get; set; }

        /// <summary>
        /// Return the most recently pushed image. At least one of `image_digest`, `image_tag`, or `most_recent` must be specified.
        /// </summary>
        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        /// <summary>
        /// ID of the Registry where the repository resides.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        /// <summary>
        /// Name of the ECR Repository.
        /// </summary>
        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageDigest;
        /// <summary>
        /// Date and time, expressed as a unix timestamp, at which the current image was pushed to the repository.
        /// </summary>
        public readonly int ImagePushedAt;
        /// <summary>
        /// Size, in bytes, of the image in the repository.
        /// </summary>
        public readonly int ImageSizeInBytes;
        public readonly string? ImageTag;
        /// <summary>
        /// List of tags associated with this image.
        /// </summary>
        public readonly ImmutableArray<string> ImageTags;
        public readonly bool? MostRecent;
        public readonly string RegistryId;
        public readonly string RepositoryName;

        [OutputConstructor]
        private GetImageResult(
            string id,

            string imageDigest,

            int imagePushedAt,

            int imageSizeInBytes,

            string? imageTag,

            ImmutableArray<string> imageTags,

            bool? mostRecent,

            string registryId,

            string repositoryName)
        {
            Id = id;
            ImageDigest = imageDigest;
            ImagePushedAt = imagePushedAt;
            ImageSizeInBytes = imageSizeInBytes;
            ImageTag = imageTag;
            ImageTags = imageTags;
            MostRecent = mostRecent;
            RegistryId = registryId;
            RepositoryName = repositoryName;
        }
    }
}
