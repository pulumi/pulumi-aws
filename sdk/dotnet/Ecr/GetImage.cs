// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    public static class GetImage
    {
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("aws:ecr/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImageResult>("aws:ecr/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : global::Pulumi.InvokeArgs
    {
        [Input("imageDigest")]
        public string? ImageDigest { get; set; }

        [Input("imageTag")]
        public string? ImageTag { get; set; }

        [Input("registryId")]
        public string? RegistryId { get; set; }

        [Input("repositoryName", required: true)]
        public string RepositoryName { get; set; } = null!;

        public GetImageArgs()
        {
        }
        public static new GetImageArgs Empty => new GetImageArgs();
    }

    public sealed class GetImageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("imageDigest")]
        public Input<string>? ImageDigest { get; set; }

        [Input("imageTag")]
        public Input<string>? ImageTag { get; set; }

        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        public GetImageInvokeArgs()
        {
        }
        public static new GetImageInvokeArgs Empty => new GetImageInvokeArgs();
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ImageDigest;
        public readonly int ImagePushedAt;
        public readonly int ImageSizeInBytes;
        public readonly string? ImageTag;
        public readonly ImmutableArray<string> ImageTags;
        public readonly string RegistryId;
        public readonly string RepositoryName;

        [OutputConstructor]
        private GetImageResult(
            string id,

            string imageDigest,

            int imagePushedAt,

            int imageSizeInBytes,

            string? imageTag,

            ImmutableArray<string> imageTags,

            string registryId,

            string repositoryName)
        {
            Id = id;
            ImageDigest = imageDigest;
            ImagePushedAt = imagePushedAt;
            ImageSizeInBytes = imageSizeInBytes;
            ImageTag = imageTag;
            ImageTags = imageTags;
            RegistryId = registryId;
            RepositoryName = repositoryName;
        }
    }
}
