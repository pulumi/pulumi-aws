// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    /// <summary>
    /// Provides an Elastic Container Registry Repository Creation Template.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "new policy",
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "123456789012",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "ecr:GetDownloadUrlForLayer",
    ///                     "ecr:BatchGetImage",
    ///                     "ecr:BatchCheckLayerAvailability",
    ///                     "ecr:PutImage",
    ///                     "ecr:InitiateLayerUpload",
    ///                     "ecr:UploadLayerPart",
    ///                     "ecr:CompleteLayerUpload",
    ///                     "ecr:DescribeRepositories",
    ///                     "ecr:GetRepositoryPolicy",
    ///                     "ecr:ListImages",
    ///                     "ecr:DeleteRepository",
    ///                     "ecr:BatchDeleteImage",
    ///                     "ecr:SetRepositoryPolicy",
    ///                     "ecr:DeleteRepositoryPolicy",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleRepositoryCreationTemplate = new Aws.Ecr.RepositoryCreationTemplate("example", new()
    ///     {
    ///         Prefix = "example",
    ///         Description = "An example template",
    ///         ImageTagMutability = "IMMUTABLE",
    ///         CustomRoleArn = "arn:aws:iam::123456789012:role/example",
    ///         AppliedFors = new[]
    ///         {
    ///             "PULL_THROUGH_CACHE",
    ///         },
    ///         EncryptionConfigurations = new[]
    ///         {
    ///             new Aws.Ecr.Inputs.RepositoryCreationTemplateEncryptionConfigurationArgs
    ///             {
    ///                 EncryptionType = "AES256",
    ///             },
    ///         },
    ///         RepositoryPolicy = example.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         LifecyclePolicy = @"{
    ///   ""rules"": [
    ///     {
    ///       ""rulePriority"": 1,
    ///       ""description"": ""Expire images older than 14 days"",
    ///       ""selection"": {
    ///         ""tagStatus"": ""untagged"",
    ///         ""countType"": ""sinceImagePushed"",
    ///         ""countUnit"": ""days"",
    ///         ""countNumber"": 14
    ///       },
    ///       ""action"": {
    ///         ""type"": ""expire""
    ///       }
    ///     }
    ///   ]
    /// }
    /// ",
    ///         ResourceTags = 
    ///         {
    ///             { "Foo", "Bar" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import the ECR Repository Creating Templates using the `prefix`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate example example
    /// ```
    /// </summary>
    [AwsResourceType("aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate")]
    public partial class RepositoryCreationTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
        /// </summary>
        [Output("appliedFors")]
        public Output<ImmutableArray<string>> AppliedFors { get; private set; } = null!;

        /// <summary>
        /// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
        /// </summary>
        [Output("customRoleArn")]
        public Output<string?> CustomRoleArn { get; private set; } = null!;

        /// <summary>
        /// The description for this template.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Encryption configuration for any created repositories. See below for schema.
        /// </summary>
        [Output("encryptionConfigurations")]
        public Output<ImmutableArray<Outputs.RepositoryCreationTemplateEncryptionConfiguration>> EncryptionConfigurations { get; private set; } = null!;

        /// <summary>
        /// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
        /// </summary>
        [Output("imageTagMutability")]
        public Output<string?> ImageTagMutability { get; private set; } = null!;

        /// <summary>
        /// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `aws.ecr.getLifecyclePolicyDocument` data_source to generate/manage the JSON document used for the `lifecycle_policy` argument.
        /// </summary>
        [Output("lifecyclePolicy")]
        public Output<string?> LifecyclePolicy { get; private set; } = null!;

        /// <summary>
        /// The repository name prefix to match against. Use `ROOT` to match any prefix that doesn't explicitly match another template.
        /// </summary>
        [Output("prefix")]
        public Output<string> Prefix { get; private set; } = null!;

        /// <summary>
        /// The registry ID the repository creation template applies to.
        /// </summary>
        [Output("registryId")]
        public Output<string> RegistryId { get; private set; } = null!;

        [Output("repositoryPolicy")]
        public Output<string?> RepositoryPolicy { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to any created repositories.
        /// </summary>
        [Output("resourceTags")]
        public Output<ImmutableDictionary<string, string>?> ResourceTags { get; private set; } = null!;


        /// <summary>
        /// Create a RepositoryCreationTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RepositoryCreationTemplate(string name, RepositoryCreationTemplateArgs args, CustomResourceOptions? options = null)
            : base("aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate", name, args ?? new RepositoryCreationTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RepositoryCreationTemplate(string name, Input<string> id, RepositoryCreationTemplateState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecr/repositoryCreationTemplate:RepositoryCreationTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RepositoryCreationTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RepositoryCreationTemplate Get(string name, Input<string> id, RepositoryCreationTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new RepositoryCreationTemplate(name, id, state, options);
        }
    }

    public sealed class RepositoryCreationTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("appliedFors", required: true)]
        private InputList<string>? _appliedFors;

        /// <summary>
        /// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
        /// </summary>
        public InputList<string> AppliedFors
        {
            get => _appliedFors ?? (_appliedFors = new InputList<string>());
            set => _appliedFors = value;
        }

        /// <summary>
        /// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
        /// </summary>
        [Input("customRoleArn")]
        public Input<string>? CustomRoleArn { get; set; }

        /// <summary>
        /// The description for this template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("encryptionConfigurations")]
        private InputList<Inputs.RepositoryCreationTemplateEncryptionConfigurationArgs>? _encryptionConfigurations;

        /// <summary>
        /// Encryption configuration for any created repositories. See below for schema.
        /// </summary>
        public InputList<Inputs.RepositoryCreationTemplateEncryptionConfigurationArgs> EncryptionConfigurations
        {
            get => _encryptionConfigurations ?? (_encryptionConfigurations = new InputList<Inputs.RepositoryCreationTemplateEncryptionConfigurationArgs>());
            set => _encryptionConfigurations = value;
        }

        /// <summary>
        /// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
        /// </summary>
        [Input("imageTagMutability")]
        public Input<string>? ImageTagMutability { get; set; }

        /// <summary>
        /// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `aws.ecr.getLifecyclePolicyDocument` data_source to generate/manage the JSON document used for the `lifecycle_policy` argument.
        /// </summary>
        [Input("lifecyclePolicy")]
        public Input<string>? LifecyclePolicy { get; set; }

        /// <summary>
        /// The repository name prefix to match against. Use `ROOT` to match any prefix that doesn't explicitly match another template.
        /// </summary>
        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        [Input("repositoryPolicy")]
        public Input<string>? RepositoryPolicy { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// A map of tags to assign to any created repositories.
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        public RepositoryCreationTemplateArgs()
        {
        }
        public static new RepositoryCreationTemplateArgs Empty => new RepositoryCreationTemplateArgs();
    }

    public sealed class RepositoryCreationTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("appliedFors")]
        private InputList<string>? _appliedFors;

        /// <summary>
        /// Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
        /// </summary>
        public InputList<string> AppliedFors
        {
            get => _appliedFors ?? (_appliedFors = new InputList<string>());
            set => _appliedFors = value;
        }

        /// <summary>
        /// A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
        /// </summary>
        [Input("customRoleArn")]
        public Input<string>? CustomRoleArn { get; set; }

        /// <summary>
        /// The description for this template.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("encryptionConfigurations")]
        private InputList<Inputs.RepositoryCreationTemplateEncryptionConfigurationGetArgs>? _encryptionConfigurations;

        /// <summary>
        /// Encryption configuration for any created repositories. See below for schema.
        /// </summary>
        public InputList<Inputs.RepositoryCreationTemplateEncryptionConfigurationGetArgs> EncryptionConfigurations
        {
            get => _encryptionConfigurations ?? (_encryptionConfigurations = new InputList<Inputs.RepositoryCreationTemplateEncryptionConfigurationGetArgs>());
            set => _encryptionConfigurations = value;
        }

        /// <summary>
        /// The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
        /// </summary>
        [Input("imageTagMutability")]
        public Input<string>? ImageTagMutability { get; set; }

        /// <summary>
        /// The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the `aws.ecr.getLifecyclePolicyDocument` data_source to generate/manage the JSON document used for the `lifecycle_policy` argument.
        /// </summary>
        [Input("lifecyclePolicy")]
        public Input<string>? LifecyclePolicy { get; set; }

        /// <summary>
        /// The repository name prefix to match against. Use `ROOT` to match any prefix that doesn't explicitly match another template.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// The registry ID the repository creation template applies to.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        [Input("repositoryPolicy")]
        public Input<string>? RepositoryPolicy { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;

        /// <summary>
        /// A map of tags to assign to any created repositories.
        /// </summary>
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        public RepositoryCreationTemplateState()
        {
        }
        public static new RepositoryCreationTemplateState Empty => new RepositoryCreationTemplateState();
    }
}
