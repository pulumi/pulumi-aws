// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    public static class GetAuthorizationToken
    {
        /// <summary>
        /// The ECR Authorization Token data source allows the authorization token, proxy endpoint, token expiration date, user name and password to be retrieved for an ECR repository.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const token = aws.ecr.getAuthorizationToken({});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// token = aws.ecr.get_authorization_token()
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var token = Aws.Ecr.GetAuthorizationToken.Invoke();
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecr"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecr.GetAuthorizationToken(ctx, nil, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecr.EcrFunctions;
        /// import com.pulumi.aws.ecr.inputs.GetAuthorizationTokenArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var token = EcrFunctions.getAuthorizationToken();
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   token:
        ///     fn::invoke:
        ///       Function: aws:ecr:getAuthorizationToken
        ///       Arguments: {}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthorizationTokenResult> InvokeAsync(GetAuthorizationTokenArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizationTokenResult>("aws:ecr/getAuthorizationToken:getAuthorizationToken", args ?? new GetAuthorizationTokenArgs(), options.WithDefaults());

        /// <summary>
        /// The ECR Authorization Token data source allows the authorization token, proxy endpoint, token expiration date, user name and password to be retrieved for an ECR repository.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const token = aws.ecr.getAuthorizationToken({});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// token = aws.ecr.get_authorization_token()
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var token = Aws.Ecr.GetAuthorizationToken.Invoke();
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ecr"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ecr.GetAuthorizationToken(ctx, nil, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ecr.EcrFunctions;
        /// import com.pulumi.aws.ecr.inputs.GetAuthorizationTokenArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var token = EcrFunctions.getAuthorizationToken();
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   token:
        ///     fn::invoke:
        ///       Function: aws:ecr:getAuthorizationToken
        ///       Arguments: {}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthorizationTokenResult> Invoke(GetAuthorizationTokenInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizationTokenResult>("aws:ecr/getAuthorizationToken:getAuthorizationToken", args ?? new GetAuthorizationTokenInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizationTokenArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// AWS account ID of the ECR Repository. If not specified the default account is assumed.
        /// </summary>
        [Input("registryId")]
        public string? RegistryId { get; set; }

        public GetAuthorizationTokenArgs()
        {
        }
        public static new GetAuthorizationTokenArgs Empty => new GetAuthorizationTokenArgs();
    }

    public sealed class GetAuthorizationTokenInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// AWS account ID of the ECR Repository. If not specified the default account is assumed.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        public GetAuthorizationTokenInvokeArgs()
        {
        }
        public static new GetAuthorizationTokenInvokeArgs Empty => new GetAuthorizationTokenInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizationTokenResult
    {
        /// <summary>
        /// Temporary IAM authentication credentials to access the ECR repository encoded in base64 in the form of `user_name:password`.
        /// </summary>
        public readonly string AuthorizationToken;
        /// <summary>
        /// Time in UTC RFC3339 format when the authorization token expires.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Password decoded from the authorization token.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Registry URL to use in the docker login command.
        /// </summary>
        public readonly string ProxyEndpoint;
        public readonly string? RegistryId;
        /// <summary>
        /// User name decoded from the authorization token.
        /// </summary>
        public readonly string UserName;

        [OutputConstructor]
        private GetAuthorizationTokenResult(
            string authorizationToken,

            string expiresAt,

            string id,

            string password,

            string proxyEndpoint,

            string? registryId,

            string userName)
        {
            AuthorizationToken = authorizationToken;
            ExpiresAt = expiresAt;
            Id = id;
            Password = password;
            ProxyEndpoint = proxyEndpoint;
            RegistryId = registryId;
            UserName = userName;
        }
    }
}
