// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    /// <summary>
    /// Provides a resource to manage AWS ECR Basic Scan Type
    /// 
    /// ## Example Usage
    /// 
    /// ### Configuring Basic Scanning
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var basicScanTypeVersion = new Aws.Ecr.AccountSetting("basic_scan_type_version", new()
    ///     {
    ///         Name = "BASIC_SCAN_TYPE_VERSION",
    ///         Value = "AWS_NATIVE",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Configuring Registry Policy Scope
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var registryPolicyScope = new Aws.Ecr.AccountSetting("registry_policy_scope", new()
    ///     {
    ///         Name = "REGISTRY_POLICY_SCOPE",
    ///         Value = "V2",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import EMR Security Configurations using the account setting name. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:ecr/accountSetting:AccountSetting foo BASIC_SCAN_TYPE_VERSION
    /// ```
    /// </summary>
    [AwsResourceType("aws:ecr/accountSetting:AccountSetting")]
    public partial class AccountSetting : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the account setting. One of: `BASIC_SCAN_TYPE_VERSION`, `REGISTRY_POLICY_SCOPE`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Setting value that is specified. Valid values are:
        /// * If `name` is specified as `BASIC_SCAN_TYPE_VERSION`, one of: `AWS_NATIVE`, `CLAIR`.
        /// * If `name` is specified as `REGISTRY_POLICY_SCOPE`, one of: `V1`, `V2`.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;


        /// <summary>
        /// Create a AccountSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountSetting(string name, AccountSettingArgs args, CustomResourceOptions? options = null)
            : base("aws:ecr/accountSetting:AccountSetting", name, args ?? new AccountSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountSetting(string name, Input<string> id, AccountSettingState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecr/accountSetting:AccountSetting", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountSetting Get(string name, Input<string> id, AccountSettingState? state = null, CustomResourceOptions? options = null)
        {
            return new AccountSetting(name, id, state, options);
        }
    }

    public sealed class AccountSettingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account setting. One of: `BASIC_SCAN_TYPE_VERSION`, `REGISTRY_POLICY_SCOPE`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Setting value that is specified. Valid values are:
        /// * If `name` is specified as `BASIC_SCAN_TYPE_VERSION`, one of: `AWS_NATIVE`, `CLAIR`.
        /// * If `name` is specified as `REGISTRY_POLICY_SCOPE`, one of: `V1`, `V2`.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public AccountSettingArgs()
        {
        }
        public static new AccountSettingArgs Empty => new AccountSettingArgs();
    }

    public sealed class AccountSettingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the account setting. One of: `BASIC_SCAN_TYPE_VERSION`, `REGISTRY_POLICY_SCOPE`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Setting value that is specified. Valid values are:
        /// * If `name` is specified as `BASIC_SCAN_TYPE_VERSION`, one of: `AWS_NATIVE`, `CLAIR`.
        /// * If `name` is specified as `REGISTRY_POLICY_SCOPE`, one of: `V1`, `V2`.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public AccountSettingState()
        {
        }
        public static new AccountSettingState Empty => new AccountSettingState();
    }
}
