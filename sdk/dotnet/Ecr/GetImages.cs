// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    public static class GetImages
    {
        /// <summary>
        /// The ECR Images data source allows the list of images in a specified repository to be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ecr.GetImages.Invoke(new()
        ///     {
        ///         RepositoryName = "my-repository",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageDigests"] = .Where(img =&gt; img.ImageDigest != null).Select(img =&gt; 
        ///         {
        ///             return img.ImageDigest;
        ///         }).ToList(),
        ///         ["imageTags"] = .Where(img =&gt; img.ImageTag != null).Select(img =&gt; 
        ///         {
        ///             return img.ImageTag;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetImagesResult> InvokeAsync(GetImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesResult>("aws:ecr/getImages:getImages", args ?? new GetImagesArgs(), options.WithDefaults());

        /// <summary>
        /// The ECR Images data source allows the list of images in a specified repository to be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ecr.GetImages.Invoke(new()
        ///     {
        ///         RepositoryName = "my-repository",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageDigests"] = .Where(img =&gt; img.ImageDigest != null).Select(img =&gt; 
        ///         {
        ///             return img.ImageDigest;
        ///         }).ToList(),
        ///         ["imageTags"] = .Where(img =&gt; img.ImageTag != null).Select(img =&gt; 
        ///         {
        ///             return img.ImageTag;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("aws:ecr/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The ECR Images data source allows the list of images in a specified repository to be retrieved.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ecr.GetImages.Invoke(new()
        ///     {
        ///         RepositoryName = "my-repository",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["imageDigests"] = .Where(img =&gt; img.ImageDigest != null).Select(img =&gt; 
        ///         {
        ///             return img.ImageDigest;
        ///         }).ToList(),
        ///         ["imageTags"] = .Where(img =&gt; img.ImageTag != null).Select(img =&gt; 
        ///         {
        ///             return img.ImageTag;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("aws:ecr/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// ID of the Registry where the repository resides.
        /// </summary>
        [Input("registryId")]
        public string? RegistryId { get; set; }

        /// <summary>
        /// Name of the ECR Repository.
        /// </summary>
        [Input("repositoryName", required: true)]
        public string RepositoryName { get; set; } = null!;

        public GetImagesArgs()
        {
        }
        public static new GetImagesArgs Empty => new GetImagesArgs();
    }

    public sealed class GetImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ID of the Registry where the repository resides.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        /// <summary>
        /// Name of the ECR Repository.
        /// </summary>
        [Input("repositoryName", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        public GetImagesInvokeArgs()
        {
        }
        public static new GetImagesInvokeArgs Empty => new GetImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of image objects containing image digest and tags. Each object has the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetImagesImageIdResult> ImageIds;
        public readonly string Region;
        public readonly string? RegistryId;
        public readonly string RepositoryName;

        [OutputConstructor]
        private GetImagesResult(
            string id,

            ImmutableArray<Outputs.GetImagesImageIdResult> imageIds,

            string region,

            string? registryId,

            string repositoryName)
        {
            Id = id;
            ImageIds = imageIds;
            Region = region;
            RegistryId = registryId;
            RepositoryName = repositoryName;
        }
    }
}
