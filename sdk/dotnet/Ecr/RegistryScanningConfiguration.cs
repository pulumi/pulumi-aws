// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ecr
{
    /// <summary>
    /// Provides an Elastic Container Registry Scanning Configuration. Can't be completely deleted, instead reverts to the default `BASIC` scanning configuration without rules.
    /// 
    /// ## Example Usage
    /// ### Basic example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var configuration = new Aws.Ecr.RegistryScanningConfiguration("configuration", new()
    ///     {
    ///         Rules = new[]
    ///         {
    ///             new Aws.Ecr.Inputs.RegistryScanningConfigurationRuleArgs
    ///             {
    ///                 RepositoryFilters = new[]
    ///                 {
    ///                     new Aws.Ecr.Inputs.RegistryScanningConfigurationRuleRepositoryFilterArgs
    ///                     {
    ///                         Filter = "example",
    ///                         FilterType = "WILDCARD",
    ///                     },
    ///                 },
    ///                 ScanFrequency = "CONTINUOUS_SCAN",
    ///             },
    ///         },
    ///         ScanType = "ENHANCED",
    ///     });
    /// 
    /// });
    /// ```
    /// ### Multiple rules
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Ecr.RegistryScanningConfiguration("test", new()
    ///     {
    ///         Rules = new[]
    ///         {
    ///             new Aws.Ecr.Inputs.RegistryScanningConfigurationRuleArgs
    ///             {
    ///                 RepositoryFilters = new[]
    ///                 {
    ///                     new Aws.Ecr.Inputs.RegistryScanningConfigurationRuleRepositoryFilterArgs
    ///                     {
    ///                         Filter = "*",
    ///                         FilterType = "WILDCARD",
    ///                     },
    ///                 },
    ///                 ScanFrequency = "SCAN_ON_PUSH",
    ///             },
    ///             new Aws.Ecr.Inputs.RegistryScanningConfigurationRuleArgs
    ///             {
    ///                 RepositoryFilters = new[]
    ///                 {
    ///                     new Aws.Ecr.Inputs.RegistryScanningConfigurationRuleRepositoryFilterArgs
    ///                     {
    ///                         Filter = "example",
    ///                         FilterType = "WILDCARD",
    ///                     },
    ///                 },
    ///                 ScanFrequency = "CONTINUOUS_SCAN",
    ///             },
    ///         },
    ///         ScanType = "ENHANCED",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECR Scanning Configurations can be imported using the `registry_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration example 012345678901
    /// ```
    /// </summary>
    [AwsResourceType("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration")]
    public partial class RegistryScanningConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The registry ID the scanning configuration applies to.
        /// </summary>
        [Output("registryId")]
        public Output<string> RegistryId { get; private set; } = null!;

        /// <summary>
        /// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.RegistryScanningConfigurationRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
        /// </summary>
        [Output("scanType")]
        public Output<string> ScanType { get; private set; } = null!;


        /// <summary>
        /// Create a RegistryScanningConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RegistryScanningConfiguration(string name, RegistryScanningConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration", name, args ?? new RegistryScanningConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RegistryScanningConfiguration(string name, Input<string> id, RegistryScanningConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:ecr/registryScanningConfiguration:RegistryScanningConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RegistryScanningConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RegistryScanningConfiguration Get(string name, Input<string> id, RegistryScanningConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new RegistryScanningConfiguration(name, id, state, options);
        }
    }

    public sealed class RegistryScanningConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("rules")]
        private InputList<Inputs.RegistryScanningConfigurationRuleArgs>? _rules;

        /// <summary>
        /// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
        /// </summary>
        public InputList<Inputs.RegistryScanningConfigurationRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RegistryScanningConfigurationRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
        /// </summary>
        [Input("scanType", required: true)]
        public Input<string> ScanType { get; set; } = null!;

        public RegistryScanningConfigurationArgs()
        {
        }
        public static new RegistryScanningConfigurationArgs Empty => new RegistryScanningConfigurationArgs();
    }

    public sealed class RegistryScanningConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The registry ID the scanning configuration applies to.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        [Input("rules")]
        private InputList<Inputs.RegistryScanningConfigurationRuleGetArgs>? _rules;

        /// <summary>
        /// One or multiple blocks specifying scanning rules to determine which repository filters are used and at what frequency scanning will occur. See below for schema.
        /// </summary>
        public InputList<Inputs.RegistryScanningConfigurationRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RegistryScanningConfigurationRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// the scanning type to set for the registry. Can be either `ENHANCED` or `BASIC`.
        /// </summary>
        [Input("scanType")]
        public Input<string>? ScanType { get; set; }

        public RegistryScanningConfigurationState()
        {
        }
        public static new RegistryScanningConfigurationState Empty => new RegistryScanningConfigurationState();
    }
}
