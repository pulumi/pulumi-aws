// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    /// <summary>
    /// Provides a Glue Connection resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Non-VPC Connection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionProperties = 
    ///         {
    ///             { "JDBC_CONNECTION_URL", "jdbc:mysql://example.com/exampledatabase" },
    ///             { "PASSWORD", "examplepassword" },
    ///             { "USERNAME", "exampleusername" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Non-VPC Connection with secret manager reference
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Aws.SecretsManager.GetSecret.Invoke(new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var exampleConnection = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionProperties = 
    ///         {
    ///             { "JDBC_CONNECTION_URL", "jdbc:mysql://example.com/exampledatabase" },
    ///             { "SECRET_ID", example.Apply(getSecretResult =&gt; getSecretResult.Name) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### VPC Connection
    /// 
    /// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/populate-add-connection.html#connection-JDBC-VPC).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionProperties = 
    ///         {
    ///             { "JDBC_CONNECTION_URL", $"jdbc:mysql://{exampleAwsRdsCluster.Endpoint}/exampledatabase" },
    ///             { "PASSWORD", "examplepassword" },
    ///             { "USERNAME", "exampleusername" },
    ///         },
    ///         PhysicalConnectionRequirements = new Aws.Glue.Inputs.ConnectionPhysicalConnectionRequirementsArgs
    ///         {
    ///             AvailabilityZone = exampleAwsSubnet.AvailabilityZone,
    ///             SecurityGroupIdLists = new[]
    ///             {
    ///                 exampleAwsSecurityGroup.Id,
    ///             },
    ///             SubnetId = exampleAwsSubnet.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Connection using a custom connector
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Define the custom connector using the connection_type of `CUSTOM` with the match_criteria of `template_connection`
    ///     // Example here being a snowflake jdbc connector with a secret having user and password as keys
    ///     var example = Aws.SecretsManager.GetSecret.Invoke(new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var example1 = new Aws.Glue.Connection("example1", new()
    ///     {
    ///         Name = "example1",
    ///         ConnectionType = "CUSTOM",
    ///         ConnectionProperties = 
    ///         {
    ///             { "CONNECTOR_CLASS_NAME", "net.snowflake.client.jdbc.SnowflakeDriver" },
    ///             { "CONNECTION_TYPE", "Jdbc" },
    ///             { "CONNECTOR_URL", "s3://example/snowflake-jdbc.jar" },
    ///             { "JDBC_CONNECTION_URL", "[[\"default=jdbc:snowflake://example.com/?user=${user}&amp;password=${password}\"],\",\"]" },
    ///         },
    ///         MatchCriterias = new[]
    ///         {
    ///             "template-connection",
    ///         },
    ///     });
    /// 
    ///     // Reference the connector using match_criteria with the connector created above.
    ///     var example2 = new Aws.Glue.Connection("example2", new()
    ///     {
    ///         Name = "example2",
    ///         ConnectionType = "CUSTOM",
    ///         ConnectionProperties = 
    ///         {
    ///             { "CONNECTOR_CLASS_NAME", "net.snowflake.client.jdbc.SnowflakeDriver" },
    ///             { "CONNECTION_TYPE", "Jdbc" },
    ///             { "CONNECTOR_URL", "s3://example/snowflake-jdbc.jar" },
    ///             { "JDBC_CONNECTION_URL", "jdbc:snowflake://example.com/?user=${user}&amp;password=${password}" },
    ///             { "SECRET_ID", example.Apply(getSecretResult =&gt; getSecretResult.Name) },
    ///         },
    ///         MatchCriterias = new[]
    ///         {
    ///             "Connection",
    ///             example1.Name,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Azure Cosmos Connection
    /// 
    /// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azurecosmos).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.SecretsManager.Secret("example", new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var exampleSecretVersion = new Aws.SecretsManager.SecretVersion("example", new()
    ///     {
    ///         SecretId = example.Id,
    ///         SecretString = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["username"] = "exampleusername",
    ///             ["password"] = "examplepassword",
    ///         }),
    ///     });
    /// 
    ///     var exampleConnection = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionType = "AZURECOSMOS",
    ///         ConnectionProperties = 
    ///         {
    ///             { "SparkProperties", Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["secretId"] = example.Name,
    ///                 ["spark.cosmos.accountEndpoint"] = "https://exampledbaccount.documents.azure.com:443/",
    ///             })) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Azure SQL Connection
    /// 
    /// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azuresql).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.SecretsManager.Secret("example", new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var exampleSecretVersion = new Aws.SecretsManager.SecretVersion("example", new()
    ///     {
    ///         SecretId = example.Id,
    ///         SecretString = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["username"] = "exampleusername",
    ///             ["password"] = "examplepassword",
    ///         }),
    ///     });
    /// 
    ///     var exampleConnection = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionType = "AZURECOSMOS",
    ///         ConnectionProperties = 
    ///         {
    ///             { "SparkProperties", Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["secretId"] = example.Name,
    ///                 ["url"] = "jdbc:sqlserver:exampledbserver.database.windows.net:1433;database=exampledatabase",
    ///             })) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Google BigQuery Connection
    /// 
    /// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-bigquery).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.SecretsManager.Secret("example", new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var exampleSecretVersion = new Aws.SecretsManager.SecretVersion("example", new()
    ///     {
    ///         SecretId = example.Id,
    ///         SecretString = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["credentials"] = Std.Base64encode.Invoke(new()
    ///             {
    ///                 Input = @"{
    ///   ""type"": ""service_account"",
    ///   ""project_id"": ""example-project"",
    ///   ""private_key_id"": ""example-key"",
    ///   ""private_key"": ""-----BEGIN RSA PRIVATE KEY-----\nREDACTED\n-----END RSA PRIVATE KEY-----"",
    ///   ""client_email"": ""example-project@appspot.gserviceaccount.com"",
    ///   ""client_id"": example-client"",
    ///   ""auth_uri"": ""https://accounts.google.com/o/oauth2/auth"",
    ///   ""token_uri"": ""https://oauth2.googleapis.com/token"",
    ///   ""auth_provider_x509_cert_url"": ""https://www.googleapis.com/oauth2/v1/certs"",
    ///   ""client_x509_cert_url"": ""https://www.googleapis.com/robot/v1/metadata/x509/example-project%%40appspot.gserviceaccount.com"",
    ///   ""universe_domain"": ""googleapis.com""
    /// }
    /// ",
    ///             }).Apply(invoke =&gt; invoke.Result),
    ///         }),
    ///     });
    /// 
    ///     var exampleConnection = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionType = "BIGQUERY",
    ///         ConnectionProperties = 
    ///         {
    ///             { "SparkProperties", Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["secretId"] = example.Name,
    ///             })) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### OpenSearch Service Connection
    /// 
    /// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-opensearch).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.SecretsManager.Secret("example", new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var exampleSecretVersion = new Aws.SecretsManager.SecretVersion("example", new()
    ///     {
    ///         SecretId = example.Id,
    ///         SecretString = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["opensearch.net.http.auth.user"] = "exampleusername",
    ///             ["opensearch.net.http.auth.pass"] = "examplepassword",
    ///         }),
    ///     });
    /// 
    ///     var exampleConnection = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionType = "OPENSEARCH",
    ///         ConnectionProperties = 
    ///         {
    ///             { "SparkProperties", Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["secretId"] = example.Name,
    ///                 ["opensearch.nodes"] = "https://search-exampledomain-ixlmh4jieahrau3bfebcgp8cnm.us-east-1.es.amazonaws.com",
    ///                 ["opensearch.port"] = "443",
    ///                 ["opensearch.aws.sigv4.region"] = "us-east-1",
    ///                 ["opensearch.nodes.wan.only"] = "true",
    ///                 ["opensearch.aws.sigv4.enabled"] = "true",
    ///             })) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Snowflake Connection
    /// 
    /// For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-snowflake).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.SecretsManager.Secret("example", new()
    ///     {
    ///         Name = "example-secret",
    ///     });
    /// 
    ///     var exampleSecretVersion = new Aws.SecretsManager.SecretVersion("example", new()
    ///     {
    ///         SecretId = example.Id,
    ///         SecretString = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["sfUser"] = "exampleusername",
    ///             ["sfPassword"] = "examplepassword",
    ///         }),
    ///     });
    /// 
    ///     var exampleConnection = new Aws.Glue.Connection("example", new()
    ///     {
    ///         Name = "example",
    ///         ConnectionType = "SNOWFLAKE",
    ///         ConnectionProperties = 
    ///         {
    ///             { "SparkProperties", Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["secretId"] = example.Name,
    ///                 ["sfRole"] = "EXAMPLEETLROLE",
    ///                 ["sfUrl"] = "exampleorg-exampleconnection.snowflakecomputing.com",
    ///             })) },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Glue Connections using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:glue/connection:Connection MyConnection 123456789012:MyConnection
    /// ```
    /// </summary>
    [AwsResourceType("aws:glue/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Glue Connection.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
        /// 
        /// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
        /// </summary>
        [Output("connectionProperties")]
        public Output<ImmutableDictionary<string, string>?> ConnectionProperties { get; private set; } = null!;

        /// <summary>
        /// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
        /// </summary>
        [Output("connectionType")]
        public Output<string?> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// Description of the connection.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// List of criteria that can be used in selecting this connection.
        /// </summary>
        [Output("matchCriterias")]
        public Output<ImmutableArray<string>> MatchCriterias { get; private set; } = null!;

        /// <summary>
        /// Name of the connection.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Map of physical connection requirements, such as VPC and SecurityGroup. See `physical_connection_requirements` Block for details.
        /// </summary>
        [Output("physicalConnectionRequirements")]
        public Output<Outputs.ConnectionPhysicalConnectionRequirements?> PhysicalConnectionRequirements { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:glue/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "connectionProperties",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("connectionProperties")]
        private InputMap<string>? _connectionProperties;

        /// <summary>
        /// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
        /// 
        /// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
        /// </summary>
        public InputMap<string> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _connectionProperties = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Description of the connection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("matchCriterias")]
        private InputList<string>? _matchCriterias;

        /// <summary>
        /// List of criteria that can be used in selecting this connection.
        /// </summary>
        public InputList<string> MatchCriterias
        {
            get => _matchCriterias ?? (_matchCriterias = new InputList<string>());
            set => _matchCriterias = value;
        }

        /// <summary>
        /// Name of the connection.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Map of physical connection requirements, such as VPC and SecurityGroup. See `physical_connection_requirements` Block for details.
        /// </summary>
        [Input("physicalConnectionRequirements")]
        public Input<Inputs.ConnectionPhysicalConnectionRequirementsArgs>? PhysicalConnectionRequirements { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Glue Connection.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("connectionProperties")]
        private InputMap<string>? _connectionProperties;

        /// <summary>
        /// Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).
        /// 
        /// **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to Example Usage.
        /// </summary>
        public InputMap<string> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _connectionProperties = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Description of the connection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("matchCriterias")]
        private InputList<string>? _matchCriterias;

        /// <summary>
        /// List of criteria that can be used in selecting this connection.
        /// </summary>
        public InputList<string> MatchCriterias
        {
            get => _matchCriterias ?? (_matchCriterias = new InputList<string>());
            set => _matchCriterias = value;
        }

        /// <summary>
        /// Name of the connection.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Map of physical connection requirements, such as VPC and SecurityGroup. See `physical_connection_requirements` Block for details.
        /// </summary>
        [Input("physicalConnectionRequirements")]
        public Input<Inputs.ConnectionPhysicalConnectionRequirementsGetArgs>? PhysicalConnectionRequirements { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
