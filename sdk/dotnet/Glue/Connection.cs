// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    /// <summary>
    /// Provides a Glue Connection resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glue_connection.html.markdown.
    /// </summary>
    public partial class Connection : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// A map of key-value pairs used as parameters for this connection.
        /// </summary>
        [Output("connectionProperties")]
        public Output<ImmutableDictionary<string, object>> ConnectionProperties { get; private set; } = null!;

        /// <summary>
        /// The type of the connection. Defaults to `JBDC`.
        /// </summary>
        [Output("connectionType")]
        public Output<string?> ConnectionType { get; private set; } = null!;

        /// <summary>
        /// Description of the connection.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of criteria that can be used in selecting this connection.
        /// </summary>
        [Output("matchCriterias")]
        public Output<ImmutableArray<string>> MatchCriterias { get; private set; } = null!;

        /// <summary>
        /// The name of the connection.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
        /// </summary>
        [Output("physicalConnectionRequirements")]
        public Output<Outputs.ConnectionPhysicalConnectionRequirements?> PhysicalConnectionRequirements { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs args, CustomResourceOptions? options = null)
            : base("aws:glue/connection:Connection", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("connectionProperties", required: true)]
        private InputMap<object>? _connectionProperties;

        /// <summary>
        /// A map of key-value pairs used as parameters for this connection.
        /// </summary>
        public InputMap<object> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputMap<object>());
            set => _connectionProperties = value;
        }

        /// <summary>
        /// The type of the connection. Defaults to `JBDC`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Description of the connection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("matchCriterias")]
        private InputList<string>? _matchCriterias;

        /// <summary>
        /// A list of criteria that can be used in selecting this connection.
        /// </summary>
        public InputList<string> MatchCriterias
        {
            get => _matchCriterias ?? (_matchCriterias = new InputList<string>());
            set => _matchCriterias = value;
        }

        /// <summary>
        /// The name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
        /// </summary>
        [Input("physicalConnectionRequirements")]
        public Input<Inputs.ConnectionPhysicalConnectionRequirementsArgs>? PhysicalConnectionRequirements { get; set; }

        public ConnectionArgs()
        {
        }
    }

    public sealed class ConnectionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("connectionProperties")]
        private InputMap<object>? _connectionProperties;

        /// <summary>
        /// A map of key-value pairs used as parameters for this connection.
        /// </summary>
        public InputMap<object> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputMap<object>());
            set => _connectionProperties = value;
        }

        /// <summary>
        /// The type of the connection. Defaults to `JBDC`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// Description of the connection.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("matchCriterias")]
        private InputList<string>? _matchCriterias;

        /// <summary>
        /// A list of criteria that can be used in selecting this connection.
        /// </summary>
        public InputList<string> MatchCriterias
        {
            get => _matchCriterias ?? (_matchCriterias = new InputList<string>());
            set => _matchCriterias = value;
        }

        /// <summary>
        /// The name of the connection.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A map of physical connection requirements, such as VPC and SecurityGroup. Defined below.
        /// </summary>
        [Input("physicalConnectionRequirements")]
        public Input<Inputs.ConnectionPhysicalConnectionRequirementsGetArgs>? PhysicalConnectionRequirements { get; set; }

        public ConnectionState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ConnectionPhysicalConnectionRequirementsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("securityGroupIdLists")]
        private InputList<string>? _securityGroupIdLists;

        /// <summary>
        /// The security group ID list used by the connection.
        /// </summary>
        public InputList<string> SecurityGroupIdLists
        {
            get => _securityGroupIdLists ?? (_securityGroupIdLists = new InputList<string>());
            set => _securityGroupIdLists = value;
        }

        /// <summary>
        /// The subnet ID used by the connection.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public ConnectionPhysicalConnectionRequirementsArgs()
        {
        }
    }

    public sealed class ConnectionPhysicalConnectionRequirementsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("securityGroupIdLists")]
        private InputList<string>? _securityGroupIdLists;

        /// <summary>
        /// The security group ID list used by the connection.
        /// </summary>
        public InputList<string> SecurityGroupIdLists
        {
            get => _securityGroupIdLists ?? (_securityGroupIdLists = new InputList<string>());
            set => _securityGroupIdLists = value;
        }

        /// <summary>
        /// The subnet ID used by the connection.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public ConnectionPhysicalConnectionRequirementsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ConnectionPhysicalConnectionRequirements
    {
        /// <summary>
        /// The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
        /// </summary>
        public readonly string? AvailabilityZone;
        /// <summary>
        /// The security group ID list used by the connection.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIdLists;
        /// <summary>
        /// The subnet ID used by the connection.
        /// </summary>
        public readonly string? SubnetId;

        [OutputConstructor]
        private ConnectionPhysicalConnectionRequirements(
            string? availabilityZone,
            ImmutableArray<string> securityGroupIdLists,
            string? subnetId)
        {
            AvailabilityZone = availabilityZone;
            SecurityGroupIdLists = securityGroupIdLists;
            SubnetId = subnetId;
        }
    }
    }
}
