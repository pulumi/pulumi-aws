// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    [AwsResourceType("aws:glue/connection:Connection")]
    public partial class Connection : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        [Output("connectionProperties")]
        public Output<ImmutableDictionary<string, string>?> ConnectionProperties { get; private set; } = null!;

        [Output("connectionType")]
        public Output<string?> ConnectionType { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("matchCriterias")]
        public Output<ImmutableArray<string>> MatchCriterias { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("physicalConnectionRequirements")]
        public Output<Outputs.ConnectionPhysicalConnectionRequirements?> PhysicalConnectionRequirements { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Connection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Connection(string name, ConnectionArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:glue/connection:Connection", name, args ?? new ConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Connection(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/connection:Connection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "connectionProperties",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Connection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Connection Get(string name, Input<string> id, ConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new Connection(name, id, state, options);
        }
    }

    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("connectionProperties")]
        private InputMap<string>? _connectionProperties;
        public InputMap<string> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _connectionProperties = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("matchCriterias")]
        private InputList<string>? _matchCriterias;
        public InputList<string> MatchCriterias
        {
            get => _matchCriterias ?? (_matchCriterias = new InputList<string>());
            set => _matchCriterias = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physicalConnectionRequirements")]
        public Input<Inputs.ConnectionPhysicalConnectionRequirementsArgs>? PhysicalConnectionRequirements { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ConnectionArgs()
        {
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }

    public sealed class ConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("connectionProperties")]
        private InputMap<string>? _connectionProperties;
        public InputMap<string> ConnectionProperties
        {
            get => _connectionProperties ?? (_connectionProperties = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _connectionProperties = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("matchCriterias")]
        private InputList<string>? _matchCriterias;
        public InputList<string> MatchCriterias
        {
            get => _matchCriterias ?? (_matchCriterias = new InputList<string>());
            set => _matchCriterias = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("physicalConnectionRequirements")]
        public Input<Inputs.ConnectionPhysicalConnectionRequirementsGetArgs>? PhysicalConnectionRequirements { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ConnectionState()
        {
        }
        public static new ConnectionState Empty => new ConnectionState();
    }
}
