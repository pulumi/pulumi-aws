// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    public static class GetConnection
    {
        /// <summary>
        /// This data source can be used to fetch information about a specific Glue Connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Glue.GetConnection.InvokeAsync(new Aws.Glue.GetConnectionArgs
        ///         {
        ///             Id = "123456789123:connection",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetConnectionResult> InvokeAsync(GetConnectionArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetConnectionResult>("aws:glue/getConnection:getConnection", args ?? new GetConnectionArgs(), options.WithVersion());
    }


    public sealed class GetConnectionArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A concatenation of the catalog ID and connection name. For example, if your account ID is
        /// `123456789123` and the connection name is `conn` then the ID is `123456789123:conn`.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetConnectionArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetConnectionResult
    {
        /// <summary>
        /// The ARN of the Glue Connection.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The catalog ID of the Glue Connection.
        /// </summary>
        public readonly string CatalogId;
        public readonly ImmutableDictionary<string, string> ConnectionProperties;
        /// <summary>
        /// The type of Glue Connection.
        /// </summary>
        public readonly string ConnectionType;
        /// <summary>
        /// Description of the connection.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// A list of criteria that can be used in selecting this connection.
        /// </summary>
        public readonly ImmutableArray<string> MatchCriterias;
        /// <summary>
        /// The name of the Glue Connection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A map of physical connection requirements, such as VPC and SecurityGroup.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionPhysicalConnectionRequirementResult> PhysicalConnectionRequirements;

        [OutputConstructor]
        private GetConnectionResult(
            string arn,

            string catalogId,

            ImmutableDictionary<string, string> connectionProperties,

            string connectionType,

            string description,

            string id,

            ImmutableArray<string> matchCriterias,

            string name,

            ImmutableArray<Outputs.GetConnectionPhysicalConnectionRequirementResult> physicalConnectionRequirements)
        {
            Arn = arn;
            CatalogId = catalogId;
            ConnectionProperties = connectionProperties;
            ConnectionType = connectionType;
            Description = description;
            Id = id;
            MatchCriterias = matchCriterias;
            Name = name;
            PhysicalConnectionRequirements = physicalConnectionRequirements;
        }
    }
}
