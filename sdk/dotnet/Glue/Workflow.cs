// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    /// <summary>
    /// Provides a Glue Workflow resource.
    /// The workflow graph (DAG) can be build using the `aws.glue.Trigger` resource.
    /// See the example below for creating a graph with four nodes (two triggers and two jobs).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Glue.Workflow("example", new Aws.Glue.WorkflowArgs
    ///         {
    ///         });
    ///         var example_start = new Aws.Glue.Trigger("example-start", new Aws.Glue.TriggerArgs
    ///         {
    ///             Type = "ON_DEMAND",
    ///             WorkflowName = example.Name,
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     JobName = "example-job",
    ///                 },
    ///             },
    ///         });
    ///         var example_inner = new Aws.Glue.Trigger("example-inner", new Aws.Glue.TriggerArgs
    ///         {
    ///             Type = "CONDITIONAL",
    ///             WorkflowName = example.Name,
    ///             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
    ///             {
    ///                 Conditions = 
    ///                 {
    ///                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
    ///                     {
    ///                         JobName = "example-job",
    ///                         State = "SUCCEEDED",
    ///                     },
    ///                 },
    ///             },
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     JobName = "another-example-job",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Glue Workflows can be imported using `name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:glue/workflow:Workflow MyWorkflow MyWorkflow
    /// ```
    /// </summary>
    public partial class Workflow : Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of Glue Workflow
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
        /// </summary>
        [Output("defaultRunProperties")]
        public Output<ImmutableDictionary<string, object>?> DefaultRunProperties { get; private set; } = null!;

        /// <summary>
        /// Description of the workflow.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
        /// </summary>
        [Output("maxConcurrentRuns")]
        public Output<int?> MaxConcurrentRuns { get; private set; } = null!;

        /// <summary>
        /// The name you assign to this workflow.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Workflow resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workflow(string name, WorkflowArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:glue/workflow:Workflow", name, args ?? new WorkflowArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workflow(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/workflow:Workflow", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workflow resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workflow Get(string name, Input<string> id, WorkflowState? state = null, CustomResourceOptions? options = null)
        {
            return new Workflow(name, id, state, options);
        }
    }

    public sealed class WorkflowArgs : Pulumi.ResourceArgs
    {
        [Input("defaultRunProperties")]
        private InputMap<object>? _defaultRunProperties;

        /// <summary>
        /// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
        /// </summary>
        public InputMap<object> DefaultRunProperties
        {
            get => _defaultRunProperties ?? (_defaultRunProperties = new InputMap<object>());
            set => _defaultRunProperties = value;
        }

        /// <summary>
        /// Description of the workflow.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
        /// </summary>
        [Input("maxConcurrentRuns")]
        public Input<int>? MaxConcurrentRuns { get; set; }

        /// <summary>
        /// The name you assign to this workflow.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public WorkflowArgs()
        {
        }
    }

    public sealed class WorkflowState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of Glue Workflow
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("defaultRunProperties")]
        private InputMap<object>? _defaultRunProperties;

        /// <summary>
        /// A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
        /// </summary>
        public InputMap<object> DefaultRunProperties
        {
            get => _defaultRunProperties ?? (_defaultRunProperties = new InputMap<object>());
            set => _defaultRunProperties = value;
        }

        /// <summary>
        /// Description of the workflow.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
        /// </summary>
        [Input("maxConcurrentRuns")]
        public Input<int>? MaxConcurrentRuns { get; set; }

        /// <summary>
        /// The name you assign to this workflow.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public WorkflowState()
        {
        }
    }
}
