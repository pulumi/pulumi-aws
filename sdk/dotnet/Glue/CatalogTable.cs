// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    [AwsResourceType("aws:glue/catalogTable:CatalogTable")]
    public partial class CatalogTable : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("owner")]
        public Output<string?> Owner { get; private set; } = null!;

        [Output("parameters")]
        public Output<ImmutableDictionary<string, string>?> Parameters { get; private set; } = null!;

        [Output("partitionIndices")]
        public Output<ImmutableArray<Outputs.CatalogTablePartitionIndex>> PartitionIndices { get; private set; } = null!;

        [Output("partitionKeys")]
        public Output<ImmutableArray<Outputs.CatalogTablePartitionKey>> PartitionKeys { get; private set; } = null!;

        [Output("retention")]
        public Output<int?> Retention { get; private set; } = null!;

        [Output("storageDescriptor")]
        public Output<Outputs.CatalogTableStorageDescriptor?> StorageDescriptor { get; private set; } = null!;

        [Output("tableType")]
        public Output<string?> TableType { get; private set; } = null!;

        [Output("targetTable")]
        public Output<Outputs.CatalogTableTargetTable?> TargetTable { get; private set; } = null!;

        [Output("viewExpandedText")]
        public Output<string?> ViewExpandedText { get; private set; } = null!;

        [Output("viewOriginalText")]
        public Output<string?> ViewOriginalText { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogTable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogTable(string name, CatalogTableArgs args, CustomResourceOptions? options = null)
            : base("aws:glue/catalogTable:CatalogTable", name, args ?? new CatalogTableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogTable(string name, Input<string> id, CatalogTableState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/catalogTable:CatalogTable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogTable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogTable Get(string name, Input<string> id, CatalogTableState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogTable(name, id, state, options);
        }
    }

    public sealed class CatalogTableArgs : global::Pulumi.ResourceArgs
    {
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("partitionIndices")]
        private InputList<Inputs.CatalogTablePartitionIndexArgs>? _partitionIndices;
        public InputList<Inputs.CatalogTablePartitionIndexArgs> PartitionIndices
        {
            get => _partitionIndices ?? (_partitionIndices = new InputList<Inputs.CatalogTablePartitionIndexArgs>());
            set => _partitionIndices = value;
        }

        [Input("partitionKeys")]
        private InputList<Inputs.CatalogTablePartitionKeyArgs>? _partitionKeys;
        public InputList<Inputs.CatalogTablePartitionKeyArgs> PartitionKeys
        {
            get => _partitionKeys ?? (_partitionKeys = new InputList<Inputs.CatalogTablePartitionKeyArgs>());
            set => _partitionKeys = value;
        }

        [Input("retention")]
        public Input<int>? Retention { get; set; }

        [Input("storageDescriptor")]
        public Input<Inputs.CatalogTableStorageDescriptorArgs>? StorageDescriptor { get; set; }

        [Input("tableType")]
        public Input<string>? TableType { get; set; }

        [Input("targetTable")]
        public Input<Inputs.CatalogTableTargetTableArgs>? TargetTable { get; set; }

        [Input("viewExpandedText")]
        public Input<string>? ViewExpandedText { get; set; }

        [Input("viewOriginalText")]
        public Input<string>? ViewOriginalText { get; set; }

        public CatalogTableArgs()
        {
        }
        public static new CatalogTableArgs Empty => new CatalogTableArgs();
    }

    public sealed class CatalogTableState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("owner")]
        public Input<string>? Owner { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        [Input("partitionIndices")]
        private InputList<Inputs.CatalogTablePartitionIndexGetArgs>? _partitionIndices;
        public InputList<Inputs.CatalogTablePartitionIndexGetArgs> PartitionIndices
        {
            get => _partitionIndices ?? (_partitionIndices = new InputList<Inputs.CatalogTablePartitionIndexGetArgs>());
            set => _partitionIndices = value;
        }

        [Input("partitionKeys")]
        private InputList<Inputs.CatalogTablePartitionKeyGetArgs>? _partitionKeys;
        public InputList<Inputs.CatalogTablePartitionKeyGetArgs> PartitionKeys
        {
            get => _partitionKeys ?? (_partitionKeys = new InputList<Inputs.CatalogTablePartitionKeyGetArgs>());
            set => _partitionKeys = value;
        }

        [Input("retention")]
        public Input<int>? Retention { get; set; }

        [Input("storageDescriptor")]
        public Input<Inputs.CatalogTableStorageDescriptorGetArgs>? StorageDescriptor { get; set; }

        [Input("tableType")]
        public Input<string>? TableType { get; set; }

        [Input("targetTable")]
        public Input<Inputs.CatalogTableTargetTableGetArgs>? TargetTable { get; set; }

        [Input("viewExpandedText")]
        public Input<string>? ViewExpandedText { get; set; }

        [Input("viewOriginalText")]
        public Input<string>? ViewOriginalText { get; set; }

        public CatalogTableState()
        {
        }
        public static new CatalogTableState Empty => new CatalogTableState();
    }
}
