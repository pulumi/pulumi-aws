// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    /// <summary>
    /// Provides a Glue Classifier resource.
    /// 
    /// &gt; **NOTE:** It is only valid to create one type of classifier (csv, grok, JSON, or XML). Changing classifier types will recreate the classifier.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/glue_classifier.html.markdown.
    /// </summary>
    public partial class Classifier : Pulumi.CustomResource
    {
        /// <summary>
        /// A classifier for Csv content. Defined below.
        /// </summary>
        [Output("csvClassifier")]
        public Output<Outputs.ClassifierCsvClassifier?> CsvClassifier { get; private set; } = null!;

        /// <summary>
        /// A classifier that uses grok patterns. Defined below.
        /// </summary>
        [Output("grokClassifier")]
        public Output<Outputs.ClassifierGrokClassifier?> GrokClassifier { get; private set; } = null!;

        /// <summary>
        /// A classifier for JSON content. Defined below.
        /// </summary>
        [Output("jsonClassifier")]
        public Output<Outputs.ClassifierJsonClassifier?> JsonClassifier { get; private set; } = null!;

        /// <summary>
        /// The name of the classifier.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A classifier for XML content. Defined below.
        /// </summary>
        [Output("xmlClassifier")]
        public Output<Outputs.ClassifierXmlClassifier?> XmlClassifier { get; private set; } = null!;


        /// <summary>
        /// Create a Classifier resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Classifier(string name, ClassifierArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:glue/classifier:Classifier", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Classifier(string name, Input<string> id, ClassifierState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/classifier:Classifier", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Classifier resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Classifier Get(string name, Input<string> id, ClassifierState? state = null, CustomResourceOptions? options = null)
        {
            return new Classifier(name, id, state, options);
        }
    }

    public sealed class ClassifierArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A classifier for Csv content. Defined below.
        /// </summary>
        [Input("csvClassifier")]
        public Input<Inputs.ClassifierCsvClassifierArgs>? CsvClassifier { get; set; }

        /// <summary>
        /// A classifier that uses grok patterns. Defined below.
        /// </summary>
        [Input("grokClassifier")]
        public Input<Inputs.ClassifierGrokClassifierArgs>? GrokClassifier { get; set; }

        /// <summary>
        /// A classifier for JSON content. Defined below.
        /// </summary>
        [Input("jsonClassifier")]
        public Input<Inputs.ClassifierJsonClassifierArgs>? JsonClassifier { get; set; }

        /// <summary>
        /// The name of the classifier.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A classifier for XML content. Defined below.
        /// </summary>
        [Input("xmlClassifier")]
        public Input<Inputs.ClassifierXmlClassifierArgs>? XmlClassifier { get; set; }

        public ClassifierArgs()
        {
        }
    }

    public sealed class ClassifierState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A classifier for Csv content. Defined below.
        /// </summary>
        [Input("csvClassifier")]
        public Input<Inputs.ClassifierCsvClassifierGetArgs>? CsvClassifier { get; set; }

        /// <summary>
        /// A classifier that uses grok patterns. Defined below.
        /// </summary>
        [Input("grokClassifier")]
        public Input<Inputs.ClassifierGrokClassifierGetArgs>? GrokClassifier { get; set; }

        /// <summary>
        /// A classifier for JSON content. Defined below.
        /// </summary>
        [Input("jsonClassifier")]
        public Input<Inputs.ClassifierJsonClassifierGetArgs>? JsonClassifier { get; set; }

        /// <summary>
        /// The name of the classifier.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A classifier for XML content. Defined below.
        /// </summary>
        [Input("xmlClassifier")]
        public Input<Inputs.ClassifierXmlClassifierGetArgs>? XmlClassifier { get; set; }

        public ClassifierState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ClassifierCsvClassifierArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables the processing of files that contain only one column.
        /// </summary>
        [Input("allowSingleColumn")]
        public Input<bool>? AllowSingleColumn { get; set; }

        /// <summary>
        /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
        /// </summary>
        [Input("containsHeader")]
        public Input<string>? ContainsHeader { get; set; }

        /// <summary>
        /// The delimiter used in the Csv to separate columns.
        /// </summary>
        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        /// <summary>
        /// Specifies whether to trim column values. 
        /// </summary>
        [Input("disableValueTrimming")]
        public Input<bool>? DisableValueTrimming { get; set; }

        [Input("headers")]
        private InputList<string>? _headers;

        /// <summary>
        /// A list of strings representing column names.
        /// </summary>
        public InputList<string> Headers
        {
            get => _headers ?? (_headers = new InputList<string>());
            set => _headers = value;
        }

        /// <summary>
        /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        /// </summary>
        [Input("quoteSymbol")]
        public Input<string>? QuoteSymbol { get; set; }

        public ClassifierCsvClassifierArgs()
        {
        }
    }

    public sealed class ClassifierCsvClassifierGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables the processing of files that contain only one column.
        /// </summary>
        [Input("allowSingleColumn")]
        public Input<bool>? AllowSingleColumn { get; set; }

        /// <summary>
        /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
        /// </summary>
        [Input("containsHeader")]
        public Input<string>? ContainsHeader { get; set; }

        /// <summary>
        /// The delimiter used in the Csv to separate columns.
        /// </summary>
        [Input("delimiter")]
        public Input<string>? Delimiter { get; set; }

        /// <summary>
        /// Specifies whether to trim column values. 
        /// </summary>
        [Input("disableValueTrimming")]
        public Input<bool>? DisableValueTrimming { get; set; }

        [Input("headers")]
        private InputList<string>? _headers;

        /// <summary>
        /// A list of strings representing column names.
        /// </summary>
        public InputList<string> Headers
        {
            get => _headers ?? (_headers = new InputList<string>());
            set => _headers = value;
        }

        /// <summary>
        /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        /// </summary>
        [Input("quoteSymbol")]
        public Input<string>? QuoteSymbol { get; set; }

        public ClassifierCsvClassifierGetArgs()
        {
        }
    }

    public sealed class ClassifierGrokClassifierArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An identifier of the data format that the classifier matches.
        /// </summary>
        [Input("classification", required: true)]
        public Input<string> Classification { get; set; } = null!;

        /// <summary>
        /// Custom grok patterns used by this classifier.
        /// </summary>
        [Input("customPatterns")]
        public Input<string>? CustomPatterns { get; set; }

        /// <summary>
        /// The grok pattern used by this classifier.
        /// </summary>
        [Input("grokPattern", required: true)]
        public Input<string> GrokPattern { get; set; } = null!;

        public ClassifierGrokClassifierArgs()
        {
        }
    }

    public sealed class ClassifierGrokClassifierGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An identifier of the data format that the classifier matches.
        /// </summary>
        [Input("classification", required: true)]
        public Input<string> Classification { get; set; } = null!;

        /// <summary>
        /// Custom grok patterns used by this classifier.
        /// </summary>
        [Input("customPatterns")]
        public Input<string>? CustomPatterns { get; set; }

        /// <summary>
        /// The grok pattern used by this classifier.
        /// </summary>
        [Input("grokPattern", required: true)]
        public Input<string> GrokPattern { get; set; } = null!;

        public ClassifierGrokClassifierGetArgs()
        {
        }
    }

    public sealed class ClassifierJsonClassifierArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        /// </summary>
        [Input("jsonPath", required: true)]
        public Input<string> JsonPath { get; set; } = null!;

        public ClassifierJsonClassifierArgs()
        {
        }
    }

    public sealed class ClassifierJsonClassifierGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        /// </summary>
        [Input("jsonPath", required: true)]
        public Input<string> JsonPath { get; set; } = null!;

        public ClassifierJsonClassifierGetArgs()
        {
        }
    }

    public sealed class ClassifierXmlClassifierArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An identifier of the data format that the classifier matches.
        /// </summary>
        [Input("classification", required: true)]
        public Input<string> Classification { get; set; } = null!;

        /// <summary>
        /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/&gt;`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;` is okay, but `&lt;row item_a="A" item_b="B" /&gt;` is not).
        /// </summary>
        [Input("rowTag", required: true)]
        public Input<string> RowTag { get; set; } = null!;

        public ClassifierXmlClassifierArgs()
        {
        }
    }

    public sealed class ClassifierXmlClassifierGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An identifier of the data format that the classifier matches.
        /// </summary>
        [Input("classification", required: true)]
        public Input<string> Classification { get; set; } = null!;

        /// <summary>
        /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/&gt;`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;` is okay, but `&lt;row item_a="A" item_b="B" /&gt;` is not).
        /// </summary>
        [Input("rowTag", required: true)]
        public Input<string> RowTag { get; set; } = null!;

        public ClassifierXmlClassifierGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ClassifierCsvClassifier
    {
        /// <summary>
        /// Enables the processing of files that contain only one column.
        /// </summary>
        public readonly bool? AllowSingleColumn;
        /// <summary>
        /// Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
        /// </summary>
        public readonly string? ContainsHeader;
        /// <summary>
        /// The delimiter used in the Csv to separate columns.
        /// </summary>
        public readonly string? Delimiter;
        /// <summary>
        /// Specifies whether to trim column values. 
        /// </summary>
        public readonly bool? DisableValueTrimming;
        /// <summary>
        /// A list of strings representing column names.
        /// </summary>
        public readonly ImmutableArray<string> Headers;
        /// <summary>
        /// A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
        /// </summary>
        public readonly string? QuoteSymbol;

        [OutputConstructor]
        private ClassifierCsvClassifier(
            bool? allowSingleColumn,
            string? containsHeader,
            string? delimiter,
            bool? disableValueTrimming,
            ImmutableArray<string> headers,
            string? quoteSymbol)
        {
            AllowSingleColumn = allowSingleColumn;
            ContainsHeader = containsHeader;
            Delimiter = delimiter;
            DisableValueTrimming = disableValueTrimming;
            Headers = headers;
            QuoteSymbol = quoteSymbol;
        }
    }

    [OutputType]
    public sealed class ClassifierGrokClassifier
    {
        /// <summary>
        /// An identifier of the data format that the classifier matches.
        /// </summary>
        public readonly string Classification;
        /// <summary>
        /// Custom grok patterns used by this classifier.
        /// </summary>
        public readonly string? CustomPatterns;
        /// <summary>
        /// The grok pattern used by this classifier.
        /// </summary>
        public readonly string GrokPattern;

        [OutputConstructor]
        private ClassifierGrokClassifier(
            string classification,
            string? customPatterns,
            string grokPattern)
        {
            Classification = classification;
            CustomPatterns = customPatterns;
            GrokPattern = grokPattern;
        }
    }

    [OutputType]
    public sealed class ClassifierJsonClassifier
    {
        /// <summary>
        /// A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).
        /// </summary>
        public readonly string JsonPath;

        [OutputConstructor]
        private ClassifierJsonClassifier(string jsonPath)
        {
            JsonPath = jsonPath;
        }
    }

    [OutputType]
    public sealed class ClassifierXmlClassifier
    {
        /// <summary>
        /// An identifier of the data format that the classifier matches.
        /// </summary>
        public readonly string Classification;
        /// <summary>
        /// The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/&gt;`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;` is okay, but `&lt;row item_a="A" item_b="B" /&gt;` is not).
        /// </summary>
        public readonly string RowTag;

        [OutputConstructor]
        private ClassifierXmlClassifier(
            string classification,
            string rowTag)
        {
            Classification = classification;
            RowTag = rowTag;
        }
    }
    }
}
