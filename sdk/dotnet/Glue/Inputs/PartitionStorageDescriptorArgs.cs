// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue.Inputs
{

    public sealed class PartitionStorageDescriptorArgs : Pulumi.ResourceArgs
    {
        [Input("bucketColumns")]
        private InputList<string>? _bucketColumns;

        /// <summary>
        /// A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
        /// </summary>
        public InputList<string> BucketColumns
        {
            get => _bucketColumns ?? (_bucketColumns = new InputList<string>());
            set => _bucketColumns = value;
        }

        [Input("columns")]
        private InputList<Inputs.PartitionStorageDescriptorColumnArgs>? _columns;

        /// <summary>
        /// A list of the Columns in the table.
        /// </summary>
        public InputList<Inputs.PartitionStorageDescriptorColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.PartitionStorageDescriptorColumnArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// True if the data in the table is compressed, or False if not.
        /// </summary>
        [Input("compressed")]
        public Input<bool>? Compressed { get; set; }

        /// <summary>
        /// The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
        /// </summary>
        [Input("inputFormat")]
        public Input<string>? InputFormat { get; set; }

        /// <summary>
        /// The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Must be specified if the table contains any dimension columns.
        /// </summary>
        [Input("numberOfBuckets")]
        public Input<int>? NumberOfBuckets { get; set; }

        /// <summary>
        /// The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
        /// </summary>
        [Input("outputFormat")]
        public Input<string>? OutputFormat { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// A map of initialization parameters for the SerDe, in key-value form.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// Serialization/deserialization (SerDe) information.
        /// </summary>
        [Input("serDeInfo")]
        public Input<Inputs.PartitionStorageDescriptorSerDeInfoArgs>? SerDeInfo { get; set; }

        /// <summary>
        /// Information about values that appear very frequently in a column (skewed values).
        /// </summary>
        [Input("skewedInfo")]
        public Input<Inputs.PartitionStorageDescriptorSkewedInfoArgs>? SkewedInfo { get; set; }

        [Input("sortColumns")]
        private InputList<Inputs.PartitionStorageDescriptorSortColumnArgs>? _sortColumns;

        /// <summary>
        /// A list of Order objects specifying the sort order of each bucket in the table.
        /// </summary>
        public InputList<Inputs.PartitionStorageDescriptorSortColumnArgs> SortColumns
        {
            get => _sortColumns ?? (_sortColumns = new InputList<Inputs.PartitionStorageDescriptorSortColumnArgs>());
            set => _sortColumns = value;
        }

        /// <summary>
        /// True if the table data is stored in subdirectories, or False if not.
        /// </summary>
        [Input("storedAsSubDirectories")]
        public Input<bool>? StoredAsSubDirectories { get; set; }

        public PartitionStorageDescriptorArgs()
        {
        }
    }
}
