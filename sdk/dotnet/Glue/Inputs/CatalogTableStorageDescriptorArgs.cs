// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue.Inputs
{

    public sealed class CatalogTableStorageDescriptorArgs : Pulumi.ResourceArgs
    {
        [Input("bucketColumns")]
        private InputList<string>? _bucketColumns;

        /// <summary>
        /// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
        /// </summary>
        public InputList<string> BucketColumns
        {
            get => _bucketColumns ?? (_bucketColumns = new InputList<string>());
            set => _bucketColumns = value;
        }

        [Input("columns")]
        private InputList<Inputs.CatalogTableStorageDescriptorColumnArgs>? _columns;

        /// <summary>
        /// Configuration block for columns in the table. See `columns` below.
        /// </summary>
        public InputList<Inputs.CatalogTableStorageDescriptorColumnArgs> Columns
        {
            get => _columns ?? (_columns = new InputList<Inputs.CatalogTableStorageDescriptorColumnArgs>());
            set => _columns = value;
        }

        /// <summary>
        /// Whether the data in the table is compressed.
        /// </summary>
        [Input("compressed")]
        public Input<bool>? Compressed { get; set; }

        /// <summary>
        /// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
        /// </summary>
        [Input("inputFormat")]
        public Input<string>? InputFormat { get; set; }

        /// <summary>
        /// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Must be specified if the table contains any dimension columns.
        /// </summary>
        [Input("numberOfBuckets")]
        public Input<int>? NumberOfBuckets { get; set; }

        /// <summary>
        /// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
        /// </summary>
        [Input("outputFormat")]
        public Input<string>? OutputFormat { get; set; }

        [Input("parameters")]
        private InputMap<string>? _parameters;

        /// <summary>
        /// Map of initialization parameters for the SerDe, in key-value form.
        /// </summary>
        public InputMap<string> Parameters
        {
            get => _parameters ?? (_parameters = new InputMap<string>());
            set => _parameters = value;
        }

        /// <summary>
        /// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
        /// </summary>
        [Input("schemaReference")]
        public Input<Inputs.CatalogTableStorageDescriptorSchemaReferenceArgs>? SchemaReference { get; set; }

        /// <summary>
        /// Configuration block for serialization and deserialization ("SerDe") information. See `ser_de_info` below.
        /// </summary>
        [Input("serDeInfo")]
        public Input<Inputs.CatalogTableStorageDescriptorSerDeInfoArgs>? SerDeInfo { get; set; }

        /// <summary>
        /// Configuration block with information about values that appear very frequently in a column (skewed values). See `skewed_info` below.
        /// </summary>
        [Input("skewedInfo")]
        public Input<Inputs.CatalogTableStorageDescriptorSkewedInfoArgs>? SkewedInfo { get; set; }

        [Input("sortColumns")]
        private InputList<Inputs.CatalogTableStorageDescriptorSortColumnArgs>? _sortColumns;

        /// <summary>
        /// Configuration block for the sort order of each bucket in the table. See `sort_columns` below.
        /// </summary>
        public InputList<Inputs.CatalogTableStorageDescriptorSortColumnArgs> SortColumns
        {
            get => _sortColumns ?? (_sortColumns = new InputList<Inputs.CatalogTableStorageDescriptorSortColumnArgs>());
            set => _sortColumns = value;
        }

        /// <summary>
        /// Whether the table data is stored in subdirectories.
        /// </summary>
        [Input("storedAsSubDirectories")]
        public Input<bool>? StoredAsSubDirectories { get; set; }

        public CatalogTableStorageDescriptorArgs()
        {
        }
    }
}
