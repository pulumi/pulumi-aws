// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    [AwsResourceType("aws:glue/job:Job")]
    public partial class Job : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("command")]
        public Output<Outputs.JobCommand> Command { get; private set; } = null!;

        [Output("connections")]
        public Output<ImmutableArray<string>> Connections { get; private set; } = null!;

        [Output("defaultArguments")]
        public Output<ImmutableDictionary<string, string>?> DefaultArguments { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("executionClass")]
        public Output<string?> ExecutionClass { get; private set; } = null!;

        [Output("executionProperty")]
        public Output<Outputs.JobExecutionProperty> ExecutionProperty { get; private set; } = null!;

        [Output("glueVersion")]
        public Output<string> GlueVersion { get; private set; } = null!;

        [Output("maxCapacity")]
        public Output<double> MaxCapacity { get; private set; } = null!;

        [Output("maxRetries")]
        public Output<int?> MaxRetries { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nonOverridableArguments")]
        public Output<ImmutableDictionary<string, string>?> NonOverridableArguments { get; private set; } = null!;

        [Output("notificationProperty")]
        public Output<Outputs.JobNotificationProperty> NotificationProperty { get; private set; } = null!;

        [Output("numberOfWorkers")]
        public Output<int?> NumberOfWorkers { get; private set; } = null!;

        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        [Output("securityConfiguration")]
        public Output<string?> SecurityConfiguration { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeout")]
        public Output<int> Timeout { get; private set; } = null!;

        [Output("workerType")]
        public Output<string?> WorkerType { get; private set; } = null!;


        /// <summary>
        /// Create a Job resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Job(string name, JobArgs args, CustomResourceOptions? options = null)
            : base("aws:glue/job:Job", name, args ?? new JobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Job(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/job:Job", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Job resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Job Get(string name, Input<string> id, JobState? state = null, CustomResourceOptions? options = null)
        {
            return new Job(name, id, state, options);
        }
    }

    public sealed class JobArgs : global::Pulumi.ResourceArgs
    {
        [Input("command", required: true)]
        public Input<Inputs.JobCommandArgs> Command { get; set; } = null!;

        [Input("connections")]
        private InputList<string>? _connections;
        public InputList<string> Connections
        {
            get => _connections ?? (_connections = new InputList<string>());
            set => _connections = value;
        }

        [Input("defaultArguments")]
        private InputMap<string>? _defaultArguments;
        public InputMap<string> DefaultArguments
        {
            get => _defaultArguments ?? (_defaultArguments = new InputMap<string>());
            set => _defaultArguments = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("executionClass")]
        public Input<string>? ExecutionClass { get; set; }

        [Input("executionProperty")]
        public Input<Inputs.JobExecutionPropertyArgs>? ExecutionProperty { get; set; }

        [Input("glueVersion")]
        public Input<string>? GlueVersion { get; set; }

        [Input("maxCapacity")]
        public Input<double>? MaxCapacity { get; set; }

        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nonOverridableArguments")]
        private InputMap<string>? _nonOverridableArguments;
        public InputMap<string> NonOverridableArguments
        {
            get => _nonOverridableArguments ?? (_nonOverridableArguments = new InputMap<string>());
            set => _nonOverridableArguments = value;
        }

        [Input("notificationProperty")]
        public Input<Inputs.JobNotificationPropertyArgs>? NotificationProperty { get; set; }

        [Input("numberOfWorkers")]
        public Input<int>? NumberOfWorkers { get; set; }

        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("securityConfiguration")]
        public Input<string>? SecurityConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("workerType")]
        public Input<string>? WorkerType { get; set; }

        public JobArgs()
        {
        }
        public static new JobArgs Empty => new JobArgs();
    }

    public sealed class JobState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("command")]
        public Input<Inputs.JobCommandGetArgs>? Command { get; set; }

        [Input("connections")]
        private InputList<string>? _connections;
        public InputList<string> Connections
        {
            get => _connections ?? (_connections = new InputList<string>());
            set => _connections = value;
        }

        [Input("defaultArguments")]
        private InputMap<string>? _defaultArguments;
        public InputMap<string> DefaultArguments
        {
            get => _defaultArguments ?? (_defaultArguments = new InputMap<string>());
            set => _defaultArguments = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("executionClass")]
        public Input<string>? ExecutionClass { get; set; }

        [Input("executionProperty")]
        public Input<Inputs.JobExecutionPropertyGetArgs>? ExecutionProperty { get; set; }

        [Input("glueVersion")]
        public Input<string>? GlueVersion { get; set; }

        [Input("maxCapacity")]
        public Input<double>? MaxCapacity { get; set; }

        [Input("maxRetries")]
        public Input<int>? MaxRetries { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nonOverridableArguments")]
        private InputMap<string>? _nonOverridableArguments;
        public InputMap<string> NonOverridableArguments
        {
            get => _nonOverridableArguments ?? (_nonOverridableArguments = new InputMap<string>());
            set => _nonOverridableArguments = value;
        }

        [Input("notificationProperty")]
        public Input<Inputs.JobNotificationPropertyGetArgs>? NotificationProperty { get; set; }

        [Input("numberOfWorkers")]
        public Input<int>? NumberOfWorkers { get; set; }

        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("securityConfiguration")]
        public Input<string>? SecurityConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("workerType")]
        public Input<string>? WorkerType { get; set; }

        public JobState()
        {
        }
        public static new JobState Empty => new JobState();
    }
}
