// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    /// <summary>
    /// Resource for managing an AWS Glue Catalog Table Optimizer.
    /// 
    /// ## Example Usage
    /// 
    /// ### Compaction Optimizer
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Glue.CatalogTableOptimizer("example", new()
    ///     {
    ///         CatalogId = "123456789012",
    ///         DatabaseName = "example_database",
    ///         TableName = "example_table",
    ///         Configuration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationArgs
    ///         {
    ///             RoleArn = "arn:aws:iam::123456789012:role/example-role",
    ///             Enabled = true,
    ///         },
    ///         Type = "compaction",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Snapshot Retention Optimizer
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Glue.CatalogTableOptimizer("example", new()
    ///     {
    ///         CatalogId = "123456789012",
    ///         DatabaseName = "example_database",
    ///         TableName = "example_table",
    ///         Configuration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationArgs
    ///         {
    ///             RoleArn = "arn:aws:iam::123456789012:role/example-role",
    ///             Enabled = true,
    ///             RetentionConfiguration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationRetentionConfigurationArgs
    ///             {
    ///                 IcebergConfiguration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationRetentionConfigurationIcebergConfigurationArgs
    ///                 {
    ///                     SnapshotRetentionPeriodInDays = 7,
    ///                     NumberOfSnapshotsToRetain = 3,
    ///                     CleanExpiredFiles = true,
    ///                 },
    ///             },
    ///         },
    ///         Type = "retention",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Orphan File Deletion Optimizer
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Glue.CatalogTableOptimizer("example", new()
    ///     {
    ///         CatalogId = "123456789012",
    ///         DatabaseName = "example_database",
    ///         TableName = "example_table",
    ///         Configuration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationArgs
    ///         {
    ///             RoleArn = "arn:aws:iam::123456789012:role/example-role",
    ///             Enabled = true,
    ///             OrphanFileDeletionConfiguration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationOrphanFileDeletionConfigurationArgs
    ///             {
    ///                 IcebergConfiguration = new Aws.Glue.Inputs.CatalogTableOptimizerConfigurationOrphanFileDeletionConfigurationIcebergConfigurationArgs
    ///                 {
    ///                     OrphanFileRetentionPeriodInDays = 7,
    ///                     Location = "s3://example-bucket/example_table/",
    ///                 },
    ///             },
    ///         },
    ///         Type = "orphan_file_deletion",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Glue Catalog Table Optimizer using the `catalog_id,database_name,table_name,type`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:glue/catalogTableOptimizer:CatalogTableOptimizer example 123456789012,example_database,example_table,compaction
    /// ```
    /// </summary>
    [AwsResourceType("aws:glue/catalogTableOptimizer:CatalogTableOptimizer")]
    public partial class CatalogTableOptimizer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Catalog ID of the table.
        /// </summary>
        [Output("catalogId")]
        public Output<string> CatalogId { get; private set; } = null!;

        /// <summary>
        /// A configuration block that defines the table optimizer settings. See Configuration for additional details.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.CatalogTableOptimizerConfiguration?> Configuration { get; private set; } = null!;

        /// <summary>
        /// The name of the database in the catalog in which the table resides.
        /// </summary>
        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        /// <summary>
        /// The name of the table.
        /// </summary>
        [Output("tableName")]
        public Output<string> TableName { get; private set; } = null!;

        /// <summary>
        /// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a CatalogTableOptimizer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CatalogTableOptimizer(string name, CatalogTableOptimizerArgs args, CustomResourceOptions? options = null)
            : base("aws:glue/catalogTableOptimizer:CatalogTableOptimizer", name, args ?? new CatalogTableOptimizerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CatalogTableOptimizer(string name, Input<string> id, CatalogTableOptimizerState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/catalogTableOptimizer:CatalogTableOptimizer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CatalogTableOptimizer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CatalogTableOptimizer Get(string name, Input<string> id, CatalogTableOptimizerState? state = null, CustomResourceOptions? options = null)
        {
            return new CatalogTableOptimizer(name, id, state, options);
        }
    }

    public sealed class CatalogTableOptimizerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Catalog ID of the table.
        /// </summary>
        [Input("catalogId", required: true)]
        public Input<string> CatalogId { get; set; } = null!;

        /// <summary>
        /// A configuration block that defines the table optimizer settings. See Configuration for additional details.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.CatalogTableOptimizerConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// The name of the database in the catalog in which the table resides.
        /// </summary>
        [Input("databaseName", required: true)]
        public Input<string> DatabaseName { get; set; } = null!;

        /// <summary>
        /// The name of the table.
        /// </summary>
        [Input("tableName", required: true)]
        public Input<string> TableName { get; set; } = null!;

        /// <summary>
        /// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public CatalogTableOptimizerArgs()
        {
        }
        public static new CatalogTableOptimizerArgs Empty => new CatalogTableOptimizerArgs();
    }

    public sealed class CatalogTableOptimizerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Catalog ID of the table.
        /// </summary>
        [Input("catalogId")]
        public Input<string>? CatalogId { get; set; }

        /// <summary>
        /// A configuration block that defines the table optimizer settings. See Configuration for additional details.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.CatalogTableOptimizerConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// The name of the database in the catalog in which the table resides.
        /// </summary>
        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        /// <summary>
        /// The name of the table.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        /// <summary>
        /// The type of table optimizer. Valid values are `compaction`, `retention`, and `orphan_file_deletion`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public CatalogTableOptimizerState()
        {
        }
        public static new CatalogTableOptimizerState Empty => new CatalogTableOptimizerState();
    }
}
