// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Glue
{
    /// <summary>
    /// Manages a Glue Trigger resource.
    /// 
    /// ## Example Usage
    /// ### Conditional Trigger
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
    ///         {
    ///             Type = "CONDITIONAL",
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     JobName = aws_glue_job.Example1.Name,
    ///                 },
    ///             },
    ///             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
    ///             {
    ///                 Conditions = 
    ///                 {
    ///                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
    ///                     {
    ///                         JobName = aws_glue_job.Example2.Name,
    ///                         State = "SUCCEEDED",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### On-Demand Trigger
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
    ///         {
    ///             Type = "ON_DEMAND",
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     JobName = aws_glue_job.Example.Name,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Scheduled Trigger
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
    ///         {
    ///             Schedule = "cron(15 12 * * ? *)",
    ///             Type = "SCHEDULED",
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     JobName = aws_glue_job.Example.Name,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Conditional Trigger with Crawler Action
    /// 
    /// **Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
    ///         {
    ///             Type = "CONDITIONAL",
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     CrawlerName = aws_glue_crawler.Example1.Name,
    ///                 },
    ///             },
    ///             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
    ///             {
    ///                 Conditions = 
    ///                 {
    ///                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
    ///                     {
    ///                         JobName = aws_glue_job.Example2.Name,
    ///                         State = "SUCCEEDED",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Conditional Trigger with Crawler Condition
    /// 
    /// **Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Glue.Trigger("example", new Aws.Glue.TriggerArgs
    ///         {
    ///             Type = "CONDITIONAL",
    ///             Actions = 
    ///             {
    ///                 new Aws.Glue.Inputs.TriggerActionArgs
    ///                 {
    ///                     JobName = aws_glue_job.Example1.Name,
    ///                 },
    ///             },
    ///             Predicate = new Aws.Glue.Inputs.TriggerPredicateArgs
    ///             {
    ///                 Conditions = 
    ///                 {
    ///                     new Aws.Glue.Inputs.TriggerPredicateConditionArgs
    ///                     {
    ///                         CrawlerName = aws_glue_crawler.Example2.Name,
    ///                         CrawlState = "SUCCEEDED",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Glue Triggers can be imported using `name`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:glue/trigger:Trigger MyTrigger MyTrigger
    /// ```
    /// </summary>
    [AwsResourceType("aws:glue/trigger:Trigger")]
    public partial class Trigger : Pulumi.CustomResource
    {
        /// <summary>
        /// List of actions initiated by this trigger when it fires. See Actions Below.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.TriggerAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of Glue Trigger
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A description of the new trigger.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Start the trigger. Defaults to `true`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
        /// </summary>
        [Output("eventBatchingConditions")]
        public Output<ImmutableArray<Outputs.TriggerEventBatchingCondition>> EventBatchingConditions { get; private set; } = null!;

        /// <summary>
        /// The name of the trigger.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
        /// </summary>
        [Output("predicate")]
        public Output<Outputs.TriggerPredicate?> Predicate { get; private set; } = null!;

        /// <summary>
        /// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
        /// </summary>
        [Output("schedule")]
        public Output<string?> Schedule { get; private set; } = null!;

        /// <summary>
        /// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
        /// </summary>
        [Output("startOnCreation")]
        public Output<bool?> StartOnCreation { get; private set; } = null!;

        /// <summary>
        /// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
        /// </summary>
        [Output("workflowName")]
        public Output<string?> WorkflowName { get; private set; } = null!;


        /// <summary>
        /// Create a Trigger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Trigger(string name, TriggerArgs args, CustomResourceOptions? options = null)
            : base("aws:glue/trigger:Trigger", name, args ?? new TriggerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Trigger(string name, Input<string> id, TriggerState? state = null, CustomResourceOptions? options = null)
            : base("aws:glue/trigger:Trigger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Trigger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Trigger Get(string name, Input<string> id, TriggerState? state = null, CustomResourceOptions? options = null)
        {
            return new Trigger(name, id, state, options);
        }
    }

    public sealed class TriggerArgs : Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<Inputs.TriggerActionArgs>? _actions;

        /// <summary>
        /// List of actions initiated by this trigger when it fires. See Actions Below.
        /// </summary>
        public InputList<Inputs.TriggerActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.TriggerActionArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// A description of the new trigger.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Start the trigger. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("eventBatchingConditions")]
        private InputList<Inputs.TriggerEventBatchingConditionArgs>? _eventBatchingConditions;

        /// <summary>
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
        /// </summary>
        public InputList<Inputs.TriggerEventBatchingConditionArgs> EventBatchingConditions
        {
            get => _eventBatchingConditions ?? (_eventBatchingConditions = new InputList<Inputs.TriggerEventBatchingConditionArgs>());
            set => _eventBatchingConditions = value;
        }

        /// <summary>
        /// The name of the trigger.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
        /// </summary>
        [Input("predicate")]
        public Input<Inputs.TriggerPredicateArgs>? Predicate { get; set; }

        /// <summary>
        /// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        /// <summary>
        /// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
        /// </summary>
        [Input("startOnCreation")]
        public Input<bool>? StartOnCreation { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
        /// </summary>
        [Input("workflowName")]
        public Input<string>? WorkflowName { get; set; }

        public TriggerArgs()
        {
        }
    }

    public sealed class TriggerState : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.TriggerActionGetArgs>? _actions;

        /// <summary>
        /// List of actions initiated by this trigger when it fires. See Actions Below.
        /// </summary>
        public InputList<Inputs.TriggerActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.TriggerActionGetArgs>());
            set => _actions = value;
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of Glue Trigger
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// A description of the new trigger.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Start the trigger. Defaults to `true`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("eventBatchingConditions")]
        private InputList<Inputs.TriggerEventBatchingConditionGetArgs>? _eventBatchingConditions;

        /// <summary>
        /// Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See Event Batching Condition.
        /// </summary>
        public InputList<Inputs.TriggerEventBatchingConditionGetArgs> EventBatchingConditions
        {
            get => _eventBatchingConditions ?? (_eventBatchingConditions = new InputList<Inputs.TriggerEventBatchingConditionGetArgs>());
            set => _eventBatchingConditions = value;
        }

        /// <summary>
        /// The name of the trigger.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See Predicate Below.
        /// </summary>
        [Input("predicate")]
        public Input<Inputs.TriggerPredicateGetArgs>? Predicate { get; set; }

        /// <summary>
        /// A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
        /// </summary>
        [Input("schedule")]
        public Input<string>? Schedule { get; set; }

        /// <summary>
        /// Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
        /// </summary>
        [Input("startOnCreation")]
        public Input<bool>? StartOnCreation { get; set; }

        /// <summary>
        /// The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `job_name` must also be specified. Conflicts with `crawler_state`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The type of trigger. Valid values are `CONDITIONAL`, `ON_DEMAND`, and `SCHEDULED`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
        /// </summary>
        [Input("workflowName")]
        public Input<string>? WorkflowName { get; set; }

        public TriggerState()
        {
        }
    }
}
