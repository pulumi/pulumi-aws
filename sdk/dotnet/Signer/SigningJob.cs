// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Signer
{
    /// <summary>
    /// Creates a Signer Signing Job.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testSp = new Aws.Signer.SigningProfile("testSp", new Aws.Signer.SigningProfileArgs
    ///         {
    ///             PlatformId = "AWSLambda-SHA384-ECDSA",
    ///         });
    ///         var buildSigningJob = new Aws.Signer.SigningJob("buildSigningJob", new Aws.Signer.SigningJobArgs
    ///         {
    ///             ProfileName = testSp.Name,
    ///             Source = new Aws.Signer.Inputs.SigningJobSourceArgs
    ///             {
    ///                 S3 = new Aws.Signer.Inputs.SigningJobSourceS3Args
    ///                 {
    ///                     Bucket = "s3-bucket-name",
    ///                     Key = "object-to-be-signed.zip",
    ///                     Version = "jADjFYYYEXAMPLETszPjOmCMFDzd9dN1",
    ///                 },
    ///             },
    ///             Destination = new Aws.Signer.Inputs.SigningJobDestinationArgs
    ///             {
    ///                 S3 = new Aws.Signer.Inputs.SigningJobDestinationS3Args
    ///                 {
    ///                     Bucket = "s3-bucket-name",
    ///                     Prefix = "signed/",
    ///                 },
    ///             },
    ///             IgnoreSigningJobFailure = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Signer signing jobs can be imported using the `job_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:signer/signingJob:SigningJob test_signer_signing_job 9ed7e5c3-b8d4-4da0-8459-44e0b068f7ee
    /// ```
    /// </summary>
    public partial class SigningJob : Pulumi.CustomResource
    {
        /// <summary>
        /// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
        /// </summary>
        [Output("completedAt")]
        public Output<string> CompletedAt { get; private set; } = null!;

        /// <summary>
        /// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The S3 bucket in which to save your signed object. See Destination below for details.
        /// </summary>
        [Output("destination")]
        public Output<Outputs.SigningJobDestination> Destination { get; private set; } = null!;

        /// <summary>
        /// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
        /// </summary>
        [Output("ignoreSigningJobFailure")]
        public Output<bool?> IgnoreSigningJobFailure { get; private set; } = null!;

        /// <summary>
        /// The ID of the signing job on output.
        /// </summary>
        [Output("jobId")]
        public Output<string> JobId { get; private set; } = null!;

        /// <summary>
        /// The IAM entity that initiated the signing job.
        /// </summary>
        [Output("jobInvoker")]
        public Output<string> JobInvoker { get; private set; } = null!;

        /// <summary>
        /// The AWS account ID of the job owner.
        /// </summary>
        [Output("jobOwner")]
        public Output<string> JobOwner { get; private set; } = null!;

        /// <summary>
        /// A human-readable name for the signing platform associated with the signing job.
        /// </summary>
        [Output("platformDisplayName")]
        public Output<string> PlatformDisplayName { get; private set; } = null!;

        /// <summary>
        /// The platform to which your signed code image will be distributed.
        /// </summary>
        [Output("platformId")]
        public Output<string> PlatformId { get; private set; } = null!;

        /// <summary>
        /// The name of the profile to initiate the signing operation.
        /// </summary>
        [Output("profileName")]
        public Output<string> ProfileName { get; private set; } = null!;

        /// <summary>
        /// The version of the signing profile used to initiate the signing job.
        /// </summary>
        [Output("profileVersion")]
        public Output<string> ProfileVersion { get; private set; } = null!;

        /// <summary>
        /// The IAM principal that requested the signing job.
        /// </summary>
        [Output("requestedBy")]
        public Output<string> RequestedBy { get; private set; } = null!;

        /// <summary>
        /// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
        /// </summary>
        [Output("revocationRecords")]
        public Output<ImmutableArray<Outputs.SigningJobRevocationRecord>> RevocationRecords { get; private set; } = null!;

        /// <summary>
        /// The time when the signature of a signing job expires.
        /// </summary>
        [Output("signatureExpiresAt")]
        public Output<string> SignatureExpiresAt { get; private set; } = null!;

        /// <summary>
        /// Name of the S3 bucket where the signed code image is saved by code signing.
        /// </summary>
        [Output("signedObjects")]
        public Output<ImmutableArray<Outputs.SigningJobSignedObject>> SignedObjects { get; private set; } = null!;

        /// <summary>
        /// The S3 bucket that contains the object to sign. See Source below for details.
        /// </summary>
        [Output("source")]
        public Output<Outputs.SigningJobSource> Source { get; private set; } = null!;

        /// <summary>
        /// Status of the signing job.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// String value that contains the status reason.
        /// </summary>
        [Output("statusReason")]
        public Output<string> StatusReason { get; private set; } = null!;


        /// <summary>
        /// Create a SigningJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SigningJob(string name, SigningJobArgs args, CustomResourceOptions? options = null)
            : base("aws:signer/signingJob:SigningJob", name, args ?? new SigningJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SigningJob(string name, Input<string> id, SigningJobState? state = null, CustomResourceOptions? options = null)
            : base("aws:signer/signingJob:SigningJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SigningJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SigningJob Get(string name, Input<string> id, SigningJobState? state = null, CustomResourceOptions? options = null)
        {
            return new SigningJob(name, id, state, options);
        }
    }

    public sealed class SigningJobArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The S3 bucket in which to save your signed object. See Destination below for details.
        /// </summary>
        [Input("destination", required: true)]
        public Input<Inputs.SigningJobDestinationArgs> Destination { get; set; } = null!;

        /// <summary>
        /// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
        /// </summary>
        [Input("ignoreSigningJobFailure")]
        public Input<bool>? IgnoreSigningJobFailure { get; set; }

        /// <summary>
        /// The name of the profile to initiate the signing operation.
        /// </summary>
        [Input("profileName", required: true)]
        public Input<string> ProfileName { get; set; } = null!;

        /// <summary>
        /// The S3 bucket that contains the object to sign. See Source below for details.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.SigningJobSourceArgs> Source { get; set; } = null!;

        public SigningJobArgs()
        {
        }
    }

    public sealed class SigningJobState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was completed.
        /// </summary>
        [Input("completedAt")]
        public Input<string>? CompletedAt { get; set; }

        /// <summary>
        /// Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the signing job was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The S3 bucket in which to save your signed object. See Destination below for details.
        /// </summary>
        [Input("destination")]
        public Input<Inputs.SigningJobDestinationGetArgs>? Destination { get; set; }

        /// <summary>
        /// Set this argument to `true` to ignore signing job failures and retrieve failed status and reason. Default `false`.
        /// </summary>
        [Input("ignoreSigningJobFailure")]
        public Input<bool>? IgnoreSigningJobFailure { get; set; }

        /// <summary>
        /// The ID of the signing job on output.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        /// <summary>
        /// The IAM entity that initiated the signing job.
        /// </summary>
        [Input("jobInvoker")]
        public Input<string>? JobInvoker { get; set; }

        /// <summary>
        /// The AWS account ID of the job owner.
        /// </summary>
        [Input("jobOwner")]
        public Input<string>? JobOwner { get; set; }

        /// <summary>
        /// A human-readable name for the signing platform associated with the signing job.
        /// </summary>
        [Input("platformDisplayName")]
        public Input<string>? PlatformDisplayName { get; set; }

        /// <summary>
        /// The platform to which your signed code image will be distributed.
        /// </summary>
        [Input("platformId")]
        public Input<string>? PlatformId { get; set; }

        /// <summary>
        /// The name of the profile to initiate the signing operation.
        /// </summary>
        [Input("profileName")]
        public Input<string>? ProfileName { get; set; }

        /// <summary>
        /// The version of the signing profile used to initiate the signing job.
        /// </summary>
        [Input("profileVersion")]
        public Input<string>? ProfileVersion { get; set; }

        /// <summary>
        /// The IAM principal that requested the signing job.
        /// </summary>
        [Input("requestedBy")]
        public Input<string>? RequestedBy { get; set; }

        [Input("revocationRecords")]
        private InputList<Inputs.SigningJobRevocationRecordGetArgs>? _revocationRecords;

        /// <summary>
        /// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
        /// </summary>
        public InputList<Inputs.SigningJobRevocationRecordGetArgs> RevocationRecords
        {
            get => _revocationRecords ?? (_revocationRecords = new InputList<Inputs.SigningJobRevocationRecordGetArgs>());
            set => _revocationRecords = value;
        }

        /// <summary>
        /// The time when the signature of a signing job expires.
        /// </summary>
        [Input("signatureExpiresAt")]
        public Input<string>? SignatureExpiresAt { get; set; }

        [Input("signedObjects")]
        private InputList<Inputs.SigningJobSignedObjectGetArgs>? _signedObjects;

        /// <summary>
        /// Name of the S3 bucket where the signed code image is saved by code signing.
        /// </summary>
        public InputList<Inputs.SigningJobSignedObjectGetArgs> SignedObjects
        {
            get => _signedObjects ?? (_signedObjects = new InputList<Inputs.SigningJobSignedObjectGetArgs>());
            set => _signedObjects = value;
        }

        /// <summary>
        /// The S3 bucket that contains the object to sign. See Source below for details.
        /// </summary>
        [Input("source")]
        public Input<Inputs.SigningJobSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// Status of the signing job.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// String value that contains the status reason.
        /// </summary>
        [Input("statusReason")]
        public Input<string>? StatusReason { get; set; }

        public SigningJobState()
        {
        }
    }
}
