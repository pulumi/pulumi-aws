// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Resource for managing an AWS CloudWatch Logs Log Anomaly Detector.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new List&lt;Aws.CloudWatch.LogGroup&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         test.Add(new Aws.CloudWatch.LogGroup($"test-{range.Value}", new()
    ///         {
    ///             Name = $"testing-{range.Value}",
    ///         }));
    ///     }
    ///     var testLogAnomalyDetector = new Aws.CloudWatch.LogAnomalyDetector("test", new()
    ///     {
    ///         DetectorName = "testing",
    ///         LogGroupArnLists = new[]
    ///         {
    ///             test[0].Arn,
    ///         },
    ///         AnomalyVisibilityTime = 7,
    ///         EvaluationFrequency = "TEN_MIN",
    ///         Enabled = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudWatch Log Anomaly Detector using the `example_id_arg`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector example log_anomaly_detector-arn-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector")]
    public partial class LogAnomalyDetector : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomaly_visibility_time`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
        /// </summary>
        [Output("anomalyVisibilityTime")]
        public Output<int> AnomalyVisibilityTime { get; private set; } = null!;

        /// <summary>
        /// ARN of the log anomaly detector that you just created.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Name for this anomaly detector.
        /// </summary>
        [Output("detectorName")]
        public Output<string?> DetectorName { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluation_frequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
        /// </summary>
        [Output("evaluationFrequency")]
        public Output<string?> EvaluationFrequency { get; private set; } = null!;

        /// <summary>
        /// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [Output("filterPattern")]
        public Output<string?> FilterPattern { get; private set; } = null!;

        /// <summary>
        /// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("logGroupArnLists")]
        public Output<ImmutableArray<string>> LogGroupArnLists { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a LogAnomalyDetector resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogAnomalyDetector(string name, LogAnomalyDetectorArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector", name, args ?? new LogAnomalyDetectorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogAnomalyDetector(string name, Input<string> id, LogAnomalyDetectorState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logAnomalyDetector:LogAnomalyDetector", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogAnomalyDetector resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogAnomalyDetector Get(string name, Input<string> id, LogAnomalyDetectorState? state = null, CustomResourceOptions? options = null)
        {
            return new LogAnomalyDetector(name, id, state, options);
        }
    }

    public sealed class LogAnomalyDetectorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomaly_visibility_time`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
        /// </summary>
        [Input("anomalyVisibilityTime")]
        public Input<int>? AnomalyVisibilityTime { get; set; }

        /// <summary>
        /// Name for this anomaly detector.
        /// </summary>
        [Input("detectorName")]
        public Input<string>? DetectorName { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluation_frequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
        /// </summary>
        [Input("evaluationFrequency")]
        public Input<string>? EvaluationFrequency { get; set; }

        /// <summary>
        /// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [Input("filterPattern")]
        public Input<string>? FilterPattern { get; set; }

        /// <summary>
        /// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("logGroupArnLists", required: true)]
        private InputList<string>? _logGroupArnLists;

        /// <summary>
        /// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<string> LogGroupArnLists
        {
            get => _logGroupArnLists ?? (_logGroupArnLists = new InputList<string>());
            set => _logGroupArnLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LogAnomalyDetectorArgs()
        {
        }
        public static new LogAnomalyDetectorArgs Empty => new LogAnomalyDetectorArgs();
    }

    public sealed class LogAnomalyDetectorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in `anomaly_visibility_time`, it will be considered normal going forward and will not be detected as an anomaly. Valid Range: Minimum value of 7. Maximum value of 90.
        /// </summary>
        [Input("anomalyVisibilityTime")]
        public Input<int>? AnomalyVisibilityTime { get; set; }

        /// <summary>
        /// ARN of the log anomaly detector that you just created.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Name for this anomaly detector.
        /// </summary>
        [Input("detectorName")]
        public Input<string>? DetectorName { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for `evaluation_frequency`. Valid Values: `ONE_MIN | FIVE_MIN | TEN_MIN | FIFTEEN_MIN | THIRTY_MIN | ONE_HOUR`.
        /// </summary>
        [Input("evaluationFrequency")]
        public Input<string>? EvaluationFrequency { get; set; }

        /// <summary>
        /// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        /// </summary>
        [Input("filterPattern")]
        public Input<string>? FilterPattern { get; set; }

        /// <summary>
        /// Optionally assigns a AWS KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("logGroupArnLists")]
        private InputList<string>? _logGroupArnLists;

        /// <summary>
        /// Array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<string> LogGroupArnLists
        {
            get => _logGroupArnLists ?? (_logGroupArnLists = new InputList<string>());
            set => _logGroupArnLists = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public LogAnomalyDetectorState()
        {
        }
        public static new LogAnomalyDetectorState Empty => new LogAnomalyDetectorState();
    }
}
