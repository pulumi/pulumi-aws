// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    public static class GetEventSource
    {
        /// <summary>
        /// Use this data source to get information about an EventBridge Partner Event Source. This data source will only return one partner event source. An error will be returned if multiple sources match the same name prefix.
        /// 
        /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const examplepartner = aws.cloudwatch.getEventSource({
        ///     namePrefix: "aws.partner/examplepartner.com",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// examplepartner = aws.cloudwatch.get_event_source(name_prefix="aws.partner/examplepartner.com")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplepartner = Aws.CloudWatch.GetEventSource.Invoke(new()
        ///     {
        ///         NamePrefix = "aws.partner/examplepartner.com",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudwatch"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := cloudwatch.GetEventSource(ctx, &amp;cloudwatch.GetEventSourceArgs{
        /// 			NamePrefix: pulumi.StringRef("aws.partner/examplepartner.com"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.cloudwatch.CloudwatchFunctions;
        /// import com.pulumi.aws.cloudwatch.inputs.GetEventSourceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var examplepartner = CloudwatchFunctions.getEventSource(GetEventSourceArgs.builder()
        ///             .namePrefix("aws.partner/examplepartner.com")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   examplepartner:
        ///     fn::invoke:
        ///       Function: aws:cloudwatch:getEventSource
        ///       Arguments:
        ///         namePrefix: aws.partner/examplepartner.com
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEventSourceResult> InvokeAsync(GetEventSourceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventSourceResult>("aws:cloudwatch/getEventSource:getEventSource", args ?? new GetEventSourceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about an EventBridge Partner Event Source. This data source will only return one partner event source. An error will be returned if multiple sources match the same name prefix.
        /// 
        /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const examplepartner = aws.cloudwatch.getEventSource({
        ///     namePrefix: "aws.partner/examplepartner.com",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// examplepartner = aws.cloudwatch.get_event_source(name_prefix="aws.partner/examplepartner.com")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var examplepartner = Aws.CloudWatch.GetEventSource.Invoke(new()
        ///     {
        ///         NamePrefix = "aws.partner/examplepartner.com",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudwatch"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := cloudwatch.GetEventSource(ctx, &amp;cloudwatch.GetEventSourceArgs{
        /// 			NamePrefix: pulumi.StringRef("aws.partner/examplepartner.com"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.cloudwatch.CloudwatchFunctions;
        /// import com.pulumi.aws.cloudwatch.inputs.GetEventSourceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var examplepartner = CloudwatchFunctions.getEventSource(GetEventSourceArgs.builder()
        ///             .namePrefix("aws.partner/examplepartner.com")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   examplepartner:
        ///     fn::invoke:
        ///       Function: aws:cloudwatch:getEventSource
        ///       Arguments:
        ///         namePrefix: aws.partner/examplepartner.com
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEventSourceResult> Invoke(GetEventSourceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventSourceResult>("aws:cloudwatch/getEventSource:getEventSource", args ?? new GetEventSourceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventSourceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifying this limits the results to only those partner event sources with names that start with the specified prefix
        /// </summary>
        [Input("namePrefix")]
        public string? NamePrefix { get; set; }

        public GetEventSourceArgs()
        {
        }
        public static new GetEventSourceArgs Empty => new GetEventSourceArgs();
    }

    public sealed class GetEventSourceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifying this limits the results to only those partner event sources with names that start with the specified prefix
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        public GetEventSourceInvokeArgs()
        {
        }
        public static new GetEventSourceInvokeArgs Empty => new GetEventSourceInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventSourceResult
    {
        /// <summary>
        /// ARN of the partner event source
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Name of the SaaS partner that created the event source
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the event source
        /// </summary>
        public readonly string Name;
        public readonly string? NamePrefix;
        /// <summary>
        /// State of the event source (`ACTIVE` or `PENDING`)
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetEventSourceResult(
            string arn,

            string createdBy,

            string id,

            string name,

            string? namePrefix,

            string state)
        {
            Arn = arn;
            CreatedBy = createdBy;
            Id = id;
            Name = name;
            NamePrefix = namePrefix;
            State = state;
        }
    }
}
