// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Provides an EventBridge Target resource.
    /// 
    /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
    /// 
    /// ## Example Usage
    /// ### Kinesis Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var console = new Aws.CloudWatch.EventRule("console", new()
    ///     {
    ///         Description = "Capture all EC2 scaling events",
    ///         EventPattern = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["source"] = new[]
    ///             {
    ///                 "aws.autoscaling",
    ///             },
    ///             ["detail-type"] = new[]
    ///             {
    ///                 "EC2 Instance Launch Successful",
    ///                 "EC2 Instance Terminate Successful",
    ///                 "EC2 Instance Launch Unsuccessful",
    ///                 "EC2 Instance Terminate Unsuccessful",
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var testStream = new Aws.Kinesis.Stream("testStream", new()
    ///     {
    ///         ShardCount = 1,
    ///     });
    /// 
    ///     var yada = new Aws.CloudWatch.EventTarget("yada", new()
    ///     {
    ///         Rule = console.Name,
    ///         Arn = testStream.Arn,
    ///         RunCommandTargets = new[]
    ///         {
    ///             new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
    ///             {
    ///                 Key = "tag:Name",
    ///                 Values = new[]
    ///                 {
    ///                     "FooBar",
    ///                 },
    ///             },
    ///             new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
    ///             {
    ///                 Key = "InstanceIds",
    ///                 Values = new[]
    ///                 {
    ///                     "i-162058cd308bffec2",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### SSM Document Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ssmLifecycleTrust = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "events.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var stopInstance = new Aws.Ssm.Document("stopInstance", new()
    ///     {
    ///         DocumentType = "Command",
    ///         Content = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["schemaVersion"] = "1.2",
    ///             ["description"] = "Stop an instance",
    ///             ["parameters"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///             },
    ///             ["runtimeConfig"] = new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 ["aws:runShellScript"] = new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["properties"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["id"] = "0.aws:runShellScript",
    ///                             ["runCommand"] = new[]
    ///                             {
    ///                                 "halt",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var ssmLifecyclePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "ssm:SendCommand",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:ec2:eu-west-1:1234567890:instance/*",
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "ec2:ResourceTag/Terminate",
    ///                         Values = new[]
    ///                         {
    ///                             "*",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "ssm:SendCommand",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     stopInstance.Arn,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var ssmLifecycleRole = new Aws.Iam.Role("ssmLifecycleRole", new()
    ///     {
    ///         AssumeRolePolicy = ssmLifecycleTrust.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var ssmLifecyclePolicy = new Aws.Iam.Policy("ssmLifecyclePolicy", new()
    ///     {
    ///         PolicyDocument = ssmLifecyclePolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var ssmLifecycleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("ssmLifecycleRolePolicyAttachment", new()
    ///     {
    ///         PolicyArn = ssmLifecyclePolicy.Arn,
    ///         Role = ssmLifecycleRole.Name,
    ///     });
    /// 
    ///     var stopInstancesEventRule = new Aws.CloudWatch.EventRule("stopInstancesEventRule", new()
    ///     {
    ///         Description = "Stop instances nightly",
    ///         ScheduleExpression = "cron(0 0 * * ? *)",
    ///     });
    /// 
    ///     var stopInstancesEventTarget = new Aws.CloudWatch.EventTarget("stopInstancesEventTarget", new()
    ///     {
    ///         Arn = stopInstance.Arn,
    ///         Rule = stopInstancesEventRule.Name,
    ///         RoleArn = ssmLifecycleRole.Arn,
    ///         RunCommandTargets = new[]
    ///         {
    ///             new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
    ///             {
    ///                 Key = "tag:Terminate",
    ///                 Values = new[]
    ///                 {
    ///                     "midnight",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### RunCommand Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var stopInstancesEventRule = new Aws.CloudWatch.EventRule("stopInstancesEventRule", new()
    ///     {
    ///         Description = "Stop instances nightly",
    ///         ScheduleExpression = "cron(0 0 * * ? *)",
    ///     });
    /// 
    ///     var stopInstancesEventTarget = new Aws.CloudWatch.EventTarget("stopInstancesEventTarget", new()
    ///     {
    ///         Arn = $"arn:aws:ssm:{@var.Aws_region}::document/AWS-RunShellScript",
    ///         Input = "{\"commands\":[\"halt\"]}",
    ///         Rule = stopInstancesEventRule.Name,
    ///         RoleArn = aws_iam_role.Ssm_lifecycle.Arn,
    ///         RunCommandTargets = new[]
    ///         {
    ///             new Aws.CloudWatch.Inputs.EventTargetRunCommandTargetArgs
    ///             {
    ///                 Key = "tag:Terminate",
    ///                 Values = new[]
    ///                 {
    ///                     "midnight",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### API Gateway target
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule");
    /// 
    ///     // ...
    ///     var exampleDeployment = new Aws.ApiGateway.Deployment("exampleDeployment", new()
    ///     {
    ///         RestApi = aws_api_gateway_rest_api.Example.Id,
    ///     });
    /// 
    ///     // ...
    ///     var exampleStage = new Aws.ApiGateway.Stage("exampleStage", new()
    ///     {
    ///         RestApi = aws_api_gateway_rest_api.Example.Id,
    ///         Deployment = exampleDeployment.Id,
    ///     });
    /// 
    ///     // ...
    ///     var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new()
    ///     {
    ///         Arn = exampleStage.ExecutionArn.Apply(executionArn =&gt; $"{executionArn}/GET"),
    ///         Rule = exampleEventRule.Id,
    ///         HttpTarget = new Aws.CloudWatch.Inputs.EventTargetHttpTargetArgs
    ///         {
    ///             QueryStringParameters = 
    ///             {
    ///                 { "Body", "$.detail.body" },
    ///             },
    ///             HeaderParameters = 
    ///             {
    ///                 { "Env", "Test" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cross-Account Event Bus target
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var assumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "events.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var eventBusInvokeRemoteEventBusRole = new Aws.Iam.Role("eventBusInvokeRemoteEventBusRole", new()
    ///     {
    ///         AssumeRolePolicy = assumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var eventBusInvokeRemoteEventBusPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "events:PutEvents",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var eventBusInvokeRemoteEventBusPolicy = new Aws.Iam.Policy("eventBusInvokeRemoteEventBusPolicy", new()
    ///     {
    ///         PolicyDocument = eventBusInvokeRemoteEventBusPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var eventBusInvokeRemoteEventBusRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("eventBusInvokeRemoteEventBusRolePolicyAttachment", new()
    ///     {
    ///         Role = eventBusInvokeRemoteEventBusRole.Name,
    ///         PolicyArn = eventBusInvokeRemoteEventBusPolicy.Arn,
    ///     });
    /// 
    ///     var stopInstancesEventRule = new Aws.CloudWatch.EventRule("stopInstancesEventRule", new()
    ///     {
    ///         Description = "Stop instances nightly",
    ///         ScheduleExpression = "cron(0 0 * * ? *)",
    ///     });
    /// 
    ///     var stopInstancesEventTarget = new Aws.CloudWatch.EventTarget("stopInstancesEventTarget", new()
    ///     {
    ///         Arn = "arn:aws:events:eu-west-1:1234567890:event-bus/My-Event-Bus",
    ///         Rule = stopInstancesEventRule.Name,
    ///         RoleArn = eventBusInvokeRemoteEventBusRole.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Input Transformer Usage - JSON Object
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule");
    /// 
    ///     // ...
    ///     var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new()
    ///     {
    ///         Arn = aws_lambda_function.Example.Arn,
    ///         Rule = exampleEventRule.Id,
    ///         InputTransformer = new Aws.CloudWatch.Inputs.EventTargetInputTransformerArgs
    ///         {
    ///             InputPaths = 
    ///             {
    ///                 { "instance", "$.detail.instance" },
    ///                 { "status", "$.detail.status" },
    ///             },
    ///             InputTemplate = @"{
    ///   ""instance_id"": &lt;instance&gt;,
    ///   ""instance_status"": &lt;status&gt;
    /// }
    /// ",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Input Transformer Usage - Simple String
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule");
    /// 
    ///     // ...
    ///     var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new()
    ///     {
    ///         Arn = aws_lambda_function.Example.Arn,
    ///         Rule = exampleEventRule.Id,
    ///         InputTransformer = new Aws.CloudWatch.Inputs.EventTargetInputTransformerArgs
    ///         {
    ///             InputPaths = 
    ///             {
    ///                 { "instance", "$.detail.instance" },
    ///                 { "status", "$.detail.status" },
    ///             },
    ///             InputTemplate = "\"&lt;instance&gt; is in state &lt;status&gt;\"",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Cloudwatch Log Group Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleLogGroup = new Aws.CloudWatch.LogGroup("exampleLogGroup", new()
    ///     {
    ///         RetentionInDays = 1,
    ///     });
    /// 
    ///     var exampleEventRule = new Aws.CloudWatch.EventRule("exampleEventRule", new()
    ///     {
    ///         Description = "GuardDuty Findings",
    ///         EventPattern = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["source"] = new[]
    ///             {
    ///                 "aws.guardduty",
    ///             },
    ///         }),
    ///         Tags = 
    ///         {
    ///             { "Environment", "example" },
    ///         },
    ///     });
    /// 
    ///     var exampleLogPolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "logs:CreateLogStream",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{exampleLogGroup.Arn}:*",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "events.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "logs:PutLogEvents",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{exampleLogGroup.Arn}:*:*",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "events.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "ArnEquals",
    ///                         Values = new[]
    ///                         {
    ///                             exampleEventRule.Arn,
    ///                         },
    ///                         Variable = "aws:SourceArn",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLogResourcePolicy = new Aws.CloudWatch.LogResourcePolicy("exampleLogResourcePolicy", new()
    ///     {
    ///         PolicyDocument = exampleLogPolicy.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         PolicyName = "guardduty-log-publishing-policy",
    ///     });
    /// 
    ///     var exampleEventTarget = new Aws.CloudWatch.EventTarget("exampleEventTarget", new()
    ///     {
    ///         Rule = exampleEventRule.Name,
    ///         Arn = exampleLogGroup.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EventBridge Targets can be imported using `event_bus_name/rule-name/target-id` (if you omit `event_bus_name`, the `default` event bus will be used).
    /// 
    /// ```sh
    ///  $ pulumi import aws:cloudwatch/eventTarget:EventTarget test-event-target rule-name/target-id
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/eventTarget:EventTarget")]
    public partial class EventTarget : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the target.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("batchTarget")]
        public Output<Outputs.EventTargetBatchTarget?> BatchTarget { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("deadLetterConfig")]
        public Output<Outputs.EventTargetDeadLetterConfig?> DeadLetterConfig { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("ecsTarget")]
        public Output<Outputs.EventTargetEcsTarget?> EcsTarget { get; private set; } = null!;

        /// <summary>
        /// The name or ARN of the event bus to associate with the rule.
        /// If you omit this, the `default` event bus is used.
        /// </summary>
        [Output("eventBusName")]
        public Output<string?> EventBusName { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
        /// </summary>
        [Output("httpTarget")]
        public Output<Outputs.EventTargetHttpTarget?> HttpTarget { get; private set; } = null!;

        /// <summary>
        /// Valid JSON text passed to the target. Conflicts with `input_path` and `input_transformer`.
        /// </summary>
        [Output("input")]
        public Output<string?> Input { get; private set; } = null!;

        /// <summary>
        /// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `input_transformer`.
        /// </summary>
        [Output("inputPath")]
        public Output<string?> InputPath { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `input_path`.
        /// </summary>
        [Output("inputTransformer")]
        public Output<Outputs.EventTargetInputTransformer?> InputTransformer { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("kinesisTarget")]
        public Output<Outputs.EventTargetKinesisTarget?> KinesisTarget { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("redshiftTarget")]
        public Output<Outputs.EventTargetRedshiftTarget?> RedshiftTarget { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("retryPolicy")]
        public Output<Outputs.EventTargetRetryPolicy?> RetryPolicy { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecs_target` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
        /// </summary>
        [Output("roleArn")]
        public Output<string?> RoleArn { get; private set; } = null!;

        /// <summary>
        /// The name of the rule you want to add targets to.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("rule")]
        public Output<string> Rule { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
        /// </summary>
        [Output("runCommandTargets")]
        public Output<ImmutableArray<Outputs.EventTargetRunCommandTarget>> RunCommandTargets { get; private set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Output("sqsTarget")]
        public Output<Outputs.EventTargetSqsTarget?> SqsTarget { get; private set; } = null!;

        /// <summary>
        /// The unique target assignment ID. If missing, will generate a random, unique id.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;


        /// <summary>
        /// Create a EventTarget resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventTarget(string name, EventTargetArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventTarget:EventTarget", name, args ?? new EventTargetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventTarget(string name, Input<string> id, EventTargetState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventTarget:EventTarget", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventTarget resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventTarget Get(string name, Input<string> id, EventTargetState? state = null, CustomResourceOptions? options = null)
        {
            return new EventTarget(name, id, state, options);
        }
    }

    public sealed class EventTargetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the target.
        /// </summary>
        [Input("arn", required: true)]
        public Input<string> Arn { get; set; } = null!;

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("batchTarget")]
        public Input<Inputs.EventTargetBatchTargetArgs>? BatchTarget { get; set; }

        /// <summary>
        /// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.EventTargetDeadLetterConfigArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("ecsTarget")]
        public Input<Inputs.EventTargetEcsTargetArgs>? EcsTarget { get; set; }

        /// <summary>
        /// The name or ARN of the event bus to associate with the rule.
        /// If you omit this, the `default` event bus is used.
        /// </summary>
        [Input("eventBusName")]
        public Input<string>? EventBusName { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
        /// </summary>
        [Input("httpTarget")]
        public Input<Inputs.EventTargetHttpTargetArgs>? HttpTarget { get; set; }

        /// <summary>
        /// Valid JSON text passed to the target. Conflicts with `input_path` and `input_transformer`.
        /// </summary>
        [Input("input")]
        public Input<string>? Input { get; set; }

        /// <summary>
        /// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `input_transformer`.
        /// </summary>
        [Input("inputPath")]
        public Input<string>? InputPath { get; set; }

        /// <summary>
        /// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `input_path`.
        /// </summary>
        [Input("inputTransformer")]
        public Input<Inputs.EventTargetInputTransformerArgs>? InputTransformer { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("kinesisTarget")]
        public Input<Inputs.EventTargetKinesisTargetArgs>? KinesisTarget { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("redshiftTarget")]
        public Input<Inputs.EventTargetRedshiftTargetArgs>? RedshiftTarget { get; set; }

        /// <summary>
        /// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.EventTargetRetryPolicyArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecs_target` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// The name of the rule you want to add targets to.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("rule", required: true)]
        public Input<string> Rule { get; set; } = null!;

        [Input("runCommandTargets")]
        private InputList<Inputs.EventTargetRunCommandTargetArgs>? _runCommandTargets;

        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
        /// </summary>
        public InputList<Inputs.EventTargetRunCommandTargetArgs> RunCommandTargets
        {
            get => _runCommandTargets ?? (_runCommandTargets = new InputList<Inputs.EventTargetRunCommandTargetArgs>());
            set => _runCommandTargets = value;
        }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("sqsTarget")]
        public Input<Inputs.EventTargetSqsTargetArgs>? SqsTarget { get; set; }

        /// <summary>
        /// The unique target assignment ID. If missing, will generate a random, unique id.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public EventTargetArgs()
        {
        }
        public static new EventTargetArgs Empty => new EventTargetArgs();
    }

    public sealed class EventTargetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the target.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("batchTarget")]
        public Input<Inputs.EventTargetBatchTargetGetArgs>? BatchTarget { get; set; }

        /// <summary>
        /// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.EventTargetDeadLetterConfigGetArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("ecsTarget")]
        public Input<Inputs.EventTargetEcsTargetGetArgs>? EcsTarget { get; set; }

        /// <summary>
        /// The name or ARN of the event bus to associate with the rule.
        /// If you omit this, the `default` event bus is used.
        /// </summary>
        [Input("eventBusName")]
        public Input<string>? EventBusName { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
        /// </summary>
        [Input("httpTarget")]
        public Input<Inputs.EventTargetHttpTargetGetArgs>? HttpTarget { get; set; }

        /// <summary>
        /// Valid JSON text passed to the target. Conflicts with `input_path` and `input_transformer`.
        /// </summary>
        [Input("input")]
        public Input<string>? Input { get; set; }

        /// <summary>
        /// The value of the [JSONPath](http://goessner.net/articles/JsonPath/) that is used for extracting part of the matched event when passing it to the target. Conflicts with `input` and `input_transformer`.
        /// </summary>
        [Input("inputPath")]
        public Input<string>? InputPath { get; set; }

        /// <summary>
        /// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with `input` and `input_path`.
        /// </summary>
        [Input("inputTransformer")]
        public Input<Inputs.EventTargetInputTransformerGetArgs>? InputTransformer { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("kinesisTarget")]
        public Input<Inputs.EventTargetKinesisTargetGetArgs>? KinesisTarget { get; set; }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("redshiftTarget")]
        public Input<Inputs.EventTargetRedshiftTargetGetArgs>? RedshiftTarget { get; set; }

        /// <summary>
        /// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("retryPolicy")]
        public Input<Inputs.EventTargetRetryPolicyGetArgs>? RetryPolicy { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if `ecs_target` is used or target in `arn` is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// The name of the rule you want to add targets to.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("rule")]
        public Input<string>? Rule { get; set; }

        [Input("runCommandTargets")]
        private InputList<Inputs.EventTargetRunCommandTargetGetArgs>? _runCommandTargets;

        /// <summary>
        /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
        /// </summary>
        public InputList<Inputs.EventTargetRunCommandTargetGetArgs> RunCommandTargets
        {
            get => _runCommandTargets ?? (_runCommandTargets = new InputList<Inputs.EventTargetRunCommandTargetGetArgs>());
            set => _runCommandTargets = value;
        }

        /// <summary>
        /// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
        /// </summary>
        [Input("sqsTarget")]
        public Input<Inputs.EventTargetSqsTargetGetArgs>? SqsTarget { get; set; }

        /// <summary>
        /// The unique target assignment ID. If missing, will generate a random, unique id.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public EventTargetState()
        {
        }
        public static new EventTargetState Empty => new EventTargetState();
    }
}
