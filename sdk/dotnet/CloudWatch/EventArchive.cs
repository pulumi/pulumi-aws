// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Provides an EventBridge event archive resource.
    /// 
    /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var order = new Aws.CloudWatch.EventBus("order", new()
    ///     {
    ///         Name = "orders",
    ///     });
    /// 
    ///     var orderEventArchive = new Aws.CloudWatch.EventArchive("order", new()
    ///     {
    ///         Name = "order-archive",
    ///         EventSourceArn = order.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Optional Arguments
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var order = new Aws.CloudWatch.EventBus("order", new()
    ///     {
    ///         Name = "orders",
    ///     });
    /// 
    ///     var orderEventArchive = new Aws.CloudWatch.EventArchive("order", new()
    ///     {
    ///         Name = "order-archive",
    ///         Description = "Archived events from order service",
    ///         EventSourceArn = order.Arn,
    ///         RetentionDays = 7,
    ///         EventPattern = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["source"] = new[]
    ///             {
    ///                 "company.team.order",
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### CMK Encryption
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var currentGetPartition = Aws.GetPartition.Invoke();
    /// 
    ///     var example = new Aws.CloudWatch.EventBus("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleKey = new Aws.Kms.Key("example", new()
    ///     {
    ///         DeletionWindowInDays = 7,
    ///         Policy = Output.JsonSerialize(Output.Create(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Id"] = "key-policy-example",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "Enable IAM User Permissions",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["AWS"] = Output.Tuple(currentGetPartition, current).Apply(values =&gt;
    ///                         {
    ///                             var currentGetPartition = values.Item1;
    ///                             var current = values.Item2;
    ///                             return $"arn:{currentGetPartition.Apply(getPartitionResult =&gt; getPartitionResult.Partition)}:iam::{current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId)}:root";
    ///                         }),
    ///                     },
    ///                     ["Action"] = "kms:*",
    ///                     ["Resource"] = "*",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "Allow describing of the key",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "events.amazonaws.com",
    ///                     },
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "kms:DescribeKey",
    ///                     },
    ///                     ["Resource"] = "*",
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "Allow use of the key",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "events.amazonaws.com",
    ///                     },
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "kms:GenerateDataKey",
    ///                         "kms:Decrypt",
    ///                         "kms:ReEncrypt*",
    ///                     },
    ///                     ["Resource"] = "*",
    ///                     ["Condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["StringEquals"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["kms:EncryptionContext:aws:events:event-bus:arn"] = example.Arn,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         })),
    ///         Tags = 
    ///         {
    ///             { "EventBridgeApiDestinations", "true" },
    ///         },
    ///     });
    /// 
    ///     var exampleEventArchive = new Aws.CloudWatch.EventArchive("example", new()
    ///     {
    ///         Name = "example",
    ///         EventSourceArn = example.Arn,
    ///         KmsKeyIdentifier = exampleKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import an EventBridge archive using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/eventArchive:EventArchive imported_event_archive order-archive
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/eventArchive:EventArchive")]
    public partial class EventArchive : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the archive.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Description for the archive.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `event_source_arn`.
        /// </summary>
        [Output("eventPattern")]
        public Output<string?> EventPattern { get; private set; } = null!;

        /// <summary>
        /// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
        /// </summary>
        [Output("eventSourceArn")]
        public Output<string> EventSourceArn { get; private set; } = null!;

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
        /// </summary>
        [Output("kmsKeyIdentifier")]
        public Output<string?> KmsKeyIdentifier { get; private set; } = null!;

        /// <summary>
        /// Name of the archive. The archive name cannot exceed 48 characters.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
        /// </summary>
        [Output("retentionDays")]
        public Output<int?> RetentionDays { get; private set; } = null!;


        /// <summary>
        /// Create a EventArchive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventArchive(string name, EventArchiveArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventArchive:EventArchive", name, args ?? new EventArchiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventArchive(string name, Input<string> id, EventArchiveState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventArchive:EventArchive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventArchive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventArchive Get(string name, Input<string> id, EventArchiveState? state = null, CustomResourceOptions? options = null)
        {
            return new EventArchive(name, id, state, options);
        }
    }

    public sealed class EventArchiveArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the archive.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `event_source_arn`.
        /// </summary>
        [Input("eventPattern")]
        public Input<string>? EventPattern { get; set; }

        /// <summary>
        /// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
        /// </summary>
        [Input("eventSourceArn", required: true)]
        public Input<string> EventSourceArn { get; set; } = null!;

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// Name of the archive. The archive name cannot exceed 48 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        public EventArchiveArgs()
        {
        }
        public static new EventArchiveArgs Empty => new EventArchiveArgs();
    }

    public sealed class EventArchiveState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the archive.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Description for the archive.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `event_source_arn`.
        /// </summary>
        [Input("eventPattern")]
        public Input<string>? EventPattern { get; set; }

        /// <summary>
        /// ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
        /// </summary>
        [Input("eventSourceArn")]
        public Input<string>? EventSourceArn { get; set; }

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// Name of the archive. The archive name cannot exceed 48 characters.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.
        /// </summary>
        [Input("retentionDays")]
        public Input<int>? RetentionDays { get; set; }

        public EventArchiveState()
        {
        }
        public static new EventArchiveState Empty => new EventArchiveState();
    }
}
