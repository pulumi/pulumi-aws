// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Provides a Internet Monitor Monitor resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudWatch.InternetMonitor("example", new()
    ///     {
    ///         MonitorName = "exmple",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_internetmonitor_monitor.some
    /// 
    ///  id = "some-monitor" } Using `pulumi import`, import Internet Monitor Monitors using the `monitor_name`. For exampleconsole % pulumi import aws_internetmonitor_monitor.some some-monitor
    /// </summary>
    [AwsResourceType("aws:cloudwatch/internetMonitor:InternetMonitor")]
    public partial class InternetMonitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Monitor.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
        /// </summary>
        [Output("healthEventsConfig")]
        public Output<Outputs.InternetMonitorHealthEventsConfig?> HealthEventsConfig { get; private set; } = null!;

        /// <summary>
        /// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
        /// </summary>
        [Output("internetMeasurementsLogDelivery")]
        public Output<Outputs.InternetMonitorInternetMeasurementsLogDelivery?> InternetMeasurementsLogDelivery { get; private set; } = null!;

        /// <summary>
        /// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
        /// </summary>
        [Output("maxCityNetworksToMonitor")]
        public Output<int?> MaxCityNetworksToMonitor { get; private set; } = null!;

        /// <summary>
        /// The name of the monitor.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("monitorName")]
        public Output<string> MonitorName { get; private set; } = null!;

        /// <summary>
        /// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<string>> Resources { get; private set; } = null!;

        /// <summary>
        /// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
        /// </summary>
        [Output("trafficPercentageToMonitor")]
        public Output<int?> TrafficPercentageToMonitor { get; private set; } = null!;


        /// <summary>
        /// Create a InternetMonitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InternetMonitor(string name, InternetMonitorArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/internetMonitor:InternetMonitor", name, args ?? new InternetMonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InternetMonitor(string name, Input<string> id, InternetMonitorState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/internetMonitor:InternetMonitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InternetMonitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InternetMonitor Get(string name, Input<string> id, InternetMonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new InternetMonitor(name, id, state, options);
        }
    }

    public sealed class InternetMonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
        /// </summary>
        [Input("healthEventsConfig")]
        public Input<Inputs.InternetMonitorHealthEventsConfigArgs>? HealthEventsConfig { get; set; }

        /// <summary>
        /// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
        /// </summary>
        [Input("internetMeasurementsLogDelivery")]
        public Input<Inputs.InternetMonitorInternetMeasurementsLogDeliveryArgs>? InternetMeasurementsLogDelivery { get; set; }

        /// <summary>
        /// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
        /// </summary>
        [Input("maxCityNetworksToMonitor")]
        public Input<int>? MaxCityNetworksToMonitor { get; set; }

        /// <summary>
        /// The name of the monitor.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("monitorName", required: true)]
        public Input<string> MonitorName { get; set; } = null!;

        [Input("resources")]
        private InputList<string>? _resources;

        /// <summary>
        /// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        /// <summary>
        /// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
        /// </summary>
        [Input("trafficPercentageToMonitor")]
        public Input<int>? TrafficPercentageToMonitor { get; set; }

        public InternetMonitorArgs()
        {
        }
        public static new InternetMonitorArgs Empty => new InternetMonitorArgs();
    }

    public sealed class InternetMonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Monitor.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Health event thresholds. A health event threshold percentage, for performance and availability, determines when Internet Monitor creates a health event when there's an internet issue that affects your application end users. See Health Events Config below.
        /// </summary>
        [Input("healthEventsConfig")]
        public Input<Inputs.InternetMonitorHealthEventsConfigGetArgs>? HealthEventsConfig { get; set; }

        /// <summary>
        /// Publish internet measurements for Internet Monitor to an Amazon S3 bucket in addition to CloudWatch Logs.
        /// </summary>
        [Input("internetMeasurementsLogDelivery")]
        public Input<Inputs.InternetMonitorInternetMeasurementsLogDeliveryGetArgs>? InternetMeasurementsLogDelivery { get; set; }

        /// <summary>
        /// The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network or ASN, such as an internet service provider (ISP), that clients access the resources through. This limit helps control billing costs.
        /// </summary>
        [Input("maxCityNetworksToMonitor")]
        public Input<int>? MaxCityNetworksToMonitor { get; set; }

        /// <summary>
        /// The name of the monitor.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("monitorName")]
        public Input<string>? MonitorName { get; set; }

        [Input("resources")]
        private InputList<string>? _resources;

        /// <summary>
        /// The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs).
        /// </summary>
        public InputList<string> Resources
        {
            get => _resources ?? (_resources = new InputList<string>());
            set => _resources = value;
        }

        /// <summary>
        /// The status for a monitor. The accepted values for Status with the UpdateMonitor API call are the following: `ACTIVE` and `INACTIVE`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The percentage of the internet-facing traffic for your application that you want to monitor with this monitor.
        /// </summary>
        [Input("trafficPercentageToMonitor")]
        public Input<int>? TrafficPercentageToMonitor { get; set; }

        public InternetMonitorState()
        {
        }
        public static new InternetMonitorState Empty => new InternetMonitorState();
    }
}
