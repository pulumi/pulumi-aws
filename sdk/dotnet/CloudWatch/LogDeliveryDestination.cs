// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Resource for managing an AWS CloudWatch Logs Delivery Destination.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudWatch.LogDeliveryDestination("example", new()
    ///     {
    ///         Name = "example",
    ///         DeliveryDestinationConfiguration = new Aws.CloudWatch.Inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs
    ///         {
    ///             DestinationResourceArn = exampleAwsCloudwatchLogGroup.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudWatch Logs Delivery Destination using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination example example
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination")]
    public partial class LogDeliveryDestination : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the delivery destination.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The AWS resource that will receive the logs.
        /// </summary>
        [Output("deliveryDestinationConfiguration")]
        public Output<Outputs.LogDeliveryDestinationDeliveryDestinationConfiguration?> DeliveryDestinationConfiguration { get; private set; } = null!;

        /// <summary>
        /// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
        /// </summary>
        [Output("deliveryDestinationType")]
        public Output<string> DeliveryDestinationType { get; private set; } = null!;

        /// <summary>
        /// The name for this delivery destination.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
        /// </summary>
        [Output("outputFormat")]
        public Output<string?> OutputFormat { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a LogDeliveryDestination resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogDeliveryDestination(string name, LogDeliveryDestinationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination", name, args ?? new LogDeliveryDestinationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogDeliveryDestination(string name, Input<string> id, LogDeliveryDestinationState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logDeliveryDestination:LogDeliveryDestination", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogDeliveryDestination resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogDeliveryDestination Get(string name, Input<string> id, LogDeliveryDestinationState? state = null, CustomResourceOptions? options = null)
        {
            return new LogDeliveryDestination(name, id, state, options);
        }
    }

    public sealed class LogDeliveryDestinationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS resource that will receive the logs.
        /// </summary>
        [Input("deliveryDestinationConfiguration")]
        public Input<Inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs>? DeliveryDestinationConfiguration { get; set; }

        /// <summary>
        /// The name for this delivery destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
        /// </summary>
        [Input("outputFormat")]
        public Input<string>? OutputFormat { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LogDeliveryDestinationArgs()
        {
        }
        public static new LogDeliveryDestinationArgs Empty => new LogDeliveryDestinationArgs();
    }

    public sealed class LogDeliveryDestinationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the delivery destination.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The AWS resource that will receive the logs.
        /// </summary>
        [Input("deliveryDestinationConfiguration")]
        public Input<Inputs.LogDeliveryDestinationDeliveryDestinationConfigurationGetArgs>? DeliveryDestinationConfiguration { get; set; }

        /// <summary>
        /// Whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
        /// </summary>
        [Input("deliveryDestinationType")]
        public Input<string>? DeliveryDestinationType { get; set; }

        /// <summary>
        /// The name for this delivery destination.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The format of the logs that are sent to this delivery destination. Valid values: `json`, `plain`, `w3c`, `raw`, `parquet`.
        /// </summary>
        [Input("outputFormat")]
        public Input<string>? OutputFormat { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public LogDeliveryDestinationState()
        {
        }
        public static new LogDeliveryDestinationState Empty => new LogDeliveryDestinationState();
    }
}
