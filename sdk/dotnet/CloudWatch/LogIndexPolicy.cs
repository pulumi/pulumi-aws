// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Resource for managing an AWS CloudWatch Logs Index Policy.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleLogIndexPolicy = new Aws.CloudWatch.LogIndexPolicy("example", new()
    ///     {
    ///         LogGroupName = example.Name,
    ///         PolicyDocument = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Fields"] = new[]
    ///             {
    ///                 "eventName",
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudWatch Logs Index Policy using the `log_group_name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/logIndexPolicy:LogIndexPolicy example /aws/log/group/name
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/logIndexPolicy:LogIndexPolicy")]
    public partial class LogIndexPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Log group name to set the policy for.
        /// </summary>
        [Output("logGroupName")]
        public Output<string> LogGroupName { get; private set; } = null!;

        /// <summary>
        /// JSON policy document. This is a JSON formatted string.
        /// </summary>
        [Output("policyDocument")]
        public Output<string> PolicyDocument { get; private set; } = null!;


        /// <summary>
        /// Create a LogIndexPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogIndexPolicy(string name, LogIndexPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logIndexPolicy:LogIndexPolicy", name, args ?? new LogIndexPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogIndexPolicy(string name, Input<string> id, LogIndexPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logIndexPolicy:LogIndexPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogIndexPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogIndexPolicy Get(string name, Input<string> id, LogIndexPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new LogIndexPolicy(name, id, state, options);
        }
    }

    public sealed class LogIndexPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Log group name to set the policy for.
        /// </summary>
        [Input("logGroupName", required: true)]
        public Input<string> LogGroupName { get; set; } = null!;

        /// <summary>
        /// JSON policy document. This is a JSON formatted string.
        /// </summary>
        [Input("policyDocument", required: true)]
        public Input<string> PolicyDocument { get; set; } = null!;

        public LogIndexPolicyArgs()
        {
        }
        public static new LogIndexPolicyArgs Empty => new LogIndexPolicyArgs();
    }

    public sealed class LogIndexPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Log group name to set the policy for.
        /// </summary>
        [Input("logGroupName")]
        public Input<string>? LogGroupName { get; set; }

        /// <summary>
        /// JSON policy document. This is a JSON formatted string.
        /// </summary>
        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        public LogIndexPolicyState()
        {
        }
        public static new LogIndexPolicyState Empty => new LogIndexPolicyState();
    }
}
