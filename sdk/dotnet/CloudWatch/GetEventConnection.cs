// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    public static class GetEventConnection
    {
        /// <summary>
        /// Use this data source to retrieve information about an EventBridge connection.
        /// 
        /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.CloudWatch.GetEventConnection.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEventConnectionResult> InvokeAsync(GetEventConnectionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEventConnectionResult>("aws:cloudwatch/getEventConnection:getEventConnection", args ?? new GetEventConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about an EventBridge connection.
        /// 
        /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.CloudWatch.GetEventConnection.Invoke(new()
        ///     {
        ///         Name = "test",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEventConnectionResult> Invoke(GetEventConnectionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEventConnectionResult>("aws:cloudwatch/getEventConnection:getEventConnection", args ?? new GetEventConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEventConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetEventConnectionArgs()
        {
        }
        public static new GetEventConnectionArgs Empty => new GetEventConnectionArgs();
    }

    public sealed class GetEventConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the connection.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetEventConnectionInvokeArgs()
        {
        }
        public static new GetEventConnectionInvokeArgs Empty => new GetEventConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetEventConnectionResult
    {
        /// <summary>
        /// ARN (Amazon Resource Name) for the connection.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Type of authorization to use to connect. One of `API_KEY`,`BASIC`,`OAUTH_CLIENT_CREDENTIALS`.
        /// </summary>
        public readonly string AuthorizationType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the connection.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ARN (Amazon Resource Name) for the secret created from the authorization parameters specified for the connection.
        /// </summary>
        public readonly string SecretArn;

        [OutputConstructor]
        private GetEventConnectionResult(
            string arn,

            string authorizationType,

            string id,

            string name,

            string secretArn)
        {
            Arn = arn;
            AuthorizationType = authorizationType;
            Id = id;
            Name = name;
            SecretArn = secretArn;
        }
    }
}
