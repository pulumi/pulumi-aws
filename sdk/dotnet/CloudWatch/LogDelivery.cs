// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Resource for managing an AWS CloudWatch Logs Delivery. A delivery is a connection between an `aws.cloudwatch.LogDeliverySource` and an `aws.cloudwatch.LogDeliveryDestination`.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudWatch.LogDelivery("example", new()
    ///     {
    ///         DeliverySourceName = exampleAwsCloudwatchLogDeliverySource.Name,
    ///         DeliveryDestinationArn = exampleAwsCloudwatchLogDeliveryDestination.Arn,
    ///         FieldDelimiter = ",",
    ///         RecordFields = new[]
    ///         {
    ///             "event_timestamp",
    ///             "event",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudWatch Logs Delivery using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/logDelivery:LogDelivery example jsoGVi4Zq8VlYp9n
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/logDelivery:LogDelivery")]
    public partial class LogDelivery : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the delivery.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The ARN of the delivery destination to use for this delivery.
        /// </summary>
        [Output("deliveryDestinationArn")]
        public Output<string> DeliveryDestinationArn { get; private set; } = null!;

        /// <summary>
        /// The name of the delivery source to use for this delivery.
        /// </summary>
        [Output("deliverySourceName")]
        public Output<string> DeliverySourceName { get; private set; } = null!;

        /// <summary>
        /// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        /// </summary>
        [Output("fieldDelimiter")]
        public Output<string?> FieldDelimiter { get; private set; } = null!;

        /// <summary>
        /// The list of record fields to be delivered to the destination, in order.
        /// </summary>
        [Output("recordFields")]
        public Output<ImmutableArray<string>> RecordFields { get; private set; } = null!;

        /// <summary>
        /// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        /// </summary>
        [Output("s3DeliveryConfigurations")]
        public Output<ImmutableArray<Outputs.LogDeliveryS3DeliveryConfiguration>> S3DeliveryConfigurations { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a LogDelivery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogDelivery(string name, LogDeliveryArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logDelivery:LogDelivery", name, args ?? new LogDeliveryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogDelivery(string name, Input<string> id, LogDeliveryState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logDelivery:LogDelivery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogDelivery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogDelivery Get(string name, Input<string> id, LogDeliveryState? state = null, CustomResourceOptions? options = null)
        {
            return new LogDelivery(name, id, state, options);
        }
    }

    public sealed class LogDeliveryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the delivery destination to use for this delivery.
        /// </summary>
        [Input("deliveryDestinationArn", required: true)]
        public Input<string> DeliveryDestinationArn { get; set; } = null!;

        /// <summary>
        /// The name of the delivery source to use for this delivery.
        /// </summary>
        [Input("deliverySourceName", required: true)]
        public Input<string> DeliverySourceName { get; set; } = null!;

        /// <summary>
        /// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        /// </summary>
        [Input("fieldDelimiter")]
        public Input<string>? FieldDelimiter { get; set; }

        [Input("recordFields")]
        private InputList<string>? _recordFields;

        /// <summary>
        /// The list of record fields to be delivered to the destination, in order.
        /// </summary>
        public InputList<string> RecordFields
        {
            get => _recordFields ?? (_recordFields = new InputList<string>());
            set => _recordFields = value;
        }

        [Input("s3DeliveryConfigurations")]
        private InputList<Inputs.LogDeliveryS3DeliveryConfigurationArgs>? _s3DeliveryConfigurations;

        /// <summary>
        /// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        /// </summary>
        public InputList<Inputs.LogDeliveryS3DeliveryConfigurationArgs> S3DeliveryConfigurations
        {
            get => _s3DeliveryConfigurations ?? (_s3DeliveryConfigurations = new InputList<Inputs.LogDeliveryS3DeliveryConfigurationArgs>());
            set => _s3DeliveryConfigurations = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LogDeliveryArgs()
        {
        }
        public static new LogDeliveryArgs Empty => new LogDeliveryArgs();
    }

    public sealed class LogDeliveryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the delivery.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The ARN of the delivery destination to use for this delivery.
        /// </summary>
        [Input("deliveryDestinationArn")]
        public Input<string>? DeliveryDestinationArn { get; set; }

        /// <summary>
        /// The name of the delivery source to use for this delivery.
        /// </summary>
        [Input("deliverySourceName")]
        public Input<string>? DeliverySourceName { get; set; }

        /// <summary>
        /// The field delimiter to use between record fields when the final output format of a delivery is in `plain`, `w3c`, or `raw` format.
        /// </summary>
        [Input("fieldDelimiter")]
        public Input<string>? FieldDelimiter { get; set; }

        [Input("recordFields")]
        private InputList<string>? _recordFields;

        /// <summary>
        /// The list of record fields to be delivered to the destination, in order.
        /// </summary>
        public InputList<string> RecordFields
        {
            get => _recordFields ?? (_recordFields = new InputList<string>());
            set => _recordFields = value;
        }

        [Input("s3DeliveryConfigurations")]
        private InputList<Inputs.LogDeliveryS3DeliveryConfigurationGetArgs>? _s3DeliveryConfigurations;

        /// <summary>
        /// Parameters that are valid only when the delivery's delivery destination is an S3 bucket.
        /// </summary>
        public InputList<Inputs.LogDeliveryS3DeliveryConfigurationGetArgs> S3DeliveryConfigurations
        {
            get => _s3DeliveryConfigurations ?? (_s3DeliveryConfigurations = new InputList<Inputs.LogDeliveryS3DeliveryConfigurationGetArgs>());
            set => _s3DeliveryConfigurations = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public LogDeliveryState()
        {
        }
        public static new LogDeliveryState Empty => new LogDeliveryState();
    }
}
