// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Provides an EventBridge event bus resource.
    /// 
    /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usages
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var messenger = new Aws.CloudWatch.EventBus("messenger", new()
    ///     {
    ///         Name = "chat-messages",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplepartner = Aws.CloudWatch.GetEventSource.Invoke(new()
    ///     {
    ///         NamePrefix = "aws.partner/examplepartner.com",
    ///     });
    /// 
    ///     var examplepartnerEventBus = new Aws.CloudWatch.EventBus("examplepartner", new()
    ///     {
    ///         Name = examplepartner.Apply(getEventSourceResult =&gt; getEventSourceResult.Name),
    ///         Description = "Event bus for example partner events",
    ///         EventSourceName = examplepartner.Apply(getEventSourceResult =&gt; getEventSourceResult.Name),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Logging to CloudWatch Logs, S3, and Data Firehose
    /// 
    /// See [Configuring logs for Amazon EventBridge event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus-logs.html) for more details.
    /// 
    /// #### Required Resources
    /// 
    /// * EventBridge Event Bus with `logConfig` configured
    /// * Log destinations:
    ///   
    ///     * CloudWatch Logs log group
    ///     * S3 bucket
    ///     * Data Firehose delivery stream
    /// 
    /// * Resource-based policy or tagging for the service-linked role:
    ///   
    ///     * CloudWatch Logs log group - `aws.cloudwatch.LogResourcePolicy` to allow `delivery.logs.amazonaws.com` to put logs into the log group
    ///     * S3 bucket - `aws.s3.BucketPolicy` to allow `delivery.logs.amazonaws.com` to put logs into the bucket
    ///     * Data Firehose delivery stream - tagging the delivery stream with `LogDeliveryEnabled = "true"` to allow the service-linked role `AWSServiceRoleForLogDelivery` to deliver logs
    /// 
    /// * CloudWatch Logs Delivery:
    ///   
    ///     * `aws.cloudwatch.LogDeliverySource` for each log type (INFO, ERROR, TRACE)
    ///     * `aws.cloudwatch.LogDeliveryDestination` for the log destination (S3 bucket, CloudWatch Logs log group, or Data Firehose delivery stream)
    ///     * `aws.cloudwatch.LogDelivery` to link each log typeâ€™s delivery source to the delivery destination
    /// 
    /// ### Example Usage
    /// 
    /// The following example demonstrates how to set up logging for an EventBridge event bus to all three destinations: CloudWatch Logs, S3, and Data Firehose.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var example = new Aws.CloudWatch.EventBus("example", new()
    ///     {
    ///         Name = "example-event-bus",
    ///         LogConfig = new Aws.CloudWatch.Inputs.EventBusLogConfigArgs
    ///         {
    ///             IncludeDetail = "FULL",
    ///             Level = "TRACE",
    ///         },
    ///     });
    /// 
    ///     // CloudWatch Log Delivery Sources for INFO, ERROR, and TRACE logs
    ///     var infoLogs = new Aws.CloudWatch.LogDeliverySource("info_logs", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"EventBusSource-{name}-INFO_LOGS"),
    ///         LogType = "INFO_LOGS",
    ///         ResourceArn = example.Arn,
    ///     });
    /// 
    ///     var errorLogs = new Aws.CloudWatch.LogDeliverySource("error_logs", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"EventBusSource-{name}-ERROR_LOGS"),
    ///         LogType = "ERROR_LOGS",
    ///         ResourceArn = example.Arn,
    ///     });
    /// 
    ///     var traceLogs = new Aws.CloudWatch.LogDeliverySource("trace_logs", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"EventBusSource-{name}-TRACE_LOGS"),
    ///         LogType = "TRACE_LOGS",
    ///         ResourceArn = example.Arn,
    ///     });
    /// 
    ///     // Logging to S3 Bucket
    ///     var exampleBucket = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "example-event-bus-logs",
    ///     });
    /// 
    ///     var bucket = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "delivery.logs.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:PutObject",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{exampleBucket.Arn}/AWSLogs/{current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId)}/EventBusLogs/*",
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "s3:x-amz-acl",
    ///                         Values = new[]
    ///                         {
    ///                             "bucket-owner-full-control",
    ///                         },
    ///                     },
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "aws:SourceAccount",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                     },
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "ArnLike",
    ///                         Variable = "aws:SourceArn",
    ///                         Values = new[]
    ///                         {
    ///                             infoLogs.Arn,
    ///                             errorLogs.Arn,
    ///                             traceLogs.Arn,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleBucketPolicy = new Aws.S3.BucketPolicy("example", new()
    ///     {
    ///         Bucket = exampleBucket.BucketName,
    ///         Policy = bucket.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var s3 = new Aws.CloudWatch.LogDeliveryDestination("s3", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"EventsDeliveryDestination-{name}-S3"),
    ///         DeliveryDestinationConfiguration = new Aws.CloudWatch.Inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs
    ///         {
    ///             DestinationResourceArn = exampleBucket.Arn,
    ///         },
    ///     });
    /// 
    ///     var s3InfoLogs = new Aws.CloudWatch.LogDelivery("s3_info_logs", new()
    ///     {
    ///         DeliveryDestinationArn = s3.Arn,
    ///         DeliverySourceName = infoLogs.Name,
    ///     });
    /// 
    ///     var s3ErrorLogs = new Aws.CloudWatch.LogDelivery("s3_error_logs", new()
    ///     {
    ///         DeliveryDestinationArn = s3.Arn,
    ///         DeliverySourceName = errorLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             s3InfoLogs,
    ///         },
    ///     });
    /// 
    ///     var s3TraceLogs = new Aws.CloudWatch.LogDelivery("s3_trace_logs", new()
    ///     {
    ///         DeliveryDestinationArn = s3.Arn,
    ///         DeliverySourceName = traceLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             s3ErrorLogs,
    ///         },
    ///     });
    /// 
    ///     // Logging to CloudWatch Log Group
    ///     var eventBusLogs = new Aws.CloudWatch.LogGroup("event_bus_logs", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"/aws/vendedlogs/events/event-bus/{name}"),
    ///     });
    /// 
    ///     var cwlogs = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "delivery.logs.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "logs:CreateLogStream",
    ///                     "logs:PutLogEvents",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{eventBusLogs.Arn}:log-stream:*",
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "aws:SourceAccount",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                     },
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "ArnLike",
    ///                         Variable = "aws:SourceArn",
    ///                         Values = new[]
    ///                         {
    ///                             infoLogs.Arn,
    ///                             errorLogs.Arn,
    ///                             traceLogs.Arn,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleLogResourcePolicy = new Aws.CloudWatch.LogResourcePolicy("example", new()
    ///     {
    ///         PolicyDocument = cwlogs.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         PolicyName = example.Name.Apply(name =&gt; $"AWSLogDeliveryWrite-{name}"),
    ///     });
    /// 
    ///     var cwlogsLogDeliveryDestination = new Aws.CloudWatch.LogDeliveryDestination("cwlogs", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"EventsDeliveryDestination-{name}-CWLogs"),
    ///         DeliveryDestinationConfiguration = new Aws.CloudWatch.Inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs
    ///         {
    ///             DestinationResourceArn = eventBusLogs.Arn,
    ///         },
    ///     });
    /// 
    ///     var cwlogsInfoLogs = new Aws.CloudWatch.LogDelivery("cwlogs_info_logs", new()
    ///     {
    ///         DeliveryDestinationArn = cwlogsLogDeliveryDestination.Arn,
    ///         DeliverySourceName = infoLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             s3InfoLogs,
    ///         },
    ///     });
    /// 
    ///     var cwlogsErrorLogs = new Aws.CloudWatch.LogDelivery("cwlogs_error_logs", new()
    ///     {
    ///         DeliveryDestinationArn = cwlogsLogDeliveryDestination.Arn,
    ///         DeliverySourceName = errorLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             s3ErrorLogs,
    ///             cwlogsInfoLogs,
    ///         },
    ///     });
    /// 
    ///     var cwlogsTraceLogs = new Aws.CloudWatch.LogDelivery("cwlogs_trace_logs", new()
    ///     {
    ///         DeliveryDestinationArn = cwlogsLogDeliveryDestination.Arn,
    ///         DeliverySourceName = traceLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             s3TraceLogs,
    ///             cwlogsErrorLogs,
    ///         },
    ///     });
    /// 
    ///     // Logging to Data Firehose
    ///     var cloudfrontLogs = new Aws.Kinesis.FirehoseDeliveryStream("cloudfront_logs", new()
    ///     {
    ///         Tags = 
    ///         {
    ///             { "LogDeliveryEnabled", "true" },
    ///         },
    ///     });
    /// 
    ///     var firehose = new Aws.CloudWatch.LogDeliveryDestination("firehose", new()
    ///     {
    ///         Name = example.Name.Apply(name =&gt; $"EventsDeliveryDestination-{name}-Firehose"),
    ///         DeliveryDestinationConfiguration = new Aws.CloudWatch.Inputs.LogDeliveryDestinationDeliveryDestinationConfigurationArgs
    ///         {
    ///             DestinationResourceArn = cloudfrontLogs.Arn,
    ///         },
    ///     });
    /// 
    ///     var firehoseInfoLogs = new Aws.CloudWatch.LogDelivery("firehose_info_logs", new()
    ///     {
    ///         DeliveryDestinationArn = firehose.Arn,
    ///         DeliverySourceName = infoLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             cwlogsInfoLogs,
    ///         },
    ///     });
    /// 
    ///     var firehoseErrorLogs = new Aws.CloudWatch.LogDelivery("firehose_error_logs", new()
    ///     {
    ///         DeliveryDestinationArn = firehose.Arn,
    ///         DeliverySourceName = errorLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             cwlogsErrorLogs,
    ///             firehoseInfoLogs,
    ///         },
    ///     });
    /// 
    ///     var firehoseTraceLogs = new Aws.CloudWatch.LogDelivery("firehose_trace_logs", new()
    ///     {
    ///         DeliveryDestinationArn = firehose.Arn,
    ///         DeliverySourceName = traceLogs.Name,
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             cwlogsTraceLogs,
    ///             firehoseErrorLogs,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import EventBridge event buses using the name of the event bus (which can also be a partner event source name). For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/eventBus:EventBus messenger chat-messages
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/eventBus:EventBus")]
    public partial class EventBus : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the event bus.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
        /// </summary>
        [Output("deadLetterConfig")]
        public Output<Outputs.EventBusDeadLetterConfig?> DeadLetterConfig { get; private set; } = null!;

        /// <summary>
        /// Event bus description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Partner event source that the new event bus will be matched with. Must match `name`.
        /// </summary>
        [Output("eventSourceName")]
        public Output<string?> EventSourceName { get; private set; } = null!;

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
        /// </summary>
        [Output("kmsKeyIdentifier")]
        public Output<string?> KmsKeyIdentifier { get; private set; } = null!;

        /// <summary>
        /// Block for logging configuration settings for the event bus.
        /// </summary>
        [Output("logConfig")]
        public Output<Outputs.EventBusLogConfig?> LogConfig { get; private set; } = null!;

        /// <summary>
        /// Name of the new event bus. The names of custom event buses can't contain the / character. To create a partner event bus, ensure that the `name` matches the `eventSourceName`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a EventBus resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventBus(string name, EventBusArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventBus:EventBus", name, args ?? new EventBusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventBus(string name, Input<string> id, EventBusState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventBus:EventBus", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventBus resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventBus Get(string name, Input<string> id, EventBusState? state = null, CustomResourceOptions? options = null)
        {
            return new EventBus(name, id, state, options);
        }
    }

    public sealed class EventBusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.EventBusDeadLetterConfigArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Event bus description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Partner event source that the new event bus will be matched with. Must match `name`.
        /// </summary>
        [Input("eventSourceName")]
        public Input<string>? EventSourceName { get; set; }

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// Block for logging configuration settings for the event bus.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.EventBusLogConfigArgs>? LogConfig { get; set; }

        /// <summary>
        /// Name of the new event bus. The names of custom event buses can't contain the / character. To create a partner event bus, ensure that the `name` matches the `eventSourceName`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public EventBusArgs()
        {
        }
        public static new EventBusArgs Empty => new EventBusArgs();
    }

    public sealed class EventBusState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the event bus.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.EventBusDeadLetterConfigGetArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Event bus description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Partner event source that the new event bus will be matched with. Must match `name`.
        /// </summary>
        [Input("eventSourceName")]
        public Input<string>? EventSourceName { get; set; }

        /// <summary>
        /// Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// Block for logging configuration settings for the event bus.
        /// </summary>
        [Input("logConfig")]
        public Input<Inputs.EventBusLogConfigGetArgs>? LogConfig { get; set; }

        /// <summary>
        /// Name of the new event bus. The names of custom event buses can't contain the / character. To create a partner event bus, ensure that the `name` matches the `eventSourceName`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public EventBusState()
        {
        }
        public static new EventBusState Empty => new EventBusState();
    }
}
