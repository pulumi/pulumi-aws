// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Provides a resource to create an EventBridge resource policy to support cross-account events.
    /// 
    /// &gt; **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.
    /// 
    /// &gt; **Note:** The EventBridge bus policy resource  (`aws.cloudwatch.EventBusPolicy`) is incompatible with the EventBridge permission resource (`aws.cloudwatch.EventPermission`) and will overwrite permissions.
    /// 
    /// ## Example Usage
    /// ### Account Access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "DevAccountAccess",
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "events:PutEvents",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:events:eu-west-1:123456789012:event-bus/default",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "123456789012",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testEventBusPolicy = new Aws.CloudWatch.EventBusPolicy("testEventBusPolicy", new()
    ///     {
    ///         Policy = testPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         EventBusName = aws_cloudwatch_event_bus.Test.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Organization Access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "OrganizationAccess",
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "events:DescribeRule",
    ///                     "events:ListRules",
    ///                     "events:ListTargetsByRule",
    ///                     "events:ListTagsForResource",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:events:eu-west-1:123456789012:rule/*",
    ///                     "arn:aws:events:eu-west-1:123456789012:event-bus/default",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "*",
    ///                         },
    ///                     },
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "aws:PrincipalOrgID",
    ///                         Values = new[]
    ///                         {
    ///                             aws_organizations_organization.Example.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testEventBusPolicy = new Aws.CloudWatch.EventBusPolicy("testEventBusPolicy", new()
    ///     {
    ///         Policy = testPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         EventBusName = aws_cloudwatch_event_bus.Test.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// ### Multiple Statements
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "DevAccountAccess",
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "events:PutEvents",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:events:eu-west-1:123456789012:event-bus/default",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "123456789012",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "OrganizationAccess",
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "events:DescribeRule",
    ///                     "events:ListRules",
    ///                     "events:ListTargetsByRule",
    ///                     "events:ListTagsForResource",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "arn:aws:events:eu-west-1:123456789012:rule/*",
    ///                     "arn:aws:events:eu-west-1:123456789012:event-bus/default",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "*",
    ///                         },
    ///                     },
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Variable = "aws:PrincipalOrgID",
    ///                         Values = new[]
    ///                         {
    ///                             aws_organizations_organization.Example.Id,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testEventBusPolicy = new Aws.CloudWatch.EventBusPolicy("testEventBusPolicy", new()
    ///     {
    ///         Policy = testPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         EventBusName = aws_cloudwatch_event_bus.Test.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_cloudwatch_event_bus_policy.DevAccountAccess
    /// 
    ///  id = "example-event-bus" } Using `pulumi import`, import an EventBridge policy using the `event_bus_name`. For exampleconsole % pulumi import aws_cloudwatch_event_bus_policy.DevAccountAccess example-event-bus
    /// </summary>
    [AwsResourceType("aws:cloudwatch/eventBusPolicy:EventBusPolicy")]
    public partial class EventBusPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the event bus to set the permissions on.
        /// If you omit this, the permissions are set on the `default` event bus.
        /// </summary>
        [Output("eventBusName")]
        public Output<string?> EventBusName { get; private set; } = null!;

        /// <summary>
        /// The text of the policy.
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;


        /// <summary>
        /// Create a EventBusPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventBusPolicy(string name, EventBusPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventBusPolicy:EventBusPolicy", name, args ?? new EventBusPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventBusPolicy(string name, Input<string> id, EventBusPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/eventBusPolicy:EventBusPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventBusPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventBusPolicy Get(string name, Input<string> id, EventBusPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new EventBusPolicy(name, id, state, options);
        }
    }

    public sealed class EventBusPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the event bus to set the permissions on.
        /// If you omit this, the permissions are set on the `default` event bus.
        /// </summary>
        [Input("eventBusName")]
        public Input<string>? EventBusName { get; set; }

        /// <summary>
        /// The text of the policy.
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        public EventBusPolicyArgs()
        {
        }
        public static new EventBusPolicyArgs Empty => new EventBusPolicyArgs();
    }

    public sealed class EventBusPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the event bus to set the permissions on.
        /// If you omit this, the permissions are set on the `default` event bus.
        /// </summary>
        [Input("eventBusName")]
        public Input<string>? EventBusName { get; set; }

        /// <summary>
        /// The text of the policy.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        public EventBusPolicyState()
        {
        }
        public static new EventBusPolicyState Empty => new EventBusPolicyState();
    }
}
