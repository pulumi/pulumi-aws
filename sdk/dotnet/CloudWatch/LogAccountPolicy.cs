// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudWatch
{
    /// <summary>
    /// Provides a CloudWatch Log Account Policy resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Account Data Protection Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dataProtection = new Aws.CloudWatch.LogAccountPolicy("data_protection", new()
    ///     {
    ///         PolicyName = "data-protection",
    ///         PolicyType = "DATA_PROTECTION_POLICY",
    ///         PolicyDocument = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Name"] = "DataProtection",
    ///             ["Version"] = "2021-06-01",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "Audit",
    ///                     ["DataIdentifier"] = new[]
    ///                     {
    ///                         "arn:aws:dataprotection::aws:data-identifier/EmailAddress",
    ///                     },
    ///                     ["Operation"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Audit"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["FindingsDestination"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Sid"] = "Redact",
    ///                     ["DataIdentifier"] = new[]
    ///                     {
    ///                         "arn:aws:dataprotection::aws:data-identifier/EmailAddress",
    ///                     },
    ///                     ["Operation"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Deidentify"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["MaskConfig"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Subscription Filter Policy
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var subscriptionFilter = new Aws.CloudWatch.LogAccountPolicy("subscription_filter", new()
    ///     {
    ///         PolicyName = "subscription-filter",
    ///         PolicyType = "SUBSCRIPTION_FILTER_POLICY",
    ///         PolicyDocument = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["DestinationArn"] = test.Arn,
    ///             ["FilterPattern"] = "test",
    ///         }),
    ///         SelectionCriteria = "LogGroupName NOT IN [\"excluded_log_group_name\"]",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import this resource using the `policy_name` and `policy_type` separated by `:`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudwatch/logAccountPolicy:LogAccountPolicy example "my-account-policy:SUBSCRIPTION_FILTER_POLICY"
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudwatch/logAccountPolicy:LogAccountPolicy")]
    public partial class LogAccountPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
        /// </summary>
        [Output("policyDocument")]
        public Output<string> PolicyDocument { get; private set; } = null!;

        /// <summary>
        /// Name of the account policy.
        /// </summary>
        [Output("policyName")]
        public Output<string> PolicyName { get; private set; } = null!;

        /// <summary>
        /// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
        /// </summary>
        [Output("policyType")]
        public Output<string> PolicyType { get; private set; } = null!;

        /// <summary>
        /// Currently defaults to and only accepts the value: `ALL`.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
        /// </summary>
        [Output("selectionCriteria")]
        public Output<string?> SelectionCriteria { get; private set; } = null!;


        /// <summary>
        /// Create a LogAccountPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogAccountPolicy(string name, LogAccountPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logAccountPolicy:LogAccountPolicy", name, args ?? new LogAccountPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogAccountPolicy(string name, Input<string> id, LogAccountPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudwatch/logAccountPolicy:LogAccountPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogAccountPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogAccountPolicy Get(string name, Input<string> id, LogAccountPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new LogAccountPolicy(name, id, state, options);
        }
    }

    public sealed class LogAccountPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
        /// </summary>
        [Input("policyDocument", required: true)]
        public Input<string> PolicyDocument { get; set; } = null!;

        /// <summary>
        /// Name of the account policy.
        /// </summary>
        [Input("policyName", required: true)]
        public Input<string> PolicyName { get; set; } = null!;

        /// <summary>
        /// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
        /// </summary>
        [Input("policyType", required: true)]
        public Input<string> PolicyType { get; set; } = null!;

        /// <summary>
        /// Currently defaults to and only accepts the value: `ALL`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
        /// </summary>
        [Input("selectionCriteria")]
        public Input<string>? SelectionCriteria { get; set; }

        public LogAccountPolicyArgs()
        {
        }
        public static new LogAccountPolicyArgs Empty => new LogAccountPolicyArgs();
    }

    public sealed class LogAccountPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Text of the account policy. Refer to the [AWS docs](https://docs.aws.amazon.com/cli/latest/reference/logs/put-account-policy.html) for more information.
        /// </summary>
        [Input("policyDocument")]
        public Input<string>? PolicyDocument { get; set; }

        /// <summary>
        /// Name of the account policy.
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// Type of account policy. Either `DATA_PROTECTION_POLICY` or `SUBSCRIPTION_FILTER_POLICY`. You can have one account policy per type in an account.
        /// </summary>
        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        /// <summary>
        /// Currently defaults to and only accepts the value: `ALL`.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// Criteria for applying a subscription filter policy to a selection of log groups. The only allowable criteria selector is `LogGroupName NOT IN []`.
        /// </summary>
        [Input("selectionCriteria")]
        public Input<string>? SelectionCriteria { get; set; }

        public LogAccountPolicyState()
        {
        }
        public static new LogAccountPolicyState Empty => new LogAccountPolicyState();
    }
}
