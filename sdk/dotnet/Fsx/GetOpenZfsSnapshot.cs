// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fsx
{
    public static class GetOpenZfsSnapshot
    {
        /// <summary>
        /// Use this data source to get information about an Amazon FSx for OpenZFS Snapshot for use when provisioning new Volumes.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Root volume Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Fsx.GetOpenZfsSnapshot.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Fsx.Inputs.GetOpenZfsSnapshotFilterInputArgs
        ///             {
        ///                 Name = "volume-id",
        ///                 Values = new[]
        ///                 {
        ///                     "fsvol-073a32b6098a73feb",
        ///                 },
        ///             },
        ///         },
        ///         MostRecent = true,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOpenZfsSnapshotResult> InvokeAsync(GetOpenZfsSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOpenZfsSnapshotResult>("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", args ?? new GetOpenZfsSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about an Amazon FSx for OpenZFS Snapshot for use when provisioning new Volumes.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Root volume Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Fsx.GetOpenZfsSnapshot.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Fsx.Inputs.GetOpenZfsSnapshotFilterInputArgs
        ///             {
        ///                 Name = "volume-id",
        ///                 Values = new[]
        ///                 {
        ///                     "fsvol-073a32b6098a73feb",
        ///                 },
        ///             },
        ///         },
        ///         MostRecent = true,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOpenZfsSnapshotResult> Invoke(GetOpenZfsSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOpenZfsSnapshotResult>("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", args ?? new GetOpenZfsSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOpenZfsSnapshotArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetOpenZfsSnapshotFilterArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to filter off of. The
        /// supported names are file-system-id or volume-id.
        /// </summary>
        public List<Inputs.GetOpenZfsSnapshotFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOpenZfsSnapshotFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If more than one result is returned, use the most recent snapshot.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// Name of the snapshot.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("snapshotIds")]
        private List<string>? _snapshotIds;

        /// <summary>
        /// Returns information on a specific snapshot_id.
        /// </summary>
        public List<string> SnapshotIds
        {
            get => _snapshotIds ?? (_snapshotIds = new List<string>());
            set => _snapshotIds = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// List of Tag values, with a maximum of 50 elements.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetOpenZfsSnapshotArgs()
        {
        }
        public static new GetOpenZfsSnapshotArgs Empty => new GetOpenZfsSnapshotArgs();
    }

    public sealed class GetOpenZfsSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetOpenZfsSnapshotFilterInputArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to filter off of. The
        /// supported names are file-system-id or volume-id.
        /// </summary>
        public InputList<Inputs.GetOpenZfsSnapshotFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetOpenZfsSnapshotFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// If more than one result is returned, use the most recent snapshot.
        /// </summary>
        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        /// <summary>
        /// Name of the snapshot.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("snapshotIds")]
        private InputList<string>? _snapshotIds;

        /// <summary>
        /// Returns information on a specific snapshot_id.
        /// </summary>
        public InputList<string> SnapshotIds
        {
            get => _snapshotIds ?? (_snapshotIds = new InputList<string>());
            set => _snapshotIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// List of Tag values, with a maximum of 50 elements.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetOpenZfsSnapshotInvokeArgs()
        {
        }
        public static new GetOpenZfsSnapshotInvokeArgs Empty => new GetOpenZfsSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetOpenZfsSnapshotResult
    {
        /// <summary>
        /// Amazon Resource Name of the snapshot.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Time that the resource was created.
        /// </summary>
        public readonly string CreationTime;
        public readonly ImmutableArray<Outputs.GetOpenZfsSnapshotFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? MostRecent;
        /// <summary>
        /// Name of the snapshot.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// ID of the snapshot.
        /// </summary>
        public readonly string SnapshotId;
        public readonly ImmutableArray<string> SnapshotIds;
        /// <summary>
        /// List of Tag values, with a maximum of 50 elements.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// ID of the volume that the snapshot is of.
        /// </summary>
        public readonly string VolumeId;

        [OutputConstructor]
        private GetOpenZfsSnapshotResult(
            string arn,

            string creationTime,

            ImmutableArray<Outputs.GetOpenZfsSnapshotFilterResult> filters,

            string id,

            bool? mostRecent,

            string? name,

            string snapshotId,

            ImmutableArray<string> snapshotIds,

            ImmutableDictionary<string, string> tags,

            string volumeId)
        {
            Arn = arn;
            CreationTime = creationTime;
            Filters = filters;
            Id = id;
            MostRecent = mostRecent;
            Name = name;
            SnapshotId = snapshotId;
            SnapshotIds = snapshotIds;
            Tags = tags;
            VolumeId = volumeId;
        }
    }
}
