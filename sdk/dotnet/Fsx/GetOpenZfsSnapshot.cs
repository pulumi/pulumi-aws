// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fsx
{
    public static class GetOpenZfsSnapshot
    {
        public static Task<GetOpenZfsSnapshotResult> InvokeAsync(GetOpenZfsSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOpenZfsSnapshotResult>("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", args ?? new GetOpenZfsSnapshotArgs(), options.WithDefaults());

        public static Output<GetOpenZfsSnapshotResult> Invoke(GetOpenZfsSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOpenZfsSnapshotResult>("aws:fsx/getOpenZfsSnapshot:getOpenZfsSnapshot", args ?? new GetOpenZfsSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOpenZfsSnapshotArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetOpenZfsSnapshotFilterArgs>? _filters;
        public List<Inputs.GetOpenZfsSnapshotFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOpenZfsSnapshotFilterArgs>());
            set => _filters = value;
        }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("snapshotIds")]
        private List<string>? _snapshotIds;
        public List<string> SnapshotIds
        {
            get => _snapshotIds ?? (_snapshotIds = new List<string>());
            set => _snapshotIds = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetOpenZfsSnapshotArgs()
        {
        }
        public static new GetOpenZfsSnapshotArgs Empty => new GetOpenZfsSnapshotArgs();
    }

    public sealed class GetOpenZfsSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetOpenZfsSnapshotFilterInputArgs>? _filters;
        public InputList<Inputs.GetOpenZfsSnapshotFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetOpenZfsSnapshotFilterInputArgs>());
            set => _filters = value;
        }

        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("snapshotIds")]
        private InputList<string>? _snapshotIds;
        public InputList<string> SnapshotIds
        {
            get => _snapshotIds ?? (_snapshotIds = new InputList<string>());
            set => _snapshotIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetOpenZfsSnapshotInvokeArgs()
        {
        }
        public static new GetOpenZfsSnapshotInvokeArgs Empty => new GetOpenZfsSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetOpenZfsSnapshotResult
    {
        public readonly string Arn;
        public readonly string CreationTime;
        public readonly ImmutableArray<Outputs.GetOpenZfsSnapshotFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? MostRecent;
        public readonly string? Name;
        public readonly string SnapshotId;
        public readonly ImmutableArray<string> SnapshotIds;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VolumeId;

        [OutputConstructor]
        private GetOpenZfsSnapshotResult(
            string arn,

            string creationTime,

            ImmutableArray<Outputs.GetOpenZfsSnapshotFilterResult> filters,

            string id,

            bool? mostRecent,

            string? name,

            string snapshotId,

            ImmutableArray<string> snapshotIds,

            ImmutableDictionary<string, string> tags,

            string volumeId)
        {
            Arn = arn;
            CreationTime = creationTime;
            Filters = filters;
            Id = id;
            MostRecent = mostRecent;
            Name = name;
            SnapshotId = snapshotId;
            SnapshotIds = snapshotIds;
            Tags = tags;
            VolumeId = volumeId;
        }
    }
}
