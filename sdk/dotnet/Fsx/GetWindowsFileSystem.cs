// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fsx
{
    public static class GetWindowsFileSystem
    {
        /// <summary>
        /// Retrieve information on FSx Windows File System.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Root volume Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Fsx.GetWindowsFileSystem.Invoke(new()
        ///     {
        ///         Id = "fs-12345678",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetWindowsFileSystemResult> InvokeAsync(GetWindowsFileSystemArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWindowsFileSystemResult>("aws:fsx/getWindowsFileSystem:getWindowsFileSystem", args ?? new GetWindowsFileSystemArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information on FSx Windows File System.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Root volume Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Fsx.GetWindowsFileSystem.Invoke(new()
        ///     {
        ///         Id = "fs-12345678",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetWindowsFileSystemResult> Invoke(GetWindowsFileSystemInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWindowsFileSystemResult>("aws:fsx/getWindowsFileSystem:getWindowsFileSystem", args ?? new GetWindowsFileSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWindowsFileSystemArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the file system (e.g. `fs-12345678`).
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// The tags to associate with the file system.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetWindowsFileSystemArgs()
        {
        }
        public static new GetWindowsFileSystemArgs Empty => new GetWindowsFileSystemArgs();
    }

    public sealed class GetWindowsFileSystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the file system (e.g. `fs-12345678`).
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags to associate with the file system.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetWindowsFileSystemInvokeArgs()
        {
        }
        public static new GetWindowsFileSystemInvokeArgs Empty => new GetWindowsFileSystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetWindowsFileSystemResult
    {
        /// <summary>
        /// The ID for Microsoft Active Directory instance that the file system is join to.
        /// </summary>
        public readonly string ActiveDirectoryId;
        /// <summary>
        /// An array DNS alias names associated with the Amazon FSx file system.
        /// </summary>
        public readonly ImmutableArray<string> Aliases;
        /// <summary>
        /// Amazon Resource Name of the file system.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The configuration that Amazon FSx for Windows File Server uses to audit and log user accesses of files, folders, and file shares on the Amazon FSx for Windows File Server file system.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWindowsFileSystemAuditLogConfigurationResult> AuditLogConfigurations;
        /// <summary>
        /// The number of days to retain automatic backups.
        /// </summary>
        public readonly int AutomaticBackupRetentionDays;
        public readonly string BackupId;
        /// <summary>
        /// A boolean flag indicating whether tags on the file system should be copied to backups.
        /// </summary>
        public readonly bool CopyTagsToBackups;
        /// <summary>
        /// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
        /// </summary>
        public readonly string DailyAutomaticBackupStartTime;
        /// <summary>
        /// The file system deployment type.
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// DNS name for the file system (e.g. `fs-12345678.corp.example.com`).
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// Identifier of the file system (e.g. `fs-12345678`).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARN for the KMS Key to encrypt the file system at rest.
        /// </summary>
        public readonly string KmsKeyId;
        public readonly ImmutableArray<string> NetworkInterfaceIds;
        /// <summary>
        /// AWS account identifier that created the file system.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// The IP address of the primary, or preferred, file server.
        /// </summary>
        public readonly string PreferredFileServerIp;
        /// <summary>
        /// Specifies the subnet in which you want the preferred file server to be located.
        /// </summary>
        public readonly string PreferredSubnetId;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly bool SkipFinalBackup;
        /// <summary>
        /// The storage capacity of the file system in gibibytes (GiB).
        /// </summary>
        public readonly int StorageCapacity;
        /// <summary>
        /// The type of storage the file system is using. If set to `SSD`, the file system uses solid state drive storage. If set to `HDD`, the file system uses hard disk drive storage.
        /// </summary>
        public readonly string StorageType;
        /// <summary>
        /// Specifies the IDs of the subnets that the file system is accessible from.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// The tags to associate with the file system.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Throughput (megabytes per second) of the file system in power of 2 increments. Minimum of `8` and maximum of `2048`.
        /// </summary>
        public readonly int ThroughputCapacity;
        /// <summary>
        /// The ID of the primary virtual private cloud (VPC) for the file system.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// The preferred start time (in `d:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
        /// </summary>
        public readonly string WeeklyMaintenanceStartTime;

        [OutputConstructor]
        private GetWindowsFileSystemResult(
            string activeDirectoryId,

            ImmutableArray<string> aliases,

            string arn,

            ImmutableArray<Outputs.GetWindowsFileSystemAuditLogConfigurationResult> auditLogConfigurations,

            int automaticBackupRetentionDays,

            string backupId,

            bool copyTagsToBackups,

            string dailyAutomaticBackupStartTime,

            string deploymentType,

            string dnsName,

            string id,

            string kmsKeyId,

            ImmutableArray<string> networkInterfaceIds,

            string ownerId,

            string preferredFileServerIp,

            string preferredSubnetId,

            ImmutableArray<string> securityGroupIds,

            bool skipFinalBackup,

            int storageCapacity,

            string storageType,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string> tags,

            int throughputCapacity,

            string vpcId,

            string weeklyMaintenanceStartTime)
        {
            ActiveDirectoryId = activeDirectoryId;
            Aliases = aliases;
            Arn = arn;
            AuditLogConfigurations = auditLogConfigurations;
            AutomaticBackupRetentionDays = automaticBackupRetentionDays;
            BackupId = backupId;
            CopyTagsToBackups = copyTagsToBackups;
            DailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            DeploymentType = deploymentType;
            DnsName = dnsName;
            Id = id;
            KmsKeyId = kmsKeyId;
            NetworkInterfaceIds = networkInterfaceIds;
            OwnerId = ownerId;
            PreferredFileServerIp = preferredFileServerIp;
            PreferredSubnetId = preferredSubnetId;
            SecurityGroupIds = securityGroupIds;
            SkipFinalBackup = skipFinalBackup;
            StorageCapacity = storageCapacity;
            StorageType = storageType;
            SubnetIds = subnetIds;
            Tags = tags;
            ThroughputCapacity = throughputCapacity;
            VpcId = vpcId;
            WeeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
        }
    }
}
