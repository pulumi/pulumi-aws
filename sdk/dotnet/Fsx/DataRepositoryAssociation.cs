// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fsx
{
    [AwsResourceType("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation")]
    public partial class DataRepositoryAssociation : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("associationId")]
        public Output<string> AssociationId { get; private set; } = null!;

        [Output("batchImportMetaDataOnCreate")]
        public Output<bool?> BatchImportMetaDataOnCreate { get; private set; } = null!;

        [Output("dataRepositoryPath")]
        public Output<string> DataRepositoryPath { get; private set; } = null!;

        [Output("deleteDataInFilesystem")]
        public Output<bool?> DeleteDataInFilesystem { get; private set; } = null!;

        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        [Output("fileSystemPath")]
        public Output<string> FileSystemPath { get; private set; } = null!;

        [Output("importedFileChunkSize")]
        public Output<int> ImportedFileChunkSize { get; private set; } = null!;

        [Output("s3")]
        public Output<Outputs.DataRepositoryAssociationS3> S3 { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a DataRepositoryAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DataRepositoryAssociation(string name, DataRepositoryAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, args ?? new DataRepositoryAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DataRepositoryAssociation(string name, Input<string> id, DataRepositoryAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:fsx/dataRepositoryAssociation:DataRepositoryAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DataRepositoryAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DataRepositoryAssociation Get(string name, Input<string> id, DataRepositoryAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new DataRepositoryAssociation(name, id, state, options);
        }
    }

    public sealed class DataRepositoryAssociationArgs : global::Pulumi.ResourceArgs
    {
        [Input("batchImportMetaDataOnCreate")]
        public Input<bool>? BatchImportMetaDataOnCreate { get; set; }

        [Input("dataRepositoryPath", required: true)]
        public Input<string> DataRepositoryPath { get; set; } = null!;

        [Input("deleteDataInFilesystem")]
        public Input<bool>? DeleteDataInFilesystem { get; set; }

        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        [Input("fileSystemPath", required: true)]
        public Input<string> FileSystemPath { get; set; } = null!;

        [Input("importedFileChunkSize")]
        public Input<int>? ImportedFileChunkSize { get; set; }

        [Input("s3")]
        public Input<Inputs.DataRepositoryAssociationS3Args>? S3 { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DataRepositoryAssociationArgs()
        {
        }
        public static new DataRepositoryAssociationArgs Empty => new DataRepositoryAssociationArgs();
    }

    public sealed class DataRepositoryAssociationState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("associationId")]
        public Input<string>? AssociationId { get; set; }

        [Input("batchImportMetaDataOnCreate")]
        public Input<bool>? BatchImportMetaDataOnCreate { get; set; }

        [Input("dataRepositoryPath")]
        public Input<string>? DataRepositoryPath { get; set; }

        [Input("deleteDataInFilesystem")]
        public Input<bool>? DeleteDataInFilesystem { get; set; }

        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        [Input("fileSystemPath")]
        public Input<string>? FileSystemPath { get; set; }

        [Input("importedFileChunkSize")]
        public Input<int>? ImportedFileChunkSize { get; set; }

        [Input("s3")]
        public Input<Inputs.DataRepositoryAssociationS3GetArgs>? S3 { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public DataRepositoryAssociationState()
        {
        }
        public static new DataRepositoryAssociationState Empty => new DataRepositoryAssociationState();
    }
}
