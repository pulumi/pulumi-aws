// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fsx
{
    public static class GetOntapFileSystem
    {
        /// <summary>
        /// Retrieve information on FSx ONTAP File System.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Fsx.GetOntapFileSystem.Invoke(new()
        ///     {
        ///         Id = "fs-12345678",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOntapFileSystemResult> InvokeAsync(GetOntapFileSystemArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOntapFileSystemResult>("aws:fsx/getOntapFileSystem:getOntapFileSystem", args ?? new GetOntapFileSystemArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information on FSx ONTAP File System.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Fsx.GetOntapFileSystem.Invoke(new()
        ///     {
        ///         Id = "fs-12345678",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOntapFileSystemResult> Invoke(GetOntapFileSystemInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOntapFileSystemResult>("aws:fsx/getOntapFileSystem:getOntapFileSystem", args ?? new GetOntapFileSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOntapFileSystemArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the file system (e.g. `fs-12345678`).
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// The tags associated with the file system.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetOntapFileSystemArgs()
        {
        }
        public static new GetOntapFileSystemArgs Empty => new GetOntapFileSystemArgs();
    }

    public sealed class GetOntapFileSystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the file system (e.g. `fs-12345678`).
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The tags associated with the file system.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetOntapFileSystemInvokeArgs()
        {
        }
        public static new GetOntapFileSystemInvokeArgs Empty => new GetOntapFileSystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetOntapFileSystemResult
    {
        /// <summary>
        /// Amazon Resource Name of the file system.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The number of days to retain automatic backups.
        /// </summary>
        public readonly int AutomaticBackupRetentionDays;
        /// <summary>
        /// The preferred time (in `HH:MM` format) to take daily automatic backups, in the UTC time zone.
        /// </summary>
        public readonly string DailyAutomaticBackupStartTime;
        /// <summary>
        /// The file system deployment type.
        /// </summary>
        public readonly string DeploymentType;
        /// <summary>
        /// The SSD IOPS configuration for the Amazon FSx for NetApp ONTAP file system, specifying the number of provisioned IOPS and the provision mode. See Disk IOPS Below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOntapFileSystemDiskIopsConfigurationResult> DiskIopsConfigurations;
        /// <summary>
        /// DNS name for the file system (e.g. `fs-12345678.corp.example.com`).
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// (Multi-AZ only) Specifies the IP address range in which the endpoints to access your file system exist.
        /// </summary>
        public readonly string EndpointIpAddressRange;
        /// <summary>
        /// The Management and Intercluster FileSystemEndpoints that are used to access data or to manage the file system using the NetApp ONTAP CLI, REST API, or NetApp SnapMirror. See FileSystemEndpoints below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOntapFileSystemEndpointResult> Endpoints;
        /// <summary>
        /// Identifier of the file system (e.g. `fs-12345678`).
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARN for the KMS Key to encrypt the file system at rest.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// The IDs of the elastic network interfaces from which a specific file system is accessible.
        /// </summary>
        public readonly ImmutableArray<string> NetworkInterfaceIds;
        /// <summary>
        /// AWS account identifier that created the file system.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// Specifies the subnet in which you want the preferred file server to be located.
        /// </summary>
        public readonly string PreferredSubnetId;
        /// <summary>
        /// (Multi-AZ only) The VPC route tables in which your file system's endpoints exist.
        /// </summary>
        public readonly ImmutableArray<string> RouteTableIds;
        /// <summary>
        /// The storage capacity of the file system in gibibytes (GiB).
        /// </summary>
        public readonly int StorageCapacity;
        /// <summary>
        /// The type of storage the file system is using. If set to `SSD`, the file system uses solid state drive storage. If set to `HDD`, the file system uses hard disk drive storage.
        /// </summary>
        public readonly string StorageType;
        /// <summary>
        /// Specifies the IDs of the subnets that the file system is accessible from. For the MULTI_AZ_1 file system deployment type, there are two subnet IDs, one for the preferred file server and one for the standby file server. The preferred file server subnet identified in the `preferred_subnet_id` property.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// The tags associated with the file system.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The sustained throughput of an Amazon FSx file system in Megabytes per second (MBps).
        /// </summary>
        public readonly int ThroughputCapacity;
        /// <summary>
        /// The ID of the primary virtual private cloud (VPC) for the file system.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// The preferred start time (in `D:HH:MM` format) to perform weekly maintenance, in the UTC time zone.
        /// </summary>
        public readonly string WeeklyMaintenanceStartTime;

        [OutputConstructor]
        private GetOntapFileSystemResult(
            string arn,

            int automaticBackupRetentionDays,

            string dailyAutomaticBackupStartTime,

            string deploymentType,

            ImmutableArray<Outputs.GetOntapFileSystemDiskIopsConfigurationResult> diskIopsConfigurations,

            string dnsName,

            string endpointIpAddressRange,

            ImmutableArray<Outputs.GetOntapFileSystemEndpointResult> endpoints,

            string id,

            string kmsKeyId,

            ImmutableArray<string> networkInterfaceIds,

            string ownerId,

            string preferredSubnetId,

            ImmutableArray<string> routeTableIds,

            int storageCapacity,

            string storageType,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string> tags,

            int throughputCapacity,

            string vpcId,

            string weeklyMaintenanceStartTime)
        {
            Arn = arn;
            AutomaticBackupRetentionDays = automaticBackupRetentionDays;
            DailyAutomaticBackupStartTime = dailyAutomaticBackupStartTime;
            DeploymentType = deploymentType;
            DiskIopsConfigurations = diskIopsConfigurations;
            DnsName = dnsName;
            EndpointIpAddressRange = endpointIpAddressRange;
            Endpoints = endpoints;
            Id = id;
            KmsKeyId = kmsKeyId;
            NetworkInterfaceIds = networkInterfaceIds;
            OwnerId = ownerId;
            PreferredSubnetId = preferredSubnetId;
            RouteTableIds = routeTableIds;
            StorageCapacity = storageCapacity;
            StorageType = storageType;
            SubnetIds = subnetIds;
            Tags = tags;
            ThroughputCapacity = throughputCapacity;
            VpcId = vpcId;
            WeeklyMaintenanceStartTime = weeklyMaintenanceStartTime;
        }
    }
}
