// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fsx
{
    [AwsResourceType("aws:fsx/lustreFileSystem:LustreFileSystem")]
    public partial class LustreFileSystem : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("autoImportPolicy")]
        public Output<string> AutoImportPolicy { get; private set; } = null!;

        [Output("automaticBackupRetentionDays")]
        public Output<int> AutomaticBackupRetentionDays { get; private set; } = null!;

        [Output("backupId")]
        public Output<string?> BackupId { get; private set; } = null!;

        [Output("copyTagsToBackups")]
        public Output<bool?> CopyTagsToBackups { get; private set; } = null!;

        [Output("dailyAutomaticBackupStartTime")]
        public Output<string> DailyAutomaticBackupStartTime { get; private set; } = null!;

        [Output("dataCompressionType")]
        public Output<string?> DataCompressionType { get; private set; } = null!;

        [Output("deploymentType")]
        public Output<string?> DeploymentType { get; private set; } = null!;

        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        [Output("driveCacheType")]
        public Output<string?> DriveCacheType { get; private set; } = null!;

        [Output("exportPath")]
        public Output<string> ExportPath { get; private set; } = null!;

        [Output("fileSystemTypeVersion")]
        public Output<string> FileSystemTypeVersion { get; private set; } = null!;

        [Output("importPath")]
        public Output<string?> ImportPath { get; private set; } = null!;

        [Output("importedFileChunkSize")]
        public Output<int> ImportedFileChunkSize { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string> KmsKeyId { get; private set; } = null!;

        [Output("logConfiguration")]
        public Output<Outputs.LustreFileSystemLogConfiguration> LogConfiguration { get; private set; } = null!;

        [Output("mountName")]
        public Output<string> MountName { get; private set; } = null!;

        [Output("networkInterfaceIds")]
        public Output<ImmutableArray<string>> NetworkInterfaceIds { get; private set; } = null!;

        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        [Output("perUnitStorageThroughput")]
        public Output<int?> PerUnitStorageThroughput { get; private set; } = null!;

        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        [Output("storageCapacity")]
        public Output<int?> StorageCapacity { get; private set; } = null!;

        [Output("storageType")]
        public Output<string?> StorageType { get; private set; } = null!;

        [Output("subnetIds")]
        public Output<string> SubnetIds { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        [Output("weeklyMaintenanceStartTime")]
        public Output<string> WeeklyMaintenanceStartTime { get; private set; } = null!;


        /// <summary>
        /// Create a LustreFileSystem resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LustreFileSystem(string name, LustreFileSystemArgs args, CustomResourceOptions? options = null)
            : base("aws:fsx/lustreFileSystem:LustreFileSystem", name, args ?? new LustreFileSystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LustreFileSystem(string name, Input<string> id, LustreFileSystemState? state = null, CustomResourceOptions? options = null)
            : base("aws:fsx/lustreFileSystem:LustreFileSystem", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LustreFileSystem resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LustreFileSystem Get(string name, Input<string> id, LustreFileSystemState? state = null, CustomResourceOptions? options = null)
        {
            return new LustreFileSystem(name, id, state, options);
        }
    }

    public sealed class LustreFileSystemArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoImportPolicy")]
        public Input<string>? AutoImportPolicy { get; set; }

        [Input("automaticBackupRetentionDays")]
        public Input<int>? AutomaticBackupRetentionDays { get; set; }

        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        [Input("copyTagsToBackups")]
        public Input<bool>? CopyTagsToBackups { get; set; }

        [Input("dailyAutomaticBackupStartTime")]
        public Input<string>? DailyAutomaticBackupStartTime { get; set; }

        [Input("dataCompressionType")]
        public Input<string>? DataCompressionType { get; set; }

        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        [Input("driveCacheType")]
        public Input<string>? DriveCacheType { get; set; }

        [Input("exportPath")]
        public Input<string>? ExportPath { get; set; }

        [Input("fileSystemTypeVersion")]
        public Input<string>? FileSystemTypeVersion { get; set; }

        [Input("importPath")]
        public Input<string>? ImportPath { get; set; }

        [Input("importedFileChunkSize")]
        public Input<int>? ImportedFileChunkSize { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("logConfiguration")]
        public Input<Inputs.LustreFileSystemLogConfigurationArgs>? LogConfiguration { get; set; }

        [Input("perUnitStorageThroughput")]
        public Input<int>? PerUnitStorageThroughput { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("storageCapacity")]
        public Input<int>? StorageCapacity { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("subnetIds", required: true)]
        public Input<string> SubnetIds { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("weeklyMaintenanceStartTime")]
        public Input<string>? WeeklyMaintenanceStartTime { get; set; }

        public LustreFileSystemArgs()
        {
        }
        public static new LustreFileSystemArgs Empty => new LustreFileSystemArgs();
    }

    public sealed class LustreFileSystemState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("autoImportPolicy")]
        public Input<string>? AutoImportPolicy { get; set; }

        [Input("automaticBackupRetentionDays")]
        public Input<int>? AutomaticBackupRetentionDays { get; set; }

        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        [Input("copyTagsToBackups")]
        public Input<bool>? CopyTagsToBackups { get; set; }

        [Input("dailyAutomaticBackupStartTime")]
        public Input<string>? DailyAutomaticBackupStartTime { get; set; }

        [Input("dataCompressionType")]
        public Input<string>? DataCompressionType { get; set; }

        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("driveCacheType")]
        public Input<string>? DriveCacheType { get; set; }

        [Input("exportPath")]
        public Input<string>? ExportPath { get; set; }

        [Input("fileSystemTypeVersion")]
        public Input<string>? FileSystemTypeVersion { get; set; }

        [Input("importPath")]
        public Input<string>? ImportPath { get; set; }

        [Input("importedFileChunkSize")]
        public Input<int>? ImportedFileChunkSize { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("logConfiguration")]
        public Input<Inputs.LustreFileSystemLogConfigurationGetArgs>? LogConfiguration { get; set; }

        [Input("mountName")]
        public Input<string>? MountName { get; set; }

        [Input("networkInterfaceIds")]
        private InputList<string>? _networkInterfaceIds;
        public InputList<string> NetworkInterfaceIds
        {
            get => _networkInterfaceIds ?? (_networkInterfaceIds = new InputList<string>());
            set => _networkInterfaceIds = value;
        }

        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("perUnitStorageThroughput")]
        public Input<int>? PerUnitStorageThroughput { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("storageCapacity")]
        public Input<int>? StorageCapacity { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("subnetIds")]
        public Input<string>? SubnetIds { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("weeklyMaintenanceStartTime")]
        public Input<string>? WeeklyMaintenanceStartTime { get; set; }

        public LustreFileSystemState()
        {
        }
        public static new LustreFileSystemState Empty => new LustreFileSystemState();
    }
}
