// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dms
{
    public static class GetReplicationSubnetGroup
    {
        /// <summary>
        /// TODO data source for managing an AWS DMS (Database Migration) Replication Subnet Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Dms.GetReplicationSubnetGroup.Invoke(new()
        ///     {
        ///         ReplicationSubnetGroupId = aws_dms_replication_subnet_group.Test.Replication_subnet_group_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReplicationSubnetGroupResult> InvokeAsync(GetReplicationSubnetGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationSubnetGroupResult>("aws:dms/getReplicationSubnetGroup:getReplicationSubnetGroup", args ?? new GetReplicationSubnetGroupArgs(), options.WithDefaults());

        /// <summary>
        /// TODO data source for managing an AWS DMS (Database Migration) Replication Subnet Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Dms.GetReplicationSubnetGroup.Invoke(new()
        ///     {
        ///         ReplicationSubnetGroupId = aws_dms_replication_subnet_group.Test.Replication_subnet_group_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReplicationSubnetGroupResult> Invoke(GetReplicationSubnetGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationSubnetGroupResult>("aws:dms/getReplicationSubnetGroup:getReplicationSubnetGroup", args ?? new GetReplicationSubnetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationSubnetGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
        /// </summary>
        [Input("replicationSubnetGroupId", required: true)]
        public string ReplicationSubnetGroupId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetReplicationSubnetGroupArgs()
        {
        }
        public static new GetReplicationSubnetGroupArgs Empty => new GetReplicationSubnetGroupArgs();
    }

    public sealed class GetReplicationSubnetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
        /// </summary>
        [Input("replicationSubnetGroupId", required: true)]
        public Input<string> ReplicationSubnetGroupId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetReplicationSubnetGroupInvokeArgs()
        {
        }
        public static new GetReplicationSubnetGroupInvokeArgs Empty => new GetReplicationSubnetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationSubnetGroupResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ReplicationSubnetGroupArn;
        /// <summary>
        /// Description for the subnet group.
        /// </summary>
        public readonly string ReplicationSubnetGroupDescription;
        public readonly string ReplicationSubnetGroupId;
        public readonly string SubnetGroupStatus;
        /// <summary>
        /// List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The ID of the VPC the subnet group is in.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetReplicationSubnetGroupResult(
            string id,

            string replicationSubnetGroupArn,

            string replicationSubnetGroupDescription,

            string replicationSubnetGroupId,

            string subnetGroupStatus,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Id = id;
            ReplicationSubnetGroupArn = replicationSubnetGroupArn;
            ReplicationSubnetGroupDescription = replicationSubnetGroupDescription;
            ReplicationSubnetGroupId = replicationSubnetGroupId;
            SubnetGroupStatus = subnetGroupStatus;
            SubnetIds = subnetIds;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
