// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dms
{
    [AwsResourceType("aws:dms/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        [Output("certificateArn")]
        public Output<string> CertificateArn { get; private set; } = null!;

        [Output("databaseName")]
        public Output<string?> DatabaseName { get; private set; } = null!;

        [Output("elasticsearchSettings")]
        public Output<Outputs.EndpointElasticsearchSettings?> ElasticsearchSettings { get; private set; } = null!;

        [Output("endpointArn")]
        public Output<string> EndpointArn { get; private set; } = null!;

        [Output("endpointId")]
        public Output<string> EndpointId { get; private set; } = null!;

        [Output("endpointType")]
        public Output<string> EndpointType { get; private set; } = null!;

        [Output("engineName")]
        public Output<string> EngineName { get; private set; } = null!;

        [Output("extraConnectionAttributes")]
        public Output<string> ExtraConnectionAttributes { get; private set; } = null!;

        [Output("kafkaSettings")]
        public Output<Outputs.EndpointKafkaSettings?> KafkaSettings { get; private set; } = null!;

        [Output("kinesisSettings")]
        public Output<Outputs.EndpointKinesisSettings?> KinesisSettings { get; private set; } = null!;

        [Output("kmsKeyArn")]
        public Output<string> KmsKeyArn { get; private set; } = null!;

        [Output("mongodbSettings")]
        public Output<Outputs.EndpointMongodbSettings?> MongodbSettings { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        [Output("redisSettings")]
        public Output<Outputs.EndpointRedisSettings?> RedisSettings { get; private set; } = null!;

        [Output("redshiftSettings")]
        public Output<Outputs.EndpointRedshiftSettings> RedshiftSettings { get; private set; } = null!;

        [Output("s3Settings")]
        public Output<Outputs.EndpointS3Settings?> S3Settings { get; private set; } = null!;

        [Output("secretsManagerAccessRoleArn")]
        public Output<string?> SecretsManagerAccessRoleArn { get; private set; } = null!;

        [Output("secretsManagerArn")]
        public Output<string?> SecretsManagerArn { get; private set; } = null!;

        [Output("serverName")]
        public Output<string?> ServerName { get; private set; } = null!;

        [Output("serviceAccessRole")]
        public Output<string?> ServiceAccessRole { get; private set; } = null!;

        [Output("sslMode")]
        public Output<string> SslMode { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:dms/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:dms/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificateArn")]
        public Input<string>? CertificateArn { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("elasticsearchSettings")]
        public Input<Inputs.EndpointElasticsearchSettingsArgs>? ElasticsearchSettings { get; set; }

        [Input("endpointId", required: true)]
        public Input<string> EndpointId { get; set; } = null!;

        [Input("endpointType", required: true)]
        public Input<string> EndpointType { get; set; } = null!;

        [Input("engineName", required: true)]
        public Input<string> EngineName { get; set; } = null!;

        [Input("extraConnectionAttributes")]
        public Input<string>? ExtraConnectionAttributes { get; set; }

        [Input("kafkaSettings")]
        public Input<Inputs.EndpointKafkaSettingsArgs>? KafkaSettings { get; set; }

        [Input("kinesisSettings")]
        public Input<Inputs.EndpointKinesisSettingsArgs>? KinesisSettings { get; set; }

        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("mongodbSettings")]
        public Input<Inputs.EndpointMongodbSettingsArgs>? MongodbSettings { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("redisSettings")]
        public Input<Inputs.EndpointRedisSettingsArgs>? RedisSettings { get; set; }

        [Input("redshiftSettings")]
        public Input<Inputs.EndpointRedshiftSettingsArgs>? RedshiftSettings { get; set; }

        [Input("s3Settings")]
        public Input<Inputs.EndpointS3SettingsArgs>? S3Settings { get; set; }

        [Input("secretsManagerAccessRoleArn")]
        public Input<string>? SecretsManagerAccessRoleArn { get; set; }

        [Input("secretsManagerArn")]
        public Input<string>? SecretsManagerArn { get; set; }

        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        [Input("serviceAccessRole")]
        public Input<string>? ServiceAccessRole { get; set; }

        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        [Input("certificateArn")]
        public Input<string>? CertificateArn { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("elasticsearchSettings")]
        public Input<Inputs.EndpointElasticsearchSettingsGetArgs>? ElasticsearchSettings { get; set; }

        [Input("endpointArn")]
        public Input<string>? EndpointArn { get; set; }

        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        [Input("engineName")]
        public Input<string>? EngineName { get; set; }

        [Input("extraConnectionAttributes")]
        public Input<string>? ExtraConnectionAttributes { get; set; }

        [Input("kafkaSettings")]
        public Input<Inputs.EndpointKafkaSettingsGetArgs>? KafkaSettings { get; set; }

        [Input("kinesisSettings")]
        public Input<Inputs.EndpointKinesisSettingsGetArgs>? KinesisSettings { get; set; }

        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("mongodbSettings")]
        public Input<Inputs.EndpointMongodbSettingsGetArgs>? MongodbSettings { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("redisSettings")]
        public Input<Inputs.EndpointRedisSettingsGetArgs>? RedisSettings { get; set; }

        [Input("redshiftSettings")]
        public Input<Inputs.EndpointRedshiftSettingsGetArgs>? RedshiftSettings { get; set; }

        [Input("s3Settings")]
        public Input<Inputs.EndpointS3SettingsGetArgs>? S3Settings { get; set; }

        [Input("secretsManagerAccessRoleArn")]
        public Input<string>? SecretsManagerAccessRoleArn { get; set; }

        [Input("secretsManagerArn")]
        public Input<string>? SecretsManagerArn { get; set; }

        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        [Input("serviceAccessRole")]
        public Input<string>? ServiceAccessRole { get; set; }

        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("username")]
        public Input<string>? Username { get; set; }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
