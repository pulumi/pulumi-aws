// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dms
{
    public static class GetCertificate
    {
        /// <summary>
        /// Data source for managing an AWS DMS (Database Migration) Certificate.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Dms.GetCertificate.Invoke(new()
        ///     {
        ///         CertificateId = aws_dms_certificate.Test.Certificate_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("aws:dms/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS DMS (Database Migration) Certificate.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Dms.GetCertificate.Invoke(new()
        ///     {
        ///         CertificateId = aws_dms_certificate.Test.Certificate_id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("aws:dms/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
        /// </summary>
        [Input("certificateId", required: true)]
        public string CertificateId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A customer-assigned name for the certificate. Identifiers must begin with a letter and must contain only ASCII letters, digits, and hyphens. They can't end with a hyphen or contain two consecutive hyphens.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the certificate.
        /// </summary>
        public readonly string CertificateArn;
        /// <summary>
        /// The date that the certificate was created.
        /// </summary>
        public readonly string CertificateCreationDate;
        public readonly string CertificateId;
        /// <summary>
        /// The owner of the certificate.
        /// </summary>
        public readonly string CertificateOwner;
        /// <summary>
        /// The contents of a .pem file, which contains an X.509 certificate.
        /// </summary>
        public readonly string CertificatePem;
        /// <summary>
        /// The owner of the certificate.
        /// </summary>
        public readonly string CertificateWallet;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The key length of the cryptographic algorithm being used.
        /// </summary>
        public readonly int KeyLength;
        /// <summary>
        /// The algorithm for the certificate.
        /// </summary>
        public readonly string SigningAlgorithm;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The beginning date that the certificate is valid.
        /// </summary>
        public readonly string ValidFromDate;
        /// <summary>
        /// The final date that the certificate is valid.
        /// </summary>
        public readonly string ValidToDate;

        [OutputConstructor]
        private GetCertificateResult(
            string certificateArn,

            string certificateCreationDate,

            string certificateId,

            string certificateOwner,

            string certificatePem,

            string certificateWallet,

            string id,

            int keyLength,

            string signingAlgorithm,

            ImmutableDictionary<string, string> tags,

            string validFromDate,

            string validToDate)
        {
            CertificateArn = certificateArn;
            CertificateCreationDate = certificateCreationDate;
            CertificateId = certificateId;
            CertificateOwner = certificateOwner;
            CertificatePem = certificatePem;
            CertificateWallet = certificateWallet;
            Id = id;
            KeyLength = keyLength;
            SigningAlgorithm = signingAlgorithm;
            Tags = tags;
            ValidFromDate = validFromDate;
            ValidToDate = validToDate;
        }
    }
}
