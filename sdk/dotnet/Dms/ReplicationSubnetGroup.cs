// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dms
{
    /// <summary>
    /// Provides a DMS (Data Migration Service) replication subnet group resource. DMS replication subnet groups can be created, updated, deleted, and imported.
    /// 
    /// &gt; **Note:** AWS requires a special IAM role called `dms-vpc-role` when using this resource. See the example below to create it as part of your configuration.
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Create a new replication subnet group
    ///     var example = new Aws.Dms.ReplicationSubnetGroup("example", new()
    ///     {
    ///         ReplicationSubnetGroupDescription = "Example replication subnet group",
    ///         ReplicationSubnetGroupId = "example-dms-replication-subnet-group-tf",
    ///         SubnetIds = new[]
    ///         {
    ///             "subnet-12345678",
    ///             "subnet-12345679",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "example" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Creating special IAM role
    /// 
    /// If your account does not already include the `dms-vpc-role` IAM role, you will need to create it to allow DMS to manage subnets in the VPC.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dms_vpc_role = new Aws.Iam.Role("dms-vpc-role", new()
    ///     {
    ///         Description = "Allows DMS to manage VPC",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "dms.amazonaws.com",
    ///                     },
    ///                     ["Action"] = "sts:AssumeRole",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var exampleRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("exampleRolePolicyAttachment", new()
    ///     {
    ///         Role = dms_vpc_role.Name,
    ///         PolicyArn = "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole",
    ///     });
    /// 
    ///     var exampleReplicationSubnetGroup = new Aws.Dms.ReplicationSubnetGroup("exampleReplicationSubnetGroup", new()
    ///     {
    ///         ReplicationSubnetGroupDescription = "Example",
    ///         ReplicationSubnetGroupId = "example-id",
    ///         SubnetIds = new[]
    ///         {
    ///             "subnet-12345678",
    ///             "subnet-12345679",
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "example-id" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleRolePolicyAttachment,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Replication subnet groups can be imported using the `replication_subnet_group_id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:dms/replicationSubnetGroup:ReplicationSubnetGroup test test-dms-replication-subnet-group-tf
    /// ```
    /// </summary>
    [AwsResourceType("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup")]
    public partial class ReplicationSubnetGroup : global::Pulumi.CustomResource
    {
        [Output("replicationSubnetGroupArn")]
        public Output<string> ReplicationSubnetGroupArn { get; private set; } = null!;

        /// <summary>
        /// Description for the subnet group.
        /// </summary>
        [Output("replicationSubnetGroupDescription")]
        public Output<string> ReplicationSubnetGroupDescription { get; private set; } = null!;

        /// <summary>
        /// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
        /// </summary>
        [Output("replicationSubnetGroupId")]
        public Output<string> ReplicationSubnetGroupId { get; private set; } = null!;

        /// <summary>
        /// List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC the subnet group is in.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ReplicationSubnetGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReplicationSubnetGroup(string name, ReplicationSubnetGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", name, args ?? new ReplicationSubnetGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReplicationSubnetGroup(string name, Input<string> id, ReplicationSubnetGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:dms/replicationSubnetGroup:ReplicationSubnetGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReplicationSubnetGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReplicationSubnetGroup Get(string name, Input<string> id, ReplicationSubnetGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ReplicationSubnetGroup(name, id, state, options);
        }
    }

    public sealed class ReplicationSubnetGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description for the subnet group.
        /// </summary>
        [Input("replicationSubnetGroupDescription", required: true)]
        public Input<string> ReplicationSubnetGroupDescription { get; set; } = null!;

        /// <summary>
        /// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
        /// </summary>
        [Input("replicationSubnetGroupId", required: true)]
        public Input<string> ReplicationSubnetGroupId { get; set; } = null!;

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ReplicationSubnetGroupArgs()
        {
        }
        public static new ReplicationSubnetGroupArgs Empty => new ReplicationSubnetGroupArgs();
    }

    public sealed class ReplicationSubnetGroupState : global::Pulumi.ResourceArgs
    {
        [Input("replicationSubnetGroupArn")]
        public Input<string>? ReplicationSubnetGroupArn { get; set; }

        /// <summary>
        /// Description for the subnet group.
        /// </summary>
        [Input("replicationSubnetGroupDescription")]
        public Input<string>? ReplicationSubnetGroupDescription { get; set; }

        /// <summary>
        /// Name for the replication subnet group. This value is stored as a lowercase string. It must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens and cannot be `default`.
        /// </summary>
        [Input("replicationSubnetGroupId")]
        public Input<string>? ReplicationSubnetGroupId { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of at least 2 EC2 subnet IDs for the subnet group. The subnets must cover at least 2 availability zones.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The ID of the VPC the subnet group is in.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ReplicationSubnetGroupState()
        {
        }
        public static new ReplicationSubnetGroupState Empty => new ReplicationSubnetGroupState();
    }
}
