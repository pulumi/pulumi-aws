// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppConfig
{
    /// <summary>
    /// Provides an AppConfig Extension resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testTopic = new Aws.Sns.Topic("testTopic");
    /// 
    ///     var testPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "appconfig.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testRole = new Aws.Iam.Role("testRole", new()
    ///     {
    ///         AssumeRolePolicy = testPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var testExtension = new Aws.AppConfig.Extension("testExtension", new()
    ///     {
    ///         Description = "test description",
    ///         ActionPoints = new[]
    ///         {
    ///             new Aws.AppConfig.Inputs.ExtensionActionPointArgs
    ///             {
    ///                 Point = "ON_DEPLOYMENT_COMPLETE",
    ///                 Actions = new[]
    ///                 {
    ///                     new Aws.AppConfig.Inputs.ExtensionActionPointActionArgs
    ///                     {
    ///                         Name = "test",
    ///                         RoleArn = testRole.Arn,
    ///                         Uri = testTopic.Arn,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Type", "AppConfig Extension" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_appconfig_extension.example
    /// 
    ///  id = "71rxuzt" } Using `pulumi import`, import AppConfig Extensions using their extension ID. For exampleconsole % pulumi import aws_appconfig_extension.example 71rxuzt
    /// </summary>
    [AwsResourceType("aws:appconfig/extension:Extension")]
    public partial class Extension : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action points defined in the extension. Detailed below.
        /// </summary>
        [Output("actionPoints")]
        public Output<ImmutableArray<Outputs.ExtensionActionPoint>> ActionPoints { get; private set; } = null!;

        /// <summary>
        /// ARN of the AppConfig Extension.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Information about the extension.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.ExtensionParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The version number for the extension.
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Extension resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Extension(string name, ExtensionArgs args, CustomResourceOptions? options = null)
            : base("aws:appconfig/extension:Extension", name, args ?? new ExtensionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Extension(string name, Input<string> id, ExtensionState? state = null, CustomResourceOptions? options = null)
            : base("aws:appconfig/extension:Extension", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Extension resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Extension Get(string name, Input<string> id, ExtensionState? state = null, CustomResourceOptions? options = null)
        {
            return new Extension(name, id, state, options);
        }
    }

    public sealed class ExtensionArgs : global::Pulumi.ResourceArgs
    {
        [Input("actionPoints", required: true)]
        private InputList<Inputs.ExtensionActionPointArgs>? _actionPoints;

        /// <summary>
        /// The action points defined in the extension. Detailed below.
        /// </summary>
        public InputList<Inputs.ExtensionActionPointArgs> ActionPoints
        {
            get => _actionPoints ?? (_actionPoints = new InputList<Inputs.ExtensionActionPointArgs>());
            set => _actionPoints = value;
        }

        /// <summary>
        /// Information about the extension.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputList<Inputs.ExtensionParameterArgs>? _parameters;

        /// <summary>
        /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
        /// </summary>
        public InputList<Inputs.ExtensionParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.ExtensionParameterArgs>());
            set => _parameters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ExtensionArgs()
        {
        }
        public static new ExtensionArgs Empty => new ExtensionArgs();
    }

    public sealed class ExtensionState : global::Pulumi.ResourceArgs
    {
        [Input("actionPoints")]
        private InputList<Inputs.ExtensionActionPointGetArgs>? _actionPoints;

        /// <summary>
        /// The action points defined in the extension. Detailed below.
        /// </summary>
        public InputList<Inputs.ExtensionActionPointGetArgs> ActionPoints
        {
            get => _actionPoints ?? (_actionPoints = new InputList<Inputs.ExtensionActionPointGetArgs>());
            set => _actionPoints = value;
        }

        /// <summary>
        /// ARN of the AppConfig Extension.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Information about the extension.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("parameters")]
        private InputList<Inputs.ExtensionParameterGetArgs>? _parameters;

        /// <summary>
        /// The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the CreateExtensionAssociation API action. For Lambda extension actions, these parameters are included in the Lambda request object. Detailed below.
        /// </summary>
        public InputList<Inputs.ExtensionParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.ExtensionParameterGetArgs>());
            set => _parameters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The version number for the extension.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ExtensionState()
        {
        }
        public static new ExtensionState Empty => new ExtensionState();
    }
}
