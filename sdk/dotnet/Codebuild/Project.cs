// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeBuild
{
    /// <summary>
    /// Provides a CodeBuild Project resource. See also the [`aws.codebuild.Webhook` resource](https://www.terraform.io/docs/providers/aws/r/codebuild_webhook.html), which manages the webhook to the source (e.g. the "rebuild every time a code change is pushed" option in the CodeBuild web console).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codebuild_project.html.markdown.
    /// </summary>
    public partial class Project : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the CodeBuild project.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Information about the project's build output artifacts. Artifact blocks are documented below.
        /// </summary>
        [Output("artifacts")]
        public Output<Outputs.ProjectArtifacts> Artifacts { get; private set; } = null!;

        /// <summary>
        /// Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
        /// </summary>
        [Output("badgeEnabled")]
        public Output<bool?> BadgeEnabled { get; private set; } = null!;

        /// <summary>
        /// The URL of the build badge when `badge_enabled` is enabled.
        /// </summary>
        [Output("badgeUrl")]
        public Output<string> BadgeUrl { get; private set; } = null!;

        /// <summary>
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        /// </summary>
        [Output("buildTimeout")]
        public Output<int?> BuildTimeout { get; private set; } = null!;

        /// <summary>
        /// Information about the cache storage for the project. Cache blocks are documented below.
        /// </summary>
        [Output("cache")]
        public Output<Outputs.ProjectCache?> Cache { get; private set; } = null!;

        /// <summary>
        /// A short description of the project.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
        /// </summary>
        [Output("encryptionKey")]
        public Output<string> EncryptionKey { get; private set; } = null!;

        /// <summary>
        /// Information about the project's build environment. Environment blocks are documented below.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.ProjectEnvironment> Environment { get; private set; } = null!;

        /// <summary>
        /// Configuration for the builds to store log data to CloudWatch or S3.
        /// </summary>
        [Output("logsConfig")]
        public Output<Outputs.ProjectLogsConfig?> LogsConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// How long in minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
        /// </summary>
        [Output("queuedTimeout")]
        public Output<int?> QueuedTimeout { get; private set; } = null!;

        /// <summary>
        /// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
        /// </summary>
        [Output("secondaryArtifacts")]
        public Output<ImmutableArray<Outputs.ProjectSecondaryArtifacts>> SecondaryArtifacts { get; private set; } = null!;

        /// <summary>
        /// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
        /// </summary>
        [Output("secondarySources")]
        public Output<ImmutableArray<Outputs.ProjectSecondarySources>> SecondarySources { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        /// </summary>
        [Output("serviceRole")]
        public Output<string> ServiceRole { get; private set; } = null!;

        /// <summary>
        /// Information about the project's input source code. Source blocks are documented below.
        /// </summary>
        [Output("source")]
        public Output<Outputs.ProjectSource> Source { get; private set; } = null!;

        /// <summary>
        /// A version of the build input to be built for this project. If not specified, the latest version is used.
        /// </summary>
        [Output("sourceVersion")]
        public Output<string?> SourceVersion { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.ProjectVpcConfig?> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("aws:codebuild/project:Project", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("aws:codebuild/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about the project's build output artifacts. Artifact blocks are documented below.
        /// </summary>
        [Input("artifacts", required: true)]
        public Input<Inputs.ProjectArtifactsArgs> Artifacts { get; set; } = null!;

        /// <summary>
        /// Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
        /// </summary>
        [Input("badgeEnabled")]
        public Input<bool>? BadgeEnabled { get; set; }

        /// <summary>
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        /// </summary>
        [Input("buildTimeout")]
        public Input<int>? BuildTimeout { get; set; }

        /// <summary>
        /// Information about the cache storage for the project. Cache blocks are documented below.
        /// </summary>
        [Input("cache")]
        public Input<Inputs.ProjectCacheArgs>? Cache { get; set; }

        /// <summary>
        /// A short description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
        /// </summary>
        [Input("encryptionKey")]
        public Input<string>? EncryptionKey { get; set; }

        /// <summary>
        /// Information about the project's build environment. Environment blocks are documented below.
        /// </summary>
        [Input("environment", required: true)]
        public Input<Inputs.ProjectEnvironmentArgs> Environment { get; set; } = null!;

        /// <summary>
        /// Configuration for the builds to store log data to CloudWatch or S3.
        /// </summary>
        [Input("logsConfig")]
        public Input<Inputs.ProjectLogsConfigArgs>? LogsConfig { get; set; }

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// How long in minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
        /// </summary>
        [Input("queuedTimeout")]
        public Input<int>? QueuedTimeout { get; set; }

        [Input("secondaryArtifacts")]
        private InputList<Inputs.ProjectSecondaryArtifactsArgs>? _secondaryArtifacts;

        /// <summary>
        /// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
        /// </summary>
        public InputList<Inputs.ProjectSecondaryArtifactsArgs> SecondaryArtifacts
        {
            get => _secondaryArtifacts ?? (_secondaryArtifacts = new InputList<Inputs.ProjectSecondaryArtifactsArgs>());
            set => _secondaryArtifacts = value;
        }

        [Input("secondarySources")]
        private InputList<Inputs.ProjectSecondarySourcesArgs>? _secondarySources;

        /// <summary>
        /// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
        /// </summary>
        public InputList<Inputs.ProjectSecondarySourcesArgs> SecondarySources
        {
            get => _secondarySources ?? (_secondarySources = new InputList<Inputs.ProjectSecondarySourcesArgs>());
            set => _secondarySources = value;
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        /// </summary>
        [Input("serviceRole", required: true)]
        public Input<string> ServiceRole { get; set; } = null!;

        /// <summary>
        /// Information about the project's input source code. Source blocks are documented below.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.ProjectSourceArgs> Source { get; set; } = null!;

        /// <summary>
        /// A version of the build input to be built for this project. If not specified, the latest version is used.
        /// </summary>
        [Input("sourceVersion")]
        public Input<string>? SourceVersion { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.ProjectVpcConfigArgs>? VpcConfig { get; set; }

        public ProjectArgs()
        {
        }
    }

    public sealed class ProjectState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the CodeBuild project.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Information about the project's build output artifacts. Artifact blocks are documented below.
        /// </summary>
        [Input("artifacts")]
        public Input<Inputs.ProjectArtifactsGetArgs>? Artifacts { get; set; }

        /// <summary>
        /// Generates a publicly-accessible URL for the projects build badge. Available as `badge_url` attribute when enabled.
        /// </summary>
        [Input("badgeEnabled")]
        public Input<bool>? BadgeEnabled { get; set; }

        /// <summary>
        /// The URL of the build badge when `badge_enabled` is enabled.
        /// </summary>
        [Input("badgeUrl")]
        public Input<string>? BadgeUrl { get; set; }

        /// <summary>
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        /// </summary>
        [Input("buildTimeout")]
        public Input<int>? BuildTimeout { get; set; }

        /// <summary>
        /// Information about the cache storage for the project. Cache blocks are documented below.
        /// </summary>
        [Input("cache")]
        public Input<Inputs.ProjectCacheGetArgs>? Cache { get; set; }

        /// <summary>
        /// A short description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The AWS Key Management Service (AWS KMS) customer master key (CMK) to be used for encrypting the build project's build output artifacts.
        /// </summary>
        [Input("encryptionKey")]
        public Input<string>? EncryptionKey { get; set; }

        /// <summary>
        /// Information about the project's build environment. Environment blocks are documented below.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.ProjectEnvironmentGetArgs>? Environment { get; set; }

        /// <summary>
        /// Configuration for the builds to store log data to CloudWatch or S3.
        /// </summary>
        [Input("logsConfig")]
        public Input<Inputs.ProjectLogsConfigGetArgs>? LogsConfig { get; set; }

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// How long in minutes, from 5 to 480 (8 hours), a build is allowed to be queued before it times out. The default is 8 hours.
        /// </summary>
        [Input("queuedTimeout")]
        public Input<int>? QueuedTimeout { get; set; }

        [Input("secondaryArtifacts")]
        private InputList<Inputs.ProjectSecondaryArtifactsGetArgs>? _secondaryArtifacts;

        /// <summary>
        /// A set of secondary artifacts to be used inside the build. Secondary artifacts blocks are documented below.
        /// </summary>
        public InputList<Inputs.ProjectSecondaryArtifactsGetArgs> SecondaryArtifacts
        {
            get => _secondaryArtifacts ?? (_secondaryArtifacts = new InputList<Inputs.ProjectSecondaryArtifactsGetArgs>());
            set => _secondaryArtifacts = value;
        }

        [Input("secondarySources")]
        private InputList<Inputs.ProjectSecondarySourcesGetArgs>? _secondarySources;

        /// <summary>
        /// A set of secondary sources to be used inside the build. Secondary sources blocks are documented below.
        /// </summary>
        public InputList<Inputs.ProjectSecondarySourcesGetArgs> SecondarySources
        {
            get => _secondarySources ?? (_secondarySources = new InputList<Inputs.ProjectSecondarySourcesGetArgs>());
            set => _secondarySources = value;
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// Information about the project's input source code. Source blocks are documented below.
        /// </summary>
        [Input("source")]
        public Input<Inputs.ProjectSourceGetArgs>? Source { get; set; }

        /// <summary>
        /// A version of the build input to be built for this project. If not specified, the latest version is used.
        /// </summary>
        [Input("sourceVersion")]
        public Input<string>? SourceVersion { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Configuration for the builds to run inside a VPC. VPC config blocks are documented below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.ProjectVpcConfigGetArgs>? VpcConfig { get; set; }

        public ProjectState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ProjectArtifactsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        /// </summary>
        [Input("artifactIdentifier")]
        public Input<string>? ArtifactIdentifier { get; set; }

        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        [Input("encryptionDisabled")]
        public Input<bool>? EncryptionDisabled { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        /// </summary>
        [Input("namespaceType")]
        public Input<string>? NamespaceType { get; set; }

        /// <summary>
        /// If set to true, a name specified in the build spec file overrides the artifact name.
        /// </summary>
        [Input("overrideArtifactName")]
        public Input<bool>? OverrideArtifactName { get; set; }

        /// <summary>
        /// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        /// </summary>
        [Input("packaging")]
        public Input<string>? Packaging { get; set; }

        /// <summary>
        /// If `type` is set to `S3`, this is the path to the output artifact
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectArtifactsArgs()
        {
        }
    }

    public sealed class ProjectArtifactsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        /// </summary>
        [Input("artifactIdentifier")]
        public Input<string>? ArtifactIdentifier { get; set; }

        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        [Input("encryptionDisabled")]
        public Input<bool>? EncryptionDisabled { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        /// </summary>
        [Input("namespaceType")]
        public Input<string>? NamespaceType { get; set; }

        /// <summary>
        /// If set to true, a name specified in the build spec file overrides the artifact name.
        /// </summary>
        [Input("overrideArtifactName")]
        public Input<bool>? OverrideArtifactName { get; set; }

        /// <summary>
        /// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        /// </summary>
        [Input("packaging")]
        public Input<string>? Packaging { get; set; }

        /// <summary>
        /// If `type` is set to `S3`, this is the path to the output artifact
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectArtifactsGetArgs()
        {
        }
    }

    public sealed class ProjectCacheArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("modes")]
        private InputList<string>? _modes;

        /// <summary>
        /// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
        /// </summary>
        public InputList<string> Modes
        {
            get => _modes ?? (_modes = new InputList<string>());
            set => _modes = value;
        }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ProjectCacheArgs()
        {
        }
    }

    public sealed class ProjectCacheGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        [Input("modes")]
        private InputList<string>? _modes;

        /// <summary>
        /// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
        /// </summary>
        public InputList<string> Modes
        {
            get => _modes ?? (_modes = new InputList<string>());
            set => _modes = value;
        }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ProjectCacheGetArgs()
        {
        }
    }

    public sealed class ProjectEnvironmentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
        /// </summary>
        [Input("computeType", required: true)]
        public Input<string> ComputeType { get; set; } = null!;

        [Input("environmentVariables")]
        private InputList<ProjectEnvironmentEnvironmentVariablesArgs>? _environmentVariables;

        /// <summary>
        /// A set of environment variables to make available to builds for this build project.
        /// </summary>
        public InputList<ProjectEnvironmentEnvironmentVariablesArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<ProjectEnvironmentEnvironmentVariablesArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
        /// </summary>
        [Input("imagePullCredentialsType")]
        public Input<string>? ImagePullCredentialsType { get; set; }

        /// <summary>
        /// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
        /// </summary>
        [Input("privilegedMode")]
        public Input<bool>? PrivilegedMode { get; set; }

        /// <summary>
        /// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        /// </summary>
        [Input("registryCredential")]
        public Input<ProjectEnvironmentRegistryCredentialArgs>? RegistryCredential { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectEnvironmentArgs()
        {
        }
    }

    public sealed class ProjectEnvironmentEnvironmentVariablesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The environment variable's value.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ProjectEnvironmentEnvironmentVariablesArgs()
        {
        }
    }

    public sealed class ProjectEnvironmentEnvironmentVariablesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The environment variable's value.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ProjectEnvironmentEnvironmentVariablesGetArgs()
        {
        }
    }

    public sealed class ProjectEnvironmentGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
        /// </summary>
        [Input("computeType", required: true)]
        public Input<string> ComputeType { get; set; } = null!;

        [Input("environmentVariables")]
        private InputList<ProjectEnvironmentEnvironmentVariablesGetArgs>? _environmentVariables;

        /// <summary>
        /// A set of environment variables to make available to builds for this build project.
        /// </summary>
        public InputList<ProjectEnvironmentEnvironmentVariablesGetArgs> EnvironmentVariables
        {
            get => _environmentVariables ?? (_environmentVariables = new InputList<ProjectEnvironmentEnvironmentVariablesGetArgs>());
            set => _environmentVariables = value;
        }

        /// <summary>
        /// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
        /// </summary>
        [Input("imagePullCredentialsType")]
        public Input<string>? ImagePullCredentialsType { get; set; }

        /// <summary>
        /// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
        /// </summary>
        [Input("privilegedMode")]
        public Input<bool>? PrivilegedMode { get; set; }

        /// <summary>
        /// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        /// </summary>
        [Input("registryCredential")]
        public Input<ProjectEnvironmentRegistryCredentialGetArgs>? RegistryCredential { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectEnvironmentGetArgs()
        {
        }
    }

    public sealed class ProjectEnvironmentRegistryCredentialArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        /// </summary>
        [Input("credential", required: true)]
        public Input<string> Credential { get; set; } = null!;

        /// <summary>
        /// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
        /// </summary>
        [Input("credentialProvider", required: true)]
        public Input<string> CredentialProvider { get; set; } = null!;

        public ProjectEnvironmentRegistryCredentialArgs()
        {
        }
    }

    public sealed class ProjectEnvironmentRegistryCredentialGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        /// </summary>
        [Input("credential", required: true)]
        public Input<string> Credential { get; set; } = null!;

        /// <summary>
        /// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
        /// </summary>
        [Input("credentialProvider", required: true)]
        public Input<string> CredentialProvider { get; set; } = null!;

        public ProjectEnvironmentRegistryCredentialGetArgs()
        {
        }
    }

    public sealed class ProjectLogsConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the builds to store logs to CloudWatch
        /// </summary>
        [Input("cloudwatchLogs")]
        public Input<ProjectLogsConfigCloudwatchLogsArgs>? CloudwatchLogs { get; set; }

        /// <summary>
        /// Configuration for the builds to store logs to S3.
        /// </summary>
        [Input("s3Logs")]
        public Input<ProjectLogsConfigS3LogsArgs>? S3Logs { get; set; }

        public ProjectLogsConfigArgs()
        {
        }
    }

    public sealed class ProjectLogsConfigCloudwatchLogsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group name of the logs in CloudWatch Logs.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The stream name of the logs in CloudWatch Logs.
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        public ProjectLogsConfigCloudwatchLogsArgs()
        {
        }
    }

    public sealed class ProjectLogsConfigCloudwatchLogsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The group name of the logs in CloudWatch Logs.
        /// </summary>
        [Input("groupName")]
        public Input<string>? GroupName { get; set; }

        /// <summary>
        /// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The stream name of the logs in CloudWatch Logs.
        /// </summary>
        [Input("streamName")]
        public Input<string>? StreamName { get; set; }

        public ProjectLogsConfigCloudwatchLogsGetArgs()
        {
        }
    }

    public sealed class ProjectLogsConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration for the builds to store logs to CloudWatch
        /// </summary>
        [Input("cloudwatchLogs")]
        public Input<ProjectLogsConfigCloudwatchLogsGetArgs>? CloudwatchLogs { get; set; }

        /// <summary>
        /// Configuration for the builds to store logs to S3.
        /// </summary>
        [Input("s3Logs")]
        public Input<ProjectLogsConfigS3LogsGetArgs>? S3Logs { get; set; }

        public ProjectLogsConfigGetArgs()
        {
        }
    }

    public sealed class ProjectLogsConfigS3LogsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        [Input("encryptionDisabled")]
        public Input<bool>? EncryptionDisabled { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ProjectLogsConfigS3LogsArgs()
        {
        }
    }

    public sealed class ProjectLogsConfigS3LogsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        [Input("encryptionDisabled")]
        public Input<bool>? EncryptionDisabled { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ProjectLogsConfigS3LogsGetArgs()
        {
        }
    }

    public sealed class ProjectSecondaryArtifactsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        /// </summary>
        [Input("artifactIdentifier", required: true)]
        public Input<string> ArtifactIdentifier { get; set; } = null!;

        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        [Input("encryptionDisabled")]
        public Input<bool>? EncryptionDisabled { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        /// </summary>
        [Input("namespaceType")]
        public Input<string>? NamespaceType { get; set; }

        /// <summary>
        /// If set to true, a name specified in the build spec file overrides the artifact name.
        /// </summary>
        [Input("overrideArtifactName")]
        public Input<bool>? OverrideArtifactName { get; set; }

        /// <summary>
        /// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        /// </summary>
        [Input("packaging")]
        public Input<string>? Packaging { get; set; }

        /// <summary>
        /// If `type` is set to `S3`, this is the path to the output artifact
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSecondaryArtifactsArgs()
        {
        }
    }

    public sealed class ProjectSecondaryArtifactsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        /// </summary>
        [Input("artifactIdentifier", required: true)]
        public Input<string> ArtifactIdentifier { get; set; } = null!;

        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        [Input("encryptionDisabled")]
        public Input<bool>? EncryptionDisabled { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        /// </summary>
        [Input("namespaceType")]
        public Input<string>? NamespaceType { get; set; }

        /// <summary>
        /// If set to true, a name specified in the build spec file overrides the artifact name.
        /// </summary>
        [Input("overrideArtifactName")]
        public Input<bool>? OverrideArtifactName { get; set; }

        /// <summary>
        /// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        /// </summary>
        [Input("packaging")]
        public Input<string>? Packaging { get; set; }

        /// <summary>
        /// If `type` is set to `S3`, this is the path to the output artifact
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSecondaryArtifactsGetArgs()
        {
        }
    }

    public sealed class ProjectSecondarySourcesArgs : Pulumi.ResourceArgs
    {
        [Input("auths")]
        private InputList<ProjectSecondarySourcesAuthsArgs>? _auths;

        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public InputList<ProjectSecondarySourcesAuthsArgs> Auths
        {
            get => _auths ?? (_auths = new InputList<ProjectSecondarySourcesAuthsArgs>());
            set => _auths = value;
        }

        /// <summary>
        /// The build spec declaration to use for this build project's related builds.
        /// </summary>
        [Input("buildspec")]
        public Input<string>? Buildspec { get; set; }

        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        [Input("gitCloneDepth")]
        public Input<int>? GitCloneDepth { get; set; }

        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        [Input("gitSubmodulesConfig")]
        public Input<ProjectSecondarySourcesGitSubmodulesConfigArgs>? GitSubmodulesConfig { get; set; }

        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        [Input("insecureSsl")]
        public Input<bool>? InsecureSsl { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        /// </summary>
        [Input("reportBuildStatus")]
        public Input<bool>? ReportBuildStatus { get; set; }

        /// <summary>
        /// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
        /// </summary>
        [Input("sourceIdentifier", required: true)]
        public Input<string> SourceIdentifier { get; set; } = null!;

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSecondarySourcesArgs()
        {
        }
    }

    public sealed class ProjectSecondarySourcesAuthsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource value that applies to the specified authorization type.
        /// </summary>
        [Input("resource")]
        public Input<string>? Resource { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSecondarySourcesAuthsArgs()
        {
        }
    }

    public sealed class ProjectSecondarySourcesAuthsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource value that applies to the specified authorization type.
        /// </summary>
        [Input("resource")]
        public Input<string>? Resource { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSecondarySourcesAuthsGetArgs()
        {
        }
    }

    public sealed class ProjectSecondarySourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("auths")]
        private InputList<ProjectSecondarySourcesAuthsGetArgs>? _auths;

        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public InputList<ProjectSecondarySourcesAuthsGetArgs> Auths
        {
            get => _auths ?? (_auths = new InputList<ProjectSecondarySourcesAuthsGetArgs>());
            set => _auths = value;
        }

        /// <summary>
        /// The build spec declaration to use for this build project's related builds.
        /// </summary>
        [Input("buildspec")]
        public Input<string>? Buildspec { get; set; }

        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        [Input("gitCloneDepth")]
        public Input<int>? GitCloneDepth { get; set; }

        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        [Input("gitSubmodulesConfig")]
        public Input<ProjectSecondarySourcesGitSubmodulesConfigGetArgs>? GitSubmodulesConfig { get; set; }

        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        [Input("insecureSsl")]
        public Input<bool>? InsecureSsl { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        /// </summary>
        [Input("reportBuildStatus")]
        public Input<bool>? ReportBuildStatus { get; set; }

        /// <summary>
        /// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
        /// </summary>
        [Input("sourceIdentifier", required: true)]
        public Input<string> SourceIdentifier { get; set; } = null!;

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSecondarySourcesGetArgs()
        {
        }
    }

    public sealed class ProjectSecondarySourcesGitSubmodulesConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, fetches Git submodules for the AWS CodeBuild build project.
        /// </summary>
        [Input("fetchSubmodules", required: true)]
        public Input<bool> FetchSubmodules { get; set; } = null!;

        public ProjectSecondarySourcesGitSubmodulesConfigArgs()
        {
        }
    }

    public sealed class ProjectSecondarySourcesGitSubmodulesConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, fetches Git submodules for the AWS CodeBuild build project.
        /// </summary>
        [Input("fetchSubmodules", required: true)]
        public Input<bool> FetchSubmodules { get; set; } = null!;

        public ProjectSecondarySourcesGitSubmodulesConfigGetArgs()
        {
        }
    }

    public sealed class ProjectSourceArgs : Pulumi.ResourceArgs
    {
        [Input("auths")]
        private InputList<ProjectSourceAuthsArgs>? _auths;

        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public InputList<ProjectSourceAuthsArgs> Auths
        {
            get => _auths ?? (_auths = new InputList<ProjectSourceAuthsArgs>());
            set => _auths = value;
        }

        /// <summary>
        /// The build spec declaration to use for this build project's related builds.
        /// </summary>
        [Input("buildspec")]
        public Input<string>? Buildspec { get; set; }

        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        [Input("gitCloneDepth")]
        public Input<int>? GitCloneDepth { get; set; }

        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        [Input("gitSubmodulesConfig")]
        public Input<ProjectSourceGitSubmodulesConfigArgs>? GitSubmodulesConfig { get; set; }

        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        [Input("insecureSsl")]
        public Input<bool>? InsecureSsl { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        /// </summary>
        [Input("reportBuildStatus")]
        public Input<bool>? ReportBuildStatus { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSourceArgs()
        {
        }
    }

    public sealed class ProjectSourceAuthsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource value that applies to the specified authorization type.
        /// </summary>
        [Input("resource")]
        public Input<string>? Resource { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSourceAuthsArgs()
        {
        }
    }

    public sealed class ProjectSourceAuthsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The resource value that applies to the specified authorization type.
        /// </summary>
        [Input("resource")]
        public Input<string>? Resource { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSourceAuthsGetArgs()
        {
        }
    }

    public sealed class ProjectSourceGetArgs : Pulumi.ResourceArgs
    {
        [Input("auths")]
        private InputList<ProjectSourceAuthsGetArgs>? _auths;

        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public InputList<ProjectSourceAuthsGetArgs> Auths
        {
            get => _auths ?? (_auths = new InputList<ProjectSourceAuthsGetArgs>());
            set => _auths = value;
        }

        /// <summary>
        /// The build spec declaration to use for this build project's related builds.
        /// </summary>
        [Input("buildspec")]
        public Input<string>? Buildspec { get; set; }

        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        [Input("gitCloneDepth")]
        public Input<int>? GitCloneDepth { get; set; }

        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        [Input("gitSubmodulesConfig")]
        public Input<ProjectSourceGitSubmodulesConfigGetArgs>? GitSubmodulesConfig { get; set; }

        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        [Input("insecureSsl")]
        public Input<bool>? InsecureSsl { get; set; }

        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        /// </summary>
        [Input("reportBuildStatus")]
        public Input<bool>? ReportBuildStatus { get; set; }

        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ProjectSourceGetArgs()
        {
        }
    }

    public sealed class ProjectSourceGitSubmodulesConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, fetches Git submodules for the AWS CodeBuild build project.
        /// </summary>
        [Input("fetchSubmodules", required: true)]
        public Input<bool> FetchSubmodules { get; set; } = null!;

        public ProjectSourceGitSubmodulesConfigArgs()
        {
        }
    }

    public sealed class ProjectSourceGitSubmodulesConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// If set to true, fetches Git submodules for the AWS CodeBuild build project.
        /// </summary>
        [Input("fetchSubmodules", required: true)]
        public Input<bool> FetchSubmodules { get; set; } = null!;

        public ProjectSourceGitSubmodulesConfigGetArgs()
        {
        }
    }

    public sealed class ProjectVpcConfigArgs : Pulumi.ResourceArgs
    {
        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The security group IDs to assign to running builds.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnets", required: true)]
        private InputList<string>? _subnets;

        /// <summary>
        /// The subnet IDs within which to run builds.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// The ID of the VPC within which to run builds.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ProjectVpcConfigArgs()
        {
        }
    }

    public sealed class ProjectVpcConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The security group IDs to assign to running builds.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnets", required: true)]
        private InputList<string>? _subnets;

        /// <summary>
        /// The subnet IDs within which to run builds.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        /// <summary>
        /// The ID of the VPC within which to run builds.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ProjectVpcConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ProjectArtifacts
    {
        /// <summary>
        /// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        /// </summary>
        public readonly string? ArtifactIdentifier;
        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        public readonly bool? EncryptionDisabled;
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        /// </summary>
        public readonly string? NamespaceType;
        /// <summary>
        /// If set to true, a name specified in the build spec file overrides the artifact name.
        /// </summary>
        public readonly bool? OverrideArtifactName;
        /// <summary>
        /// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        /// </summary>
        public readonly string? Packaging;
        /// <summary>
        /// If `type` is set to `S3`, this is the path to the output artifact
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectArtifacts(
            string? artifactIdentifier,
            bool? encryptionDisabled,
            string? location,
            string? name,
            string? namespaceType,
            bool? overrideArtifactName,
            string? packaging,
            string? path,
            string type)
        {
            ArtifactIdentifier = artifactIdentifier;
            EncryptionDisabled = encryptionDisabled;
            Location = location;
            Name = name;
            NamespaceType = namespaceType;
            OverrideArtifactName = overrideArtifactName;
            Packaging = packaging;
            Path = path;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectCache
    {
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Specifies settings that AWS CodeBuild uses to store and reuse build dependencies. Valid values:  `LOCAL_SOURCE_CACHE`, `LOCAL_DOCKER_LAYER_CACHE`, and `LOCAL_CUSTOM_CACHE`
        /// </summary>
        public readonly ImmutableArray<string> Modes;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private ProjectCache(
            string? location,
            ImmutableArray<string> modes,
            string? type)
        {
            Location = location;
            Modes = modes;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectEnvironment
    {
        /// <summary>
        /// The ARN of the S3 bucket, path prefix and object key that contains the PEM-encoded certificate.
        /// </summary>
        public readonly string? Certificate;
        /// <summary>
        /// Information about the compute resources the build project will use. Available values for this parameter are: `BUILD_GENERAL1_SMALL`, `BUILD_GENERAL1_MEDIUM`, `BUILD_GENERAL1_LARGE` or `BUILD_GENERAL1_2XLARGE`. `BUILD_GENERAL1_SMALL` is only valid if `type` is set to `LINUX_CONTAINER`. When `type` is set to `LINUX_GPU_CONTAINER`, `compute_type` need to be `BUILD_GENERAL1_LARGE`.
        /// </summary>
        public readonly string ComputeType;
        /// <summary>
        /// A set of environment variables to make available to builds for this build project.
        /// </summary>
        public readonly ImmutableArray<ProjectEnvironmentEnvironmentVariables> EnvironmentVariables;
        /// <summary>
        /// The Docker image to use for this build project. Valid values include [Docker images provided by CodeBuild](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html) (e.g `aws/codebuild/standard:2.0`), [Docker Hub images](https://hub.docker.com/) (e.g. `nginx:latest`), and full Docker repository URIs such as those for ECR (e.g. `137112412989.dkr.ecr.us-west-2.amazonaws.com/amazonlinux:latest`).
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The type of credentials AWS CodeBuild uses to pull images in your build. Available values for this parameter are `CODEBUILD` or `SERVICE_ROLE`. When you use a cross-account or private registry image, you must use SERVICE_ROLE credentials. When you use an AWS CodeBuild curated image, you must use CODEBUILD credentials. Default to `CODEBUILD`
        /// </summary>
        public readonly string? ImagePullCredentialsType;
        /// <summary>
        /// If set to true, enables running the Docker daemon inside a Docker container. Defaults to `false`.
        /// </summary>
        public readonly bool? PrivilegedMode;
        /// <summary>
        /// Information about credentials for access to a private Docker registry. Registry Credential config blocks are documented below.
        /// </summary>
        public readonly ProjectEnvironmentRegistryCredential? RegistryCredential;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectEnvironment(
            string? certificate,
            string computeType,
            ImmutableArray<ProjectEnvironmentEnvironmentVariables> environmentVariables,
            string image,
            string? imagePullCredentialsType,
            bool? privilegedMode,
            ProjectEnvironmentRegistryCredential? registryCredential,
            string type)
        {
            Certificate = certificate;
            ComputeType = computeType;
            EnvironmentVariables = environmentVariables;
            Image = image;
            ImagePullCredentialsType = imagePullCredentialsType;
            PrivilegedMode = privilegedMode;
            RegistryCredential = registryCredential;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectEnvironmentEnvironmentVariables
    {
        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The environment variable's value.
        /// </summary>
        public readonly string Value;

        [OutputConstructor]
        private ProjectEnvironmentEnvironmentVariables(
            string name,
            string? type,
            string value)
        {
            Name = name;
            Type = type;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ProjectEnvironmentRegistryCredential
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets Manager.
        /// </summary>
        public readonly string Credential;
        /// <summary>
        /// The service that created the credentials to access a private Docker registry. The valid value, SECRETS_MANAGER, is for AWS Secrets Manager.
        /// </summary>
        public readonly string CredentialProvider;

        [OutputConstructor]
        private ProjectEnvironmentRegistryCredential(
            string credential,
            string credentialProvider)
        {
            Credential = credential;
            CredentialProvider = credentialProvider;
        }
    }

    [OutputType]
    public sealed class ProjectLogsConfig
    {
        /// <summary>
        /// Configuration for the builds to store logs to CloudWatch
        /// </summary>
        public readonly ProjectLogsConfigCloudwatchLogs? CloudwatchLogs;
        /// <summary>
        /// Configuration for the builds to store logs to S3.
        /// </summary>
        public readonly ProjectLogsConfigS3Logs? S3Logs;

        [OutputConstructor]
        private ProjectLogsConfig(
            ProjectLogsConfigCloudwatchLogs? cloudwatchLogs,
            ProjectLogsConfigS3Logs? s3Logs)
        {
            CloudwatchLogs = cloudwatchLogs;
            S3Logs = s3Logs;
        }
    }

    [OutputType]
    public sealed class ProjectLogsConfigCloudwatchLogs
    {
        /// <summary>
        /// The group name of the logs in CloudWatch Logs.
        /// </summary>
        public readonly string? GroupName;
        /// <summary>
        /// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The stream name of the logs in CloudWatch Logs.
        /// </summary>
        public readonly string? StreamName;

        [OutputConstructor]
        private ProjectLogsConfigCloudwatchLogs(
            string? groupName,
            string? status,
            string? streamName)
        {
            GroupName = groupName;
            Status = status;
            StreamName = streamName;
        }
    }

    [OutputType]
    public sealed class ProjectLogsConfigS3Logs
    {
        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        public readonly bool? EncryptionDisabled;
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Current status of logs in S3 for a build project. Valid values: `ENABLED`, `DISABLED`. Defaults to `DISABLED`.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private ProjectLogsConfigS3Logs(
            bool? encryptionDisabled,
            string? location,
            string? status)
        {
            EncryptionDisabled = encryptionDisabled;
            Location = location;
            Status = status;
        }
    }

    [OutputType]
    public sealed class ProjectSecondaryArtifacts
    {
        /// <summary>
        /// The artifact identifier. Must be the same specified inside AWS CodeBuild buildspec.
        /// </summary>
        public readonly string ArtifactIdentifier;
        /// <summary>
        /// If set to true, output artifacts will not be encrypted. If `type` is set to `NO_ARTIFACTS` then this value will be ignored. Defaults to `false`.
        /// </summary>
        public readonly bool? EncryptionDisabled;
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// The name of the project. If `type` is set to `S3`, this is the name of the output artifact object
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The namespace to use in storing build artifacts. If `type` is set to `S3`, then valid values for this parameter are: `BUILD_ID` or `NONE`.
        /// </summary>
        public readonly string? NamespaceType;
        /// <summary>
        /// If set to true, a name specified in the build spec file overrides the artifact name.
        /// </summary>
        public readonly bool? OverrideArtifactName;
        /// <summary>
        /// The type of build output artifact to create. If `type` is set to `S3`, valid values for this parameter are: `NONE` or `ZIP`
        /// </summary>
        public readonly string? Packaging;
        /// <summary>
        /// If `type` is set to `S3`, this is the path to the output artifact
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectSecondaryArtifacts(
            string artifactIdentifier,
            bool? encryptionDisabled,
            string? location,
            string? name,
            string? namespaceType,
            bool? overrideArtifactName,
            string? packaging,
            string? path,
            string type)
        {
            ArtifactIdentifier = artifactIdentifier;
            EncryptionDisabled = encryptionDisabled;
            Location = location;
            Name = name;
            NamespaceType = namespaceType;
            OverrideArtifactName = overrideArtifactName;
            Packaging = packaging;
            Path = path;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectSecondarySources
    {
        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public readonly ImmutableArray<ProjectSecondarySourcesAuths> Auths;
        /// <summary>
        /// The build spec declaration to use for this build project's related builds.
        /// </summary>
        public readonly string? Buildspec;
        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        public readonly int? GitCloneDepth;
        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        public readonly ProjectSecondarySourcesGitSubmodulesConfig? GitSubmodulesConfig;
        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        public readonly bool? InsecureSsl;
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        /// </summary>
        public readonly bool? ReportBuildStatus;
        /// <summary>
        /// The source identifier. Source data will be put inside a folder named as this parameter inside AWS CodeBuild source directory
        /// </summary>
        public readonly string SourceIdentifier;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectSecondarySources(
            ImmutableArray<ProjectSecondarySourcesAuths> auths,
            string? buildspec,
            int? gitCloneDepth,
            ProjectSecondarySourcesGitSubmodulesConfig? gitSubmodulesConfig,
            bool? insecureSsl,
            string? location,
            bool? reportBuildStatus,
            string sourceIdentifier,
            string type)
        {
            Auths = auths;
            Buildspec = buildspec;
            GitCloneDepth = gitCloneDepth;
            GitSubmodulesConfig = gitSubmodulesConfig;
            InsecureSsl = insecureSsl;
            Location = location;
            ReportBuildStatus = reportBuildStatus;
            SourceIdentifier = sourceIdentifier;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectSecondarySourcesAuths
    {
        /// <summary>
        /// The resource value that applies to the specified authorization type.
        /// </summary>
        public readonly string? Resource;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectSecondarySourcesAuths(
            string? resource,
            string type)
        {
            Resource = resource;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectSecondarySourcesGitSubmodulesConfig
    {
        /// <summary>
        /// If set to true, fetches Git submodules for the AWS CodeBuild build project.
        /// </summary>
        public readonly bool FetchSubmodules;

        [OutputConstructor]
        private ProjectSecondarySourcesGitSubmodulesConfig(bool fetchSubmodules)
        {
            FetchSubmodules = fetchSubmodules;
        }
    }

    [OutputType]
    public sealed class ProjectSource
    {
        /// <summary>
        /// Information about the authorization settings for AWS CodeBuild to access the source code to be built. Auth blocks are documented below.
        /// </summary>
        public readonly ImmutableArray<ProjectSourceAuths> Auths;
        /// <summary>
        /// The build spec declaration to use for this build project's related builds.
        /// </summary>
        public readonly string? Buildspec;
        /// <summary>
        /// Truncate git history to this many commits.
        /// </summary>
        public readonly int? GitCloneDepth;
        /// <summary>
        /// Information about the Git submodules configuration for an AWS CodeBuild build project. Git submodules config blocks are documented below. This option is only valid when the `type` is `CODECOMMIT`.
        /// </summary>
        public readonly ProjectSourceGitSubmodulesConfig? GitSubmodulesConfig;
        /// <summary>
        /// Ignore SSL warnings when connecting to source control.
        /// </summary>
        public readonly bool? InsecureSsl;
        /// <summary>
        /// The location of the source code from git or s3.
        /// </summary>
        public readonly string? Location;
        /// <summary>
        /// Set to `true` to report the status of a build's start and finish to your source provider. This option is only valid when your source provider is `GITHUB`, `BITBUCKET`, or `GITHUB_ENTERPRISE`.
        /// </summary>
        public readonly bool? ReportBuildStatus;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectSource(
            ImmutableArray<ProjectSourceAuths> auths,
            string? buildspec,
            int? gitCloneDepth,
            ProjectSourceGitSubmodulesConfig? gitSubmodulesConfig,
            bool? insecureSsl,
            string? location,
            bool? reportBuildStatus,
            string type)
        {
            Auths = auths;
            Buildspec = buildspec;
            GitCloneDepth = gitCloneDepth;
            GitSubmodulesConfig = gitSubmodulesConfig;
            InsecureSsl = insecureSsl;
            Location = location;
            ReportBuildStatus = reportBuildStatus;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectSourceAuths
    {
        /// <summary>
        /// The resource value that applies to the specified authorization type.
        /// </summary>
        public readonly string? Resource;
        /// <summary>
        /// The type of repository that contains the source code to be built. Valid values for this parameter are: `CODECOMMIT`, `CODEPIPELINE`, `GITHUB`, `GITHUB_ENTERPRISE`, `BITBUCKET` or `S3`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ProjectSourceAuths(
            string? resource,
            string type)
        {
            Resource = resource;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ProjectSourceGitSubmodulesConfig
    {
        /// <summary>
        /// If set to true, fetches Git submodules for the AWS CodeBuild build project.
        /// </summary>
        public readonly bool FetchSubmodules;

        [OutputConstructor]
        private ProjectSourceGitSubmodulesConfig(bool fetchSubmodules)
        {
            FetchSubmodules = fetchSubmodules;
        }
    }

    [OutputType]
    public sealed class ProjectVpcConfig
    {
        /// <summary>
        /// The security group IDs to assign to running builds.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The subnet IDs within which to run builds.
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// The ID of the VPC within which to run builds.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private ProjectVpcConfig(
            ImmutableArray<string> securityGroupIds,
            ImmutableArray<string> subnets,
            string vpcId)
        {
            SecurityGroupIds = securityGroupIds;
            Subnets = subnets;
            VpcId = vpcId;
        }
    }
    }
}
