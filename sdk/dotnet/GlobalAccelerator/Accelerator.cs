// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.GlobalAccelerator
{
    [AwsResourceType("aws:globalaccelerator/accelerator:Accelerator")]
    public partial class Accelerator : global::Pulumi.CustomResource
    {
        [Output("attributes")]
        public Output<Outputs.AcceleratorAttributes?> Attributes { get; private set; } = null!;

        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        [Output("hostedZoneId")]
        public Output<string> HostedZoneId { get; private set; } = null!;

        [Output("ipAddressType")]
        public Output<string?> IpAddressType { get; private set; } = null!;

        [Output("ipAddresses")]
        public Output<ImmutableArray<string>> IpAddresses { get; private set; } = null!;

        [Output("ipSets")]
        public Output<ImmutableArray<Outputs.AcceleratorIpSet>> IpSets { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Accelerator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Accelerator(string name, AcceleratorArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:globalaccelerator/accelerator:Accelerator", name, args ?? new AcceleratorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Accelerator(string name, Input<string> id, AcceleratorState? state = null, CustomResourceOptions? options = null)
            : base("aws:globalaccelerator/accelerator:Accelerator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Accelerator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Accelerator Get(string name, Input<string> id, AcceleratorState? state = null, CustomResourceOptions? options = null)
        {
            return new Accelerator(name, id, state, options);
        }
    }

    public sealed class AcceleratorArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        public Input<Inputs.AcceleratorAttributesArgs>? Attributes { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AcceleratorArgs()
        {
        }
        public static new AcceleratorArgs Empty => new AcceleratorArgs();
    }

    public sealed class AcceleratorState : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        public Input<Inputs.AcceleratorAttributesGetArgs>? Attributes { get; set; }

        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("hostedZoneId")]
        public Input<string>? HostedZoneId { get; set; }

        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        [Input("ipAddresses")]
        private InputList<string>? _ipAddresses;
        public InputList<string> IpAddresses
        {
            get => _ipAddresses ?? (_ipAddresses = new InputList<string>());
            set => _ipAddresses = value;
        }

        [Input("ipSets")]
        private InputList<Inputs.AcceleratorIpSetGetArgs>? _ipSets;
        public InputList<Inputs.AcceleratorIpSetGetArgs> IpSets
        {
            get => _ipSets ?? (_ipSets = new InputList<Inputs.AcceleratorIpSetGetArgs>());
            set => _ipSets = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public AcceleratorState()
        {
        }
        public static new AcceleratorState Empty => new AcceleratorState();
    }
}
