// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.GlobalAccelerator
{
    public static class GetAccelerator
    {
        /// <summary>
        /// Provides information about a Global Accelerator accelerator.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var acceleratorArn = config.Get("acceleratorArn") ?? "";
        ///     var acceleratorName = config.Get("acceleratorName") ?? "";
        ///     var example = Aws.GlobalAccelerator.GetAccelerator.Invoke(new()
        ///     {
        ///         Arn = acceleratorArn,
        ///         Name = acceleratorName,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAcceleratorResult> InvokeAsync(GetAcceleratorArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAcceleratorResult>("aws:globalaccelerator/getAccelerator:getAccelerator", args ?? new GetAcceleratorArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Global Accelerator accelerator.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var acceleratorArn = config.Get("acceleratorArn") ?? "";
        ///     var acceleratorName = config.Get("acceleratorName") ?? "";
        ///     var example = Aws.GlobalAccelerator.GetAccelerator.Invoke(new()
        ///     {
        ///         Arn = acceleratorArn,
        ///         Name = acceleratorName,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAcceleratorResult> Invoke(GetAcceleratorInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAcceleratorResult>("aws:globalaccelerator/getAccelerator:getAccelerator", args ?? new GetAcceleratorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAcceleratorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Full ARN of the Global Accelerator.
        /// </summary>
        [Input("arn")]
        public string? Arn { get; set; }

        /// <summary>
        /// Unique name of the Global Accelerator.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetAcceleratorArgs()
        {
        }
        public static new GetAcceleratorArgs Empty => new GetAcceleratorArgs();
    }

    public sealed class GetAcceleratorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Full ARN of the Global Accelerator.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Unique name of the Global Accelerator.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetAcceleratorInvokeArgs()
        {
        }
        public static new GetAcceleratorInvokeArgs Empty => new GetAcceleratorInvokeArgs();
    }


    [OutputType]
    public sealed class GetAcceleratorResult
    {
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetAcceleratorAttributeResult> Attributes;
        public readonly string DnsName;
        public readonly bool Enabled;
        public readonly string HostedZoneId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpAddressType;
        public readonly ImmutableArray<Outputs.GetAcceleratorIpSetResult> IpSets;
        public readonly string Name;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetAcceleratorResult(
            string arn,

            ImmutableArray<Outputs.GetAcceleratorAttributeResult> attributes,

            string dnsName,

            bool enabled,

            string hostedZoneId,

            string id,

            string ipAddressType,

            ImmutableArray<Outputs.GetAcceleratorIpSetResult> ipSets,

            string name,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            Attributes = attributes;
            DnsName = dnsName;
            Enabled = enabled;
            HostedZoneId = hostedZoneId;
            Id = id;
            IpAddressType = ipAddressType;
            IpSets = ipSets;
            Name = name;
            Tags = tags;
        }
    }
}
