// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Dlm.Inputs
{

    public sealed class LifecyclePolicyPolicyDetailsScheduleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to copy all user-defined tags from the source snapshot to the cross-region snapshot copy.
        /// </summary>
        [Input("copyTags")]
        public Input<bool>? CopyTags { get; set; }

        /// <summary>
        /// See the `create_rule` block. Max of 1 per schedule.
        /// </summary>
        [Input("createRule", required: true)]
        public Input<Inputs.LifecyclePolicyPolicyDetailsScheduleCreateRuleArgs> CreateRule { get; set; } = null!;

        [Input("crossRegionCopyRules")]
        private InputList<Inputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs>? _crossRegionCopyRules;

        /// <summary>
        /// See the `cross_region_copy_rule` block. Max of 3 per schedule.
        /// </summary>
        public InputList<Inputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs> CrossRegionCopyRules
        {
            get => _crossRegionCopyRules ?? (_crossRegionCopyRules = new InputList<Inputs.LifecyclePolicyPolicyDetailsScheduleCrossRegionCopyRuleArgs>());
            set => _crossRegionCopyRules = value;
        }

        /// <summary>
        /// The AMI deprecation rule for cross-Region AMI copies created by the rule. See the `deprecate_rule` block.
        /// </summary>
        [Input("deprecateRule")]
        public Input<Inputs.LifecyclePolicyPolicyDetailsScheduleDeprecateRuleArgs>? DeprecateRule { get; set; }

        /// <summary>
        /// See the `fast_restore_rule` block. Max of 1 per schedule.
        /// </summary>
        [Input("fastRestoreRule")]
        public Input<Inputs.LifecyclePolicyPolicyDetailsScheduleFastRestoreRuleArgs>? FastRestoreRule { get; set; }

        /// <summary>
        /// A name for the schedule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The retention rule that indicates how long snapshot copies are to be retained in the destination Region. See the `retain_rule` block. Max of 1 per schedule.
        /// </summary>
        [Input("retainRule", required: true)]
        public Input<Inputs.LifecyclePolicyPolicyDetailsScheduleRetainRuleArgs> RetainRule { get; set; } = null!;

        /// <summary>
        /// See the `share_rule` block. Max of 1 per schedule.
        /// </summary>
        [Input("shareRule")]
        public Input<Inputs.LifecyclePolicyPolicyDetailsScheduleShareRuleArgs>? ShareRule { get; set; }

        [Input("tagsToAdd")]
        private InputMap<string>? _tagsToAdd;

        /// <summary>
        /// A map of tag keys and their values. DLM lifecycle policies will already tag the snapshot with the tags on the volume. This configuration adds extra tags on top of these.
        /// </summary>
        public InputMap<string> TagsToAdd
        {
            get => _tagsToAdd ?? (_tagsToAdd = new InputMap<string>());
            set => _tagsToAdd = value;
        }

        [Input("variableTags")]
        private InputMap<string>? _variableTags;

        /// <summary>
        /// A map of tag keys and variable values, where the values are determined when the policy is executed. Only `$(instance-id)` or `$(timestamp)` are valid values. Can only be used when `resource_types` is `INSTANCE`.
        /// </summary>
        public InputMap<string> VariableTags
        {
            get => _variableTags ?? (_variableTags = new InputMap<string>());
            set => _variableTags = value;
        }

        public LifecyclePolicyPolicyDetailsScheduleArgs()
        {
        }
    }
}
