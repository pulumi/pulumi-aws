// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cfg.Outputs
{

    [OutputType]
    public sealed class RuleSourceSourceDetail
    {
        /// <summary>
        /// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to `aws.config` and is the only valid value.
        /// </summary>
        public readonly string? EventSource;
        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that istriggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        public readonly string? MaximumExecutionFrequency;
        /// <summary>
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
        /// * `ConfigurationItemChangeNotification` - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.
        /// * `OversizedConfigurationItemChangeNotification` - Triggers an evaluation when AWS Config delivers an oversized configuration item. AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.
        /// * `ScheduledNotification` - Triggers a periodic evaluation at the frequency specified for `maximum_execution_frequency`.
        /// * `ConfigurationSnapshotDeliveryCompleted` - Triggers a periodic evaluation when AWS Config delivers a configuration snapshot.
        /// </summary>
        public readonly string? MessageType;

        [OutputConstructor]
        private RuleSourceSourceDetail(
            string? eventSource,

            string? maximumExecutionFrequency,

            string? messageType)
        {
            EventSource = eventSource;
            MaximumExecutionFrequency = maximumExecutionFrequency;
            MessageType = messageType;
        }
    }
}
