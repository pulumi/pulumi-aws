// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Cfg
{
    /// <summary>
    /// Provides an AWS Config Rule.
    /// 
    /// &gt; **Note:** Config Rule requires an existing [Configuration Recorder](https://www.terraform.io/docs/providers/aws/r/config_configuration_recorder.html) to be present. Use of `depends_on` is recommended (as shown below) to avoid race conditions.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/config_config_rule.html.markdown.
    /// </summary>
    public partial class Rule : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the config rule
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A string in JSON format that is passed to the AWS Config rule Lambda function.
        /// </summary>
        [Output("inputParameters")]
        public Output<string?> InputParameters { get; private set; } = null!;

        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that
        /// is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        [Output("maximumExecutionFrequency")]
        public Output<string?> MaximumExecutionFrequency { get; private set; } = null!;

        /// <summary>
        /// The name of the rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ID of the config rule
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// Scope defines which resources can trigger an evaluation for the rule as documented below.
        /// </summary>
        [Output("scope")]
        public Output<Outputs.RuleScope?> Scope { get; private set; } = null!;

        /// <summary>
        /// Source specifies the rule owner, the rule identifier, and the notifications that cause
        /// the function to evaluate your AWS resources as documented below.
        /// </summary>
        [Output("source")]
        public Output<Outputs.RuleSource> Source { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Rule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rule(string name, RuleArgs args, CustomResourceOptions? options = null)
            : base("aws:cfg/rule:Rule", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Rule(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
            : base("aws:cfg/rule:Rule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rule Get(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
        {
            return new Rule(name, id, state, options);
        }
    }

    public sealed class RuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A string in JSON format that is passed to the AWS Config rule Lambda function.
        /// </summary>
        [Input("inputParameters")]
        public Input<string>? InputParameters { get; set; }

        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that
        /// is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        [Input("maximumExecutionFrequency")]
        public Input<string>? MaximumExecutionFrequency { get; set; }

        /// <summary>
        /// The name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Scope defines which resources can trigger an evaluation for the rule as documented below.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.RuleScopeArgs>? Scope { get; set; }

        /// <summary>
        /// Source specifies the rule owner, the rule identifier, and the notifications that cause
        /// the function to evaluate your AWS resources as documented below.
        /// </summary>
        [Input("source", required: true)]
        public Input<Inputs.RuleSourceArgs> Source { get; set; } = null!;

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public RuleArgs()
        {
        }
    }

    public sealed class RuleState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the config rule
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A string in JSON format that is passed to the AWS Config rule Lambda function.
        /// </summary>
        [Input("inputParameters")]
        public Input<string>? InputParameters { get; set; }

        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that
        /// is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        [Input("maximumExecutionFrequency")]
        public Input<string>? MaximumExecutionFrequency { get; set; }

        /// <summary>
        /// The name of the rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the config rule
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// Scope defines which resources can trigger an evaluation for the rule as documented below.
        /// </summary>
        [Input("scope")]
        public Input<Inputs.RuleScopeGetArgs>? Scope { get; set; }

        /// <summary>
        /// Source specifies the rule owner, the rule identifier, and the notifications that cause
        /// the function to evaluate your AWS resources as documented below.
        /// </summary>
        [Input("source")]
        public Input<Inputs.RuleSourceGetArgs>? Source { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public RuleState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class RuleScopeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule.
        /// If you specify a resource ID, you must specify one resource type for `compliance_resource_types`.
        /// </summary>
        [Input("complianceResourceId")]
        public Input<string>? ComplianceResourceId { get; set; }

        [Input("complianceResourceTypes")]
        private InputList<string>? _complianceResourceTypes;

        /// <summary>
        /// A list of resource types of only those AWS resources that you want to trigger an
        /// evaluation for the rule. e.g. `AWS::EC2::Instance`. You can only specify one type if you also specify
        /// a resource ID for `compliance_resource_id`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
        /// </summary>
        public InputList<string> ComplianceResourceTypes
        {
            get => _complianceResourceTypes ?? (_complianceResourceTypes = new InputList<string>());
            set => _complianceResourceTypes = value;
        }

        /// <summary>
        /// The tag key that is applied to only those AWS resources that you want you
        /// want to trigger an evaluation for the rule.
        /// </summary>
        [Input("tagKey")]
        public Input<string>? TagKey { get; set; }

        /// <summary>
        /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
        /// </summary>
        [Input("tagValue")]
        public Input<string>? TagValue { get; set; }

        public RuleScopeArgs()
        {
        }
    }

    public sealed class RuleScopeGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule.
        /// If you specify a resource ID, you must specify one resource type for `compliance_resource_types`.
        /// </summary>
        [Input("complianceResourceId")]
        public Input<string>? ComplianceResourceId { get; set; }

        [Input("complianceResourceTypes")]
        private InputList<string>? _complianceResourceTypes;

        /// <summary>
        /// A list of resource types of only those AWS resources that you want to trigger an
        /// evaluation for the rule. e.g. `AWS::EC2::Instance`. You can only specify one type if you also specify
        /// a resource ID for `compliance_resource_id`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
        /// </summary>
        public InputList<string> ComplianceResourceTypes
        {
            get => _complianceResourceTypes ?? (_complianceResourceTypes = new InputList<string>());
            set => _complianceResourceTypes = value;
        }

        /// <summary>
        /// The tag key that is applied to only those AWS resources that you want you
        /// want to trigger an evaluation for the rule.
        /// </summary>
        [Input("tagKey")]
        public Input<string>? TagKey { get; set; }

        /// <summary>
        /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
        /// </summary>
        [Input("tagValue")]
        public Input<string>? TagValue { get; set; }

        public RuleScopeGetArgs()
        {
        }
    }

    public sealed class RuleSourceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS` or `CUSTOM_LAMBDA`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g. via the [`aws.lambda.Permission` resource](https://www.terraform.io/docs/providers/aws/r/lambda_permission.html).
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        [Input("sourceDetails")]
        private InputList<RuleSourceSourceDetailsArgs>? _sourceDetails;

        /// <summary>
        /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA`.
        /// </summary>
        public InputList<RuleSourceSourceDetailsArgs> SourceDetails
        {
            get => _sourceDetails ?? (_sourceDetails = new InputList<RuleSourceSourceDetailsArgs>());
            set => _sourceDetails = value;
        }

        /// <summary>
        /// For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the [`arn` attribute of the `aws.lambda.Function` resource](https://www.terraform.io/docs/providers/aws/r/lambda_function.html#arn).
        /// </summary>
        [Input("sourceIdentifier", required: true)]
        public Input<string> SourceIdentifier { get; set; } = null!;

        public RuleSourceArgs()
        {
        }
    }

    public sealed class RuleSourceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS` or `CUSTOM_LAMBDA`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g. via the [`aws.lambda.Permission` resource](https://www.terraform.io/docs/providers/aws/r/lambda_permission.html).
        /// </summary>
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        [Input("sourceDetails")]
        private InputList<RuleSourceSourceDetailsGetArgs>? _sourceDetails;

        /// <summary>
        /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA`.
        /// </summary>
        public InputList<RuleSourceSourceDetailsGetArgs> SourceDetails
        {
            get => _sourceDetails ?? (_sourceDetails = new InputList<RuleSourceSourceDetailsGetArgs>());
            set => _sourceDetails = value;
        }

        /// <summary>
        /// For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the [`arn` attribute of the `aws.lambda.Function` resource](https://www.terraform.io/docs/providers/aws/r/lambda_function.html#arn).
        /// </summary>
        [Input("sourceIdentifier", required: true)]
        public Input<string> SourceIdentifier { get; set; } = null!;

        public RuleSourceGetArgs()
        {
        }
    }

    public sealed class RuleSourceSourceDetailsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The source of the event, such as an AWS service, that triggers AWS Config
        /// to evaluate your AWS resources. This defaults to `aws.config` and is the only valid value.
        /// </summary>
        [Input("eventSource")]
        public Input<string>? EventSource { get; set; }

        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that
        /// is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        [Input("maximumExecutionFrequency")]
        public Input<string>? MaximumExecutionFrequency { get; set; }

        /// <summary>
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        public RuleSourceSourceDetailsArgs()
        {
        }
    }

    public sealed class RuleSourceSourceDetailsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The source of the event, such as an AWS service, that triggers AWS Config
        /// to evaluate your AWS resources. This defaults to `aws.config` and is the only valid value.
        /// </summary>
        [Input("eventSource")]
        public Input<string>? EventSource { get; set; }

        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that
        /// is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        [Input("maximumExecutionFrequency")]
        public Input<string>? MaximumExecutionFrequency { get; set; }

        /// <summary>
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        public RuleSourceSourceDetailsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class RuleScope
    {
        /// <summary>
        /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule.
        /// If you specify a resource ID, you must specify one resource type for `compliance_resource_types`.
        /// </summary>
        public readonly string? ComplianceResourceId;
        /// <summary>
        /// A list of resource types of only those AWS resources that you want to trigger an
        /// evaluation for the rule. e.g. `AWS::EC2::Instance`. You can only specify one type if you also specify
        /// a resource ID for `compliance_resource_id`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
        /// </summary>
        public readonly ImmutableArray<string> ComplianceResourceTypes;
        /// <summary>
        /// The tag key that is applied to only those AWS resources that you want you
        /// want to trigger an evaluation for the rule.
        /// </summary>
        public readonly string? TagKey;
        /// <summary>
        /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
        /// </summary>
        public readonly string? TagValue;

        [OutputConstructor]
        private RuleScope(
            string? complianceResourceId,
            ImmutableArray<string> complianceResourceTypes,
            string? tagKey,
            string? tagValue)
        {
            ComplianceResourceId = complianceResourceId;
            ComplianceResourceTypes = complianceResourceTypes;
            TagKey = tagKey;
            TagValue = tagValue;
        }
    }

    [OutputType]
    public sealed class RuleSource
    {
        /// <summary>
        /// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS` or `CUSTOM_LAMBDA`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g. via the [`aws.lambda.Permission` resource](https://www.terraform.io/docs/providers/aws/r/lambda_permission.html).
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA`.
        /// </summary>
        public readonly ImmutableArray<RuleSourceSourceDetails> SourceDetails;
        /// <summary>
        /// For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the [`arn` attribute of the `aws.lambda.Function` resource](https://www.terraform.io/docs/providers/aws/r/lambda_function.html#arn).
        /// </summary>
        public readonly string SourceIdentifier;

        [OutputConstructor]
        private RuleSource(
            string owner,
            ImmutableArray<RuleSourceSourceDetails> sourceDetails,
            string sourceIdentifier)
        {
            Owner = owner;
            SourceDetails = sourceDetails;
            SourceIdentifier = sourceIdentifier;
        }
    }

    [OutputType]
    public sealed class RuleSourceSourceDetails
    {
        /// <summary>
        /// The source of the event, such as an AWS service, that triggers AWS Config
        /// to evaluate your AWS resources. This defaults to `aws.config` and is the only valid value.
        /// </summary>
        public readonly string? EventSource;
        /// <summary>
        /// The frequency that you want AWS Config to run evaluations for a rule that
        /// is triggered periodically. If specified, requires `message_type` to be `ScheduledNotification`.
        /// </summary>
        public readonly string? MaximumExecutionFrequency;
        /// <summary>
        /// The type of notification that triggers AWS Config to run an evaluation for a rule. You can specify the following notification types:
        /// </summary>
        public readonly string? MessageType;

        [OutputConstructor]
        private RuleSourceSourceDetails(
            string? eventSource,
            string? maximumExecutionFrequency,
            string? messageType)
        {
            EventSource = eventSource;
            MaximumExecutionFrequency = maximumExecutionFrequency;
            MessageType = messageType;
        }
    }
    }
}
