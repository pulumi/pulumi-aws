// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Kinesis.Outputs
{

    [OutputType]
    public sealed class FirehoseDeliveryStreamSplunkConfiguration
    {
        /// <summary>
        /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
        /// </summary>
        public readonly int? BufferingInterval;
        /// <summary>
        /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
        /// </summary>
        public readonly int? BufferingSize;
        /// <summary>
        /// The CloudWatch Logging Options for the delivery stream. See `cloudwatch_logging_options` block below for details.
        /// </summary>
        public readonly Outputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions? CloudwatchLoggingOptions;
        /// <summary>
        /// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
        /// </summary>
        public readonly int? HecAcknowledgmentTimeout;
        /// <summary>
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
        /// </summary>
        public readonly string HecEndpoint;
        /// <summary>
        /// The HEC endpoint type. Valid values are `Raw` or `Event`. The default value is `Raw`.
        /// </summary>
        public readonly string? HecEndpointType;
        /// <summary>
        /// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        /// </summary>
        public readonly string HecToken;
        /// <summary>
        /// The data processing configuration.  See `processing_configuration` block below for details.
        /// </summary>
        public readonly Outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration? ProcessingConfiguration;
        /// <summary>
        /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
        /// </summary>
        public readonly int? RetryDuration;
        /// <summary>
        /// Defines how documents should be delivered to Amazon S3.  Valid values are `FailedEventsOnly` and `AllEvents`.  Default value is `FailedEventsOnly`.
        /// </summary>
        public readonly string? S3BackupMode;
        /// <summary>
        /// The S3 Configuration. See `s3_configuration` block below for details.
        /// </summary>
        public readonly Outputs.FirehoseDeliveryStreamSplunkConfigurationS3Configuration S3Configuration;

        [OutputConstructor]
        private FirehoseDeliveryStreamSplunkConfiguration(
            int? bufferingInterval,

            int? bufferingSize,

            Outputs.FirehoseDeliveryStreamSplunkConfigurationCloudwatchLoggingOptions? cloudwatchLoggingOptions,

            int? hecAcknowledgmentTimeout,

            string hecEndpoint,

            string? hecEndpointType,

            string hecToken,

            Outputs.FirehoseDeliveryStreamSplunkConfigurationProcessingConfiguration? processingConfiguration,

            int? retryDuration,

            string? s3BackupMode,

            Outputs.FirehoseDeliveryStreamSplunkConfigurationS3Configuration s3Configuration)
        {
            BufferingInterval = bufferingInterval;
            BufferingSize = bufferingSize;
            CloudwatchLoggingOptions = cloudwatchLoggingOptions;
            HecAcknowledgmentTimeout = hecAcknowledgmentTimeout;
            HecEndpoint = hecEndpoint;
            HecEndpointType = hecEndpointType;
            HecToken = hecToken;
            ProcessingConfiguration = processingConfiguration;
            RetryDuration = retryDuration;
            S3BackupMode = s3BackupMode;
            S3Configuration = s3Configuration;
        }
    }
}
