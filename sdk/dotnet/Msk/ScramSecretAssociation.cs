// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Msk
{
    /// <summary>
    /// Associates SCRAM secrets stored in the Secrets Manager service with a Managed Streaming for Kafka (MSK) cluster.
    /// 
    /// &gt; **Note:** The following assumes the MSK cluster has SASL/SCRAM authentication enabled. See below for example usage or refer to the [Username/Password Authentication](https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html) section of the MSK Developer Guide for more details.
    /// 
    /// To set up username and password authentication for a cluster, create an `aws.secretsmanager.Secret` resource and associate
    /// a username and password with the secret with an `aws.secretsmanager.SecretVersion` resource. When creating a secret for the cluster,
    /// the `name` must have the prefix `AmazonMSK_` and you must either use an existing custom AWS KMS key or create a new
    /// custom AWS KMS key for your secret with the `aws.kms.Key` resource. It is important to note that a policy is required for the `aws.secretsmanager.Secret`
    /// resource in order for Kafka to be able to read it. This policy is attached automatically when the `aws.msk.ScramSecretAssociation` is used,
    /// however, this policy will not be in the state and as such, will present a diff on plan/apply. For that reason, you must use the `aws.secretsmanager.SecretPolicy`
    /// resource](/docs/providers/aws/r/secretsmanager_secret_policy.html) as shown below in order to ensure that the state is in a clean state after the creation of secret and the association to the cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleCluster = new Aws.Msk.Cluster("exampleCluster", new()
    ///     {
    ///         ClientAuthentication = new Aws.Msk.Inputs.ClusterClientAuthenticationArgs
    ///         {
    ///             Sasl = new Aws.Msk.Inputs.ClusterClientAuthenticationSaslArgs
    ///             {
    ///                 Scram = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Aws.Kms.Key("exampleKey", new()
    ///     {
    ///         Description = "Example Key for MSK Cluster Scram Secret Association",
    ///     });
    /// 
    ///     var exampleSecret = new Aws.SecretsManager.Secret("exampleSecret", new()
    ///     {
    ///         KmsKeyId = exampleKey.KeyId,
    ///     });
    /// 
    ///     var exampleSecretVersion = new Aws.SecretsManager.SecretVersion("exampleSecretVersion", new()
    ///     {
    ///         SecretId = exampleSecret.Id,
    ///         SecretString = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["username"] = "user",
    ///             ["password"] = "pass",
    ///         }),
    ///     });
    /// 
    ///     var exampleScramSecretAssociation = new Aws.Msk.ScramSecretAssociation("exampleScramSecretAssociation", new()
    ///     {
    ///         ClusterArn = exampleCluster.Arn,
    ///         SecretArnLists = new[]
    ///         {
    ///             exampleSecret.Arn,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             exampleSecretVersion,
    ///         },
    ///     });
    /// 
    ///     var examplePolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Sid = "AWSKafkaResourcePolicy",
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "kafka.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "secretsmanager:getSecretValue",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     exampleSecret.Arn,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleSecretPolicy = new Aws.SecretsManager.SecretPolicy("exampleSecretPolicy", new()
    ///     {
    ///         SecretArn = exampleSecret.Arn,
    ///         Policy = examplePolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// MSK SCRAM Secret Associations can be imported using the `id` e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:msk/scramSecretAssociation:ScramSecretAssociation example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
    /// ```
    /// </summary>
    [AwsResourceType("aws:msk/scramSecretAssociation:ScramSecretAssociation")]
    public partial class ScramSecretAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the MSK cluster.
        /// </summary>
        [Output("clusterArn")]
        public Output<string> ClusterArn { get; private set; } = null!;

        /// <summary>
        /// List of AWS Secrets Manager secret ARNs.
        /// </summary>
        [Output("secretArnLists")]
        public Output<ImmutableArray<string>> SecretArnLists { get; private set; } = null!;


        /// <summary>
        /// Create a ScramSecretAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScramSecretAssociation(string name, ScramSecretAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:msk/scramSecretAssociation:ScramSecretAssociation", name, args ?? new ScramSecretAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScramSecretAssociation(string name, Input<string> id, ScramSecretAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:msk/scramSecretAssociation:ScramSecretAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScramSecretAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScramSecretAssociation Get(string name, Input<string> id, ScramSecretAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new ScramSecretAssociation(name, id, state, options);
        }
    }

    public sealed class ScramSecretAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the MSK cluster.
        /// </summary>
        [Input("clusterArn", required: true)]
        public Input<string> ClusterArn { get; set; } = null!;

        [Input("secretArnLists", required: true)]
        private InputList<string>? _secretArnLists;

        /// <summary>
        /// List of AWS Secrets Manager secret ARNs.
        /// </summary>
        public InputList<string> SecretArnLists
        {
            get => _secretArnLists ?? (_secretArnLists = new InputList<string>());
            set => _secretArnLists = value;
        }

        public ScramSecretAssociationArgs()
        {
        }
        public static new ScramSecretAssociationArgs Empty => new ScramSecretAssociationArgs();
    }

    public sealed class ScramSecretAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the MSK cluster.
        /// </summary>
        [Input("clusterArn")]
        public Input<string>? ClusterArn { get; set; }

        [Input("secretArnLists")]
        private InputList<string>? _secretArnLists;

        /// <summary>
        /// List of AWS Secrets Manager secret ARNs.
        /// </summary>
        public InputList<string> SecretArnLists
        {
            get => _secretArnLists ?? (_secretArnLists = new InputList<string>());
            set => _secretArnLists = value;
        }

        public ScramSecretAssociationState()
        {
        }
        public static new ScramSecretAssociationState Empty => new ScramSecretAssociationState();
    }
}
