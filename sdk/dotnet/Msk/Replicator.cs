// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Msk
{
    /// <summary>
    /// Resource for managing an AWS Managed Streaming for Kafka Replicator.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import MSK replicators using the replicator ARN. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:msk/replicator:Replicator example arn:aws:kafka:us-west-2:123456789012:configuration/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
    /// ```
    /// </summary>
    [AwsResourceType("aws:msk/replicator:Replicator")]
    public partial class Replicator : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Replicator. Do not begin the description with "An", "The", "Defines", "Indicates", or "Specifies," as these are verbose. In other words, "Indicates the amount of storage," can be rewritten as "Amount of storage," without losing any information.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("currentVersion")]
        public Output<string> CurrentVersion { get; private set; } = null!;

        /// <summary>
        /// A summary description of the replicator.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of Kafka clusters which are targets of the replicator.
        /// </summary>
        [Output("kafkaClusters")]
        public Output<ImmutableArray<Outputs.ReplicatorKafkaCluster>> KafkaClusters { get; private set; } = null!;

        /// <summary>
        /// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
        /// </summary>
        [Output("replicationInfoList")]
        public Output<Outputs.ReplicatorReplicationInfoList> ReplicationInfoList { get; private set; } = null!;

        /// <summary>
        /// The name of the replicator.
        /// </summary>
        [Output("replicatorName")]
        public Output<string> ReplicatorName { get; private set; } = null!;

        /// <summary>
        /// The ARN of the IAM role used by the replicator to access resources in the customer's account (e.g source and target clusters).
        /// </summary>
        [Output("serviceExecutionRoleArn")]
        public Output<string> ServiceExecutionRoleArn { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Replicator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Replicator(string name, ReplicatorArgs args, CustomResourceOptions? options = null)
            : base("aws:msk/replicator:Replicator", name, args ?? new ReplicatorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Replicator(string name, Input<string> id, ReplicatorState? state = null, CustomResourceOptions? options = null)
            : base("aws:msk/replicator:Replicator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Replicator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Replicator Get(string name, Input<string> id, ReplicatorState? state = null, CustomResourceOptions? options = null)
        {
            return new Replicator(name, id, state, options);
        }
    }

    public sealed class ReplicatorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A summary description of the replicator.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("kafkaClusters", required: true)]
        private InputList<Inputs.ReplicatorKafkaClusterArgs>? _kafkaClusters;

        /// <summary>
        /// A list of Kafka clusters which are targets of the replicator.
        /// </summary>
        public InputList<Inputs.ReplicatorKafkaClusterArgs> KafkaClusters
        {
            get => _kafkaClusters ?? (_kafkaClusters = new InputList<Inputs.ReplicatorKafkaClusterArgs>());
            set => _kafkaClusters = value;
        }

        /// <summary>
        /// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
        /// </summary>
        [Input("replicationInfoList", required: true)]
        public Input<Inputs.ReplicatorReplicationInfoListArgs> ReplicationInfoList { get; set; } = null!;

        /// <summary>
        /// The name of the replicator.
        /// </summary>
        [Input("replicatorName", required: true)]
        public Input<string> ReplicatorName { get; set; } = null!;

        /// <summary>
        /// The ARN of the IAM role used by the replicator to access resources in the customer's account (e.g source and target clusters).
        /// </summary>
        [Input("serviceExecutionRoleArn", required: true)]
        public Input<string> ServiceExecutionRoleArn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ReplicatorArgs()
        {
        }
        public static new ReplicatorArgs Empty => new ReplicatorArgs();
    }

    public sealed class ReplicatorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Replicator. Do not begin the description with "An", "The", "Defines", "Indicates", or "Specifies," as these are verbose. In other words, "Indicates the amount of storage," can be rewritten as "Amount of storage," without losing any information.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("currentVersion")]
        public Input<string>? CurrentVersion { get; set; }

        /// <summary>
        /// A summary description of the replicator.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("kafkaClusters")]
        private InputList<Inputs.ReplicatorKafkaClusterGetArgs>? _kafkaClusters;

        /// <summary>
        /// A list of Kafka clusters which are targets of the replicator.
        /// </summary>
        public InputList<Inputs.ReplicatorKafkaClusterGetArgs> KafkaClusters
        {
            get => _kafkaClusters ?? (_kafkaClusters = new InputList<Inputs.ReplicatorKafkaClusterGetArgs>());
            set => _kafkaClusters = value;
        }

        /// <summary>
        /// A list of replication configurations, where each configuration targets a given source cluster to target cluster replication flow.
        /// </summary>
        [Input("replicationInfoList")]
        public Input<Inputs.ReplicatorReplicationInfoListGetArgs>? ReplicationInfoList { get; set; }

        /// <summary>
        /// The name of the replicator.
        /// </summary>
        [Input("replicatorName")]
        public Input<string>? ReplicatorName { get; set; }

        /// <summary>
        /// The ARN of the IAM role used by the replicator to access resources in the customer's account (e.g source and target clusters).
        /// </summary>
        [Input("serviceExecutionRoleArn")]
        public Input<string>? ServiceExecutionRoleArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public ReplicatorState()
        {
        }
        public static new ReplicatorState Empty => new ReplicatorState();
    }
}
