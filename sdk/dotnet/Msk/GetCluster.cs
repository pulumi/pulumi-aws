// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Msk
{
    public static class GetCluster
    {
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("aws:msk/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("aws:msk/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly string Arn;
        public readonly string BootstrapBrokers;
        public readonly string BootstrapBrokersPublicSaslIam;
        public readonly string BootstrapBrokersPublicSaslScram;
        public readonly string BootstrapBrokersPublicTls;
        public readonly string BootstrapBrokersSaslIam;
        public readonly string BootstrapBrokersSaslScram;
        public readonly string BootstrapBrokersTls;
        public readonly string ClusterName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KafkaVersion;
        public readonly int NumberOfBrokerNodes;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string ZookeeperConnectString;
        public readonly string ZookeeperConnectStringTls;

        [OutputConstructor]
        private GetClusterResult(
            string arn,

            string bootstrapBrokers,

            string bootstrapBrokersPublicSaslIam,

            string bootstrapBrokersPublicSaslScram,

            string bootstrapBrokersPublicTls,

            string bootstrapBrokersSaslIam,

            string bootstrapBrokersSaslScram,

            string bootstrapBrokersTls,

            string clusterName,

            string id,

            string kafkaVersion,

            int numberOfBrokerNodes,

            ImmutableDictionary<string, string> tags,

            string zookeeperConnectString,

            string zookeeperConnectStringTls)
        {
            Arn = arn;
            BootstrapBrokers = bootstrapBrokers;
            BootstrapBrokersPublicSaslIam = bootstrapBrokersPublicSaslIam;
            BootstrapBrokersPublicSaslScram = bootstrapBrokersPublicSaslScram;
            BootstrapBrokersPublicTls = bootstrapBrokersPublicTls;
            BootstrapBrokersSaslIam = bootstrapBrokersSaslIam;
            BootstrapBrokersSaslScram = bootstrapBrokersSaslScram;
            BootstrapBrokersTls = bootstrapBrokersTls;
            ClusterName = clusterName;
            Id = id;
            KafkaVersion = kafkaVersion;
            NumberOfBrokerNodes = numberOfBrokerNodes;
            Tags = tags;
            ZookeeperConnectString = zookeeperConnectString;
            ZookeeperConnectStringTls = zookeeperConnectStringTls;
        }
    }
}
