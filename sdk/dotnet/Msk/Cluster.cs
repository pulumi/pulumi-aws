// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Msk
{
    [AwsResourceType("aws:msk/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("bootstrapBrokers")]
        public Output<string> BootstrapBrokers { get; private set; } = null!;

        [Output("bootstrapBrokersPublicSaslIam")]
        public Output<string> BootstrapBrokersPublicSaslIam { get; private set; } = null!;

        [Output("bootstrapBrokersPublicSaslScram")]
        public Output<string> BootstrapBrokersPublicSaslScram { get; private set; } = null!;

        [Output("bootstrapBrokersPublicTls")]
        public Output<string> BootstrapBrokersPublicTls { get; private set; } = null!;

        [Output("bootstrapBrokersSaslIam")]
        public Output<string> BootstrapBrokersSaslIam { get; private set; } = null!;

        [Output("bootstrapBrokersSaslScram")]
        public Output<string> BootstrapBrokersSaslScram { get; private set; } = null!;

        [Output("bootstrapBrokersTls")]
        public Output<string> BootstrapBrokersTls { get; private set; } = null!;

        [Output("brokerNodeGroupInfo")]
        public Output<Outputs.ClusterBrokerNodeGroupInfo> BrokerNodeGroupInfo { get; private set; } = null!;

        [Output("clientAuthentication")]
        public Output<Outputs.ClusterClientAuthentication?> ClientAuthentication { get; private set; } = null!;

        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        [Output("configurationInfo")]
        public Output<Outputs.ClusterConfigurationInfo?> ConfigurationInfo { get; private set; } = null!;

        [Output("currentVersion")]
        public Output<string> CurrentVersion { get; private set; } = null!;

        [Output("encryptionInfo")]
        public Output<Outputs.ClusterEncryptionInfo?> EncryptionInfo { get; private set; } = null!;

        [Output("enhancedMonitoring")]
        public Output<string?> EnhancedMonitoring { get; private set; } = null!;

        [Output("kafkaVersion")]
        public Output<string> KafkaVersion { get; private set; } = null!;

        [Output("loggingInfo")]
        public Output<Outputs.ClusterLoggingInfo?> LoggingInfo { get; private set; } = null!;

        [Output("numberOfBrokerNodes")]
        public Output<int> NumberOfBrokerNodes { get; private set; } = null!;

        [Output("openMonitoring")]
        public Output<Outputs.ClusterOpenMonitoring?> OpenMonitoring { get; private set; } = null!;

        [Output("storageMode")]
        public Output<string> StorageMode { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("zookeeperConnectString")]
        public Output<string> ZookeeperConnectString { get; private set; } = null!;

        [Output("zookeeperConnectStringTls")]
        public Output<string> ZookeeperConnectStringTls { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:msk/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:msk/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("brokerNodeGroupInfo", required: true)]
        public Input<Inputs.ClusterBrokerNodeGroupInfoArgs> BrokerNodeGroupInfo { get; set; } = null!;

        [Input("clientAuthentication")]
        public Input<Inputs.ClusterClientAuthenticationArgs>? ClientAuthentication { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("configurationInfo")]
        public Input<Inputs.ClusterConfigurationInfoArgs>? ConfigurationInfo { get; set; }

        [Input("encryptionInfo")]
        public Input<Inputs.ClusterEncryptionInfoArgs>? EncryptionInfo { get; set; }

        [Input("enhancedMonitoring")]
        public Input<string>? EnhancedMonitoring { get; set; }

        [Input("kafkaVersion", required: true)]
        public Input<string> KafkaVersion { get; set; } = null!;

        [Input("loggingInfo")]
        public Input<Inputs.ClusterLoggingInfoArgs>? LoggingInfo { get; set; }

        [Input("numberOfBrokerNodes", required: true)]
        public Input<int> NumberOfBrokerNodes { get; set; } = null!;

        [Input("openMonitoring")]
        public Input<Inputs.ClusterOpenMonitoringArgs>? OpenMonitoring { get; set; }

        [Input("storageMode")]
        public Input<string>? StorageMode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("bootstrapBrokers")]
        public Input<string>? BootstrapBrokers { get; set; }

        [Input("bootstrapBrokersPublicSaslIam")]
        public Input<string>? BootstrapBrokersPublicSaslIam { get; set; }

        [Input("bootstrapBrokersPublicSaslScram")]
        public Input<string>? BootstrapBrokersPublicSaslScram { get; set; }

        [Input("bootstrapBrokersPublicTls")]
        public Input<string>? BootstrapBrokersPublicTls { get; set; }

        [Input("bootstrapBrokersSaslIam")]
        public Input<string>? BootstrapBrokersSaslIam { get; set; }

        [Input("bootstrapBrokersSaslScram")]
        public Input<string>? BootstrapBrokersSaslScram { get; set; }

        [Input("bootstrapBrokersTls")]
        public Input<string>? BootstrapBrokersTls { get; set; }

        [Input("brokerNodeGroupInfo")]
        public Input<Inputs.ClusterBrokerNodeGroupInfoGetArgs>? BrokerNodeGroupInfo { get; set; }

        [Input("clientAuthentication")]
        public Input<Inputs.ClusterClientAuthenticationGetArgs>? ClientAuthentication { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("configurationInfo")]
        public Input<Inputs.ClusterConfigurationInfoGetArgs>? ConfigurationInfo { get; set; }

        [Input("currentVersion")]
        public Input<string>? CurrentVersion { get; set; }

        [Input("encryptionInfo")]
        public Input<Inputs.ClusterEncryptionInfoGetArgs>? EncryptionInfo { get; set; }

        [Input("enhancedMonitoring")]
        public Input<string>? EnhancedMonitoring { get; set; }

        [Input("kafkaVersion")]
        public Input<string>? KafkaVersion { get; set; }

        [Input("loggingInfo")]
        public Input<Inputs.ClusterLoggingInfoGetArgs>? LoggingInfo { get; set; }

        [Input("numberOfBrokerNodes")]
        public Input<int>? NumberOfBrokerNodes { get; set; }

        [Input("openMonitoring")]
        public Input<Inputs.ClusterOpenMonitoringGetArgs>? OpenMonitoring { get; set; }

        [Input("storageMode")]
        public Input<string>? StorageMode { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("zookeeperConnectString")]
        public Input<string>? ZookeeperConnectString { get; set; }

        [Input("zookeeperConnectStringTls")]
        public Input<string>? ZookeeperConnectStringTls { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
