// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Msk
{
    public static class GetBootstrapBrokers
    {
        /// <summary>
        /// Get a list of brokers that a client application can use to bootstrap.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Msk.GetBootstrapBrokers.Invoke(new()
        ///     {
        ///         ClusterArn = exampleAwsMskCluster.Arn,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBootstrapBrokersResult> InvokeAsync(GetBootstrapBrokersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBootstrapBrokersResult>("aws:msk/getBootstrapBrokers:getBootstrapBrokers", args ?? new GetBootstrapBrokersArgs(), options.WithDefaults());

        /// <summary>
        /// Get a list of brokers that a client application can use to bootstrap.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Msk.GetBootstrapBrokers.Invoke(new()
        ///     {
        ///         ClusterArn = exampleAwsMskCluster.Arn,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBootstrapBrokersResult> Invoke(GetBootstrapBrokersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBootstrapBrokersResult>("aws:msk/getBootstrapBrokers:getBootstrapBrokers", args ?? new GetBootstrapBrokersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBootstrapBrokersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the cluster the nodes belong to.
        /// </summary>
        [Input("clusterArn", required: true)]
        public string ClusterArn { get; set; } = null!;

        public GetBootstrapBrokersArgs()
        {
        }
        public static new GetBootstrapBrokersArgs Empty => new GetBootstrapBrokersArgs();
    }

    public sealed class GetBootstrapBrokersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the cluster the nodes belong to.
        /// </summary>
        [Input("clusterArn", required: true)]
        public Input<string> ClusterArn { get; set; } = null!;

        public GetBootstrapBrokersInvokeArgs()
        {
        }
        public static new GetBootstrapBrokersInvokeArgs Empty => new GetBootstrapBrokersInvokeArgs();
    }


    [OutputType]
    public sealed class GetBootstrapBrokersResult
    {
        /// <summary>
        /// Comma separated list of one or more hostname:port pairs of kafka brokers suitable to bootstrap connectivity to the kafka cluster.
        /// </summary>
        public readonly string BootstrapBrokers;
        /// <summary>
        /// One or more DNS names (or IP addresses) and SASL IAM port pairs.
        /// </summary>
        public readonly string BootstrapBrokersPublicSaslIam;
        /// <summary>
        /// One or more DNS names (or IP addresses) and SASL SCRAM port pairs.
        /// </summary>
        public readonly string BootstrapBrokersPublicSaslScram;
        /// <summary>
        /// One or more DNS names (or IP addresses) and TLS port pairs.
        /// </summary>
        public readonly string BootstrapBrokersPublicTls;
        /// <summary>
        /// One or more DNS names (or IP addresses) and SASL IAM port pairs.
        /// </summary>
        public readonly string BootstrapBrokersSaslIam;
        /// <summary>
        /// One or more DNS names (or IP addresses) and SASL SCRAM port pairs.
        /// </summary>
        public readonly string BootstrapBrokersSaslScram;
        /// <summary>
        /// One or more DNS names (or IP addresses) and TLS port pairs.
        /// </summary>
        public readonly string BootstrapBrokersTls;
        /// <summary>
        /// A string containing one or more DNS names (or IP addresses) and SASL IAM port pairs for VPC connectivity.
        /// </summary>
        public readonly string BootstrapBrokersVpcConnectivitySaslIam;
        /// <summary>
        /// A string containing one or more DNS names (or IP addresses) and SASL SCRAM port pairs for VPC connectivity.
        /// </summary>
        public readonly string BootstrapBrokersVpcConnectivitySaslScram;
        /// <summary>
        /// A string containing one or more DNS names (or IP addresses) and TLS port pairs for VPC connectivity.
        /// </summary>
        public readonly string BootstrapBrokersVpcConnectivityTls;
        public readonly string ClusterArn;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetBootstrapBrokersResult(
            string bootstrapBrokers,

            string bootstrapBrokersPublicSaslIam,

            string bootstrapBrokersPublicSaslScram,

            string bootstrapBrokersPublicTls,

            string bootstrapBrokersSaslIam,

            string bootstrapBrokersSaslScram,

            string bootstrapBrokersTls,

            string bootstrapBrokersVpcConnectivitySaslIam,

            string bootstrapBrokersVpcConnectivitySaslScram,

            string bootstrapBrokersVpcConnectivityTls,

            string clusterArn,

            string id)
        {
            BootstrapBrokers = bootstrapBrokers;
            BootstrapBrokersPublicSaslIam = bootstrapBrokersPublicSaslIam;
            BootstrapBrokersPublicSaslScram = bootstrapBrokersPublicSaslScram;
            BootstrapBrokersPublicTls = bootstrapBrokersPublicTls;
            BootstrapBrokersSaslIam = bootstrapBrokersSaslIam;
            BootstrapBrokersSaslScram = bootstrapBrokersSaslScram;
            BootstrapBrokersTls = bootstrapBrokersTls;
            BootstrapBrokersVpcConnectivitySaslIam = bootstrapBrokersVpcConnectivitySaslIam;
            BootstrapBrokersVpcConnectivitySaslScram = bootstrapBrokersVpcConnectivitySaslScram;
            BootstrapBrokersVpcConnectivityTls = bootstrapBrokersVpcConnectivityTls;
            ClusterArn = clusterArn;
            Id = id;
        }
    }
}
