// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SsoAdmin
{
    /// <summary>
    /// Resource for managing an AWS SSO Admin Application Access Scope.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import SSO Admin Application Access Scope using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:ssoadmin/applicationAccessScope:ApplicationAccessScope example arn:aws:sso::012345678901:application/ssoins-012345678901/apl-012345678901,sso:account:access
    /// ```
    /// </summary>
    [AwsResourceType("aws:ssoadmin/applicationAccessScope:ApplicationAccessScope")]
    public partial class ApplicationAccessScope : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the ARN of the application with the access scope with the targets to add or update.
        /// </summary>
        [Output("applicationArn")]
        public Output<string> ApplicationArn { get; private set; } = null!;

        /// <summary>
        /// Specifies an array list of ARNs that represent the authorized targets for this access scope.
        /// </summary>
        [Output("authorizedTargets")]
        public Output<ImmutableArray<string>> AuthorizedTargets { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the access scope to be associated with the specified targets.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationAccessScope resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationAccessScope(string name, ApplicationAccessScopeArgs args, CustomResourceOptions? options = null)
            : base("aws:ssoadmin/applicationAccessScope:ApplicationAccessScope", name, args ?? new ApplicationAccessScopeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationAccessScope(string name, Input<string> id, ApplicationAccessScopeState? state = null, CustomResourceOptions? options = null)
            : base("aws:ssoadmin/applicationAccessScope:ApplicationAccessScope", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationAccessScope resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationAccessScope Get(string name, Input<string> id, ApplicationAccessScopeState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationAccessScope(name, id, state, options);
        }
    }

    public sealed class ApplicationAccessScopeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ARN of the application with the access scope with the targets to add or update.
        /// </summary>
        [Input("applicationArn", required: true)]
        public Input<string> ApplicationArn { get; set; } = null!;

        [Input("authorizedTargets")]
        private InputList<string>? _authorizedTargets;

        /// <summary>
        /// Specifies an array list of ARNs that represent the authorized targets for this access scope.
        /// </summary>
        public InputList<string> AuthorizedTargets
        {
            get => _authorizedTargets ?? (_authorizedTargets = new InputList<string>());
            set => _authorizedTargets = value;
        }

        /// <summary>
        /// Specifies the name of the access scope to be associated with the specified targets.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public ApplicationAccessScopeArgs()
        {
        }
        public static new ApplicationAccessScopeArgs Empty => new ApplicationAccessScopeArgs();
    }

    public sealed class ApplicationAccessScopeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ARN of the application with the access scope with the targets to add or update.
        /// </summary>
        [Input("applicationArn")]
        public Input<string>? ApplicationArn { get; set; }

        [Input("authorizedTargets")]
        private InputList<string>? _authorizedTargets;

        /// <summary>
        /// Specifies an array list of ARNs that represent the authorized targets for this access scope.
        /// </summary>
        public InputList<string> AuthorizedTargets
        {
            get => _authorizedTargets ?? (_authorizedTargets = new InputList<string>());
            set => _authorizedTargets = value;
        }

        /// <summary>
        /// Specifies the name of the access scope to be associated with the specified targets.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        public ApplicationAccessScopeState()
        {
        }
        public static new ApplicationAccessScopeState Empty => new ApplicationAccessScopeState();
    }
}
