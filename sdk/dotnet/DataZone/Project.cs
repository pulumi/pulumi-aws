// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DataZone
{
    /// <summary>
    /// Resource for managing an AWS DataZone Project.
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.DataZone.Project("test", new()
    ///     {
    ///         DomainIdentifier = testAwsDatazoneDomain.Id,
    ///         Name = "name",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DataZone Project using a colon-delimited string combining `domain_id` and `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:datazone/project:Project example domain-1234:project-1234
    /// ```
    /// </summary>
    [AwsResourceType("aws:datazone/project:Project")]
    public partial class Project : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timestamp of when the project was made.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Creator of the project.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// Description of project.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
        /// </summary>
        [Output("domainIdentifier")]
        public Output<string> DomainIdentifier { get; private set; } = null!;

        /// <summary>
        /// List of error messages if operation cannot be completed.
        /// </summary>
        [Output("failureReasons")]
        public Output<ImmutableArray<Outputs.ProjectFailureReason>> FailureReasons { get; private set; } = null!;

        /// <summary>
        /// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
        /// </summary>
        [Output("glossaryTerms")]
        public Output<ImmutableArray<string>> GlossaryTerms { get; private set; } = null!;

        /// <summary>
        /// Timestamp of when the project was last updated.
        /// </summary>
        [Output("lastUpdatedAt")]
        public Output<string> LastUpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
        /// </summary>
        [Output("projectStatus")]
        public Output<string> ProjectStatus { get; private set; } = null!;

        /// <summary>
        /// Optional flag to delete all child entities within the project.
        /// </summary>
        [Output("skipDeletionCheck")]
        public Output<bool?> SkipDeletionCheck { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ProjectTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a Project resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Project(string name, ProjectArgs args, CustomResourceOptions? options = null)
            : base("aws:datazone/project:Project", name, args ?? new ProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Project(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
            : base("aws:datazone/project:Project", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Project resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Project Get(string name, Input<string> id, ProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new Project(name, id, state, options);
        }
    }

    public sealed class ProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
        /// </summary>
        [Input("domainIdentifier", required: true)]
        public Input<string> DomainIdentifier { get; set; } = null!;

        [Input("glossaryTerms")]
        private InputList<string>? _glossaryTerms;

        /// <summary>
        /// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
        /// </summary>
        public InputList<string> GlossaryTerms
        {
            get => _glossaryTerms ?? (_glossaryTerms = new InputList<string>());
            set => _glossaryTerms = value;
        }

        /// <summary>
        /// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Optional flag to delete all child entities within the project.
        /// </summary>
        [Input("skipDeletionCheck")]
        public Input<bool>? SkipDeletionCheck { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ProjectTimeoutsArgs>? Timeouts { get; set; }

        public ProjectArgs()
        {
        }
        public static new ProjectArgs Empty => new ProjectArgs();
    }

    public sealed class ProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timestamp of when the project was made.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Creator of the project.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// Description of project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Identifier of domain which the project is part of. Must follow the regex of `^dzd[-_][a-zA-Z0-9_-]{1,36}$`.
        /// </summary>
        [Input("domainIdentifier")]
        public Input<string>? DomainIdentifier { get; set; }

        [Input("failureReasons")]
        private InputList<Inputs.ProjectFailureReasonGetArgs>? _failureReasons;

        /// <summary>
        /// List of error messages if operation cannot be completed.
        /// </summary>
        public InputList<Inputs.ProjectFailureReasonGetArgs> FailureReasons
        {
            get => _failureReasons ?? (_failureReasons = new InputList<Inputs.ProjectFailureReasonGetArgs>());
            set => _failureReasons = value;
        }

        [Input("glossaryTerms")]
        private InputList<string>? _glossaryTerms;

        /// <summary>
        /// List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of `[a-zA-Z0-9_-]{1,36}$`.
        /// </summary>
        public InputList<string> GlossaryTerms
        {
            get => _glossaryTerms ?? (_glossaryTerms = new InputList<string>());
            set => _glossaryTerms = value;
        }

        /// <summary>
        /// Timestamp of when the project was last updated.
        /// </summary>
        [Input("lastUpdatedAt")]
        public Input<string>? LastUpdatedAt { get; set; }

        /// <summary>
        /// Name of the project. Must follow the regex of `^[\w -]+$`. and have a length of at most 64.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enum that conveys state of project. Can be `ACTIVE`, `DELETING`, or `DELETE_FAILED`.
        /// </summary>
        [Input("projectStatus")]
        public Input<string>? ProjectStatus { get; set; }

        /// <summary>
        /// Optional flag to delete all child entities within the project.
        /// </summary>
        [Input("skipDeletionCheck")]
        public Input<bool>? SkipDeletionCheck { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ProjectTimeoutsGetArgs>? Timeouts { get; set; }

        public ProjectState()
        {
        }
        public static new ProjectState Empty => new ProjectState();
    }
}
