// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DataZone
{
    /// <summary>
    /// Resource for managing an AWS DataZone Domain.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var domainExecutionRole = new Aws.Iam.Role("domain_execution_role", new()
    ///     {
    ///         Name = "my_domain_execution_role",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "datazone.amazonaws.com",
    ///                     },
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "cloudformation.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var domainExecutionRoleRolePolicy = new Aws.Iam.RolePolicy("domain_execution_role", new()
    ///     {
    ///         Role = domainExecutionRole.Name,
    ///         Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "datazone:*",
    ///                         "ram:*",
    ///                         "sso:*",
    ///                         "kms:*",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Resource"] = "*",
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var example = new Aws.DataZone.Domain("example", new()
    ///     {
    ///         Name = "example",
    ///         DomainExecutionRole = domainExecutionRole.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### V2 Domain
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     // IAM role for Domain Execution
    ///     var assumeRoleDomainExecution = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                     "sts:TagSession",
    ///                     "sts:SetContext",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "datazone.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                         Variable = "aws:SourceAccount",
    ///                     },
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "ForAllValues:StringLike",
    ///                         Values = new[]
    ///                         {
    ///                             "datazone*",
    ///                         },
    ///                         Variable = "aws:TagKeys",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var domainExecution = new Aws.Iam.Role("domain_execution", new()
    ///     {
    ///         AssumeRolePolicy = assumeRoleDomainExecution.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         Name = "example-domain-execution-role",
    ///     });
    /// 
    ///     var domainExecutionRole = Aws.Iam.GetPolicy.Invoke(new()
    ///     {
    ///         Name = "SageMakerStudioDomainExecutionRolePolicy",
    ///     });
    /// 
    ///     var domainExecutionRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("domain_execution", new()
    ///     {
    ///         PolicyArn = domainExecutionRole.Apply(getPolicyResult =&gt; getPolicyResult.Arn),
    ///         Role = domainExecution.Name,
    ///     });
    /// 
    ///     // IAM role for Domain Service
    ///     var assumeRoleDomainService = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "datazone.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Conditions = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
    ///                     {
    ///                         Test = "StringEquals",
    ///                         Values = new[]
    ///                         {
    ///                             current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                         Variable = "aws:SourceAccount",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var domainService = new Aws.Iam.Role("domain_service", new()
    ///     {
    ///         AssumeRolePolicy = assumeRoleDomainService.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         Name = "example-domain-service-role",
    ///     });
    /// 
    ///     var domainServiceRole = Aws.Iam.GetPolicy.Invoke(new()
    ///     {
    ///         Name = "SageMakerStudioDomainServiceRolePolicy",
    ///     });
    /// 
    ///     var domainServiceRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("domain_service", new()
    ///     {
    ///         PolicyArn = domainServiceRole.Apply(getPolicyResult =&gt; getPolicyResult.Arn),
    ///         Role = domainService.Name,
    ///     });
    /// 
    ///     // DataZone Domain V2
    ///     var example = new Aws.DataZone.Domain("example", new()
    ///     {
    ///         Name = "example-domain",
    ///         DomainExecutionRole = domainExecution.Arn,
    ///         DomainVersion = "V2",
    ///         ServiceRole = domainService.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DataZone Domain using the `domain_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:datazone/domain:Domain example domain-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:datazone/domain:Domain")]
    public partial class Domain : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Domain.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Description of the Domain.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ARN of the role used by DataZone to configure the Domain.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("domainExecutionRole")]
        public Output<string> DomainExecutionRole { get; private set; } = null!;

        /// <summary>
        /// Version of the Domain. Valid values are `V1` and `V2`. Defaults to `V1`.
        /// </summary>
        [Output("domainVersion")]
        public Output<string> DomainVersion { get; private set; } = null!;

        /// <summary>
        /// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
        /// </summary>
        [Output("kmsKeyIdentifier")]
        public Output<string?> KmsKeyIdentifier { get; private set; } = null!;

        /// <summary>
        /// Name of the Domain.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// URL of the data portal for the Domain.
        /// </summary>
        [Output("portalUrl")]
        public Output<string> PortalUrl { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// ARN of the service role used by DataZone. Required when `DomainVersion` is set to `V2`.
        /// </summary>
        [Output("serviceRole")]
        public Output<string?> ServiceRole { get; private set; } = null!;

        /// <summary>
        /// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
        /// </summary>
        [Output("singleSignOn")]
        public Output<Outputs.DomainSingleSignOn?> SingleSignOn { get; private set; } = null!;

        /// <summary>
        /// Whether to skip the deletion check for the Domain.
        /// </summary>
        [Output("skipDeletionCheck")]
        public Output<bool?> SkipDeletionCheck { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DomainTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a Domain resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Domain(string name, DomainArgs args, CustomResourceOptions? options = null)
            : base("aws:datazone/domain:Domain", name, args ?? new DomainArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Domain(string name, Input<string> id, DomainState? state = null, CustomResourceOptions? options = null)
            : base("aws:datazone/domain:Domain", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Domain resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Domain Get(string name, Input<string> id, DomainState? state = null, CustomResourceOptions? options = null)
        {
            return new Domain(name, id, state, options);
        }
    }

    public sealed class DomainArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the Domain.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ARN of the role used by DataZone to configure the Domain.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("domainExecutionRole", required: true)]
        public Input<string> DomainExecutionRole { get; set; } = null!;

        /// <summary>
        /// Version of the Domain. Valid values are `V1` and `V2`. Defaults to `V1`.
        /// </summary>
        [Input("domainVersion")]
        public Input<string>? DomainVersion { get; set; }

        /// <summary>
        /// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// Name of the Domain.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ARN of the service role used by DataZone. Required when `DomainVersion` is set to `V2`.
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
        /// </summary>
        [Input("singleSignOn")]
        public Input<Inputs.DomainSingleSignOnArgs>? SingleSignOn { get; set; }

        /// <summary>
        /// Whether to skip the deletion check for the Domain.
        /// </summary>
        [Input("skipDeletionCheck")]
        public Input<bool>? SkipDeletionCheck { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.DomainTimeoutsArgs>? Timeouts { get; set; }

        public DomainArgs()
        {
        }
        public static new DomainArgs Empty => new DomainArgs();
    }

    public sealed class DomainState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Domain.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Description of the Domain.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// ARN of the role used by DataZone to configure the Domain.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("domainExecutionRole")]
        public Input<string>? DomainExecutionRole { get; set; }

        /// <summary>
        /// Version of the Domain. Valid values are `V1` and `V2`. Defaults to `V1`.
        /// </summary>
        [Input("domainVersion")]
        public Input<string>? DomainVersion { get; set; }

        /// <summary>
        /// ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
        /// </summary>
        [Input("kmsKeyIdentifier")]
        public Input<string>? KmsKeyIdentifier { get; set; }

        /// <summary>
        /// Name of the Domain.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// URL of the data portal for the Domain.
        /// </summary>
        [Input("portalUrl")]
        public Input<string>? PortalUrl { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ARN of the service role used by DataZone. Required when `DomainVersion` is set to `V2`.
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
        /// </summary>
        [Input("singleSignOn")]
        public Input<Inputs.DomainSingleSignOnGetArgs>? SingleSignOn { get; set; }

        /// <summary>
        /// Whether to skip the deletion check for the Domain.
        /// </summary>
        [Input("skipDeletionCheck")]
        public Input<bool>? SkipDeletionCheck { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.DomainTimeoutsGetArgs>? Timeouts { get; set; }

        public DomainState()
        {
        }
        public static new DomainState Empty => new DomainState();
    }
}
