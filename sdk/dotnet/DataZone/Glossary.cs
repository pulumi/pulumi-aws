// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DataZone
{
    /// <summary>
    /// Resource for managing an AWS DataZone Glossary.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var domainExecutionRole = new Aws.Iam.Role("domain_execution_role", new()
    ///     {
    ///         Name = "example_name",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "datazone.amazonaws.com",
    ///                     },
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "cloudformation.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///         InlinePolicies = new[]
    ///         {
    ///             new Aws.Iam.Inputs.RoleInlinePolicyArgs
    ///             {
    ///                 Name = "example_name",
    ///                 Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Version"] = "2012-10-17",
    ///                     ["Statement"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Action"] = new[]
    ///                             {
    ///                                 "datazone:*",
    ///                                 "ram:*",
    ///                                 "sso:*",
    ///                                 "kms:*",
    ///                             },
    ///                             ["Effect"] = "Allow",
    ///                             ["Resource"] = "*",
    ///                         },
    ///                     },
    ///                 }),
    ///             },
    ///         },
    ///     });
    /// 
    ///     var test = new Aws.DataZone.Domain("test", new()
    ///     {
    ///         Name = "example_name",
    ///         DomainExecutionRole = domainExecutionRole.Arn,
    ///     });
    /// 
    ///     var testSecurityGroup = new Aws.Ec2.SecurityGroup("test", new()
    ///     {
    ///         Name = "example_name",
    ///     });
    /// 
    ///     var testProject = new Aws.DataZone.Project("test", new()
    ///     {
    ///         DomainIdentifier = test.Id,
    ///         GlossaryTerms = new[]
    ///         {
    ///             "2N8w6XJCwZf",
    ///         },
    ///         Name = "example_name",
    ///         Description = "desc",
    ///         SkipDeletionCheck = true,
    ///     });
    /// 
    ///     var testGlossary = new Aws.DataZone.Glossary("test", new()
    ///     {
    ///         Description = "description",
    ///         Name = "example_name",
    ///         OwningProjectIdentifier = testProject.Id,
    ///         Status = "DISABLED",
    ///         DomainIdentifier = testProject.DomainIdentifier,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.DataZone.Glossary("test", new()
    ///     {
    ///         Description = "description",
    ///         Name = "example_name",
    ///         OwningProjectIdentifier = testAwsDatazoneProject.Id,
    ///         Status = "DISABLED",
    ///         DomainIdentifier = testAwsDatazoneProject.DomainIdentifier,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DataZone Glossary using the import Datazone Glossary using a comma-delimited string combining the domain id, glossary id, and the id of the project it's under. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:datazone/glossary:Glossary example domain-id,glossary-id,owning-project-identifier
    /// ```
    /// </summary>
    [AwsResourceType("aws:datazone/glossary:Glossary")]
    public partial class Glossary : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the glossary. Must have a length between 0 and 4096.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("domainIdentifier")]
        public Output<string> DomainIdentifier { get; private set; } = null!;

        /// <summary>
        /// Name of the glossary. Must have length between 1 and 256.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the project that owns business glossary. Must follow regex of ^[a-zA-Z0-9_-]{1,36}$.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("owningProjectIdentifier")]
        public Output<string> OwningProjectIdentifier { get; private set; } = null!;

        /// <summary>
        /// Status of business glossary. Valid values are DISABLED and ENABLED.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Glossary resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Glossary(string name, GlossaryArgs args, CustomResourceOptions? options = null)
            : base("aws:datazone/glossary:Glossary", name, args ?? new GlossaryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Glossary(string name, Input<string> id, GlossaryState? state = null, CustomResourceOptions? options = null)
            : base("aws:datazone/glossary:Glossary", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Glossary resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Glossary Get(string name, Input<string> id, GlossaryState? state = null, CustomResourceOptions? options = null)
        {
            return new Glossary(name, id, state, options);
        }
    }

    public sealed class GlossaryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the glossary. Must have a length between 0 and 4096.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainIdentifier", required: true)]
        public Input<string> DomainIdentifier { get; set; } = null!;

        /// <summary>
        /// Name of the glossary. Must have length between 1 and 256.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the project that owns business glossary. Must follow regex of ^[a-zA-Z0-9_-]{1,36}$.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("owningProjectIdentifier", required: true)]
        public Input<string> OwningProjectIdentifier { get; set; } = null!;

        /// <summary>
        /// Status of business glossary. Valid values are DISABLED and ENABLED.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GlossaryArgs()
        {
        }
        public static new GlossaryArgs Empty => new GlossaryArgs();
    }

    public sealed class GlossaryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the glossary. Must have a length between 0 and 4096.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainIdentifier")]
        public Input<string>? DomainIdentifier { get; set; }

        /// <summary>
        /// Name of the glossary. Must have length between 1 and 256.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the project that owns business glossary. Must follow regex of ^[a-zA-Z0-9_-]{1,36}$.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("owningProjectIdentifier")]
        public Input<string>? OwningProjectIdentifier { get; set; }

        /// <summary>
        /// Status of business glossary. Valid values are DISABLED and ENABLED.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GlossaryState()
        {
        }
        public static new GlossaryState Empty => new GlossaryState();
    }
}
