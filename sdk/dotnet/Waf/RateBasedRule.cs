// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Waf
{
    [AwsResourceType("aws:waf/rateBasedRule:RateBasedRule")]
    public partial class RateBasedRule : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("metricName")]
        public Output<string> MetricName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("predicates")]
        public Output<ImmutableArray<Outputs.RateBasedRulePredicate>> Predicates { get; private set; } = null!;

        [Output("rateKey")]
        public Output<string> RateKey { get; private set; } = null!;

        [Output("rateLimit")]
        public Output<int> RateLimit { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a RateBasedRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RateBasedRule(string name, RateBasedRuleArgs args, CustomResourceOptions? options = null)
            : base("aws:waf/rateBasedRule:RateBasedRule", name, args ?? new RateBasedRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RateBasedRule(string name, Input<string> id, RateBasedRuleState? state = null, CustomResourceOptions? options = null)
            : base("aws:waf/rateBasedRule:RateBasedRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RateBasedRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RateBasedRule Get(string name, Input<string> id, RateBasedRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new RateBasedRule(name, id, state, options);
        }
    }

    public sealed class RateBasedRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("metricName", required: true)]
        public Input<string> MetricName { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("predicates")]
        private InputList<Inputs.RateBasedRulePredicateArgs>? _predicates;
        public InputList<Inputs.RateBasedRulePredicateArgs> Predicates
        {
            get => _predicates ?? (_predicates = new InputList<Inputs.RateBasedRulePredicateArgs>());
            set => _predicates = value;
        }

        [Input("rateKey", required: true)]
        public Input<string> RateKey { get; set; } = null!;

        [Input("rateLimit", required: true)]
        public Input<int> RateLimit { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public RateBasedRuleArgs()
        {
        }
        public static new RateBasedRuleArgs Empty => new RateBasedRuleArgs();
    }

    public sealed class RateBasedRuleState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("metricName")]
        public Input<string>? MetricName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("predicates")]
        private InputList<Inputs.RateBasedRulePredicateGetArgs>? _predicates;
        public InputList<Inputs.RateBasedRulePredicateGetArgs> Predicates
        {
            get => _predicates ?? (_predicates = new InputList<Inputs.RateBasedRulePredicateGetArgs>());
            set => _predicates = value;
        }

        [Input("rateKey")]
        public Input<string>? RateKey { get; set; }

        [Input("rateLimit")]
        public Input<int>? RateLimit { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public RateBasedRuleState()
        {
        }
        public static new RateBasedRuleState Empty => new RateBasedRuleState();
    }
}
