// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.WafV2
{
    /// <summary>
    /// Associates a WAFv2 Rule Group (custom or managed) with a Web ACL by adding a rule that references the Rule Group. Use this resource to apply the rules defined in a Rule Group to a Web ACL without duplicating rule definitions.
    /// 
    /// This resource supports both:
    /// 
    /// - **Custom Rule Groups**: User-created rule groups that you manage within your AWS account
    /// - **Managed Rule Groups**: Pre-configured rule groups provided by AWS or third-party vendors
    /// 
    /// !&gt; **Warning:** Verify the rule names in your `ruleActionOverride`s carefully. With managed rule groups, WAF silently ignores any override that uses an invalid rule name. With customer-owned rule groups, invalid rule names in your overrides will cause web ACL updates to fail. An invalid rule name is any name that doesn't exactly match the case-sensitive name of an existing rule in the rule group.
    /// 
    /// !&gt; **Warning:** Using this resource will cause the associated Web ACL resource to show configuration drift in the `rule` argument unless you add `lifecycle { ignoreChanges = [rule] }` to the Web ACL resource configuration. This is because this resource modifies the Web ACL's rules outside of the Web ACL resource's direct management.
    /// 
    /// &gt; **Note:** This resource creates a rule within the Web ACL that references the entire Rule Group. The rule group's individual rules are evaluated as a unit when requests are processed by the Web ACL.
    /// 
    /// ## Example Usage
    /// 
    /// ### Custom Rule Group - Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.RuleGroup("example", new()
    ///     {
    ///         Name = "example-rule-group",
    ///         Scope = "REGIONAL",
    ///         Capacity = 10,
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "block-suspicious-requests",
    ///                 Priority = 1,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Block = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     GeoMatchStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementGeoMatchStatementArgs
    ///                     {
    ///                         CountryCodes = new[]
    ///                         {
    ///                             "CN",
    ///                             "RU",
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = true,
    ///                     MetricName = "block-suspicious-requests",
    ///                     SampledRequestsEnabled = true,
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "example-rule-group",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var exampleWebAcl = new Aws.WafV2.WebAcl("example", new()
    ///     {
    ///         Name = "example-web-acl",
    ///         Scope = "REGIONAL",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "example-web-acl",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var exampleWebAclRuleGroupAssociation = new Aws.WafV2.WebAclRuleGroupAssociation("example", new()
    ///     {
    ///         RuleName = "example-rule-group-rule",
    ///         Priority = 100,
    ///         WebAclArn = exampleWebAcl.Arn,
    ///         RuleGroupReference = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceArgs
    ///         {
    ///             Arn = example.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Managed Rule Group - Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.WebAcl("example", new()
    ///     {
    ///         Name = "example-web-acl",
    ///         Scope = "REGIONAL",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "example-web-acl",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var managedExample = new Aws.WafV2.WebAclRuleGroupAssociation("managed_example", new()
    ///     {
    ///         RuleName = "aws-common-rule-set",
    ///         Priority = 50,
    ///         WebAclArn = example.Arn,
    ///         ManagedRuleGroup = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupArgs
    ///         {
    ///             Name = "AWSManagedRulesCommonRuleSet",
    ///             VendorName = "AWS",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Managed Rule Group - With Version
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var managedVersioned = new Aws.WafV2.WebAclRuleGroupAssociation("managed_versioned", new()
    ///     {
    ///         RuleName = "aws-common-rule-set-versioned",
    ///         Priority = 60,
    ///         WebAclArn = example.Arn,
    ///         ManagedRuleGroup = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupArgs
    ///         {
    ///             Name = "AWSManagedRulesCommonRuleSet",
    ///             VendorName = "AWS",
    ///             Version = "Version_1.0",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Managed Rule Group - With Rule Action Overrides
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var managedWithOverrides = new Aws.WafV2.WebAclRuleGroupAssociation("managed_with_overrides", new()
    ///     {
    ///         RuleName = "aws-common-rule-set-with-overrides",
    ///         Priority = 70,
    ///         WebAclArn = example.Arn,
    ///         ManagedRuleGroup = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupArgs
    ///         {
    ///             Name = "AWSManagedRulesCommonRuleSet",
    ///             VendorName = "AWS",
    ///             RuleActionOverrides = new[]
    ///             {
    ///                 new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideArgs
    ///                 {
    ///                     Name = "GenericRFI_BODY",
    ///                     ActionToUse = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseArgs
    ///                     {
    ///                         Count = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCountArgs
    ///                         {
    ///                             CustomRequestHandling = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCountCustomRequestHandlingArgs
    ///                             {
    ///                                 InsertHeaders = new[]
    ///                                 {
    ///                                     new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseCountCustomRequestHandlingInsertHeaderArgs
    ///                                     {
    ///                                         Name = "X-RFI-Override",
    ///                                         Value = "counted",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideArgs
    ///                 {
    ///                     Name = "SizeRestrictions_BODY",
    ///                     ActionToUse = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationManagedRuleGroupRuleActionOverrideActionToUseArgs
    ///                     {
    ///                         Captcha = null,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom Rule Group - With Override Action
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.WebAclRuleGroupAssociation("example", new()
    ///     {
    ///         RuleName = "example-rule-group-rule",
    ///         Priority = 100,
    ///         WebAclArn = exampleAwsWafv2WebAcl.Arn,
    ///         OverrideAction = "count",
    ///         RuleGroupReference = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceArgs
    ///         {
    ///             Arn = exampleAwsWafv2RuleGroup.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom Rule Group - With Rule Action Overrides
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.RuleGroup("example", new()
    ///     {
    ///         Name = "example-rule-group",
    ///         Scope = "REGIONAL",
    ///         Capacity = 10,
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "geo-block-rule",
    ///                 Priority = 1,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Block = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     GeoMatchStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementGeoMatchStatementArgs
    ///                     {
    ///                         CountryCodes = new[]
    ///                         {
    ///                             "CN",
    ///                             "RU",
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = true,
    ///                     MetricName = "geo-block-rule",
    ///                     SampledRequestsEnabled = true,
    ///                 },
    ///             },
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "rate-limit-rule",
    ///                 Priority = 2,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Block = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     RateBasedStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementRateBasedStatementArgs
    ///                     {
    ///                         Limit = 1000,
    ///                         AggregateKeyType = "IP",
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = true,
    ///                     MetricName = "rate-limit-rule",
    ///                     SampledRequestsEnabled = true,
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "example-rule-group",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var exampleWebAcl = new Aws.WafV2.WebAcl("example", new()
    ///     {
    ///         Name = "example-web-acl",
    ///         Scope = "REGIONAL",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "example-web-acl",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var exampleWebAclRuleGroupAssociation = new Aws.WafV2.WebAclRuleGroupAssociation("example", new()
    ///     {
    ///         RuleName = "example-rule-group-rule",
    ///         Priority = 100,
    ///         WebAclArn = exampleWebAcl.Arn,
    ///         RuleGroupReference = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceArgs
    ///         {
    ///             Arn = example.Arn,
    ///             RuleActionOverrides = new[]
    ///             {
    ///                 new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideArgs
    ///                 {
    ///                     Name = "geo-block-rule",
    ///                     ActionToUse = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs
    ///                     {
    ///                         Count = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountArgs
    ///                         {
    ///                             CustomRequestHandling = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountCustomRequestHandlingArgs
    ///                             {
    ///                                 InsertHeaders = new[]
    ///                                 {
    ///                                     new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCountCustomRequestHandlingInsertHeaderArgs
    ///                                     {
    ///                                         Name = "X-Geo-Block-Override",
    ///                                         Value = "counted",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideArgs
    ///                 {
    ///                     Name = "rate-limit-rule",
    ///                     ActionToUse = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseArgs
    ///                     {
    ///                         Captcha = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaArgs
    ///                         {
    ///                             CustomRequestHandling = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaCustomRequestHandlingArgs
    ///                             {
    ///                                 InsertHeaders = new[]
    ///                                 {
    ///                                     new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceRuleActionOverrideActionToUseCaptchaCustomRequestHandlingInsertHeaderArgs
    ///                                     {
    ///                                         Name = "X-Rate-Limit-Override",
    ///                                         Value = "captcha-required",
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Custom Rule Group - CloudFront Web ACL
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cloudfrontExample = new Aws.WafV2.RuleGroup("cloudfront_example", new()
    ///     {
    ///         Name = "cloudfront-rule-group",
    ///         Scope = "CLOUDFRONT",
    ///         Capacity = 10,
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "rate-limit",
    ///                 Priority = 1,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Block = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     RateBasedStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementRateBasedStatementArgs
    ///                     {
    ///                         Limit = 2000,
    ///                         AggregateKeyType = "IP",
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = true,
    ///                     MetricName = "rate-limit",
    ///                     SampledRequestsEnabled = true,
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "cloudfront-rule-group",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var cloudfrontExampleWebAcl = new Aws.WafV2.WebAcl("cloudfront_example", new()
    ///     {
    ///         Name = "cloudfront-web-acl",
    ///         Scope = "CLOUDFRONT",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = true,
    ///             MetricName = "cloudfront-web-acl",
    ///             SampledRequestsEnabled = true,
    ///         },
    ///     });
    /// 
    ///     var cloudfrontExampleWebAclRuleGroupAssociation = new Aws.WafV2.WebAclRuleGroupAssociation("cloudfront_example", new()
    ///     {
    ///         RuleName = "cloudfront-rule-group-rule",
    ///         Priority = 50,
    ///         WebAclArn = cloudfrontExampleWebAcl.Arn,
    ///         RuleGroupReference = new Aws.WafV2.Inputs.WebAclRuleGroupAssociationRuleGroupReferenceArgs
    ///         {
    ///             Arn = cloudfrontExample.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import WAFv2 web ACL custom rule group associations using `WebACLARN,RuleGroupARN,RuleName`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:wafv2/webAclRuleGroupAssociation:WebAclRuleGroupAssociation example "arn:aws:wafv2:us-east-1:123456789012:regional/webacl/example-web-acl/12345678-1234-1234-1234-123456789012,arn:aws:wafv2:us-east-1:123456789012:regional/rulegroup/example-rule-group/87654321-4321-4321-4321-210987654321,example-rule-group-rule"
    /// ```
    /// Using `pulumi import`, import WAFv2 web ACL managed rule group associations using `WebACLARN,VendorName:RuleGroupName[:Version],RuleName`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:wafv2/webAclRuleGroupAssociation:WebAclRuleGroupAssociation managed_example "arn:aws:wafv2:us-east-1:123456789012:regional/webacl/example-web-acl/12345678-1234-1234-1234-123456789012,AWS:AWSManagedRulesCommonRuleSet,aws-common-rule-set"
    /// ```
    /// </summary>
    [AwsResourceType("aws:wafv2/webAclRuleGroupAssociation:WebAclRuleGroupAssociation")]
    public partial class WebAclRuleGroupAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Managed Rule Group configuration. One of `ruleGroupReference` or `managedRuleGroup` is required. Conflicts with `ruleGroupReference`. See below.
        /// </summary>
        [Output("managedRuleGroup")]
        public Output<Outputs.WebAclRuleGroupAssociationManagedRuleGroup?> ManagedRuleGroup { get; private set; } = null!;

        /// <summary>
        /// Override action for the rule group. Valid values are `none` and `count`. Defaults to `none`. When set to `count`, the actions defined in the rule group rules are overridden to count matches instead of blocking or allowing requests.
        /// </summary>
        [Output("overrideAction")]
        public Output<string> OverrideAction { get; private set; } = null!;

        /// <summary>
        /// Priority of the rule within the Web ACL. Rules are evaluated in order of priority, with lower numbers evaluated first.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Custom Rule Group reference configuration. One of `ruleGroupReference` or `managedRuleGroup` is required. Conflicts with `managedRuleGroup`. See below.
        /// </summary>
        [Output("ruleGroupReference")]
        public Output<Outputs.WebAclRuleGroupAssociationRuleGroupReference?> RuleGroupReference { get; private set; } = null!;

        /// <summary>
        /// Name of the rule to create in the Web ACL that references the rule group. Must be between 1 and 128 characters.
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.WebAclRuleGroupAssociationTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// ARN of the Web ACL to associate the Rule Group with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("webAclArn")]
        public Output<string> WebAclArn { get; private set; } = null!;


        /// <summary>
        /// Create a WebAclRuleGroupAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAclRuleGroupAssociation(string name, WebAclRuleGroupAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:wafv2/webAclRuleGroupAssociation:WebAclRuleGroupAssociation", name, args ?? new WebAclRuleGroupAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAclRuleGroupAssociation(string name, Input<string> id, WebAclRuleGroupAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:wafv2/webAclRuleGroupAssociation:WebAclRuleGroupAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAclRuleGroupAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAclRuleGroupAssociation Get(string name, Input<string> id, WebAclRuleGroupAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAclRuleGroupAssociation(name, id, state, options);
        }
    }

    public sealed class WebAclRuleGroupAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Managed Rule Group configuration. One of `ruleGroupReference` or `managedRuleGroup` is required. Conflicts with `ruleGroupReference`. See below.
        /// </summary>
        [Input("managedRuleGroup")]
        public Input<Inputs.WebAclRuleGroupAssociationManagedRuleGroupArgs>? ManagedRuleGroup { get; set; }

        /// <summary>
        /// Override action for the rule group. Valid values are `none` and `count`. Defaults to `none`. When set to `count`, the actions defined in the rule group rules are overridden to count matches instead of blocking or allowing requests.
        /// </summary>
        [Input("overrideAction")]
        public Input<string>? OverrideAction { get; set; }

        /// <summary>
        /// Priority of the rule within the Web ACL. Rules are evaluated in order of priority, with lower numbers evaluated first.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Custom Rule Group reference configuration. One of `ruleGroupReference` or `managedRuleGroup` is required. Conflicts with `managedRuleGroup`. See below.
        /// </summary>
        [Input("ruleGroupReference")]
        public Input<Inputs.WebAclRuleGroupAssociationRuleGroupReferenceArgs>? RuleGroupReference { get; set; }

        /// <summary>
        /// Name of the rule to create in the Web ACL that references the rule group. Must be between 1 and 128 characters.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.WebAclRuleGroupAssociationTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// ARN of the Web ACL to associate the Rule Group with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("webAclArn", required: true)]
        public Input<string> WebAclArn { get; set; } = null!;

        public WebAclRuleGroupAssociationArgs()
        {
        }
        public static new WebAclRuleGroupAssociationArgs Empty => new WebAclRuleGroupAssociationArgs();
    }

    public sealed class WebAclRuleGroupAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Managed Rule Group configuration. One of `ruleGroupReference` or `managedRuleGroup` is required. Conflicts with `ruleGroupReference`. See below.
        /// </summary>
        [Input("managedRuleGroup")]
        public Input<Inputs.WebAclRuleGroupAssociationManagedRuleGroupGetArgs>? ManagedRuleGroup { get; set; }

        /// <summary>
        /// Override action for the rule group. Valid values are `none` and `count`. Defaults to `none`. When set to `count`, the actions defined in the rule group rules are overridden to count matches instead of blocking or allowing requests.
        /// </summary>
        [Input("overrideAction")]
        public Input<string>? OverrideAction { get; set; }

        /// <summary>
        /// Priority of the rule within the Web ACL. Rules are evaluated in order of priority, with lower numbers evaluated first.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Custom Rule Group reference configuration. One of `ruleGroupReference` or `managedRuleGroup` is required. Conflicts with `managedRuleGroup`. See below.
        /// </summary>
        [Input("ruleGroupReference")]
        public Input<Inputs.WebAclRuleGroupAssociationRuleGroupReferenceGetArgs>? RuleGroupReference { get; set; }

        /// <summary>
        /// Name of the rule to create in the Web ACL that references the rule group. Must be between 1 and 128 characters.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        [Input("timeouts")]
        public Input<Inputs.WebAclRuleGroupAssociationTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// ARN of the Web ACL to associate the Rule Group with.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("webAclArn")]
        public Input<string>? WebAclArn { get; set; }

        public WebAclRuleGroupAssociationState()
        {
        }
        public static new WebAclRuleGroupAssociationState Empty => new WebAclRuleGroupAssociationState();
    }
}
