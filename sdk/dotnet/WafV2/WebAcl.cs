// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.WafV2
{
    /// <summary>
    /// Creates a WAFv2 Web ACL resource.
    /// 
    /// &gt; **Note** In `fieldToMatch` blocks, _e.g._, in `byteMatchStatement`, the `body` block includes an optional argument `oversizeHandling`. AWS indicates this argument will be required starting February 2023. To avoid configurations breaking when that change happens, treat the `oversizeHandling` argument as **required** as soon as possible.
    /// 
    /// !&gt; **Warning:** If you use the `aws.wafv2.WebAclRuleGroupAssociation` resource to associate rule groups with this Web ACL, you must add `lifecycle { ignoreChanges = [rule] }` to this resource to prevent configuration drift. The association resource modifies the Web ACL's rules outside of this resource's direct management.
    /// 
    /// ## Example Usage
    /// 
    /// This resource is based on `aws.wafv2.RuleGroup`, check the documentation of the `aws.wafv2.RuleGroup` resource to see examples of the various available statements.
    /// 
    /// ### Managed Rule
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.WebAcl("example", new()
    ///     {
    ///         Name = "managed-rule-example",
    ///         Description = "Example of a managed rule.",
    ///         Scope = "REGIONAL",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.WebAclRuleArgs
    ///             {
    ///                 Name = "rule-1",
    ///                 Priority = 1,
    ///                 OverrideAction = new Aws.WafV2.Inputs.WebAclRuleOverrideActionArgs
    ///                 {
    ///                     Count = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.WebAclRuleStatementArgs
    ///                 {
    ///                     ManagedRuleGroupStatement = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementArgs
    ///                     {
    ///                         Name = "AWSManagedRulesCommonRuleSet",
    ///                         VendorName = "AWS",
    ///                         RuleActionOverrides = new[]
    ///                         {
    ///                             new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideArgs
    ///                             {
    ///                                 ActionToUse = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseArgs
    ///                                 {
    ///                                     Count = null,
    ///                                 },
    ///                                 Name = "SizeRestrictions_QUERYSTRING",
    ///                             },
    ///                             new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideArgs
    ///                             {
    ///                                 ActionToUse = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementRuleActionOverrideActionToUseArgs
    ///                                 {
    ///                                     Count = null,
    ///                                 },
    ///                                 Name = "NoUserAgent_HEADER",
    ///                             },
    ///                         },
    ///                         ScopeDownStatement = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementArgs
    ///                         {
    ///                             GeoMatchStatement = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementScopeDownStatementGeoMatchStatementArgs
    ///                             {
    ///                                 CountryCodes = new[]
    ///                                 {
    ///                                     "US",
    ///                                     "NL",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.WebAclRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Tag1", "Value1" },
    ///             { "Tag2", "Value2" },
    ///         },
    ///         TokenDomains = new[]
    ///         {
    ///             "mywebsite.com",
    ///             "myotherwebsite.com",
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Account Creation Fraud Prevention
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var acfp_example = new Aws.WafV2.WebAcl("acfp-example", new()
    ///     {
    ///         Name = "managed-acfp-example",
    ///         Description = "Example of a managed ACFP rule.",
    ///         Scope = "CLOUDFRONT",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.WebAclRuleArgs
    ///             {
    ///                 Name = "acfp-rule-1",
    ///                 Priority = 1,
    ///                 OverrideAction = new Aws.WafV2.Inputs.WebAclRuleOverrideActionArgs
    ///                 {
    ///                     Count = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.WebAclRuleStatementArgs
    ///                 {
    ///                     ManagedRuleGroupStatement = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementArgs
    ///                     {
    ///                         Name = "AWSManagedRulesACFPRuleSet",
    ///                         VendorName = "AWS",
    ///                         ManagedRuleGroupConfigs = new[]
    ///                         {
    ///                             new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigArgs
    ///                             {
    ///                                 AwsManagedRulesAcfpRuleSet = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetArgs
    ///                                 {
    ///                                     CreationPath = "/signin",
    ///                                     RegistrationPagePath = "/register",
    ///                                     RequestInspection = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionArgs
    ///                                     {
    ///                                         EmailField = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionEmailFieldArgs
    ///                                         {
    ///                                             Identifier = "/email",
    ///                                         },
    ///                                         PasswordField = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionPasswordFieldArgs
    ///                                         {
    ///                                             Identifier = "/password",
    ///                                         },
    ///                                         PayloadType = "JSON",
    ///                                         UsernameField = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetRequestInspectionUsernameFieldArgs
    ///                                         {
    ///                                             Identifier = "/username",
    ///                                         },
    ///                                     },
    ///                                     ResponseInspection = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionArgs
    ///                                     {
    ///                                         StatusCode = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAcfpRuleSetResponseInspectionStatusCodeArgs
    ///                                         {
    ///                                             FailureCodes = new[]
    ///                                             {
    ///                                                 403,
    ///                                             },
    ///                                             SuccessCodes = new[]
    ///                                             {
    ///                                                 200,
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.WebAclRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Account Takeover Protection
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var atp_example = new Aws.WafV2.WebAcl("atp-example", new()
    ///     {
    ///         Name = "managed-atp-example",
    ///         Description = "Example of a managed ATP rule.",
    ///         Scope = "CLOUDFRONT",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.WebAclRuleArgs
    ///             {
    ///                 Name = "atp-rule-1",
    ///                 Priority = 1,
    ///                 OverrideAction = new Aws.WafV2.Inputs.WebAclRuleOverrideActionArgs
    ///                 {
    ///                     Count = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.WebAclRuleStatementArgs
    ///                 {
    ///                     ManagedRuleGroupStatement = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementArgs
    ///                     {
    ///                         Name = "AWSManagedRulesATPRuleSet",
    ///                         VendorName = "AWS",
    ///                         ManagedRuleGroupConfigs = new[]
    ///                         {
    ///                             new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigArgs
    ///                             {
    ///                                 AwsManagedRulesAtpRuleSet = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetArgs
    ///                                 {
    ///                                     LoginPath = "/api/1/signin",
    ///                                     RequestInspection = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionArgs
    ///                                     {
    ///                                         PasswordField = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionPasswordFieldArgs
    ///                                         {
    ///                                             Identifier = "/password",
    ///                                         },
    ///                                         PayloadType = "JSON",
    ///                                         UsernameField = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetRequestInspectionUsernameFieldArgs
    ///                                         {
    ///                                             Identifier = "/email",
    ///                                         },
    ///                                     },
    ///                                     ResponseInspection = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionArgs
    ///                                     {
    ///                                         StatusCode = new Aws.WafV2.Inputs.WebAclRuleStatementManagedRuleGroupStatementManagedRuleGroupConfigAwsManagedRulesAtpRuleSetResponseInspectionStatusCodeArgs
    ///                                         {
    ///                                             FailureCodes = new[]
    ///                                             {
    ///                                                 403,
    ///                                             },
    ///                                             SuccessCodes = new[]
    ///                                             {
    ///                                                 200,
    ///                                             },
    ///                                         },
    ///                                     },
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.WebAclRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Rate Based
    /// 
    /// Rate-limit US and NL-based clients to 10,000 requests for every 5 minutes.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.WebAcl("example", new()
    ///     {
    ///         Name = "rate-based-example",
    ///         Description = "Example of a Cloudfront rate based statement.",
    ///         Scope = "CLOUDFRONT",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.WebAclRuleArgs
    ///             {
    ///                 Name = "rule-1",
    ///                 Priority = 1,
    ///                 Action = new Aws.WafV2.Inputs.WebAclRuleActionArgs
    ///                 {
    ///                     Block = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.WebAclRuleStatementArgs
    ///                 {
    ///                     RateBasedStatement = new Aws.WafV2.Inputs.WebAclRuleStatementRateBasedStatementArgs
    ///                     {
    ///                         Limit = 10000,
    ///                         AggregateKeyType = "IP",
    ///                         ScopeDownStatement = new Aws.WafV2.Inputs.WebAclRuleStatementRateBasedStatementScopeDownStatementArgs
    ///                         {
    ///                             GeoMatchStatement = new Aws.WafV2.Inputs.WebAclRuleStatementRateBasedStatementScopeDownStatementGeoMatchStatementArgs
    ///                             {
    ///                                 CountryCodes = new[]
    ///                                 {
    ///                                     "US",
    ///                                     "NL",
    ///                                 },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.WebAclRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Tag1", "Value1" },
    ///             { "Tag2", "Value2" },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Rule Group Reference
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.RuleGroup("example", new()
    ///     {
    ///         Capacity = 10,
    ///         Name = "example-rule-group",
    ///         Scope = "REGIONAL",
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "rule-1",
    ///                 Priority = 1,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Count = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     GeoMatchStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementGeoMatchStatementArgs
    ///                     {
    ///                         CountryCodes = new[]
    ///                         {
    ///                             "NL",
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "rule-to-exclude-a",
    ///                 Priority = 10,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Allow = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     GeoMatchStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementGeoMatchStatementArgs
    ///                     {
    ///                         CountryCodes = new[]
    ///                         {
    ///                             "US",
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///             new Aws.WafV2.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "rule-to-exclude-b",
    ///                 Priority = 15,
    ///                 Action = new Aws.WafV2.Inputs.RuleGroupRuleActionArgs
    ///                 {
    ///                     Allow = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.RuleGroupRuleStatementArgs
    ///                 {
    ///                     GeoMatchStatement = new Aws.WafV2.Inputs.RuleGroupRuleStatementGeoMatchStatementArgs
    ///                     {
    ///                         CountryCodes = new[]
    ///                         {
    ///                             "GB",
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.RuleGroupVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    ///     var test = new Aws.WafV2.WebAcl("test", new()
    ///     {
    ///         Name = "rule-group-example",
    ///         Scope = "REGIONAL",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Block = null,
    ///         },
    ///         Rules = new[]
    ///         {
    ///             new Aws.WafV2.Inputs.WebAclRuleArgs
    ///             {
    ///                 Name = "rule-1",
    ///                 Priority = 1,
    ///                 OverrideAction = new Aws.WafV2.Inputs.WebAclRuleOverrideActionArgs
    ///                 {
    ///                     Count = null,
    ///                 },
    ///                 Statement = new Aws.WafV2.Inputs.WebAclRuleStatementArgs
    ///                 {
    ///                     RuleGroupReferenceStatement = new Aws.WafV2.Inputs.WebAclRuleStatementRuleGroupReferenceStatementArgs
    ///                     {
    ///                         Arn = example.Arn,
    ///                         RuleActionOverrides = new[]
    ///                         {
    ///                             new Aws.WafV2.Inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideArgs
    ///                             {
    ///                                 ActionToUse = new Aws.WafV2.Inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs
    ///                                 {
    ///                                     Count = null,
    ///                                 },
    ///                                 Name = "rule-to-exclude-b",
    ///                             },
    ///                             new Aws.WafV2.Inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideArgs
    ///                             {
    ///                                 ActionToUse = new Aws.WafV2.Inputs.WebAclRuleStatementRuleGroupReferenceStatementRuleActionOverrideActionToUseArgs
    ///                                 {
    ///                                     Count = null,
    ///                                 },
    ///                                 Name = "rule-to-exclude-a",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 VisibilityConfig = new Aws.WafV2.Inputs.WebAclRuleVisibilityConfigArgs
    ///                 {
    ///                     CloudwatchMetricsEnabled = false,
    ///                     MetricName = "friendly-rule-metric-name",
    ///                     SampledRequestsEnabled = false,
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Tag1", "Value1" },
    ///             { "Tag2", "Value2" },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Large Request Body Inspections for Regional Resources
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WafV2.WebAcl("example", new()
    ///     {
    ///         Name = "large-request-body-example",
    ///         Scope = "REGIONAL",
    ///         DefaultAction = new Aws.WafV2.Inputs.WebAclDefaultActionArgs
    ///         {
    ///             Allow = null,
    ///         },
    ///         AssociationConfig = new Aws.WafV2.Inputs.WebAclAssociationConfigArgs
    ///         {
    ///             RequestBodies = new[]
    ///             {
    ///                 new Aws.WafV2.Inputs.WebAclAssociationConfigRequestBodyArgs
    ///                 {
    ///                     ApiGateway = new Aws.WafV2.Inputs.WebAclAssociationConfigRequestBodyApiGatewayArgs
    ///                     {
    ///                         DefaultSizeInspectionLimit = "KB_64",
    ///                     },
    ///                     AppRunnerService = new Aws.WafV2.Inputs.WebAclAssociationConfigRequestBodyAppRunnerServiceArgs
    ///                     {
    ///                         DefaultSizeInspectionLimit = "KB_64",
    ///                     },
    ///                     CognitoUserPool = new Aws.WafV2.Inputs.WebAclAssociationConfigRequestBodyCognitoUserPoolArgs
    ///                     {
    ///                         DefaultSizeInspectionLimit = "KB_64",
    ///                     },
    ///                     VerifiedAccessInstance = new Aws.WafV2.Inputs.WebAclAssociationConfigRequestBodyVerifiedAccessInstanceArgs
    ///                     {
    ///                         DefaultSizeInspectionLimit = "KB_64",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         VisibilityConfig = new Aws.WafV2.Inputs.WebAclVisibilityConfigArgs
    ///         {
    ///             CloudwatchMetricsEnabled = false,
    ///             MetricName = "friendly-metric-name",
    ///             SampledRequestsEnabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import WAFv2 Web ACLs using `ID/Name/Scope`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:wafv2/webAcl:WebAcl example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc/example/REGIONAL
    /// ```
    /// </summary>
    [AwsResourceType("aws:wafv2/webAcl:WebAcl")]
    public partial class WebAcl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The URL to use in SDK integrations with managed rule groups.
        /// </summary>
        [Output("applicationIntegrationUrl")]
        public Output<string> ApplicationIntegrationUrl { get; private set; } = null!;

        /// <summary>
        /// The ARN of the WAF WebACL.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies custom configurations for the associations between the web ACL and protected resources. See `associationConfig` below for details.
        /// </summary>
        [Output("associationConfig")]
        public Output<Outputs.WebAclAssociationConfig?> AssociationConfig { get; private set; } = null!;

        /// <summary>
        /// Web ACL capacity units (WCUs) currently being used by this web ACL.
        /// </summary>
        [Output("capacity")]
        public Output<int> Capacity { get; private set; } = null!;

        /// <summary>
        /// Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captchaConfig` below for details.
        /// </summary>
        [Output("captchaConfig")]
        public Output<Outputs.WebAclCaptchaConfig?> CaptchaConfig { get; private set; } = null!;

        /// <summary>
        /// Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challengeConfig` below for details.
        /// </summary>
        [Output("challengeConfig")]
        public Output<Outputs.WebAclChallengeConfig?> ChallengeConfig { get; private set; } = null!;

        /// <summary>
        /// Defines custom response bodies that can be referenced by `customResponse` actions. See `customResponseBody` below for details.
        /// </summary>
        [Output("customResponseBodies")]
        public Output<ImmutableArray<Outputs.WebAclCustomResponseBody>> CustomResponseBodies { get; private set; } = null!;

        /// <summary>
        /// Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `dataProtectionConfig` below for details.
        /// </summary>
        [Output("dataProtectionConfig")]
        public Output<Outputs.WebAclDataProtectionConfig?> DataProtectionConfig { get; private set; } = null!;

        /// <summary>
        /// Action to perform if none of the `rules` contained in the WebACL match. See `defaultAction` below for details.
        /// </summary>
        [Output("defaultAction")]
        public Output<Outputs.WebAclDefaultAction> DefaultAction { get; private set; } = null!;

        /// <summary>
        /// Friendly description of the WebACL.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("lockToken")]
        public Output<string> LockToken { get; private set; } = null!;

        /// <summary>
        /// Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `ruleJson` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        /// </summary>
        [Output("ruleJson")]
        public Output<string?> RuleJson { get; private set; } = null!;

        /// <summary>
        /// Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.WebAclRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        /// </summary>
        [Output("scope")]
        public Output<string> Scope { get; private set; } = null!;

        /// <summary>
        /// Map of key-value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        /// </summary>
        [Output("tokenDomains")]
        public Output<ImmutableArray<string>> TokenDomains { get; private set; } = null!;

        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibilityConfig` below for details.
        /// </summary>
        [Output("visibilityConfig")]
        public Output<Outputs.WebAclVisibilityConfig> VisibilityConfig { get; private set; } = null!;


        /// <summary>
        /// Create a WebAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAcl(string name, WebAclArgs args, CustomResourceOptions? options = null)
            : base("aws:wafv2/webAcl:WebAcl", name, args ?? new WebAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAcl(string name, Input<string> id, WebAclState? state = null, CustomResourceOptions? options = null)
            : base("aws:wafv2/webAcl:WebAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAcl Get(string name, Input<string> id, WebAclState? state = null, CustomResourceOptions? options = null)
        {
            return new WebAcl(name, id, state, options);
        }
    }

    public sealed class WebAclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies custom configurations for the associations between the web ACL and protected resources. See `associationConfig` below for details.
        /// </summary>
        [Input("associationConfig")]
        public Input<Inputs.WebAclAssociationConfigArgs>? AssociationConfig { get; set; }

        /// <summary>
        /// Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captchaConfig` below for details.
        /// </summary>
        [Input("captchaConfig")]
        public Input<Inputs.WebAclCaptchaConfigArgs>? CaptchaConfig { get; set; }

        /// <summary>
        /// Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challengeConfig` below for details.
        /// </summary>
        [Input("challengeConfig")]
        public Input<Inputs.WebAclChallengeConfigArgs>? ChallengeConfig { get; set; }

        [Input("customResponseBodies")]
        private InputList<Inputs.WebAclCustomResponseBodyArgs>? _customResponseBodies;

        /// <summary>
        /// Defines custom response bodies that can be referenced by `customResponse` actions. See `customResponseBody` below for details.
        /// </summary>
        public InputList<Inputs.WebAclCustomResponseBodyArgs> CustomResponseBodies
        {
            get => _customResponseBodies ?? (_customResponseBodies = new InputList<Inputs.WebAclCustomResponseBodyArgs>());
            set => _customResponseBodies = value;
        }

        /// <summary>
        /// Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `dataProtectionConfig` below for details.
        /// </summary>
        [Input("dataProtectionConfig")]
        public Input<Inputs.WebAclDataProtectionConfigArgs>? DataProtectionConfig { get; set; }

        /// <summary>
        /// Action to perform if none of the `rules` contained in the WebACL match. See `defaultAction` below for details.
        /// </summary>
        [Input("defaultAction", required: true)]
        public Input<Inputs.WebAclDefaultActionArgs> DefaultAction { get; set; } = null!;

        /// <summary>
        /// Friendly description of the WebACL.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `ruleJson` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        /// </summary>
        [Input("ruleJson")]
        public Input<string>? RuleJson { get; set; }

        [Input("rules")]
        private InputList<Inputs.WebAclRuleArgs>? _rules;

        /// <summary>
        /// Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        /// </summary>
        public InputList<Inputs.WebAclRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WebAclRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of key-value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tokenDomains")]
        private InputList<string>? _tokenDomains;

        /// <summary>
        /// Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        /// </summary>
        public InputList<string> TokenDomains
        {
            get => _tokenDomains ?? (_tokenDomains = new InputList<string>());
            set => _tokenDomains = value;
        }

        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibilityConfig` below for details.
        /// </summary>
        [Input("visibilityConfig", required: true)]
        public Input<Inputs.WebAclVisibilityConfigArgs> VisibilityConfig { get; set; } = null!;

        public WebAclArgs()
        {
        }
        public static new WebAclArgs Empty => new WebAclArgs();
    }

    public sealed class WebAclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The URL to use in SDK integrations with managed rule groups.
        /// </summary>
        [Input("applicationIntegrationUrl")]
        public Input<string>? ApplicationIntegrationUrl { get; set; }

        /// <summary>
        /// The ARN of the WAF WebACL.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Specifies custom configurations for the associations between the web ACL and protected resources. See `associationConfig` below for details.
        /// </summary>
        [Input("associationConfig")]
        public Input<Inputs.WebAclAssociationConfigGetArgs>? AssociationConfig { get; set; }

        /// <summary>
        /// Web ACL capacity units (WCUs) currently being used by this web ACL.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// Specifies how AWS WAF should handle CAPTCHA evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `captchaConfig` below for details.
        /// </summary>
        [Input("captchaConfig")]
        public Input<Inputs.WebAclCaptchaConfigGetArgs>? CaptchaConfig { get; set; }

        /// <summary>
        /// Specifies how AWS WAF should handle Challenge evaluations on the ACL level (used by [AWS Bot Control](https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html)). See `challengeConfig` below for details.
        /// </summary>
        [Input("challengeConfig")]
        public Input<Inputs.WebAclChallengeConfigGetArgs>? ChallengeConfig { get; set; }

        [Input("customResponseBodies")]
        private InputList<Inputs.WebAclCustomResponseBodyGetArgs>? _customResponseBodies;

        /// <summary>
        /// Defines custom response bodies that can be referenced by `customResponse` actions. See `customResponseBody` below for details.
        /// </summary>
        public InputList<Inputs.WebAclCustomResponseBodyGetArgs> CustomResponseBodies
        {
            get => _customResponseBodies ?? (_customResponseBodies = new InputList<Inputs.WebAclCustomResponseBodyGetArgs>());
            set => _customResponseBodies = value;
        }

        /// <summary>
        /// Specifies data protection to apply to the web request data for the web ACL. This is a web ACL level data protection option. See `dataProtectionConfig` below for details.
        /// </summary>
        [Input("dataProtectionConfig")]
        public Input<Inputs.WebAclDataProtectionConfigGetArgs>? DataProtectionConfig { get; set; }

        /// <summary>
        /// Action to perform if none of the `rules` contained in the WebACL match. See `defaultAction` below for details.
        /// </summary>
        [Input("defaultAction")]
        public Input<Inputs.WebAclDefaultActionGetArgs>? DefaultAction { get; set; }

        /// <summary>
        /// Friendly description of the WebACL.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("lockToken")]
        public Input<string>? LockToken { get; set; }

        /// <summary>
        /// Friendly name of the WebACL. If omitted, the provider will assign a random, unique name. Conflicts with `namePrefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Raw JSON string to allow more than three nested statements. Conflicts with `rule` attribute. This is for advanced use cases where more than 3 levels of nested statements are required. **There is no drift detection at this time**. If you use this attribute instead of `rule`, you will be foregoing drift detection. Additionally, importing an existing web ACL into a configuration with `ruleJson` set will result in a one time in-place update as the remote rule configuration is initially written to the `rule` attribute. See the AWS [documentation](https://docs.aws.amazon.com/waf/latest/APIReference/API_CreateWebACL.html) for the JSON structure.
        /// </summary>
        [Input("ruleJson")]
        public Input<string>? RuleJson { get; set; }

        [Input("rules")]
        private InputList<Inputs.WebAclRuleGetArgs>? _rules;

        /// <summary>
        /// Rule blocks used to identify the web requests that you want to `allow`, `block`, or `count`. See `rule` below for details.
        /// </summary>
        public InputList<Inputs.WebAclRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.WebAclRuleGetArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// Specifies whether this is for an AWS CloudFront distribution or for a regional application. Valid values are `CLOUDFRONT` or `REGIONAL`. To work with CloudFront, you must also specify the region `us-east-1` (N. Virginia) on the AWS provider.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of key-value pairs to associate with the resource. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("tokenDomains")]
        private InputList<string>? _tokenDomains;

        /// <summary>
        /// Specifies the domains that AWS WAF should accept in a web request token. This enables the use of tokens across multiple protected websites. When AWS WAF provides a token, it uses the domain of the AWS resource that the web ACL is protecting. If you don't specify a list of token domains, AWS WAF accepts tokens only for the domain of the protected resource. With a token domain list, AWS WAF accepts the resource's host domain plus all domains in the token domain list, including their prefixed subdomains.
        /// </summary>
        public InputList<string> TokenDomains
        {
            get => _tokenDomains ?? (_tokenDomains = new InputList<string>());
            set => _tokenDomains = value;
        }

        /// <summary>
        /// Defines and enables Amazon CloudWatch metrics and web request sample collection. See `visibilityConfig` below for details.
        /// </summary>
        [Input("visibilityConfig")]
        public Input<Inputs.WebAclVisibilityConfigGetArgs>? VisibilityConfig { get; set; }

        public WebAclState()
        {
        }
        public static new WebAclState Empty => new WebAclState();
    }
}
