// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Kms
{
    /// <summary>
    /// The KMS ciphertext resource allows you to encrypt plaintext into ciphertext
    /// by using an AWS KMS customer master key. The value returned by this resource
    /// is stable across every apply. For a changing ciphertext value each apply, see
    /// the `aws.kms.Ciphertext` data source.
    /// 
    /// &gt; **Note:** All arguments including the plaintext be stored in the raw state as plain-text.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var oauthConfig = new Aws.Kms.Key("oauthConfig", new Aws.Kms.KeyArgs
    ///         {
    ///             Description = "oauth config",
    ///             IsEnabled = true,
    ///         });
    ///         var oauth = new Aws.Kms.Ciphertext("oauth", new Aws.Kms.CiphertextArgs
    ///         {
    ///             KeyId = oauthConfig.KeyId,
    ///             Plaintext = @"{
    ///   ""client_id"": ""e587dbae22222f55da22"",
    ///   ""client_secret"": ""8289575d00000ace55e1815ec13673955721b8a5""
    /// }
    /// 
    /// ",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Ciphertext : Pulumi.CustomResource
    {
        /// <summary>
        /// Base64 encoded ciphertext
        /// </summary>
        [Output("ciphertextBlob")]
        public Output<string> CiphertextBlob { get; private set; } = null!;

        /// <summary>
        /// An optional mapping that makes up the encryption context.
        /// </summary>
        [Output("context")]
        public Output<ImmutableDictionary<string, string>?> Context { get; private set; } = null!;

        /// <summary>
        /// Globally unique key ID for the customer master key.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
        /// </summary>
        [Output("plaintext")]
        public Output<string> Plaintext { get; private set; } = null!;


        /// <summary>
        /// Create a Ciphertext resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ciphertext(string name, CiphertextArgs args, CustomResourceOptions? options = null)
            : base("aws:kms/ciphertext:Ciphertext", name, args ?? new CiphertextArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ciphertext(string name, Input<string> id, CiphertextState? state = null, CustomResourceOptions? options = null)
            : base("aws:kms/ciphertext:Ciphertext", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ciphertext resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ciphertext Get(string name, Input<string> id, CiphertextState? state = null, CustomResourceOptions? options = null)
        {
            return new Ciphertext(name, id, state, options);
        }
    }

    public sealed class CiphertextArgs : Pulumi.ResourceArgs
    {
        [Input("context")]
        private InputMap<string>? _context;

        /// <summary>
        /// An optional mapping that makes up the encryption context.
        /// </summary>
        public InputMap<string> Context
        {
            get => _context ?? (_context = new InputMap<string>());
            set => _context = value;
        }

        /// <summary>
        /// Globally unique key ID for the customer master key.
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
        /// </summary>
        [Input("plaintext", required: true)]
        public Input<string> Plaintext { get; set; } = null!;

        public CiphertextArgs()
        {
        }
    }

    public sealed class CiphertextState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Base64 encoded ciphertext
        /// </summary>
        [Input("ciphertextBlob")]
        public Input<string>? CiphertextBlob { get; set; }

        [Input("context")]
        private InputMap<string>? _context;

        /// <summary>
        /// An optional mapping that makes up the encryption context.
        /// </summary>
        public InputMap<string> Context
        {
            get => _context ?? (_context = new InputMap<string>());
            set => _context = value;
        }

        /// <summary>
        /// Globally unique key ID for the customer master key.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// Data to be encrypted. Note that this may show up in logs, and it will be stored in the state file.
        /// </summary>
        [Input("plaintext")]
        public Input<string>? Plaintext { get; set; }

        public CiphertextState()
        {
        }
    }
}
