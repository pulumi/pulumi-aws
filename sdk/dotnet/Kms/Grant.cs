// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Kms
{
    /// <summary>
    /// Provides a resource-based access control mechanism for a KMS customer master key.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var key = new Aws.Kms.Key("key", new Aws.Kms.KeyArgs
    ///         {
    ///         });
    ///         var role = new Aws.Iam.Role("role", new Aws.Iam.RoleArgs
    ///         {
    ///             AssumeRolePolicy = @"{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Action"": ""sts:AssumeRole"",
    ///       ""Principal"": {
    ///         ""Service"": ""lambda.amazonaws.com""
    ///       },
    ///       ""Effect"": ""Allow"",
    ///       ""Sid"": """"
    ///     }
    ///   ]
    /// }
    /// ",
    ///         });
    ///         var grant = new Aws.Kms.Grant("grant", new Aws.Kms.GrantArgs
    ///         {
    ///             KeyId = key.KeyId,
    ///             GranteePrincipal = role.Arn,
    ///             Operations = 
    ///             {
    ///                 "Encrypt",
    ///                 "Decrypt",
    ///                 "GenerateDataKey",
    ///             },
    ///             Constraints = 
    ///             {
    ///                 new Aws.Kms.Inputs.GrantConstraintArgs
    ///                 {
    ///                     EncryptionContextEquals = 
    ///                     {
    ///                         { "Department", "Finance" },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// KMS Grants can be imported using the Key ID and Grant ID separated by a colon (`:`), e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:kms/grant:Grant test 1234abcd-12ab-34cd-56ef-1234567890ababcde1237f76e4ba7987489ac329fbfba6ad343d6f7075dbd1ef191f0120514
    /// ```
    /// </summary>
    public partial class Grant : Pulumi.CustomResource
    {
        /// <summary>
        /// A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see [Encryption Context](http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html).
        /// </summary>
        [Output("constraints")]
        public Output<ImmutableArray<Outputs.GrantConstraint>> Constraints { get; private set; } = null!;

        /// <summary>
        /// A list of grant tokens to be used when creating the grant. See [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token) for more information about grant tokens.
        /// </summary>
        [Output("grantCreationTokens")]
        public Output<ImmutableArray<string>> GrantCreationTokens { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the grant.
        /// </summary>
        [Output("grantId")]
        public Output<string> GrantId { get; private set; } = null!;

        /// <summary>
        /// The grant token for the created grant. For more information, see [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token).
        /// </summary>
        [Output("grantToken")]
        public Output<string> GrantToken { get; private set; } = null!;

        /// <summary>
        /// The principal that is given permission to perform the operations that the grant permits in ARN format. Note that due to eventual consistency issues around IAM principals, the state may not always be refreshed to reflect what is true in AWS.
        /// </summary>
        [Output("granteePrincipal")]
        public Output<string> GranteePrincipal { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// A friendly name for identifying the grant.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of operations that the grant permits. The permitted values are: `Decrypt, Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext, ReEncryptFrom, ReEncryptTo, CreateGrant, RetireGrant, DescribeKey`
        /// </summary>
        [Output("operations")]
        public Output<ImmutableArray<string>> Operations { get; private set; } = null!;

        /// <summary>
        /// -(Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
        /// See [RetireGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html) for more information.
        /// </summary>
        [Output("retireOnDelete")]
        public Output<bool?> RetireOnDelete { get; private set; } = null!;

        /// <summary>
        /// The principal that is given permission to retire the grant by using RetireGrant operation in ARN format. Note that due to eventual consistency issues around IAM principals, the state may not always be refreshed to reflect what is true in AWS.
        /// </summary>
        [Output("retiringPrincipal")]
        public Output<string?> RetiringPrincipal { get; private set; } = null!;


        /// <summary>
        /// Create a Grant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Grant(string name, GrantArgs args, CustomResourceOptions? options = null)
            : base("aws:kms/grant:Grant", name, args ?? new GrantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Grant(string name, Input<string> id, GrantState? state = null, CustomResourceOptions? options = null)
            : base("aws:kms/grant:Grant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Grant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Grant Get(string name, Input<string> id, GrantState? state = null, CustomResourceOptions? options = null)
        {
            return new Grant(name, id, state, options);
        }
    }

    public sealed class GrantArgs : Pulumi.ResourceArgs
    {
        [Input("constraints")]
        private InputList<Inputs.GrantConstraintArgs>? _constraints;

        /// <summary>
        /// A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see [Encryption Context](http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html).
        /// </summary>
        public InputList<Inputs.GrantConstraintArgs> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<Inputs.GrantConstraintArgs>());
            set => _constraints = value;
        }

        [Input("grantCreationTokens")]
        private InputList<string>? _grantCreationTokens;

        /// <summary>
        /// A list of grant tokens to be used when creating the grant. See [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token) for more information about grant tokens.
        /// </summary>
        public InputList<string> GrantCreationTokens
        {
            get => _grantCreationTokens ?? (_grantCreationTokens = new InputList<string>());
            set => _grantCreationTokens = value;
        }

        /// <summary>
        /// The principal that is given permission to perform the operations that the grant permits in ARN format. Note that due to eventual consistency issues around IAM principals, the state may not always be refreshed to reflect what is true in AWS.
        /// </summary>
        [Input("granteePrincipal", required: true)]
        public Input<string> GranteePrincipal { get; set; } = null!;

        /// <summary>
        /// The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
        /// </summary>
        [Input("keyId", required: true)]
        public Input<string> KeyId { get; set; } = null!;

        /// <summary>
        /// A friendly name for identifying the grant.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operations", required: true)]
        private InputList<string>? _operations;

        /// <summary>
        /// A list of operations that the grant permits. The permitted values are: `Decrypt, Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext, ReEncryptFrom, ReEncryptTo, CreateGrant, RetireGrant, DescribeKey`
        /// </summary>
        public InputList<string> Operations
        {
            get => _operations ?? (_operations = new InputList<string>());
            set => _operations = value;
        }

        /// <summary>
        /// -(Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
        /// See [RetireGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html) for more information.
        /// </summary>
        [Input("retireOnDelete")]
        public Input<bool>? RetireOnDelete { get; set; }

        /// <summary>
        /// The principal that is given permission to retire the grant by using RetireGrant operation in ARN format. Note that due to eventual consistency issues around IAM principals, the state may not always be refreshed to reflect what is true in AWS.
        /// </summary>
        [Input("retiringPrincipal")]
        public Input<string>? RetiringPrincipal { get; set; }

        public GrantArgs()
        {
        }
    }

    public sealed class GrantState : Pulumi.ResourceArgs
    {
        [Input("constraints")]
        private InputList<Inputs.GrantConstraintGetArgs>? _constraints;

        /// <summary>
        /// A structure that you can use to allow certain operations in the grant only when the desired encryption context is present. For more information about encryption context, see [Encryption Context](http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html).
        /// </summary>
        public InputList<Inputs.GrantConstraintGetArgs> Constraints
        {
            get => _constraints ?? (_constraints = new InputList<Inputs.GrantConstraintGetArgs>());
            set => _constraints = value;
        }

        [Input("grantCreationTokens")]
        private InputList<string>? _grantCreationTokens;

        /// <summary>
        /// A list of grant tokens to be used when creating the grant. See [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token) for more information about grant tokens.
        /// </summary>
        public InputList<string> GrantCreationTokens
        {
            get => _grantCreationTokens ?? (_grantCreationTokens = new InputList<string>());
            set => _grantCreationTokens = value;
        }

        /// <summary>
        /// The unique identifier for the grant.
        /// </summary>
        [Input("grantId")]
        public Input<string>? GrantId { get; set; }

        /// <summary>
        /// The grant token for the created grant. For more information, see [Grant Tokens](http://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#grant_token).
        /// </summary>
        [Input("grantToken")]
        public Input<string>? GrantToken { get; set; }

        /// <summary>
        /// The principal that is given permission to perform the operations that the grant permits in ARN format. Note that due to eventual consistency issues around IAM principals, the state may not always be refreshed to reflect what is true in AWS.
        /// </summary>
        [Input("granteePrincipal")]
        public Input<string>? GranteePrincipal { get; set; }

        /// <summary>
        /// The unique identifier for the customer master key (CMK) that the grant applies to. Specify the key ID or the Amazon Resource Name (ARN) of the CMK. To specify a CMK in a different AWS account, you must use the key ARN.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// A friendly name for identifying the grant.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("operations")]
        private InputList<string>? _operations;

        /// <summary>
        /// A list of operations that the grant permits. The permitted values are: `Decrypt, Encrypt, GenerateDataKey, GenerateDataKeyWithoutPlaintext, ReEncryptFrom, ReEncryptTo, CreateGrant, RetireGrant, DescribeKey`
        /// </summary>
        public InputList<string> Operations
        {
            get => _operations ?? (_operations = new InputList<string>());
            set => _operations = value;
        }

        /// <summary>
        /// -(Defaults to false, Forces new resources) If set to false (the default) the grants will be revoked upon deletion, and if set to true the grants will try to be retired upon deletion. Note that retiring grants requires special permissions, hence why we default to revoking grants.
        /// See [RetireGrant](https://docs.aws.amazon.com/kms/latest/APIReference/API_RetireGrant.html) for more information.
        /// </summary>
        [Input("retireOnDelete")]
        public Input<bool>? RetireOnDelete { get; set; }

        /// <summary>
        /// The principal that is given permission to retire the grant by using RetireGrant operation in ARN format. Note that due to eventual consistency issues around IAM principals, the state may not always be refreshed to reflect what is true in AWS.
        /// </summary>
        [Input("retiringPrincipal")]
        public Input<string>? RetiringPrincipal { get; set; }

        public GrantState()
        {
        }
    }
}
