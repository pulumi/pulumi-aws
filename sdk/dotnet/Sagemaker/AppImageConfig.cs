// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker
{
    /// <summary>
    /// Provides a SageMaker AI App Image Config resource.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import SageMaker AI App Image Configs using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:sagemaker/appImageConfig:AppImageConfig example example
    /// ```
    /// </summary>
    [AwsResourceType("aws:sagemaker/appImageConfig:AppImageConfig")]
    public partial class AppImageConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the App Image Config.
        /// </summary>
        [Output("appImageConfigName")]
        public Output<string> AppImageConfigName { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this App Image Config.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
        /// </summary>
        [Output("codeEditorAppImageConfig")]
        public Output<Outputs.AppImageConfigCodeEditorAppImageConfig?> CodeEditorAppImageConfig { get; private set; } = null!;

        /// <summary>
        /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
        /// </summary>
        [Output("jupyterLabImageConfig")]
        public Output<Outputs.AppImageConfigJupyterLabImageConfig?> JupyterLabImageConfig { get; private set; } = null!;

        /// <summary>
        /// The configuration for the file system and kernels in a SageMaker AI image running as a KernelGateway app. See Kernel Gateway Image Config details below.
        /// </summary>
        [Output("kernelGatewayImageConfig")]
        public Output<Outputs.AppImageConfigKernelGatewayImageConfig?> KernelGatewayImageConfig { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a AppImageConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AppImageConfig(string name, AppImageConfigArgs args, CustomResourceOptions? options = null)
            : base("aws:sagemaker/appImageConfig:AppImageConfig", name, args ?? new AppImageConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AppImageConfig(string name, Input<string> id, AppImageConfigState? state = null, CustomResourceOptions? options = null)
            : base("aws:sagemaker/appImageConfig:AppImageConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AppImageConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AppImageConfig Get(string name, Input<string> id, AppImageConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AppImageConfig(name, id, state, options);
        }
    }

    public sealed class AppImageConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Image Config.
        /// </summary>
        [Input("appImageConfigName", required: true)]
        public Input<string> AppImageConfigName { get; set; } = null!;

        /// <summary>
        /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
        /// </summary>
        [Input("codeEditorAppImageConfig")]
        public Input<Inputs.AppImageConfigCodeEditorAppImageConfigArgs>? CodeEditorAppImageConfig { get; set; }

        /// <summary>
        /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
        /// </summary>
        [Input("jupyterLabImageConfig")]
        public Input<Inputs.AppImageConfigJupyterLabImageConfigArgs>? JupyterLabImageConfig { get; set; }

        /// <summary>
        /// The configuration for the file system and kernels in a SageMaker AI image running as a KernelGateway app. See Kernel Gateway Image Config details below.
        /// </summary>
        [Input("kernelGatewayImageConfig")]
        public Input<Inputs.AppImageConfigKernelGatewayImageConfigArgs>? KernelGatewayImageConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public AppImageConfigArgs()
        {
        }
        public static new AppImageConfigArgs Empty => new AppImageConfigArgs();
    }

    public sealed class AppImageConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the App Image Config.
        /// </summary>
        [Input("appImageConfigName")]
        public Input<string>? AppImageConfigName { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this App Image Config.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor. See Code Editor App Image Config details below.
        /// </summary>
        [Input("codeEditorAppImageConfig")]
        public Input<Inputs.AppImageConfigCodeEditorAppImageConfigGetArgs>? CodeEditorAppImageConfig { get; set; }

        /// <summary>
        /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab. See Jupyter Lab Image Config details below.
        /// </summary>
        [Input("jupyterLabImageConfig")]
        public Input<Inputs.AppImageConfigJupyterLabImageConfigGetArgs>? JupyterLabImageConfig { get; set; }

        /// <summary>
        /// The configuration for the file system and kernels in a SageMaker AI image running as a KernelGateway app. See Kernel Gateway Image Config details below.
        /// </summary>
        [Input("kernelGatewayImageConfig")]
        public Input<Inputs.AppImageConfigKernelGatewayImageConfigGetArgs>? KernelGatewayImageConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public AppImageConfigState()
        {
        }
        public static new AppImageConfigState Empty => new AppImageConfigState();
    }
}
