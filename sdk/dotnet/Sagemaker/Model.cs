// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker
{
    /// <summary>
    /// Provides a SageMaker model resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/sagemaker_model.html.markdown.
    /// </summary>
    public partial class Model : Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this model.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies containers in the inference pipeline. If not specified, the `primary_container` argument is required. Fields are documented below.
        /// </summary>
        [Output("containers")]
        public Output<ImmutableArray<Outputs.ModelContainers>> Containers { get; private set; } = null!;

        /// <summary>
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        /// </summary>
        [Output("enableNetworkIsolation")]
        public Output<bool?> EnableNetworkIsolation { get; private set; } = null!;

        /// <summary>
        /// A role that SageMaker can assume to access model artifacts and docker images for deployment.
        /// </summary>
        [Output("executionRoleArn")]
        public Output<string> ExecutionRoleArn { get; private set; } = null!;

        /// <summary>
        /// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
        /// </summary>
        [Output("primaryContainer")]
        public Output<Outputs.ModelPrimaryContainer?> PrimaryContainer { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.ModelVpcConfig?> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Model resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Model(string name, ModelArgs args, CustomResourceOptions? options = null)
            : base("aws:sagemaker/model:Model", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Model(string name, Input<string> id, ModelState? state = null, CustomResourceOptions? options = null)
            : base("aws:sagemaker/model:Model", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Model resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Model Get(string name, Input<string> id, ModelState? state = null, CustomResourceOptions? options = null)
        {
            return new Model(name, id, state, options);
        }
    }

    public sealed class ModelArgs : Pulumi.ResourceArgs
    {
        [Input("containers")]
        private InputList<Inputs.ModelContainersArgs>? _containers;

        /// <summary>
        /// Specifies containers in the inference pipeline. If not specified, the `primary_container` argument is required. Fields are documented below.
        /// </summary>
        public InputList<Inputs.ModelContainersArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ModelContainersArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        /// </summary>
        [Input("enableNetworkIsolation")]
        public Input<bool>? EnableNetworkIsolation { get; set; }

        /// <summary>
        /// A role that SageMaker can assume to access model artifacts and docker images for deployment.
        /// </summary>
        [Input("executionRoleArn", required: true)]
        public Input<string> ExecutionRoleArn { get; set; } = null!;

        /// <summary>
        /// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
        /// </summary>
        [Input("primaryContainer")]
        public Input<Inputs.ModelPrimaryContainerArgs>? PrimaryContainer { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.ModelVpcConfigArgs>? VpcConfig { get; set; }

        public ModelArgs()
        {
        }
    }

    public sealed class ModelState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this model.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("containers")]
        private InputList<Inputs.ModelContainersGetArgs>? _containers;

        /// <summary>
        /// Specifies containers in the inference pipeline. If not specified, the `primary_container` argument is required. Fields are documented below.
        /// </summary>
        public InputList<Inputs.ModelContainersGetArgs> Containers
        {
            get => _containers ?? (_containers = new InputList<Inputs.ModelContainersGetArgs>());
            set => _containers = value;
        }

        /// <summary>
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        /// </summary>
        [Input("enableNetworkIsolation")]
        public Input<bool>? EnableNetworkIsolation { get; set; }

        /// <summary>
        /// A role that SageMaker can assume to access model artifacts and docker images for deployment.
        /// </summary>
        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        /// <summary>
        /// The name of the model (must be unique). If omitted, this provider will assign a random, unique name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The primary docker image containing inference code that is used when the model is deployed for predictions.  If not specified, the `container` argument is required. Fields are documented below.
        /// </summary>
        [Input("primaryContainer")]
        public Input<Inputs.ModelPrimaryContainerGetArgs>? PrimaryContainer { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Specifies the VPC that you want your model to connect to. VpcConfig is used in hosting services and in batch transform.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.ModelVpcConfigGetArgs>? VpcConfig { get; set; }

        public ModelState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ModelContainersArgs : Pulumi.ResourceArgs
    {
        [Input("containerHostname")]
        public Input<string>? ContainerHostname { get; set; }

        [Input("environment")]
        private InputMap<object>? _environment;
        public InputMap<object> Environment
        {
            get => _environment ?? (_environment = new InputMap<object>());
            set => _environment = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("modelDataUrl")]
        public Input<string>? ModelDataUrl { get; set; }

        public ModelContainersArgs()
        {
        }
    }

    public sealed class ModelContainersGetArgs : Pulumi.ResourceArgs
    {
        [Input("containerHostname")]
        public Input<string>? ContainerHostname { get; set; }

        [Input("environment")]
        private InputMap<object>? _environment;
        public InputMap<object> Environment
        {
            get => _environment ?? (_environment = new InputMap<object>());
            set => _environment = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("modelDataUrl")]
        public Input<string>? ModelDataUrl { get; set; }

        public ModelContainersGetArgs()
        {
        }
    }

    public sealed class ModelPrimaryContainerArgs : Pulumi.ResourceArgs
    {
        [Input("containerHostname")]
        public Input<string>? ContainerHostname { get; set; }

        [Input("environment")]
        private InputMap<object>? _environment;
        public InputMap<object> Environment
        {
            get => _environment ?? (_environment = new InputMap<object>());
            set => _environment = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("modelDataUrl")]
        public Input<string>? ModelDataUrl { get; set; }

        public ModelPrimaryContainerArgs()
        {
        }
    }

    public sealed class ModelPrimaryContainerGetArgs : Pulumi.ResourceArgs
    {
        [Input("containerHostname")]
        public Input<string>? ContainerHostname { get; set; }

        [Input("environment")]
        private InputMap<object>? _environment;
        public InputMap<object> Environment
        {
            get => _environment ?? (_environment = new InputMap<object>());
            set => _environment = value;
        }

        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        [Input("modelDataUrl")]
        public Input<string>? ModelDataUrl { get; set; }

        public ModelPrimaryContainerGetArgs()
        {
        }
    }

    public sealed class ModelVpcConfigArgs : Pulumi.ResourceArgs
    {
        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnets", required: true)]
        private InputList<string>? _subnets;
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        public ModelVpcConfigArgs()
        {
        }
    }

    public sealed class ModelVpcConfigGetArgs : Pulumi.ResourceArgs
    {
        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnets", required: true)]
        private InputList<string>? _subnets;
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        public ModelVpcConfigGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ModelContainers
    {
        public readonly string? ContainerHostname;
        public readonly ImmutableDictionary<string, object>? Environment;
        public readonly string Image;
        public readonly string? ModelDataUrl;

        [OutputConstructor]
        private ModelContainers(
            string? containerHostname,
            ImmutableDictionary<string, object>? environment,
            string image,
            string? modelDataUrl)
        {
            ContainerHostname = containerHostname;
            Environment = environment;
            Image = image;
            ModelDataUrl = modelDataUrl;
        }
    }

    [OutputType]
    public sealed class ModelPrimaryContainer
    {
        public readonly string? ContainerHostname;
        public readonly ImmutableDictionary<string, object>? Environment;
        public readonly string Image;
        public readonly string? ModelDataUrl;

        [OutputConstructor]
        private ModelPrimaryContainer(
            string? containerHostname,
            ImmutableDictionary<string, object>? environment,
            string image,
            string? modelDataUrl)
        {
            ContainerHostname = containerHostname;
            Environment = environment;
            Image = image;
            ModelDataUrl = modelDataUrl;
        }
    }

    [OutputType]
    public sealed class ModelVpcConfig
    {
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly ImmutableArray<string> Subnets;

        [OutputConstructor]
        private ModelVpcConfig(
            ImmutableArray<string> securityGroupIds,
            ImmutableArray<string> subnets)
        {
            SecurityGroupIds = securityGroupIds;
            Subnets = subnets;
        }
    }
    }
}
