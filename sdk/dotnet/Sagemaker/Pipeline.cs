// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker
{
    /// <summary>
    /// Provides a SageMaker Pipeline resource.
    /// 
    /// ## Example Usage
    /// ### Basic usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Sagemaker.Pipeline("example", new()
    ///     {
    ///         PipelineName = "example",
    ///         PipelineDisplayName = "example",
    ///         RoleArn = aws_iam_role.Example.Arn,
    ///         PipelineDefinition = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2020-12-01",
    ///             ["Steps"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Name"] = "Test",
    ///                     ["Type"] = "Fail",
    ///                     ["Arguments"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["ErrorMessage"] = "test",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import pipelines using the `pipeline_name`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:sagemaker/pipeline:Pipeline test_pipeline pipeline
    /// ```
    /// </summary>
    [AwsResourceType("aws:sagemaker/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Pipeline.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default. see Parallelism Configuration details below.
        /// </summary>
        [Output("parallelismConfiguration")]
        public Output<Outputs.PipelineParallelismConfiguration?> ParallelismConfiguration { get; private set; } = null!;

        /// <summary>
        /// The [JSON pipeline definition](https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/) of the pipeline.
        /// </summary>
        [Output("pipelineDefinition")]
        public Output<string?> PipelineDefinition { get; private set; } = null!;

        /// <summary>
        /// The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location. see Pipeline Definition S3 Location details below.
        /// </summary>
        [Output("pipelineDefinitionS3Location")]
        public Output<Outputs.PipelinePipelineDefinitionS3Location?> PipelineDefinitionS3Location { get; private set; } = null!;

        /// <summary>
        /// A description of the pipeline.
        /// </summary>
        [Output("pipelineDescription")]
        public Output<string?> PipelineDescription { get; private set; } = null!;

        /// <summary>
        /// The display name of the pipeline.
        /// </summary>
        [Output("pipelineDisplayName")]
        public Output<string> PipelineDisplayName { get; private set; } = null!;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Output("pipelineName")]
        public Output<string> PipelineName { get; private set; } = null!;

        /// <summary>
        /// The name of the Pipeline (must be unique).
        /// </summary>
        [Output("roleArn")]
        public Output<string?> RoleArn { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("aws:sagemaker/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("aws:sagemaker/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default. see Parallelism Configuration details below.
        /// </summary>
        [Input("parallelismConfiguration")]
        public Input<Inputs.PipelineParallelismConfigurationArgs>? ParallelismConfiguration { get; set; }

        /// <summary>
        /// The [JSON pipeline definition](https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/) of the pipeline.
        /// </summary>
        [Input("pipelineDefinition")]
        public Input<string>? PipelineDefinition { get; set; }

        /// <summary>
        /// The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location. see Pipeline Definition S3 Location details below.
        /// </summary>
        [Input("pipelineDefinitionS3Location")]
        public Input<Inputs.PipelinePipelineDefinitionS3LocationArgs>? PipelineDefinitionS3Location { get; set; }

        /// <summary>
        /// A description of the pipeline.
        /// </summary>
        [Input("pipelineDescription")]
        public Input<string>? PipelineDescription { get; set; }

        /// <summary>
        /// The display name of the pipeline.
        /// </summary>
        [Input("pipelineDisplayName", required: true)]
        public Input<string> PipelineDisplayName { get; set; } = null!;

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("pipelineName", required: true)]
        public Input<string> PipelineName { get; set; } = null!;

        /// <summary>
        /// The name of the Pipeline (must be unique).
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Pipeline.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default. see Parallelism Configuration details below.
        /// </summary>
        [Input("parallelismConfiguration")]
        public Input<Inputs.PipelineParallelismConfigurationGetArgs>? ParallelismConfiguration { get; set; }

        /// <summary>
        /// The [JSON pipeline definition](https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/) of the pipeline.
        /// </summary>
        [Input("pipelineDefinition")]
        public Input<string>? PipelineDefinition { get; set; }

        /// <summary>
        /// The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location. see Pipeline Definition S3 Location details below.
        /// </summary>
        [Input("pipelineDefinitionS3Location")]
        public Input<Inputs.PipelinePipelineDefinitionS3LocationGetArgs>? PipelineDefinitionS3Location { get; set; }

        /// <summary>
        /// A description of the pipeline.
        /// </summary>
        [Input("pipelineDescription")]
        public Input<string>? PipelineDescription { get; set; }

        /// <summary>
        /// The display name of the pipeline.
        /// </summary>
        [Input("pipelineDisplayName")]
        public Input<string>? PipelineDisplayName { get; set; }

        /// <summary>
        /// The name of the pipeline.
        /// </summary>
        [Input("pipelineName")]
        public Input<string>? PipelineName { get; set; }

        /// <summary>
        /// The name of the Pipeline (must be unique).
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
