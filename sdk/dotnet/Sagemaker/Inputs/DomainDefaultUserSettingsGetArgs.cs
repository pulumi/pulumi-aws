// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker.Inputs
{

    public sealed class DomainDefaultUserSettingsGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Canvas app settings. See `canvas_app_settings` Block below.
        /// </summary>
        [Input("canvasAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsCanvasAppSettingsGetArgs>? CanvasAppSettings { get; set; }

        /// <summary>
        /// The Code Editor application settings. See `code_editor_app_settings` Block below.
        /// </summary>
        [Input("codeEditorAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsCodeEditorAppSettingsGetArgs>? CodeEditorAppSettings { get; set; }

        [Input("customFileSystemConfigs")]
        private InputList<Inputs.DomainDefaultUserSettingsCustomFileSystemConfigGetArgs>? _customFileSystemConfigs;

        /// <summary>
        /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio. See `custom_file_system_config` Block below.
        /// </summary>
        public InputList<Inputs.DomainDefaultUserSettingsCustomFileSystemConfigGetArgs> CustomFileSystemConfigs
        {
            get => _customFileSystemConfigs ?? (_customFileSystemConfigs = new InputList<Inputs.DomainDefaultUserSettingsCustomFileSystemConfigGetArgs>());
            set => _customFileSystemConfigs = value;
        }

        /// <summary>
        /// Details about the POSIX identity that is used for file system operations. See `custom_posix_user_config` Block below.
        /// </summary>
        [Input("customPosixUserConfig")]
        public Input<Inputs.DomainDefaultUserSettingsCustomPosixUserConfigGetArgs>? CustomPosixUserConfig { get; set; }

        /// <summary>
        /// The default experience that the user is directed to when accessing the domain. The supported values are: `studio::`: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED. `app:JupyterServer:`: Indicates that Studio Classic is the default experience.
        /// </summary>
        [Input("defaultLandingUri")]
        public Input<string>? DefaultLandingUri { get; set; }

        /// <summary>
        /// The execution role ARN for the user.
        /// </summary>
        [Input("executionRole", required: true)]
        public Input<string> ExecutionRole { get; set; } = null!;

        /// <summary>
        /// The settings for the JupyterLab application. See `jupyter_lab_app_settings` Block below.
        /// </summary>
        [Input("jupyterLabAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsJupyterLabAppSettingsGetArgs>? JupyterLabAppSettings { get; set; }

        /// <summary>
        /// The Jupyter server's app settings. See `jupyter_server_app_settings` Block below.
        /// </summary>
        [Input("jupyterServerAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsJupyterServerAppSettingsGetArgs>? JupyterServerAppSettings { get; set; }

        /// <summary>
        /// The kernel gateway app settings. See `kernel_gateway_app_settings` Block below.
        /// </summary>
        [Input("kernelGatewayAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsKernelGatewayAppSettingsGetArgs>? KernelGatewayAppSettings { get; set; }

        /// <summary>
        /// The RSession app settings. See `r_session_app_settings` Block below.
        /// </summary>
        [Input("rSessionAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsRSessionAppSettingsGetArgs>? RSessionAppSettings { get; set; }

        /// <summary>
        /// A collection of settings that configure user interaction with the RStudioServerPro app. See `r_studio_server_pro_app_settings` Block below.
        /// </summary>
        [Input("rStudioServerProAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsRStudioServerProAppSettingsGetArgs>? RStudioServerProAppSettings { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// A list of security group IDs that will be attached to the user.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The sharing settings. See `sharing_settings` Block below.
        /// </summary>
        [Input("sharingSettings")]
        public Input<Inputs.DomainDefaultUserSettingsSharingSettingsGetArgs>? SharingSettings { get; set; }

        /// <summary>
        /// The storage settings for a private space. See `space_storage_settings` Block below.
        /// </summary>
        [Input("spaceStorageSettings")]
        public Input<Inputs.DomainDefaultUserSettingsSpaceStorageSettingsGetArgs>? SpaceStorageSettings { get; set; }

        /// <summary>
        /// Whether the user can access Studio. If this value is set to `DISABLED`, the user cannot access Studio, even if that is the default experience for the domain. Valid values are `ENABLED` and `DISABLED`.
        /// </summary>
        [Input("studioWebPortal")]
        public Input<string>? StudioWebPortal { get; set; }

        /// <summary>
        /// The TensorBoard app settings. See `tensor_board_app_settings` Block below.
        /// </summary>
        [Input("tensorBoardAppSettings")]
        public Input<Inputs.DomainDefaultUserSettingsTensorBoardAppSettingsGetArgs>? TensorBoardAppSettings { get; set; }

        public DomainDefaultUserSettingsGetArgs()
        {
        }
        public static new DomainDefaultUserSettingsGetArgs Empty => new DomainDefaultUserSettingsGetArgs();
    }
}
