// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker
{
    /// <summary>
    /// Provides a SageMaker Device Fleet resource.
    /// 
    /// ## Example Usage
    /// ### Basic usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Sagemaker.DeviceFleet("example", new Aws.Sagemaker.DeviceFleetArgs
    ///         {
    ///             DeviceFleetName = "example",
    ///             RoleArn = aws_iam_role.Test.Arn,
    ///             OutputConfig = new Aws.Sagemaker.Inputs.DeviceFleetOutputConfigArgs
    ///             {
    ///                 S3OutputLocation = $"s3://{aws_s3_bucket.Example.Bucket}/prefix/",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// SageMaker Device Fleets can be imported using the `name`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:sagemaker/deviceFleet:DeviceFleet example my-fleet
    /// ```
    /// </summary>
    [AwsResourceType("aws:sagemaker/deviceFleet:DeviceFleet")]
    public partial class DeviceFleet : Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Device Fleet.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A description of the fleet.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Device Fleet (must be unique).
        /// </summary>
        [Output("deviceFleetName")]
        public Output<string> DeviceFleetName { get; private set; } = null!;

        /// <summary>
        /// Whether to create an AWS IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".
        /// </summary>
        [Output("enableIotRoleAlias")]
        public Output<bool?> EnableIotRoleAlias { get; private set; } = null!;

        [Output("iotRoleAlias")]
        public Output<string> IotRoleAlias { get; private set; } = null!;

        /// <summary>
        /// Specifies details about the repository. see Output Config details below.
        /// </summary>
        [Output("outputConfig")]
        public Output<Outputs.DeviceFleetOutputConfig> OutputConfig { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a DeviceFleet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeviceFleet(string name, DeviceFleetArgs args, CustomResourceOptions? options = null)
            : base("aws:sagemaker/deviceFleet:DeviceFleet", name, args ?? new DeviceFleetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DeviceFleet(string name, Input<string> id, DeviceFleetState? state = null, CustomResourceOptions? options = null)
            : base("aws:sagemaker/deviceFleet:DeviceFleet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeviceFleet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeviceFleet Get(string name, Input<string> id, DeviceFleetState? state = null, CustomResourceOptions? options = null)
        {
            return new DeviceFleet(name, id, state, options);
        }
    }

    public sealed class DeviceFleetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the fleet.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Device Fleet (must be unique).
        /// </summary>
        [Input("deviceFleetName", required: true)]
        public Input<string> DeviceFleetName { get; set; } = null!;

        /// <summary>
        /// Whether to create an AWS IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".
        /// </summary>
        [Input("enableIotRoleAlias")]
        public Input<bool>? EnableIotRoleAlias { get; set; }

        /// <summary>
        /// Specifies details about the repository. see Output Config details below.
        /// </summary>
        [Input("outputConfig", required: true)]
        public Input<Inputs.DeviceFleetOutputConfigArgs> OutputConfig { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DeviceFleetArgs()
        {
        }
    }

    public sealed class DeviceFleetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Device Fleet.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// A description of the fleet.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Device Fleet (must be unique).
        /// </summary>
        [Input("deviceFleetName")]
        public Input<string>? DeviceFleetName { get; set; }

        /// <summary>
        /// Whether to create an AWS IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}".
        /// </summary>
        [Input("enableIotRoleAlias")]
        public Input<bool>? EnableIotRoleAlias { get; set; }

        [Input("iotRoleAlias")]
        public Input<string>? IotRoleAlias { get; set; }

        /// <summary>
        /// Specifies details about the repository. see Output Config details below.
        /// </summary>
        [Input("outputConfig")]
        public Input<Inputs.DeviceFleetOutputConfigGetArgs>? OutputConfig { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public DeviceFleetState()
        {
        }
    }
}
