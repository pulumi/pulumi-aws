// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker.Outputs
{

    [OutputType]
    public sealed class DataQualityJobDefinitionDataQualityJobInputBatchTransformInput
    {
        /// <summary>
        /// The Amazon S3 location being used to capture the data.
        /// </summary>
        public readonly string DataCapturedDestinationS3Uri;
        /// <summary>
        /// The dataset format for your batch transform job. Fields are documented below.
        /// </summary>
        public readonly Outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormat DatasetFormat;
        /// <summary>
        /// Path to the filesystem where the batch transform data is available to the container. Defaults to `/opt/ml/processing/input`.
        /// </summary>
        public readonly string? LocalPath;
        /// <summary>
        /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to `FullyReplicated`. Valid values are `FullyReplicated` or `ShardedByS3Key`
        /// </summary>
        public readonly string? S3DataDistributionType;
        /// <summary>
        /// Whether the `Pipe` or `File` is used as the input mode for transferring data for the monitoring job. `Pipe` mode is recommended for large datasets. `File` mode is useful for small files that fit in memory. Defaults to `File`.  Valid values are `Pipe` or `File`
        /// </summary>
        public readonly string? S3InputMode;

        [OutputConstructor]
        private DataQualityJobDefinitionDataQualityJobInputBatchTransformInput(
            string dataCapturedDestinationS3Uri,

            Outputs.DataQualityJobDefinitionDataQualityJobInputBatchTransformInputDatasetFormat datasetFormat,

            string? localPath,

            string? s3DataDistributionType,

            string? s3InputMode)
        {
            DataCapturedDestinationS3Uri = dataCapturedDestinationS3Uri;
            DatasetFormat = datasetFormat;
            LocalPath = localPath;
            S3DataDistributionType = s3DataDistributionType;
            S3InputMode = s3InputMode;
        }
    }
}
