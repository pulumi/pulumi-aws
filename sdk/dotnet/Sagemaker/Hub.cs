// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker
{
    /// <summary>
    /// Provides a SageMaker Hub resource.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Sagemaker.Hub("example", new()
    ///     {
    ///         HubName = "example",
    ///         HubDescription = "example",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import SageMaker Hubs using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:sagemaker/hub:Hub test_hub my-code-repo
    /// ```
    /// </summary>
    [AwsResourceType("aws:sagemaker/hub:Hub")]
    public partial class Hub : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Hub.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// A description of the hub.
        /// </summary>
        [Output("hubDescription")]
        public Output<string> HubDescription { get; private set; } = null!;

        /// <summary>
        /// The display name of the hub.
        /// </summary>
        [Output("hubDisplayName")]
        public Output<string?> HubDisplayName { get; private set; } = null!;

        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Output("hubName")]
        public Output<string> HubName { get; private set; } = null!;

        /// <summary>
        /// The searchable keywords for the hub.
        /// </summary>
        [Output("hubSearchKeywords")]
        public Output<ImmutableArray<string>> HubSearchKeywords { get; private set; } = null!;

        /// <summary>
        /// The Amazon S3 storage configuration for the hub. See S3 Storage Config details below.
        /// </summary>
        [Output("s3StorageConfig")]
        public Output<Outputs.HubS3StorageConfig?> S3StorageConfig { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Hub resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Hub(string name, HubArgs args, CustomResourceOptions? options = null)
            : base("aws:sagemaker/hub:Hub", name, args ?? new HubArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Hub(string name, Input<string> id, HubState? state = null, CustomResourceOptions? options = null)
            : base("aws:sagemaker/hub:Hub", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Hub resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Hub Get(string name, Input<string> id, HubState? state = null, CustomResourceOptions? options = null)
        {
            return new Hub(name, id, state, options);
        }
    }

    public sealed class HubArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the hub.
        /// </summary>
        [Input("hubDescription", required: true)]
        public Input<string> HubDescription { get; set; } = null!;

        /// <summary>
        /// The display name of the hub.
        /// </summary>
        [Input("hubDisplayName")]
        public Input<string>? HubDisplayName { get; set; }

        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName", required: true)]
        public Input<string> HubName { get; set; } = null!;

        [Input("hubSearchKeywords")]
        private InputList<string>? _hubSearchKeywords;

        /// <summary>
        /// The searchable keywords for the hub.
        /// </summary>
        public InputList<string> HubSearchKeywords
        {
            get => _hubSearchKeywords ?? (_hubSearchKeywords = new InputList<string>());
            set => _hubSearchKeywords = value;
        }

        /// <summary>
        /// The Amazon S3 storage configuration for the hub. See S3 Storage Config details below.
        /// </summary>
        [Input("s3StorageConfig")]
        public Input<Inputs.HubS3StorageConfigArgs>? S3StorageConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public HubArgs()
        {
        }
        public static new HubArgs Empty => new HubArgs();
    }

    public sealed class HubState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) assigned by AWS to this Hub.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// A description of the hub.
        /// </summary>
        [Input("hubDescription")]
        public Input<string>? HubDescription { get; set; }

        /// <summary>
        /// The display name of the hub.
        /// </summary>
        [Input("hubDisplayName")]
        public Input<string>? HubDisplayName { get; set; }

        /// <summary>
        /// The name of the hub.
        /// </summary>
        [Input("hubName")]
        public Input<string>? HubName { get; set; }

        [Input("hubSearchKeywords")]
        private InputList<string>? _hubSearchKeywords;

        /// <summary>
        /// The searchable keywords for the hub.
        /// </summary>
        public InputList<string> HubSearchKeywords
        {
            get => _hubSearchKeywords ?? (_hubSearchKeywords = new InputList<string>());
            set => _hubSearchKeywords = value;
        }

        /// <summary>
        /// The Amazon S3 storage configuration for the hub. See S3 Storage Config details below.
        /// </summary>
        [Input("s3StorageConfig")]
        public Input<Inputs.HubS3StorageConfigGetArgs>? S3StorageConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public HubState()
        {
        }
        public static new HubState Empty => new HubState();
    }
}
