// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Sagemaker
{
    [AwsResourceType("aws:sagemaker/notebookInstance:NotebookInstance")]
    public partial class NotebookInstance : global::Pulumi.CustomResource
    {
        [Output("acceleratorTypes")]
        public Output<ImmutableArray<string>> AcceleratorTypes { get; private set; } = null!;

        [Output("additionalCodeRepositories")]
        public Output<ImmutableArray<string>> AdditionalCodeRepositories { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("defaultCodeRepository")]
        public Output<string?> DefaultCodeRepository { get; private set; } = null!;

        [Output("directInternetAccess")]
        public Output<string?> DirectInternetAccess { get; private set; } = null!;

        [Output("instanceMetadataServiceConfiguration")]
        public Output<Outputs.NotebookInstanceInstanceMetadataServiceConfiguration?> InstanceMetadataServiceConfiguration { get; private set; } = null!;

        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        [Output("lifecycleConfigName")]
        public Output<string?> LifecycleConfigName { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        [Output("platformIdentifier")]
        public Output<string> PlatformIdentifier { get; private set; } = null!;

        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        [Output("rootAccess")]
        public Output<string?> RootAccess { get; private set; } = null!;

        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        [Output("volumeSize")]
        public Output<int?> VolumeSize { get; private set; } = null!;


        /// <summary>
        /// Create a NotebookInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NotebookInstance(string name, NotebookInstanceArgs args, CustomResourceOptions? options = null)
            : base("aws:sagemaker/notebookInstance:NotebookInstance", name, args ?? new NotebookInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NotebookInstance(string name, Input<string> id, NotebookInstanceState? state = null, CustomResourceOptions? options = null)
            : base("aws:sagemaker/notebookInstance:NotebookInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NotebookInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NotebookInstance Get(string name, Input<string> id, NotebookInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new NotebookInstance(name, id, state, options);
        }
    }

    public sealed class NotebookInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("acceleratorTypes")]
        private InputList<string>? _acceleratorTypes;
        public InputList<string> AcceleratorTypes
        {
            get => _acceleratorTypes ?? (_acceleratorTypes = new InputList<string>());
            set => _acceleratorTypes = value;
        }

        [Input("additionalCodeRepositories")]
        private InputList<string>? _additionalCodeRepositories;
        public InputList<string> AdditionalCodeRepositories
        {
            get => _additionalCodeRepositories ?? (_additionalCodeRepositories = new InputList<string>());
            set => _additionalCodeRepositories = value;
        }

        [Input("defaultCodeRepository")]
        public Input<string>? DefaultCodeRepository { get; set; }

        [Input("directInternetAccess")]
        public Input<string>? DirectInternetAccess { get; set; }

        [Input("instanceMetadataServiceConfiguration")]
        public Input<Inputs.NotebookInstanceInstanceMetadataServiceConfigurationArgs>? InstanceMetadataServiceConfiguration { get; set; }

        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("lifecycleConfigName")]
        public Input<string>? LifecycleConfigName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("platformIdentifier")]
        public Input<string>? PlatformIdentifier { get; set; }

        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        [Input("rootAccess")]
        public Input<string>? RootAccess { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        public NotebookInstanceArgs()
        {
        }
        public static new NotebookInstanceArgs Empty => new NotebookInstanceArgs();
    }

    public sealed class NotebookInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("acceleratorTypes")]
        private InputList<string>? _acceleratorTypes;
        public InputList<string> AcceleratorTypes
        {
            get => _acceleratorTypes ?? (_acceleratorTypes = new InputList<string>());
            set => _acceleratorTypes = value;
        }

        [Input("additionalCodeRepositories")]
        private InputList<string>? _additionalCodeRepositories;
        public InputList<string> AdditionalCodeRepositories
        {
            get => _additionalCodeRepositories ?? (_additionalCodeRepositories = new InputList<string>());
            set => _additionalCodeRepositories = value;
        }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("defaultCodeRepository")]
        public Input<string>? DefaultCodeRepository { get; set; }

        [Input("directInternetAccess")]
        public Input<string>? DirectInternetAccess { get; set; }

        [Input("instanceMetadataServiceConfiguration")]
        public Input<Inputs.NotebookInstanceInstanceMetadataServiceConfigurationGetArgs>? InstanceMetadataServiceConfiguration { get; set; }

        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("lifecycleConfigName")]
        public Input<string>? LifecycleConfigName { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        [Input("platformIdentifier")]
        public Input<string>? PlatformIdentifier { get; set; }

        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        [Input("rootAccess")]
        public Input<string>? RootAccess { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        public NotebookInstanceState()
        {
        }
        public static new NotebookInstanceState Empty => new NotebookInstanceState();
    }
}
