// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Fms
{
    [AwsResourceType("aws:fms/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("deleteAllPolicyResources")]
        public Output<bool?> DeleteAllPolicyResources { get; private set; } = null!;

        [Output("deleteUnusedFmManagedResources")]
        public Output<bool?> DeleteUnusedFmManagedResources { get; private set; } = null!;

        [Output("excludeMap")]
        public Output<Outputs.PolicyExcludeMap?> ExcludeMap { get; private set; } = null!;

        [Output("excludeResourceTags")]
        public Output<bool> ExcludeResourceTags { get; private set; } = null!;

        [Output("includeMap")]
        public Output<Outputs.PolicyIncludeMap?> IncludeMap { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("policyUpdateToken")]
        public Output<string> PolicyUpdateToken { get; private set; } = null!;

        [Output("remediationEnabled")]
        public Output<bool?> RemediationEnabled { get; private set; } = null!;

        [Output("resourceTags")]
        public Output<ImmutableDictionary<string, string>?> ResourceTags { get; private set; } = null!;

        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        [Output("resourceTypeLists")]
        public Output<ImmutableArray<string>> ResourceTypeLists { get; private set; } = null!;

        [Output("securityServicePolicyData")]
        public Output<Outputs.PolicySecurityServicePolicyData> SecurityServicePolicyData { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:fms/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:fms/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("deleteAllPolicyResources")]
        public Input<bool>? DeleteAllPolicyResources { get; set; }

        [Input("deleteUnusedFmManagedResources")]
        public Input<bool>? DeleteUnusedFmManagedResources { get; set; }

        [Input("excludeMap")]
        public Input<Inputs.PolicyExcludeMapArgs>? ExcludeMap { get; set; }

        [Input("excludeResourceTags", required: true)]
        public Input<bool> ExcludeResourceTags { get; set; } = null!;

        [Input("includeMap")]
        public Input<Inputs.PolicyIncludeMapArgs>? IncludeMap { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("remediationEnabled")]
        public Input<bool>? RemediationEnabled { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("resourceTypeLists")]
        private InputList<string>? _resourceTypeLists;
        public InputList<string> ResourceTypeLists
        {
            get => _resourceTypeLists ?? (_resourceTypeLists = new InputList<string>());
            set => _resourceTypeLists = value;
        }

        [Input("securityServicePolicyData", required: true)]
        public Input<Inputs.PolicySecurityServicePolicyDataArgs> SecurityServicePolicyData { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("deleteAllPolicyResources")]
        public Input<bool>? DeleteAllPolicyResources { get; set; }

        [Input("deleteUnusedFmManagedResources")]
        public Input<bool>? DeleteUnusedFmManagedResources { get; set; }

        [Input("excludeMap")]
        public Input<Inputs.PolicyExcludeMapGetArgs>? ExcludeMap { get; set; }

        [Input("excludeResourceTags")]
        public Input<bool>? ExcludeResourceTags { get; set; }

        [Input("includeMap")]
        public Input<Inputs.PolicyIncludeMapGetArgs>? IncludeMap { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyUpdateToken")]
        public Input<string>? PolicyUpdateToken { get; set; }

        [Input("remediationEnabled")]
        public Input<bool>? RemediationEnabled { get; set; }

        [Input("resourceTags")]
        private InputMap<string>? _resourceTags;
        public InputMap<string> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputMap<string>());
            set => _resourceTags = value;
        }

        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        [Input("resourceTypeLists")]
        private InputList<string>? _resourceTypeLists;
        public InputList<string> ResourceTypeLists
        {
            get => _resourceTypeLists ?? (_resourceTypeLists = new InputList<string>());
            set => _resourceTypeLists = value;
        }

        [Input("securityServicePolicyData")]
        public Input<Inputs.PolicySecurityServicePolicyDataGetArgs>? SecurityServicePolicyData { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
