// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Mq
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Basic Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Mq.Broker("example", new()
    ///     {
    ///         BrokerName = "example",
    ///         Configuration = new Aws.Mq.Inputs.BrokerConfigurationArgs
    ///         {
    ///             Id = test.Id,
    ///             Revision = test.LatestRevision,
    ///         },
    ///         EngineType = "ActiveMQ",
    ///         EngineVersion = "5.17.6",
    ///         HostInstanceType = "mq.t2.micro",
    ///         SecurityGroups = new[]
    ///         {
    ///             testAwsSecurityGroup.Id,
    ///         },
    ///         Users = new[]
    ///         {
    ///             new Aws.Mq.Inputs.BrokerUserArgs
    ///             {
    ///                 Username = "example_user",
    ///                 Password = "&lt;password&gt;",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### High-throughput Optimized Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Mq.Broker("example", new()
    ///     {
    ///         BrokerName = "example",
    ///         Configuration = new Aws.Mq.Inputs.BrokerConfigurationArgs
    ///         {
    ///             Id = test.Id,
    ///             Revision = test.LatestRevision,
    ///         },
    ///         EngineType = "ActiveMQ",
    ///         EngineVersion = "5.17.6",
    ///         StorageType = "ebs",
    ///         HostInstanceType = "mq.m5.large",
    ///         SecurityGroups = new[]
    ///         {
    ///             testAwsSecurityGroup.Id,
    ///         },
    ///         Users = new[]
    ///         {
    ///             new Aws.Mq.Inputs.BrokerUserArgs
    ///             {
    ///                 Username = "example_user",
    ///                 Password = "&lt;password&gt;",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Cross-Region Data Replication
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var examplePrimary = new Aws.Mq.Broker("example_primary", new()
    ///     {
    ///         ApplyImmediately = true,
    ///         BrokerName = "example_primary",
    ///         EngineType = "ActiveMQ",
    ///         EngineVersion = "5.17.6",
    ///         HostInstanceType = "mq.m5.large",
    ///         SecurityGroups = new[]
    ///         {
    ///             examplePrimaryAwsSecurityGroup.Id,
    ///         },
    ///         DeploymentMode = "ACTIVE_STANDBY_MULTI_AZ",
    ///         Users = new[]
    ///         {
    ///             new Aws.Mq.Inputs.BrokerUserArgs
    ///             {
    ///                 Username = "example_user",
    ///                 Password = "&lt;password&gt;",
    ///             },
    ///             new Aws.Mq.Inputs.BrokerUserArgs
    ///             {
    ///                 Username = "example_replication_user",
    ///                 Password = "&lt;password&gt;",
    ///                 ReplicationUser = true,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var example = new Aws.Mq.Broker("example", new()
    ///     {
    ///         ApplyImmediately = true,
    ///         BrokerName = "example",
    ///         EngineType = "ActiveMQ",
    ///         EngineVersion = "5.17.6",
    ///         HostInstanceType = "mq.m5.large",
    ///         SecurityGroups = new[]
    ///         {
    ///             exampleAwsSecurityGroup.Id,
    ///         },
    ///         DeploymentMode = "ACTIVE_STANDBY_MULTI_AZ",
    ///         DataReplicationMode = "CRDR",
    ///         DataReplicationPrimaryBrokerArn = primary.Arn,
    ///         Users = new[]
    ///         {
    ///             new Aws.Mq.Inputs.BrokerUserArgs
    ///             {
    ///                 Username = "example_user",
    ///                 Password = "&lt;password&gt;",
    ///             },
    ///             new Aws.Mq.Inputs.BrokerUserArgs
    ///             {
    ///                 Username = "example_replication_user",
    ///                 Password = "&lt;password&gt;",
    ///                 ReplicationUser = true,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// See the [AWS MQ documentation](https://docs.aws.amazon.com/amazon-mq/latest/developer-guide/crdr-for-active-mq.html) on cross-region data replication for additional details.
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import MQ Brokers using their broker id. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:mq/broker:Broker example a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc
    /// ```
    /// </summary>
    [AwsResourceType("aws:mq/broker:Broker")]
    public partial class Broker : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to apply broker modifications immediately. Default is `false`.
        /// </summary>
        [Output("applyImmediately")]
        public Output<bool?> ApplyImmediately { get; private set; } = null!;

        /// <summary>
        /// ARN of the broker.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
        /// </summary>
        [Output("authenticationStrategy")]
        public Output<string> AuthenticationStrategy { get; private set; } = null!;

        /// <summary>
        /// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
        /// </summary>
        [Output("autoMinorVersionUpgrade")]
        public Output<bool?> AutoMinorVersionUpgrade { get; private set; } = null!;

        /// <summary>
        /// Name of the broker.
        /// </summary>
        [Output("brokerName")]
        public Output<string> BrokerName { get; private set; } = null!;

        /// <summary>
        /// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
        /// </summary>
        [Output("configuration")]
        public Output<Outputs.BrokerConfiguration> Configuration { get; private set; } = null!;

        /// <summary>
        /// Whether this broker is part of a data replication pair. Valid values are `CRDR` and `NONE`.
        /// </summary>
        [Output("dataReplicationMode")]
        public Output<string> DataReplicationMode { get; private set; } = null!;

        /// <summary>
        /// ARN of the primary broker used to replicate data in a data replication pair. Required when `dataReplicationMode` is `CRDR`.
        /// </summary>
        [Output("dataReplicationPrimaryBrokerArn")]
        public Output<string?> DataReplicationPrimaryBrokerArn { get; private set; } = null!;

        /// <summary>
        /// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
        /// </summary>
        [Output("deploymentMode")]
        public Output<string?> DeploymentMode { get; private set; } = null!;

        /// <summary>
        /// Configuration block containing encryption options. Detailed below.
        /// </summary>
        [Output("encryptionOptions")]
        public Output<Outputs.BrokerEncryptionOptions?> EncryptionOptions { get; private set; } = null!;

        /// <summary>
        /// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
        /// </summary>
        [Output("engineType")]
        public Output<string> EngineType { get; private set; } = null!;

        /// <summary>
        /// Version of the broker engine.
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
        /// </summary>
        [Output("hostInstanceType")]
        public Output<string> HostInstanceType { get; private set; } = null!;

        /// <summary>
        /// List of information about allocated brokers (both active &amp; standby).
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<Outputs.BrokerInstance>> Instances { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the LDAP server used to authenticate and authorize connections. Not supported for `engineType` `RabbitMQ`. Detailed below.
        /// </summary>
        [Output("ldapServerMetadata")]
        public Output<Outputs.BrokerLdapServerMetadata?> LdapServerMetadata { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the logging configuration. Detailed below.
        /// </summary>
        [Output("logs")]
        public Output<Outputs.BrokerLogs?> Logs { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the maintenance window start time. Detailed below.
        /// </summary>
        [Output("maintenanceWindowStartTime")]
        public Output<Outputs.BrokerMaintenanceWindowStartTime> MaintenanceWindowStartTime { get; private set; } = null!;

        /// <summary>
        /// Data replication mode that will be applied after reboot.
        /// </summary>
        [Output("pendingDataReplicationMode")]
        public Output<string> PendingDataReplicationMode { get; private set; } = null!;

        /// <summary>
        /// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
        /// </summary>
        [Output("publiclyAccessible")]
        public Output<bool?> PubliclyAccessible { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// List of security group IDs assigned to the broker.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// Storage type of the broker. For `engineType` `ActiveMQ`, valid values are `efs` and `ebs` (AWS-default is `efs`). For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.BrokerUser>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a Broker resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Broker(string name, BrokerArgs args, CustomResourceOptions? options = null)
            : base("aws:mq/broker:Broker", name, args ?? new BrokerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Broker(string name, Input<string> id, BrokerState? state = null, CustomResourceOptions? options = null)
            : base("aws:mq/broker:Broker", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Broker resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Broker Get(string name, Input<string> id, BrokerState? state = null, CustomResourceOptions? options = null)
        {
            return new Broker(name, id, state, options);
        }
    }

    public sealed class BrokerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to apply broker modifications immediately. Default is `false`.
        /// </summary>
        [Input("applyImmediately")]
        public Input<bool>? ApplyImmediately { get; set; }

        /// <summary>
        /// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
        /// </summary>
        [Input("authenticationStrategy")]
        public Input<string>? AuthenticationStrategy { get; set; }

        /// <summary>
        /// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        /// <summary>
        /// Name of the broker.
        /// </summary>
        [Input("brokerName")]
        public Input<string>? BrokerName { get; set; }

        /// <summary>
        /// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.BrokerConfigurationArgs>? Configuration { get; set; }

        /// <summary>
        /// Whether this broker is part of a data replication pair. Valid values are `CRDR` and `NONE`.
        /// </summary>
        [Input("dataReplicationMode")]
        public Input<string>? DataReplicationMode { get; set; }

        /// <summary>
        /// ARN of the primary broker used to replicate data in a data replication pair. Required when `dataReplicationMode` is `CRDR`.
        /// </summary>
        [Input("dataReplicationPrimaryBrokerArn")]
        public Input<string>? DataReplicationPrimaryBrokerArn { get; set; }

        /// <summary>
        /// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
        /// </summary>
        [Input("deploymentMode")]
        public Input<string>? DeploymentMode { get; set; }

        /// <summary>
        /// Configuration block containing encryption options. Detailed below.
        /// </summary>
        [Input("encryptionOptions")]
        public Input<Inputs.BrokerEncryptionOptionsArgs>? EncryptionOptions { get; set; }

        /// <summary>
        /// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
        /// </summary>
        [Input("engineType", required: true)]
        public Input<string> EngineType { get; set; } = null!;

        /// <summary>
        /// Version of the broker engine.
        /// </summary>
        [Input("engineVersion", required: true)]
        public Input<string> EngineVersion { get; set; } = null!;

        /// <summary>
        /// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
        /// </summary>
        [Input("hostInstanceType", required: true)]
        public Input<string> HostInstanceType { get; set; } = null!;

        /// <summary>
        /// Configuration block for the LDAP server used to authenticate and authorize connections. Not supported for `engineType` `RabbitMQ`. Detailed below.
        /// </summary>
        [Input("ldapServerMetadata")]
        public Input<Inputs.BrokerLdapServerMetadataArgs>? LdapServerMetadata { get; set; }

        /// <summary>
        /// Configuration block for the logging configuration. Detailed below.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.BrokerLogsArgs>? Logs { get; set; }

        /// <summary>
        /// Configuration block for the maintenance window start time. Detailed below.
        /// </summary>
        [Input("maintenanceWindowStartTime")]
        public Input<Inputs.BrokerMaintenanceWindowStartTimeArgs>? MaintenanceWindowStartTime { get; set; }

        /// <summary>
        /// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
        /// </summary>
        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security group IDs assigned to the broker.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Storage type of the broker. For `engineType` `ActiveMQ`, valid values are `efs` and `ebs` (AWS-default is `efs`). For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("users", required: true)]
        private InputList<Inputs.BrokerUserArgs>? _users;

        /// <summary>
        /// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.BrokerUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.BrokerUserArgs>());
            set => _users = value;
        }

        public BrokerArgs()
        {
        }
        public static new BrokerArgs Empty => new BrokerArgs();
    }

    public sealed class BrokerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to apply broker modifications immediately. Default is `false`.
        /// </summary>
        [Input("applyImmediately")]
        public Input<bool>? ApplyImmediately { get; set; }

        /// <summary>
        /// ARN of the broker.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Authentication strategy used to secure the broker. Valid values are `simple` and `ldap`. `ldap` is not supported for `engineType` `RabbitMQ`.
        /// </summary>
        [Input("authenticationStrategy")]
        public Input<string>? AuthenticationStrategy { get; set; }

        /// <summary>
        /// Whether to automatically upgrade to new minor versions of brokers as Amazon MQ makes releases available.
        /// </summary>
        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        /// <summary>
        /// Name of the broker.
        /// </summary>
        [Input("brokerName")]
        public Input<string>? BrokerName { get; set; }

        /// <summary>
        /// Configuration block for broker configuration. Applies to `engineType` of `ActiveMQ` and `RabbitMQ` only. Detailed below.
        /// </summary>
        [Input("configuration")]
        public Input<Inputs.BrokerConfigurationGetArgs>? Configuration { get; set; }

        /// <summary>
        /// Whether this broker is part of a data replication pair. Valid values are `CRDR` and `NONE`.
        /// </summary>
        [Input("dataReplicationMode")]
        public Input<string>? DataReplicationMode { get; set; }

        /// <summary>
        /// ARN of the primary broker used to replicate data in a data replication pair. Required when `dataReplicationMode` is `CRDR`.
        /// </summary>
        [Input("dataReplicationPrimaryBrokerArn")]
        public Input<string>? DataReplicationPrimaryBrokerArn { get; set; }

        /// <summary>
        /// Deployment mode of the broker. Valid values are `SINGLE_INSTANCE`, `ACTIVE_STANDBY_MULTI_AZ`, and `CLUSTER_MULTI_AZ`. Default is `SINGLE_INSTANCE`.
        /// </summary>
        [Input("deploymentMode")]
        public Input<string>? DeploymentMode { get; set; }

        /// <summary>
        /// Configuration block containing encryption options. Detailed below.
        /// </summary>
        [Input("encryptionOptions")]
        public Input<Inputs.BrokerEncryptionOptionsGetArgs>? EncryptionOptions { get; set; }

        /// <summary>
        /// Type of broker engine. Valid values are `ActiveMQ` and `RabbitMQ`.
        /// </summary>
        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        /// <summary>
        /// Version of the broker engine.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// Broker's instance type. For example, `mq.t3.micro`, `mq.m5.large`.
        /// </summary>
        [Input("hostInstanceType")]
        public Input<string>? HostInstanceType { get; set; }

        [Input("instances")]
        private InputList<Inputs.BrokerInstanceGetArgs>? _instances;

        /// <summary>
        /// List of information about allocated brokers (both active &amp; standby).
        /// </summary>
        public InputList<Inputs.BrokerInstanceGetArgs> Instances
        {
            get => _instances ?? (_instances = new InputList<Inputs.BrokerInstanceGetArgs>());
            set => _instances = value;
        }

        /// <summary>
        /// Configuration block for the LDAP server used to authenticate and authorize connections. Not supported for `engineType` `RabbitMQ`. Detailed below.
        /// </summary>
        [Input("ldapServerMetadata")]
        public Input<Inputs.BrokerLdapServerMetadataGetArgs>? LdapServerMetadata { get; set; }

        /// <summary>
        /// Configuration block for the logging configuration. Detailed below.
        /// </summary>
        [Input("logs")]
        public Input<Inputs.BrokerLogsGetArgs>? Logs { get; set; }

        /// <summary>
        /// Configuration block for the maintenance window start time. Detailed below.
        /// </summary>
        [Input("maintenanceWindowStartTime")]
        public Input<Inputs.BrokerMaintenanceWindowStartTimeGetArgs>? MaintenanceWindowStartTime { get; set; }

        /// <summary>
        /// Data replication mode that will be applied after reboot.
        /// </summary>
        [Input("pendingDataReplicationMode")]
        public Input<string>? PendingDataReplicationMode { get; set; }

        /// <summary>
        /// Whether to enable connections from applications outside of the VPC that hosts the broker's subnets.
        /// </summary>
        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security group IDs assigned to the broker.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// Storage type of the broker. For `engineType` `ActiveMQ`, valid values are `efs` and `ebs` (AWS-default is `efs`). For `engineType` `RabbitMQ`, only `ebs` is supported. When using `ebs`, only the `mq.m5` broker instance type family is supported.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of subnet IDs in which to launch the broker. A `SINGLE_INSTANCE` deployment requires one subnet. An `ACTIVE_STANDBY_MULTI_AZ` deployment requires multiple subnets.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the broker. If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("users")]
        private InputList<Inputs.BrokerUserGetArgs>? _users;

        /// <summary>
        /// Configuration block for broker users. For `engineType` of `RabbitMQ`, Amazon MQ does not return broker users preventing this resource from making user updates and drift detection. Detailed below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.BrokerUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.BrokerUserGetArgs>());
            set => _users = value;
        }

        public BrokerState()
        {
        }
        public static new BrokerState Empty => new BrokerState();
    }
}
