// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Mq
{
    public static class GetBrokerEngineTypes
    {
        /// <summary>
        /// Retrieve information about available broker engines.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Mq.GetBrokerEngineTypes.Invoke(new()
        ///     {
        ///         EngineType = "ACTIVEMQ",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetBrokerEngineTypesResult> InvokeAsync(GetBrokerEngineTypesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBrokerEngineTypesResult>("aws:mq/getBrokerEngineTypes:getBrokerEngineTypes", args ?? new GetBrokerEngineTypesArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieve information about available broker engines.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Mq.GetBrokerEngineTypes.Invoke(new()
        ///     {
        ///         EngineType = "ACTIVEMQ",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetBrokerEngineTypesResult> Invoke(GetBrokerEngineTypesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrokerEngineTypesResult>("aws:mq/getBrokerEngineTypes:getBrokerEngineTypes", args ?? new GetBrokerEngineTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBrokerEngineTypesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The MQ engine type to return version details for.
        /// </summary>
        [Input("engineType")]
        public string? EngineType { get; set; }

        public GetBrokerEngineTypesArgs()
        {
        }
        public static new GetBrokerEngineTypesArgs Empty => new GetBrokerEngineTypesArgs();
    }

    public sealed class GetBrokerEngineTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The MQ engine type to return version details for.
        /// </summary>
        [Input("engineType")]
        public Input<string>? EngineType { get; set; }

        public GetBrokerEngineTypesInvokeArgs()
        {
        }
        public static new GetBrokerEngineTypesInvokeArgs Empty => new GetBrokerEngineTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetBrokerEngineTypesResult
    {
        /// <summary>
        /// A list of available engine types and versions. See Engine Types.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBrokerEngineTypesBrokerEngineTypeResult> BrokerEngineTypes;
        /// <summary>
        /// The broker's engine type.
        /// </summary>
        public readonly string? EngineType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetBrokerEngineTypesResult(
            ImmutableArray<Outputs.GetBrokerEngineTypesBrokerEngineTypeResult> brokerEngineTypes,

            string? engineType,

            string id)
        {
            BrokerEngineTypes = brokerEngineTypes;
            EngineType = engineType;
            Id = id;
        }
    }
}
