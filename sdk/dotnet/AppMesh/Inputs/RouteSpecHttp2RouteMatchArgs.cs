// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppMesh.Inputs
{

    public sealed class RouteSpecHttp2RouteMatchArgs : global::Pulumi.ResourceArgs
    {
        [Input("headers")]
        private InputList<Inputs.RouteSpecHttp2RouteMatchHeaderArgs>? _headers;

        /// <summary>
        /// Client request headers to match on.
        /// </summary>
        public InputList<Inputs.RouteSpecHttp2RouteMatchHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.RouteSpecHttp2RouteMatchHeaderArgs>());
            set => _headers = value;
        }

        /// <summary>
        /// Client request header method to match on. Valid values: `GET`, `HEAD`, `POST`, `PUT`, `DELETE`, `CONNECT`, `OPTIONS`, `TRACE`, `PATCH`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// Client request path to match on.
        /// </summary>
        [Input("path")]
        public Input<Inputs.RouteSpecHttp2RouteMatchPathArgs>? Path { get; set; }

        /// <summary>
        /// The port number to match from the request.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Value sent by the client must begin with the specified characters. Must be between 1 and 255 characters in length.
        /// This parameter must always start with /, which by itself matches all requests to the virtual router service name.
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("queryParameters")]
        private InputList<Inputs.RouteSpecHttp2RouteMatchQueryParameterArgs>? _queryParameters;

        /// <summary>
        /// Client request query parameters to match on.
        /// </summary>
        public InputList<Inputs.RouteSpecHttp2RouteMatchQueryParameterArgs> QueryParameters
        {
            get => _queryParameters ?? (_queryParameters = new InputList<Inputs.RouteSpecHttp2RouteMatchQueryParameterArgs>());
            set => _queryParameters = value;
        }

        /// <summary>
        /// Client request header scheme to match on. Valid values: `http`, `https`.
        /// </summary>
        [Input("scheme")]
        public Input<string>? Scheme { get; set; }

        public RouteSpecHttp2RouteMatchArgs()
        {
        }
        public static new RouteSpecHttp2RouteMatchArgs Empty => new RouteSpecHttp2RouteMatchArgs();
    }
}
