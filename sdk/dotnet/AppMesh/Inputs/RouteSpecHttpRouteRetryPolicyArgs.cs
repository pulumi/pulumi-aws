// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppMesh.Inputs
{

    public sealed class RouteSpecHttpRouteRetryPolicyArgs : Pulumi.ResourceArgs
    {
        [Input("httpRetryEvents")]
        private InputList<string>? _httpRetryEvents;

        /// <summary>
        /// List of HTTP retry events.
        /// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
        /// Valid values: `client-error` (HTTP status code 409), `gateway-error` (HTTP status codes 502, 503, and 504), `server-error` (HTTP status codes 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, and 511), `stream-error` (retry on refused stream).
        /// </summary>
        public InputList<string> HttpRetryEvents
        {
            get => _httpRetryEvents ?? (_httpRetryEvents = new InputList<string>());
            set => _httpRetryEvents = value;
        }

        /// <summary>
        /// The maximum number of retries.
        /// </summary>
        [Input("maxRetries", required: true)]
        public Input<int> MaxRetries { get; set; } = null!;

        /// <summary>
        /// The per-retry timeout.
        /// </summary>
        [Input("perRetryTimeout", required: true)]
        public Input<Inputs.RouteSpecHttpRouteRetryPolicyPerRetryTimeoutArgs> PerRetryTimeout { get; set; } = null!;

        [Input("tcpRetryEvents")]
        private InputList<string>? _tcpRetryEvents;

        /// <summary>
        /// List of TCP retry events. The only valid value is `connection-error`.
        /// </summary>
        public InputList<string> TcpRetryEvents
        {
            get => _tcpRetryEvents ?? (_tcpRetryEvents = new InputList<string>());
            set => _tcpRetryEvents = value;
        }

        public RouteSpecHttpRouteRetryPolicyArgs()
        {
        }
    }
}
