// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.AppMesh
{
    public static class GetRoute
    {
        /// <summary>
        /// The App Mesh Route data source allows details of an App Mesh Route to be retrieved by its name, mesh_name, virtual_router_name, and optionally the mesh_owner.
        /// </summary>
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("aws:appmesh/getRoute:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        /// <summary>
        /// The App Mesh Route data source allows details of an App Mesh Route to be retrieved by its name, mesh_name, virtual_router_name, and optionally the mesh_owner.
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteResult>("aws:appmesh/getRoute:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the service mesh in which the virtual router exists.
        /// </summary>
        [Input("meshName", required: true)]
        public string MeshName { get; set; } = null!;

        /// <summary>
        /// AWS account ID of the service mesh's owner.
        /// </summary>
        [Input("meshOwner")]
        public string? MeshOwner { get; set; }

        /// <summary>
        /// Name of the route.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// Name of the virtual router in which the route exists.
        /// </summary>
        [Input("virtualRouterName", required: true)]
        public string VirtualRouterName { get; set; } = null!;

        public GetRouteArgs()
        {
        }
        public static new GetRouteArgs Empty => new GetRouteArgs();
    }

    public sealed class GetRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the service mesh in which the virtual router exists.
        /// </summary>
        [Input("meshName", required: true)]
        public Input<string> MeshName { get; set; } = null!;

        /// <summary>
        /// AWS account ID of the service mesh's owner.
        /// </summary>
        [Input("meshOwner")]
        public Input<string>? MeshOwner { get; set; }

        /// <summary>
        /// Name of the route.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Name of the virtual router in which the route exists.
        /// </summary>
        [Input("virtualRouterName", required: true)]
        public Input<string> VirtualRouterName { get; set; } = null!;

        public GetRouteInvokeArgs()
        {
        }
        public static new GetRouteInvokeArgs Empty => new GetRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        /// <summary>
        /// ARN of the route.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Creation date of the route.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Last update date of the route.
        /// </summary>
        public readonly string LastUpdatedDate;
        public readonly string MeshName;
        public readonly string MeshOwner;
        public readonly string Name;
        /// <summary>
        /// Resource owner's AWS account ID.
        /// </summary>
        public readonly string ResourceOwner;
        /// <summary>
        /// Route specification. See the `aws.appmesh.Route` resource for details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteSpecResult> Specs;
        /// <summary>
        /// Map of tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VirtualRouterName;

        [OutputConstructor]
        private GetRouteResult(
            string arn,

            string createdDate,

            string id,

            string lastUpdatedDate,

            string meshName,

            string meshOwner,

            string name,

            string resourceOwner,

            ImmutableArray<Outputs.GetRouteSpecResult> specs,

            ImmutableDictionary<string, string> tags,

            string virtualRouterName)
        {
            Arn = arn;
            CreatedDate = createdDate;
            Id = id;
            LastUpdatedDate = lastUpdatedDate;
            MeshName = meshName;
            MeshOwner = meshOwner;
            Name = name;
            ResourceOwner = resourceOwner;
            Specs = specs;
            Tags = tags;
            VirtualRouterName = virtualRouterName;
        }
    }
}
