// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aws.AppMesh
{
    public static class GetVirtualService
    {
        /// <summary>
        /// The App Mesh Virtual Service data source allows details of an App Mesh Virtual Service to be retrieved by its name, mesh_name, and optionally the mesh_owner.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.AppMesh.GetVirtualService.InvokeAsync(new Aws.AppMesh.GetVirtualServiceArgs
        ///         {
        ///             MeshName = "example-mesh",
        ///             Name = "example.mesh.local",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var current = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
        ///         var test = current.Apply(current =&gt; Output.Create(Aws.AppMesh.GetVirtualService.InvokeAsync(new Aws.AppMesh.GetVirtualServiceArgs
        ///         {
        ///             Name = "example.mesh.local",
        ///             MeshName = "example-mesh",
        ///             MeshOwner = current.AccountId,
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualServiceResult> InvokeAsync(GetVirtualServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualServiceResult>("aws:appmesh/getVirtualService:getVirtualService", args ?? new GetVirtualServiceArgs(), options.WithVersion());

        /// <summary>
        /// The App Mesh Virtual Service data source allows details of an App Mesh Virtual Service to be retrieved by its name, mesh_name, and optionally the mesh_owner.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.AppMesh.GetVirtualService.InvokeAsync(new Aws.AppMesh.GetVirtualServiceArgs
        ///         {
        ///             MeshName = "example-mesh",
        ///             Name = "example.mesh.local",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var current = Output.Create(Aws.GetCallerIdentity.InvokeAsync());
        ///         var test = current.Apply(current =&gt; Output.Create(Aws.AppMesh.GetVirtualService.InvokeAsync(new Aws.AppMesh.GetVirtualServiceArgs
        ///         {
        ///             Name = "example.mesh.local",
        ///             MeshName = "example-mesh",
        ///             MeshOwner = current.AccountId,
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualServiceResult> Invoke(GetVirtualServiceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualServiceResult>("aws:appmesh/getVirtualService:getVirtualService", args ?? new GetVirtualServiceInvokeArgs(), options.WithVersion());
    }


    public sealed class GetVirtualServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the service mesh in which the virtual service exists.
        /// </summary>
        [Input("meshName", required: true)]
        public string MeshName { get; set; } = null!;

        /// <summary>
        /// The AWS account ID of the service mesh's owner.
        /// </summary>
        [Input("meshOwner")]
        public string? MeshOwner { get; set; }

        /// <summary>
        /// The name of the virtual service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetVirtualServiceArgs()
        {
        }
    }

    public sealed class GetVirtualServiceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the service mesh in which the virtual service exists.
        /// </summary>
        [Input("meshName", required: true)]
        public Input<string> MeshName { get; set; } = null!;

        /// <summary>
        /// The AWS account ID of the service mesh's owner.
        /// </summary>
        [Input("meshOwner")]
        public Input<string>? MeshOwner { get; set; }

        /// <summary>
        /// The name of the virtual service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetVirtualServiceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVirtualServiceResult
    {
        /// <summary>
        /// The ARN of the virtual service.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The creation date of the virtual service.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The last update date of the virtual service.
        /// </summary>
        public readonly string LastUpdatedDate;
        public readonly string MeshName;
        public readonly string MeshOwner;
        public readonly string Name;
        /// <summary>
        /// The resource owner's AWS account ID.
        /// </summary>
        public readonly string ResourceOwner;
        /// <summary>
        /// The virtual service specification
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualServiceSpecResult> Specs;
        /// <summary>
        /// A map of tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetVirtualServiceResult(
            string arn,

            string createdDate,

            string id,

            string lastUpdatedDate,

            string meshName,

            string meshOwner,

            string name,

            string resourceOwner,

            ImmutableArray<Outputs.GetVirtualServiceSpecResult> specs,

            ImmutableDictionary<string, string>? tags)
        {
            Arn = arn;
            CreatedDate = createdDate;
            Id = id;
            LastUpdatedDate = lastUpdatedDate;
            MeshName = meshName;
            MeshOwner = meshOwner;
            Name = name;
            ResourceOwner = resourceOwner;
            Specs = specs;
            Tags = tags;
        }
    }
}
