// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Location
{
    /// <summary>
    /// Resource for managing an AWS Location Tracker Association.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleGeofenceCollection = new Aws.Location.GeofenceCollection("exampleGeofenceCollection", new()
    ///     {
    ///         CollectionName = "example",
    ///     });
    /// 
    ///     var exampleTracker = new Aws.Location.Tracker("exampleTracker", new()
    ///     {
    ///         TrackerName = "example",
    ///     });
    /// 
    ///     var exampleTrackerAssociation = new Aws.Location.TrackerAssociation("exampleTrackerAssociation", new()
    ///     {
    ///         ConsumerArn = exampleGeofenceCollection.CollectionArn,
    ///         TrackerName = exampleTracker.TrackerName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Location Tracker Association can be imported using the `tracker_name|consumer_arn`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:location/trackerAssociation:TrackerAssociation example "tracker_name|consumer_arn"
    /// ```
    /// </summary>
    [AwsResourceType("aws:location/trackerAssociation:TrackerAssociation")]
    public partial class TrackerAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
        /// </summary>
        [Output("consumerArn")]
        public Output<string> ConsumerArn { get; private set; } = null!;

        /// <summary>
        /// The name of the tracker resource to be associated with a geofence collection.
        /// </summary>
        [Output("trackerName")]
        public Output<string> TrackerName { get; private set; } = null!;


        /// <summary>
        /// Create a TrackerAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrackerAssociation(string name, TrackerAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:location/trackerAssociation:TrackerAssociation", name, args ?? new TrackerAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrackerAssociation(string name, Input<string> id, TrackerAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:location/trackerAssociation:TrackerAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrackerAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrackerAssociation Get(string name, Input<string> id, TrackerAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new TrackerAssociation(name, id, state, options);
        }
    }

    public sealed class TrackerAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
        /// </summary>
        [Input("consumerArn", required: true)]
        public Input<string> ConsumerArn { get; set; } = null!;

        /// <summary>
        /// The name of the tracker resource to be associated with a geofence collection.
        /// </summary>
        [Input("trackerName", required: true)]
        public Input<string> TrackerName { get; set; } = null!;

        public TrackerAssociationArgs()
        {
        }
        public static new TrackerAssociationArgs Empty => new TrackerAssociationArgs();
    }

    public sealed class TrackerAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the geofence collection to be associated to tracker resource. Used when you need to specify a resource across all AWS.
        /// </summary>
        [Input("consumerArn")]
        public Input<string>? ConsumerArn { get; set; }

        /// <summary>
        /// The name of the tracker resource to be associated with a geofence collection.
        /// </summary>
        [Input("trackerName")]
        public Input<string>? TrackerName { get; set; }

        public TrackerAssociationState()
        {
        }
        public static new TrackerAssociationState Empty => new TrackerAssociationState();
    }
}
