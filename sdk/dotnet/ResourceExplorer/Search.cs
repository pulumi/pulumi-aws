// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ResourceExplorer
{
    public static class Search
    {
        /// <summary>
        /// Data source for managing an AWS Resource Explorer Search.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ResourceExplorer.Search.Invoke(new()
        ///     {
        ///         QueryString = "region:us-west-2",
        ///         ViewArn = test.Arn,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<SearchResult> InvokeAsync(SearchArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SearchResult>("aws:resourceexplorer/search:Search", args ?? new SearchArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS Resource Explorer Search.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ResourceExplorer.Search.Invoke(new()
        ///     {
        ///         QueryString = "region:us-west-2",
        ///         ViewArn = test.Arn,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<SearchResult> Invoke(SearchInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SearchResult>("aws:resourceexplorer/search:Search", args ?? new SearchInvokeArgs(), options.WithDefaults());
    }


    public sealed class SearchArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// String that includes keywords and filters that specify the resources that you want to include in the results. For the complete syntax supported by the QueryString parameter, see Search query syntax reference for [Resource Explorer](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html). The search is completely case insensitive. You can specify an empty string to return all results up to the limit of 1,000 total results. The operation can return only the first 1,000 results. If the resource you want is not included, then use a different value for QueryString to refine the results.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("queryString", required: true)]
        public string QueryString { get; set; } = null!;

        [Input("resourceCounts")]
        private List<Inputs.SearchResourceCountArgs>? _resourceCounts;

        /// <summary>
        /// Number of resources that match the query. See `resource_count` below.
        /// </summary>
        public List<Inputs.SearchResourceCountArgs> ResourceCounts
        {
            get => _resourceCounts ?? (_resourceCounts = new List<Inputs.SearchResourceCountArgs>());
            set => _resourceCounts = value;
        }

        [Input("resources")]
        private List<Inputs.SearchResourceArgs>? _resources;

        /// <summary>
        /// List of structures that describe the resources that match the query. See `resources` below.
        /// </summary>
        public List<Inputs.SearchResourceArgs> Resources
        {
            get => _resources ?? (_resources = new List<Inputs.SearchResourceArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// Specifies the Amazon resource name (ARN) of the view to use for the query. If you don't specify a value for this parameter, then the operation automatically uses the default view for the AWS Region in which you called this operation. If the Region either doesn't have a default view or if you don't have permission to use the default view, then the operation fails with a `401 Unauthorized` exception.
        /// </summary>
        [Input("viewArn")]
        public string? ViewArn { get; set; }

        public SearchArgs()
        {
        }
        public static new SearchArgs Empty => new SearchArgs();
    }

    public sealed class SearchInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// String that includes keywords and filters that specify the resources that you want to include in the results. For the complete syntax supported by the QueryString parameter, see Search query syntax reference for [Resource Explorer](https://docs.aws.amazon.com/resource-explorer/latest/userguide/using-search-query-syntax.html). The search is completely case insensitive. You can specify an empty string to return all results up to the limit of 1,000 total results. The operation can return only the first 1,000 results. If the resource you want is not included, then use a different value for QueryString to refine the results.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("queryString", required: true)]
        public Input<string> QueryString { get; set; } = null!;

        [Input("resourceCounts")]
        private InputList<Inputs.SearchResourceCountInputArgs>? _resourceCounts;

        /// <summary>
        /// Number of resources that match the query. See `resource_count` below.
        /// </summary>
        public InputList<Inputs.SearchResourceCountInputArgs> ResourceCounts
        {
            get => _resourceCounts ?? (_resourceCounts = new InputList<Inputs.SearchResourceCountInputArgs>());
            set => _resourceCounts = value;
        }

        [Input("resources")]
        private InputList<Inputs.SearchResourceInputArgs>? _resources;

        /// <summary>
        /// List of structures that describe the resources that match the query. See `resources` below.
        /// </summary>
        public InputList<Inputs.SearchResourceInputArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.SearchResourceInputArgs>());
            set => _resources = value;
        }

        /// <summary>
        /// Specifies the Amazon resource name (ARN) of the view to use for the query. If you don't specify a value for this parameter, then the operation automatically uses the default view for the AWS Region in which you called this operation. If the Region either doesn't have a default view or if you don't have permission to use the default view, then the operation fails with a `401 Unauthorized` exception.
        /// </summary>
        [Input("viewArn")]
        public Input<string>? ViewArn { get; set; }

        public SearchInvokeArgs()
        {
        }
        public static new SearchInvokeArgs Empty => new SearchInvokeArgs();
    }


    [OutputType]
    public sealed class SearchResult
    {
        /// <summary>
        /// Query String.
        /// </summary>
        public readonly string Id;
        public readonly string QueryString;
        /// <summary>
        /// Number of resources that match the query. See `resource_count` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.SearchResourceCountResult> ResourceCounts;
        /// <summary>
        /// List of structures that describe the resources that match the query. See `resources` below.
        /// </summary>
        public readonly ImmutableArray<Outputs.SearchResourceResult> Resources;
        public readonly string? ViewArn;

        [OutputConstructor]
        private SearchResult(
            string id,

            string queryString,

            ImmutableArray<Outputs.SearchResourceCountResult> resourceCounts,

            ImmutableArray<Outputs.SearchResourceResult> resources,

            string? viewArn)
        {
            Id = id;
            QueryString = queryString;
            ResourceCounts = resourceCounts;
            Resources = resources;
            ViewArn = viewArn;
        }
    }
}
