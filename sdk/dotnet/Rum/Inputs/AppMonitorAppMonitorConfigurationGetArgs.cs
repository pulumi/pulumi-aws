// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rum.Inputs
{

    public sealed class AppMonitorAppMonitorConfigurationGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If you set this to `true`, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
        /// </summary>
        [Input("allowCookies")]
        public Input<bool>? AllowCookies { get; set; }

        /// <summary>
        /// If you set this to `true`, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
        /// </summary>
        [Input("enableXray")]
        public Input<bool>? EnableXray { get; set; }

        [Input("excludedPages")]
        private InputList<string>? _excludedPages;

        /// <summary>
        /// A list of URLs in your website or application to exclude from RUM data collection.
        /// </summary>
        public InputList<string> ExcludedPages
        {
            get => _excludedPages ?? (_excludedPages = new InputList<string>());
            set => _excludedPages = value;
        }

        [Input("favoritePages")]
        private InputList<string>? _favoritePages;

        /// <summary>
        /// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
        /// </summary>
        public InputList<string> FavoritePages
        {
            get => _favoritePages ?? (_favoritePages = new InputList<string>());
            set => _favoritePages = value;
        }

        /// <summary>
        /// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
        /// </summary>
        [Input("guestRoleArn")]
        public Input<string>? GuestRoleArn { get; set; }

        /// <summary>
        /// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
        /// </summary>
        [Input("identityPoolId")]
        public Input<string>? IdentityPoolId { get; set; }

        [Input("includedPages")]
        private InputList<string>? _includedPages;

        /// <summary>
        /// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
        /// </summary>
        public InputList<string> IncludedPages
        {
            get => _includedPages ?? (_includedPages = new InputList<string>());
            set => _includedPages = value;
        }

        /// <summary>
        /// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is `0.1`.
        /// </summary>
        [Input("sessionSampleRate")]
        public Input<double>? SessionSampleRate { get; set; }

        [Input("telemetries")]
        private InputList<string>? _telemetries;

        /// <summary>
        /// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are `errors`, `performance`, and `http`.
        /// </summary>
        public InputList<string> Telemetries
        {
            get => _telemetries ?? (_telemetries = new InputList<string>());
            set => _telemetries = value;
        }

        public AppMonitorAppMonitorConfigurationGetArgs()
        {
        }
        public static new AppMonitorAppMonitorConfigurationGetArgs Empty => new AppMonitorAppMonitorConfigurationGetArgs();
    }
}
