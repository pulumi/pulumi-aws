// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGateway
{
    /// <summary>
    /// Provides an API Gateway Method Settings, e.g. logging or monitoring.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/api_gateway_method_settings.html.markdown.
    /// </summary>
    public partial class MethodSettings : Pulumi.CustomResource
    {
        /// <summary>
        /// Method path defined as `{resource_path}/{http_method}` for an individual method override, or `*/*` for overriding all methods in the stage.
        /// </summary>
        [Output("methodPath")]
        public Output<string> MethodPath { get; private set; } = null!;

        /// <summary>
        /// The ID of the REST API
        /// </summary>
        [Output("restApi")]
        public Output<string> RestApi { get; private set; } = null!;

        /// <summary>
        /// The settings block, see below.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.MethodSettingsSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// The name of the stage
        /// </summary>
        [Output("stageName")]
        public Output<string> StageName { get; private set; } = null!;


        /// <summary>
        /// Create a MethodSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MethodSettings(string name, MethodSettingsArgs args, CustomResourceOptions? options = null)
            : base("aws:apigateway/methodSettings:MethodSettings", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private MethodSettings(string name, Input<string> id, MethodSettingsState? state = null, CustomResourceOptions? options = null)
            : base("aws:apigateway/methodSettings:MethodSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MethodSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MethodSettings Get(string name, Input<string> id, MethodSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new MethodSettings(name, id, state, options);
        }
    }

    public sealed class MethodSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Method path defined as `{resource_path}/{http_method}` for an individual method override, or `*/*` for overriding all methods in the stage.
        /// </summary>
        [Input("methodPath", required: true)]
        public Input<string> MethodPath { get; set; } = null!;

        /// <summary>
        /// The ID of the REST API
        /// </summary>
        [Input("restApi", required: true)]
        public Input<string> RestApi { get; set; } = null!;

        /// <summary>
        /// The settings block, see below.
        /// </summary>
        [Input("settings", required: true)]
        public Input<Inputs.MethodSettingsSettingsArgs> Settings { get; set; } = null!;

        /// <summary>
        /// The name of the stage
        /// </summary>
        [Input("stageName", required: true)]
        public Input<string> StageName { get; set; } = null!;

        public MethodSettingsArgs()
        {
        }
    }

    public sealed class MethodSettingsState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Method path defined as `{resource_path}/{http_method}` for an individual method override, or `*/*` for overriding all methods in the stage.
        /// </summary>
        [Input("methodPath")]
        public Input<string>? MethodPath { get; set; }

        /// <summary>
        /// The ID of the REST API
        /// </summary>
        [Input("restApi")]
        public Input<string>? RestApi { get; set; }

        /// <summary>
        /// The settings block, see below.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.MethodSettingsSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// The name of the stage
        /// </summary>
        [Input("stageName")]
        public Input<string>? StageName { get; set; }

        public MethodSettingsState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class MethodSettingsSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the cached responses are encrypted.
        /// </summary>
        [Input("cacheDataEncrypted")]
        public Input<bool>? CacheDataEncrypted { get; set; }

        /// <summary>
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
        /// </summary>
        [Input("cacheTtlInSeconds")]
        public Input<int>? CacheTtlInSeconds { get; set; }

        /// <summary>
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
        /// </summary>
        [Input("cachingEnabled")]
        public Input<bool>? CachingEnabled { get; set; }

        /// <summary>
        /// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
        /// </summary>
        [Input("dataTraceEnabled")]
        public Input<bool>? DataTraceEnabled { get; set; }

        /// <summary>
        /// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        /// <summary>
        /// Specifies whether Amazon CloudWatch metrics are enabled for this method.
        /// </summary>
        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        /// <summary>
        /// Specifies whether authorization is required for a cache invalidation request.
        /// </summary>
        [Input("requireAuthorizationForCacheControl")]
        public Input<bool>? RequireAuthorizationForCacheControl { get; set; }

        /// <summary>
        /// Specifies the throttling burst limit.
        /// </summary>
        [Input("throttlingBurstLimit")]
        public Input<int>? ThrottlingBurstLimit { get; set; }

        /// <summary>
        /// Specifies the throttling rate limit.
        /// </summary>
        [Input("throttlingRateLimit")]
        public Input<double>? ThrottlingRateLimit { get; set; }

        /// <summary>
        /// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
        /// </summary>
        [Input("unauthorizedCacheControlHeaderStrategy")]
        public Input<string>? UnauthorizedCacheControlHeaderStrategy { get; set; }

        public MethodSettingsSettingsArgs()
        {
        }
    }

    public sealed class MethodSettingsSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether the cached responses are encrypted.
        /// </summary>
        [Input("cacheDataEncrypted")]
        public Input<bool>? CacheDataEncrypted { get; set; }

        /// <summary>
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
        /// </summary>
        [Input("cacheTtlInSeconds")]
        public Input<int>? CacheTtlInSeconds { get; set; }

        /// <summary>
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
        /// </summary>
        [Input("cachingEnabled")]
        public Input<bool>? CachingEnabled { get; set; }

        /// <summary>
        /// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
        /// </summary>
        [Input("dataTraceEnabled")]
        public Input<bool>? DataTraceEnabled { get; set; }

        /// <summary>
        /// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
        /// </summary>
        [Input("loggingLevel")]
        public Input<string>? LoggingLevel { get; set; }

        /// <summary>
        /// Specifies whether Amazon CloudWatch metrics are enabled for this method.
        /// </summary>
        [Input("metricsEnabled")]
        public Input<bool>? MetricsEnabled { get; set; }

        /// <summary>
        /// Specifies whether authorization is required for a cache invalidation request.
        /// </summary>
        [Input("requireAuthorizationForCacheControl")]
        public Input<bool>? RequireAuthorizationForCacheControl { get; set; }

        /// <summary>
        /// Specifies the throttling burst limit.
        /// </summary>
        [Input("throttlingBurstLimit")]
        public Input<int>? ThrottlingBurstLimit { get; set; }

        /// <summary>
        /// Specifies the throttling rate limit.
        /// </summary>
        [Input("throttlingRateLimit")]
        public Input<double>? ThrottlingRateLimit { get; set; }

        /// <summary>
        /// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
        /// </summary>
        [Input("unauthorizedCacheControlHeaderStrategy")]
        public Input<string>? UnauthorizedCacheControlHeaderStrategy { get; set; }

        public MethodSettingsSettingsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class MethodSettingsSettings
    {
        /// <summary>
        /// Specifies whether the cached responses are encrypted.
        /// </summary>
        public readonly bool? CacheDataEncrypted;
        /// <summary>
        /// Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
        /// </summary>
        public readonly int? CacheTtlInSeconds;
        /// <summary>
        /// Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached. 
        /// </summary>
        public readonly bool? CachingEnabled;
        /// <summary>
        /// Specifies whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
        /// </summary>
        public readonly bool? DataTraceEnabled;
        /// <summary>
        /// Specifies the logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
        /// </summary>
        public readonly string? LoggingLevel;
        /// <summary>
        /// Specifies whether Amazon CloudWatch metrics are enabled for this method.
        /// </summary>
        public readonly bool? MetricsEnabled;
        /// <summary>
        /// Specifies whether authorization is required for a cache invalidation request.
        /// </summary>
        public readonly bool? RequireAuthorizationForCacheControl;
        /// <summary>
        /// Specifies the throttling burst limit.
        /// </summary>
        public readonly int? ThrottlingBurstLimit;
        /// <summary>
        /// Specifies the throttling rate limit.
        /// </summary>
        public readonly double? ThrottlingRateLimit;
        /// <summary>
        /// Specifies how to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
        /// </summary>
        public readonly string? UnauthorizedCacheControlHeaderStrategy;

        [OutputConstructor]
        private MethodSettingsSettings(
            bool? cacheDataEncrypted,
            int? cacheTtlInSeconds,
            bool? cachingEnabled,
            bool? dataTraceEnabled,
            string? loggingLevel,
            bool? metricsEnabled,
            bool? requireAuthorizationForCacheControl,
            int? throttlingBurstLimit,
            double? throttlingRateLimit,
            string? unauthorizedCacheControlHeaderStrategy)
        {
            CacheDataEncrypted = cacheDataEncrypted;
            CacheTtlInSeconds = cacheTtlInSeconds;
            CachingEnabled = cachingEnabled;
            DataTraceEnabled = dataTraceEnabled;
            LoggingLevel = loggingLevel;
            MetricsEnabled = metricsEnabled;
            RequireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
            ThrottlingBurstLimit = throttlingBurstLimit;
            ThrottlingRateLimit = throttlingRateLimit;
            UnauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
        }
    }
    }
}
