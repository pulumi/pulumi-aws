// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    public static class GetTrafficPolicyDocument
    {
        /// <summary>
        /// Generates an Route53 traffic policy document in JSON format for use with resources that expect policy documents such as `aws.route53.TrafficPolicy`.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.GetRegion.Invoke();
        /// 
        ///     var exampleTrafficPolicyDocument = Aws.Route53.GetTrafficPolicyDocument.Invoke(new()
        ///     {
        ///         RecordType = "A",
        ///         StartRule = "site_switch",
        ///         Endpoints = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "my_elb",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = $"elb-111111.{current.Apply(getRegionResult =&gt; getRegionResult.Name)}.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "site_down_banner",
        ///                 Type = "s3-website",
        ///                 Region = current.Apply(getRegionResult =&gt; getRegionResult.Name),
        ///                 Value = "www.example.com",
        ///             },
        ///         },
        ///         Rules = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleInputArgs
        ///             {
        ///                 Id = "site_switch",
        ///                 Type = "failover",
        ///                 Primary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRulePrimaryInputArgs
        ///                 {
        ///                     EndpointReference = "my_elb",
        ///                 },
        ///                 Secondary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleSecondaryInputArgs
        ///                 {
        ///                     EndpointReference = "site_down_banner",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleTrafficPolicy = new Aws.Route53.TrafficPolicy("exampleTrafficPolicy", new()
        ///     {
        ///         Comment = "example comment",
        ///         Document = exampleTrafficPolicyDocument.Apply(getTrafficPolicyDocumentResult =&gt; getTrafficPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Complex Example
        /// 
        /// The following example showcases the use of nested rules within the traffic policy document and introduces the `geoproximity` rule type.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTrafficPolicyDocument = Aws.Route53.GetTrafficPolicyDocument.Invoke(new()
        ///     {
        ///         RecordType = "A",
        ///         StartRule = "geoproximity_rule",
        ///         Endpoints = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "na_endpoint_a",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-111111.us-west-1.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "na_endpoint_b",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-222222.us-west-1.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "eu_endpoint",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-333333.eu-west-1.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "ap_endpoint",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-444444.ap-northeast-2.elb.amazonaws.com",
        ///             },
        ///         },
        ///         Rules = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleInputArgs
        ///             {
        ///                 Id = "na_rule",
        ///                 Type = "failover",
        ///                 Primary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRulePrimaryInputArgs
        ///                 {
        ///                     EndpointReference = "na_endpoint_a",
        ///                 },
        ///                 Secondary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleSecondaryInputArgs
        ///                 {
        ///                     EndpointReference = "na_endpoint_b",
        ///                 },
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleInputArgs
        ///             {
        ///                 Id = "geoproximity_rule",
        ///                 Type = "geoproximity",
        ///                 GeoProximityLocations = new[]
        ///                 {
        ///                     new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleGeoProximityLocationInputArgs
        ///                     {
        ///                         Region = "aws:route53:us-west-1",
        ///                         Bias = "10",
        ///                         EvaluateTargetHealth = true,
        ///                         RuleReference = "na_rule",
        ///                     },
        ///                     new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleGeoProximityLocationInputArgs
        ///                     {
        ///                         Region = "aws:route53:eu-west-1",
        ///                         Bias = "10",
        ///                         EvaluateTargetHealth = true,
        ///                         EndpointReference = "eu_endpoint",
        ///                     },
        ///                     new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleGeoProximityLocationInputArgs
        ///                     {
        ///                         Region = "aws:route53:ap-northeast-2",
        ///                         Bias = "0",
        ///                         EvaluateTargetHealth = true,
        ///                         EndpointReference = "ap_endpoint",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleTrafficPolicy = new Aws.Route53.TrafficPolicy("exampleTrafficPolicy", new()
        ///     {
        ///         Comment = "example comment",
        ///         Document = exampleTrafficPolicyDocument.Apply(getTrafficPolicyDocumentResult =&gt; getTrafficPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTrafficPolicyDocumentResult> InvokeAsync(GetTrafficPolicyDocumentArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTrafficPolicyDocumentResult>("aws:route53/getTrafficPolicyDocument:getTrafficPolicyDocument", args ?? new GetTrafficPolicyDocumentArgs(), options.WithDefaults());

        /// <summary>
        /// Generates an Route53 traffic policy document in JSON format for use with resources that expect policy documents such as `aws.route53.TrafficPolicy`.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.GetRegion.Invoke();
        /// 
        ///     var exampleTrafficPolicyDocument = Aws.Route53.GetTrafficPolicyDocument.Invoke(new()
        ///     {
        ///         RecordType = "A",
        ///         StartRule = "site_switch",
        ///         Endpoints = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "my_elb",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = $"elb-111111.{current.Apply(getRegionResult =&gt; getRegionResult.Name)}.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "site_down_banner",
        ///                 Type = "s3-website",
        ///                 Region = current.Apply(getRegionResult =&gt; getRegionResult.Name),
        ///                 Value = "www.example.com",
        ///             },
        ///         },
        ///         Rules = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleInputArgs
        ///             {
        ///                 Id = "site_switch",
        ///                 Type = "failover",
        ///                 Primary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRulePrimaryInputArgs
        ///                 {
        ///                     EndpointReference = "my_elb",
        ///                 },
        ///                 Secondary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleSecondaryInputArgs
        ///                 {
        ///                     EndpointReference = "site_down_banner",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleTrafficPolicy = new Aws.Route53.TrafficPolicy("exampleTrafficPolicy", new()
        ///     {
        ///         Comment = "example comment",
        ///         Document = exampleTrafficPolicyDocument.Apply(getTrafficPolicyDocumentResult =&gt; getTrafficPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Complex Example
        /// 
        /// The following example showcases the use of nested rules within the traffic policy document and introduces the `geoproximity` rule type.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTrafficPolicyDocument = Aws.Route53.GetTrafficPolicyDocument.Invoke(new()
        ///     {
        ///         RecordType = "A",
        ///         StartRule = "geoproximity_rule",
        ///         Endpoints = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "na_endpoint_a",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-111111.us-west-1.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "na_endpoint_b",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-222222.us-west-1.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "eu_endpoint",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-333333.eu-west-1.elb.amazonaws.com",
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentEndpointInputArgs
        ///             {
        ///                 Id = "ap_endpoint",
        ///                 Type = "elastic-load-balancer",
        ///                 Value = "elb-444444.ap-northeast-2.elb.amazonaws.com",
        ///             },
        ///         },
        ///         Rules = new[]
        ///         {
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleInputArgs
        ///             {
        ///                 Id = "na_rule",
        ///                 Type = "failover",
        ///                 Primary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRulePrimaryInputArgs
        ///                 {
        ///                     EndpointReference = "na_endpoint_a",
        ///                 },
        ///                 Secondary = new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleSecondaryInputArgs
        ///                 {
        ///                     EndpointReference = "na_endpoint_b",
        ///                 },
        ///             },
        ///             new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleInputArgs
        ///             {
        ///                 Id = "geoproximity_rule",
        ///                 Type = "geoproximity",
        ///                 GeoProximityLocations = new[]
        ///                 {
        ///                     new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleGeoProximityLocationInputArgs
        ///                     {
        ///                         Region = "aws:route53:us-west-1",
        ///                         Bias = "10",
        ///                         EvaluateTargetHealth = true,
        ///                         RuleReference = "na_rule",
        ///                     },
        ///                     new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleGeoProximityLocationInputArgs
        ///                     {
        ///                         Region = "aws:route53:eu-west-1",
        ///                         Bias = "10",
        ///                         EvaluateTargetHealth = true,
        ///                         EndpointReference = "eu_endpoint",
        ///                     },
        ///                     new Aws.Route53.Inputs.GetTrafficPolicyDocumentRuleGeoProximityLocationInputArgs
        ///                     {
        ///                         Region = "aws:route53:ap-northeast-2",
        ///                         Bias = "0",
        ///                         EvaluateTargetHealth = true,
        ///                         EndpointReference = "ap_endpoint",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleTrafficPolicy = new Aws.Route53.TrafficPolicy("exampleTrafficPolicy", new()
        ///     {
        ///         Comment = "example comment",
        ///         Document = exampleTrafficPolicyDocument.Apply(getTrafficPolicyDocumentResult =&gt; getTrafficPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTrafficPolicyDocumentResult> Invoke(GetTrafficPolicyDocumentInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTrafficPolicyDocumentResult>("aws:route53/getTrafficPolicyDocument:getTrafficPolicyDocument", args ?? new GetTrafficPolicyDocumentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTrafficPolicyDocumentArgs : global::Pulumi.InvokeArgs
    {
        [Input("endpoints")]
        private List<Inputs.GetTrafficPolicyDocumentEndpointArgs>? _endpoints;

        /// <summary>
        /// Configuration block for the definitions of the endpoints that you want to use in this traffic policy. See below
        /// </summary>
        public List<Inputs.GetTrafficPolicyDocumentEndpointArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new List<Inputs.GetTrafficPolicyDocumentEndpointArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// DNS type of all of the resource record sets that Amazon Route 53 will create based on this traffic policy.
        /// </summary>
        [Input("recordType")]
        public string? RecordType { get; set; }

        [Input("rules")]
        private List<Inputs.GetTrafficPolicyDocumentRuleArgs>? _rules;

        /// <summary>
        /// Configuration block for definitions of the rules that you want to use in this traffic policy. See below
        /// </summary>
        public List<Inputs.GetTrafficPolicyDocumentRuleArgs> Rules
        {
            get => _rules ?? (_rules = new List<Inputs.GetTrafficPolicyDocumentRuleArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// An endpoint to be as the starting point for the traffic policy.
        /// </summary>
        [Input("startEndpoint")]
        public string? StartEndpoint { get; set; }

        /// <summary>
        /// A rule to be as the starting point for the traffic policy.
        /// </summary>
        [Input("startRule")]
        public string? StartRule { get; set; }

        /// <summary>
        /// Version of the traffic policy format.
        /// </summary>
        [Input("version")]
        public string? Version { get; set; }

        public GetTrafficPolicyDocumentArgs()
        {
        }
        public static new GetTrafficPolicyDocumentArgs Empty => new GetTrafficPolicyDocumentArgs();
    }

    public sealed class GetTrafficPolicyDocumentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("endpoints")]
        private InputList<Inputs.GetTrafficPolicyDocumentEndpointInputArgs>? _endpoints;

        /// <summary>
        /// Configuration block for the definitions of the endpoints that you want to use in this traffic policy. See below
        /// </summary>
        public InputList<Inputs.GetTrafficPolicyDocumentEndpointInputArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.GetTrafficPolicyDocumentEndpointInputArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// DNS type of all of the resource record sets that Amazon Route 53 will create based on this traffic policy.
        /// </summary>
        [Input("recordType")]
        public Input<string>? RecordType { get; set; }

        [Input("rules")]
        private InputList<Inputs.GetTrafficPolicyDocumentRuleInputArgs>? _rules;

        /// <summary>
        /// Configuration block for definitions of the rules that you want to use in this traffic policy. See below
        /// </summary>
        public InputList<Inputs.GetTrafficPolicyDocumentRuleInputArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.GetTrafficPolicyDocumentRuleInputArgs>());
            set => _rules = value;
        }

        /// <summary>
        /// An endpoint to be as the starting point for the traffic policy.
        /// </summary>
        [Input("startEndpoint")]
        public Input<string>? StartEndpoint { get; set; }

        /// <summary>
        /// A rule to be as the starting point for the traffic policy.
        /// </summary>
        [Input("startRule")]
        public Input<string>? StartRule { get; set; }

        /// <summary>
        /// Version of the traffic policy format.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetTrafficPolicyDocumentInvokeArgs()
        {
        }
        public static new GetTrafficPolicyDocumentInvokeArgs Empty => new GetTrafficPolicyDocumentInvokeArgs();
    }


    [OutputType]
    public sealed class GetTrafficPolicyDocumentResult
    {
        public readonly ImmutableArray<Outputs.GetTrafficPolicyDocumentEndpointResult> Endpoints;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Standard JSON policy document rendered based on the arguments above.
        /// </summary>
        public readonly string Json;
        public readonly string? RecordType;
        public readonly ImmutableArray<Outputs.GetTrafficPolicyDocumentRuleResult> Rules;
        public readonly string? StartEndpoint;
        public readonly string? StartRule;
        public readonly string? Version;

        [OutputConstructor]
        private GetTrafficPolicyDocumentResult(
            ImmutableArray<Outputs.GetTrafficPolicyDocumentEndpointResult> endpoints,

            string id,

            string json,

            string? recordType,

            ImmutableArray<Outputs.GetTrafficPolicyDocumentRuleResult> rules,

            string? startEndpoint,

            string? startRule,

            string? version)
        {
            Endpoints = endpoints;
            Id = id;
            Json = json;
            RecordType = recordType;
            Rules = rules;
            StartEndpoint = startEndpoint;
            StartRule = startRule;
            Version = version;
        }
    }
}
