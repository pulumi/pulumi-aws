// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    public static class GetResolverRule
    {
        /// <summary>
        /// `aws.route53.ResolverRule` provides details about a specific Route53 Resolver rule.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how to get a Route53 Resolver rule based on its associated domain name and rule type.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.route53.getResolverRule({
        ///     domainName: "subdomain.example.com",
        ///     ruleType: "SYSTEM",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.route53.get_resolver_rule(domain_name="subdomain.example.com",
        ///     rule_type="SYSTEM")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Route53.GetResolverRule.Invoke(new()
        ///     {
        ///         DomainName = "subdomain.example.com",
        ///         RuleType = "SYSTEM",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := route53.LookupResolverRule(ctx, &amp;route53.LookupResolverRuleArgs{
        /// 			DomainName: pulumi.StringRef("subdomain.example.com"),
        /// 			RuleType:   pulumi.StringRef("SYSTEM"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.route53.Route53Functions;
        /// import com.pulumi.aws.route53.inputs.GetResolverRuleArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = Route53Functions.getResolverRule(GetResolverRuleArgs.builder()
        ///             .domainName("subdomain.example.com")
        ///             .ruleType("SYSTEM")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:route53:getResolverRule
        ///       Arguments:
        ///         domainName: subdomain.example.com
        ///         ruleType: SYSTEM
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetResolverRuleResult> InvokeAsync(GetResolverRuleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetResolverRuleResult>("aws:route53/getResolverRule:getResolverRule", args ?? new GetResolverRuleArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.route53.ResolverRule` provides details about a specific Route53 Resolver rule.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how to get a Route53 Resolver rule based on its associated domain name and rule type.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.route53.getResolverRule({
        ///     domainName: "subdomain.example.com",
        ///     ruleType: "SYSTEM",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.route53.get_resolver_rule(domain_name="subdomain.example.com",
        ///     rule_type="SYSTEM")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Route53.GetResolverRule.Invoke(new()
        ///     {
        ///         DomainName = "subdomain.example.com",
        ///         RuleType = "SYSTEM",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := route53.LookupResolverRule(ctx, &amp;route53.LookupResolverRuleArgs{
        /// 			DomainName: pulumi.StringRef("subdomain.example.com"),
        /// 			RuleType:   pulumi.StringRef("SYSTEM"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.route53.Route53Functions;
        /// import com.pulumi.aws.route53.inputs.GetResolverRuleArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = Route53Functions.getResolverRule(GetResolverRuleArgs.builder()
        ///             .domainName("subdomain.example.com")
        ///             .ruleType("SYSTEM")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:route53:getResolverRule
        ///       Arguments:
        ///         domainName: subdomain.example.com
        ///         ruleType: SYSTEM
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetResolverRuleResult> Invoke(GetResolverRuleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetResolverRuleResult>("aws:route53/getResolverRule:getResolverRule", args ?? new GetResolverRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetResolverRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("domainName")]
        public string? DomainName { get; set; }

        /// <summary>
        /// Friendly name of the desired resolver rule. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("resolverEndpointId")]
        public string? ResolverEndpointId { get; set; }

        /// <summary>
        /// ID of the desired resolver rule. Conflicts with `domain_name`, `name`, `resolver_endpoint_id` and `rule_type`.
        /// </summary>
        [Input("resolverRuleId")]
        public string? ResolverRuleId { get; set; }

        /// <summary>
        /// Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("ruleType")]
        public string? RuleType { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resolver rule.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetResolverRuleArgs()
        {
        }
        public static new GetResolverRuleArgs Empty => new GetResolverRuleArgs();
    }

    public sealed class GetResolverRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain name the desired resolver rule forwards DNS queries for. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Friendly name of the desired resolver rule. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the outbound resolver endpoint of the desired resolver rule. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("resolverEndpointId")]
        public Input<string>? ResolverEndpointId { get; set; }

        /// <summary>
        /// ID of the desired resolver rule. Conflicts with `domain_name`, `name`, `resolver_endpoint_id` and `rule_type`.
        /// </summary>
        [Input("resolverRuleId")]
        public Input<string>? ResolverRuleId { get; set; }

        /// <summary>
        /// Rule type of the desired resolver rule. Valid values are `FORWARD`, `SYSTEM` and `RECURSIVE`. Conflicts with `resolver_rule_id`.
        /// </summary>
        [Input("ruleType")]
        public Input<string>? RuleType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resolver rule.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetResolverRuleInvokeArgs()
        {
        }
        public static new GetResolverRuleInvokeArgs Empty => new GetResolverRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetResolverRuleResult
    {
        /// <summary>
        /// ARN (Amazon Resource Name) for the resolver rule.
        /// </summary>
        public readonly string Arn;
        public readonly string DomainName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// When a rule is shared with another AWS account, the account ID of the account that the rule is shared with.
        /// </summary>
        public readonly string OwnerId;
        public readonly string ResolverEndpointId;
        public readonly string ResolverRuleId;
        public readonly string RuleType;
        /// <summary>
        /// Whether the rules is shared and, if so, whether the current account is sharing the rule with another account, or another account is sharing the rule with the current account.
        /// Values are `NOT_SHARED`, `SHARED_BY_ME` or `SHARED_WITH_ME`
        /// </summary>
        public readonly string ShareStatus;
        /// <summary>
        /// Map of tags assigned to the resolver rule.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetResolverRuleResult(
            string arn,

            string domainName,

            string id,

            string name,

            string ownerId,

            string resolverEndpointId,

            string resolverRuleId,

            string ruleType,

            string shareStatus,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            DomainName = domainName;
            Id = id;
            Name = name;
            OwnerId = ownerId;
            ResolverEndpointId = resolverEndpointId;
            ResolverRuleId = resolverRuleId;
            RuleType = ruleType;
            ShareStatus = shareStatus;
            Tags = tags;
        }
    }
}
