// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53.Outputs
{

    [OutputType]
    public sealed class RecordsExclusiveResourceRecordSetGeoproximityLocation
    {
        /// <summary>
        /// AWS region of the resource where DNS traffic is directed to.
        /// </summary>
        public readonly string? AwsRegion;
        /// <summary>
        /// Increases or decreases the size of the geographic region from which Route 53 routes traffic to a resource.
        /// To expand the size of the geographic region from which Route 53 routes traffic to a resource, specify a positive integer from `1` to `99`.
        /// To shrink the size of the geographic region from which Route 53 routes traffic to a resource, specify a negative bias of `-1` to `-99`.
        /// See the [AWS documentation](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geoproximity.html) for additional details.
        /// </summary>
        public readonly int? Bias;
        /// <summary>
        /// Coordinates for a geoproximity resource record.
        /// See `coordinates` below.
        /// </summary>
        public readonly Outputs.RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates? Coordinates;
        /// <summary>
        /// AWS local zone group.
        /// Identify the Local Zones Group for a specific Local Zone by using the [`describe-availability-zones` CLI command](https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-availability-zones.html).
        /// </summary>
        public readonly string? LocalZoneGroup;

        [OutputConstructor]
        private RecordsExclusiveResourceRecordSetGeoproximityLocation(
            string? awsRegion,

            int? bias,

            Outputs.RecordsExclusiveResourceRecordSetGeoproximityLocationCoordinates? coordinates,

            string? localZoneGroup)
        {
            AwsRegion = awsRegion;
            Bias = bias;
            Coordinates = coordinates;
            LocalZoneGroup = localZoneGroup;
        }
    }
}
