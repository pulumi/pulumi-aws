// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    /// <summary>
    /// Provides a Route 53 Resolver query logging configuration association resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Route53.ResolverQueryLogConfigAssociation("example", new Aws.Route53.ResolverQueryLogConfigAssociationArgs
    ///         {
    ///             ResolverQueryLogConfigId = aws_route53_resolver_query_log_config.Example.Id,
    ///             ResourceId = aws_vpc.Example.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    ///  Route 53 Resolver query logging configuration associations can be imported using the Route 53 Resolver query logging configuration association ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation example rqlca-b320624fef3c4d70
    /// ```
    /// </summary>
    public partial class ResolverQueryLogConfigAssociation : Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
        /// </summary>
        [Output("resolverQueryLogConfigId")]
        public Output<string> ResolverQueryLogConfigId { get; private set; } = null!;

        /// <summary>
        /// The ID of a VPC that you want this query logging configuration to log queries for.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;


        /// <summary>
        /// Create a ResolverQueryLogConfigAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResolverQueryLogConfigAssociation(string name, ResolverQueryLogConfigAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation", name, args ?? new ResolverQueryLogConfigAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResolverQueryLogConfigAssociation(string name, Input<string> id, ResolverQueryLogConfigAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResolverQueryLogConfigAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResolverQueryLogConfigAssociation Get(string name, Input<string> id, ResolverQueryLogConfigAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new ResolverQueryLogConfigAssociation(name, id, state, options);
        }
    }

    public sealed class ResolverQueryLogConfigAssociationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
        /// </summary>
        [Input("resolverQueryLogConfigId", required: true)]
        public Input<string> ResolverQueryLogConfigId { get; set; } = null!;

        /// <summary>
        /// The ID of a VPC that you want this query logging configuration to log queries for.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        public ResolverQueryLogConfigAssociationArgs()
        {
        }
    }

    public sealed class ResolverQueryLogConfigAssociationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the Route 53 Resolver query logging configuration that you want to associate a VPC with.
        /// </summary>
        [Input("resolverQueryLogConfigId")]
        public Input<string>? ResolverQueryLogConfigId { get; set; }

        /// <summary>
        /// The ID of a VPC that you want this query logging configuration to log queries for.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        public ResolverQueryLogConfigAssociationState()
        {
        }
    }
}
