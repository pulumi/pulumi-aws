// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    /// <summary>
    /// Provides a Route53 health check.
    /// 
    /// ## Example Usage
    /// 
    /// ### Connectivity and HTTP Status Code Check
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Route53.HealthCheck("example", new Aws.Route53.HealthCheckArgs
    ///         {
    ///             FailureThreshold = 5,
    ///             Fqdn = "example.com",
    ///             Port = 80,
    ///             RequestInterval = 30,
    ///             ResourcePath = "/",
    ///             Tags = 
    ///             {
    ///                 { "Name", "tf-test-health-check" },
    ///             },
    ///             Type = "HTTP",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### Connectivity and String Matching Check
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Route53.HealthCheck("example", new Aws.Route53.HealthCheckArgs
    ///         {
    ///             FailureThreshold = 5,
    ///             Fqdn = "example.com",
    ///             Port = 443,
    ///             RequestInterval = 30,
    ///             ResourcePath = "/",
    ///             SearchString = "example",
    ///             Type = "HTTPS_STR_MATCH",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### Aggregate Check
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var parent = new Aws.Route53.HealthCheck("parent", new Aws.Route53.HealthCheckArgs
    ///         {
    ///             ChildHealthThreshold = 1,
    ///             ChildHealthchecks = 
    ///             {
    ///                 aws_route53_health_check.Child.Id,
    ///             },
    ///             Tags = 
    ///             {
    ///                 { "Name", "tf-test-calculated-health-check" },
    ///             },
    ///             Type = "CALCULATED",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ### CloudWatch Alarm Check
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foobar = new Aws.CloudWatch.MetricAlarm("foobar", new Aws.CloudWatch.MetricAlarmArgs
    ///         {
    ///             AlarmDescription = "This metric monitors ec2 cpu utilization",
    ///             ComparisonOperator = "GreaterThanOrEqualToThreshold",
    ///             EvaluationPeriods = 2,
    ///             MetricName = "CPUUtilization",
    ///             Namespace = "AWS/EC2",
    ///             Period = 120,
    ///             Statistic = "Average",
    ///             Threshold = 80,
    ///         });
    ///         var foo = new Aws.Route53.HealthCheck("foo", new Aws.Route53.HealthCheckArgs
    ///         {
    ///             CloudwatchAlarmName = foobar.Name,
    ///             CloudwatchAlarmRegion = "us-west-2",
    ///             InsufficientDataHealthStatus = "Healthy",
    ///             Type = "CLOUDWATCH_METRIC",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class HealthCheck : Pulumi.CustomResource
    {
        /// <summary>
        /// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
        /// </summary>
        [Output("childHealthThreshold")]
        public Output<int?> ChildHealthThreshold { get; private set; } = null!;

        /// <summary>
        /// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
        /// </summary>
        [Output("childHealthchecks")]
        public Output<ImmutableArray<string>> ChildHealthchecks { get; private set; } = null!;

        /// <summary>
        /// The name of the CloudWatch alarm.
        /// </summary>
        [Output("cloudwatchAlarmName")]
        public Output<string?> CloudwatchAlarmName { get; private set; } = null!;

        /// <summary>
        /// The CloudWatchRegion that the CloudWatch alarm was created in.
        /// </summary>
        [Output("cloudwatchAlarmRegion")]
        public Output<string?> CloudwatchAlarmRegion { get; private set; } = null!;

        /// <summary>
        /// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enable_sni` defaults to `true`, when `type` is anything else `enable_sni` defaults to `false`.
        /// </summary>
        [Output("enableSni")]
        public Output<bool> EnableSni { get; private set; } = null!;

        /// <summary>
        /// The number of consecutive health checks that an endpoint must pass or fail.
        /// </summary>
        [Output("failureThreshold")]
        public Output<int?> FailureThreshold { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name of the endpoint to be checked.
        /// </summary>
        [Output("fqdn")]
        public Output<string?> Fqdn { get; private set; } = null!;

        /// <summary>
        /// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
        /// </summary>
        [Output("insufficientDataHealthStatus")]
        public Output<string?> InsufficientDataHealthStatus { get; private set; } = null!;

        /// <summary>
        /// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
        /// </summary>
        [Output("invertHealthcheck")]
        public Output<bool?> InvertHealthcheck { get; private set; } = null!;

        /// <summary>
        /// The IP address of the endpoint to be checked.
        /// </summary>
        [Output("ipAddress")]
        public Output<string?> IpAddress { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
        /// </summary>
        [Output("measureLatency")]
        public Output<bool?> MeasureLatency { get; private set; } = null!;

        /// <summary>
        /// The port of the endpoint to be checked.
        /// </summary>
        [Output("port")]
        public Output<int?> Port { get; private set; } = null!;

        /// <summary>
        /// This is a reference name used in Caller Reference
        /// (helpful for identifying single health_check set amongst others)
        /// </summary>
        [Output("referenceName")]
        public Output<string?> ReferenceName { get; private set; } = null!;

        /// <summary>
        /// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
        /// </summary>
        [Output("regions")]
        public Output<ImmutableArray<string>> Regions { get; private set; } = null!;

        /// <summary>
        /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
        /// </summary>
        [Output("requestInterval")]
        public Output<int?> RequestInterval { get; private set; } = null!;

        /// <summary>
        /// The path that you want Amazon Route 53 to request when performing health checks.
        /// </summary>
        [Output("resourcePath")]
        public Output<string?> ResourcePath { get; private set; } = null!;

        /// <summary>
        /// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
        /// </summary>
        [Output("searchString")]
        public Output<string?> SearchString { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the health check.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED` and `CLOUDWATCH_METRIC`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a HealthCheck resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public HealthCheck(string name, HealthCheckArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/healthCheck:HealthCheck", name, args ?? new HealthCheckArgs(), MakeResourceOptions(options, ""))
        {
        }

        private HealthCheck(string name, Input<string> id, HealthCheckState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/healthCheck:HealthCheck", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing HealthCheck resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static HealthCheck Get(string name, Input<string> id, HealthCheckState? state = null, CustomResourceOptions? options = null)
        {
            return new HealthCheck(name, id, state, options);
        }
    }

    public sealed class HealthCheckArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
        /// </summary>
        [Input("childHealthThreshold")]
        public Input<int>? ChildHealthThreshold { get; set; }

        [Input("childHealthchecks")]
        private InputList<string>? _childHealthchecks;

        /// <summary>
        /// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
        /// </summary>
        public InputList<string> ChildHealthchecks
        {
            get => _childHealthchecks ?? (_childHealthchecks = new InputList<string>());
            set => _childHealthchecks = value;
        }

        /// <summary>
        /// The name of the CloudWatch alarm.
        /// </summary>
        [Input("cloudwatchAlarmName")]
        public Input<string>? CloudwatchAlarmName { get; set; }

        /// <summary>
        /// The CloudWatchRegion that the CloudWatch alarm was created in.
        /// </summary>
        [Input("cloudwatchAlarmRegion")]
        public Input<string>? CloudwatchAlarmRegion { get; set; }

        /// <summary>
        /// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enable_sni` defaults to `true`, when `type` is anything else `enable_sni` defaults to `false`.
        /// </summary>
        [Input("enableSni")]
        public Input<bool>? EnableSni { get; set; }

        /// <summary>
        /// The number of consecutive health checks that an endpoint must pass or fail.
        /// </summary>
        [Input("failureThreshold")]
        public Input<int>? FailureThreshold { get; set; }

        /// <summary>
        /// The fully qualified domain name of the endpoint to be checked.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
        /// </summary>
        [Input("insufficientDataHealthStatus")]
        public Input<string>? InsufficientDataHealthStatus { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
        /// </summary>
        [Input("invertHealthcheck")]
        public Input<bool>? InvertHealthcheck { get; set; }

        /// <summary>
        /// The IP address of the endpoint to be checked.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
        /// </summary>
        [Input("measureLatency")]
        public Input<bool>? MeasureLatency { get; set; }

        /// <summary>
        /// The port of the endpoint to be checked.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// This is a reference name used in Caller Reference
        /// (helpful for identifying single health_check set amongst others)
        /// </summary>
        [Input("referenceName")]
        public Input<string>? ReferenceName { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
        /// </summary>
        [Input("requestInterval")]
        public Input<int>? RequestInterval { get; set; }

        /// <summary>
        /// The path that you want Amazon Route 53 to request when performing health checks.
        /// </summary>
        [Input("resourcePath")]
        public Input<string>? ResourcePath { get; set; }

        /// <summary>
        /// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
        /// </summary>
        [Input("searchString")]
        public Input<string>? SearchString { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A map of tags to assign to the health check.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED` and `CLOUDWATCH_METRIC`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public HealthCheckArgs()
        {
        }
    }

    public sealed class HealthCheckState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
        /// </summary>
        [Input("childHealthThreshold")]
        public Input<int>? ChildHealthThreshold { get; set; }

        [Input("childHealthchecks")]
        private InputList<string>? _childHealthchecks;

        /// <summary>
        /// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
        /// </summary>
        public InputList<string> ChildHealthchecks
        {
            get => _childHealthchecks ?? (_childHealthchecks = new InputList<string>());
            set => _childHealthchecks = value;
        }

        /// <summary>
        /// The name of the CloudWatch alarm.
        /// </summary>
        [Input("cloudwatchAlarmName")]
        public Input<string>? CloudwatchAlarmName { get; set; }

        /// <summary>
        /// The CloudWatchRegion that the CloudWatch alarm was created in.
        /// </summary>
        [Input("cloudwatchAlarmRegion")]
        public Input<string>? CloudwatchAlarmRegion { get; set; }

        /// <summary>
        /// A boolean value that indicates whether Route53 should send the `fqdn` to the endpoint when performing the health check. This defaults to AWS' defaults: when the `type` is "HTTPS" `enable_sni` defaults to `true`, when `type` is anything else `enable_sni` defaults to `false`.
        /// </summary>
        [Input("enableSni")]
        public Input<bool>? EnableSni { get; set; }

        /// <summary>
        /// The number of consecutive health checks that an endpoint must pass or fail.
        /// </summary>
        [Input("failureThreshold")]
        public Input<int>? FailureThreshold { get; set; }

        /// <summary>
        /// The fully qualified domain name of the endpoint to be checked.
        /// </summary>
        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        /// <summary>
        /// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are `Healthy` , `Unhealthy` and `LastKnownStatus`.
        /// </summary>
        [Input("insufficientDataHealthStatus")]
        public Input<string>? InsufficientDataHealthStatus { get; set; }

        /// <summary>
        /// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
        /// </summary>
        [Input("invertHealthcheck")]
        public Input<bool>? InvertHealthcheck { get; set; }

        /// <summary>
        /// The IP address of the endpoint to be checked.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
        /// </summary>
        [Input("measureLatency")]
        public Input<bool>? MeasureLatency { get; set; }

        /// <summary>
        /// The port of the endpoint to be checked.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// This is a reference name used in Caller Reference
        /// (helpful for identifying single health_check set amongst others)
        /// </summary>
        [Input("referenceName")]
        public Input<string>? ReferenceName { get; set; }

        [Input("regions")]
        private InputList<string>? _regions;

        /// <summary>
        /// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
        /// </summary>
        public InputList<string> Regions
        {
            get => _regions ?? (_regions = new InputList<string>());
            set => _regions = value;
        }

        /// <summary>
        /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
        /// </summary>
        [Input("requestInterval")]
        public Input<int>? RequestInterval { get; set; }

        /// <summary>
        /// The path that you want Amazon Route 53 to request when performing health checks.
        /// </summary>
        [Input("resourcePath")]
        public Input<string>? ResourcePath { get; set; }

        /// <summary>
        /// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with `HTTP_STR_MATCH` and `HTTPS_STR_MATCH`.
        /// </summary>
        [Input("searchString")]
        public Input<string>? SearchString { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A map of tags to assign to the health check.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The protocol to use when performing health checks. Valid values are `HTTP`, `HTTPS`, `HTTP_STR_MATCH`, `HTTPS_STR_MATCH`, `TCP`, `CALCULATED` and `CLOUDWATCH_METRIC`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public HealthCheckState()
        {
        }
    }
}
