// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    public static class GetZone
    {
        public static Task<GetZoneResult> InvokeAsync(GetZoneArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZoneResult>("aws:route53/getZone:getZone", args ?? new GetZoneArgs(), options.WithDefaults());

        public static Output<GetZoneResult> Invoke(GetZoneInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZoneResult>("aws:route53/getZone:getZone", args ?? new GetZoneInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZoneArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("privateZone")]
        public bool? PrivateZone { get; set; }

        [Input("resourceRecordSetCount")]
        public int? ResourceRecordSetCount { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public string? VpcId { get; set; }

        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetZoneArgs()
        {
        }
        public static new GetZoneArgs Empty => new GetZoneArgs();
    }

    public sealed class GetZoneInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("privateZone")]
        public Input<bool>? PrivateZone { get; set; }

        [Input("resourceRecordSetCount")]
        public Input<int>? ResourceRecordSetCount { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetZoneInvokeArgs()
        {
        }
        public static new GetZoneInvokeArgs Empty => new GetZoneInvokeArgs();
    }


    [OutputType]
    public sealed class GetZoneResult
    {
        public readonly string Arn;
        public readonly string CallerReference;
        public readonly string Comment;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string LinkedServiceDescription;
        public readonly string LinkedServicePrincipal;
        public readonly string Name;
        public readonly ImmutableArray<string> NameServers;
        public readonly string PrimaryNameServer;
        public readonly bool? PrivateZone;
        public readonly int ResourceRecordSetCount;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;
        public readonly string ZoneId;

        [OutputConstructor]
        private GetZoneResult(
            string arn,

            string callerReference,

            string comment,

            string id,

            string linkedServiceDescription,

            string linkedServicePrincipal,

            string name,

            ImmutableArray<string> nameServers,

            string primaryNameServer,

            bool? privateZone,

            int resourceRecordSetCount,

            ImmutableDictionary<string, string> tags,

            string vpcId,

            string zoneId)
        {
            Arn = arn;
            CallerReference = callerReference;
            Comment = comment;
            Id = id;
            LinkedServiceDescription = linkedServiceDescription;
            LinkedServicePrincipal = linkedServicePrincipal;
            Name = name;
            NameServers = nameServers;
            PrimaryNameServer = primaryNameServer;
            PrivateZone = privateZone;
            ResourceRecordSetCount = resourceRecordSetCount;
            Tags = tags;
            VpcId = vpcId;
            ZoneId = zoneId;
        }
    }
}
