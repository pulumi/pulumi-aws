// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    [AwsResourceType("aws:route53/keySigningKey:KeySigningKey")]
    public partial class KeySigningKey : global::Pulumi.CustomResource
    {
        [Output("digestAlgorithmMnemonic")]
        public Output<string> DigestAlgorithmMnemonic { get; private set; } = null!;

        [Output("digestAlgorithmType")]
        public Output<int> DigestAlgorithmType { get; private set; } = null!;

        [Output("digestValue")]
        public Output<string> DigestValue { get; private set; } = null!;

        [Output("dnskeyRecord")]
        public Output<string> DnskeyRecord { get; private set; } = null!;

        [Output("dsRecord")]
        public Output<string> DsRecord { get; private set; } = null!;

        [Output("flag")]
        public Output<int> Flag { get; private set; } = null!;

        [Output("hostedZoneId")]
        public Output<string> HostedZoneId { get; private set; } = null!;

        [Output("keyManagementServiceArn")]
        public Output<string> KeyManagementServiceArn { get; private set; } = null!;

        [Output("keyTag")]
        public Output<int> KeyTag { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        [Output("signingAlgorithmMnemonic")]
        public Output<string> SigningAlgorithmMnemonic { get; private set; } = null!;

        [Output("signingAlgorithmType")]
        public Output<int> SigningAlgorithmType { get; private set; } = null!;

        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a KeySigningKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeySigningKey(string name, KeySigningKeyArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/keySigningKey:KeySigningKey", name, args ?? new KeySigningKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeySigningKey(string name, Input<string> id, KeySigningKeyState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/keySigningKey:KeySigningKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeySigningKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeySigningKey Get(string name, Input<string> id, KeySigningKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new KeySigningKey(name, id, state, options);
        }
    }

    public sealed class KeySigningKeyArgs : global::Pulumi.ResourceArgs
    {
        [Input("hostedZoneId", required: true)]
        public Input<string> HostedZoneId { get; set; } = null!;

        [Input("keyManagementServiceArn", required: true)]
        public Input<string> KeyManagementServiceArn { get; set; } = null!;

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public KeySigningKeyArgs()
        {
        }
        public static new KeySigningKeyArgs Empty => new KeySigningKeyArgs();
    }

    public sealed class KeySigningKeyState : global::Pulumi.ResourceArgs
    {
        [Input("digestAlgorithmMnemonic")]
        public Input<string>? DigestAlgorithmMnemonic { get; set; }

        [Input("digestAlgorithmType")]
        public Input<int>? DigestAlgorithmType { get; set; }

        [Input("digestValue")]
        public Input<string>? DigestValue { get; set; }

        [Input("dnskeyRecord")]
        public Input<string>? DnskeyRecord { get; set; }

        [Input("dsRecord")]
        public Input<string>? DsRecord { get; set; }

        [Input("flag")]
        public Input<int>? Flag { get; set; }

        [Input("hostedZoneId")]
        public Input<string>? HostedZoneId { get; set; }

        [Input("keyManagementServiceArn")]
        public Input<string>? KeyManagementServiceArn { get; set; }

        [Input("keyTag")]
        public Input<int>? KeyTag { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("signingAlgorithmMnemonic")]
        public Input<string>? SigningAlgorithmMnemonic { get; set; }

        [Input("signingAlgorithmType")]
        public Input<int>? SigningAlgorithmType { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public KeySigningKeyState()
        {
        }
        public static new KeySigningKeyState Empty => new KeySigningKeyState();
    }
}
