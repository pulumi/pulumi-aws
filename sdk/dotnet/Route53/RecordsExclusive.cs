// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    /// <summary>
    /// ## Import
    /// 
    /// Using `pulumi import`, import Route 53 Records Exclusive using the `zone_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:route53/recordsExclusive:RecordsExclusive example ABCD1234
    /// ```
    /// </summary>
    [AwsResourceType("aws:route53/recordsExclusive:RecordsExclusive")]
    public partial class RecordsExclusive : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of all resource record sets associated with the hosted zone.
        /// See `resource_record_set` below.
        /// </summary>
        [Output("resourceRecordSets")]
        public Output<ImmutableArray<Outputs.RecordsExclusiveResourceRecordSet>> ResourceRecordSets { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.RecordsExclusiveTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// ID of the hosted zone containing the resource record sets.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a RecordsExclusive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RecordsExclusive(string name, RecordsExclusiveArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/recordsExclusive:RecordsExclusive", name, args ?? new RecordsExclusiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RecordsExclusive(string name, Input<string> id, RecordsExclusiveState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/recordsExclusive:RecordsExclusive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RecordsExclusive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RecordsExclusive Get(string name, Input<string> id, RecordsExclusiveState? state = null, CustomResourceOptions? options = null)
        {
            return new RecordsExclusive(name, id, state, options);
        }
    }

    public sealed class RecordsExclusiveArgs : global::Pulumi.ResourceArgs
    {
        [Input("resourceRecordSets")]
        private InputList<Inputs.RecordsExclusiveResourceRecordSetArgs>? _resourceRecordSets;

        /// <summary>
        /// A list of all resource record sets associated with the hosted zone.
        /// See `resource_record_set` below.
        /// </summary>
        public InputList<Inputs.RecordsExclusiveResourceRecordSetArgs> ResourceRecordSets
        {
            get => _resourceRecordSets ?? (_resourceRecordSets = new InputList<Inputs.RecordsExclusiveResourceRecordSetArgs>());
            set => _resourceRecordSets = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RecordsExclusiveTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// ID of the hosted zone containing the resource record sets.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RecordsExclusiveArgs()
        {
        }
        public static new RecordsExclusiveArgs Empty => new RecordsExclusiveArgs();
    }

    public sealed class RecordsExclusiveState : global::Pulumi.ResourceArgs
    {
        [Input("resourceRecordSets")]
        private InputList<Inputs.RecordsExclusiveResourceRecordSetGetArgs>? _resourceRecordSets;

        /// <summary>
        /// A list of all resource record sets associated with the hosted zone.
        /// See `resource_record_set` below.
        /// </summary>
        public InputList<Inputs.RecordsExclusiveResourceRecordSetGetArgs> ResourceRecordSets
        {
            get => _resourceRecordSets ?? (_resourceRecordSets = new InputList<Inputs.RecordsExclusiveResourceRecordSetGetArgs>());
            set => _resourceRecordSets = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RecordsExclusiveTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// ID of the hosted zone containing the resource record sets.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RecordsExclusiveState()
        {
        }
        public static new RecordsExclusiveState Empty => new RecordsExclusiveState();
    }
}
