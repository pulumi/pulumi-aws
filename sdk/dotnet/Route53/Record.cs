// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    [AwsResourceType("aws:route53/record:Record")]
    public partial class Record : global::Pulumi.CustomResource
    {
        [Output("aliases")]
        public Output<ImmutableArray<Outputs.RecordAlias>> Aliases { get; private set; } = null!;

        [Output("allowOverwrite")]
        public Output<bool> AllowOverwrite { get; private set; } = null!;

        [Output("failoverRoutingPolicies")]
        public Output<ImmutableArray<Outputs.RecordFailoverRoutingPolicy>> FailoverRoutingPolicies { get; private set; } = null!;

        [Output("fqdn")]
        public Output<string> Fqdn { get; private set; } = null!;

        [Output("geolocationRoutingPolicies")]
        public Output<ImmutableArray<Outputs.RecordGeolocationRoutingPolicy>> GeolocationRoutingPolicies { get; private set; } = null!;

        [Output("healthCheckId")]
        public Output<string?> HealthCheckId { get; private set; } = null!;

        [Output("latencyRoutingPolicies")]
        public Output<ImmutableArray<Outputs.RecordLatencyRoutingPolicy>> LatencyRoutingPolicies { get; private set; } = null!;

        [Output("multivalueAnswerRoutingPolicy")]
        public Output<bool?> MultivalueAnswerRoutingPolicy { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("records")]
        public Output<ImmutableArray<string>> Records { get; private set; } = null!;

        [Output("setIdentifier")]
        public Output<string?> SetIdentifier { get; private set; } = null!;

        [Output("ttl")]
        public Output<int?> Ttl { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("weightedRoutingPolicies")]
        public Output<ImmutableArray<Outputs.RecordWeightedRoutingPolicy>> WeightedRoutingPolicies { get; private set; } = null!;

        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Record resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Record(string name, RecordArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/record:Record", name, args ?? new RecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Record(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/record:Record", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Record resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Record Get(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
        {
            return new Record(name, id, state, options);
        }
    }

    public sealed class RecordArgs : global::Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<Inputs.RecordAliasArgs>? _aliases;
        public InputList<Inputs.RecordAliasArgs> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<Inputs.RecordAliasArgs>());
            set => _aliases = value;
        }

        [Input("allowOverwrite")]
        public Input<bool>? AllowOverwrite { get; set; }

        [Input("failoverRoutingPolicies")]
        private InputList<Inputs.RecordFailoverRoutingPolicyArgs>? _failoverRoutingPolicies;
        public InputList<Inputs.RecordFailoverRoutingPolicyArgs> FailoverRoutingPolicies
        {
            get => _failoverRoutingPolicies ?? (_failoverRoutingPolicies = new InputList<Inputs.RecordFailoverRoutingPolicyArgs>());
            set => _failoverRoutingPolicies = value;
        }

        [Input("geolocationRoutingPolicies")]
        private InputList<Inputs.RecordGeolocationRoutingPolicyArgs>? _geolocationRoutingPolicies;
        public InputList<Inputs.RecordGeolocationRoutingPolicyArgs> GeolocationRoutingPolicies
        {
            get => _geolocationRoutingPolicies ?? (_geolocationRoutingPolicies = new InputList<Inputs.RecordGeolocationRoutingPolicyArgs>());
            set => _geolocationRoutingPolicies = value;
        }

        [Input("healthCheckId")]
        public Input<string>? HealthCheckId { get; set; }

        [Input("latencyRoutingPolicies")]
        private InputList<Inputs.RecordLatencyRoutingPolicyArgs>? _latencyRoutingPolicies;
        public InputList<Inputs.RecordLatencyRoutingPolicyArgs> LatencyRoutingPolicies
        {
            get => _latencyRoutingPolicies ?? (_latencyRoutingPolicies = new InputList<Inputs.RecordLatencyRoutingPolicyArgs>());
            set => _latencyRoutingPolicies = value;
        }

        [Input("multivalueAnswerRoutingPolicy")]
        public Input<bool>? MultivalueAnswerRoutingPolicy { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("records")]
        private InputList<string>? _records;
        public InputList<string> Records
        {
            get => _records ?? (_records = new InputList<string>());
            set => _records = value;
        }

        [Input("setIdentifier")]
        public Input<string>? SetIdentifier { get; set; }

        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        [Input("type", required: true)]
        public InputUnion<string, Pulumi.Aws.Route53.RecordType> Type { get; set; } = null!;

        [Input("weightedRoutingPolicies")]
        private InputList<Inputs.RecordWeightedRoutingPolicyArgs>? _weightedRoutingPolicies;
        public InputList<Inputs.RecordWeightedRoutingPolicyArgs> WeightedRoutingPolicies
        {
            get => _weightedRoutingPolicies ?? (_weightedRoutingPolicies = new InputList<Inputs.RecordWeightedRoutingPolicyArgs>());
            set => _weightedRoutingPolicies = value;
        }

        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public RecordArgs()
        {
        }
        public static new RecordArgs Empty => new RecordArgs();
    }

    public sealed class RecordState : global::Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<Inputs.RecordAliasGetArgs>? _aliases;
        public InputList<Inputs.RecordAliasGetArgs> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<Inputs.RecordAliasGetArgs>());
            set => _aliases = value;
        }

        [Input("allowOverwrite")]
        public Input<bool>? AllowOverwrite { get; set; }

        [Input("failoverRoutingPolicies")]
        private InputList<Inputs.RecordFailoverRoutingPolicyGetArgs>? _failoverRoutingPolicies;
        public InputList<Inputs.RecordFailoverRoutingPolicyGetArgs> FailoverRoutingPolicies
        {
            get => _failoverRoutingPolicies ?? (_failoverRoutingPolicies = new InputList<Inputs.RecordFailoverRoutingPolicyGetArgs>());
            set => _failoverRoutingPolicies = value;
        }

        [Input("fqdn")]
        public Input<string>? Fqdn { get; set; }

        [Input("geolocationRoutingPolicies")]
        private InputList<Inputs.RecordGeolocationRoutingPolicyGetArgs>? _geolocationRoutingPolicies;
        public InputList<Inputs.RecordGeolocationRoutingPolicyGetArgs> GeolocationRoutingPolicies
        {
            get => _geolocationRoutingPolicies ?? (_geolocationRoutingPolicies = new InputList<Inputs.RecordGeolocationRoutingPolicyGetArgs>());
            set => _geolocationRoutingPolicies = value;
        }

        [Input("healthCheckId")]
        public Input<string>? HealthCheckId { get; set; }

        [Input("latencyRoutingPolicies")]
        private InputList<Inputs.RecordLatencyRoutingPolicyGetArgs>? _latencyRoutingPolicies;
        public InputList<Inputs.RecordLatencyRoutingPolicyGetArgs> LatencyRoutingPolicies
        {
            get => _latencyRoutingPolicies ?? (_latencyRoutingPolicies = new InputList<Inputs.RecordLatencyRoutingPolicyGetArgs>());
            set => _latencyRoutingPolicies = value;
        }

        [Input("multivalueAnswerRoutingPolicy")]
        public Input<bool>? MultivalueAnswerRoutingPolicy { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("records")]
        private InputList<string>? _records;
        public InputList<string> Records
        {
            get => _records ?? (_records = new InputList<string>());
            set => _records = value;
        }

        [Input("setIdentifier")]
        public Input<string>? SetIdentifier { get; set; }

        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        [Input("type")]
        public InputUnion<string, Pulumi.Aws.Route53.RecordType>? Type { get; set; }

        [Input("weightedRoutingPolicies")]
        private InputList<Inputs.RecordWeightedRoutingPolicyGetArgs>? _weightedRoutingPolicies;
        public InputList<Inputs.RecordWeightedRoutingPolicyGetArgs> WeightedRoutingPolicies
        {
            get => _weightedRoutingPolicies ?? (_weightedRoutingPolicies = new InputList<Inputs.RecordWeightedRoutingPolicyGetArgs>());
            set => _weightedRoutingPolicies = value;
        }

        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public RecordState()
        {
        }
        public static new RecordState Empty => new RecordState();
    }
}
