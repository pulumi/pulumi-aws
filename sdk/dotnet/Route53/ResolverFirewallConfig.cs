// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    /// <summary>
    /// Provides a Route 53 Resolver DNS Firewall config resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleVpc = new Aws.Ec2.Vpc("exampleVpc", new()
    ///     {
    ///         CidrBlock = "10.0.0.0/16",
    ///         EnableDnsSupport = true,
    ///         EnableDnsHostnames = true,
    ///     });
    /// 
    ///     var exampleResolverFirewallConfig = new Aws.Route53.ResolverFirewallConfig("exampleResolverFirewallConfig", new()
    ///     {
    ///         ResourceId = exampleVpc.Id,
    ///         FirewallFailOpen = "ENABLED",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// In TODO v1.5.0 and later, use an `import` block to import Route 53 Resolver DNS Firewall configs using the Route 53 Resolver DNS Firewall config ID. For exampleterraform import {
    /// 
    ///  to = aws_route53_resolver_firewall_config.example
    /// 
    ///  id = "rdsc-be1866ecc1683e95" } Using `TODO import`, import Route 53 Resolver DNS Firewall configs using the Route 53 Resolver DNS Firewall config ID. For exampleconsole % TODO import aws_route53_resolver_firewall_config.example rdsc-be1866ecc1683e95
    /// </summary>
    [AwsResourceType("aws:route53/resolverFirewallConfig:ResolverFirewallConfig")]
    public partial class ResolverFirewallConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Output("firewallFailOpen")]
        public Output<string> FirewallFailOpen { get; private set; } = null!;

        /// <summary>
        /// The AWS account ID of the owner of the VPC that this firewall configuration applies to.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC that the configuration is for.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;


        /// <summary>
        /// Create a ResolverFirewallConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResolverFirewallConfig(string name, ResolverFirewallConfigArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/resolverFirewallConfig:ResolverFirewallConfig", name, args ?? new ResolverFirewallConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResolverFirewallConfig(string name, Input<string> id, ResolverFirewallConfigState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/resolverFirewallConfig:ResolverFirewallConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResolverFirewallConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResolverFirewallConfig Get(string name, Input<string> id, ResolverFirewallConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ResolverFirewallConfig(name, id, state, options);
        }
    }

    public sealed class ResolverFirewallConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("firewallFailOpen")]
        public Input<string>? FirewallFailOpen { get; set; }

        /// <summary>
        /// The ID of the VPC that the configuration is for.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        public ResolverFirewallConfigArgs()
        {
        }
        public static new ResolverFirewallConfigArgs Empty => new ResolverFirewallConfigArgs();
    }

    public sealed class ResolverFirewallConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines how Route 53 Resolver handles queries during failures, for example when all traffic that is sent to DNS Firewall fails to receive a reply. By default, fail open is disabled, which means the failure mode is closed. This approach favors security over availability. DNS Firewall blocks queries that it is unable to evaluate properly. If you enable this option, the failure mode is open. This approach favors availability over security. DNS Firewall allows queries to proceed if it is unable to properly evaluate them. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("firewallFailOpen")]
        public Input<string>? FirewallFailOpen { get; set; }

        /// <summary>
        /// The AWS account ID of the owner of the VPC that this firewall configuration applies to.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// The ID of the VPC that the configuration is for.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        public ResolverFirewallConfigState()
        {
        }
        public static new ResolverFirewallConfigState Empty => new ResolverFirewallConfigState();
    }
}
