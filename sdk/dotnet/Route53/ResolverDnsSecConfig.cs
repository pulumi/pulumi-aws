// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53
{
    /// <summary>
    /// Provides a Route 53 Resolver DNSSEC config resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleVpc = new Aws.Ec2.Vpc("exampleVpc", new Aws.Ec2.VpcArgs
    ///         {
    ///             CidrBlock = "10.0.0.0/16",
    ///             EnableDnsSupport = true,
    ///             EnableDnsHostnames = true,
    ///         });
    ///         var exampleResolverDnsSecConfig = new Aws.Route53.ResolverDnsSecConfig("exampleResolverDnsSecConfig", new Aws.Route53.ResolverDnsSecConfigArgs
    ///         {
    ///             ResourceId = exampleVpc.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    ///  Route 53 Resolver DNSSEC configs can be imported using the Route 53 Resolver DNSSEC config ID, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig example rdsc-be1866ecc1683e95
    /// ```
    /// </summary>
    [AwsResourceType("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig")]
    public partial class ResolverDnsSecConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN for a configuration for DNSSEC validation.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.
        /// </summary>
        [Output("validationStatus")]
        public Output<string> ValidationStatus { get; private set; } = null!;


        /// <summary>
        /// Create a ResolverDnsSecConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResolverDnsSecConfig(string name, ResolverDnsSecConfigArgs args, CustomResourceOptions? options = null)
            : base("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig", name, args ?? new ResolverDnsSecConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResolverDnsSecConfig(string name, Input<string> id, ResolverDnsSecConfigState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResolverDnsSecConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResolverDnsSecConfig Get(string name, Input<string> id, ResolverDnsSecConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new ResolverDnsSecConfig(name, id, state, options);
        }
    }

    public sealed class ResolverDnsSecConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        public ResolverDnsSecConfigArgs()
        {
        }
    }

    public sealed class ResolverDnsSecConfigState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN for a configuration for DNSSEC validation.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.
        /// </summary>
        [Input("validationStatus")]
        public Input<string>? ValidationStatus { get; set; }

        public ResolverDnsSecConfigState()
        {
        }
    }
}
