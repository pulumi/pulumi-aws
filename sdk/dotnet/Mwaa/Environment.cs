// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Mwaa
{
    [AwsResourceType("aws:mwaa/environment:Environment")]
    public partial class Environment : global::Pulumi.CustomResource
    {
        [Output("airflowConfigurationOptions")]
        public Output<ImmutableDictionary<string, string>?> AirflowConfigurationOptions { get; private set; } = null!;

        [Output("airflowVersion")]
        public Output<string> AirflowVersion { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("dagS3Path")]
        public Output<string> DagS3Path { get; private set; } = null!;

        [Output("environmentClass")]
        public Output<string> EnvironmentClass { get; private set; } = null!;

        [Output("executionRoleArn")]
        public Output<string> ExecutionRoleArn { get; private set; } = null!;

        [Output("kmsKey")]
        public Output<string?> KmsKey { get; private set; } = null!;

        [Output("lastUpdateds")]
        public Output<ImmutableArray<Outputs.EnvironmentLastUpdated>> LastUpdateds { get; private set; } = null!;

        [Output("loggingConfiguration")]
        public Output<Outputs.EnvironmentLoggingConfiguration> LoggingConfiguration { get; private set; } = null!;

        [Output("maxWorkers")]
        public Output<int> MaxWorkers { get; private set; } = null!;

        [Output("minWorkers")]
        public Output<int> MinWorkers { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkConfiguration")]
        public Output<Outputs.EnvironmentNetworkConfiguration> NetworkConfiguration { get; private set; } = null!;

        [Output("pluginsS3ObjectVersion")]
        public Output<string> PluginsS3ObjectVersion { get; private set; } = null!;

        [Output("pluginsS3Path")]
        public Output<string?> PluginsS3Path { get; private set; } = null!;

        [Output("requirementsS3ObjectVersion")]
        public Output<string> RequirementsS3ObjectVersion { get; private set; } = null!;

        [Output("requirementsS3Path")]
        public Output<string?> RequirementsS3Path { get; private set; } = null!;

        [Output("schedulers")]
        public Output<int> Schedulers { get; private set; } = null!;

        [Output("serviceRoleArn")]
        public Output<string> ServiceRoleArn { get; private set; } = null!;

        [Output("sourceBucketArn")]
        public Output<string> SourceBucketArn { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("webserverAccessMode")]
        public Output<string> WebserverAccessMode { get; private set; } = null!;

        [Output("webserverUrl")]
        public Output<string> WebserverUrl { get; private set; } = null!;

        [Output("weeklyMaintenanceWindowStart")]
        public Output<string> WeeklyMaintenanceWindowStart { get; private set; } = null!;


        /// <summary>
        /// Create a Environment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Environment(string name, EnvironmentArgs args, CustomResourceOptions? options = null)
            : base("aws:mwaa/environment:Environment", name, args ?? new EnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Environment(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:mwaa/environment:Environment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "airflowConfigurationOptions",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Environment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Environment Get(string name, Input<string> id, EnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new Environment(name, id, state, options);
        }
    }

    public sealed class EnvironmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("airflowConfigurationOptions")]
        private InputMap<string>? _airflowConfigurationOptions;
        public InputMap<string> AirflowConfigurationOptions
        {
            get => _airflowConfigurationOptions ?? (_airflowConfigurationOptions = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _airflowConfigurationOptions = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("airflowVersion")]
        public Input<string>? AirflowVersion { get; set; }

        [Input("dagS3Path", required: true)]
        public Input<string> DagS3Path { get; set; } = null!;

        [Input("environmentClass")]
        public Input<string>? EnvironmentClass { get; set; }

        [Input("executionRoleArn", required: true)]
        public Input<string> ExecutionRoleArn { get; set; } = null!;

        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        [Input("loggingConfiguration")]
        public Input<Inputs.EnvironmentLoggingConfigurationArgs>? LoggingConfiguration { get; set; }

        [Input("maxWorkers")]
        public Input<int>? MaxWorkers { get; set; }

        [Input("minWorkers")]
        public Input<int>? MinWorkers { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkConfiguration", required: true)]
        public Input<Inputs.EnvironmentNetworkConfigurationArgs> NetworkConfiguration { get; set; } = null!;

        [Input("pluginsS3ObjectVersion")]
        public Input<string>? PluginsS3ObjectVersion { get; set; }

        [Input("pluginsS3Path")]
        public Input<string>? PluginsS3Path { get; set; }

        [Input("requirementsS3ObjectVersion")]
        public Input<string>? RequirementsS3ObjectVersion { get; set; }

        [Input("requirementsS3Path")]
        public Input<string>? RequirementsS3Path { get; set; }

        [Input("schedulers")]
        public Input<int>? Schedulers { get; set; }

        [Input("sourceBucketArn", required: true)]
        public Input<string> SourceBucketArn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("webserverAccessMode")]
        public Input<string>? WebserverAccessMode { get; set; }

        [Input("weeklyMaintenanceWindowStart")]
        public Input<string>? WeeklyMaintenanceWindowStart { get; set; }

        public EnvironmentArgs()
        {
        }
        public static new EnvironmentArgs Empty => new EnvironmentArgs();
    }

    public sealed class EnvironmentState : global::Pulumi.ResourceArgs
    {
        [Input("airflowConfigurationOptions")]
        private InputMap<string>? _airflowConfigurationOptions;
        public InputMap<string> AirflowConfigurationOptions
        {
            get => _airflowConfigurationOptions ?? (_airflowConfigurationOptions = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _airflowConfigurationOptions = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("airflowVersion")]
        public Input<string>? AirflowVersion { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("dagS3Path")]
        public Input<string>? DagS3Path { get; set; }

        [Input("environmentClass")]
        public Input<string>? EnvironmentClass { get; set; }

        [Input("executionRoleArn")]
        public Input<string>? ExecutionRoleArn { get; set; }

        [Input("kmsKey")]
        public Input<string>? KmsKey { get; set; }

        [Input("lastUpdateds")]
        private InputList<Inputs.EnvironmentLastUpdatedGetArgs>? _lastUpdateds;
        public InputList<Inputs.EnvironmentLastUpdatedGetArgs> LastUpdateds
        {
            get => _lastUpdateds ?? (_lastUpdateds = new InputList<Inputs.EnvironmentLastUpdatedGetArgs>());
            set => _lastUpdateds = value;
        }

        [Input("loggingConfiguration")]
        public Input<Inputs.EnvironmentLoggingConfigurationGetArgs>? LoggingConfiguration { get; set; }

        [Input("maxWorkers")]
        public Input<int>? MaxWorkers { get; set; }

        [Input("minWorkers")]
        public Input<int>? MinWorkers { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkConfiguration")]
        public Input<Inputs.EnvironmentNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        [Input("pluginsS3ObjectVersion")]
        public Input<string>? PluginsS3ObjectVersion { get; set; }

        [Input("pluginsS3Path")]
        public Input<string>? PluginsS3Path { get; set; }

        [Input("requirementsS3ObjectVersion")]
        public Input<string>? RequirementsS3ObjectVersion { get; set; }

        [Input("requirementsS3Path")]
        public Input<string>? RequirementsS3Path { get; set; }

        [Input("schedulers")]
        public Input<int>? Schedulers { get; set; }

        [Input("serviceRoleArn")]
        public Input<string>? ServiceRoleArn { get; set; }

        [Input("sourceBucketArn")]
        public Input<string>? SourceBucketArn { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("webserverAccessMode")]
        public Input<string>? WebserverAccessMode { get; set; }

        [Input("webserverUrl")]
        public Input<string>? WebserverUrl { get; set; }

        [Input("weeklyMaintenanceWindowStart")]
        public Input<string>? WeeklyMaintenanceWindowStart { get; set; }

        public EnvironmentState()
        {
        }
        public static new EnvironmentState Empty => new EnvironmentState();
    }
}
