// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ResilienceHub
{
    /// <summary>
    /// Resource for managing an AWS Resilience Hub Resiliency Policy.
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Resilience Hub Resiliency Policy using the `arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy example arn:aws:resiliencehub:us-east-1:123456789012:resiliency-policy/8c1cfa29-d1dd-4421-aa68-c9f64cced4c2
    /// ```
    /// </summary>
    [AwsResourceType("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy")]
    public partial class ResiliencyPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Resiliency Policy.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Data Location Constraint of the Policy.
        /// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
        /// </summary>
        [Output("dataLocationConstraint")]
        public Output<string> DataLocationConstraint { get; private set; } = null!;

        /// <summary>
        /// Description of Resiliency Policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Estimated Cost Tier of the Resiliency Policy.
        /// </summary>
        [Output("estimatedCostTier")]
        public Output<string> EstimatedCostTier { get; private set; } = null!;

        /// <summary>
        /// Name of Resiliency Policy.
        /// Must be between 2 and 60 characters long.
        /// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("policy")]
        public Output<Outputs.ResiliencyPolicyPolicy?> Policy { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Resiliency Policy Tier.
        /// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
        /// </summary>
        [Output("tier")]
        public Output<string> Tier { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ResiliencyPolicyTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a ResiliencyPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResiliencyPolicy(string name, ResiliencyPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy", name, args ?? new ResiliencyPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResiliencyPolicy(string name, Input<string> id, ResiliencyPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:resiliencehub/resiliencyPolicy:ResiliencyPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResiliencyPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResiliencyPolicy Get(string name, Input<string> id, ResiliencyPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ResiliencyPolicy(name, id, state, options);
        }
    }

    public sealed class ResiliencyPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data Location Constraint of the Policy.
        /// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
        /// </summary>
        [Input("dataLocationConstraint")]
        public Input<string>? DataLocationConstraint { get; set; }

        /// <summary>
        /// Description of Resiliency Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of Resiliency Policy.
        /// Must be between 2 and 60 characters long.
        /// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ResiliencyPolicyPolicyArgs>? Policy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Resiliency Policy Tier.
        /// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
        /// </summary>
        [Input("tier", required: true)]
        public Input<string> Tier { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.ResiliencyPolicyTimeoutsArgs>? Timeouts { get; set; }

        public ResiliencyPolicyArgs()
        {
        }
        public static new ResiliencyPolicyArgs Empty => new ResiliencyPolicyArgs();
    }

    public sealed class ResiliencyPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Resiliency Policy.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Data Location Constraint of the Policy.
        /// Valid values are `AnyLocation`, `SameContinent`, and `SameCountry`.
        /// </summary>
        [Input("dataLocationConstraint")]
        public Input<string>? DataLocationConstraint { get; set; }

        /// <summary>
        /// Description of Resiliency Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Estimated Cost Tier of the Resiliency Policy.
        /// </summary>
        [Input("estimatedCostTier")]
        public Input<string>? EstimatedCostTier { get; set; }

        /// <summary>
        /// Name of Resiliency Policy.
        /// Must be between 2 and 60 characters long.
        /// Must start with an alphanumeric character and contain alphanumeric characters, underscores, or hyphens.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of resiliency policy to be created, including the recovery time objective (RTO) and recovery point objective (RPO) in seconds. See `policy`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ResiliencyPolicyPolicyGetArgs>? Policy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Resiliency Policy Tier.
        /// Valid values are `MissionCritical`, `Critical`, `Important`, `CoreServices`, `NonCritical`, and `NotApplicable`.
        /// </summary>
        [Input("tier")]
        public Input<string>? Tier { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ResiliencyPolicyTimeoutsGetArgs>? Timeouts { get; set; }

        public ResiliencyPolicyState()
        {
        }
        public static new ResiliencyPolicyState Empty => new ResiliencyPolicyState();
    }
}
