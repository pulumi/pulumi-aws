// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Odb.Outputs
{

    [OutputType]
    public sealed class GetDbServersDbServerResult
    {
        /// <summary>
        /// A list of unique identifiers for the Autonomous VMs.
        /// </summary>
        public readonly ImmutableArray<string> AutonomousVirtualMachineIds;
        /// <summary>
        /// A list of identifiers for the Autonomous VM clusters.
        /// </summary>
        public readonly ImmutableArray<string> AutonomousVmClusterIds;
        /// <summary>
        /// The OCI compute model used when you create or clone an instance: **ECPU** or **OCPU**. ECPUs are based on the number of cores elastically allocated from a pool of compute and storage servers, while OCPUs are based on the physical core of a processor with hyper-threading enabled.
        /// </summary>
        public readonly string ComputeModel;
        /// <summary>
        /// The number of CPU cores enabled on the database server.
        /// </summary>
        public readonly int CpuCoreCount;
        /// <summary>
        /// The date and time when the database server was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The amount of local node storage, in gigabytes (GB), that's allocated on the database server.
        /// </summary>
        public readonly int DbNodeStorageSizeInGbs;
        /// <summary>
        /// The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDbServersDbServerDbServerPatchingDetailResult> DbServerPatchingDetails;
        /// <summary>
        /// The user-friendly name of the database server. The name doesn't need to be unique.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// The ID of the Exadata infrastructure that hosts the database server.
        /// </summary>
        public readonly string ExadataInfrastructureId;
        public readonly string Id;
        /// <summary>
        /// The total number of CPU cores available on the database server.
        /// </summary>
        public readonly int MaxCpuCount;
        /// <summary>
        /// The total amount of local node storage, in gigabytes (GB), that's available on the database server.
        /// </summary>
        public readonly int MaxDbNodeStorageInGbs;
        /// <summary>
        /// The total amount of memory, in gigabytes (GB), that's available on the database server.
        /// </summary>
        public readonly int MaxMemoryInGbs;
        /// <summary>
        /// The amount of memory, in gigabytes (GB), that's allocated on the database server.
        /// </summary>
        public readonly int MemorySizeInGbs;
        /// <summary>
        /// The name of the OCI resource anchor for the database server.
        /// </summary>
        public readonly string OciResourceAnchorName;
        /// <summary>
        /// The OCID of the database server.
        /// </summary>
        public readonly string Ocid;
        /// <summary>
        /// The hardware system model of the Exadata infrastructure that the database server is hosted on. The shape determines the amount of CPU, storage, and memory resources available.
        /// </summary>
        public readonly string Shape;
        /// <summary>
        /// The current status of the database server.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Additional information about the status of the database server.
        /// </summary>
        public readonly string StatusReason;
        /// <summary>
        /// The IDs of the VM clusters that are associated with the database server.
        /// </summary>
        public readonly ImmutableArray<string> VmClusterIds;

        [OutputConstructor]
        private GetDbServersDbServerResult(
            ImmutableArray<string> autonomousVirtualMachineIds,

            ImmutableArray<string> autonomousVmClusterIds,

            string computeModel,

            int cpuCoreCount,

            string createdAt,

            int dbNodeStorageSizeInGbs,

            ImmutableArray<Outputs.GetDbServersDbServerDbServerPatchingDetailResult> dbServerPatchingDetails,

            string displayName,

            string exadataInfrastructureId,

            string id,

            int maxCpuCount,

            int maxDbNodeStorageInGbs,

            int maxMemoryInGbs,

            int memorySizeInGbs,

            string ociResourceAnchorName,

            string ocid,

            string shape,

            string status,

            string statusReason,

            ImmutableArray<string> vmClusterIds)
        {
            AutonomousVirtualMachineIds = autonomousVirtualMachineIds;
            AutonomousVmClusterIds = autonomousVmClusterIds;
            ComputeModel = computeModel;
            CpuCoreCount = cpuCoreCount;
            CreatedAt = createdAt;
            DbNodeStorageSizeInGbs = dbNodeStorageSizeInGbs;
            DbServerPatchingDetails = dbServerPatchingDetails;
            DisplayName = displayName;
            ExadataInfrastructureId = exadataInfrastructureId;
            Id = id;
            MaxCpuCount = maxCpuCount;
            MaxDbNodeStorageInGbs = maxDbNodeStorageInGbs;
            MaxMemoryInGbs = maxMemoryInGbs;
            MemorySizeInGbs = memorySizeInGbs;
            OciResourceAnchorName = ociResourceAnchorName;
            Ocid = ocid;
            Shape = shape;
            Status = status;
            StatusReason = statusReason;
            VmClusterIds = vmClusterIds;
        }
    }
}
