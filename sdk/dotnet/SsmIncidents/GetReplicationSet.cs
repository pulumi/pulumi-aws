// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SsmIncidents
{
    public static class GetReplicationSet
    {
        /// <summary>
        /// &gt; **NOTE:** The AWS Region specified by a provider must always be one of the Regions specified for the replication set.
        /// 
        /// Use this data source to manage a replication set in AWS Systems Manager Incident Manager.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.SsmIncidents.GetReplicationSet.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReplicationSetResult> InvokeAsync(GetReplicationSetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReplicationSetResult>("aws:ssmincidents/getReplicationSet:getReplicationSet", args ?? new GetReplicationSetArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **NOTE:** The AWS Region specified by a provider must always be one of the Regions specified for the replication set.
        /// 
        /// Use this data source to manage a replication set in AWS Systems Manager Incident Manager.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.SsmIncidents.GetReplicationSet.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReplicationSetResult> Invoke(GetReplicationSetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReplicationSetResult>("aws:ssmincidents/getReplicationSet:getReplicationSet", args ?? new GetReplicationSetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReplicationSetArgs : global::Pulumi.InvokeArgs
    {
        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// All tags applied to the replication set.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetReplicationSetArgs()
        {
        }
        public static new GetReplicationSetArgs Empty => new GetReplicationSetArgs();
    }

    public sealed class GetReplicationSetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// All tags applied to the replication set.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetReplicationSetInvokeArgs()
        {
        }
        public static new GetReplicationSetInvokeArgs Empty => new GetReplicationSetInvokeArgs();
    }


    [OutputType]
    public sealed class GetReplicationSetResult
    {
        /// <summary>
        /// The Amazon Resouce Name (ARN) of the replication set.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The ARN of the user who created the replication set.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// If `true`, the last remaining Region in a replication set canâ€™t be deleted.
        /// </summary>
        public readonly bool DeletionProtected;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ARN of the user who last modified the replication set.
        /// </summary>
        public readonly string LastModifiedBy;
        public readonly ImmutableArray<Outputs.GetReplicationSetRegionResult> Regions;
        /// <summary>
        /// The current status of the Region.
        /// * Valid Values: `ACTIVE` | `CREATING` | `UPDATING` | `DELETING` | `FAILED`
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// All tags applied to the replication set.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetReplicationSetResult(
            string arn,

            string createdBy,

            bool deletionProtected,

            string id,

            string lastModifiedBy,

            ImmutableArray<Outputs.GetReplicationSetRegionResult> regions,

            string status,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            CreatedBy = createdBy;
            DeletionProtected = deletionProtected;
            Id = id;
            LastModifiedBy = lastModifiedBy;
            Regions = regions;
            Status = status;
            Tags = tags;
        }
    }
}
