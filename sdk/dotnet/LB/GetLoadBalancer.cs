// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LB
{
    public static class GetLoadBalancer
    {
        /// <summary>
        /// &gt; **Note:** `aws.alb.LoadBalancer` is known as `aws.lb.LoadBalancer`. The functionality is identical.
        /// 
        /// Provides information about a Load Balancer.
        /// 
        /// This data source can prove useful when a module accepts an LB as an input
        /// variable and needs to, for example, determine the security groups associated
        /// with it, etc.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const lbArn = config.get("lbArn") || "";
        /// const lbName = config.get("lbName") || "";
        /// const test = aws.lb.getLoadBalancer({
        ///     arn: lbArn,
        ///     name: lbName,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// lb_arn = config.get("lbArn")
        /// if lb_arn is None:
        ///     lb_arn = ""
        /// lb_name = config.get("lbName")
        /// if lb_name is None:
        ///     lb_name = ""
        /// test = aws.lb.get_load_balancer(arn=lb_arn,
        ///     name=lb_name)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var lbArn = config.Get("lbArn") ?? "";
        ///     var lbName = config.Get("lbName") ?? "";
        ///     var test = Aws.LB.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Arn = lbArn,
        ///         Name = lbName,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lb"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		lbArn := ""
        /// 		if param := cfg.Get("lbArn"); param != "" {
        /// 			lbArn = param
        /// 		}
        /// 		lbName := ""
        /// 		if param := cfg.Get("lbName"); param != "" {
        /// 			lbName = param
        /// 		}
        /// 		_, err := lb.LookupLoadBalancer(ctx, &amp;lb.LookupLoadBalancerArgs{
        /// 			Arn:  pulumi.StringRef(lbArn),
        /// 			Name: pulumi.StringRef(lbName),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.lb.LbFunctions;
        /// import com.pulumi.aws.lb.inputs.GetLoadBalancerArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var lbArn = config.get("lbArn").orElse("");
        ///         final var lbName = config.get("lbName").orElse("");
        ///         final var test = LbFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
        ///             .arn(lbArn)
        ///             .name(lbName)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   lbArn:
        ///     type: string
        ///     default:
        ///   lbName:
        ///     type: string
        ///     default:
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:lb:getLoadBalancer
        ///       Arguments:
        ///         arn: ${lbArn}
        ///         name: ${lbName}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLoadBalancerResult> InvokeAsync(GetLoadBalancerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoadBalancerResult>("aws:lb/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Note:** `aws.alb.LoadBalancer` is known as `aws.lb.LoadBalancer`. The functionality is identical.
        /// 
        /// Provides information about a Load Balancer.
        /// 
        /// This data source can prove useful when a module accepts an LB as an input
        /// variable and needs to, for example, determine the security groups associated
        /// with it, etc.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const lbArn = config.get("lbArn") || "";
        /// const lbName = config.get("lbName") || "";
        /// const test = aws.lb.getLoadBalancer({
        ///     arn: lbArn,
        ///     name: lbName,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// lb_arn = config.get("lbArn")
        /// if lb_arn is None:
        ///     lb_arn = ""
        /// lb_name = config.get("lbName")
        /// if lb_name is None:
        ///     lb_name = ""
        /// test = aws.lb.get_load_balancer(arn=lb_arn,
        ///     name=lb_name)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var lbArn = config.Get("lbArn") ?? "";
        ///     var lbName = config.Get("lbName") ?? "";
        ///     var test = Aws.LB.GetLoadBalancer.Invoke(new()
        ///     {
        ///         Arn = lbArn,
        ///         Name = lbName,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/lb"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		lbArn := ""
        /// 		if param := cfg.Get("lbArn"); param != "" {
        /// 			lbArn = param
        /// 		}
        /// 		lbName := ""
        /// 		if param := cfg.Get("lbName"); param != "" {
        /// 			lbName = param
        /// 		}
        /// 		_, err := lb.LookupLoadBalancer(ctx, &amp;lb.LookupLoadBalancerArgs{
        /// 			Arn:  pulumi.StringRef(lbArn),
        /// 			Name: pulumi.StringRef(lbName),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.lb.LbFunctions;
        /// import com.pulumi.aws.lb.inputs.GetLoadBalancerArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var lbArn = config.get("lbArn").orElse("");
        ///         final var lbName = config.get("lbName").orElse("");
        ///         final var test = LbFunctions.getLoadBalancer(GetLoadBalancerArgs.builder()
        ///             .arn(lbArn)
        ///             .name(lbName)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   lbArn:
        ///     type: string
        ///     default:
        ///   lbName:
        ///     type: string
        ///     default:
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:lb:getLoadBalancer
        ///       Arguments:
        ///         arn: ${lbArn}
        ///         name: ${lbName}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLoadBalancerResult> Invoke(GetLoadBalancerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoadBalancerResult>("aws:lb/getLoadBalancer:getLoadBalancer", args ?? new GetLoadBalancerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoadBalancerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Full ARN of the load balancer.
        /// </summary>
        [Input("arn")]
        public string? Arn { get; set; }

        /// <summary>
        /// Unique name of the load balancer.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Mapping of tags, each pair of which must exactly match a pair on the desired load balancer.
        /// 
        /// &gt; **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence. `tags` has lowest precedence.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetLoadBalancerArgs()
        {
        }
        public static new GetLoadBalancerArgs Empty => new GetLoadBalancerArgs();
    }

    public sealed class GetLoadBalancerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Full ARN of the load balancer.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Unique name of the load balancer.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Mapping of tags, each pair of which must exactly match a pair on the desired load balancer.
        /// 
        /// &gt; **NOTE:** When both `arn` and `name` are specified, `arn` takes precedence. `tags` has lowest precedence.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetLoadBalancerInvokeArgs()
        {
        }
        public static new GetLoadBalancerInvokeArgs Empty => new GetLoadBalancerInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoadBalancerResult
    {
        public readonly Outputs.GetLoadBalancerAccessLogsResult AccessLogs;
        public readonly string Arn;
        public readonly string ArnSuffix;
        public readonly string CustomerOwnedIpv4Pool;
        public readonly string DesyncMitigationMode;
        public readonly string DnsName;
        public readonly bool DropInvalidHeaderFields;
        public readonly bool EnableCrossZoneLoadBalancing;
        public readonly bool EnableDeletionProtection;
        public readonly bool EnableHttp2;
        public readonly bool EnableTlsVersionAndCipherSuiteHeaders;
        public readonly bool EnableWafFailOpen;
        public readonly bool EnableXffClientPort;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int IdleTimeout;
        public readonly bool Internal;
        public readonly string IpAddressType;
        public readonly string LoadBalancerType;
        public readonly string Name;
        public readonly bool PreserveHostHeader;
        public readonly ImmutableArray<string> SecurityGroups;
        public readonly ImmutableArray<Outputs.GetLoadBalancerSubnetMappingResult> SubnetMappings;
        public readonly ImmutableArray<string> Subnets;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;
        public readonly string XffHeaderProcessingMode;
        public readonly string ZoneId;

        [OutputConstructor]
        private GetLoadBalancerResult(
            Outputs.GetLoadBalancerAccessLogsResult accessLogs,

            string arn,

            string arnSuffix,

            string customerOwnedIpv4Pool,

            string desyncMitigationMode,

            string dnsName,

            bool dropInvalidHeaderFields,

            bool enableCrossZoneLoadBalancing,

            bool enableDeletionProtection,

            bool enableHttp2,

            bool enableTlsVersionAndCipherSuiteHeaders,

            bool enableWafFailOpen,

            bool enableXffClientPort,

            string id,

            int idleTimeout,

            bool @internal,

            string ipAddressType,

            string loadBalancerType,

            string name,

            bool preserveHostHeader,

            ImmutableArray<string> securityGroups,

            ImmutableArray<Outputs.GetLoadBalancerSubnetMappingResult> subnetMappings,

            ImmutableArray<string> subnets,

            ImmutableDictionary<string, string> tags,

            string vpcId,

            string xffHeaderProcessingMode,

            string zoneId)
        {
            AccessLogs = accessLogs;
            Arn = arn;
            ArnSuffix = arnSuffix;
            CustomerOwnedIpv4Pool = customerOwnedIpv4Pool;
            DesyncMitigationMode = desyncMitigationMode;
            DnsName = dnsName;
            DropInvalidHeaderFields = dropInvalidHeaderFields;
            EnableCrossZoneLoadBalancing = enableCrossZoneLoadBalancing;
            EnableDeletionProtection = enableDeletionProtection;
            EnableHttp2 = enableHttp2;
            EnableTlsVersionAndCipherSuiteHeaders = enableTlsVersionAndCipherSuiteHeaders;
            EnableWafFailOpen = enableWafFailOpen;
            EnableXffClientPort = enableXffClientPort;
            Id = id;
            IdleTimeout = idleTimeout;
            Internal = @internal;
            IpAddressType = ipAddressType;
            LoadBalancerType = loadBalancerType;
            Name = name;
            PreserveHostHeader = preserveHostHeader;
            SecurityGroups = securityGroups;
            SubnetMappings = subnetMappings;
            Subnets = subnets;
            Tags = tags;
            VpcId = vpcId;
            XffHeaderProcessingMode = xffHeaderProcessingMode;
            ZoneId = zoneId;
        }
    }
}
