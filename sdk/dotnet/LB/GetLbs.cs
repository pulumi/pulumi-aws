// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.LB
{
    public static class GetLbs
    {
        public static Task<GetLbsResult> InvokeAsync(GetLbsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLbsResult>("aws:lb/getLbs:getLbs", args ?? new GetLbsArgs(), options.WithDefaults());

        public static Output<GetLbsResult> Invoke(GetLbsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLbsResult>("aws:lb/getLbs:getLbs", args ?? new GetLbsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLbsArgs : global::Pulumi.InvokeArgs
    {
        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetLbsArgs()
        {
        }
        public static new GetLbsArgs Empty => new GetLbsArgs();
    }

    public sealed class GetLbsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetLbsInvokeArgs()
        {
        }
        public static new GetLbsInvokeArgs Empty => new GetLbsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLbsResult
    {
        public readonly ImmutableArray<string> Arns;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetLbsResult(
            ImmutableArray<string> arns,

            string id,

            ImmutableDictionary<string, string>? tags)
        {
            Arns = arns;
            Id = id;
            Tags = tags;
        }
    }
}
