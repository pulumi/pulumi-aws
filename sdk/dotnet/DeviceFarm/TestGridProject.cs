// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DeviceFarm
{
    /// <summary>
    /// Provides a resource to manage AWS Device Farm Test Grid Projects.
    /// 
    /// &gt; **NOTE:** AWS currently has limited regional support for Device Farm (e.g., `us-west-2`). See [AWS Device Farm endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/devicefarm.html) for information on supported regions.
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import DeviceFarm Test Grid Projects using their ARN. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:devicefarm/testGridProject:TestGridProject example arn:aws:devicefarm:us-west-2:123456789012:testgrid-project:4fa784c7-ccb4-4dbf-ba4f-02198320daa1
    /// ```
    /// </summary>
    [AwsResourceType("aws:devicefarm/testGridProject:TestGridProject")]
    public partial class TestGridProject : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name of this Test Grid Project.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Human-readable description of the project.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the Selenium testing project.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The VPC security groups and subnets that are attached to a project. See VPC Config below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.TestGridProjectVpcConfig?> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a TestGridProject resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TestGridProject(string name, TestGridProjectArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:devicefarm/testGridProject:TestGridProject", name, args ?? new TestGridProjectArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TestGridProject(string name, Input<string> id, TestGridProjectState? state = null, CustomResourceOptions? options = null)
            : base("aws:devicefarm/testGridProject:TestGridProject", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TestGridProject resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TestGridProject Get(string name, Input<string> id, TestGridProjectState? state = null, CustomResourceOptions? options = null)
        {
            return new TestGridProject(name, id, state, options);
        }
    }

    public sealed class TestGridProjectArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Selenium testing project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC security groups and subnets that are attached to a project. See VPC Config below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.TestGridProjectVpcConfigArgs>? VpcConfig { get; set; }

        public TestGridProjectArgs()
        {
        }
        public static new TestGridProjectArgs Empty => new TestGridProjectArgs();
    }

    public sealed class TestGridProjectState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name of this Test Grid Project.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Human-readable description of the project.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the Selenium testing project.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The VPC security groups and subnets that are attached to a project. See VPC Config below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.TestGridProjectVpcConfigGetArgs>? VpcConfig { get; set; }

        public TestGridProjectState()
        {
        }
        public static new TestGridProjectState Empty => new TestGridProjectState();
    }
}
