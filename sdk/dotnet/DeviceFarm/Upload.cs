// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DeviceFarm
{
    [AwsResourceType("aws:devicefarm/upload:Upload")]
    public partial class Upload : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("category")]
        public Output<string> Category { get; private set; } = null!;

        [Output("contentType")]
        public Output<string?> ContentType { get; private set; } = null!;

        [Output("metadata")]
        public Output<string> Metadata { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("projectArn")]
        public Output<string> ProjectArn { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Upload resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Upload(string name, UploadArgs args, CustomResourceOptions? options = null)
            : base("aws:devicefarm/upload:Upload", name, args ?? new UploadArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Upload(string name, Input<string> id, UploadState? state = null, CustomResourceOptions? options = null)
            : base("aws:devicefarm/upload:Upload", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Upload resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Upload Get(string name, Input<string> id, UploadState? state = null, CustomResourceOptions? options = null)
        {
            return new Upload(name, id, state, options);
        }
    }

    public sealed class UploadArgs : global::Pulumi.ResourceArgs
    {
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectArn", required: true)]
        public Input<string> ProjectArn { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public UploadArgs()
        {
        }
        public static new UploadArgs Empty => new UploadArgs();
    }

    public sealed class UploadState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("category")]
        public Input<string>? Category { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("projectArn")]
        public Input<string>? ProjectArn { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        public UploadState()
        {
        }
        public static new UploadState Empty => new UploadState();
    }
}
