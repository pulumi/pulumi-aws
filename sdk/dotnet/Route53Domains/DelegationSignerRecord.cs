// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53Domains
{
    /// <summary>
    /// Provides a resource to manage a [delegation signer record](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-enable-signing.html#dns-configuring-dnssec-enable-signing-step-1) in the parent DNS zone for domains registered with Route53.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var example = new Aws.Kms.Key("example", new()
    ///     {
    ///         CustomerMasterKeySpec = "ECC_NIST_P256",
    ///         DeletionWindowInDays = 7,
    ///         KeyUsage = "SIGN_VERIFY",
    ///         Policy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["action"] = new[]
    ///                     {
    ///                         "kms:DescribeKey",
    ///                         "kms:GetPublicKey",
    ///                         "kms:Sign",
    ///                     },
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = "dnssec-route53.amazonaws.com",
    ///                     },
    ///                     ["sid"] = "Allow Route 53 DNSSEC Service",
    ///                     ["resource"] = "*",
    ///                     ["condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["stringEquals"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["aws:SourceAccount"] = current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                         },
    ///                         ["arnLike"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["aws:SourceArn"] = "arn:aws:route53:::hostedzone/*",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["action"] = "kms:CreateGrant",
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["service"] = "dnssec-route53.amazonaws.com",
    ///                     },
    ///                     ["sid"] = "Allow Route 53 DNSSEC Service to CreateGrant",
    ///                     ["resource"] = "*",
    ///                     ["condition"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["bool"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["kms:GrantIsForAWSResource"] = "true",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["action"] = "kms:*",
    ///                     ["effect"] = "Allow",
    ///                     ["principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["AWS"] = $"arn:aws:iam::{current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId)}:root",
    ///                     },
    ///                     ["resource"] = "*",
    ///                     ["sid"] = "Enable IAM User Permissions",
    ///                 },
    ///             },
    ///             ["version"] = "2012-10-17",
    ///         }),
    ///     });
    /// 
    ///     var exampleZone = new Aws.Route53.Zone("example", new()
    ///     {
    ///         Name = "example.com",
    ///     });
    /// 
    ///     var exampleKeySigningKey = new Aws.Route53.KeySigningKey("example", new()
    ///     {
    ///         HostedZoneId = test.Id,
    ///         KeyManagementServiceArn = testAwsKmsKey.Arn,
    ///         Name = "example",
    ///     });
    /// 
    ///     var exampleHostedZoneDnsSec = new Aws.Route53.HostedZoneDnsSec("example", new()
    ///     {
    ///         HostedZoneId = exampleKeySigningKey.HostedZoneId,
    ///     });
    /// 
    ///     var exampleDelegationSignerRecord = new Aws.Route53Domains.DelegationSignerRecord("example", new()
    ///     {
    ///         DomainName = "example.com",
    ///         SigningAttributes = new Aws.Route53Domains.Inputs.DelegationSignerRecordSigningAttributesArgs
    ///         {
    ///             Algorithm = exampleKeySigningKey.SigningAlgorithmType,
    ///             Flags = exampleKeySigningKey.Flag,
    ///             PublicKey = exampleKeySigningKey.PublicKey,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import delegation signer records using the domain name and DNSSEC key ID, separated by a comma (`,`). For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:route53domains/delegationSignerRecord:DelegationSignerRecord example example.com,40DE3534F5324DBDAC598ACEDB5B1E26A5368732D9C791D1347E4FBDDF6FC343
    /// ```
    /// </summary>
    [AwsResourceType("aws:route53domains/delegationSignerRecord:DelegationSignerRecord")]
    public partial class DelegationSignerRecord : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An ID assigned to the created DS record.
        /// </summary>
        [Output("dnssecKeyId")]
        public Output<string> DnssecKeyId { get; private set; } = null!;

        /// <summary>
        /// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// The information about a key, including the algorithm, public key-value, and flags.
        /// </summary>
        [Output("signingAttributes")]
        public Output<Outputs.DelegationSignerRecordSigningAttributes?> SigningAttributes { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.DelegationSignerRecordTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a DelegationSignerRecord resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DelegationSignerRecord(string name, DelegationSignerRecordArgs args, CustomResourceOptions? options = null)
            : base("aws:route53domains/delegationSignerRecord:DelegationSignerRecord", name, args ?? new DelegationSignerRecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DelegationSignerRecord(string name, Input<string> id, DelegationSignerRecordState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53domains/delegationSignerRecord:DelegationSignerRecord", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DelegationSignerRecord resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DelegationSignerRecord Get(string name, Input<string> id, DelegationSignerRecordState? state = null, CustomResourceOptions? options = null)
        {
            return new DelegationSignerRecord(name, id, state, options);
        }
    }

    public sealed class DelegationSignerRecordArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// The information about a key, including the algorithm, public key-value, and flags.
        /// </summary>
        [Input("signingAttributes")]
        public Input<Inputs.DelegationSignerRecordSigningAttributesArgs>? SigningAttributes { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DelegationSignerRecordTimeoutsArgs>? Timeouts { get; set; }

        public DelegationSignerRecordArgs()
        {
        }
        public static new DelegationSignerRecordArgs Empty => new DelegationSignerRecordArgs();
    }

    public sealed class DelegationSignerRecordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An ID assigned to the created DS record.
        /// </summary>
        [Input("dnssecKeyId")]
        public Input<string>? DnssecKeyId { get; set; }

        /// <summary>
        /// The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// The information about a key, including the algorithm, public key-value, and flags.
        /// </summary>
        [Input("signingAttributes")]
        public Input<Inputs.DelegationSignerRecordSigningAttributesGetArgs>? SigningAttributes { get; set; }

        [Input("timeouts")]
        public Input<Inputs.DelegationSignerRecordTimeoutsGetArgs>? Timeouts { get; set; }

        public DelegationSignerRecordState()
        {
        }
        public static new DelegationSignerRecordState Empty => new DelegationSignerRecordState();
    }
}
