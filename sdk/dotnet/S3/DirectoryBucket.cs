// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    /// <summary>
    /// Provides an Amazon S3 Express directory bucket resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.S3.DirectoryBucket("example", new()
    ///     {
    ///         Bucket = "example--usw2-az1--x-s3",
    ///         Location = new Aws.S3.Inputs.DirectoryBucketLocationArgs
    ///         {
    ///             Name = "usw2-az1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import S3 bucket using `bucket`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:s3/directoryBucket:DirectoryBucket example example--usw2-az1--x-s3
    /// ```
    /// </summary>
    [AwsResourceType("aws:s3/directoryBucket:DirectoryBucket")]
    public partial class DirectoryBucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the bucket.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// Data redundancy. Valid values: `SingleAvailabilityZone`.
        /// </summary>
        [Output("dataRedundancy")]
        public Output<string> DataRedundancy { get; private set; } = null!;

        /// <summary>
        /// Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// Bucket location. See Location below for more details.
        /// </summary>
        [Output("location")]
        public Output<Outputs.DirectoryBucketLocation?> Location { get; private set; } = null!;

        /// <summary>
        /// Bucket type. Valid values: `Directory`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a DirectoryBucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DirectoryBucket(string name, DirectoryBucketArgs args, CustomResourceOptions? options = null)
            : base("aws:s3/directoryBucket:DirectoryBucket", name, args ?? new DirectoryBucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DirectoryBucket(string name, Input<string> id, DirectoryBucketState? state = null, CustomResourceOptions? options = null)
            : base("aws:s3/directoryBucket:DirectoryBucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DirectoryBucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DirectoryBucket Get(string name, Input<string> id, DirectoryBucketState? state = null, CustomResourceOptions? options = null)
        {
            return new DirectoryBucket(name, id, state, options);
        }
    }

    public sealed class DirectoryBucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Data redundancy. Valid values: `SingleAvailabilityZone`.
        /// </summary>
        [Input("dataRedundancy")]
        public Input<string>? DataRedundancy { get; set; }

        /// <summary>
        /// Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Bucket location. See Location below for more details.
        /// </summary>
        [Input("location")]
        public Input<Inputs.DirectoryBucketLocationArgs>? Location { get; set; }

        /// <summary>
        /// Bucket type. Valid values: `Directory`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DirectoryBucketArgs()
        {
        }
        public static new DirectoryBucketArgs Empty => new DirectoryBucketArgs();
    }

    public sealed class DirectoryBucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the bucket.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Name of the bucket. The name must be in the format `[bucket_name]--[azid]--x-s3`. Use the `aws.s3.BucketV2` resource to manage general purpose buckets.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Data redundancy. Valid values: `SingleAvailabilityZone`.
        /// </summary>
        [Input("dataRedundancy")]
        public Input<string>? DataRedundancy { get; set; }

        /// <summary>
        /// Boolean that indicates all objects should be deleted from the bucket *when the bucket is destroyed* so that the bucket can be destroyed without error. These objects are *not* recoverable. This only deletes objects when the bucket is destroyed, *not* when setting this parameter to `true`. Once this parameter is set to `true`, there must be a successful `pulumi up` run before a destroy is required to update this value in the resource state. Without a successful `pulumi up` after this parameter is set, this flag will have no effect. If setting this field in the same operation that would require replacing the bucket or destroying the bucket, this flag will not work. Additionally when importing a bucket, a successful `pulumi up` is required to set this value in state before it will take effect on a destroy operation.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Bucket location. See Location below for more details.
        /// </summary>
        [Input("location")]
        public Input<Inputs.DirectoryBucketLocationGetArgs>? Location { get; set; }

        /// <summary>
        /// Bucket type. Valid values: `Directory`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public DirectoryBucketState()
        {
        }
        public static new DirectoryBucketState Empty => new DirectoryBucketState();
    }
}
