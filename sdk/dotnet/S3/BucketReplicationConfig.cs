// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    /// <summary>
    /// Provides an independent configuration resource for S3 bucket [replication configuration](http://docs.aws.amazon.com/AmazonS3/latest/dev/crr.html).
    /// 
    /// &gt; **NOTE:** S3 Buckets only support a single replication configuration. Declaring multiple `aws.s3.BucketReplicationConfig` resources to the same S3 Bucket will cause a perpetual difference in configuration.
    /// 
    /// &gt; This resource cannot be used with S3 directory buckets.
    /// 
    /// ## Example Usage
    /// 
    /// ### Using replication configuration
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var assumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "s3.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var replicationRole = new Aws.Iam.Role("replication", new()
    ///     {
    ///         Name = "tf-iam-role-replication-12345",
    ///         AssumeRolePolicy = assumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var destination = new Aws.S3.BucketV2("destination", new()
    ///     {
    ///         Bucket = "tf-test-bucket-destination-12345",
    ///     });
    /// 
    ///     var source = new Aws.S3.BucketV2("source", new()
    ///     {
    ///         Bucket = "tf-test-bucket-source-12345",
    ///     });
    /// 
    ///     var replication = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:GetReplicationConfiguration",
    ///                     "s3:ListBucket",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     source.Arn,
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:GetObjectVersionForReplication",
    ///                     "s3:GetObjectVersionAcl",
    ///                     "s3:GetObjectVersionTagging",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{source.Arn}/*",
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:ReplicateObject",
    ///                     "s3:ReplicateDelete",
    ///                     "s3:ReplicateTags",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{destination.Arn}/*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var replicationPolicy = new Aws.Iam.Policy("replication", new()
    ///     {
    ///         Name = "tf-iam-role-policy-replication-12345",
    ///         PolicyDocument = replication.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var replicationRolePolicyAttachment = new Aws.Iam.RolePolicyAttachment("replication", new()
    ///     {
    ///         Role = replicationRole.Name,
    ///         PolicyArn = replicationPolicy.Arn,
    ///     });
    /// 
    ///     var destinationBucketVersioningV2 = new Aws.S3.BucketVersioningV2("destination", new()
    ///     {
    ///         Bucket = destination.Id,
    ///         VersioningConfiguration = new Aws.S3.Inputs.BucketVersioningV2VersioningConfigurationArgs
    ///         {
    ///             Status = "Enabled",
    ///         },
    ///     });
    /// 
    ///     var sourceBucketAcl = new Aws.S3.BucketAclV2("source_bucket_acl", new()
    ///     {
    ///         Bucket = source.Id,
    ///         Acl = "private",
    ///     });
    /// 
    ///     var sourceBucketVersioningV2 = new Aws.S3.BucketVersioningV2("source", new()
    ///     {
    ///         Bucket = source.Id,
    ///         VersioningConfiguration = new Aws.S3.Inputs.BucketVersioningV2VersioningConfigurationArgs
    ///         {
    ///             Status = "Enabled",
    ///         },
    ///     });
    /// 
    ///     var replicationBucketReplicationConfig = new Aws.S3.BucketReplicationConfig("replication", new()
    ///     {
    ///         Role = replicationRole.Arn,
    ///         Bucket = source.Id,
    ///         Rules = new[]
    ///         {
    ///             new Aws.S3.Inputs.BucketReplicationConfigRuleArgs
    ///             {
    ///                 Id = "foobar",
    ///                 Filter = new Aws.S3.Inputs.BucketReplicationConfigRuleFilterArgs
    ///                 {
    ///                     Prefix = "foo",
    ///                 },
    ///                 Status = "Enabled",
    ///                 Destination = new Aws.S3.Inputs.BucketReplicationConfigRuleDestinationArgs
    ///                 {
    ///                     Bucket = destination.Arn,
    ///                     StorageClass = "STANDARD",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ### Bi-Directional Replication
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ... other configuration ...
    ///     var east = new Aws.S3.BucketV2("east", new()
    ///     {
    ///         Bucket = "tf-test-bucket-east-12345",
    ///     });
    /// 
    ///     var eastBucketVersioningV2 = new Aws.S3.BucketVersioningV2("east", new()
    ///     {
    ///         Bucket = east.Id,
    ///         VersioningConfiguration = new Aws.S3.Inputs.BucketVersioningV2VersioningConfigurationArgs
    ///         {
    ///             Status = "Enabled",
    ///         },
    ///     });
    /// 
    ///     var west = new Aws.S3.BucketV2("west", new()
    ///     {
    ///         Bucket = "tf-test-bucket-west-12345",
    ///     });
    /// 
    ///     var westBucketVersioningV2 = new Aws.S3.BucketVersioningV2("west", new()
    ///     {
    ///         Bucket = west.Id,
    ///         VersioningConfiguration = new Aws.S3.Inputs.BucketVersioningV2VersioningConfigurationArgs
    ///         {
    ///             Status = "Enabled",
    ///         },
    ///     });
    /// 
    ///     var eastToWest = new Aws.S3.BucketReplicationConfig("east_to_west", new()
    ///     {
    ///         Role = eastReplication.Arn,
    ///         Bucket = east.Id,
    ///         Rules = new[]
    ///         {
    ///             new Aws.S3.Inputs.BucketReplicationConfigRuleArgs
    ///             {
    ///                 Id = "foobar",
    ///                 Filter = new Aws.S3.Inputs.BucketReplicationConfigRuleFilterArgs
    ///                 {
    ///                     Prefix = "foo",
    ///                 },
    ///                 Status = "Enabled",
    ///                 Destination = new Aws.S3.Inputs.BucketReplicationConfigRuleDestinationArgs
    ///                 {
    ///                     Bucket = west.Arn,
    ///                     StorageClass = "STANDARD",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var westToEast = new Aws.S3.BucketReplicationConfig("west_to_east", new()
    ///     {
    ///         Role = westReplication.Arn,
    ///         Bucket = west.Id,
    ///         Rules = new[]
    ///         {
    ///             new Aws.S3.Inputs.BucketReplicationConfigRuleArgs
    ///             {
    ///                 Id = "foobar",
    ///                 Filter = new Aws.S3.Inputs.BucketReplicationConfigRuleFilterArgs
    ///                 {
    ///                     Prefix = "foo",
    ///                 },
    ///                 Status = "Enabled",
    ///                 Destination = new Aws.S3.Inputs.BucketReplicationConfigRuleDestinationArgs
    ///                 {
    ///                     Bucket = east.Arn,
    ///                     StorageClass = "STANDARD",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import S3 bucket replication configuration using the `bucket`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketReplicationConfig:BucketReplicationConfig replication bucket-name
    /// ```
    /// </summary>
    [AwsResourceType("aws:s3/bucketReplicationConfig:BucketReplicationConfig")]
    public partial class BucketReplicationConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the source S3 bucket you want Amazon S3 to monitor.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// List of configuration blocks describing the rules managing the replication. See below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.BucketReplicationConfigRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
        /// For more details, see [Using S3 Object Lock with replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-managing.html#object-lock-managing-replication).
        /// </summary>
        [Output("token")]
        public Output<string?> Token { get; private set; } = null!;


        /// <summary>
        /// Create a BucketReplicationConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketReplicationConfig(string name, BucketReplicationConfigArgs args, CustomResourceOptions? options = null)
            : base("aws:s3/bucketReplicationConfig:BucketReplicationConfig", name, args ?? new BucketReplicationConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketReplicationConfig(string name, Input<string> id, BucketReplicationConfigState? state = null, CustomResourceOptions? options = null)
            : base("aws:s3/bucketReplicationConfig:BucketReplicationConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "token",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketReplicationConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketReplicationConfig Get(string name, Input<string> id, BucketReplicationConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new BucketReplicationConfig(name, id, state, options);
        }
    }

    public sealed class BucketReplicationConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the source S3 bucket you want Amazon S3 to monitor.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.BucketReplicationConfigRuleArgs>? _rules;

        /// <summary>
        /// List of configuration blocks describing the rules managing the replication. See below.
        /// </summary>
        public InputList<Inputs.BucketReplicationConfigRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.BucketReplicationConfigRuleArgs>());
            set => _rules = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
        /// For more details, see [Using S3 Object Lock with replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-managing.html#object-lock-managing-replication).
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public BucketReplicationConfigArgs()
        {
        }
        public static new BucketReplicationConfigArgs Empty => new BucketReplicationConfigArgs();
    }

    public sealed class BucketReplicationConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the source S3 bucket you want Amazon S3 to monitor.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// ARN of the IAM role for Amazon S3 to assume when replicating the objects.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        [Input("rules")]
        private InputList<Inputs.BucketReplicationConfigRuleGetArgs>? _rules;

        /// <summary>
        /// List of configuration blocks describing the rules managing the replication. See below.
        /// </summary>
        public InputList<Inputs.BucketReplicationConfigRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.BucketReplicationConfigRuleGetArgs>());
            set => _rules = value;
        }

        [Input("token")]
        private Input<string>? _token;

        /// <summary>
        /// Token to allow replication to be enabled on an Object Lock-enabled bucket. You must contact AWS support for the bucket's "Object Lock token".
        /// For more details, see [Using S3 Object Lock with replication](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lock-managing.html#object-lock-managing-replication).
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public BucketReplicationConfigState()
        {
        }
        public static new BucketReplicationConfigState Empty => new BucketReplicationConfigState();
    }
}
