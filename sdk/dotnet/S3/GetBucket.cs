// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    public static class GetBucket
    {
        /// <summary>
        /// Provides details about a specific S3 bucket.
        /// 
        /// This resource may prove useful when setting up a Route53 record, or an origin for a CloudFront
        /// Distribution.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Route53 Record
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const selected = aws.s3.getBucket({
        ///     bucket: "bucket.test.com",
        /// });
        /// const testZone = aws.route53.getZone({
        ///     name: "test.com.",
        /// });
        /// const example = new aws.route53.Record("example", {
        ///     zoneId: testZone.then(testZone =&gt; testZone.id),
        ///     name: "bucket",
        ///     type: "A",
        ///     aliases: [{
        ///         name: selected.then(selected =&gt; selected.websiteDomain),
        ///         zoneId: selected.then(selected =&gt; selected.hostedZoneId),
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// selected = aws.s3.get_bucket(bucket="bucket.test.com")
        /// test_zone = aws.route53.get_zone(name="test.com.")
        /// example = aws.route53.Record("example",
        ///     zone_id=test_zone.id,
        ///     name="bucket",
        ///     type="A",
        ///     aliases=[aws.route53.RecordAliasArgs(
        ///         name=selected.website_domain,
        ///         zone_id=selected.hosted_zone_id,
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Aws.S3.GetBucket.Invoke(new()
        ///     {
        ///         Bucket = "bucket.test.com",
        ///     });
        /// 
        ///     var testZone = Aws.Route53.GetZone.Invoke(new()
        ///     {
        ///         Name = "test.com.",
        ///     });
        /// 
        ///     var example = new Aws.Route53.Record("example", new()
        ///     {
        ///         ZoneId = testZone.Apply(getZoneResult =&gt; getZoneResult.Id),
        ///         Name = "bucket",
        ///         Type = "A",
        ///         Aliases = new[]
        ///         {
        ///             new Aws.Route53.Inputs.RecordAliasArgs
        ///             {
        ///                 Name = selected.Apply(getBucketResult =&gt; getBucketResult.WebsiteDomain),
        ///                 ZoneId = selected.Apply(getBucketResult =&gt; getBucketResult.HostedZoneId),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		selected, err := s3.LookupBucket(ctx, &amp;s3.LookupBucketArgs{
        /// 			Bucket: "bucket.test.com",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		testZone, err := route53.LookupZone(ctx, &amp;route53.LookupZoneArgs{
        /// 			Name: pulumi.StringRef("test.com."),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = route53.NewRecord(ctx, "example", &amp;route53.RecordArgs{
        /// 			ZoneId: *pulumi.String(testZone.Id),
        /// 			Name:   pulumi.String("bucket"),
        /// 			Type:   pulumi.String("A"),
        /// 			Aliases: route53.RecordAliasArray{
        /// 				&amp;route53.RecordAliasArgs{
        /// 					Name:   *pulumi.String(selected.WebsiteDomain),
        /// 					ZoneId: *pulumi.String(selected.HostedZoneId),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.s3.S3Functions;
        /// import com.pulumi.aws.s3.inputs.GetBucketArgs;
        /// import com.pulumi.aws.route53.Route53Functions;
        /// import com.pulumi.aws.route53.inputs.GetZoneArgs;
        /// import com.pulumi.aws.route53.Record;
        /// import com.pulumi.aws.route53.RecordArgs;
        /// import com.pulumi.aws.route53.inputs.RecordAliasArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var selected = S3Functions.getBucket(GetBucketArgs.builder()
        ///             .bucket("bucket.test.com")
        ///             .build());
        /// 
        ///         final var testZone = Route53Functions.getZone(GetZoneArgs.builder()
        ///             .name("test.com.")
        ///             .build());
        /// 
        ///         var example = new Record("example", RecordArgs.builder()        
        ///             .zoneId(testZone.applyValue(getZoneResult -&gt; getZoneResult.id()))
        ///             .name("bucket")
        ///             .type("A")
        ///             .aliases(RecordAliasArgs.builder()
        ///                 .name(selected.applyValue(getBucketResult -&gt; getBucketResult.websiteDomain()))
        ///                 .zoneId(selected.applyValue(getBucketResult -&gt; getBucketResult.hostedZoneId()))
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   example:
        ///     type: aws:route53:Record
        ///     properties:
        ///       zoneId: ${testZone.id}
        ///       name: bucket
        ///       type: A
        ///       aliases:
        ///         - name: ${selected.websiteDomain}
        ///           zoneId: ${selected.hostedZoneId}
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:s3:getBucket
        ///       Arguments:
        ///         bucket: bucket.test.com
        ///   testZone:
        ///     fn::invoke:
        ///       Function: aws:route53:getZone
        ///       Arguments:
        ///         name: test.com.
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### CloudFront Origin
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const selected = aws.s3.getBucket({
        ///     bucket: "a-test-bucket",
        /// });
        /// const test = new aws.cloudfront.Distribution("test", {origins: [{
        ///     domainName: selected.then(selected =&gt; selected.bucketDomainName),
        ///     originId: "s3-selected-bucket",
        /// }]});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// selected = aws.s3.get_bucket(bucket="a-test-bucket")
        /// test = aws.cloudfront.Distribution("test", origins=[aws.cloudfront.DistributionOriginArgs(
        ///     domain_name=selected.bucket_domain_name,
        ///     origin_id="s3-selected-bucket",
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Aws.S3.GetBucket.Invoke(new()
        ///     {
        ///         Bucket = "a-test-bucket",
        ///     });
        /// 
        ///     var test = new Aws.CloudFront.Distribution("test", new()
        ///     {
        ///         Origins = new[]
        ///         {
        ///             new Aws.CloudFront.Inputs.DistributionOriginArgs
        ///             {
        ///                 DomainName = selected.Apply(getBucketResult =&gt; getBucketResult.BucketDomainName),
        ///                 OriginId = "s3-selected-bucket",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudfront"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		selected, err := s3.LookupBucket(ctx, &amp;s3.LookupBucketArgs{
        /// 			Bucket: "a-test-bucket",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = cloudfront.NewDistribution(ctx, "test", &amp;cloudfront.DistributionArgs{
        /// 			Origins: cloudfront.DistributionOriginArray{
        /// 				&amp;cloudfront.DistributionOriginArgs{
        /// 					DomainName: *pulumi.String(selected.BucketDomainName),
        /// 					OriginId:   pulumi.String("s3-selected-bucket"),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.s3.S3Functions;
        /// import com.pulumi.aws.s3.inputs.GetBucketArgs;
        /// import com.pulumi.aws.cloudfront.Distribution;
        /// import com.pulumi.aws.cloudfront.DistributionArgs;
        /// import com.pulumi.aws.cloudfront.inputs.DistributionOriginArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var selected = S3Functions.getBucket(GetBucketArgs.builder()
        ///             .bucket("a-test-bucket")
        ///             .build());
        /// 
        ///         var test = new Distribution("test", DistributionArgs.builder()        
        ///             .origins(DistributionOriginArgs.builder()
        ///                 .domainName(selected.applyValue(getBucketResult -&gt; getBucketResult.bucketDomainName()))
        ///                 .originId("s3-selected-bucket")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   test:
        ///     type: aws:cloudfront:Distribution
        ///     properties:
        ///       origins:
        ///         - domainName: ${selected.bucketDomainName}
        ///           originId: s3-selected-bucket
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:s3:getBucket
        ///       Arguments:
        ///         bucket: a-test-bucket
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("aws:s3/getBucket:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific S3 bucket.
        /// 
        /// This resource may prove useful when setting up a Route53 record, or an origin for a CloudFront
        /// Distribution.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Route53 Record
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const selected = aws.s3.getBucket({
        ///     bucket: "bucket.test.com",
        /// });
        /// const testZone = aws.route53.getZone({
        ///     name: "test.com.",
        /// });
        /// const example = new aws.route53.Record("example", {
        ///     zoneId: testZone.then(testZone =&gt; testZone.id),
        ///     name: "bucket",
        ///     type: "A",
        ///     aliases: [{
        ///         name: selected.then(selected =&gt; selected.websiteDomain),
        ///         zoneId: selected.then(selected =&gt; selected.hostedZoneId),
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// selected = aws.s3.get_bucket(bucket="bucket.test.com")
        /// test_zone = aws.route53.get_zone(name="test.com.")
        /// example = aws.route53.Record("example",
        ///     zone_id=test_zone.id,
        ///     name="bucket",
        ///     type="A",
        ///     aliases=[aws.route53.RecordAliasArgs(
        ///         name=selected.website_domain,
        ///         zone_id=selected.hosted_zone_id,
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Aws.S3.GetBucket.Invoke(new()
        ///     {
        ///         Bucket = "bucket.test.com",
        ///     });
        /// 
        ///     var testZone = Aws.Route53.GetZone.Invoke(new()
        ///     {
        ///         Name = "test.com.",
        ///     });
        /// 
        ///     var example = new Aws.Route53.Record("example", new()
        ///     {
        ///         ZoneId = testZone.Apply(getZoneResult =&gt; getZoneResult.Id),
        ///         Name = "bucket",
        ///         Type = "A",
        ///         Aliases = new[]
        ///         {
        ///             new Aws.Route53.Inputs.RecordAliasArgs
        ///             {
        ///                 Name = selected.Apply(getBucketResult =&gt; getBucketResult.WebsiteDomain),
        ///                 ZoneId = selected.Apply(getBucketResult =&gt; getBucketResult.HostedZoneId),
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/route53"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		selected, err := s3.LookupBucket(ctx, &amp;s3.LookupBucketArgs{
        /// 			Bucket: "bucket.test.com",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		testZone, err := route53.LookupZone(ctx, &amp;route53.LookupZoneArgs{
        /// 			Name: pulumi.StringRef("test.com."),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = route53.NewRecord(ctx, "example", &amp;route53.RecordArgs{
        /// 			ZoneId: *pulumi.String(testZone.Id),
        /// 			Name:   pulumi.String("bucket"),
        /// 			Type:   pulumi.String("A"),
        /// 			Aliases: route53.RecordAliasArray{
        /// 				&amp;route53.RecordAliasArgs{
        /// 					Name:   *pulumi.String(selected.WebsiteDomain),
        /// 					ZoneId: *pulumi.String(selected.HostedZoneId),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.s3.S3Functions;
        /// import com.pulumi.aws.s3.inputs.GetBucketArgs;
        /// import com.pulumi.aws.route53.Route53Functions;
        /// import com.pulumi.aws.route53.inputs.GetZoneArgs;
        /// import com.pulumi.aws.route53.Record;
        /// import com.pulumi.aws.route53.RecordArgs;
        /// import com.pulumi.aws.route53.inputs.RecordAliasArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var selected = S3Functions.getBucket(GetBucketArgs.builder()
        ///             .bucket("bucket.test.com")
        ///             .build());
        /// 
        ///         final var testZone = Route53Functions.getZone(GetZoneArgs.builder()
        ///             .name("test.com.")
        ///             .build());
        /// 
        ///         var example = new Record("example", RecordArgs.builder()        
        ///             .zoneId(testZone.applyValue(getZoneResult -&gt; getZoneResult.id()))
        ///             .name("bucket")
        ///             .type("A")
        ///             .aliases(RecordAliasArgs.builder()
        ///                 .name(selected.applyValue(getBucketResult -&gt; getBucketResult.websiteDomain()))
        ///                 .zoneId(selected.applyValue(getBucketResult -&gt; getBucketResult.hostedZoneId()))
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   example:
        ///     type: aws:route53:Record
        ///     properties:
        ///       zoneId: ${testZone.id}
        ///       name: bucket
        ///       type: A
        ///       aliases:
        ///         - name: ${selected.websiteDomain}
        ///           zoneId: ${selected.hostedZoneId}
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:s3:getBucket
        ///       Arguments:
        ///         bucket: bucket.test.com
        ///   testZone:
        ///     fn::invoke:
        ///       Function: aws:route53:getZone
        ///       Arguments:
        ///         name: test.com.
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### CloudFront Origin
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const selected = aws.s3.getBucket({
        ///     bucket: "a-test-bucket",
        /// });
        /// const test = new aws.cloudfront.Distribution("test", {origins: [{
        ///     domainName: selected.then(selected =&gt; selected.bucketDomainName),
        ///     originId: "s3-selected-bucket",
        /// }]});
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// selected = aws.s3.get_bucket(bucket="a-test-bucket")
        /// test = aws.cloudfront.Distribution("test", origins=[aws.cloudfront.DistributionOriginArgs(
        ///     domain_name=selected.bucket_domain_name,
        ///     origin_id="s3-selected-bucket",
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Aws.S3.GetBucket.Invoke(new()
        ///     {
        ///         Bucket = "a-test-bucket",
        ///     });
        /// 
        ///     var test = new Aws.CloudFront.Distribution("test", new()
        ///     {
        ///         Origins = new[]
        ///         {
        ///             new Aws.CloudFront.Inputs.DistributionOriginArgs
        ///             {
        ///                 DomainName = selected.Apply(getBucketResult =&gt; getBucketResult.BucketDomainName),
        ///                 OriginId = "s3-selected-bucket",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/cloudfront"
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		selected, err := s3.LookupBucket(ctx, &amp;s3.LookupBucketArgs{
        /// 			Bucket: "a-test-bucket",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = cloudfront.NewDistribution(ctx, "test", &amp;cloudfront.DistributionArgs{
        /// 			Origins: cloudfront.DistributionOriginArray{
        /// 				&amp;cloudfront.DistributionOriginArgs{
        /// 					DomainName: *pulumi.String(selected.BucketDomainName),
        /// 					OriginId:   pulumi.String("s3-selected-bucket"),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.s3.S3Functions;
        /// import com.pulumi.aws.s3.inputs.GetBucketArgs;
        /// import com.pulumi.aws.cloudfront.Distribution;
        /// import com.pulumi.aws.cloudfront.DistributionArgs;
        /// import com.pulumi.aws.cloudfront.inputs.DistributionOriginArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var selected = S3Functions.getBucket(GetBucketArgs.builder()
        ///             .bucket("a-test-bucket")
        ///             .build());
        /// 
        ///         var test = new Distribution("test", DistributionArgs.builder()        
        ///             .origins(DistributionOriginArgs.builder()
        ///                 .domainName(selected.applyValue(getBucketResult -&gt; getBucketResult.bucketDomainName()))
        ///                 .originId("s3-selected-bucket")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   test:
        ///     type: aws:cloudfront:Distribution
        ///     properties:
        ///       origins:
        ///         - domainName: ${selected.bucketDomainName}
        ///           originId: s3-selected-bucket
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:s3:getBucket
        ///       Arguments:
        ///         bucket: a-test-bucket
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("aws:s3/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Input("bucket", required: true)]
        public string Bucket { get; set; } = null!;

        public GetBucketArgs()
        {
        }
        public static new GetBucketArgs Empty => new GetBucketArgs();
    }

    public sealed class GetBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the bucket
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        public GetBucketInvokeArgs()
        {
        }
        public static new GetBucketInvokeArgs Empty => new GetBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        /// <summary>
        /// ARN of the bucket. Will be of format `arn:aws:s3:::bucketname`.
        /// </summary>
        public readonly string Arn;
        public readonly string Bucket;
        /// <summary>
        /// Bucket domain name. Will be of format `bucketname.s3.amazonaws.com`.
        /// </summary>
        public readonly string BucketDomainName;
        /// <summary>
        /// The bucket region-specific domain name. The bucket domain name including the region name, please refer [here](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for format. Note: The AWS CloudFront allows specifying S3 region-specific endpoint when creating S3 origin, it will prevent [redirect issues](https://forums.aws.amazon.com/thread.jspa?threadID=216814) from CloudFront to S3 Origin URL.
        /// </summary>
        public readonly string BucketRegionalDomainName;
        /// <summary>
        /// The [Route 53 Hosted Zone ID](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_website_region_endpoints) for this bucket's region.
        /// </summary>
        public readonly string HostedZoneId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// AWS region this bucket resides in.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string. This is used to create Route 53 alias records.
        /// </summary>
        public readonly string WebsiteDomain;
        /// <summary>
        /// Website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        /// </summary>
        public readonly string WebsiteEndpoint;

        [OutputConstructor]
        private GetBucketResult(
            string arn,

            string bucket,

            string bucketDomainName,

            string bucketRegionalDomainName,

            string hostedZoneId,

            string id,

            string region,

            string websiteDomain,

            string websiteEndpoint)
        {
            Arn = arn;
            Bucket = bucket;
            BucketDomainName = bucketDomainName;
            BucketRegionalDomainName = bucketRegionalDomainName;
            HostedZoneId = hostedZoneId;
            Id = id;
            Region = region;
            WebsiteDomain = websiteDomain;
            WebsiteEndpoint = websiteEndpoint;
        }
    }
}
