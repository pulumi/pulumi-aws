// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    /// <summary>
    /// Provides an S3 bucket ACL resource.
    /// 
    /// &gt; **Note:** destroy does not delete the S3 Bucket ACL but does remove the resource from state.
    /// 
    /// &gt; This resource cannot be used with S3 directory buckets.
    /// 
    /// ## Example Usage
    /// 
    /// ### With `private` ACL
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "my-tf-example-bucket",
    ///     });
    /// 
    ///     var exampleBucketOwnershipControls = new Aws.S3.BucketOwnershipControls("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         Rule = new Aws.S3.Inputs.BucketOwnershipControlsRuleArgs
    ///         {
    ///             ObjectOwnership = "BucketOwnerPreferred",
    ///         },
    ///     });
    /// 
    ///     var exampleBucketAcl = new Aws.S3.BucketAcl("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         Acl = "private",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleBucketOwnershipControls,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With `public-read` ACL
    /// 
    /// &gt; This example explicitly disables the default S3 bucket security settings. This
    /// should be done with caution, as all bucket objects become publicly exposed.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "my-tf-example-bucket",
    ///     });
    /// 
    ///     var exampleBucketOwnershipControls = new Aws.S3.BucketOwnershipControls("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         Rule = new Aws.S3.Inputs.BucketOwnershipControlsRuleArgs
    ///         {
    ///             ObjectOwnership = "BucketOwnerPreferred",
    ///         },
    ///     });
    /// 
    ///     var exampleBucketPublicAccessBlock = new Aws.S3.BucketPublicAccessBlock("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         BlockPublicAcls = false,
    ///         BlockPublicPolicy = false,
    ///         IgnorePublicAcls = false,
    ///         RestrictPublicBuckets = false,
    ///     });
    /// 
    ///     var exampleBucketAcl = new Aws.S3.BucketAcl("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         Acl = "public-read",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleBucketOwnershipControls,
    ///             exampleBucketPublicAccessBlock,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With Grants
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.S3.GetCanonicalUserId.Invoke();
    /// 
    ///     var example = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "my-tf-example-bucket",
    ///     });
    /// 
    ///     var exampleBucketOwnershipControls = new Aws.S3.BucketOwnershipControls("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         Rule = new Aws.S3.Inputs.BucketOwnershipControlsRuleArgs
    ///         {
    ///             ObjectOwnership = "BucketOwnerPreferred",
    ///         },
    ///     });
    /// 
    ///     var exampleBucketAcl = new Aws.S3.BucketAcl("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         AccessControlPolicy = new Aws.S3.Inputs.BucketAclAccessControlPolicyArgs
    ///         {
    ///             Grants = new[]
    ///             {
    ///                 new Aws.S3.Inputs.BucketAclAccessControlPolicyGrantArgs
    ///                 {
    ///                     Grantee = new Aws.S3.Inputs.BucketAclAccessControlPolicyGrantGranteeArgs
    ///                     {
    ///                         Id = current.Apply(getCanonicalUserIdResult =&gt; getCanonicalUserIdResult.Id),
    ///                         Type = "CanonicalUser",
    ///                     },
    ///                     Permission = "READ",
    ///                 },
    ///                 new Aws.S3.Inputs.BucketAclAccessControlPolicyGrantArgs
    ///                 {
    ///                     Grantee = new Aws.S3.Inputs.BucketAclAccessControlPolicyGrantGranteeArgs
    ///                     {
    ///                         Type = "Group",
    ///                         Uri = "http://acs.amazonaws.com/groups/s3/LogDelivery",
    ///                     },
    ///                     Permission = "READ_ACP",
    ///                 },
    ///             },
    ///             Owner = new Aws.S3.Inputs.BucketAclAccessControlPolicyOwnerArgs
    ///             {
    ///                 Id = current.Apply(getCanonicalUserIdResult =&gt; getCanonicalUserIdResult.Id),
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleBucketOwnershipControls,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// If the owner (account ID) of the source bucket is the _same_ account used to configure the AWS Provider, and the source bucket is __configured__ with a
    /// [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), import using the `bucket` and `acl` separated by a comma (`,`):
    /// 
    /// If the owner (account ID) of the source bucket _differs_ from the account used to configure the AWS Provider, and the source bucket is __not configured__ with a [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
    /// 
    /// If the owner (account ID) of the source bucket _differs_ from the account used to configure the AWS Provider, and the source bucket is __configured__ with a
    /// [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), imported using the `bucket`, `expected_bucket_owner`, and `acl` separated by commas (`,`):
    /// 
    /// __Using `pulumi import` to import__ using `bucket`, `expected_bucket_owner`, and/or `acl`, depending on your situation. For example:
    /// 
    /// If the owner (account ID) of the source bucket is the _same_ account used to configure the AWS Provider, and the source bucket is __not configured__ with a
    /// [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), import using the `bucket`:
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketAcl:BucketAcl example bucket-name
    /// ```
    /// If the owner (account ID) of the source bucket is the _same_ account used to configure the AWS Provider, and the source bucket is __configured__ with a [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), import using the `bucket` and `acl` separated by a comma (`,`):
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketAcl:BucketAcl example bucket-name,private
    /// ```
    /// If the owner (account ID) of the source bucket _differs_ from the account used to configure the AWS Provider, and the source bucket is __not configured__ with a [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketAcl:BucketAcl example bucket-name,123456789012
    /// ```
    /// If the owner (account ID) of the source bucket _differs_ from the account used to configure the AWS Provider, and the source bucket is __configured__ with a [canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) (i.e. predefined grant), imported using the `bucket`, `expected_bucket_owner`, and `acl` separated by commas (`,`):
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketAcl:BucketAcl example bucket-name,123456789012,private
    /// ```
    /// </summary>
    [AwsResourceType("aws:s3/bucketAcl:BucketAcl")]
    public partial class BucketAcl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block that sets the ACL permissions for an object per grantee. See below.
        /// </summary>
        [Output("accessControlPolicy")]
        public Output<Outputs.BucketAclAccessControlPolicy> AccessControlPolicy { get; private set; } = null!;

        /// <summary>
        /// Specifies the Canned ACL to apply to the bucket. Valid values: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`, `log-delivery-write`. Full details are available on the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
        /// </summary>
        [Output("acl")]
        public Output<string?> Acl { get; private set; } = null!;

        /// <summary>
        /// Bucket to which to apply the ACL.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// Account ID of the expected bucket owner.
        /// </summary>
        [Output("expectedBucketOwner")]
        public Output<string?> ExpectedBucketOwner { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;


        /// <summary>
        /// Create a BucketAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketAcl(string name, BucketAclArgs args, CustomResourceOptions? options = null)
            : base("aws:s3/bucketAcl:BucketAcl", name, args ?? new BucketAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketAcl(string name, Input<string> id, BucketAclState? state = null, CustomResourceOptions? options = null)
            : base("aws:s3/bucketAcl:BucketAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "aws:s3/bucketAclV2:BucketAclV2" },
                    new global::Pulumi.Alias { Type = "aws:s3/bucketAclV2:BucketAclV2" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketAcl Get(string name, Input<string> id, BucketAclState? state = null, CustomResourceOptions? options = null)
        {
            return new BucketAcl(name, id, state, options);
        }
    }

    public sealed class BucketAclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block that sets the ACL permissions for an object per grantee. See below.
        /// </summary>
        [Input("accessControlPolicy")]
        public Input<Inputs.BucketAclAccessControlPolicyArgs>? AccessControlPolicy { get; set; }

        /// <summary>
        /// Specifies the Canned ACL to apply to the bucket. Valid values: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`, `log-delivery-write`. Full details are available on the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        /// <summary>
        /// Bucket to which to apply the ACL.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Account ID of the expected bucket owner.
        /// </summary>
        [Input("expectedBucketOwner")]
        public Input<string>? ExpectedBucketOwner { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public BucketAclArgs()
        {
        }
        public static new BucketAclArgs Empty => new BucketAclArgs();
    }

    public sealed class BucketAclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block that sets the ACL permissions for an object per grantee. See below.
        /// </summary>
        [Input("accessControlPolicy")]
        public Input<Inputs.BucketAclAccessControlPolicyGetArgs>? AccessControlPolicy { get; set; }

        /// <summary>
        /// Specifies the Canned ACL to apply to the bucket. Valid values: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`, `log-delivery-write`. Full details are available on the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
        /// </summary>
        [Input("acl")]
        public Input<string>? Acl { get; set; }

        /// <summary>
        /// Bucket to which to apply the ACL.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Account ID of the expected bucket owner.
        /// </summary>
        [Input("expectedBucketOwner")]
        public Input<string>? ExpectedBucketOwner { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public BucketAclState()
        {
        }
        public static new BucketAclState Empty => new BucketAclState();
    }
}
