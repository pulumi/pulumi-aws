// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    /// <summary>
    /// Provides an independent configuration resource for S3 bucket [lifecycle configuration](https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var bucket = new Aws.S3.BucketV2("bucket", new Aws.S3.BucketV2Args
    ///         {
    ///         });
    ///         var bucketAcl = new Aws.S3.BucketAclV2("bucketAcl", new Aws.S3.BucketAclV2Args
    ///         {
    ///             Bucket = bucket.Id,
    ///             Acl = "private",
    ///         });
    ///         var bucket_config = new Aws.S3.BucketLifecycleConfigurationV2("bucket-config", new Aws.S3.BucketLifecycleConfigurationV2Args
    ///         {
    ///             Bucket = bucket.Bucket,
    ///             Rules = 
    ///             {
    ///                 new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleArgs
    ///                 {
    ///                     Id = "log",
    ///                     Expiration = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleExpirationArgs
    ///                     {
    ///                         Days = 90,
    ///                     },
    ///                     Filter = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleFilterArgs
    ///                     {
    ///                         And = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleFilterAndArgs
    ///                         {
    ///                             Prefix = "log/",
    ///                             Tags = 
    ///                             {
    ///                                 { "rule", "log" },
    ///                                 { "autoclean", "true" },
    ///                             },
    ///                         },
    ///                     },
    ///                     Status = "Enabled",
    ///                     Transitions = 
    ///                     {
    ///                         new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleTransitionArgs
    ///                         {
    ///                             Days = 30,
    ///                             StorageClass = "STANDARD_IA",
    ///                         },
    ///                         new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleTransitionArgs
    ///                         {
    ///                             Days = 60,
    ///                             StorageClass = "GLACIER",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleArgs
    ///                 {
    ///                     Id = "tmp",
    ///                     Filter = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleFilterArgs
    ///                     {
    ///                         Prefix = "tmp/",
    ///                     },
    ///                     Expiration = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleExpirationArgs
    ///                     {
    ///                         Date = "2023-01-13T00:00:00Z",
    ///                     },
    ///                     Status = "Enabled",
    ///                 },
    ///             },
    ///         });
    ///         var versioningBucket = new Aws.S3.BucketV2("versioningBucket", new Aws.S3.BucketV2Args
    ///         {
    ///         });
    ///         var versioningBucketAcl = new Aws.S3.BucketAclV2("versioningBucketAcl", new Aws.S3.BucketAclV2Args
    ///         {
    ///             Bucket = versioningBucket.Id,
    ///             Acl = "private",
    ///         });
    ///         var versioning = new Aws.S3.BucketVersioningV2("versioning", new Aws.S3.BucketVersioningV2Args
    ///         {
    ///             Bucket = versioningBucket.Id,
    ///             VersioningConfiguration = new Aws.S3.Inputs.BucketVersioningV2VersioningConfigurationArgs
    ///             {
    ///                 Status = "Enabled",
    ///             },
    ///         });
    ///         var versioning_bucket_config = new Aws.S3.BucketLifecycleConfigurationV2("versioning-bucket-config", new Aws.S3.BucketLifecycleConfigurationV2Args
    ///         {
    ///             Bucket = versioningBucket.Bucket,
    ///             Rules = 
    ///             {
    ///                 new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleArgs
    ///                 {
    ///                     Id = "config",
    ///                     Filter = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleFilterArgs
    ///                     {
    ///                         Prefix = "config/",
    ///                     },
    ///                     NoncurrentVersionExpiration = new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionExpirationArgs
    ///                     {
    ///                         NoncurrentDays = 90,
    ///                     },
    ///                     NoncurrentVersionTransitions = 
    ///                     {
    ///                         new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs
    ///                         {
    ///                             NoncurrentDays = 30,
    ///                             StorageClass = "STANDARD_IA",
    ///                         },
    ///                         new Aws.S3.Inputs.BucketLifecycleConfigurationV2RuleNoncurrentVersionTransitionArgs
    ///                         {
    ///                             NoncurrentDays = 60,
    ///                             StorageClass = "GLACIER",
    ///                         },
    ///                     },
    ///                     Status = "Enabled",
    ///                 },
    ///             },
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 versioning,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ## Usage Notes
    /// 
    /// &gt; **NOTE:** To avoid conflicts always add the following lifecycle object to the `aws.s3.BucketV2` resource of the source bucket.
    /// 
    /// This resource implements the same features that are provided by the `lifecycle_rule` object of the `aws.s3.BucketV2` resource. To avoid conflicts or unexpected apply results, a lifecycle configuration is needed on the `aws.s3.BucketV2` to ignore changes to the internal `lifecycle_rule` object.  Failure to add the `lifecycle` configuration to the `aws.s3.BucketV2` will result in conflicting state results.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// The `aws.s3.BucketLifecycleConfigurationV2` resource provides the following features that are not available in the `aws.s3.BucketV2` resource:
    /// 
    /// * `filter` - Added to the `rule` configuration block documented below.
    /// 
    /// ## Import
    /// 
    /// S3 bucket lifecycle configuration can be imported using the `bucket`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name
    /// ```
    /// 
    ///  In addition, S3 bucket lifecycle configuration can be imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`) e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2 example bucket-name,123456789012
    /// ```
    /// </summary>
    [AwsResourceType("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2")]
    public partial class BucketLifecycleConfigurationV2 : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the source S3 bucket you want Amazon S3 to monitor.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
        /// </summary>
        [Output("expectedBucketOwner")]
        public Output<string?> ExpectedBucketOwner { get; private set; } = null!;

        /// <summary>
        /// List of configuration blocks describing the rules managing the replication documented below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.BucketLifecycleConfigurationV2Rule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a BucketLifecycleConfigurationV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketLifecycleConfigurationV2(string name, BucketLifecycleConfigurationV2Args args, CustomResourceOptions? options = null)
            : base("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2", name, args ?? new BucketLifecycleConfigurationV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private BucketLifecycleConfigurationV2(string name, Input<string> id, BucketLifecycleConfigurationV2State? state = null, CustomResourceOptions? options = null)
            : base("aws:s3/bucketLifecycleConfigurationV2:BucketLifecycleConfigurationV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketLifecycleConfigurationV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketLifecycleConfigurationV2 Get(string name, Input<string> id, BucketLifecycleConfigurationV2State? state = null, CustomResourceOptions? options = null)
        {
            return new BucketLifecycleConfigurationV2(name, id, state, options);
        }
    }

    public sealed class BucketLifecycleConfigurationV2Args : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the source S3 bucket you want Amazon S3 to monitor.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
        /// </summary>
        [Input("expectedBucketOwner")]
        public Input<string>? ExpectedBucketOwner { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.BucketLifecycleConfigurationV2RuleArgs>? _rules;

        /// <summary>
        /// List of configuration blocks describing the rules managing the replication documented below.
        /// </summary>
        public InputList<Inputs.BucketLifecycleConfigurationV2RuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.BucketLifecycleConfigurationV2RuleArgs>());
            set => _rules = value;
        }

        public BucketLifecycleConfigurationV2Args()
        {
        }
    }

    public sealed class BucketLifecycleConfigurationV2State : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the source S3 bucket you want Amazon S3 to monitor.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// The account ID of the expected bucket owner. If the bucket is owned by a different account, the request will fail with an HTTP 403 (Access Denied) error.
        /// </summary>
        [Input("expectedBucketOwner")]
        public Input<string>? ExpectedBucketOwner { get; set; }

        [Input("rules")]
        private InputList<Inputs.BucketLifecycleConfigurationV2RuleGetArgs>? _rules;

        /// <summary>
        /// List of configuration blocks describing the rules managing the replication documented below.
        /// </summary>
        public InputList<Inputs.BucketLifecycleConfigurationV2RuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.BucketLifecycleConfigurationV2RuleGetArgs>());
            set => _rules = value;
        }

        public BucketLifecycleConfigurationV2State()
        {
        }
    }
}
