// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    /// <summary>
    /// Provides an S3 bucket (server access) logging resource. For more information, see [Logging requests using server access logging](https://docs.aws.amazon.com/AmazonS3/latest/userguide/ServerLogs.html)
    /// in the AWS S3 User Guide.
    /// 
    /// &gt; **Note:** Amazon S3 supports server access logging, AWS CloudTrail, or a combination of both. Refer to the [Logging options for Amazon S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/logging-with-S3.html)
    /// to decide which method meets your requirements.
    /// 
    /// &gt; This resource cannot be used with S3 directory buckets.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "my-tf-example-bucket",
    ///     });
    /// 
    ///     var exampleBucketAcl = new Aws.S3.BucketAcl("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         Acl = "private",
    ///     });
    /// 
    ///     var logBucket = new Aws.S3.Bucket("log_bucket", new()
    ///     {
    ///         BucketName = "my-tf-log-bucket",
    ///     });
    /// 
    ///     var logBucketAcl = new Aws.S3.BucketAcl("log_bucket_acl", new()
    ///     {
    ///         Bucket = logBucket.Id,
    ///         Acl = "log-delivery-write",
    ///     });
    /// 
    ///     var exampleBucketLogging = new Aws.S3.BucketLogging("example", new()
    ///     {
    ///         Bucket = example.Id,
    ///         TargetBucket = logBucket.Id,
    ///         TargetPrefix = "log/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
    /// 
    /// __Using `pulumi import` to import__ S3 bucket logging using the `bucket` or using the `bucket` and `expected_bucket_owner` separated by a comma (`,`). For example:
    /// 
    /// If the owner (account ID) of the source bucket is the same account used to configure the AWS Provider, import using the `bucket`:
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketLogging:BucketLogging example bucket-name
    /// ```
    /// If the owner (account ID) of the source bucket differs from the account used to configure the AWS Provider, import using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):
    /// 
    /// ```sh
    /// $ pulumi import aws:s3/bucketLogging:BucketLogging example bucket-name,123456789012
    /// ```
    /// </summary>
    [AwsResourceType("aws:s3/bucketLogging:BucketLogging")]
    public partial class BucketLogging : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// Account ID of the expected bucket owner.
        /// </summary>
        [Output("expectedBucketOwner")]
        public Output<string?> ExpectedBucketOwner { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Name of the bucket where you want Amazon S3 to store server access logs.
        /// </summary>
        [Output("targetBucket")]
        public Output<string> TargetBucket { get; private set; } = null!;

        /// <summary>
        /// Set of configuration blocks with information for granting permissions. See below.
        /// </summary>
        [Output("targetGrants")]
        public Output<ImmutableArray<Outputs.BucketLoggingTargetGrant>> TargetGrants { get; private set; } = null!;

        /// <summary>
        /// Amazon S3 key format for log objects. See below.
        /// </summary>
        [Output("targetObjectKeyFormat")]
        public Output<Outputs.BucketLoggingTargetObjectKeyFormat?> TargetObjectKeyFormat { get; private set; } = null!;

        /// <summary>
        /// Prefix for all log object keys.
        /// </summary>
        [Output("targetPrefix")]
        public Output<string> TargetPrefix { get; private set; } = null!;


        /// <summary>
        /// Create a BucketLogging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BucketLogging(string name, BucketLoggingArgs args, CustomResourceOptions? options = null)
            : base("aws:s3/bucketLogging:BucketLogging", name, args ?? new BucketLoggingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BucketLogging(string name, Input<string> id, BucketLoggingState? state = null, CustomResourceOptions? options = null)
            : base("aws:s3/bucketLogging:BucketLogging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "aws:s3/bucketLoggingV2:BucketLoggingV2" },
                    new global::Pulumi.Alias { Type = "aws:s3/bucketLoggingV2:BucketLoggingV2" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BucketLogging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BucketLogging Get(string name, Input<string> id, BucketLoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new BucketLogging(name, id, state, options);
        }
    }

    public sealed class BucketLoggingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Account ID of the expected bucket owner.
        /// </summary>
        [Input("expectedBucketOwner")]
        public Input<string>? ExpectedBucketOwner { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Name of the bucket where you want Amazon S3 to store server access logs.
        /// </summary>
        [Input("targetBucket", required: true)]
        public Input<string> TargetBucket { get; set; } = null!;

        [Input("targetGrants")]
        private InputList<Inputs.BucketLoggingTargetGrantArgs>? _targetGrants;

        /// <summary>
        /// Set of configuration blocks with information for granting permissions. See below.
        /// </summary>
        public InputList<Inputs.BucketLoggingTargetGrantArgs> TargetGrants
        {
            get => _targetGrants ?? (_targetGrants = new InputList<Inputs.BucketLoggingTargetGrantArgs>());
            set => _targetGrants = value;
        }

        /// <summary>
        /// Amazon S3 key format for log objects. See below.
        /// </summary>
        [Input("targetObjectKeyFormat")]
        public Input<Inputs.BucketLoggingTargetObjectKeyFormatArgs>? TargetObjectKeyFormat { get; set; }

        /// <summary>
        /// Prefix for all log object keys.
        /// </summary>
        [Input("targetPrefix", required: true)]
        public Input<string> TargetPrefix { get; set; } = null!;

        public BucketLoggingArgs()
        {
        }
        public static new BucketLoggingArgs Empty => new BucketLoggingArgs();
    }

    public sealed class BucketLoggingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the bucket.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Account ID of the expected bucket owner.
        /// </summary>
        [Input("expectedBucketOwner")]
        public Input<string>? ExpectedBucketOwner { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Name of the bucket where you want Amazon S3 to store server access logs.
        /// </summary>
        [Input("targetBucket")]
        public Input<string>? TargetBucket { get; set; }

        [Input("targetGrants")]
        private InputList<Inputs.BucketLoggingTargetGrantGetArgs>? _targetGrants;

        /// <summary>
        /// Set of configuration blocks with information for granting permissions. See below.
        /// </summary>
        public InputList<Inputs.BucketLoggingTargetGrantGetArgs> TargetGrants
        {
            get => _targetGrants ?? (_targetGrants = new InputList<Inputs.BucketLoggingTargetGrantGetArgs>());
            set => _targetGrants = value;
        }

        /// <summary>
        /// Amazon S3 key format for log objects. See below.
        /// </summary>
        [Input("targetObjectKeyFormat")]
        public Input<Inputs.BucketLoggingTargetObjectKeyFormatGetArgs>? TargetObjectKeyFormat { get; set; }

        /// <summary>
        /// Prefix for all log object keys.
        /// </summary>
        [Input("targetPrefix")]
        public Input<string>? TargetPrefix { get; set; }

        public BucketLoggingState()
        {
        }
        public static new BucketLoggingState Empty => new BucketLoggingState();
    }
}
