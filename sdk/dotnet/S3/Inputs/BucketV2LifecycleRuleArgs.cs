// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3.Inputs
{

    public sealed class BucketV2LifecycleRuleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of days after initiating a multipart upload when the multipart upload must be completed.
        /// </summary>
        [Input("abortIncompleteMultipartUploadDays")]
        public Input<int>? AbortIncompleteMultipartUploadDays { get; set; }

        /// <summary>
        /// Whether versioning is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("expirations")]
        private InputList<Inputs.BucketV2LifecycleRuleExpirationArgs>? _expirations;

        /// <summary>
        /// The expiration for the lifecycle of the object in the form of date, days and, whether the object has a delete marker.
        /// </summary>
        [Obsolete(@"Use the aws_s3_bucket_lifecycle_configuration resource instead")]
        public InputList<Inputs.BucketV2LifecycleRuleExpirationArgs> Expirations
        {
            get => _expirations ?? (_expirations = new InputList<Inputs.BucketV2LifecycleRuleExpirationArgs>());
            set => _expirations = value;
        }

        /// <summary>
        /// Unique identifier for the rule.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("noncurrentVersionExpirations")]
        private InputList<Inputs.BucketV2LifecycleRuleNoncurrentVersionExpirationArgs>? _noncurrentVersionExpirations;

        /// <summary>
        /// When noncurrent object versions expire.
        /// </summary>
        [Obsolete(@"Use the aws_s3_bucket_lifecycle_configuration resource instead")]
        public InputList<Inputs.BucketV2LifecycleRuleNoncurrentVersionExpirationArgs> NoncurrentVersionExpirations
        {
            get => _noncurrentVersionExpirations ?? (_noncurrentVersionExpirations = new InputList<Inputs.BucketV2LifecycleRuleNoncurrentVersionExpirationArgs>());
            set => _noncurrentVersionExpirations = value;
        }

        [Input("noncurrentVersionTransitions")]
        private InputList<Inputs.BucketV2LifecycleRuleNoncurrentVersionTransitionArgs>? _noncurrentVersionTransitions;

        /// <summary>
        /// When noncurrent object versions transition.
        /// </summary>
        [Obsolete(@"Use the aws_s3_bucket_lifecycle_configuration resource instead")]
        public InputList<Inputs.BucketV2LifecycleRuleNoncurrentVersionTransitionArgs> NoncurrentVersionTransitions
        {
            get => _noncurrentVersionTransitions ?? (_noncurrentVersionTransitions = new InputList<Inputs.BucketV2LifecycleRuleNoncurrentVersionTransitionArgs>());
            set => _noncurrentVersionTransitions = value;
        }

        /// <summary>
        /// Object keyname prefix identifying one or more objects to which the rule applies
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the bucket. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Obsolete(@"Use the aws_s3_bucket_lifecycle_configuration resource instead")]
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transitions")]
        private InputList<Inputs.BucketV2LifecycleRuleTransitionArgs>? _transitions;

        /// <summary>
        /// Specifies when an Amazon S3 object transitions to a specified storage class.
        /// </summary>
        [Obsolete(@"Use the aws_s3_bucket_lifecycle_configuration resource instead")]
        public InputList<Inputs.BucketV2LifecycleRuleTransitionArgs> Transitions
        {
            get => _transitions ?? (_transitions = new InputList<Inputs.BucketV2LifecycleRuleTransitionArgs>());
            set => _transitions = value;
        }

        public BucketV2LifecycleRuleArgs()
        {
        }
    }
}
