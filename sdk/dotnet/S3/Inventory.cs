// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    /// <summary>
    /// Provides a S3 bucket [inventory configuration](https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-inventory.html) resource.
    /// 
    /// ## Example Usage
    /// ### Add inventory configuration
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testBucket = new Aws.S3.Bucket("testBucket", new Aws.S3.BucketArgs
    ///         {
    ///         });
    ///         var inventory = new Aws.S3.Bucket("inventory", new Aws.S3.BucketArgs
    ///         {
    ///         });
    ///         var testInventory = new Aws.S3.Inventory("testInventory", new Aws.S3.InventoryArgs
    ///         {
    ///             Bucket = testBucket.Id,
    ///             IncludedObjectVersions = "All",
    ///             Schedule = new Aws.S3.Inputs.InventoryScheduleArgs
    ///             {
    ///                 Frequency = "Daily",
    ///             },
    ///             Destination = new Aws.S3.Inputs.InventoryDestinationArgs
    ///             {
    ///                 Bucket = new Aws.S3.Inputs.InventoryDestinationBucketArgs
    ///                 {
    ///                     Format = "ORC",
    ///                     BucketArn = inventory.Arn,
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Add inventory configuration with S3 bucket object prefix
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Aws.S3.Bucket("test", new Aws.S3.BucketArgs
    ///         {
    ///         });
    ///         var inventory = new Aws.S3.Bucket("inventory", new Aws.S3.BucketArgs
    ///         {
    ///         });
    ///         var test_prefix = new Aws.S3.Inventory("test-prefix", new Aws.S3.InventoryArgs
    ///         {
    ///             Bucket = test.Id,
    ///             IncludedObjectVersions = "All",
    ///             Schedule = new Aws.S3.Inputs.InventoryScheduleArgs
    ///             {
    ///                 Frequency = "Daily",
    ///             },
    ///             Filter = new Aws.S3.Inputs.InventoryFilterArgs
    ///             {
    ///                 Prefix = "documents/",
    ///             },
    ///             Destination = new Aws.S3.Inputs.InventoryDestinationArgs
    ///             {
    ///                 Bucket = new Aws.S3.Inputs.InventoryDestinationBucketArgs
    ///                 {
    ///                     Format = "ORC",
    ///                     BucketArn = inventory.Arn,
    ///                     Prefix = "inventory",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// S3 bucket inventory configurations can be imported using `bucket:inventory`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:s3/inventory:Inventory my-bucket-entire-bucket my-bucket:EntireBucket
    /// ```
    /// </summary>
    public partial class Inventory : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the source bucket that inventory lists the objects for.
        /// </summary>
        [Output("bucket")]
        public Output<string> Bucket { get; private set; } = null!;

        /// <summary>
        /// Contains information about where to publish the inventory results (documented below).
        /// </summary>
        [Output("destination")]
        public Output<Outputs.InventoryDestination> Destination { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the inventory is enabled or disabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
        /// </summary>
        [Output("filter")]
        public Output<Outputs.InventoryFilter?> Filter { get; private set; } = null!;

        /// <summary>
        /// Object versions to include in the inventory list. Valid values: `All`, `Current`.
        /// </summary>
        [Output("includedObjectVersions")]
        public Output<string> IncludedObjectVersions { get; private set; } = null!;

        /// <summary>
        /// Unique identifier of the inventory configuration for the bucket.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of optional fields that are included in the inventory results.
        /// Valid values: `Size`, `LastModifiedDate`, `StorageClass`, `ETag`, `IsMultipartUploaded`, `ReplicationStatus`, `EncryptionStatus`, `ObjectLockRetainUntilDate`, `ObjectLockMode`, `ObjectLockLegalHoldStatus`, `IntelligentTieringAccessTier`.
        /// </summary>
        [Output("optionalFields")]
        public Output<ImmutableArray<string>> OptionalFields { get; private set; } = null!;

        /// <summary>
        /// Specifies the schedule for generating inventory results (documented below).
        /// </summary>
        [Output("schedule")]
        public Output<Outputs.InventorySchedule> Schedule { get; private set; } = null!;


        /// <summary>
        /// Create a Inventory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Inventory(string name, InventoryArgs args, CustomResourceOptions? options = null)
            : base("aws:s3/inventory:Inventory", name, args ?? new InventoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Inventory(string name, Input<string> id, InventoryState? state = null, CustomResourceOptions? options = null)
            : base("aws:s3/inventory:Inventory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Inventory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Inventory Get(string name, Input<string> id, InventoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Inventory(name, id, state, options);
        }
    }

    public sealed class InventoryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the source bucket that inventory lists the objects for.
        /// </summary>
        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        /// <summary>
        /// Contains information about where to publish the inventory results (documented below).
        /// </summary>
        [Input("destination", required: true)]
        public Input<Inputs.InventoryDestinationArgs> Destination { get; set; } = null!;

        /// <summary>
        /// Specifies whether the inventory is enabled or disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
        /// </summary>
        [Input("filter")]
        public Input<Inputs.InventoryFilterArgs>? Filter { get; set; }

        /// <summary>
        /// Object versions to include in the inventory list. Valid values: `All`, `Current`.
        /// </summary>
        [Input("includedObjectVersions", required: true)]
        public Input<string> IncludedObjectVersions { get; set; } = null!;

        /// <summary>
        /// Unique identifier of the inventory configuration for the bucket.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("optionalFields")]
        private InputList<string>? _optionalFields;

        /// <summary>
        /// List of optional fields that are included in the inventory results.
        /// Valid values: `Size`, `LastModifiedDate`, `StorageClass`, `ETag`, `IsMultipartUploaded`, `ReplicationStatus`, `EncryptionStatus`, `ObjectLockRetainUntilDate`, `ObjectLockMode`, `ObjectLockLegalHoldStatus`, `IntelligentTieringAccessTier`.
        /// </summary>
        public InputList<string> OptionalFields
        {
            get => _optionalFields ?? (_optionalFields = new InputList<string>());
            set => _optionalFields = value;
        }

        /// <summary>
        /// Specifies the schedule for generating inventory results (documented below).
        /// </summary>
        [Input("schedule", required: true)]
        public Input<Inputs.InventoryScheduleArgs> Schedule { get; set; } = null!;

        public InventoryArgs()
        {
        }
    }

    public sealed class InventoryState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the source bucket that inventory lists the objects for.
        /// </summary>
        [Input("bucket")]
        public Input<string>? Bucket { get; set; }

        /// <summary>
        /// Contains information about where to publish the inventory results (documented below).
        /// </summary>
        [Input("destination")]
        public Input<Inputs.InventoryDestinationGetArgs>? Destination { get; set; }

        /// <summary>
        /// Specifies whether the inventory is enabled or disabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
        /// </summary>
        [Input("filter")]
        public Input<Inputs.InventoryFilterGetArgs>? Filter { get; set; }

        /// <summary>
        /// Object versions to include in the inventory list. Valid values: `All`, `Current`.
        /// </summary>
        [Input("includedObjectVersions")]
        public Input<string>? IncludedObjectVersions { get; set; }

        /// <summary>
        /// Unique identifier of the inventory configuration for the bucket.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("optionalFields")]
        private InputList<string>? _optionalFields;

        /// <summary>
        /// List of optional fields that are included in the inventory results.
        /// Valid values: `Size`, `LastModifiedDate`, `StorageClass`, `ETag`, `IsMultipartUploaded`, `ReplicationStatus`, `EncryptionStatus`, `ObjectLockRetainUntilDate`, `ObjectLockMode`, `ObjectLockLegalHoldStatus`, `IntelligentTieringAccessTier`.
        /// </summary>
        public InputList<string> OptionalFields
        {
            get => _optionalFields ?? (_optionalFields = new InputList<string>());
            set => _optionalFields = value;
        }

        /// <summary>
        /// Specifies the schedule for generating inventory results (documented below).
        /// </summary>
        [Input("schedule")]
        public Input<Inputs.InventoryScheduleGetArgs>? Schedule { get; set; }

        public InventoryState()
        {
        }
    }
}
