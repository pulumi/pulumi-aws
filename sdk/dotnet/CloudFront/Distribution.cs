// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFront
{
    /// <summary>
    /// Creates an Amazon CloudFront web distribution.
    /// 
    /// For information about CloudFront distributions, see the [Amazon CloudFront Developer Guide](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html). For specific information about creating CloudFront web distributions, see the [POST Distribution](https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html) page in the Amazon CloudFront API Reference.
    /// 
    /// &gt; **NOTE:** CloudFront distributions take about 15 minutes to reach a deployed state after creation or modification. During this time, deletes to resources will be blocked. If you need to delete a distribution that is enabled and you do not want to wait, you need to use the `retain_on_delete` flag.
    /// 
    /// ## Example Usage
    /// 
    /// ### S3 Origin
    /// 
    /// The example below creates a CloudFront distribution with an S3 origin.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var b = new Aws.S3.BucketV2("b", new()
    ///     {
    ///         Bucket = "mybucket",
    ///         Tags = 
    ///         {
    ///             { "Name", "My bucket" },
    ///         },
    ///     });
    /// 
    ///     var bAcl = new Aws.S3.BucketAclV2("b_acl", new()
    ///     {
    ///         Bucket = b.Id,
    ///         Acl = "private",
    ///     });
    /// 
    ///     var s3OriginId = "myS3Origin";
    /// 
    ///     var s3Distribution = new Aws.CloudFront.Distribution("s3_distribution", new()
    ///     {
    ///         Origins = new[]
    ///         {
    ///             new Aws.CloudFront.Inputs.DistributionOriginArgs
    ///             {
    ///                 DomainName = b.BucketRegionalDomainName,
    ///                 OriginAccessControlId = @default.Id,
    ///                 OriginId = s3OriginId,
    ///             },
    ///         },
    ///         Enabled = true,
    ///         IsIpv6Enabled = true,
    ///         Comment = "Some comment",
    ///         DefaultRootObject = "index.html",
    ///         LoggingConfig = new Aws.CloudFront.Inputs.DistributionLoggingConfigArgs
    ///         {
    ///             IncludeCookies = false,
    ///             Bucket = "mylogs.s3.amazonaws.com",
    ///             Prefix = "myprefix",
    ///         },
    ///         Aliases = new[]
    ///         {
    ///             "mysite.example.com",
    ///             "yoursite.example.com",
    ///         },
    ///         DefaultCacheBehavior = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorArgs
    ///         {
    ///             AllowedMethods = new[]
    ///             {
    ///                 "DELETE",
    ///                 "GET",
    ///                 "HEAD",
    ///                 "OPTIONS",
    ///                 "PATCH",
    ///                 "POST",
    ///                 "PUT",
    ///             },
    ///             CachedMethods = new[]
    ///             {
    ///                 "GET",
    ///                 "HEAD",
    ///             },
    ///             TargetOriginId = s3OriginId,
    ///             ForwardedValues = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorForwardedValuesArgs
    ///             {
    ///                 QueryString = false,
    ///                 Cookies = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorForwardedValuesCookiesArgs
    ///                 {
    ///                     Forward = "none",
    ///                 },
    ///             },
    ///             ViewerProtocolPolicy = "allow-all",
    ///             MinTtl = 0,
    ///             DefaultTtl = 3600,
    ///             MaxTtl = 86400,
    ///         },
    ///         OrderedCacheBehaviors = new[]
    ///         {
    ///             new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorArgs
    ///             {
    ///                 PathPattern = "/content/immutable/*",
    ///                 AllowedMethods = new[]
    ///                 {
    ///                     "GET",
    ///                     "HEAD",
    ///                     "OPTIONS",
    ///                 },
    ///                 CachedMethods = new[]
    ///                 {
    ///                     "GET",
    ///                     "HEAD",
    ///                     "OPTIONS",
    ///                 },
    ///                 TargetOriginId = s3OriginId,
    ///                 ForwardedValues = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesArgs
    ///                 {
    ///                     QueryString = false,
    ///                     Headers = new[]
    ///                     {
    ///                         "Origin",
    ///                     },
    ///                     Cookies = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs
    ///                     {
    ///                         Forward = "none",
    ///                     },
    ///                 },
    ///                 MinTtl = 0,
    ///                 DefaultTtl = 86400,
    ///                 MaxTtl = 31536000,
    ///                 Compress = true,
    ///                 ViewerProtocolPolicy = "redirect-to-https",
    ///             },
    ///             new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorArgs
    ///             {
    ///                 PathPattern = "/content/*",
    ///                 AllowedMethods = new[]
    ///                 {
    ///                     "GET",
    ///                     "HEAD",
    ///                     "OPTIONS",
    ///                 },
    ///                 CachedMethods = new[]
    ///                 {
    ///                     "GET",
    ///                     "HEAD",
    ///                 },
    ///                 TargetOriginId = s3OriginId,
    ///                 ForwardedValues = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesArgs
    ///                 {
    ///                     QueryString = false,
    ///                     Cookies = new Aws.CloudFront.Inputs.DistributionOrderedCacheBehaviorForwardedValuesCookiesArgs
    ///                     {
    ///                         Forward = "none",
    ///                     },
    ///                 },
    ///                 MinTtl = 0,
    ///                 DefaultTtl = 3600,
    ///                 MaxTtl = 86400,
    ///                 Compress = true,
    ///                 ViewerProtocolPolicy = "redirect-to-https",
    ///             },
    ///         },
    ///         PriceClass = "PriceClass_200",
    ///         Restrictions = new Aws.CloudFront.Inputs.DistributionRestrictionsArgs
    ///         {
    ///             GeoRestriction = new Aws.CloudFront.Inputs.DistributionRestrictionsGeoRestrictionArgs
    ///             {
    ///                 RestrictionType = "whitelist",
    ///                 Locations = new[]
    ///                 {
    ///                     "US",
    ///                     "CA",
    ///                     "GB",
    ///                     "DE",
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Environment", "production" },
    ///         },
    ///         ViewerCertificate = new Aws.CloudFront.Inputs.DistributionViewerCertificateArgs
    ///         {
    ///             CloudfrontDefaultCertificate = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With Failover Routing
    /// 
    /// The example below creates a CloudFront distribution with an origin group for failover routing.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var s3Distribution = new Aws.CloudFront.Distribution("s3_distribution", new()
    ///     {
    ///         OriginGroups = new[]
    ///         {
    ///             new Aws.CloudFront.Inputs.DistributionOriginGroupArgs
    ///             {
    ///                 OriginId = "groupS3",
    ///                 FailoverCriteria = new Aws.CloudFront.Inputs.DistributionOriginGroupFailoverCriteriaArgs
    ///                 {
    ///                     StatusCodes = new[]
    ///                     {
    ///                         403,
    ///                         404,
    ///                         500,
    ///                         502,
    ///                     },
    ///                 },
    ///                 Members = new[]
    ///                 {
    ///                     new Aws.CloudFront.Inputs.DistributionOriginGroupMemberArgs
    ///                     {
    ///                         OriginId = "primaryS3",
    ///                     },
    ///                     new Aws.CloudFront.Inputs.DistributionOriginGroupMemberArgs
    ///                     {
    ///                         OriginId = "failoverS3",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Origins = new[]
    ///         {
    ///             new Aws.CloudFront.Inputs.DistributionOriginArgs
    ///             {
    ///                 DomainName = primary.BucketRegionalDomainName,
    ///                 OriginId = "primaryS3",
    ///                 S3OriginConfig = new Aws.CloudFront.Inputs.DistributionOriginS3OriginConfigArgs
    ///                 {
    ///                     OriginAccessIdentity = @default.CloudfrontAccessIdentityPath,
    ///                 },
    ///             },
    ///             new Aws.CloudFront.Inputs.DistributionOriginArgs
    ///             {
    ///                 DomainName = failover.BucketRegionalDomainName,
    ///                 OriginId = "failoverS3",
    ///                 S3OriginConfig = new Aws.CloudFront.Inputs.DistributionOriginS3OriginConfigArgs
    ///                 {
    ///                     OriginAccessIdentity = @default.CloudfrontAccessIdentityPath,
    ///                 },
    ///             },
    ///         },
    ///         DefaultCacheBehavior = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorArgs
    ///         {
    ///             TargetOriginId = "groupS3",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With Managed Caching Policy
    /// 
    /// The example below creates a CloudFront distribution with an [AWS managed caching policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var s3OriginId = "myS3Origin";
    /// 
    ///     var s3Distribution = new Aws.CloudFront.Distribution("s3_distribution", new()
    ///     {
    ///         Origins = new[]
    ///         {
    ///             new Aws.CloudFront.Inputs.DistributionOriginArgs
    ///             {
    ///                 DomainName = primary.BucketRegionalDomainName,
    ///                 OriginId = "myS3Origin",
    ///                 S3OriginConfig = new Aws.CloudFront.Inputs.DistributionOriginS3OriginConfigArgs
    ///                 {
    ///                     OriginAccessIdentity = @default.CloudfrontAccessIdentityPath,
    ///                 },
    ///             },
    ///         },
    ///         Enabled = true,
    ///         IsIpv6Enabled = true,
    ///         Comment = "Some comment",
    ///         DefaultRootObject = "index.html",
    ///         DefaultCacheBehavior = new Aws.CloudFront.Inputs.DistributionDefaultCacheBehaviorArgs
    ///         {
    ///             CachePolicyId = "4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
    ///             AllowedMethods = new[]
    ///             {
    ///                 "GET",
    ///                 "HEAD",
    ///                 "OPTIONS",
    ///             },
    ///             TargetOriginId = s3OriginId,
    ///         },
    ///         Restrictions = new Aws.CloudFront.Inputs.DistributionRestrictionsArgs
    ///         {
    ///             GeoRestriction = new Aws.CloudFront.Inputs.DistributionRestrictionsGeoRestrictionArgs
    ///             {
    ///                 RestrictionType = "whitelist",
    ///                 Locations = new[]
    ///                 {
    ///                     "US",
    ///                     "CA",
    ///                     "GB",
    ///                     "DE",
    ///                 },
    ///             },
    ///         },
    ///         ViewerCertificate = new Aws.CloudFront.Inputs.DistributionViewerCertificateArgs
    ///         {
    ///             CloudfrontDefaultCertificate = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudFront Distributions using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:cloudfront/distribution:Distribution distribution E74FTE3EXAMPLE
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudfront/distribution:Distribution")]
    public partial class Distribution : global::Pulumi.CustomResource
    {
        [Output("aliases")]
        public Output<ImmutableArray<string>> Aliases { get; private set; } = null!;

        /// <summary>
        /// ARN for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Internal value used by CloudFront to allow future updates to the distribution configuration.
        /// </summary>
        [Output("callerReference")]
        public Output<string> CallerReference { get; private set; } = null!;

        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        [Output("continuousDeploymentPolicyId")]
        public Output<string> ContinuousDeploymentPolicyId { get; private set; } = null!;

        [Output("customErrorResponses")]
        public Output<ImmutableArray<Outputs.DistributionCustomErrorResponse>> CustomErrorResponses { get; private set; } = null!;

        [Output("defaultCacheBehavior")]
        public Output<Outputs.DistributionDefaultCacheBehavior> DefaultCacheBehavior { get; private set; } = null!;

        [Output("defaultRootObject")]
        public Output<string?> DefaultRootObject { get; private set; } = null!;

        /// <summary>
        /// Domain name corresponding to the distribution. For example: `d604721fxaaqy9.cloudfront.net`.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// `true` if any of the AWS accounts listed as trusted signers have active CloudFront key pairs
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Current version of the distribution's information. For example: `E2QWRUHAPOMQZL`.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// CloudFront Route 53 zone ID that can be used to route an [Alias Resource Record Set](http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html) to. This attribute is simply an alias for the zone ID `Z2FDTNDATAQYW2`.
        /// </summary>
        [Output("hostedZoneId")]
        public Output<string> HostedZoneId { get; private set; } = null!;

        [Output("httpVersion")]
        public Output<string?> HttpVersion { get; private set; } = null!;

        /// <summary>
        /// Number of invalidation batches currently in progress.
        /// </summary>
        [Output("inProgressValidationBatches")]
        public Output<int> InProgressValidationBatches { get; private set; } = null!;

        [Output("isIpv6Enabled")]
        public Output<bool?> IsIpv6Enabled { get; private set; } = null!;

        /// <summary>
        /// Date and time the distribution was last modified.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        [Output("loggingConfig")]
        public Output<Outputs.DistributionLoggingConfig?> LoggingConfig { get; private set; } = null!;

        [Output("orderedCacheBehaviors")]
        public Output<ImmutableArray<Outputs.DistributionOrderedCacheBehavior>> OrderedCacheBehaviors { get; private set; } = null!;

        [Output("originGroups")]
        public Output<ImmutableArray<Outputs.DistributionOriginGroup>> OriginGroups { get; private set; } = null!;

        [Output("origins")]
        public Output<ImmutableArray<Outputs.DistributionOrigin>> Origins { get; private set; } = null!;

        [Output("priceClass")]
        public Output<string?> PriceClass { get; private set; } = null!;

        [Output("restrictions")]
        public Output<Outputs.DistributionRestrictions> Restrictions { get; private set; } = null!;

        [Output("retainOnDelete")]
        public Output<bool?> RetainOnDelete { get; private set; } = null!;

        [Output("staging")]
        public Output<bool?> Staging { get; private set; } = null!;

        /// <summary>
        /// Current status of the distribution. `Deployed` if the distribution's information is fully propagated throughout the Amazon CloudFront system.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
        /// </summary>
        [Output("trustedKeyGroups")]
        public Output<ImmutableArray<Outputs.DistributionTrustedKeyGroup>> TrustedKeyGroups { get; private set; } = null!;

        /// <summary>
        /// List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
        /// </summary>
        [Output("trustedSigners")]
        public Output<ImmutableArray<Outputs.DistributionTrustedSigner>> TrustedSigners { get; private set; } = null!;

        [Output("viewerCertificate")]
        public Output<Outputs.DistributionViewerCertificate> ViewerCertificate { get; private set; } = null!;

        [Output("waitForDeployment")]
        public Output<bool?> WaitForDeployment { get; private set; } = null!;

        [Output("webAclId")]
        public Output<string?> WebAclId { get; private set; } = null!;


        /// <summary>
        /// Create a Distribution resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Distribution(string name, DistributionArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudfront/distribution:Distribution", name, args ?? new DistributionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Distribution(string name, Input<string> id, DistributionState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudfront/distribution:Distribution", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Distribution resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Distribution Get(string name, Input<string> id, DistributionState? state = null, CustomResourceOptions? options = null)
        {
            return new Distribution(name, id, state, options);
        }
    }

    public sealed class DistributionArgs : global::Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("continuousDeploymentPolicyId")]
        public Input<string>? ContinuousDeploymentPolicyId { get; set; }

        [Input("customErrorResponses")]
        private InputList<Inputs.DistributionCustomErrorResponseArgs>? _customErrorResponses;
        public InputList<Inputs.DistributionCustomErrorResponseArgs> CustomErrorResponses
        {
            get => _customErrorResponses ?? (_customErrorResponses = new InputList<Inputs.DistributionCustomErrorResponseArgs>());
            set => _customErrorResponses = value;
        }

        [Input("defaultCacheBehavior", required: true)]
        public Input<Inputs.DistributionDefaultCacheBehaviorArgs> DefaultCacheBehavior { get; set; } = null!;

        [Input("defaultRootObject")]
        public Input<string>? DefaultRootObject { get; set; }

        /// <summary>
        /// `true` if any of the AWS accounts listed as trusted signers have active CloudFront key pairs
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        [Input("isIpv6Enabled")]
        public Input<bool>? IsIpv6Enabled { get; set; }

        [Input("loggingConfig")]
        public Input<Inputs.DistributionLoggingConfigArgs>? LoggingConfig { get; set; }

        [Input("orderedCacheBehaviors")]
        private InputList<Inputs.DistributionOrderedCacheBehaviorArgs>? _orderedCacheBehaviors;
        public InputList<Inputs.DistributionOrderedCacheBehaviorArgs> OrderedCacheBehaviors
        {
            get => _orderedCacheBehaviors ?? (_orderedCacheBehaviors = new InputList<Inputs.DistributionOrderedCacheBehaviorArgs>());
            set => _orderedCacheBehaviors = value;
        }

        [Input("originGroups")]
        private InputList<Inputs.DistributionOriginGroupArgs>? _originGroups;
        public InputList<Inputs.DistributionOriginGroupArgs> OriginGroups
        {
            get => _originGroups ?? (_originGroups = new InputList<Inputs.DistributionOriginGroupArgs>());
            set => _originGroups = value;
        }

        [Input("origins", required: true)]
        private InputList<Inputs.DistributionOriginArgs>? _origins;
        public InputList<Inputs.DistributionOriginArgs> Origins
        {
            get => _origins ?? (_origins = new InputList<Inputs.DistributionOriginArgs>());
            set => _origins = value;
        }

        [Input("priceClass")]
        public Input<string>? PriceClass { get; set; }

        [Input("restrictions", required: true)]
        public Input<Inputs.DistributionRestrictionsArgs> Restrictions { get; set; } = null!;

        [Input("retainOnDelete")]
        public Input<bool>? RetainOnDelete { get; set; }

        [Input("staging")]
        public Input<bool>? Staging { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("viewerCertificate", required: true)]
        public Input<Inputs.DistributionViewerCertificateArgs> ViewerCertificate { get; set; } = null!;

        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        [Input("webAclId")]
        public Input<string>? WebAclId { get; set; }

        public DistributionArgs()
        {
        }
        public static new DistributionArgs Empty => new DistributionArgs();
    }

    public sealed class DistributionState : global::Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<string>? _aliases;
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        /// <summary>
        /// ARN for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Internal value used by CloudFront to allow future updates to the distribution configuration.
        /// </summary>
        [Input("callerReference")]
        public Input<string>? CallerReference { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("continuousDeploymentPolicyId")]
        public Input<string>? ContinuousDeploymentPolicyId { get; set; }

        [Input("customErrorResponses")]
        private InputList<Inputs.DistributionCustomErrorResponseGetArgs>? _customErrorResponses;
        public InputList<Inputs.DistributionCustomErrorResponseGetArgs> CustomErrorResponses
        {
            get => _customErrorResponses ?? (_customErrorResponses = new InputList<Inputs.DistributionCustomErrorResponseGetArgs>());
            set => _customErrorResponses = value;
        }

        [Input("defaultCacheBehavior")]
        public Input<Inputs.DistributionDefaultCacheBehaviorGetArgs>? DefaultCacheBehavior { get; set; }

        [Input("defaultRootObject")]
        public Input<string>? DefaultRootObject { get; set; }

        /// <summary>
        /// Domain name corresponding to the distribution. For example: `d604721fxaaqy9.cloudfront.net`.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// `true` if any of the AWS accounts listed as trusted signers have active CloudFront key pairs
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Current version of the distribution's information. For example: `E2QWRUHAPOMQZL`.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// CloudFront Route 53 zone ID that can be used to route an [Alias Resource Record Set](http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html) to. This attribute is simply an alias for the zone ID `Z2FDTNDATAQYW2`.
        /// </summary>
        [Input("hostedZoneId")]
        public Input<string>? HostedZoneId { get; set; }

        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        /// <summary>
        /// Number of invalidation batches currently in progress.
        /// </summary>
        [Input("inProgressValidationBatches")]
        public Input<int>? InProgressValidationBatches { get; set; }

        [Input("isIpv6Enabled")]
        public Input<bool>? IsIpv6Enabled { get; set; }

        /// <summary>
        /// Date and time the distribution was last modified.
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<string>? LastModifiedTime { get; set; }

        [Input("loggingConfig")]
        public Input<Inputs.DistributionLoggingConfigGetArgs>? LoggingConfig { get; set; }

        [Input("orderedCacheBehaviors")]
        private InputList<Inputs.DistributionOrderedCacheBehaviorGetArgs>? _orderedCacheBehaviors;
        public InputList<Inputs.DistributionOrderedCacheBehaviorGetArgs> OrderedCacheBehaviors
        {
            get => _orderedCacheBehaviors ?? (_orderedCacheBehaviors = new InputList<Inputs.DistributionOrderedCacheBehaviorGetArgs>());
            set => _orderedCacheBehaviors = value;
        }

        [Input("originGroups")]
        private InputList<Inputs.DistributionOriginGroupGetArgs>? _originGroups;
        public InputList<Inputs.DistributionOriginGroupGetArgs> OriginGroups
        {
            get => _originGroups ?? (_originGroups = new InputList<Inputs.DistributionOriginGroupGetArgs>());
            set => _originGroups = value;
        }

        [Input("origins")]
        private InputList<Inputs.DistributionOriginGetArgs>? _origins;
        public InputList<Inputs.DistributionOriginGetArgs> Origins
        {
            get => _origins ?? (_origins = new InputList<Inputs.DistributionOriginGetArgs>());
            set => _origins = value;
        }

        [Input("priceClass")]
        public Input<string>? PriceClass { get; set; }

        [Input("restrictions")]
        public Input<Inputs.DistributionRestrictionsGetArgs>? Restrictions { get; set; }

        [Input("retainOnDelete")]
        public Input<bool>? RetainOnDelete { get; set; }

        [Input("staging")]
        public Input<bool>? Staging { get; set; }

        /// <summary>
        /// Current status of the distribution. `Deployed` if the distribution's information is fully propagated throughout the Amazon CloudFront system.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("trustedKeyGroups")]
        private InputList<Inputs.DistributionTrustedKeyGroupGetArgs>? _trustedKeyGroups;

        /// <summary>
        /// List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
        /// </summary>
        public InputList<Inputs.DistributionTrustedKeyGroupGetArgs> TrustedKeyGroups
        {
            get => _trustedKeyGroups ?? (_trustedKeyGroups = new InputList<Inputs.DistributionTrustedKeyGroupGetArgs>());
            set => _trustedKeyGroups = value;
        }

        [Input("trustedSigners")]
        private InputList<Inputs.DistributionTrustedSignerGetArgs>? _trustedSigners;

        /// <summary>
        /// List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
        /// </summary>
        public InputList<Inputs.DistributionTrustedSignerGetArgs> TrustedSigners
        {
            get => _trustedSigners ?? (_trustedSigners = new InputList<Inputs.DistributionTrustedSignerGetArgs>());
            set => _trustedSigners = value;
        }

        [Input("viewerCertificate")]
        public Input<Inputs.DistributionViewerCertificateGetArgs>? ViewerCertificate { get; set; }

        [Input("waitForDeployment")]
        public Input<bool>? WaitForDeployment { get; set; }

        [Input("webAclId")]
        public Input<string>? WebAclId { get; set; }

        public DistributionState()
        {
        }
        public static new DistributionState Empty => new DistributionState();
    }
}
