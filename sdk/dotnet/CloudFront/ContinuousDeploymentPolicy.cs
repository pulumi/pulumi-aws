// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFront
{
    /// <summary>
    /// Resource for managing an AWS CloudFront Continuous Deployment Policy.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var staging = new Aws.CloudFront.Distribution("staging", new()
    ///     {
    ///         Enabled = true,
    ///         Staging = true,
    ///     });
    /// 
    ///     // ... other configuration ...
    ///     var example = new Aws.CloudFront.ContinuousDeploymentPolicy("example", new()
    ///     {
    ///         Enabled = true,
    ///         StagingDistributionDnsNames = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyStagingDistributionDnsNamesArgs
    ///         {
    ///             Items = new[]
    ///             {
    ///                 staging.DomainName,
    ///             },
    ///             Quantity = 1,
    ///         },
    ///         TrafficConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigArgs
    ///         {
    ///             Type = "SingleWeight",
    ///             SingleWeightConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs
    ///             {
    ///                 Weight = 0.01,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var production = new Aws.CloudFront.Distribution("production", new()
    ///     {
    ///         Enabled = true,
    ///         ContinuousDeploymentPolicyId = example.Id,
    ///     });
    /// 
    ///     // ... other configuration ...
    /// });
    /// ```
    /// ### Single Weight Config with Session Stickiness
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudFront.ContinuousDeploymentPolicy("example", new()
    ///     {
    ///         Enabled = true,
    ///         StagingDistributionDnsNames = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyStagingDistributionDnsNamesArgs
    ///         {
    ///             Items = new[]
    ///             {
    ///                 aws_cloudfront_distribution.Staging.Domain_name,
    ///             },
    ///             Quantity = 1,
    ///         },
    ///         TrafficConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigArgs
    ///         {
    ///             Type = "SingleWeight",
    ///             SingleWeightConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigArgs
    ///             {
    ///                 Weight = 0.01,
    ///                 SessionStickinessConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigSingleWeightConfigSessionStickinessConfigArgs
    ///                 {
    ///                     IdleTtl = 300,
    ///                     MaximumTtl = 600,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Single Header Config
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudFront.ContinuousDeploymentPolicy("example", new()
    ///     {
    ///         Enabled = true,
    ///         StagingDistributionDnsNames = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyStagingDistributionDnsNamesArgs
    ///         {
    ///             Items = new[]
    ///             {
    ///                 aws_cloudfront_distribution.Staging.Domain_name,
    ///             },
    ///             Quantity = 1,
    ///         },
    ///         TrafficConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigArgs
    ///         {
    ///             Type = "SingleHeader",
    ///             SingleHeaderConfig = new Aws.CloudFront.Inputs.ContinuousDeploymentPolicyTrafficConfigSingleHeaderConfigArgs
    ///             {
    ///                 Header = "aws-cf-cd-example",
    ///                 Value = "example",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import CloudFront Continuous Deployment Policy using the `id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy example abcd-1234
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy")]
    public partial class ContinuousDeploymentPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether this continuous deployment policy is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Current version of the continuous distribution policy.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Date and time the continuous deployment policy was last modified.
        /// </summary>
        [Output("lastModifiedTime")]
        public Output<string> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// CloudFront domain name of the staging distribution. See `staging_distribution_dns_names`.
        /// </summary>
        [Output("stagingDistributionDnsNames")]
        public Output<Outputs.ContinuousDeploymentPolicyStagingDistributionDnsNames?> StagingDistributionDnsNames { get; private set; } = null!;

        /// <summary>
        /// Parameters for routing production traffic from primary to staging distributions. See `traffic_config`.
        /// </summary>
        [Output("trafficConfig")]
        public Output<Outputs.ContinuousDeploymentPolicyTrafficConfig?> TrafficConfig { get; private set; } = null!;


        /// <summary>
        /// Create a ContinuousDeploymentPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContinuousDeploymentPolicy(string name, ContinuousDeploymentPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy", name, args ?? new ContinuousDeploymentPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContinuousDeploymentPolicy(string name, Input<string> id, ContinuousDeploymentPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudfront/continuousDeploymentPolicy:ContinuousDeploymentPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContinuousDeploymentPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContinuousDeploymentPolicy Get(string name, Input<string> id, ContinuousDeploymentPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ContinuousDeploymentPolicy(name, id, state, options);
        }
    }

    public sealed class ContinuousDeploymentPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this continuous deployment policy is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// CloudFront domain name of the staging distribution. See `staging_distribution_dns_names`.
        /// </summary>
        [Input("stagingDistributionDnsNames")]
        public Input<Inputs.ContinuousDeploymentPolicyStagingDistributionDnsNamesArgs>? StagingDistributionDnsNames { get; set; }

        /// <summary>
        /// Parameters for routing production traffic from primary to staging distributions. See `traffic_config`.
        /// </summary>
        [Input("trafficConfig")]
        public Input<Inputs.ContinuousDeploymentPolicyTrafficConfigArgs>? TrafficConfig { get; set; }

        public ContinuousDeploymentPolicyArgs()
        {
        }
        public static new ContinuousDeploymentPolicyArgs Empty => new ContinuousDeploymentPolicyArgs();
    }

    public sealed class ContinuousDeploymentPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this continuous deployment policy is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Current version of the continuous distribution policy.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Date and time the continuous deployment policy was last modified.
        /// </summary>
        [Input("lastModifiedTime")]
        public Input<string>? LastModifiedTime { get; set; }

        /// <summary>
        /// CloudFront domain name of the staging distribution. See `staging_distribution_dns_names`.
        /// </summary>
        [Input("stagingDistributionDnsNames")]
        public Input<Inputs.ContinuousDeploymentPolicyStagingDistributionDnsNamesGetArgs>? StagingDistributionDnsNames { get; set; }

        /// <summary>
        /// Parameters for routing production traffic from primary to staging distributions. See `traffic_config`.
        /// </summary>
        [Input("trafficConfig")]
        public Input<Inputs.ContinuousDeploymentPolicyTrafficConfigGetArgs>? TrafficConfig { get; set; }

        public ContinuousDeploymentPolicyState()
        {
        }
        public static new ContinuousDeploymentPolicyState Empty => new ContinuousDeploymentPolicyState();
    }
}
