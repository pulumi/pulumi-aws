// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudFront
{
    /// <summary>
    /// Provides a CloudFront real-time log configuration resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudFront.MonitoringSubscription("example", new()
    ///     {
    ///         DistributionId = aws_cloudfront_distribution.Example.Id,
    ///         MonitoringSubscriptionDetails = new Aws.CloudFront.Inputs.MonitoringSubscriptionMonitoringSubscriptionArgs
    ///         {
    ///             RealtimeMetricsSubscriptionConfig = new Aws.CloudFront.Inputs.MonitoringSubscriptionMonitoringSubscriptionRealtimeMetricsSubscriptionConfigArgs
    ///             {
    ///                 RealtimeMetricsSubscriptionStatus = "Enabled",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CloudFront monitoring subscription can be imported using the id, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:cloudfront/monitoringSubscription:MonitoringSubscription example E3QYSUHO4VYRGB
    /// ```
    /// </summary>
    [AwsResourceType("aws:cloudfront/monitoringSubscription:MonitoringSubscription")]
    public partial class MonitoringSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the distribution that you are enabling metrics for.
        /// </summary>
        [Output("distributionId")]
        public Output<string> DistributionId { get; private set; } = null!;

        /// <summary>
        /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
        /// </summary>
        [Output("monitoringSubscription")]
        public Output<Outputs.MonitoringSubscriptionMonitoringSubscription> MonitoringSubscriptionDetails { get; private set; } = null!;


        /// <summary>
        /// Create a MonitoringSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MonitoringSubscription(string name, MonitoringSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudfront/monitoringSubscription:MonitoringSubscription", name, args ?? new MonitoringSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MonitoringSubscription(string name, Input<string> id, MonitoringSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudfront/monitoringSubscription:MonitoringSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MonitoringSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MonitoringSubscription Get(string name, Input<string> id, MonitoringSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new MonitoringSubscription(name, id, state, options);
        }
    }

    public sealed class MonitoringSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the distribution that you are enabling metrics for.
        /// </summary>
        [Input("distributionId", required: true)]
        public Input<string> DistributionId { get; set; } = null!;

        /// <summary>
        /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
        /// </summary>
        [Input("monitoringSubscription", required: true)]
        public Input<Inputs.MonitoringSubscriptionMonitoringSubscriptionArgs> MonitoringSubscriptionDetails { get; set; } = null!;

        public MonitoringSubscriptionArgs()
        {
        }
        public static new MonitoringSubscriptionArgs Empty => new MonitoringSubscriptionArgs();
    }

    public sealed class MonitoringSubscriptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the distribution that you are enabling metrics for.
        /// </summary>
        [Input("distributionId")]
        public Input<string>? DistributionId { get; set; }

        /// <summary>
        /// A monitoring subscription. This structure contains information about whether additional CloudWatch metrics are enabled for a given CloudFront distribution.
        /// </summary>
        [Input("monitoringSubscription")]
        public Input<Inputs.MonitoringSubscriptionMonitoringSubscriptionGetArgs>? MonitoringSubscriptionDetails { get; set; }

        public MonitoringSubscriptionState()
        {
        }
        public static new MonitoringSubscriptionState Empty => new MonitoringSubscriptionState();
    }
}
