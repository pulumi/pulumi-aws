// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iot
{
    /// <summary>
    /// Creates and manages an AWS IoT CA Certificate.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Tls = Pulumi.Tls;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var caPrivateKey = new Tls.PrivateKey("caPrivateKey", new()
    ///     {
    ///         Algorithm = "RSA",
    ///     });
    /// 
    ///     var caSelfSignedCert = new Tls.SelfSignedCert("caSelfSignedCert", new()
    ///     {
    ///         PrivateKeyPem = caPrivateKey.PrivateKeyPem,
    ///         Subject = new Tls.Inputs.SelfSignedCertSubjectArgs
    ///         {
    ///             CommonName = "example.com",
    ///             Organization = "ACME Examples, Inc",
    ///         },
    ///         ValidityPeriodHours = 12,
    ///         AllowedUses = new[]
    ///         {
    ///             "key_encipherment",
    ///             "digital_signature",
    ///             "server_auth",
    ///         },
    ///         IsCaCertificate = true,
    ///     });
    /// 
    ///     var verificationPrivateKey = new Tls.PrivateKey("verificationPrivateKey", new()
    ///     {
    ///         Algorithm = "RSA",
    ///     });
    /// 
    ///     var exampleRegistrationCode = Aws.Iot.GetRegistrationCode.Invoke();
    /// 
    ///     var verificationCertRequest = new Tls.CertRequest("verificationCertRequest", new()
    ///     {
    ///         PrivateKeyPem = verificationPrivateKey.PrivateKeyPem,
    ///         Subject = new Tls.Inputs.CertRequestSubjectArgs
    ///         {
    ///             CommonName = exampleRegistrationCode.Apply(getRegistrationCodeResult =&gt; getRegistrationCodeResult.RegistrationCode),
    ///         },
    ///     });
    /// 
    ///     var verificationLocallySignedCert = new Tls.LocallySignedCert("verificationLocallySignedCert", new()
    ///     {
    ///         CertRequestPem = verificationCertRequest.CertRequestPem,
    ///         CaPrivateKeyPem = caPrivateKey.PrivateKeyPem,
    ///         CaCertPem = caSelfSignedCert.CertPem,
    ///         ValidityPeriodHours = 12,
    ///         AllowedUses = new[]
    ///         {
    ///             "key_encipherment",
    ///             "digital_signature",
    ///             "server_auth",
    ///         },
    ///     });
    /// 
    ///     var exampleCaCertificate = new Aws.Iot.CaCertificate("exampleCaCertificate", new()
    ///     {
    ///         Active = true,
    ///         CaCertificatePem = caSelfSignedCert.CertPem,
    ///         VerificationCertificatePem = verificationLocallySignedCert.CertPem,
    ///         AllowAutoRegistration = true,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:iot/caCertificate:CaCertificate")]
    public partial class CaCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Boolean flag to indicate if the certificate should be active for device authentication.
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// Boolean flag to indicate if the certificate should be active for device regisration.
        /// </summary>
        [Output("allowAutoRegistration")]
        public Output<bool> AllowAutoRegistration { get; private set; } = null!;

        /// <summary>
        /// The ARN of the created CA certificate.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// PEM encoded CA certificate.
        /// </summary>
        [Output("caCertificatePem")]
        public Output<string> CaCertificatePem { get; private set; } = null!;

        /// <summary>
        /// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
        /// </summary>
        [Output("certificateMode")]
        public Output<string?> CertificateMode { get; private set; } = null!;

        /// <summary>
        /// The customer version of the CA certificate.
        /// </summary>
        [Output("customerVersion")]
        public Output<int> CustomerVersion { get; private set; } = null!;

        /// <summary>
        /// The generation ID of the CA certificate.
        /// </summary>
        [Output("generationId")]
        public Output<string> GenerationId { get; private set; } = null!;

        /// <summary>
        /// Information about the registration configuration. See below.
        /// </summary>
        [Output("registrationConfig")]
        public Output<Outputs.CaCertificateRegistrationConfig?> RegistrationConfig { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// When the CA certificate is valid.
        /// </summary>
        [Output("validities")]
        public Output<ImmutableArray<Outputs.CaCertificateValidity>> Validities { get; private set; } = null!;

        /// <summary>
        /// PEM encoded verification certificate containing the common name of a registration code. Review
        /// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
        /// </summary>
        [Output("verificationCertificatePem")]
        public Output<string?> VerificationCertificatePem { get; private set; } = null!;


        /// <summary>
        /// Create a CaCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CaCertificate(string name, CaCertificateArgs args, CustomResourceOptions? options = null)
            : base("aws:iot/caCertificate:CaCertificate", name, args ?? new CaCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CaCertificate(string name, Input<string> id, CaCertificateState? state = null, CustomResourceOptions? options = null)
            : base("aws:iot/caCertificate:CaCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "caCertificatePem",
                    "tagsAll",
                    "verificationCertificatePem",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CaCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CaCertificate Get(string name, Input<string> id, CaCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new CaCertificate(name, id, state, options);
        }
    }

    public sealed class CaCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean flag to indicate if the certificate should be active for device authentication.
        /// </summary>
        [Input("active", required: true)]
        public Input<bool> Active { get; set; } = null!;

        /// <summary>
        /// Boolean flag to indicate if the certificate should be active for device regisration.
        /// </summary>
        [Input("allowAutoRegistration", required: true)]
        public Input<bool> AllowAutoRegistration { get; set; } = null!;

        [Input("caCertificatePem", required: true)]
        private Input<string>? _caCertificatePem;

        /// <summary>
        /// PEM encoded CA certificate.
        /// </summary>
        public Input<string>? CaCertificatePem
        {
            get => _caCertificatePem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCertificatePem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
        /// </summary>
        [Input("certificateMode")]
        public Input<string>? CertificateMode { get; set; }

        /// <summary>
        /// Information about the registration configuration. See below.
        /// </summary>
        [Input("registrationConfig")]
        public Input<Inputs.CaCertificateRegistrationConfigArgs>? RegistrationConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("verificationCertificatePem")]
        private Input<string>? _verificationCertificatePem;

        /// <summary>
        /// PEM encoded verification certificate containing the common name of a registration code. Review
        /// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
        /// </summary>
        public Input<string>? VerificationCertificatePem
        {
            get => _verificationCertificatePem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _verificationCertificatePem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public CaCertificateArgs()
        {
        }
        public static new CaCertificateArgs Empty => new CaCertificateArgs();
    }

    public sealed class CaCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean flag to indicate if the certificate should be active for device authentication.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Boolean flag to indicate if the certificate should be active for device regisration.
        /// </summary>
        [Input("allowAutoRegistration")]
        public Input<bool>? AllowAutoRegistration { get; set; }

        /// <summary>
        /// The ARN of the created CA certificate.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("caCertificatePem")]
        private Input<string>? _caCertificatePem;

        /// <summary>
        /// PEM encoded CA certificate.
        /// </summary>
        public Input<string>? CaCertificatePem
        {
            get => _caCertificatePem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCertificatePem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
        /// </summary>
        [Input("certificateMode")]
        public Input<string>? CertificateMode { get; set; }

        /// <summary>
        /// The customer version of the CA certificate.
        /// </summary>
        [Input("customerVersion")]
        public Input<int>? CustomerVersion { get; set; }

        /// <summary>
        /// The generation ID of the CA certificate.
        /// </summary>
        [Input("generationId")]
        public Input<string>? GenerationId { get; set; }

        /// <summary>
        /// Information about the registration configuration. See below.
        /// </summary>
        [Input("registrationConfig")]
        public Input<Inputs.CaCertificateRegistrationConfigGetArgs>? RegistrationConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        [Input("validities")]
        private InputList<Inputs.CaCertificateValidityGetArgs>? _validities;

        /// <summary>
        /// When the CA certificate is valid.
        /// </summary>
        public InputList<Inputs.CaCertificateValidityGetArgs> Validities
        {
            get => _validities ?? (_validities = new InputList<Inputs.CaCertificateValidityGetArgs>());
            set => _validities = value;
        }

        [Input("verificationCertificatePem")]
        private Input<string>? _verificationCertificatePem;

        /// <summary>
        /// PEM encoded verification certificate containing the common name of a registration code. Review
        /// [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.
        /// </summary>
        public Input<string>? VerificationCertificatePem
        {
            get => _verificationCertificatePem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _verificationCertificatePem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public CaCertificateState()
        {
        }
        public static new CaCertificateState Empty => new CaCertificateState();
    }
}
