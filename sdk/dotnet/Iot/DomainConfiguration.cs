// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iot
{
    /// <summary>
    /// Creates and manages an AWS IoT domain configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var iot = new Aws.Iot.DomainConfiguration("iot", new()
    ///     {
    ///         DomainName = "iot.example.com",
    ///         ServiceType = "DATA",
    ///         ServerCertificateArns = new[]
    ///         {
    ///             aws_acm_certificate.Cert.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import domain configurations using the name. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:iot/domainConfiguration:DomainConfiguration example example
    /// ```
    /// </summary>
    [AwsResourceType("aws:iot/domainConfiguration:DomainConfiguration")]
    public partial class DomainConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the domain configuration.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// An object that specifies the authorization service for a domain. See below.
        /// </summary>
        [Output("authorizerConfig")]
        public Output<Outputs.DomainConfigurationAuthorizerConfig?> AuthorizerConfig { get; private set; } = null!;

        /// <summary>
        /// Fully-qualified domain name.
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// The type of the domain.
        /// </summary>
        [Output("domainType")]
        public Output<string> DomainType { get; private set; } = null!;

        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
        /// </summary>
        [Output("serverCertificateArns")]
        public Output<ImmutableArray<string>> ServerCertificateArns { get; private set; } = null!;

        /// <summary>
        /// The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
        /// </summary>
        [Output("serviceType")]
        public Output<string?> ServiceType { get; private set; } = null!;

        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// An object that specifies the TLS configuration for a domain. See below.
        /// </summary>
        [Output("tlsConfig")]
        public Output<Outputs.DomainConfigurationTlsConfig> TlsConfig { get; private set; } = null!;

        /// <summary>
        /// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
        /// </summary>
        [Output("validationCertificateArn")]
        public Output<string?> ValidationCertificateArn { get; private set; } = null!;


        /// <summary>
        /// Create a DomainConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainConfiguration(string name, DomainConfigurationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:iot/domainConfiguration:DomainConfiguration", name, args ?? new DomainConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainConfiguration(string name, Input<string> id, DomainConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:iot/domainConfiguration:DomainConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainConfiguration Get(string name, Input<string> id, DomainConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainConfiguration(name, id, state, options);
        }
    }

    public sealed class DomainConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An object that specifies the authorization service for a domain. See below.
        /// </summary>
        [Input("authorizerConfig")]
        public Input<Inputs.DomainConfigurationAuthorizerConfigArgs>? AuthorizerConfig { get; set; }

        /// <summary>
        /// Fully-qualified domain name.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serverCertificateArns")]
        private InputList<string>? _serverCertificateArns;

        /// <summary>
        /// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
        /// </summary>
        public InputList<string> ServerCertificateArns
        {
            get => _serverCertificateArns ?? (_serverCertificateArns = new InputList<string>());
            set => _serverCertificateArns = value;
        }

        /// <summary>
        /// The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// An object that specifies the TLS configuration for a domain. See below.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.DomainConfigurationTlsConfigArgs>? TlsConfig { get; set; }

        /// <summary>
        /// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
        /// </summary>
        [Input("validationCertificateArn")]
        public Input<string>? ValidationCertificateArn { get; set; }

        public DomainConfigurationArgs()
        {
        }
        public static new DomainConfigurationArgs Empty => new DomainConfigurationArgs();
    }

    public sealed class DomainConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the domain configuration.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// An object that specifies the authorization service for a domain. See below.
        /// </summary>
        [Input("authorizerConfig")]
        public Input<Inputs.DomainConfigurationAuthorizerConfigGetArgs>? AuthorizerConfig { get; set; }

        /// <summary>
        /// Fully-qualified domain name.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// The type of the domain.
        /// </summary>
        [Input("domainType")]
        public Input<string>? DomainType { get; set; }

        /// <summary>
        /// The name of the domain configuration. This value must be unique to a region.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("serverCertificateArns")]
        private InputList<string>? _serverCertificateArns;

        /// <summary>
        /// The ARNs of the certificates that IoT passes to the device during the TLS handshake. Currently you can specify only one certificate ARN. This value is not required for Amazon Web Services-managed domains. When using a custom `domain_name`, the cert must include it.
        /// </summary>
        public InputList<string> ServerCertificateArns
        {
            get => _serverCertificateArns ?? (_serverCertificateArns = new InputList<string>());
            set => _serverCertificateArns = value;
        }

        /// <summary>
        /// The type of service delivered by the endpoint. Note: Amazon Web Services IoT Core currently supports only the `DATA` service type.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to this resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// An object that specifies the TLS configuration for a domain. See below.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.DomainConfigurationTlsConfigGetArgs>? TlsConfig { get; set; }

        /// <summary>
        /// The certificate used to validate the server certificate and prove domain name ownership. This certificate must be signed by a public certificate authority. This value is not required for Amazon Web Services-managed domains.
        /// </summary>
        [Input("validationCertificateArn")]
        public Input<string>? ValidationCertificateArn { get; set; }

        public DomainConfigurationState()
        {
        }
        public static new DomainConfigurationState Empty => new DomainConfigurationState();
    }
}
