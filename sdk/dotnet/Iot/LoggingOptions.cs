// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Iot
{
    /// <summary>
    /// Provides a resource to manage [default logging options](https://docs.aws.amazon.com/iot/latest/developerguide/configure-logging.html#configure-logging-console).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Iot.LoggingOptions("example", new()
    ///     {
    ///         DefaultLogLevel = "WARN",
    ///         RoleArn = aws_iam_role.Example.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:iot/loggingOptions:LoggingOptions")]
    public partial class LoggingOptions : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
        /// </summary>
        [Output("defaultLogLevel")]
        public Output<string> DefaultLogLevel { get; private set; } = null!;

        /// <summary>
        /// If `true` all logs are disabled. The default is `false`.
        /// </summary>
        [Output("disableAllLogs")]
        public Output<bool?> DisableAllLogs { get; private set; } = null!;

        /// <summary>
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;


        /// <summary>
        /// Create a LoggingOptions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoggingOptions(string name, LoggingOptionsArgs args, CustomResourceOptions? options = null)
            : base("aws:iot/loggingOptions:LoggingOptions", name, args ?? new LoggingOptionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoggingOptions(string name, Input<string> id, LoggingOptionsState? state = null, CustomResourceOptions? options = null)
            : base("aws:iot/loggingOptions:LoggingOptions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoggingOptions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoggingOptions Get(string name, Input<string> id, LoggingOptionsState? state = null, CustomResourceOptions? options = null)
        {
            return new LoggingOptions(name, id, state, options);
        }
    }

    public sealed class LoggingOptionsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
        /// </summary>
        [Input("defaultLogLevel", required: true)]
        public Input<string> DefaultLogLevel { get; set; } = null!;

        /// <summary>
        /// If `true` all logs are disabled. The default is `false`.
        /// </summary>
        [Input("disableAllLogs")]
        public Input<bool>? DisableAllLogs { get; set; }

        /// <summary>
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        public LoggingOptionsArgs()
        {
        }
        public static new LoggingOptionsArgs Empty => new LoggingOptionsArgs();
    }

    public sealed class LoggingOptionsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default logging level. Valid Values: `"DEBUG"`, `"INFO"`, `"ERROR"`, `"WARN"`, `"DISABLED"`.
        /// </summary>
        [Input("defaultLogLevel")]
        public Input<string>? DefaultLogLevel { get; set; }

        /// <summary>
        /// If `true` all logs are disabled. The default is `false`.
        /// </summary>
        [Input("disableAllLogs")]
        public Input<bool>? DisableAllLogs { get; set; }

        /// <summary>
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        public LoggingOptionsState()
        {
        }
        public static new LoggingOptionsState Empty => new LoggingOptionsState();
    }
}
