// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    public static class GetFunctionUrl
    {
        /// <summary>
        /// Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = "my_lambda_function",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["functionUrl"] = example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.FunctionUrl),
        ///     };
        /// });
        /// ```
        /// 
        /// ### With Qualifier
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = exampleAwsLambdaFunction.FunctionName,
        ///         Qualifier = "production",
        ///     });
        /// 
        ///     // Use the URL in other resources
        ///     var lambdaAlias = new Aws.Route53.Record("lambda_alias", new()
        ///     {
        ///         ZoneId = exampleAwsRoute53Zone.ZoneId,
        ///         Name = "api.example.com",
        ///         Type = Aws.Route53.RecordType.CNAME,
        ///         Ttl = 300,
        ///         Records = new[]
        ///         {
        ///             Std.Replace.Invoke(new()
        ///             {
        ///                 Text = example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.FunctionUrl),
        ///                 Search = "https://",
        ///                 Replace = "",
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Retrieve CORS Configuration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = "api_function",
        ///     });
        /// 
        ///     var corsConfig = Output.Tuple(example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.Cors).Length, example).Apply(values =&gt;
        ///     {
        ///         var length = values.Item1;
        ///         var example = values.Item2;
        ///         return length &gt; 0 ? example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.Cors[0]) : null;
        ///     });
        /// 
        ///     var allowedOrigins = corsConfig != null ? corsConfig?.AllowOrigins : new[] {};
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["corsAllowedOrigins"] = allowedOrigins,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFunctionUrlResult> InvokeAsync(GetFunctionUrlArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFunctionUrlResult>("aws:lambda/getFunctionUrl:getFunctionUrl", args ?? new GetFunctionUrlArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = "my_lambda_function",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["functionUrl"] = example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.FunctionUrl),
        ///     };
        /// });
        /// ```
        /// 
        /// ### With Qualifier
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = exampleAwsLambdaFunction.FunctionName,
        ///         Qualifier = "production",
        ///     });
        /// 
        ///     // Use the URL in other resources
        ///     var lambdaAlias = new Aws.Route53.Record("lambda_alias", new()
        ///     {
        ///         ZoneId = exampleAwsRoute53Zone.ZoneId,
        ///         Name = "api.example.com",
        ///         Type = Aws.Route53.RecordType.CNAME,
        ///         Ttl = 300,
        ///         Records = new[]
        ///         {
        ///             Std.Replace.Invoke(new()
        ///             {
        ///                 Text = example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.FunctionUrl),
        ///                 Search = "https://",
        ///                 Replace = "",
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Retrieve CORS Configuration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = "api_function",
        ///     });
        /// 
        ///     var corsConfig = Output.Tuple(example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.Cors).Length, example).Apply(values =&gt;
        ///     {
        ///         var length = values.Item1;
        ///         var example = values.Item2;
        ///         return length &gt; 0 ? example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.Cors[0]) : null;
        ///     });
        /// 
        ///     var allowedOrigins = corsConfig != null ? corsConfig?.AllowOrigins : new[] {};
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["corsAllowedOrigins"] = allowedOrigins,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFunctionUrlResult> Invoke(GetFunctionUrlInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionUrlResult>("aws:lambda/getFunctionUrl:getFunctionUrl", args ?? new GetFunctionUrlInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = "my_lambda_function",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["functionUrl"] = example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.FunctionUrl),
        ///     };
        /// });
        /// ```
        /// 
        /// ### With Qualifier
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Std = Pulumi.Std;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = exampleAwsLambdaFunction.FunctionName,
        ///         Qualifier = "production",
        ///     });
        /// 
        ///     // Use the URL in other resources
        ///     var lambdaAlias = new Aws.Route53.Record("lambda_alias", new()
        ///     {
        ///         ZoneId = exampleAwsRoute53Zone.ZoneId,
        ///         Name = "api.example.com",
        ///         Type = Aws.Route53.RecordType.CNAME,
        ///         Ttl = 300,
        ///         Records = new[]
        ///         {
        ///             Std.Replace.Invoke(new()
        ///             {
        ///                 Text = example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.FunctionUrl),
        ///                 Search = "https://",
        ///                 Replace = "",
        ///             }).Apply(invoke =&gt; invoke.Result),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Retrieve CORS Configuration
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunctionUrl.Invoke(new()
        ///     {
        ///         FunctionName = "api_function",
        ///     });
        /// 
        ///     var corsConfig = Output.Tuple(example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.Cors).Length, example).Apply(values =&gt;
        ///     {
        ///         var length = values.Item1;
        ///         var example = values.Item2;
        ///         return length &gt; 0 ? example.Apply(getFunctionUrlResult =&gt; getFunctionUrlResult.Cors[0]) : null;
        ///     });
        /// 
        ///     var allowedOrigins = corsConfig != null ? corsConfig?.AllowOrigins : new[] {};
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["corsAllowedOrigins"] = allowedOrigins,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFunctionUrlResult> Invoke(GetFunctionUrlInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionUrlResult>("aws:lambda/getFunctionUrl:getFunctionUrl", args ?? new GetFunctionUrlInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFunctionUrlArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name or ARN of the Lambda function.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("functionName", required: true)]
        public string FunctionName { get; set; } = null!;

        /// <summary>
        /// Alias name or `$LATEST`.
        /// </summary>
        [Input("qualifier")]
        public string? Qualifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetFunctionUrlArgs()
        {
        }
        public static new GetFunctionUrlArgs Empty => new GetFunctionUrlArgs();
    }

    public sealed class GetFunctionUrlInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name or ARN of the Lambda function.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// Alias name or `$LATEST`.
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetFunctionUrlInvokeArgs()
        {
        }
        public static new GetFunctionUrlInvokeArgs Empty => new GetFunctionUrlInvokeArgs();
    }


    [OutputType]
    public sealed class GetFunctionUrlResult
    {
        /// <summary>
        /// Type of authentication that the function URL uses.
        /// </summary>
        public readonly string AuthorizationType;
        /// <summary>
        /// Cross-origin resource sharing (CORS) settings for the function URL. See below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionUrlCorResult> Cors;
        /// <summary>
        /// When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime).
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// ARN of the function.
        /// </summary>
        public readonly string FunctionArn;
        public readonly string FunctionName;
        /// <summary>
        /// HTTP URL endpoint for the function in the format `https://&lt;url_id&gt;.lambda-url.&lt;region&gt;.on.aws/`.
        /// </summary>
        public readonly string FunctionUrl;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether the Lambda function responds in `BUFFERED` or `RESPONSE_STREAM` mode.
        /// </summary>
        public readonly string InvokeMode;
        /// <summary>
        /// When the function URL configuration was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime).
        /// </summary>
        public readonly string LastModifiedTime;
        public readonly string? Qualifier;
        public readonly string Region;
        /// <summary>
        /// Generated ID for the endpoint.
        /// </summary>
        public readonly string UrlId;

        [OutputConstructor]
        private GetFunctionUrlResult(
            string authorizationType,

            ImmutableArray<Outputs.GetFunctionUrlCorResult> cors,

            string creationTime,

            string functionArn,

            string functionName,

            string functionUrl,

            string id,

            string invokeMode,

            string lastModifiedTime,

            string? qualifier,

            string region,

            string urlId)
        {
            AuthorizationType = authorizationType;
            Cors = cors;
            CreationTime = creationTime;
            FunctionArn = functionArn;
            FunctionName = functionName;
            FunctionUrl = functionUrl;
            Id = id;
            InvokeMode = invokeMode;
            LastModifiedTime = lastModifiedTime;
            Qualifier = qualifier;
            Region = region;
            UrlId = urlId;
        }
    }
}
