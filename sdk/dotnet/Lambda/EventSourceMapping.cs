// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    /// <summary>
    /// Manages an AWS Lambda Event Source Mapping. Use this resource to connect Lambda functions to event sources like Kinesis, DynamoDB, SQS, Amazon MQ, and Managed Streaming for Apache Kafka (MSK).
    /// 
    /// For information about Lambda and how to use it, see [What is AWS Lambda?](http://docs.aws.amazon.com/lambda/latest/dg/welcome.html). For information about event source mappings, see [CreateEventSourceMapping](http://docs.aws.amazon.com/lambda/latest/dg/API_CreateEventSourceMapping.html) in the API docs.
    /// 
    /// ## Example Usage
    /// 
    /// ### DynamoDB Stream
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsDynamodbTable.StreamArn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         StartingPosition = "LATEST",
    ///         Tags = 
    ///         {
    ///             { "Name", "dynamodb-stream-mapping" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Kinesis Stream
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsKinesisStream.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         StartingPosition = "LATEST",
    ///         BatchSize = 100,
    ///         MaximumBatchingWindowInSeconds = 5,
    ///         ParallelizationFactor = 2,
    ///         DestinationConfig = new Aws.Lambda.Inputs.EventSourceMappingDestinationConfigArgs
    ///         {
    ///             OnFailure = new Aws.Lambda.Inputs.EventSourceMappingDestinationConfigOnFailureArgs
    ///             {
    ///                 DestinationArn = dlq.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### SQS Queue
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsSqsQueue.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         BatchSize = 10,
    ///         ScalingConfig = new Aws.Lambda.Inputs.EventSourceMappingScalingConfigArgs
    ///         {
    ///             MaximumConcurrency = 100,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### SQS with Event Filtering
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsSqsQueue.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         FilterCriteria = new Aws.Lambda.Inputs.EventSourceMappingFilterCriteriaArgs
    ///         {
    ///             Filters = new[]
    ///             {
    ///                 new Aws.Lambda.Inputs.EventSourceMappingFilterCriteriaFilterArgs
    ///                 {
    ///                     Pattern = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["body"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["Temperature"] = new[]
    ///                             {
    ///                                 new Dictionary&lt;string, object?&gt;
    ///                                 {
    ///                                     ["numeric"] = new object?[]
    ///                                     {
    ///                                         "&gt;",
    ///                                         0,
    ///                                         "&lt;=",
    ///                                         100,
    ///                                     },
    ///                                 },
    ///                             },
    ///                             ["Location"] = new[]
    ///                             {
    ///                                 "New York",
    ///                             },
    ///                         },
    ///                     }),
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Amazon MSK
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsMskCluster.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         Topics = new[]
    ///         {
    ///             "orders",
    ///             "inventory",
    ///         },
    ///         StartingPosition = "TRIM_HORIZON",
    ///         BatchSize = 100,
    ///         AmazonManagedKafkaEventSourceConfig = new Aws.Lambda.Inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs
    ///         {
    ///             ConsumerGroupId = "lambda-consumer-group",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Self-Managed Apache Kafka
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         Topics = new[]
    ///         {
    ///             "orders",
    ///         },
    ///         StartingPosition = "TRIM_HORIZON",
    ///         SelfManagedEventSource = new Aws.Lambda.Inputs.EventSourceMappingSelfManagedEventSourceArgs
    ///         {
    ///             Endpoints = 
    ///             {
    ///                 { "KAFKA_BOOTSTRAP_SERVERS", "kafka1.example.com:9092,kafka2.example.com:9092" },
    ///             },
    ///         },
    ///         SelfManagedKafkaEventSourceConfig = new Aws.Lambda.Inputs.EventSourceMappingSelfManagedKafkaEventSourceConfigArgs
    ///         {
    ///             ConsumerGroupId = "lambda-consumer-group",
    ///         },
    ///         SourceAccessConfigurations = new[]
    ///         {
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "VPC_SUBNET",
    ///                 Uri = $"subnet:{example1.Id}",
    ///             },
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "VPC_SUBNET",
    ///                 Uri = $"subnet:{example2.Id}",
    ///             },
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "VPC_SECURITY_GROUP",
    ///                 Uri = $"security_group:{exampleAwsSecurityGroup.Id}",
    ///             },
    ///         },
    ///         ProvisionedPollerConfig = new Aws.Lambda.Inputs.EventSourceMappingProvisionedPollerConfigArgs
    ///         {
    ///             MaximumPollers = 100,
    ///             MinimumPollers = 10,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Amazon MQ (ActiveMQ)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsMqBroker.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         Queues = "orders",
    ///         BatchSize = 10,
    ///         SourceAccessConfigurations = new[]
    ///         {
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "BASIC_AUTH",
    ///                 Uri = exampleAwsSecretsmanagerSecretVersion.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Amazon MQ (RabbitMQ)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsMqBroker.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         Queues = "orders",
    ///         BatchSize = 1,
    ///         SourceAccessConfigurations = new[]
    ///         {
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "VIRTUAL_HOST",
    ///                 Uri = "/production",
    ///             },
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "BASIC_AUTH",
    ///                 Uri = exampleAwsSecretsmanagerSecretVersion.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### DocumentDB Change Stream
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.EventSourceMapping("example", new()
    ///     {
    ///         EventSourceArn = exampleAwsDocdbCluster.Arn,
    ///         FunctionName = exampleAwsLambdaFunction.Arn,
    ///         StartingPosition = "LATEST",
    ///         DocumentDbEventSourceConfig = new Aws.Lambda.Inputs.EventSourceMappingDocumentDbEventSourceConfigArgs
    ///         {
    ///             DatabaseName = "orders",
    ///             CollectionName = "transactions",
    ///             FullDocument = "UpdateLookup",
    ///         },
    ///         SourceAccessConfigurations = new[]
    ///         {
    ///             new Aws.Lambda.Inputs.EventSourceMappingSourceAccessConfigurationArgs
    ///             {
    ///                 Type = "BASIC_AUTH",
    ///                 Uri = exampleAwsSecretsmanagerSecretVersion.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Lambda event source mappings using the `UUID` (event source mapping identifier). For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:lambda/eventSourceMapping:EventSourceMapping example 12345kxodurf3443
    /// ```
    /// </summary>
    [AwsResourceType("aws:lambda/eventSourceMapping:EventSourceMapping")]
    public partial class EventSourceMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional configuration block for Amazon Managed Kafka sources. Incompatible with `SelfManagedEventSource` and `SelfManagedKafkaEventSourceConfig`. See below.
        /// </summary>
        [Output("amazonManagedKafkaEventSourceConfig")]
        public Output<Outputs.EventSourceMappingAmazonManagedKafkaEventSourceConfig> AmazonManagedKafkaEventSourceConfig { get; private set; } = null!;

        /// <summary>
        /// Event source mapping ARN.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
        /// </summary>
        [Output("batchSize")]
        public Output<int?> BatchSize { get; private set; } = null!;

        /// <summary>
        /// Whether to split the batch in two and retry if the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Defaults to `False`.
        /// </summary>
        [Output("bisectBatchOnFunctionError")]
        public Output<bool?> BisectBatchOnFunctionError { get; private set; } = null!;

        /// <summary>
        /// Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). See below.
        /// </summary>
        [Output("destinationConfig")]
        public Output<Outputs.EventSourceMappingDestinationConfig?> DestinationConfig { get; private set; } = null!;

        /// <summary>
        /// Configuration settings for a DocumentDB event source. See below.
        /// </summary>
        [Output("documentDbEventSourceConfig")]
        public Output<Outputs.EventSourceMappingDocumentDbEventSourceConfig?> DocumentDbEventSourceConfig { get; private set; } = null!;

        /// <summary>
        /// Whether the mapping is enabled. Defaults to `True`.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Event source ARN - required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream. Incompatible with Self Managed Kafka source.
        /// </summary>
        [Output("eventSourceArn")]
        public Output<string?> EventSourceArn { get; private set; } = null!;

        /// <summary>
        /// Criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. See below.
        /// </summary>
        [Output("filterCriteria")]
        public Output<Outputs.EventSourceMappingFilterCriteria?> FilterCriteria { get; private set; } = null!;

        /// <summary>
        /// ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `FunctionName` above.)
        /// </summary>
        [Output("functionArn")]
        public Output<string> FunctionArn { get; private set; } = null!;

        /// <summary>
        /// Name or ARN of the Lambda function that will be subscribing to events.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        /// <summary>
        /// List of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
        /// </summary>
        [Output("functionResponseTypes")]
        public Output<ImmutableArray<string>> FunctionResponseTypes { get; private set; } = null!;

        /// <summary>
        /// ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria.
        /// </summary>
        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// Result of the last AWS Lambda invocation of your Lambda function.
        /// </summary>
        [Output("lastProcessingResult")]
        public Output<string> LastProcessingResult { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer until either `MaximumBatchingWindowInSeconds` expires or `BatchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
        /// </summary>
        [Output("maximumBatchingWindowInSeconds")]
        public Output<int?> MaximumBatchingWindowInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
        /// </summary>
        [Output("maximumRecordAgeInSeconds")]
        public Output<int> MaximumRecordAgeInSeconds { get; private set; } = null!;

        /// <summary>
        /// Maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
        /// </summary>
        [Output("maximumRetryAttempts")]
        public Output<int> MaximumRetryAttempts { get; private set; } = null!;

        /// <summary>
        /// CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. See below.
        /// </summary>
        [Output("metricsConfig")]
        public Output<Outputs.EventSourceMappingMetricsConfig?> MetricsConfig { get; private set; } = null!;

        /// <summary>
        /// Number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
        /// </summary>
        [Output("parallelizationFactor")]
        public Output<int> ParallelizationFactor { get; private set; } = null!;

        /// <summary>
        /// Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. See below.
        /// </summary>
        [Output("provisionedPollerConfig")]
        public Output<Outputs.EventSourceMappingProvisionedPollerConfig?> ProvisionedPollerConfig { get; private set; } = null!;

        /// <summary>
        /// Name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
        /// </summary>
        [Output("queues")]
        public Output<string?> Queues { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Scaling configuration of the event source. Only available for SQS queues. See below.
        /// </summary>
        [Output("scalingConfig")]
        public Output<Outputs.EventSourceMappingScalingConfig?> ScalingConfig { get; private set; } = null!;

        /// <summary>
        /// For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `SourceAccessConfiguration`. See below.
        /// </summary>
        [Output("selfManagedEventSource")]
        public Output<Outputs.EventSourceMappingSelfManagedEventSource?> SelfManagedEventSource { get; private set; } = null!;

        /// <summary>
        /// Additional configuration block for Self Managed Kafka sources. Incompatible with `EventSourceArn` and `AmazonManagedKafkaEventSourceConfig`. See below.
        /// </summary>
        [Output("selfManagedKafkaEventSourceConfig")]
        public Output<Outputs.EventSourceMappingSelfManagedKafkaEventSourceConfig> SelfManagedKafkaEventSourceConfig { get; private set; } = null!;

        /// <summary>
        /// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `SelfManagedEventSource`. See below.
        /// </summary>
        [Output("sourceAccessConfigurations")]
        public Output<ImmutableArray<Outputs.EventSourceMappingSourceAccessConfiguration>> SourceAccessConfigurations { get; private set; } = null!;

        /// <summary>
        /// Position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
        /// </summary>
        [Output("startingPosition")]
        public Output<string?> StartingPosition { get; private set; } = null!;

        /// <summary>
        /// Timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `StartingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
        /// </summary>
        [Output("startingPositionTimestamp")]
        public Output<string?> StartingPositionTimestamp { get; private set; } = null!;

        /// <summary>
        /// State of the event source mapping.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Reason the event source mapping is in its current state.
        /// </summary>
        [Output("stateTransitionReason")]
        public Output<string> StateTransitionReason { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the object. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
        /// </summary>
        [Output("topics")]
        public Output<ImmutableArray<string>> Topics { get; private set; } = null!;

        /// <summary>
        /// Duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
        /// </summary>
        [Output("tumblingWindowInSeconds")]
        public Output<int?> TumblingWindowInSeconds { get; private set; } = null!;

        /// <summary>
        /// UUID of the created event source mapping.
        /// </summary>
        [Output("uuid")]
        public Output<string> Uuid { get; private set; } = null!;


        /// <summary>
        /// Create a EventSourceMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventSourceMapping(string name, EventSourceMappingArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/eventSourceMapping:EventSourceMapping", name, args ?? new EventSourceMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventSourceMapping(string name, Input<string> id, EventSourceMappingState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/eventSourceMapping:EventSourceMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventSourceMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventSourceMapping Get(string name, Input<string> id, EventSourceMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new EventSourceMapping(name, id, state, options);
        }
    }

    public sealed class EventSourceMappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional configuration block for Amazon Managed Kafka sources. Incompatible with `SelfManagedEventSource` and `SelfManagedKafkaEventSourceConfig`. See below.
        /// </summary>
        [Input("amazonManagedKafkaEventSourceConfig")]
        public Input<Inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigArgs>? AmazonManagedKafkaEventSourceConfig { get; set; }

        /// <summary>
        /// Largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
        /// </summary>
        [Input("batchSize")]
        public Input<int>? BatchSize { get; set; }

        /// <summary>
        /// Whether to split the batch in two and retry if the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Defaults to `False`.
        /// </summary>
        [Input("bisectBatchOnFunctionError")]
        public Input<bool>? BisectBatchOnFunctionError { get; set; }

        /// <summary>
        /// Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). See below.
        /// </summary>
        [Input("destinationConfig")]
        public Input<Inputs.EventSourceMappingDestinationConfigArgs>? DestinationConfig { get; set; }

        /// <summary>
        /// Configuration settings for a DocumentDB event source. See below.
        /// </summary>
        [Input("documentDbEventSourceConfig")]
        public Input<Inputs.EventSourceMappingDocumentDbEventSourceConfigArgs>? DocumentDbEventSourceConfig { get; set; }

        /// <summary>
        /// Whether the mapping is enabled. Defaults to `True`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Event source ARN - required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream. Incompatible with Self Managed Kafka source.
        /// </summary>
        [Input("eventSourceArn")]
        public Input<string>? EventSourceArn { get; set; }

        /// <summary>
        /// Criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. See below.
        /// </summary>
        [Input("filterCriteria")]
        public Input<Inputs.EventSourceMappingFilterCriteriaArgs>? FilterCriteria { get; set; }

        /// <summary>
        /// Name or ARN of the Lambda function that will be subscribing to events.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        [Input("functionResponseTypes")]
        private InputList<string>? _functionResponseTypes;

        /// <summary>
        /// List of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
        /// </summary>
        public InputList<string> FunctionResponseTypes
        {
            get => _functionResponseTypes ?? (_functionResponseTypes = new InputList<string>());
            set => _functionResponseTypes = value;
        }

        /// <summary>
        /// ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer until either `MaximumBatchingWindowInSeconds` expires or `BatchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
        /// </summary>
        [Input("maximumBatchingWindowInSeconds")]
        public Input<int>? MaximumBatchingWindowInSeconds { get; set; }

        /// <summary>
        /// Maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
        /// </summary>
        [Input("maximumRecordAgeInSeconds")]
        public Input<int>? MaximumRecordAgeInSeconds { get; set; }

        /// <summary>
        /// Maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
        /// </summary>
        [Input("maximumRetryAttempts")]
        public Input<int>? MaximumRetryAttempts { get; set; }

        /// <summary>
        /// CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. See below.
        /// </summary>
        [Input("metricsConfig")]
        public Input<Inputs.EventSourceMappingMetricsConfigArgs>? MetricsConfig { get; set; }

        /// <summary>
        /// Number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
        /// </summary>
        [Input("parallelizationFactor")]
        public Input<int>? ParallelizationFactor { get; set; }

        /// <summary>
        /// Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. See below.
        /// </summary>
        [Input("provisionedPollerConfig")]
        public Input<Inputs.EventSourceMappingProvisionedPollerConfigArgs>? ProvisionedPollerConfig { get; set; }

        /// <summary>
        /// Name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
        /// </summary>
        [Input("queues")]
        public Input<string>? Queues { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Scaling configuration of the event source. Only available for SQS queues. See below.
        /// </summary>
        [Input("scalingConfig")]
        public Input<Inputs.EventSourceMappingScalingConfigArgs>? ScalingConfig { get; set; }

        /// <summary>
        /// For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `SourceAccessConfiguration`. See below.
        /// </summary>
        [Input("selfManagedEventSource")]
        public Input<Inputs.EventSourceMappingSelfManagedEventSourceArgs>? SelfManagedEventSource { get; set; }

        /// <summary>
        /// Additional configuration block for Self Managed Kafka sources. Incompatible with `EventSourceArn` and `AmazonManagedKafkaEventSourceConfig`. See below.
        /// </summary>
        [Input("selfManagedKafkaEventSourceConfig")]
        public Input<Inputs.EventSourceMappingSelfManagedKafkaEventSourceConfigArgs>? SelfManagedKafkaEventSourceConfig { get; set; }

        [Input("sourceAccessConfigurations")]
        private InputList<Inputs.EventSourceMappingSourceAccessConfigurationArgs>? _sourceAccessConfigurations;

        /// <summary>
        /// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `SelfManagedEventSource`. See below.
        /// </summary>
        public InputList<Inputs.EventSourceMappingSourceAccessConfigurationArgs> SourceAccessConfigurations
        {
            get => _sourceAccessConfigurations ?? (_sourceAccessConfigurations = new InputList<Inputs.EventSourceMappingSourceAccessConfigurationArgs>());
            set => _sourceAccessConfigurations = value;
        }

        /// <summary>
        /// Position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
        /// </summary>
        [Input("startingPosition")]
        public Input<string>? StartingPosition { get; set; }

        /// <summary>
        /// Timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `StartingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
        /// </summary>
        [Input("startingPositionTimestamp")]
        public Input<string>? StartingPositionTimestamp { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the object. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// Name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// Duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
        /// </summary>
        [Input("tumblingWindowInSeconds")]
        public Input<int>? TumblingWindowInSeconds { get; set; }

        public EventSourceMappingArgs()
        {
        }
        public static new EventSourceMappingArgs Empty => new EventSourceMappingArgs();
    }

    public sealed class EventSourceMappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional configuration block for Amazon Managed Kafka sources. Incompatible with `SelfManagedEventSource` and `SelfManagedKafkaEventSourceConfig`. See below.
        /// </summary>
        [Input("amazonManagedKafkaEventSourceConfig")]
        public Input<Inputs.EventSourceMappingAmazonManagedKafkaEventSourceConfigGetArgs>? AmazonManagedKafkaEventSourceConfig { get; set; }

        /// <summary>
        /// Event source mapping ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Largest number of records that Lambda will retrieve from your event source at the time of invocation. Defaults to `100` for DynamoDB, Kinesis, MQ and MSK, `10` for SQS.
        /// </summary>
        [Input("batchSize")]
        public Input<int>? BatchSize { get; set; }

        /// <summary>
        /// Whether to split the batch in two and retry if the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Defaults to `False`.
        /// </summary>
        [Input("bisectBatchOnFunctionError")]
        public Input<bool>? BisectBatchOnFunctionError { get; set; }

        /// <summary>
        /// Amazon SQS queue, Amazon SNS topic or Amazon S3 bucket (only available for Kafka sources) destination for failed records. Only available for stream sources (DynamoDB and Kinesis) and Kafka sources (Amazon MSK and Self-managed Apache Kafka). See below.
        /// </summary>
        [Input("destinationConfig")]
        public Input<Inputs.EventSourceMappingDestinationConfigGetArgs>? DestinationConfig { get; set; }

        /// <summary>
        /// Configuration settings for a DocumentDB event source. See below.
        /// </summary>
        [Input("documentDbEventSourceConfig")]
        public Input<Inputs.EventSourceMappingDocumentDbEventSourceConfigGetArgs>? DocumentDbEventSourceConfig { get; set; }

        /// <summary>
        /// Whether the mapping is enabled. Defaults to `True`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Event source ARN - required for Kinesis stream, DynamoDB stream, SQS queue, MQ broker, MSK cluster or DocumentDB change stream. Incompatible with Self Managed Kafka source.
        /// </summary>
        [Input("eventSourceArn")]
        public Input<string>? EventSourceArn { get; set; }

        /// <summary>
        /// Criteria to use for [event filtering](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html) Kinesis stream, DynamoDB stream, SQS queue event sources. See below.
        /// </summary>
        [Input("filterCriteria")]
        public Input<Inputs.EventSourceMappingFilterCriteriaGetArgs>? FilterCriteria { get; set; }

        /// <summary>
        /// ARN of the Lambda function the event source mapping is sending events to. (Note: this is a computed value that differs from `FunctionName` above.)
        /// </summary>
        [Input("functionArn")]
        public Input<string>? FunctionArn { get; set; }

        /// <summary>
        /// Name or ARN of the Lambda function that will be subscribing to events.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        [Input("functionResponseTypes")]
        private InputList<string>? _functionResponseTypes;

        /// <summary>
        /// List of current response type enums applied to the event source mapping for [AWS Lambda checkpointing](https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html#services-ddb-batchfailurereporting). Only available for SQS and stream sources (DynamoDB and Kinesis). Valid values: `ReportBatchItemFailures`.
        /// </summary>
        public InputList<string> FunctionResponseTypes
        {
            get => _functionResponseTypes ?? (_functionResponseTypes = new InputList<string>());
            set => _functionResponseTypes = value;
        }

        /// <summary>
        /// ARN of the Key Management Service (KMS) customer managed key that Lambda uses to encrypt your function's filter criteria.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        [Input("lastModified")]
        public Input<string>? LastModified { get; set; }

        /// <summary>
        /// Result of the last AWS Lambda invocation of your Lambda function.
        /// </summary>
        [Input("lastProcessingResult")]
        public Input<string>? LastProcessingResult { get; set; }

        /// <summary>
        /// Maximum amount of time to gather records before invoking the function, in seconds (between 0 and 300). Records will continue to buffer until either `MaximumBatchingWindowInSeconds` expires or `BatchSize` has been met. For streaming event sources, defaults to as soon as records are available in the stream. Only available for stream sources (DynamoDB and Kinesis) and SQS standard queues.
        /// </summary>
        [Input("maximumBatchingWindowInSeconds")]
        public Input<int>? MaximumBatchingWindowInSeconds { get; set; }

        /// <summary>
        /// Maximum age of a record that Lambda sends to a function for processing. Only available for stream sources (DynamoDB and Kinesis). Must be either -1 (forever, and the default value) or between 60 and 604800 (inclusive).
        /// </summary>
        [Input("maximumRecordAgeInSeconds")]
        public Input<int>? MaximumRecordAgeInSeconds { get; set; }

        /// <summary>
        /// Maximum number of times to retry when the function returns an error. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of -1 (forever), maximum of 10000.
        /// </summary>
        [Input("maximumRetryAttempts")]
        public Input<int>? MaximumRetryAttempts { get; set; }

        /// <summary>
        /// CloudWatch metrics configuration of the event source. Only available for stream sources (DynamoDB and Kinesis) and SQS queues. See below.
        /// </summary>
        [Input("metricsConfig")]
        public Input<Inputs.EventSourceMappingMetricsConfigGetArgs>? MetricsConfig { get; set; }

        /// <summary>
        /// Number of batches to process from each shard concurrently. Only available for stream sources (DynamoDB and Kinesis). Minimum and default of 1, maximum of 10.
        /// </summary>
        [Input("parallelizationFactor")]
        public Input<int>? ParallelizationFactor { get; set; }

        /// <summary>
        /// Event poller configuration for the event source. Only valid for Amazon MSK or self-managed Apache Kafka sources. See below.
        /// </summary>
        [Input("provisionedPollerConfig")]
        public Input<Inputs.EventSourceMappingProvisionedPollerConfigGetArgs>? ProvisionedPollerConfig { get; set; }

        /// <summary>
        /// Name of the Amazon MQ broker destination queue to consume. Only available for MQ sources. The list must contain exactly one queue name.
        /// </summary>
        [Input("queues")]
        public Input<string>? Queues { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Scaling configuration of the event source. Only available for SQS queues. See below.
        /// </summary>
        [Input("scalingConfig")]
        public Input<Inputs.EventSourceMappingScalingConfigGetArgs>? ScalingConfig { get; set; }

        /// <summary>
        /// For Self Managed Kafka sources, the location of the self managed cluster. If set, configuration must also include `SourceAccessConfiguration`. See below.
        /// </summary>
        [Input("selfManagedEventSource")]
        public Input<Inputs.EventSourceMappingSelfManagedEventSourceGetArgs>? SelfManagedEventSource { get; set; }

        /// <summary>
        /// Additional configuration block for Self Managed Kafka sources. Incompatible with `EventSourceArn` and `AmazonManagedKafkaEventSourceConfig`. See below.
        /// </summary>
        [Input("selfManagedKafkaEventSourceConfig")]
        public Input<Inputs.EventSourceMappingSelfManagedKafkaEventSourceConfigGetArgs>? SelfManagedKafkaEventSourceConfig { get; set; }

        [Input("sourceAccessConfigurations")]
        private InputList<Inputs.EventSourceMappingSourceAccessConfigurationGetArgs>? _sourceAccessConfigurations;

        /// <summary>
        /// For Self Managed Kafka sources, the access configuration for the source. If set, configuration must also include `SelfManagedEventSource`. See below.
        /// </summary>
        public InputList<Inputs.EventSourceMappingSourceAccessConfigurationGetArgs> SourceAccessConfigurations
        {
            get => _sourceAccessConfigurations ?? (_sourceAccessConfigurations = new InputList<Inputs.EventSourceMappingSourceAccessConfigurationGetArgs>());
            set => _sourceAccessConfigurations = value;
        }

        /// <summary>
        /// Position in the stream where AWS Lambda should start reading. Must be one of `AT_TIMESTAMP` (Kinesis only), `LATEST` or `TRIM_HORIZON` if getting events from Kinesis, DynamoDB, MSK or Self Managed Apache Kafka. Must not be provided if getting events from SQS. More information about these positions can be found in the [AWS DynamoDB Streams API Reference](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_streams_GetShardIterator.html) and [AWS Kinesis API Reference](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType).
        /// </summary>
        [Input("startingPosition")]
        public Input<string>? StartingPosition { get; set; }

        /// <summary>
        /// Timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) of the data record which to start reading when using `StartingPosition` set to `AT_TIMESTAMP`. If a record with this exact timestamp does not exist, the next later record is chosen. If the timestamp is older than the current trim horizon, the oldest available record is chosen.
        /// </summary>
        [Input("startingPositionTimestamp")]
        public Input<string>? StartingPositionTimestamp { get; set; }

        /// <summary>
        /// State of the event source mapping.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Reason the event source mapping is in its current state.
        /// </summary>
        [Input("stateTransitionReason")]
        public Input<string>? StateTransitionReason { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the object. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("topics")]
        private InputList<string>? _topics;

        /// <summary>
        /// Name of the Kafka topics. Only available for MSK sources. A single topic name must be specified.
        /// </summary>
        public InputList<string> Topics
        {
            get => _topics ?? (_topics = new InputList<string>());
            set => _topics = value;
        }

        /// <summary>
        /// Duration in seconds of a processing window for [AWS Lambda streaming analytics](https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html#services-kinesis-windows). The range is between 1 second up to 900 seconds. Only available for stream sources (DynamoDB and Kinesis).
        /// </summary>
        [Input("tumblingWindowInSeconds")]
        public Input<int>? TumblingWindowInSeconds { get; set; }

        /// <summary>
        /// UUID of the created event source mapping.
        /// </summary>
        [Input("uuid")]
        public Input<string>? Uuid { get; set; }

        public EventSourceMappingState()
        {
        }
        public static new EventSourceMappingState Empty => new EventSourceMappingState();
    }
}
