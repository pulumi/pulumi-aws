// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    public static class GetLayerVersion
    {
        /// <summary>
        /// Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
        /// 
        /// ## Example Usage
        /// 
        /// ### Get Latest Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "my-shared-utilities",
        ///     });
        /// 
        ///     // Use the layer in a Lambda function
        ///     var exampleFunction = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("function.zip"),
        ///         Name = "example_function",
        ///         Role = lambdaRole.Arn,
        ///         Handler = "index.handler",
        ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
        ///         Layers = new[]
        ///         {
        ///             example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Get Specific Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "production-utilities",
        ///         Version = 5,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["layerInfo"] = 
        ///         {
        ///             { "arn", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn) },
        ///             { "version", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) },
        ///             { "description", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Description) },
        ///         },
        ///     };
        /// });
        /// ```
        /// 
        /// ### Get Latest Compatible Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Find latest layer version compatible with Python 3.12
        ///     var pythonLayer = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "python-dependencies",
        ///         CompatibleRuntime = "python3.12",
        ///     });
        /// 
        ///     // Find latest layer version compatible with ARM64 architecture
        ///     var armLayer = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "optimized-libraries",
        ///         CompatibleArchitecture = "arm64",
        ///     });
        /// 
        ///     // Use both layers in a function
        ///     var example = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("function.zip"),
        ///         Name = "multi_layer_function",
        ///         Role = lambdaRole.Arn,
        ///         Handler = "app.handler",
        ///         Runtime = Aws.Lambda.Runtime.Python3d12,
        ///         Architectures = new[]
        ///         {
        ///             "arm64",
        ///         },
        ///         Layers = new[]
        ///         {
        ///             pythonLayer.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///             armLayer.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Compare Layer Versions
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get latest version
        ///     var latest = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "shared-layer",
        ///     });
        /// 
        ///     // Get specific version for comparison
        ///     var stable = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "shared-layer",
        ///         Version = 3,
        ///     });
        /// 
        ///     var useLatestLayer = latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) &gt; 5;
        /// 
        ///     var selectedLayer = useLatestLayer ? latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn) : stable.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn);
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["selectedLayerVersion"] = useLatestLayer ? latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) : stable.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetLayerVersionResult> InvokeAsync(GetLayerVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLayerVersionResult>("aws:lambda/getLayerVersion:getLayerVersion", args ?? new GetLayerVersionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
        /// 
        /// ## Example Usage
        /// 
        /// ### Get Latest Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "my-shared-utilities",
        ///     });
        /// 
        ///     // Use the layer in a Lambda function
        ///     var exampleFunction = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("function.zip"),
        ///         Name = "example_function",
        ///         Role = lambdaRole.Arn,
        ///         Handler = "index.handler",
        ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
        ///         Layers = new[]
        ///         {
        ///             example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Get Specific Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "production-utilities",
        ///         Version = 5,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["layerInfo"] = 
        ///         {
        ///             { "arn", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn) },
        ///             { "version", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) },
        ///             { "description", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Description) },
        ///         },
        ///     };
        /// });
        /// ```
        /// 
        /// ### Get Latest Compatible Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Find latest layer version compatible with Python 3.12
        ///     var pythonLayer = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "python-dependencies",
        ///         CompatibleRuntime = "python3.12",
        ///     });
        /// 
        ///     // Find latest layer version compatible with ARM64 architecture
        ///     var armLayer = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "optimized-libraries",
        ///         CompatibleArchitecture = "arm64",
        ///     });
        /// 
        ///     // Use both layers in a function
        ///     var example = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("function.zip"),
        ///         Name = "multi_layer_function",
        ///         Role = lambdaRole.Arn,
        ///         Handler = "app.handler",
        ///         Runtime = Aws.Lambda.Runtime.Python3d12,
        ///         Architectures = new[]
        ///         {
        ///             "arm64",
        ///         },
        ///         Layers = new[]
        ///         {
        ///             pythonLayer.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///             armLayer.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Compare Layer Versions
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get latest version
        ///     var latest = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "shared-layer",
        ///     });
        /// 
        ///     // Get specific version for comparison
        ///     var stable = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "shared-layer",
        ///         Version = 3,
        ///     });
        /// 
        ///     var useLatestLayer = latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) &gt; 5;
        /// 
        ///     var selectedLayer = useLatestLayer ? latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn) : stable.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn);
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["selectedLayerVersion"] = useLatestLayer ? latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) : stable.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLayerVersionResult> Invoke(GetLayerVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLayerVersionResult>("aws:lambda/getLayerVersion:getLayerVersion", args ?? new GetLayerVersionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.
        /// 
        /// ## Example Usage
        /// 
        /// ### Get Latest Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "my-shared-utilities",
        ///     });
        /// 
        ///     // Use the layer in a Lambda function
        ///     var exampleFunction = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("function.zip"),
        ///         Name = "example_function",
        ///         Role = lambdaRole.Arn,
        ///         Handler = "index.handler",
        ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
        ///         Layers = new[]
        ///         {
        ///             example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Get Specific Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "production-utilities",
        ///         Version = 5,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["layerInfo"] = 
        ///         {
        ///             { "arn", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn) },
        ///             { "version", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) },
        ///             { "description", example.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Description) },
        ///         },
        ///     };
        /// });
        /// ```
        /// 
        /// ### Get Latest Compatible Layer Version
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Find latest layer version compatible with Python 3.12
        ///     var pythonLayer = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "python-dependencies",
        ///         CompatibleRuntime = "python3.12",
        ///     });
        /// 
        ///     // Find latest layer version compatible with ARM64 architecture
        ///     var armLayer = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "optimized-libraries",
        ///         CompatibleArchitecture = "arm64",
        ///     });
        /// 
        ///     // Use both layers in a function
        ///     var example = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("function.zip"),
        ///         Name = "multi_layer_function",
        ///         Role = lambdaRole.Arn,
        ///         Handler = "app.handler",
        ///         Runtime = Aws.Lambda.Runtime.Python3d12,
        ///         Architectures = new[]
        ///         {
        ///             "arm64",
        ///         },
        ///         Layers = new[]
        ///         {
        ///             pythonLayer.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///             armLayer.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Compare Layer Versions
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get latest version
        ///     var latest = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "shared-layer",
        ///     });
        /// 
        ///     // Get specific version for comparison
        ///     var stable = Aws.Lambda.GetLayerVersion.Invoke(new()
        ///     {
        ///         LayerName = "shared-layer",
        ///         Version = 3,
        ///     });
        /// 
        ///     var useLatestLayer = latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) &gt; 5;
        /// 
        ///     var selectedLayer = useLatestLayer ? latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn) : stable.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Arn);
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["selectedLayerVersion"] = useLatestLayer ? latest.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version) : stable.Apply(getLayerVersionResult =&gt; getLayerVersionResult.Version),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetLayerVersionResult> Invoke(GetLayerVersionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLayerVersionResult>("aws:lambda/getLayerVersion:getLayerVersion", args ?? new GetLayerVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLayerVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specific architecture the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
        /// </summary>
        [Input("compatibleArchitecture")]
        public string? CompatibleArchitecture { get; set; }

        /// <summary>
        /// Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
        /// </summary>
        [Input("compatibleRuntime")]
        public string? CompatibleRuntime { get; set; }

        /// <summary>
        /// Name of the Lambda layer.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("layerName", required: true)]
        public string LayerName { get; set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
        /// </summary>
        [Input("version")]
        public int? Version { get; set; }

        public GetLayerVersionArgs()
        {
        }
        public static new GetLayerVersionArgs Empty => new GetLayerVersionArgs();
    }

    public sealed class GetLayerVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specific architecture the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
        /// </summary>
        [Input("compatibleArchitecture")]
        public Input<string>? CompatibleArchitecture { get; set; }

        /// <summary>
        /// Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
        /// </summary>
        [Input("compatibleRuntime")]
        public Input<string>? CompatibleRuntime { get; set; }

        /// <summary>
        /// Name of the Lambda layer.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("layerName", required: true)]
        public Input<string> LayerName { get; set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public GetLayerVersionInvokeArgs()
        {
        }
        public static new GetLayerVersionInvokeArgs Empty => new GetLayerVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetLayerVersionResult
    {
        /// <summary>
        /// ARN of the Lambda Layer with version.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Base64-encoded representation of raw SHA-256 sum of the zip file.
        /// </summary>
        public readonly string CodeSha256;
        public readonly string? CompatibleArchitecture;
        /// <summary>
        /// List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleArchitectures) the specific Lambda Layer version is compatible with.
        /// </summary>
        public readonly ImmutableArray<string> CompatibleArchitectures;
        public readonly string? CompatibleRuntime;
        /// <summary>
        /// List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleRuntimes) the specific Lambda Layer version is compatible with.
        /// </summary>
        public readonly ImmutableArray<string> CompatibleRuntimes;
        /// <summary>
        /// Date this resource was created.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Description of the specific Lambda Layer version.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARN of the Lambda Layer without version.
        /// </summary>
        public readonly string LayerArn;
        public readonly string LayerName;
        /// <summary>
        /// License info associated with the specific Lambda Layer version.
        /// </summary>
        public readonly string LicenseInfo;
        public readonly string Region;
        /// <summary>
        /// ARN of a signing job.
        /// </summary>
        public readonly string SigningJobArn;
        /// <summary>
        /// ARN for a signing profile version.
        /// </summary>
        public readonly string SigningProfileVersionArn;
        /// <summary>
        /// (**Deprecated** use `code_sha256` instead) Base64-encoded representation of raw SHA-256 sum of the zip file.
        /// </summary>
        public readonly string SourceCodeHash;
        /// <summary>
        /// Size in bytes of the function .zip file.
        /// </summary>
        public readonly int SourceCodeSize;
        /// <summary>
        /// Lambda Layer version.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetLayerVersionResult(
            string arn,

            string codeSha256,

            string? compatibleArchitecture,

            ImmutableArray<string> compatibleArchitectures,

            string? compatibleRuntime,

            ImmutableArray<string> compatibleRuntimes,

            string createdDate,

            string description,

            string id,

            string layerArn,

            string layerName,

            string licenseInfo,

            string region,

            string signingJobArn,

            string signingProfileVersionArn,

            string sourceCodeHash,

            int sourceCodeSize,

            int version)
        {
            Arn = arn;
            CodeSha256 = codeSha256;
            CompatibleArchitecture = compatibleArchitecture;
            CompatibleArchitectures = compatibleArchitectures;
            CompatibleRuntime = compatibleRuntime;
            CompatibleRuntimes = compatibleRuntimes;
            CreatedDate = createdDate;
            Description = description;
            Id = id;
            LayerArn = layerArn;
            LayerName = layerName;
            LicenseInfo = licenseInfo;
            Region = region;
            SigningJobArn = signingJobArn;
            SigningProfileVersionArn = signingProfileVersionArn;
            SourceCodeHash = sourceCodeHash;
            SourceCodeSize = sourceCodeSize;
            Version = version;
        }
    }
}
