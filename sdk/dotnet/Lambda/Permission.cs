// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    /// <summary>
    /// Manages an AWS Lambda permission. Use this resource to grant external sources (e.g., EventBridge Rules, SNS, or S3) permission to invoke Lambda functions.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage with EventBridge
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var iamForLambda = new Aws.Iam.Role("iam_for_lambda", new()
    ///     {
    ///         Name = "iam_for_lambda",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "sts:AssumeRole",
    ///                     ["Effect"] = "Allow",
    ///                     ["Sid"] = "",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "lambda.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var testLambda = new Aws.Lambda.Function("test_lambda", new()
    ///     {
    ///         Code = new FileArchive("lambdatest.zip"),
    ///         Name = "lambda_function_name",
    ///         Role = iamForLambda.Arn,
    ///         Handler = "exports.handler",
    ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
    ///     });
    /// 
    ///     var testAlias = new Aws.Lambda.Alias("test_alias", new()
    ///     {
    ///         Name = "testalias",
    ///         Description = "a sample description",
    ///         FunctionName = testLambda.Name,
    ///         FunctionVersion = "$LATEST",
    ///     });
    /// 
    ///     var allowCloudwatch = new Aws.Lambda.Permission("allow_cloudwatch", new()
    ///     {
    ///         StatementId = "AllowExecutionFromCloudWatch",
    ///         Action = "lambda:InvokeFunction",
    ///         Function = testLambda.Name,
    ///         Principal = "events.amazonaws.com",
    ///         SourceArn = "arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
    ///         Qualifier = testAlias.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### SNS Integration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Aws.Sns.Topic("default", new()
    ///     {
    ///         Name = "call-lambda-maybe",
    ///     });
    /// 
    ///     var defaultRole = new Aws.Iam.Role("default", new()
    ///     {
    ///         Name = "iam_for_lambda_with_sns",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "sts:AssumeRole",
    ///                     ["Effect"] = "Allow",
    ///                     ["Sid"] = "",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "lambda.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var func = new Aws.Lambda.Function("func", new()
    ///     {
    ///         Code = new FileArchive("lambdatest.zip"),
    ///         Name = "lambda_called_from_sns",
    ///         Role = defaultRole.Arn,
    ///         Handler = "exports.handler",
    ///         Runtime = Aws.Lambda.Runtime.Python3d12,
    ///     });
    /// 
    ///     var withSns = new Aws.Lambda.Permission("with_sns", new()
    ///     {
    ///         StatementId = "AllowExecutionFromSNS",
    ///         Action = "lambda:InvokeFunction",
    ///         Function = func.Name,
    ///         Principal = "sns.amazonaws.com",
    ///         SourceArn = @default.Arn,
    ///     });
    /// 
    ///     var lambda = new Aws.Sns.TopicSubscription("lambda", new()
    ///     {
    ///         Topic = @default.Arn,
    ///         Protocol = "lambda",
    ///         Endpoint = func.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### API Gateway REST API Integration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myDemoAPI = new Aws.ApiGateway.RestApi("MyDemoAPI", new()
    ///     {
    ///         Name = "MyDemoAPI",
    ///         Description = "This is my API for demonstration purposes",
    ///     });
    /// 
    ///     var lambdaPermission = new Aws.Lambda.Permission("lambda_permission", new()
    ///     {
    ///         StatementId = "AllowMyDemoAPIInvoke",
    ///         Action = "lambda:InvokeFunction",
    ///         Function = "MyDemoFunction",
    ///         Principal = "apigateway.amazonaws.com",
    ///         SourceArn = myDemoAPI.ExecutionArn.Apply(executionArn =&gt; $"{executionArn}/*"),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### CloudWatch Log Group Integration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Aws.CloudWatch.LogGroup("default", new()
    ///     {
    ///         Name = "/default",
    ///     });
    /// 
    ///     var assumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "lambda.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var defaultRole = new Aws.Iam.Role("default", new()
    ///     {
    ///         Name = "iam_for_lambda_called_from_cloudwatch_logs",
    ///         AssumeRolePolicy = assumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var loggingFunction = new Aws.Lambda.Function("logging", new()
    ///     {
    ///         Code = new FileArchive("lamba_logging.zip"),
    ///         Name = "lambda_called_from_cloudwatch_logs",
    ///         Handler = "exports.handler",
    ///         Role = defaultRole.Arn,
    ///         Runtime = Aws.Lambda.Runtime.Python3d12,
    ///     });
    /// 
    ///     var logging = new Aws.Lambda.Permission("logging", new()
    ///     {
    ///         Action = "lambda:InvokeFunction",
    ///         Function = loggingFunction.Name,
    ///         Principal = "logs.eu-west-1.amazonaws.com",
    ///         SourceArn = @default.Arn.Apply(arn =&gt; $"{arn}:*"),
    ///     });
    /// 
    ///     var loggingLogSubscriptionFilter = new Aws.CloudWatch.LogSubscriptionFilter("logging", new()
    ///     {
    ///         DestinationArn = loggingFunction.Arn,
    ///         FilterPattern = "",
    ///         LogGroup = @default.Name,
    ///         Name = "logging_default",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             logging,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Cross-Account Function URL Access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var url = new Aws.Lambda.FunctionUrl("url", new()
    ///     {
    ///         FunctionName = example.FunctionName,
    ///         AuthorizationType = "AWS_IAM",
    ///     });
    /// 
    ///     var urlPermission = new Aws.Lambda.Permission("url", new()
    ///     {
    ///         Action = "lambda:InvokeFunctionUrl",
    ///         Function = example.FunctionName,
    ///         Principal = "arn:aws:iam::444455556666:role/example",
    ///         SourceAccount = "444455556666",
    ///         FunctionUrlAuthType = "AWS_IAM",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:lambda/permission:Permission")]
    public partial class Permission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Event Source Token for Alexa Skills
        /// </summary>
        [Output("eventSourceToken")]
        public Output<string?> EventSourceToken { get; private set; } = null!;

        /// <summary>
        /// Name or ARN of the Lambda function
        /// </summary>
        [Output("function")]
        public Output<string> Function { get; private set; } = null!;

        /// <summary>
        /// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
        /// </summary>
        [Output("functionUrlAuthType")]
        public Output<string?> FunctionUrlAuthType { get; private set; } = null!;

        /// <summary>
        /// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// AWS Organizations ID to grant permission to all accounts under this organization
        /// </summary>
        [Output("principalOrgId")]
        public Output<string?> PrincipalOrgId { get; private set; } = null!;

        /// <summary>
        /// Lambda function version or alias name
        /// </summary>
        [Output("qualifier")]
        public Output<string?> Qualifier { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// AWS account ID of the source owner for cross-account access, S3, or SES
        /// </summary>
        [Output("sourceAccount")]
        public Output<string?> SourceAccount { get; private set; } = null!;

        /// <summary>
        /// ARN of the source resource granting permission to invoke the Lambda function
        /// </summary>
        [Output("sourceArn")]
        public Output<string?> SourceArn { get; private set; } = null!;

        /// <summary>
        /// Statement identifier. Generated by Pulumi if not provided
        /// </summary>
        [Output("statementId")]
        public Output<string> StatementId { get; private set; } = null!;

        /// <summary>
        /// Statement identifier prefix. Conflicts with `statement_id`
        /// </summary>
        [Output("statementIdPrefix")]
        public Output<string> StatementIdPrefix { get; private set; } = null!;


        /// <summary>
        /// Create a Permission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permission(string name, PermissionArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/permission:Permission", name, args ?? new PermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permission(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/permission:Permission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permission Get(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new Permission(name, id, state, options);
        }
    }

    public sealed class PermissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Event Source Token for Alexa Skills
        /// </summary>
        [Input("eventSourceToken")]
        public Input<string>? EventSourceToken { get; set; }

        /// <summary>
        /// Name or ARN of the Lambda function
        /// </summary>
        [Input("function", required: true)]
        public Input<string> Function { get; set; } = null!;

        /// <summary>
        /// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
        /// </summary>
        [Input("functionUrlAuthType")]
        public Input<string>? FunctionUrlAuthType { get; set; }

        /// <summary>
        /// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// AWS Organizations ID to grant permission to all accounts under this organization
        /// </summary>
        [Input("principalOrgId")]
        public Input<string>? PrincipalOrgId { get; set; }

        /// <summary>
        /// Lambda function version or alias name
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// AWS account ID of the source owner for cross-account access, S3, or SES
        /// </summary>
        [Input("sourceAccount")]
        public Input<string>? SourceAccount { get; set; }

        /// <summary>
        /// ARN of the source resource granting permission to invoke the Lambda function
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        /// <summary>
        /// Statement identifier. Generated by Pulumi if not provided
        /// </summary>
        [Input("statementId")]
        public Input<string>? StatementId { get; set; }

        /// <summary>
        /// Statement identifier prefix. Conflicts with `statement_id`
        /// </summary>
        [Input("statementIdPrefix")]
        public Input<string>? StatementIdPrefix { get; set; }

        public PermissionArgs()
        {
        }
        public static new PermissionArgs Empty => new PermissionArgs();
    }

    public sealed class PermissionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Event Source Token for Alexa Skills
        /// </summary>
        [Input("eventSourceToken")]
        public Input<string>? EventSourceToken { get; set; }

        /// <summary>
        /// Name or ARN of the Lambda function
        /// </summary>
        [Input("function")]
        public Input<string>? Function { get; set; }

        /// <summary>
        /// Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
        /// </summary>
        [Input("functionUrlAuthType")]
        public Input<string>? FunctionUrlAuthType { get; set; }

        /// <summary>
        /// AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// AWS Organizations ID to grant permission to all accounts under this organization
        /// </summary>
        [Input("principalOrgId")]
        public Input<string>? PrincipalOrgId { get; set; }

        /// <summary>
        /// Lambda function version or alias name
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// AWS account ID of the source owner for cross-account access, S3, or SES
        /// </summary>
        [Input("sourceAccount")]
        public Input<string>? SourceAccount { get; set; }

        /// <summary>
        /// ARN of the source resource granting permission to invoke the Lambda function
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        /// <summary>
        /// Statement identifier. Generated by Pulumi if not provided
        /// </summary>
        [Input("statementId")]
        public Input<string>? StatementId { get; set; }

        /// <summary>
        /// Statement identifier prefix. Conflicts with `statement_id`
        /// </summary>
        [Input("statementIdPrefix")]
        public Input<string>? StatementIdPrefix { get; set; }

        public PermissionState()
        {
        }
        public static new PermissionState Empty => new PermissionState();
    }
}
