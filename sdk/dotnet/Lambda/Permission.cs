// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    /// <summary>
    /// Creates a Lambda permission to allow external sources invoking the Lambda function
    /// (e.g. CloudWatch Event Rule, SNS or S3).
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/lambda_permission.html.markdown.
    /// </summary>
    public partial class Permission : Pulumi.CustomResource
    {
        /// <summary>
        /// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// The Event Source Token to validate.  Used with [Alexa Skills][1].
        /// </summary>
        [Output("eventSourceToken")]
        public Output<string?> EventSourceToken { get; private set; } = null!;

        /// <summary>
        /// Name of the Lambda function whose resource policy you are updating
        /// </summary>
        [Output("function")]
        public Output<string> Function { get; private set; } = null!;

        /// <summary>
        /// The principal who is getting this permission.
        /// e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
        /// such as `events.amazonaws.com` or `sns.amazonaws.com`.
        /// </summary>
        [Output("principal")]
        public Output<string> Principal { get; private set; } = null!;

        /// <summary>
        /// Query parameter to specify function version or alias name.
        /// The permission will then apply to the specific qualified ARN.
        /// e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
        /// </summary>
        [Output("qualifier")]
        public Output<string?> Qualifier { get; private set; } = null!;

        /// <summary>
        /// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
        /// </summary>
        [Output("sourceAccount")]
        public Output<string?> SourceAccount { get; private set; } = null!;

        /// <summary>
        /// When granting Amazon S3 or CloudWatch Events permission to
        /// invoke your function, you should specify this field with the Amazon Resource Name (ARN)
        /// for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
        /// generated from the specified bucket or rule can invoke the function.
        /// API Gateway ARNs have a unique structure described
        /// [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
        /// </summary>
        [Output("sourceArn")]
        public Output<string?> SourceArn { get; private set; } = null!;

        /// <summary>
        /// A unique statement identifier. By default generated by this provider.
        /// </summary>
        [Output("statementId")]
        public Output<string> StatementId { get; private set; } = null!;

        /// <summary>
        /// A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statement_id`.
        /// </summary>
        [Output("statementIdPrefix")]
        public Output<string?> StatementIdPrefix { get; private set; } = null!;


        /// <summary>
        /// Create a Permission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permission(string name, PermissionArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/permission:Permission", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Permission(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/permission:Permission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permission Get(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new Permission(name, id, state, options);
        }
    }

    public sealed class PermissionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// The Event Source Token to validate.  Used with [Alexa Skills][1].
        /// </summary>
        [Input("eventSourceToken")]
        public Input<string>? EventSourceToken { get; set; }

        /// <summary>
        /// Name of the Lambda function whose resource policy you are updating
        /// </summary>
        [Input("function", required: true)]
        public Input<string> Function { get; set; } = null!;

        /// <summary>
        /// The principal who is getting this permission.
        /// e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
        /// such as `events.amazonaws.com` or `sns.amazonaws.com`.
        /// </summary>
        [Input("principal", required: true)]
        public Input<string> Principal { get; set; } = null!;

        /// <summary>
        /// Query parameter to specify function version or alias name.
        /// The permission will then apply to the specific qualified ARN.
        /// e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
        /// </summary>
        [Input("sourceAccount")]
        public Input<string>? SourceAccount { get; set; }

        /// <summary>
        /// When granting Amazon S3 or CloudWatch Events permission to
        /// invoke your function, you should specify this field with the Amazon Resource Name (ARN)
        /// for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
        /// generated from the specified bucket or rule can invoke the function.
        /// API Gateway ARNs have a unique structure described
        /// [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        /// <summary>
        /// A unique statement identifier. By default generated by this provider.
        /// </summary>
        [Input("statementId")]
        public Input<string>? StatementId { get; set; }

        /// <summary>
        /// A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statement_id`.
        /// </summary>
        [Input("statementIdPrefix")]
        public Input<string>? StatementIdPrefix { get; set; }

        public PermissionArgs()
        {
        }
    }

    public sealed class PermissionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS Lambda action you want to allow in this statement. (e.g. `lambda:InvokeFunction`)
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// The Event Source Token to validate.  Used with [Alexa Skills][1].
        /// </summary>
        [Input("eventSourceToken")]
        public Input<string>? EventSourceToken { get; set; }

        /// <summary>
        /// Name of the Lambda function whose resource policy you are updating
        /// </summary>
        [Input("function")]
        public Input<string>? Function { get; set; }

        /// <summary>
        /// The principal who is getting this permission.
        /// e.g. `s3.amazonaws.com`, an AWS account ID, or any valid AWS service principal
        /// such as `events.amazonaws.com` or `sns.amazonaws.com`.
        /// </summary>
        [Input("principal")]
        public Input<string>? Principal { get; set; }

        /// <summary>
        /// Query parameter to specify function version or alias name.
        /// The permission will then apply to the specific qualified ARN.
        /// e.g. `arn:aws:lambda:aws-region:acct-id:function:function-name:2`
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// This parameter is used for S3 and SES. The AWS account ID (without a hyphen) of the source owner.
        /// </summary>
        [Input("sourceAccount")]
        public Input<string>? SourceAccount { get; set; }

        /// <summary>
        /// When granting Amazon S3 or CloudWatch Events permission to
        /// invoke your function, you should specify this field with the Amazon Resource Name (ARN)
        /// for the S3 Bucket or CloudWatch Events Rule as its value.  This ensures that only events
        /// generated from the specified bucket or rule can invoke the function.
        /// API Gateway ARNs have a unique structure described
        /// [here](http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-control-access-using-iam-policies-to-invoke-api.html).
        /// </summary>
        [Input("sourceArn")]
        public Input<string>? SourceArn { get; set; }

        /// <summary>
        /// A unique statement identifier. By default generated by this provider.
        /// </summary>
        [Input("statementId")]
        public Input<string>? StatementId { get; set; }

        /// <summary>
        /// A statement identifier prefix. This provider will generate a unique suffix. Conflicts with `statement_id`.
        /// </summary>
        [Input("statementIdPrefix")]
        public Input<string>? StatementIdPrefix { get; set; }

        public PermissionState()
        {
        }
    }
}
