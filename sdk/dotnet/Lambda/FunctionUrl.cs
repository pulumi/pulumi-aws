// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    [AwsResourceType("aws:lambda/functionUrl:FunctionUrl")]
    public partial class FunctionUrl : global::Pulumi.CustomResource
    {
        [Output("authorizationType")]
        public Output<string> AuthorizationType { get; private set; } = null!;

        [Output("cors")]
        public Output<Outputs.FunctionUrlCors?> Cors { get; private set; } = null!;

        [Output("functionArn")]
        public Output<string> FunctionArn { get; private set; } = null!;

        [Output("functionName")]
        public Output<string> FunctionName { get; private set; } = null!;

        [Output("functionUrl")]
        public Output<string> FunctionUrlResult { get; private set; } = null!;

        [Output("qualifier")]
        public Output<string?> Qualifier { get; private set; } = null!;

        [Output("urlId")]
        public Output<string> UrlId { get; private set; } = null!;


        /// <summary>
        /// Create a FunctionUrl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FunctionUrl(string name, FunctionUrlArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/functionUrl:FunctionUrl", name, args ?? new FunctionUrlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FunctionUrl(string name, Input<string> id, FunctionUrlState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/functionUrl:FunctionUrl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FunctionUrl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FunctionUrl Get(string name, Input<string> id, FunctionUrlState? state = null, CustomResourceOptions? options = null)
        {
            return new FunctionUrl(name, id, state, options);
        }
    }

    public sealed class FunctionUrlArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizationType", required: true)]
        public Input<string> AuthorizationType { get; set; } = null!;

        [Input("cors")]
        public Input<Inputs.FunctionUrlCorsArgs>? Cors { get; set; }

        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        public FunctionUrlArgs()
        {
        }
        public static new FunctionUrlArgs Empty => new FunctionUrlArgs();
    }

    public sealed class FunctionUrlState : global::Pulumi.ResourceArgs
    {
        [Input("authorizationType")]
        public Input<string>? AuthorizationType { get; set; }

        [Input("cors")]
        public Input<Inputs.FunctionUrlCorsGetArgs>? Cors { get; set; }

        [Input("functionArn")]
        public Input<string>? FunctionArn { get; set; }

        [Input("functionName")]
        public Input<string>? FunctionName { get; set; }

        [Input("functionUrl")]
        public Input<string>? FunctionUrlResult { get; set; }

        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        [Input("urlId")]
        public Input<string>? UrlId { get; set; }

        public FunctionUrlState()
        {
        }
        public static new FunctionUrlState Empty => new FunctionUrlState();
    }
}
