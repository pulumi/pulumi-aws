// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    public static class GetFunction
    {
        /// <summary>
        /// Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
        /// 
        /// &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-lambda-function",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["functionArn"] = example.Apply(getFunctionResult =&gt; getFunctionResult.Arn),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Using Function Alias
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "api-handler",
        ///         Qualifier = "production",
        ///     });
        /// 
        ///     // Use in API Gateway integration
        ///     var exampleIntegration = new Aws.ApiGateway.Integration("example", new()
        ///     {
        ///         RestApi = exampleAwsApiGatewayRestApi.Id,
        ///         ResourceId = exampleAwsApiGatewayResource.Id,
        ///         HttpMethod = exampleAwsApiGatewayMethod.HttpMethod,
        ///         IntegrationHttpMethod = "POST",
        ///         Type = "AWS_PROXY",
        ///         Uri = example.Apply(getFunctionResult =&gt; getFunctionResult.InvokeArn),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Function Configuration Reference
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get existing function details
        ///     var reference = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "existing-function",
        ///     });
        /// 
        ///     // Create new function with similar configuration
        ///     var example = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("new-function.zip"),
        ///         Name = "new-function",
        ///         Role = reference.Apply(getFunctionResult =&gt; getFunctionResult.Role),
        ///         Handler = reference.Apply(getFunctionResult =&gt; getFunctionResult.Handler),
        ///         Runtime = reference.Apply(getFunctionResult =&gt; getFunctionResult.Runtime).Apply(System.Enum.Parse&lt;Aws.Lambda.Runtime&gt;),
        ///         MemorySize = reference.Apply(getFunctionResult =&gt; getFunctionResult.MemorySize),
        ///         Timeout = reference.Apply(getFunctionResult =&gt; getFunctionResult.Timeout),
        ///         Architectures = reference.Apply(getFunctionResult =&gt; getFunctionResult.Architectures),
        ///         VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs
        ///         {
        ///             SubnetIds = reference.Apply(getFunctionResult =&gt; getFunctionResult.VpcConfig?.SubnetIds),
        ///             SecurityGroupIds = reference.Apply(getFunctionResult =&gt; getFunctionResult.VpcConfig?.SecurityGroupIds),
        ///         },
        ///         Environment = new Aws.Lambda.Inputs.FunctionEnvironmentArgs
        ///         {
        ///             Variables = reference.Apply(getFunctionResult =&gt; getFunctionResult.Environment?.Variables),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Function Version Management
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get details about specific version
        ///     var version = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-function",
        ///         Qualifier = "3",
        ///     });
        /// 
        ///     // Get details about latest version
        ///     var latest = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-function",
        ///         Qualifier = "$LATEST",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["versionComparison"] = 
        ///         {
        ///             { "specificVersion", version.Apply(getFunctionResult =&gt; getFunctionResult.Version) },
        ///             { "latestVersion", latest.Apply(getFunctionResult =&gt; getFunctionResult.Version) },
        ///             { "codeDifference", Output.Tuple(version, latest).Apply(values =&gt;
        ///             {
        ///                 var version = values.Item1;
        ///                 var latest = values.Item2;
        ///                 return version.Apply(getFunctionResult =&gt; getFunctionResult.CodeSha256) != latest.Apply(getFunctionResult =&gt; getFunctionResult.CodeSha256);
        ///             }) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetFunctionResult> InvokeAsync(GetFunctionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFunctionResult>("aws:lambda/getFunction:getFunction", args ?? new GetFunctionArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
        /// 
        /// &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-lambda-function",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["functionArn"] = example.Apply(getFunctionResult =&gt; getFunctionResult.Arn),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Using Function Alias
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "api-handler",
        ///         Qualifier = "production",
        ///     });
        /// 
        ///     // Use in API Gateway integration
        ///     var exampleIntegration = new Aws.ApiGateway.Integration("example", new()
        ///     {
        ///         RestApi = exampleAwsApiGatewayRestApi.Id,
        ///         ResourceId = exampleAwsApiGatewayResource.Id,
        ///         HttpMethod = exampleAwsApiGatewayMethod.HttpMethod,
        ///         IntegrationHttpMethod = "POST",
        ///         Type = "AWS_PROXY",
        ///         Uri = example.Apply(getFunctionResult =&gt; getFunctionResult.InvokeArn),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Function Configuration Reference
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get existing function details
        ///     var reference = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "existing-function",
        ///     });
        /// 
        ///     // Create new function with similar configuration
        ///     var example = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("new-function.zip"),
        ///         Name = "new-function",
        ///         Role = reference.Apply(getFunctionResult =&gt; getFunctionResult.Role),
        ///         Handler = reference.Apply(getFunctionResult =&gt; getFunctionResult.Handler),
        ///         Runtime = reference.Apply(getFunctionResult =&gt; getFunctionResult.Runtime).Apply(System.Enum.Parse&lt;Aws.Lambda.Runtime&gt;),
        ///         MemorySize = reference.Apply(getFunctionResult =&gt; getFunctionResult.MemorySize),
        ///         Timeout = reference.Apply(getFunctionResult =&gt; getFunctionResult.Timeout),
        ///         Architectures = reference.Apply(getFunctionResult =&gt; getFunctionResult.Architectures),
        ///         VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs
        ///         {
        ///             SubnetIds = reference.Apply(getFunctionResult =&gt; getFunctionResult.VpcConfig?.SubnetIds),
        ///             SecurityGroupIds = reference.Apply(getFunctionResult =&gt; getFunctionResult.VpcConfig?.SecurityGroupIds),
        ///         },
        ///         Environment = new Aws.Lambda.Inputs.FunctionEnvironmentArgs
        ///         {
        ///             Variables = reference.Apply(getFunctionResult =&gt; getFunctionResult.Environment?.Variables),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Function Version Management
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get details about specific version
        ///     var version = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-function",
        ///         Qualifier = "3",
        ///     });
        /// 
        ///     // Get details about latest version
        ///     var latest = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-function",
        ///         Qualifier = "$LATEST",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["versionComparison"] = 
        ///         {
        ///             { "specificVersion", version.Apply(getFunctionResult =&gt; getFunctionResult.Version) },
        ///             { "latestVersion", latest.Apply(getFunctionResult =&gt; getFunctionResult.Version) },
        ///             { "codeDifference", Output.Tuple(version, latest).Apply(values =&gt;
        ///             {
        ///                 var version = values.Item1;
        ///                 var latest = values.Item2;
        ///                 return version.Apply(getFunctionResult =&gt; getFunctionResult.CodeSha256) != latest.Apply(getFunctionResult =&gt; getFunctionResult.CodeSha256);
        ///             }) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFunctionResult> Invoke(GetFunctionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionResult>("aws:lambda/getFunction:getFunction", args ?? new GetFunctionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.
        /// 
        /// &gt; **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-lambda-function",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["functionArn"] = example.Apply(getFunctionResult =&gt; getFunctionResult.Arn),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Using Function Alias
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "api-handler",
        ///         Qualifier = "production",
        ///     });
        /// 
        ///     // Use in API Gateway integration
        ///     var exampleIntegration = new Aws.ApiGateway.Integration("example", new()
        ///     {
        ///         RestApi = exampleAwsApiGatewayRestApi.Id,
        ///         ResourceId = exampleAwsApiGatewayResource.Id,
        ///         HttpMethod = exampleAwsApiGatewayMethod.HttpMethod,
        ///         IntegrationHttpMethod = "POST",
        ///         Type = "AWS_PROXY",
        ///         Uri = example.Apply(getFunctionResult =&gt; getFunctionResult.InvokeArn),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Function Configuration Reference
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get existing function details
        ///     var reference = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "existing-function",
        ///     });
        /// 
        ///     // Create new function with similar configuration
        ///     var example = new Aws.Lambda.Function("example", new()
        ///     {
        ///         Code = new FileArchive("new-function.zip"),
        ///         Name = "new-function",
        ///         Role = reference.Apply(getFunctionResult =&gt; getFunctionResult.Role),
        ///         Handler = reference.Apply(getFunctionResult =&gt; getFunctionResult.Handler),
        ///         Runtime = reference.Apply(getFunctionResult =&gt; getFunctionResult.Runtime).Apply(System.Enum.Parse&lt;Aws.Lambda.Runtime&gt;),
        ///         MemorySize = reference.Apply(getFunctionResult =&gt; getFunctionResult.MemorySize),
        ///         Timeout = reference.Apply(getFunctionResult =&gt; getFunctionResult.Timeout),
        ///         Architectures = reference.Apply(getFunctionResult =&gt; getFunctionResult.Architectures),
        ///         VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs
        ///         {
        ///             SubnetIds = reference.Apply(getFunctionResult =&gt; getFunctionResult.VpcConfig?.SubnetIds),
        ///             SecurityGroupIds = reference.Apply(getFunctionResult =&gt; getFunctionResult.VpcConfig?.SecurityGroupIds),
        ///         },
        ///         Environment = new Aws.Lambda.Inputs.FunctionEnvironmentArgs
        ///         {
        ///             Variables = reference.Apply(getFunctionResult =&gt; getFunctionResult.Environment?.Variables),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Function Version Management
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Get details about specific version
        ///     var version = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-function",
        ///         Qualifier = "3",
        ///     });
        /// 
        ///     // Get details about latest version
        ///     var latest = Aws.Lambda.GetFunction.Invoke(new()
        ///     {
        ///         FunctionName = "my-function",
        ///         Qualifier = "$LATEST",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["versionComparison"] = 
        ///         {
        ///             { "specificVersion", version.Apply(getFunctionResult =&gt; getFunctionResult.Version) },
        ///             { "latestVersion", latest.Apply(getFunctionResult =&gt; getFunctionResult.Version) },
        ///             { "codeDifference", Output.Tuple(version, latest).Apply(values =&gt;
        ///             {
        ///                 var version = values.Item1;
        ///                 var latest = values.Item2;
        ///                 return version.Apply(getFunctionResult =&gt; getFunctionResult.CodeSha256) != latest.Apply(getFunctionResult =&gt; getFunctionResult.CodeSha256);
        ///             }) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetFunctionResult> Invoke(GetFunctionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFunctionResult>("aws:lambda/getFunction:getFunction", args ?? new GetFunctionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFunctionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Lambda function.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("functionName", required: true)]
        public string FunctionName { get; set; } = null!;

        /// <summary>
        /// Alias name or version number of the Lambda function. E.g., `$LATEST`, `my-alias`, or `1`. When not included: the data source resolves to the most recent published version; if no published version exists: it resolves to the most recent unpublished version.
        /// </summary>
        [Input("qualifier")]
        public string? Qualifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags assigned to the Lambda Function.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetFunctionArgs()
        {
        }
        public static new GetFunctionArgs Empty => new GetFunctionArgs();
    }

    public sealed class GetFunctionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Lambda function.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("functionName", required: true)]
        public Input<string> FunctionName { get; set; } = null!;

        /// <summary>
        /// Alias name or version number of the Lambda function. E.g., `$LATEST`, `my-alias`, or `1`. When not included: the data source resolves to the most recent published version; if no published version exists: it resolves to the most recent unpublished version.
        /// </summary>
        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the Lambda Function.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetFunctionInvokeArgs()
        {
        }
        public static new GetFunctionInvokeArgs Empty => new GetFunctionInvokeArgs();
    }


    [OutputType]
    public sealed class GetFunctionResult
    {
        /// <summary>
        /// Instruction set architecture for the Lambda function.
        /// </summary>
        public readonly ImmutableArray<string> Architectures;
        /// <summary>
        /// ARN of the Amazon EFS Access Point that provides access to the file system.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Base64-encoded representation of raw SHA-256 sum of the zip file.
        /// </summary>
        public readonly string CodeSha256;
        /// <summary>
        /// ARN for a Code Signing Configuration.
        /// </summary>
        public readonly string CodeSigningConfigArn;
        /// <summary>
        /// Configuration for the function's dead letter queue. See below.
        /// </summary>
        public readonly Outputs.GetFunctionDeadLetterConfigResult DeadLetterConfig;
        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Lambda environment's configuration settings. See below.
        /// </summary>
        public readonly Outputs.GetFunctionEnvironmentResult Environment;
        /// <summary>
        /// Amount of ephemeral storage (`/tmp`) allocated for the Lambda Function. See below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionEphemeralStorageResult> EphemeralStorages;
        /// <summary>
        /// Connection settings for an Amazon EFS file system. See below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionFileSystemConfigResult> FileSystemConfigs;
        public readonly string FunctionName;
        /// <summary>
        /// Function entrypoint in your code.
        /// </summary>
        public readonly string Handler;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// URI of the container image.
        /// </summary>
        public readonly string ImageUri;
        /// <summary>
        /// ARN to be used for invoking Lambda Function from API Gateway. **Note:** Starting with `v4.51.0` of the provider, this will not include the qualifier.
        /// </summary>
        public readonly string InvokeArn;
        /// <summary>
        /// ARN for the KMS encryption key.
        /// </summary>
        public readonly string KmsKeyArn;
        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        public readonly string LastModified;
        /// <summary>
        /// List of Lambda Layer ARNs attached to your Lambda Function.
        /// </summary>
        public readonly ImmutableArray<string> Layers;
        /// <summary>
        /// Advanced logging settings. See below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionLoggingConfigResult> LoggingConfigs;
        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime.
        /// </summary>
        public readonly int MemorySize;
        /// <summary>
        /// Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `arn`.
        /// </summary>
        public readonly string QualifiedArn;
        /// <summary>
        /// Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN to be used for invoking Lambda Function from API Gateway. See also `invoke_arn`.
        /// </summary>
        public readonly string QualifiedInvokeArn;
        public readonly string? Qualifier;
        public readonly string Region;
        /// <summary>
        /// Amount of reserved concurrent executions for this Lambda function or `-1` if unreserved.
        /// </summary>
        public readonly int ReservedConcurrentExecutions;
        /// <summary>
        /// IAM role attached to the Lambda Function.
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// Runtime environment for the Lambda function.
        /// </summary>
        public readonly string Runtime;
        /// <summary>
        /// ARN of a signing job.
        /// </summary>
        public readonly string SigningJobArn;
        /// <summary>
        /// ARN for a signing profile version.
        /// </summary>
        public readonly string SigningProfileVersionArn;
        /// <summary>
        /// (**Deprecated** use `code_sha256` instead) Base64-encoded representation of raw SHA-256 sum of the zip file.
        /// </summary>
        public readonly string SourceCodeHash;
        /// <summary>
        /// Size in bytes of the function .zip file.
        /// </summary>
        public readonly int SourceCodeSize;
        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt the function's `.zip` deployment package.
        /// </summary>
        public readonly string SourceKmsKeyArn;
        /// <summary>
        /// Map of tags assigned to the Lambda Function.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Function execution time at which Lambda should terminate the function.
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// Tracing settings of the function. See below.
        /// </summary>
        public readonly Outputs.GetFunctionTracingConfigResult TracingConfig;
        /// <summary>
        /// Version of the Lambda function returned. If `qualifier` is not set, this will resolve to the most recent published version. If no published version of the function exists, `version` will resolve to `$LATEST`.
        /// </summary>
        public readonly string Version;
        /// <summary>
        /// VPC configuration associated with your Lambda function. See below.
        /// </summary>
        public readonly Outputs.GetFunctionVpcConfigResult VpcConfig;

        [OutputConstructor]
        private GetFunctionResult(
            ImmutableArray<string> architectures,

            string arn,

            string codeSha256,

            string codeSigningConfigArn,

            Outputs.GetFunctionDeadLetterConfigResult deadLetterConfig,

            string description,

            Outputs.GetFunctionEnvironmentResult environment,

            ImmutableArray<Outputs.GetFunctionEphemeralStorageResult> ephemeralStorages,

            ImmutableArray<Outputs.GetFunctionFileSystemConfigResult> fileSystemConfigs,

            string functionName,

            string handler,

            string id,

            string imageUri,

            string invokeArn,

            string kmsKeyArn,

            string lastModified,

            ImmutableArray<string> layers,

            ImmutableArray<Outputs.GetFunctionLoggingConfigResult> loggingConfigs,

            int memorySize,

            string qualifiedArn,

            string qualifiedInvokeArn,

            string? qualifier,

            string region,

            int reservedConcurrentExecutions,

            string role,

            string runtime,

            string signingJobArn,

            string signingProfileVersionArn,

            string sourceCodeHash,

            int sourceCodeSize,

            string sourceKmsKeyArn,

            ImmutableDictionary<string, string> tags,

            int timeout,

            Outputs.GetFunctionTracingConfigResult tracingConfig,

            string version,

            Outputs.GetFunctionVpcConfigResult vpcConfig)
        {
            Architectures = architectures;
            Arn = arn;
            CodeSha256 = codeSha256;
            CodeSigningConfigArn = codeSigningConfigArn;
            DeadLetterConfig = deadLetterConfig;
            Description = description;
            Environment = environment;
            EphemeralStorages = ephemeralStorages;
            FileSystemConfigs = fileSystemConfigs;
            FunctionName = functionName;
            Handler = handler;
            Id = id;
            ImageUri = imageUri;
            InvokeArn = invokeArn;
            KmsKeyArn = kmsKeyArn;
            LastModified = lastModified;
            Layers = layers;
            LoggingConfigs = loggingConfigs;
            MemorySize = memorySize;
            QualifiedArn = qualifiedArn;
            QualifiedInvokeArn = qualifiedInvokeArn;
            Qualifier = qualifier;
            Region = region;
            ReservedConcurrentExecutions = reservedConcurrentExecutions;
            Role = role;
            Runtime = runtime;
            SigningJobArn = signingJobArn;
            SigningProfileVersionArn = signingProfileVersionArn;
            SourceCodeHash = sourceCodeHash;
            SourceCodeSize = sourceCodeSize;
            SourceKmsKeyArn = sourceKmsKeyArn;
            Tags = tags;
            Timeout = timeout;
            TracingConfig = tracingConfig;
            Version = version;
            VpcConfig = vpcConfig;
        }
    }
}
