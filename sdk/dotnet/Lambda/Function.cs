// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    /// <summary>
    /// Manages an AWS Lambda Function. Use this resource to create serverless functions that run code in response to events without provisioning or managing servers.
    /// 
    /// For information about Lambda and how to use it, see [What is AWS Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html). For a detailed example of setting up Lambda and API Gateway, see Serverless Applications with AWS Lambda and API Gateway.
    /// 
    /// &gt; **Note:** Due to [AWS Lambda improved VPC networking changes that began deploying in September 2019](https://aws.amazon.com/blogs/compute/announcing-improved-vpc-networking-for-aws-lambda-functions/), EC2 subnets and security groups associated with Lambda Functions can take up to 45 minutes to successfully delete. Pulumi AWS Provider version 2.31.0 and later automatically handles this increased timeout, however prior versions require setting the customizable deletion timeouts of those Pulumi resources to 45 minutes (`delete = "45m"`). AWS and HashiCorp are working together to reduce the amount of time required for resource deletion and updates can be tracked in this GitHub issue.
    /// 
    /// &gt; **Note:** If you get a `KMSAccessDeniedException: Lambda was unable to decrypt the environment variables because KMS access was denied` error when invoking an `aws.lambda.Function` with environment variables, the IAM role associated with the function may have been deleted and recreated after the function was created. You can fix the problem two ways: 1) updating the function's role to another role and then updating it back again to the recreated role. (When you create a function, Lambda grants permissions on the KMS key to the function's IAM role. If the IAM role is recreated, the grant is no longer valid. Changing the function's role or recreating the function causes Lambda to update the grant.)
    /// 
    /// &gt; **Tip:** To give an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function, use the `aws.lambda.Permission` resource. See [Lambda Permission Model](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html) for more details. On the other hand, the `role` argument of this resource is the function's execution role for identity and access to AWS services and resources.
    /// 
    /// ## Example Usage
    /// 
    /// ### Container Image Function
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Name = "example_container_function",
    ///         Role = exampleAwsIamRole.Arn,
    ///         PackageType = "Image",
    ///         ImageUri = $"{exampleAwsEcrRepository.RepositoryUrl}:latest",
    ///         ImageConfig = new Aws.Lambda.Inputs.FunctionImageConfigArgs
    ///         {
    ///             EntryPoints = new[]
    ///             {
    ///                 "/lambda-entrypoint.sh",
    ///             },
    ///             Commands = new[]
    ///             {
    ///                 "app.handler",
    ///             },
    ///         },
    ///         MemorySize = 512,
    ///         Timeout = 30,
    ///         Architectures = new[]
    ///         {
    ///             "arm64",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Function with Lambda Layers
    /// 
    /// &gt; **Note:** The `aws.lambda.LayerVersion` attribute values for `arn` and `layer_arn` were swapped in version 2.0.0 of the Pulumi AWS Provider. For version 2.x, use `arn` references.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Common dependencies layer
    ///     var example = new Aws.Lambda.LayerVersion("example", new()
    ///     {
    ///         Code = new FileArchive("layer.zip"),
    ///         LayerName = "example_dependencies_layer",
    ///         Description = "Common dependencies for Lambda functions",
    ///         CompatibleRuntimes = new[]
    ///         {
    ///             "nodejs20.x",
    ///             "python3.12",
    ///         },
    ///         CompatibleArchitectures = new[]
    ///         {
    ///             "x86_64",
    ///             "arm64",
    ///         },
    ///     });
    /// 
    ///     // Function using the layer
    ///     var exampleFunction = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Code = new FileArchive("function.zip"),
    ///         Name = "example_layered_function",
    ///         Role = exampleAwsIamRole.Arn,
    ///         Handler = "index.handler",
    ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
    ///         Layers = new[]
    ///         {
    ///             example.Arn,
    ///         },
    ///         TracingConfig = new Aws.Lambda.Inputs.FunctionTracingConfigArgs
    ///         {
    ///             Mode = "Active",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### VPC Function with Enhanced Networking
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Code = new FileArchive("function.zip"),
    ///         Name = "example_vpc_function",
    ///         Role = exampleAwsIamRole.Arn,
    ///         Handler = "app.handler",
    ///         Runtime = Aws.Lambda.Runtime.Python3d12,
    ///         MemorySize = 1024,
    ///         Timeout = 30,
    ///         VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 examplePrivate1.Id,
    ///                 examplePrivate2.Id,
    ///             },
    ///             SecurityGroupIds = new[]
    ///             {
    ///                 exampleLambda.Id,
    ///             },
    ///             Ipv6AllowedForDualStack = true,
    ///         },
    ///         EphemeralStorage = new Aws.Lambda.Inputs.FunctionEphemeralStorageArgs
    ///         {
    ///             Size = 5120,
    ///         },
    ///         SnapStart = new Aws.Lambda.Inputs.FunctionSnapStartArgs
    ///         {
    ///             ApplyOn = "PublishedVersions",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Function with EFS Integration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // EFS file system for Lambda
    ///     var example = new Aws.Efs.FileSystem("example", new()
    ///     {
    ///         Encrypted = true,
    ///         Tags = 
    ///         {
    ///             { "Name", "lambda-efs" },
    ///         },
    ///     });
    /// 
    ///     var config = new Config();
    ///     // List of subnet IDs for EFS mount targets
    ///     var subnetIds = config.GetObject&lt;string[]&gt;("subnetIds") ?? new[]
    ///     {
    ///         "subnet-12345678",
    ///         "subnet-87654321",
    ///     };
    ///     // Mount target in each subnet
    ///     var exampleMountTarget = new List&lt;Aws.Efs.MountTarget&gt;();
    ///     for (var rangeIndex = 0; rangeIndex &lt; subnetIds.Length; rangeIndex++)
    ///     {
    ///         var range = new { Value = rangeIndex };
    ///         exampleMountTarget.Add(new Aws.Efs.MountTarget($"example-{range.Value}", new()
    ///         {
    ///             FileSystemId = example.Id,
    ///             SubnetId = subnetIds[range.Value],
    ///             SecurityGroups = new[]
    ///             {
    ///                 efs.Id,
    ///             },
    ///         }));
    ///     }
    ///     // Access point for Lambda
    ///     var exampleAccessPoint = new Aws.Efs.AccessPoint("example", new()
    ///     {
    ///         FileSystemId = example.Id,
    ///         RootDirectory = new Aws.Efs.Inputs.AccessPointRootDirectoryArgs
    ///         {
    ///             Path = "/lambda",
    ///             CreationInfo = new Aws.Efs.Inputs.AccessPointRootDirectoryCreationInfoArgs
    ///             {
    ///                 OwnerGid = 1000,
    ///                 OwnerUid = 1000,
    ///                 Permissions = "755",
    ///             },
    ///         },
    ///         PosixUser = new Aws.Efs.Inputs.AccessPointPosixUserArgs
    ///         {
    ///             Gid = 1000,
    ///             Uid = 1000,
    ///         },
    ///     });
    /// 
    ///     // Lambda function with EFS
    ///     var exampleFunction = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Code = new FileArchive("function.zip"),
    ///         Name = "example_efs_function",
    ///         Role = exampleAwsIamRole.Arn,
    ///         Handler = "index.handler",
    ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
    ///         VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs
    ///         {
    ///             SubnetIds = subnetIds,
    ///             SecurityGroupIds = new[]
    ///             {
    ///                 lambda.Id,
    ///             },
    ///         },
    ///         FileSystemConfig = new Aws.Lambda.Inputs.FunctionFileSystemConfigArgs
    ///         {
    ///             Arn = exampleAccessPoint.Arn,
    ///             LocalMountPath = "/mnt/data",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleMountTarget,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Function with Advanced Logging
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         Name = "/aws/lambda/example_function",
    ///         RetentionInDays = 14,
    ///         Tags = 
    ///         {
    ///             { "Environment", "production" },
    ///             { "Application", "example" },
    ///         },
    ///     });
    /// 
    ///     var exampleFunction = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Code = new FileArchive("function.zip"),
    ///         Name = "example_function",
    ///         Role = exampleAwsIamRole.Arn,
    ///         Handler = "index.handler",
    ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
    ///         LoggingConfig = new Aws.Lambda.Inputs.FunctionLoggingConfigArgs
    ///         {
    ///             LogFormat = "JSON",
    ///             ApplicationLogLevel = "INFO",
    ///             SystemLogLevel = "WARN",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             example,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Function with logging to S3 or Data Firehose
    /// 
    /// #### Required Resources
    /// 
    /// * An S3 bucket or Data Firehose delivery stream to store the logs.
    /// * A CloudWatch Log Group with:
    ///   
    ///     * `log_group_class = "DELIVERY"`
    ///     * A subscription filter whose `destination_arn` points to the S3 bucket or the Data Firehose delivery stream.
    /// 
    /// * IAM roles:
    ///   
    ///     * Assumed by the `logs.amazonaws.com` service to deliver logs to the S3 bucket or Data Firehose delivery stream.
    ///     * Assumed by the `lambda.amazonaws.com` service to send logs to CloudWatch Logs
    /// 
    /// * A Lambda function:
    ///   
    ///     * In the `logging_configuration`, specify the name of the Log Group created above using the `log_group` field
    ///     * No special configuration is required to use S3 or Firehose as the log destination
    /// 
    /// For more details, see [Sending Lambda function logs to Amazon S3](https://docs.aws.amazon.com/lambda/latest/dg/logging-with-s3.html).
    /// 
    /// ### Example: Exporting Lambda Logs to S3 Bucket
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var lambdaFunctionName = "lambda-log-export-example";
    /// 
    ///     var lambdaLogExportBucket = new Aws.S3.Bucket("lambda_log_export", new()
    ///     {
    ///         BucketName = $"{lambdaFunctionName}-bucket",
    ///     });
    /// 
    ///     var export = new Aws.CloudWatch.LogGroup("export", new()
    ///     {
    ///         Name = $"/aws/lambda/{lambdaFunctionName}",
    ///         LogGroupClass = "DELIVERY",
    ///     });
    /// 
    ///     var logsAssumeRole = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "sts:AssumeRole",
    ///                 },
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "logs.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var logsLogExport = new Aws.Iam.Role("logs_log_export", new()
    ///     {
    ///         Name = $"{lambdaFunctionName}-lambda-log-export-role",
    ///         AssumeRolePolicy = logsAssumeRole.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var lambdaLogExport = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:PutObject",
    ///                 },
    ///                 Effect = "Allow",
    ///                 Resources = new[]
    ///                 {
    ///                     $"{lambdaLogExportBucket.Arn}/*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var lambdaLogExportRolePolicy = new Aws.Iam.RolePolicy("lambda_log_export", new()
    ///     {
    ///         Policy = lambdaLogExport.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///         Role = logsLogExport.Name,
    ///     });
    /// 
    ///     var lambdaLogExportLogSubscriptionFilter = new Aws.CloudWatch.LogSubscriptionFilter("lambda_log_export", new()
    ///     {
    ///         Name = $"{lambdaFunctionName}-filter",
    ///         LogGroup = export.Name,
    ///         FilterPattern = "",
    ///         DestinationArn = lambdaLogExportBucket.Arn,
    ///         RoleArn = logsLogExport.Arn,
    ///     });
    /// 
    ///     var logExport = new Aws.Lambda.Function("log_export", new()
    ///     {
    ///         Name = lambdaFunctionName,
    ///         Handler = "index.lambda_handler",
    ///         Runtime = Aws.Lambda.Runtime.Python3d13,
    ///         Role = example.Arn,
    ///         Code = new FileArchive("function.zip"),
    ///         LoggingConfig = new Aws.Lambda.Inputs.FunctionLoggingConfigArgs
    ///         {
    ///             LogFormat = "Text",
    ///             LogGroup = export.Name,
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             export,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Function with Error Handling
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Main Lambda function
    ///     var example = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Code = new FileArchive("function.zip"),
    ///         Name = "example_function",
    ///         Role = exampleAwsIamRole.Arn,
    ///         Handler = "index.handler",
    ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
    ///         DeadLetterConfig = new Aws.Lambda.Inputs.FunctionDeadLetterConfigArgs
    ///         {
    ///             TargetArn = dlq.Arn,
    ///         },
    ///     });
    /// 
    ///     // Event invoke configuration for retries
    ///     var exampleFunctionEventInvokeConfig = new Aws.Lambda.FunctionEventInvokeConfig("example", new()
    ///     {
    ///         FunctionName = example.Name,
    ///         MaximumEventAgeInSeconds = 60,
    ///         MaximumRetryAttempts = 2,
    ///         DestinationConfig = new Aws.Lambda.Inputs.FunctionEventInvokeConfigDestinationConfigArgs
    ///         {
    ///             OnFailure = new Aws.Lambda.Inputs.FunctionEventInvokeConfigDestinationConfigOnFailureArgs
    ///             {
    ///                 Destination = dlq.Arn,
    ///             },
    ///             OnSuccess = new Aws.Lambda.Inputs.FunctionEventInvokeConfigDestinationConfigOnSuccessArgs
    ///             {
    ///                 Destination = success.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### CloudWatch Logging and Permissions
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     // Name of the Lambda function
    ///     var functionName = config.Get("functionName") ?? "example_function";
    ///     // CloudWatch Log Group with retention
    ///     var example = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         Name = $"/aws/lambda/{functionName}",
    ///         RetentionInDays = 14,
    ///         Tags = 
    ///         {
    ///             { "Environment", "production" },
    ///             { "Function", functionName },
    ///         },
    ///     });
    /// 
    ///     // Lambda execution role
    ///     var exampleRole = new Aws.Iam.Role("example", new()
    ///     {
    ///         Name = "lambda_execution_role",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = "sts:AssumeRole",
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "lambda.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     // CloudWatch Logs policy
    ///     var lambdaLogging = new Aws.Iam.Policy("lambda_logging", new()
    ///     {
    ///         Name = "lambda_logging",
    ///         Path = "/",
    ///         Description = "IAM policy for logging from Lambda",
    ///         PolicyDocument = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Effect"] = "Allow",
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "logs:CreateLogGroup",
    ///                         "logs:CreateLogStream",
    ///                         "logs:PutLogEvents",
    ///                     },
    ///                     ["Resource"] = new[]
    ///                     {
    ///                         "arn:aws:logs:*:*:*",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     // Attach logging policy to Lambda role
    ///     var lambdaLogs = new Aws.Iam.RolePolicyAttachment("lambda_logs", new()
    ///     {
    ///         Role = exampleRole.Name,
    ///         PolicyArn = lambdaLogging.Arn,
    ///     });
    /// 
    ///     // Lambda function with logging
    ///     var exampleFunction = new Aws.Lambda.Function("example", new()
    ///     {
    ///         Code = new FileArchive("function.zip"),
    ///         Name = functionName,
    ///         Role = exampleRole.Arn,
    ///         Handler = "index.handler",
    ///         Runtime = Aws.Lambda.Runtime.NodeJS20dX,
    ///         LoggingConfig = new Aws.Lambda.Inputs.FunctionLoggingConfigArgs
    ///         {
    ///             LogFormat = "JSON",
    ///             ApplicationLogLevel = "INFO",
    ///             SystemLogLevel = "WARN",
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             lambdaLogs,
    ///             example,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Specifying the Deployment Package
    /// 
    /// AWS Lambda expects source code to be provided as a deployment package whose structure varies depending on which `runtime` is in use. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for the valid values of `runtime`. The expected structure of the deployment package can be found in [the AWS Lambda documentation for each runtime](https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html).
    /// 
    /// Once you have created your deployment package you can specify it either directly as a local file (using the `filename` argument) or indirectly via Amazon S3 (using the `s3_bucket`, `s3_key` and `s3_object_version` arguments). When providing the deployment package via S3 it may be useful to use the `aws.s3.BucketObjectv2` resource to upload it.
    /// 
    /// For larger deployment packages it is recommended by Amazon to upload via S3, since the S3 API has better support for uploading large files efficiently.
    /// 
    /// ## Import
    /// 
    /// ### Identity Schema
    /// 
    /// #### Required
    /// 
    /// * `function_name` (String) Name of the Lambda function.
    /// 
    /// #### Optional
    /// 
    /// * `account_id` (String) AWS Account where this resource is managed.
    /// 
    /// * `region` (String) Region where this resource is managed.
    /// 
    /// Using `pulumi import`, import Lambda Functions using the `function_name`. For example:
    /// 
    /// console
    /// 
    /// % pulumi import aws_lambda_function.example example
    /// </summary>
    [AwsResourceType("aws:lambda/function:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instruction set architecture for your Lambda function. Valid values are `["x86_64"]` and `["arm64"]`. Default is `["x86_64"]`. Removing this attribute, function's architecture stays the same.
        /// </summary>
        [Output("architectures")]
        public Output<ImmutableArray<string>> Architectures { get; private set; } = null!;

        /// <summary>
        /// ARN identifying your Lambda Function.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Path to the function's deployment package within the local filesystem. Conflicts with `image_uri` and `s3_bucket`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Output("code")]
        public Output<Archive?> Code { get; private set; } = null!;

        /// <summary>
        /// Base64-encoded representation of raw SHA-256 sum of the zip file.
        /// </summary>
        [Output("codeSha256")]
        public Output<string> CodeSha256 { get; private set; } = null!;

        /// <summary>
        /// ARN of a code-signing configuration to enable code signing for this function.
        /// </summary>
        [Output("codeSigningConfigArn")]
        public Output<string?> CodeSigningConfigArn { get; private set; } = null!;

        /// <summary>
        /// Configuration block for dead letter queue. See below.
        /// </summary>
        [Output("deadLetterConfig")]
        public Output<Outputs.FunctionDeadLetterConfig?> DeadLetterConfig { get; private set; } = null!;

        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configuration block for environment variables. See below.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.FunctionEnvironment?> Environment { get; private set; } = null!;

        /// <summary>
        /// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
        /// </summary>
        [Output("ephemeralStorage")]
        public Output<Outputs.FunctionEphemeralStorage> EphemeralStorage { get; private set; } = null!;

        /// <summary>
        /// Configuration block for EFS file system. See below.
        /// </summary>
        [Output("fileSystemConfig")]
        public Output<Outputs.FunctionFileSystemConfig?> FileSystemConfig { get; private set; } = null!;

        /// <summary>
        /// Function entry point in your code. Required if `package_type` is `Zip`.
        /// </summary>
        [Output("handler")]
        public Output<string?> Handler { get; private set; } = null!;

        /// <summary>
        /// Container image configuration values. See below.
        /// </summary>
        [Output("imageConfig")]
        public Output<Outputs.FunctionImageConfig?> ImageConfig { get; private set; } = null!;

        /// <summary>
        /// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3_bucket`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Output("imageUri")]
        public Output<string?> ImageUri { get; private set; } = null!;

        /// <summary>
        /// ARN to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Output("invokeArn")]
        public Output<string> InvokeArn { get; private set; } = null!;

        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
        /// </summary>
        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
        /// </summary>
        [Output("layers")]
        public Output<ImmutableArray<string>> Layers { get; private set; } = null!;

        /// <summary>
        /// Configuration block for advanced logging settings. See below.
        /// </summary>
        [Output("loggingConfig")]
        public Output<Outputs.FunctionLoggingConfig> LoggingConfig { get; private set; } = null!;

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
        /// </summary>
        [Output("memorySize")]
        public Output<int?> MemorySize { get; private set; } = null!;

        /// <summary>
        /// Unique name for your Lambda Function.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
        /// </summary>
        [Output("packageType")]
        public Output<string?> PackageType { get; private set; } = null!;

        /// <summary>
        /// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
        /// </summary>
        [Output("publish")]
        public Output<bool?> Publish { get; private set; } = null!;

        /// <summary>
        /// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
        /// </summary>
        [Output("qualifiedArn")]
        public Output<string> QualifiedArn { get; private set; } = null!;

        /// <summary>
        /// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Output("qualifiedInvokeArn")]
        public Output<string> QualifiedInvokeArn { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
        /// </summary>
        [Output("replaceSecurityGroupsOnDestroy")]
        public Output<bool?> ReplaceSecurityGroupsOnDestroy { get; private set; } = null!;

        /// <summary>
        /// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replace_security_groups_on_destroy` is `true`.
        /// </summary>
        [Output("replacementSecurityGroupIds")]
        public Output<ImmutableArray<string>> ReplacementSecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
        /// </summary>
        [Output("reservedConcurrentExecutions")]
        public Output<int?> ReservedConcurrentExecutions { get; private set; } = null!;

        /// <summary>
        /// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Identifier of the function's runtime. Required if `package_type` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
        /// </summary>
        [Output("runtime")]
        public Output<string?> Runtime { get; private set; } = null!;

        /// <summary>
        /// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Output("s3Bucket")]
        public Output<string?> S3Bucket { get; private set; } = null!;

        /// <summary>
        /// S3 key of an object containing the function's deployment package. Required if `s3_bucket` is set.
        /// </summary>
        [Output("s3Key")]
        public Output<string?> S3Key { get; private set; } = null!;

        /// <summary>
        /// Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Output("s3ObjectVersion")]
        public Output<string?> S3ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// ARN of the signing job.
        /// </summary>
        [Output("signingJobArn")]
        public Output<string> SigningJobArn { get; private set; } = null!;

        /// <summary>
        /// ARN of the signing profile version.
        /// </summary>
        [Output("signingProfileVersionArn")]
        public Output<string> SigningProfileVersionArn { get; private set; } = null!;

        /// <summary>
        /// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
        /// </summary>
        [Output("skipDestroy")]
        public Output<bool?> SkipDestroy { get; private set; } = null!;

        /// <summary>
        /// Configuration block for snap start settings. See below.
        /// </summary>
        [Output("snapStart")]
        public Output<Outputs.FunctionSnapStart?> SnapStart { get; private set; } = null!;

        /// <summary>
        /// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
        /// </summary>
        [Output("sourceCodeHash")]
        public Output<string> SourceCodeHash { get; private set; } = null!;

        /// <summary>
        /// Size in bytes of the function .zip file.
        /// </summary>
        [Output("sourceCodeSize")]
        public Output<int> SourceCodeSize { get; private set; } = null!;

        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt the function's `.zip` deployment package. Conflicts with `image_uri`.
        /// </summary>
        [Output("sourceKmsKeyArn")]
        public Output<string?> SourceKmsKeyArn { get; private set; } = null!;

        /// <summary>
        /// Key-value map of tags for the Lambda function. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// Configuration block for X-Ray tracing. See below.
        /// </summary>
        [Output("tracingConfig")]
        public Output<Outputs.FunctionTracingConfig> TracingConfig { get; private set; } = null!;

        /// <summary>
        /// Latest published version of your Lambda Function.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Configuration block for VPC. See below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.FunctionVpcConfig?> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/function:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/function:Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new Function(name, id, state, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        [Input("architectures")]
        private InputList<string>? _architectures;

        /// <summary>
        /// Instruction set architecture for your Lambda function. Valid values are `["x86_64"]` and `["arm64"]`. Default is `["x86_64"]`. Removing this attribute, function's architecture stays the same.
        /// </summary>
        public InputList<string> Architectures
        {
            get => _architectures ?? (_architectures = new InputList<string>());
            set => _architectures = value;
        }

        /// <summary>
        /// Path to the function's deployment package within the local filesystem. Conflicts with `image_uri` and `s3_bucket`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Input("code")]
        public Input<Archive>? Code { get; set; }

        /// <summary>
        /// ARN of a code-signing configuration to enable code signing for this function.
        /// </summary>
        [Input("codeSigningConfigArn")]
        public Input<string>? CodeSigningConfigArn { get; set; }

        /// <summary>
        /// Configuration block for dead letter queue. See below.
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.FunctionDeadLetterConfigArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configuration block for environment variables. See below.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.FunctionEnvironmentArgs>? Environment { get; set; }

        /// <summary>
        /// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<Inputs.FunctionEphemeralStorageArgs>? EphemeralStorage { get; set; }

        /// <summary>
        /// Configuration block for EFS file system. See below.
        /// </summary>
        [Input("fileSystemConfig")]
        public Input<Inputs.FunctionFileSystemConfigArgs>? FileSystemConfig { get; set; }

        /// <summary>
        /// Function entry point in your code. Required if `package_type` is `Zip`.
        /// </summary>
        [Input("handler")]
        public Input<string>? Handler { get; set; }

        /// <summary>
        /// Container image configuration values. See below.
        /// </summary>
        [Input("imageConfig")]
        public Input<Inputs.FunctionImageConfigArgs>? ImageConfig { get; set; }

        /// <summary>
        /// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3_bucket`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("layers")]
        private InputList<string>? _layers;

        /// <summary>
        /// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
        /// </summary>
        public InputList<string> Layers
        {
            get => _layers ?? (_layers = new InputList<string>());
            set => _layers = value;
        }

        /// <summary>
        /// Configuration block for advanced logging settings. See below.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.FunctionLoggingConfigArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// Unique name for your Lambda Function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
        /// </summary>
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        /// <summary>
        /// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
        /// </summary>
        [Input("publish")]
        public Input<bool>? Publish { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
        /// </summary>
        [Input("replaceSecurityGroupsOnDestroy")]
        public Input<bool>? ReplaceSecurityGroupsOnDestroy { get; set; }

        [Input("replacementSecurityGroupIds")]
        private InputList<string>? _replacementSecurityGroupIds;

        /// <summary>
        /// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replace_security_groups_on_destroy` is `true`.
        /// </summary>
        public InputList<string> ReplacementSecurityGroupIds
        {
            get => _replacementSecurityGroupIds ?? (_replacementSecurityGroupIds = new InputList<string>());
            set => _replacementSecurityGroupIds = value;
        }

        /// <summary>
        /// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
        /// </summary>
        [Input("reservedConcurrentExecutions")]
        public Input<int>? ReservedConcurrentExecutions { get; set; }

        /// <summary>
        /// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// Identifier of the function's runtime. Required if `package_type` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
        /// </summary>
        [Input("runtime")]
        public InputUnion<string, Pulumi.Aws.Lambda.Runtime>? Runtime { get; set; }

        /// <summary>
        /// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// S3 key of an object containing the function's deployment package. Required if `s3_bucket` is set.
        /// </summary>
        [Input("s3Key")]
        public Input<string>? S3Key { get; set; }

        /// <summary>
        /// Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Input("s3ObjectVersion")]
        public Input<string>? S3ObjectVersion { get; set; }

        /// <summary>
        /// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
        /// </summary>
        [Input("skipDestroy")]
        public Input<bool>? SkipDestroy { get; set; }

        /// <summary>
        /// Configuration block for snap start settings. See below.
        /// </summary>
        [Input("snapStart")]
        public Input<Inputs.FunctionSnapStartArgs>? SnapStart { get; set; }

        /// <summary>
        /// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
        /// </summary>
        [Input("sourceCodeHash")]
        public Input<string>? SourceCodeHash { get; set; }

        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt the function's `.zip` deployment package. Conflicts with `image_uri`.
        /// </summary>
        [Input("sourceKmsKeyArn")]
        public Input<string>? SourceKmsKeyArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of tags for the Lambda function. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Configuration block for X-Ray tracing. See below.
        /// </summary>
        [Input("tracingConfig")]
        public Input<Inputs.FunctionTracingConfigArgs>? TracingConfig { get; set; }

        /// <summary>
        /// Configuration block for VPC. See below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FunctionVpcConfigArgs>? VpcConfig { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }

    public sealed class FunctionState : global::Pulumi.ResourceArgs
    {
        [Input("architectures")]
        private InputList<string>? _architectures;

        /// <summary>
        /// Instruction set architecture for your Lambda function. Valid values are `["x86_64"]` and `["arm64"]`. Default is `["x86_64"]`. Removing this attribute, function's architecture stays the same.
        /// </summary>
        public InputList<string> Architectures
        {
            get => _architectures ?? (_architectures = new InputList<string>());
            set => _architectures = value;
        }

        /// <summary>
        /// ARN identifying your Lambda Function.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Path to the function's deployment package within the local filesystem. Conflicts with `image_uri` and `s3_bucket`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Input("code")]
        public Input<Archive>? Code { get; set; }

        /// <summary>
        /// Base64-encoded representation of raw SHA-256 sum of the zip file.
        /// </summary>
        [Input("codeSha256")]
        public Input<string>? CodeSha256 { get; set; }

        /// <summary>
        /// ARN of a code-signing configuration to enable code signing for this function.
        /// </summary>
        [Input("codeSigningConfigArn")]
        public Input<string>? CodeSigningConfigArn { get; set; }

        /// <summary>
        /// Configuration block for dead letter queue. See below.
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.FunctionDeadLetterConfigGetArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configuration block for environment variables. See below.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.FunctionEnvironmentGetArgs>? Environment { get; set; }

        /// <summary>
        /// Amount of ephemeral storage (`/tmp`) to allocate for the Lambda Function. See below.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<Inputs.FunctionEphemeralStorageGetArgs>? EphemeralStorage { get; set; }

        /// <summary>
        /// Configuration block for EFS file system. See below.
        /// </summary>
        [Input("fileSystemConfig")]
        public Input<Inputs.FunctionFileSystemConfigGetArgs>? FileSystemConfig { get; set; }

        /// <summary>
        /// Function entry point in your code. Required if `package_type` is `Zip`.
        /// </summary>
        [Input("handler")]
        public Input<string>? Handler { get; set; }

        /// <summary>
        /// Container image configuration values. See below.
        /// </summary>
        [Input("imageConfig")]
        public Input<Inputs.FunctionImageConfigGetArgs>? ImageConfig { get; set; }

        /// <summary>
        /// ECR image URI containing the function's deployment package. Conflicts with `filename` and `s3_bucket`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// ARN to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Input("invokeArn")]
        public Input<string>? InvokeArn { get; set; }

        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt environment variables. If not provided when environment variables are in use, AWS Lambda uses a default service key. If provided when environment variables are not in use, the AWS Lambda API does not save this configuration.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        [Input("lastModified")]
        public Input<string>? LastModified { get; set; }

        [Input("layers")]
        private InputList<string>? _layers;

        /// <summary>
        /// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function.
        /// </summary>
        public InputList<string> Layers
        {
            get => _layers ?? (_layers = new InputList<string>());
            set => _layers = value;
        }

        /// <summary>
        /// Configuration block for advanced logging settings. See below.
        /// </summary>
        [Input("loggingConfig")]
        public Input<Inputs.FunctionLoggingConfigGetArgs>? LoggingConfig { get; set; }

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 1 MB increments. Defaults to 128.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// Unique name for your Lambda Function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
        /// </summary>
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        /// <summary>
        /// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
        /// </summary>
        [Input("publish")]
        public Input<bool>? Publish { get; set; }

        /// <summary>
        /// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
        /// </summary>
        [Input("qualifiedArn")]
        public Input<string>? QualifiedArn { get; set; }

        /// <summary>
        /// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Input("qualifiedInvokeArn")]
        public Input<string>? QualifiedInvokeArn { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Whether to replace the security groups on the function's VPC configuration prior to destruction. Default is `false`.
        /// </summary>
        [Input("replaceSecurityGroupsOnDestroy")]
        public Input<bool>? ReplaceSecurityGroupsOnDestroy { get; set; }

        [Input("replacementSecurityGroupIds")]
        private InputList<string>? _replacementSecurityGroupIds;

        /// <summary>
        /// List of security group IDs to assign to the function's VPC configuration prior to destruction. Required if `replace_security_groups_on_destroy` is `true`.
        /// </summary>
        public InputList<string> ReplacementSecurityGroupIds
        {
            get => _replacementSecurityGroupIds ?? (_replacementSecurityGroupIds = new InputList<string>());
            set => _replacementSecurityGroupIds = value;
        }

        /// <summary>
        /// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`.
        /// </summary>
        [Input("reservedConcurrentExecutions")]
        public Input<int>? ReservedConcurrentExecutions { get; set; }

        /// <summary>
        /// ARN of the function's execution role. The role provides the function's identity and access to AWS services and resources.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Identifier of the function's runtime. Required if `package_type` is `Zip`. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
        /// </summary>
        [Input("runtime")]
        public InputUnion<string, Pulumi.Aws.Lambda.Runtime>? Runtime { get; set; }

        /// <summary>
        /// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. One of `filename`, `image_uri`, or `s3_bucket` must be specified.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// S3 key of an object containing the function's deployment package. Required if `s3_bucket` is set.
        /// </summary>
        [Input("s3Key")]
        public Input<string>? S3Key { get; set; }

        /// <summary>
        /// Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Input("s3ObjectVersion")]
        public Input<string>? S3ObjectVersion { get; set; }

        /// <summary>
        /// ARN of the signing job.
        /// </summary>
        [Input("signingJobArn")]
        public Input<string>? SigningJobArn { get; set; }

        /// <summary>
        /// ARN of the signing profile version.
        /// </summary>
        [Input("signingProfileVersionArn")]
        public Input<string>? SigningProfileVersionArn { get; set; }

        /// <summary>
        /// Whether to retain the old version of a previously deployed Lambda Layer. Default is `false`.
        /// </summary>
        [Input("skipDestroy")]
        public Input<bool>? SkipDestroy { get; set; }

        /// <summary>
        /// Configuration block for snap start settings. See below.
        /// </summary>
        [Input("snapStart")]
        public Input<Inputs.FunctionSnapStartGetArgs>? SnapStart { get; set; }

        /// <summary>
        /// Base64-encoded SHA256 hash of the package file. Used to trigger updates when source code changes.
        /// </summary>
        [Input("sourceCodeHash")]
        public Input<string>? SourceCodeHash { get; set; }

        /// <summary>
        /// Size in bytes of the function .zip file.
        /// </summary>
        [Input("sourceCodeSize")]
        public Input<int>? SourceCodeSize { get; set; }

        /// <summary>
        /// ARN of the AWS Key Management Service key used to encrypt the function's `.zip` deployment package. Conflicts with `image_uri`.
        /// </summary>
        [Input("sourceKmsKeyArn")]
        public Input<string>? SourceKmsKeyArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of tags for the Lambda function. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to 3. Valid between 1 and 900.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Configuration block for X-Ray tracing. See below.
        /// </summary>
        [Input("tracingConfig")]
        public Input<Inputs.FunctionTracingConfigGetArgs>? TracingConfig { get; set; }

        /// <summary>
        /// Latest published version of your Lambda Function.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration block for VPC. See below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FunctionVpcConfigGetArgs>? VpcConfig { get; set; }

        public FunctionState()
        {
        }
        public static new FunctionState Empty => new FunctionState();
    }
}
