// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    /// <summary>
    /// Provides a Lambda Function resource. Lambda allows you to trigger execution of code in response to events in AWS, enabling serverless backend solutions. The Lambda Function itself includes source code and runtime configuration.
    /// 
    /// For information about Lambda and how to use it, see [What is AWS Lambda?](https://docs.aws.amazon.com/lambda/latest/dg/welcome.html)
    /// 
    /// &gt; **NOTE:** Due to [AWS Lambda improved VPC networking changes that began deploying in September 2019](https://aws.amazon.com/blogs/compute/announcing-improved-vpc-networking-for-aws-lambda-functions/), EC2 subnets and security groups associated with Lambda Functions can take up to 45 minutes to successfully delete.
    /// 
    /// &gt; To give an external source (like an EventBridge Rule, SNS, or S3) permission to access the Lambda function, use the `aws.lambda.Permission` resource. See [Lambda Permission Model](https://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html) for more details. On the other hand, the `role` argument of this resource is the function's execution role for identity and access to AWS services and resources.
    /// 
    /// ## Example Usage
    /// ### Basic Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var iamForLambda = new Aws.Iam.Role("iamForLambda", new()
    ///     {
    ///         AssumeRolePolicy = @"{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Action"": ""sts:AssumeRole"",
    ///       ""Principal"": {
    ///         ""Service"": ""lambda.amazonaws.com""
    ///       },
    ///       ""Effect"": ""Allow"",
    ///       ""Sid"": """"
    ///     }
    ///   ]
    /// }
    /// ",
    ///     });
    /// 
    ///     var testLambda = new Aws.Lambda.Function("testLambda", new()
    ///     {
    ///         Code = new FileArchive("lambda_function_payload.zip"),
    ///         Role = iamForLambda.Arn,
    ///         Handler = "index.test",
    ///         Runtime = "nodejs16.x",
    ///         Environment = new Aws.Lambda.Inputs.FunctionEnvironmentArgs
    ///         {
    ///             Variables = 
    ///             {
    ///                 { "foo", "bar" },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Lambda Layers
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleLayerVersion = new Aws.Lambda.LayerVersion("exampleLayerVersion");
    /// 
    ///     // ... other configuration ...
    ///     var exampleFunction = new Aws.Lambda.Function("exampleFunction", new()
    ///     {
    ///         Layers = new[]
    ///         {
    ///             exampleLayerVersion.Arn,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Lambda Ephemeral Storage
    /// 
    /// Lambda Function Ephemeral Storage(`/tmp`) allows you to configure the storage upto `10` GB. The default value set to `512` MB.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var iamForLambda = new Aws.Iam.Role("iamForLambda", new()
    ///     {
    ///         AssumeRolePolicy = @"{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Action"": ""sts:AssumeRole"",
    ///       ""Principal"": {
    ///         ""Service"": ""lambda.amazonaws.com""
    ///       },
    ///       ""Effect"": ""Allow"",
    ///       ""Sid"": """"
    ///     }
    ///   ]
    /// }
    /// ",
    ///     });
    /// 
    ///     var testLambda = new Aws.Lambda.Function("testLambda", new()
    ///     {
    ///         Code = new FileArchive("lambda_function_payload.zip"),
    ///         Role = iamForLambda.Arn,
    ///         Handler = "index.test",
    ///         Runtime = "nodejs14.x",
    ///         EphemeralStorage = new Aws.Lambda.Inputs.FunctionEphemeralStorageArgs
    ///         {
    ///             Size = 10240,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Lambda File Systems
    /// 
    /// Lambda File Systems allow you to connect an Amazon Elastic File System (EFS) file system to a Lambda function to share data across function invocations, access existing data including large files, and save function state.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // EFS file system
    ///     var efsForLambda = new Aws.Efs.FileSystem("efsForLambda", new()
    ///     {
    ///         Tags = 
    ///         {
    ///             { "Name", "efs_for_lambda" },
    ///         },
    ///     });
    /// 
    ///     // Mount target connects the file system to the subnet
    ///     var alpha = new Aws.Efs.MountTarget("alpha", new()
    ///     {
    ///         FileSystemId = efsForLambda.Id,
    ///         SubnetId = aws_subnet.Subnet_for_lambda.Id,
    ///         SecurityGroups = new[]
    ///         {
    ///             aws_security_group.Sg_for_lambda.Id,
    ///         },
    ///     });
    /// 
    ///     // EFS access point used by lambda file system
    ///     var accessPointForLambda = new Aws.Efs.AccessPoint("accessPointForLambda", new()
    ///     {
    ///         FileSystemId = efsForLambda.Id,
    ///         RootDirectory = new Aws.Efs.Inputs.AccessPointRootDirectoryArgs
    ///         {
    ///             Path = "/lambda",
    ///             CreationInfo = new Aws.Efs.Inputs.AccessPointRootDirectoryCreationInfoArgs
    ///             {
    ///                 OwnerGid = 1000,
    ///                 OwnerUid = 1000,
    ///                 Permissions = "777",
    ///             },
    ///         },
    ///         PosixUser = new Aws.Efs.Inputs.AccessPointPosixUserArgs
    ///         {
    ///             Gid = 1000,
    ///             Uid = 1000,
    ///         },
    ///     });
    /// 
    ///     // A lambda function connected to an EFS file system
    ///     // ... other configuration ...
    ///     var example = new Aws.Lambda.Function("example", new()
    ///     {
    ///         FileSystemConfig = new Aws.Lambda.Inputs.FunctionFileSystemConfigArgs
    ///         {
    ///             Arn = accessPointForLambda.Arn,
    ///             LocalMountPath = "/mnt/efs",
    ///         },
    ///         VpcConfig = new Aws.Lambda.Inputs.FunctionVpcConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 aws_subnet.Subnet_for_lambda.Id,
    ///             },
    ///             SecurityGroupIds = new[]
    ///             {
    ///                 aws_security_group.Sg_for_lambda.Id,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             alpha,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Lambda retries
    /// 
    /// Lambda Functions allow you to configure error handling for asynchronous invocation. The settings that it supports are `Maximum age of event` and `Retry attempts` as stated in [Lambda documentation for Configuring error handling for asynchronous invocation](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-errors). To configure these settings, refer to the aws.lambda.FunctionEventInvokeConfig resource.
    /// ## CloudWatch Logging and Permissions
    /// 
    /// For more information about CloudWatch Logs for Lambda, see the [Lambda User Guide](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-functions-logs.html).
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     var lambdaFunctionName = config.Get("lambdaFunctionName") ?? "lambda_function_name";
    ///     // This is to optionally manage the CloudWatch Log Group for the Lambda Function.
    ///     // If skipping this resource configuration, also add "logs:CreateLogGroup" to the IAM policy below.
    ///     var example = new Aws.CloudWatch.LogGroup("example", new()
    ///     {
    ///         RetentionInDays = 14,
    ///     });
    /// 
    ///     // See also the following AWS managed policy: AWSLambdaBasicExecutionRole
    ///     var lambdaLogging = new Aws.Iam.Policy("lambdaLogging", new()
    ///     {
    ///         Path = "/",
    ///         Description = "IAM policy for logging from a lambda",
    ///         PolicyDocument = @"{
    ///   ""Version"": ""2012-10-17"",
    ///   ""Statement"": [
    ///     {
    ///       ""Action"": [
    ///         ""logs:CreateLogGroup"",
    ///         ""logs:CreateLogStream"",
    ///         ""logs:PutLogEvents""
    ///       ],
    ///       ""Resource"": ""arn:aws:logs:*:*:*"",
    ///       ""Effect"": ""Allow""
    ///     }
    ///   ]
    /// }
    /// ",
    ///     });
    /// 
    ///     var lambdaLogs = new Aws.Iam.RolePolicyAttachment("lambdaLogs", new()
    ///     {
    ///         Role = aws_iam_role.Iam_for_lambda.Name,
    ///         PolicyArn = lambdaLogging.Arn,
    ///     });
    /// 
    ///     var testLambda = new Aws.Lambda.Function("testLambda", new()
    ///     {
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn = new[]
    ///         {
    ///             lambdaLogs,
    ///             example,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Specifying the Deployment Package
    /// 
    /// AWS Lambda expects source code to be provided as a deployment package whose structure varies depending on which `runtime` is in use. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for the valid values of `runtime`. The expected structure of the deployment package can be found in [the AWS Lambda documentation for each runtime](https://docs.aws.amazon.com/lambda/latest/dg/deployment-package-v2.html).
    /// 
    /// Once you have created your deployment package you can specify it either directly as a local file (using the `filename` argument) or indirectly via Amazon S3 (using the `s3_bucket`, `s3_key` and `s3_object_version` arguments). When providing the deployment package via S3 it may be useful to use the `aws.s3.BucketObjectv2` resource to upload it.
    /// 
    /// For larger deployment packages it is recommended by Amazon to upload via S3, since the S3 API has better support for uploading large files efficiently.
    /// 
    /// ## Import
    /// 
    /// Lambda Functions can be imported using the `function_name`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:lambda/function:Function test_lambda my_test_lambda_function
    /// ```
    /// </summary>
    [AwsResourceType("aws:lambda/function:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instruction set architecture for your Lambda function. Valid values are `["x86_64"]` and `["arm64"]`. Default is `["x86_64"]`. Removing this attribute, function's architecture stay the same.
        /// </summary>
        [Output("architectures")]
        public Output<ImmutableArray<string>> Architectures { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Path to the function's deployment package within the local filesystem. Conflicts with `image_uri`, `s3_bucket`, `s3_key`, and `s3_object_version`.
        /// </summary>
        [Output("code")]
        public Output<Archive?> Code { get; private set; } = null!;

        /// <summary>
        /// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
        /// </summary>
        [Output("codeSigningConfigArn")]
        public Output<string?> CodeSigningConfigArn { get; private set; } = null!;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Output("deadLetterConfig")]
        public Output<Outputs.FunctionDeadLetterConfig?> DeadLetterConfig { get; private set; } = null!;

        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Output("environment")]
        public Output<Outputs.FunctionEnvironment?> Environment { get; private set; } = null!;

        /// <summary>
        /// The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.
        /// </summary>
        [Output("ephemeralStorage")]
        public Output<Outputs.FunctionEphemeralStorage> EphemeralStorage { get; private set; } = null!;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Output("fileSystemConfig")]
        public Output<Outputs.FunctionFileSystemConfig?> FileSystemConfig { get; private set; } = null!;

        /// <summary>
        /// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
        /// </summary>
        [Output("handler")]
        public Output<string?> Handler { get; private set; } = null!;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Output("imageConfig")]
        public Output<Outputs.FunctionImageConfig?> ImageConfig { get; private set; } = null!;

        /// <summary>
        /// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3_bucket`, `s3_key`, and `s3_object_version`.
        /// </summary>
        [Output("imageUri")]
        public Output<string?> ImageUri { get; private set; } = null!;

        /// <summary>
        /// ARN to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Output("invokeArn")]
        public Output<string> InvokeArn { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
        /// </summary>
        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
        /// </summary>
        [Output("layers")]
        public Output<ImmutableArray<string>> Layers { get; private set; } = null!;

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
        /// </summary>
        [Output("memorySize")]
        public Output<int?> MemorySize { get; private set; } = null!;

        /// <summary>
        /// Unique name for your Lambda Function.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
        /// </summary>
        [Output("packageType")]
        public Output<string?> PackageType { get; private set; } = null!;

        /// <summary>
        /// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
        /// </summary>
        [Output("publish")]
        public Output<bool?> Publish { get; private set; } = null!;

        /// <summary>
        /// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
        /// </summary>
        [Output("qualifiedArn")]
        public Output<string> QualifiedArn { get; private set; } = null!;

        /// <summary>
        /// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Output("qualifiedInvokeArn")]
        public Output<string> QualifiedInvokeArn { get; private set; } = null!;

        /// <summary>
        /// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
        /// </summary>
        [Output("reservedConcurrentExecutions")]
        public Output<int?> ReservedConcurrentExecutions { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
        /// </summary>
        [Output("role")]
        public Output<string> Role { get; private set; } = null!;

        /// <summary>
        /// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
        /// </summary>
        [Output("runtime")]
        public Output<string?> Runtime { get; private set; } = null!;

        /// <summary>
        /// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
        /// </summary>
        [Output("s3Bucket")]
        public Output<string?> S3Bucket { get; private set; } = null!;

        /// <summary>
        /// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Output("s3Key")]
        public Output<string?> S3Key { get; private set; } = null!;

        /// <summary>
        /// Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Output("s3ObjectVersion")]
        public Output<string?> S3ObjectVersion { get; private set; } = null!;

        /// <summary>
        /// ARN of the signing job.
        /// </summary>
        [Output("signingJobArn")]
        public Output<string> SigningJobArn { get; private set; } = null!;

        /// <summary>
        /// ARN of the signing profile version.
        /// </summary>
        [Output("signingProfileVersionArn")]
        public Output<string> SigningProfileVersionArn { get; private set; } = null!;

        /// <summary>
        /// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`.
        /// </summary>
        [Output("sourceCodeHash")]
        public Output<string> SourceCodeHash { get; private set; } = null!;

        /// <summary>
        /// Size in bytes of the function .zip file.
        /// </summary>
        [Output("sourceCodeSize")]
        public Output<int> SourceCodeSize { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
        /// </summary>
        [Output("timeout")]
        public Output<int?> Timeout { get; private set; } = null!;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Output("tracingConfig")]
        public Output<Outputs.FunctionTracingConfig> TracingConfig { get; private set; } = null!;

        /// <summary>
        /// Latest published version of your Lambda Function.
        /// * `vpc_config.vpc_id` - ID of the VPC.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.FunctionVpcConfig?> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/function:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/function:Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new Function(name, id, state, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        [Input("architectures")]
        private InputList<string>? _architectures;

        /// <summary>
        /// Instruction set architecture for your Lambda function. Valid values are `["x86_64"]` and `["arm64"]`. Default is `["x86_64"]`. Removing this attribute, function's architecture stay the same.
        /// </summary>
        public InputList<string> Architectures
        {
            get => _architectures ?? (_architectures = new InputList<string>());
            set => _architectures = value;
        }

        /// <summary>
        /// Path to the function's deployment package within the local filesystem. Conflicts with `image_uri`, `s3_bucket`, `s3_key`, and `s3_object_version`.
        /// </summary>
        [Input("code")]
        public Input<Archive>? Code { get; set; }

        /// <summary>
        /// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
        /// </summary>
        [Input("codeSigningConfigArn")]
        public Input<string>? CodeSigningConfigArn { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.FunctionDeadLetterConfigArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.FunctionEnvironmentArgs>? Environment { get; set; }

        /// <summary>
        /// The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<Inputs.FunctionEphemeralStorageArgs>? EphemeralStorage { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("fileSystemConfig")]
        public Input<Inputs.FunctionFileSystemConfigArgs>? FileSystemConfig { get; set; }

        /// <summary>
        /// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
        /// </summary>
        [Input("handler")]
        public Input<string>? Handler { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("imageConfig")]
        public Input<Inputs.FunctionImageConfigArgs>? ImageConfig { get; set; }

        /// <summary>
        /// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3_bucket`, `s3_key`, and `s3_object_version`.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("layers")]
        private InputList<string>? _layers;

        /// <summary>
        /// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
        /// </summary>
        public InputList<string> Layers
        {
            get => _layers ?? (_layers = new InputList<string>());
            set => _layers = value;
        }

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// Unique name for your Lambda Function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
        /// </summary>
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        /// <summary>
        /// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
        /// </summary>
        [Input("publish")]
        public Input<bool>? Publish { get; set; }

        /// <summary>
        /// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
        /// </summary>
        [Input("reservedConcurrentExecutions")]
        public Input<int>? ReservedConcurrentExecutions { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
        /// </summary>
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        /// <summary>
        /// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
        /// </summary>
        [Input("runtime")]
        public InputUnion<string, Pulumi.Aws.Lambda.Runtime>? Runtime { get; set; }

        /// <summary>
        /// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Input("s3Key")]
        public Input<string>? S3Key { get; set; }

        /// <summary>
        /// Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Input("s3ObjectVersion")]
        public Input<string>? S3ObjectVersion { get; set; }

        /// <summary>
        /// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`.
        /// </summary>
        [Input("sourceCodeHash")]
        public Input<string>? SourceCodeHash { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("tracingConfig")]
        public Input<Inputs.FunctionTracingConfigArgs>? TracingConfig { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FunctionVpcConfigArgs>? VpcConfig { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }

    public sealed class FunctionState : global::Pulumi.ResourceArgs
    {
        [Input("architectures")]
        private InputList<string>? _architectures;

        /// <summary>
        /// Instruction set architecture for your Lambda function. Valid values are `["x86_64"]` and `["arm64"]`. Default is `["x86_64"]`. Removing this attribute, function's architecture stay the same.
        /// </summary>
        public InputList<string> Architectures
        {
            get => _architectures ?? (_architectures = new InputList<string>());
            set => _architectures = value;
        }

        /// <summary>
        /// Amazon Resource Name (ARN) of the Amazon EFS Access Point that provides access to the file system.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Path to the function's deployment package within the local filesystem. Conflicts with `image_uri`, `s3_bucket`, `s3_key`, and `s3_object_version`.
        /// </summary>
        [Input("code")]
        public Input<Archive>? Code { get; set; }

        /// <summary>
        /// To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
        /// </summary>
        [Input("codeSigningConfigArn")]
        public Input<string>? CodeSigningConfigArn { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("deadLetterConfig")]
        public Input<Inputs.FunctionDeadLetterConfigGetArgs>? DeadLetterConfig { get; set; }

        /// <summary>
        /// Description of what your Lambda Function does.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("environment")]
        public Input<Inputs.FunctionEnvironmentGetArgs>? Environment { get; set; }

        /// <summary>
        /// The amount of Ephemeral storage(`/tmp`) to allocate for the Lambda Function in MB. This parameter is used to expand the total amount of Ephemeral storage available, beyond the default amount of `512`MB. Detailed below.
        /// </summary>
        [Input("ephemeralStorage")]
        public Input<Inputs.FunctionEphemeralStorageGetArgs>? EphemeralStorage { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("fileSystemConfig")]
        public Input<Inputs.FunctionFileSystemConfigGetArgs>? FileSystemConfig { get; set; }

        /// <summary>
        /// Function [entrypoint](https://docs.aws.amazon.com/lambda/latest/dg/walkthrough-custom-events-create-test-function.html) in your code.
        /// </summary>
        [Input("handler")]
        public Input<string>? Handler { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("imageConfig")]
        public Input<Inputs.FunctionImageConfigGetArgs>? ImageConfig { get; set; }

        /// <summary>
        /// ECR image URI containing the function's deployment package. Conflicts with `filename`, `s3_bucket`, `s3_key`, and `s3_object_version`.
        /// </summary>
        [Input("imageUri")]
        public Input<string>? ImageUri { get; set; }

        /// <summary>
        /// ARN to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Input("invokeArn")]
        public Input<string>? InvokeArn { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the AWS Key Management Service (KMS) key that is used to encrypt environment variables. If this configuration is not provided when environment variables are in use, AWS Lambda uses a default service key. If this configuration is provided when environment variables are not in use, the AWS Lambda API does not save this configuration and the provider will show a perpetual difference of adding the key. To fix the perpetual difference, remove this configuration.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        /// <summary>
        /// Date this resource was last modified.
        /// </summary>
        [Input("lastModified")]
        public Input<string>? LastModified { get; set; }

        [Input("layers")]
        private InputList<string>? _layers;

        /// <summary>
        /// List of Lambda Layer Version ARNs (maximum of 5) to attach to your Lambda Function. See [Lambda Layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html)
        /// </summary>
        public InputList<string> Layers
        {
            get => _layers ?? (_layers = new InputList<string>());
            set => _layers = value;
        }

        /// <summary>
        /// Amount of memory in MB your Lambda Function can use at runtime. Defaults to `128`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html)
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// Unique name for your Lambda Function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Lambda deployment package type. Valid values are `Zip` and `Image`. Defaults to `Zip`.
        /// </summary>
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        /// <summary>
        /// Whether to publish creation/change as new Lambda Function Version. Defaults to `false`.
        /// </summary>
        [Input("publish")]
        public Input<bool>? Publish { get; set; }

        /// <summary>
        /// ARN identifying your Lambda Function Version (if versioning is enabled via `publish = true`).
        /// </summary>
        [Input("qualifiedArn")]
        public Input<string>? QualifiedArn { get; set; }

        /// <summary>
        /// Qualified ARN (ARN with lambda version number) to be used for invoking Lambda Function from API Gateway - to be used in `aws.apigateway.Integration`'s `uri`.
        /// </summary>
        [Input("qualifiedInvokeArn")]
        public Input<string>? QualifiedInvokeArn { get; set; }

        /// <summary>
        /// Amount of reserved concurrent executions for this lambda function. A value of `0` disables lambda from being triggered and `-1` removes any concurrency limitations. Defaults to Unreserved Concurrency Limits `-1`. See [Managing Concurrency](https://docs.aws.amazon.com/lambda/latest/dg/concurrent-executions.html)
        /// </summary>
        [Input("reservedConcurrentExecutions")]
        public Input<int>? ReservedConcurrentExecutions { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN) of the function's execution role. The role provides the function's identity and access to AWS services and resources.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Identifier of the function's runtime. See [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_CreateFunction.html#SSS-CreateFunction-request-Runtime) for valid values.
        /// </summary>
        [Input("runtime")]
        public InputUnion<string, Pulumi.Aws.Lambda.Runtime>? Runtime { get; set; }

        /// <summary>
        /// S3 bucket location containing the function's deployment package. Conflicts with `filename` and `image_uri`. This bucket must reside in the same AWS region where you are creating the Lambda function.
        /// </summary>
        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        /// <summary>
        /// S3 key of an object containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Input("s3Key")]
        public Input<string>? S3Key { get; set; }

        /// <summary>
        /// Object version containing the function's deployment package. Conflicts with `filename` and `image_uri`.
        /// </summary>
        [Input("s3ObjectVersion")]
        public Input<string>? S3ObjectVersion { get; set; }

        /// <summary>
        /// ARN of the signing job.
        /// </summary>
        [Input("signingJobArn")]
        public Input<string>? SigningJobArn { get; set; }

        /// <summary>
        /// ARN of the signing profile version.
        /// </summary>
        [Input("signingProfileVersionArn")]
        public Input<string>? SigningProfileVersionArn { get; set; }

        /// <summary>
        /// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the package file specified with either `filename` or `s3_key`.
        /// </summary>
        [Input("sourceCodeHash")]
        public Input<string>? SourceCodeHash { get; set; }

        /// <summary>
        /// Size in bytes of the function .zip file.
        /// </summary>
        [Input("sourceCodeSize")]
        public Input<int>? SourceCodeSize { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the object. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Amount of time your Lambda Function has to run in seconds. Defaults to `3`. See [Limits](https://docs.aws.amazon.com/lambda/latest/dg/limits.html).
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("tracingConfig")]
        public Input<Inputs.FunctionTracingConfigGetArgs>? TracingConfig { get; set; }

        /// <summary>
        /// Latest published version of your Lambda Function.
        /// * `vpc_config.vpc_id` - ID of the VPC.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FunctionVpcConfigGetArgs>? VpcConfig { get; set; }

        public FunctionState()
        {
        }
        public static new FunctionState Empty => new FunctionState();
    }
}
