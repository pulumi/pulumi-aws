// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lambda
{
    [AwsResourceType("aws:lambda/layerVersion:LayerVersion")]
    public partial class LayerVersion : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("code")]
        public Output<Archive?> Code { get; private set; } = null!;

        [Output("compatibleArchitectures")]
        public Output<ImmutableArray<string>> CompatibleArchitectures { get; private set; } = null!;

        [Output("compatibleRuntimes")]
        public Output<ImmutableArray<string>> CompatibleRuntimes { get; private set; } = null!;

        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("layerArn")]
        public Output<string> LayerArn { get; private set; } = null!;

        [Output("layerName")]
        public Output<string> LayerName { get; private set; } = null!;

        [Output("licenseInfo")]
        public Output<string?> LicenseInfo { get; private set; } = null!;

        [Output("s3Bucket")]
        public Output<string?> S3Bucket { get; private set; } = null!;

        [Output("s3Key")]
        public Output<string?> S3Key { get; private set; } = null!;

        [Output("s3ObjectVersion")]
        public Output<string?> S3ObjectVersion { get; private set; } = null!;

        [Output("signingJobArn")]
        public Output<string> SigningJobArn { get; private set; } = null!;

        [Output("signingProfileVersionArn")]
        public Output<string> SigningProfileVersionArn { get; private set; } = null!;

        [Output("skipDestroy")]
        public Output<bool?> SkipDestroy { get; private set; } = null!;

        [Output("sourceCodeHash")]
        public Output<string> SourceCodeHash { get; private set; } = null!;

        [Output("sourceCodeSize")]
        public Output<int> SourceCodeSize { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a LayerVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LayerVersion(string name, LayerVersionArgs args, CustomResourceOptions? options = null)
            : base("aws:lambda/layerVersion:LayerVersion", name, args ?? new LayerVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LayerVersion(string name, Input<string> id, LayerVersionState? state = null, CustomResourceOptions? options = null)
            : base("aws:lambda/layerVersion:LayerVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LayerVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LayerVersion Get(string name, Input<string> id, LayerVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new LayerVersion(name, id, state, options);
        }
    }

    public sealed class LayerVersionArgs : global::Pulumi.ResourceArgs
    {
        [Input("code")]
        public Input<Archive>? Code { get; set; }

        [Input("compatibleArchitectures")]
        private InputList<string>? _compatibleArchitectures;
        public InputList<string> CompatibleArchitectures
        {
            get => _compatibleArchitectures ?? (_compatibleArchitectures = new InputList<string>());
            set => _compatibleArchitectures = value;
        }

        [Input("compatibleRuntimes")]
        private InputList<string>? _compatibleRuntimes;
        public InputList<string> CompatibleRuntimes
        {
            get => _compatibleRuntimes ?? (_compatibleRuntimes = new InputList<string>());
            set => _compatibleRuntimes = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("layerName", required: true)]
        public Input<string> LayerName { get; set; } = null!;

        [Input("licenseInfo")]
        public Input<string>? LicenseInfo { get; set; }

        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        [Input("s3Key")]
        public Input<string>? S3Key { get; set; }

        [Input("s3ObjectVersion")]
        public Input<string>? S3ObjectVersion { get; set; }

        [Input("skipDestroy")]
        public Input<bool>? SkipDestroy { get; set; }

        [Input("sourceCodeHash")]
        public Input<string>? SourceCodeHash { get; set; }

        public LayerVersionArgs()
        {
        }
        public static new LayerVersionArgs Empty => new LayerVersionArgs();
    }

    public sealed class LayerVersionState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("code")]
        public Input<Archive>? Code { get; set; }

        [Input("compatibleArchitectures")]
        private InputList<string>? _compatibleArchitectures;
        public InputList<string> CompatibleArchitectures
        {
            get => _compatibleArchitectures ?? (_compatibleArchitectures = new InputList<string>());
            set => _compatibleArchitectures = value;
        }

        [Input("compatibleRuntimes")]
        private InputList<string>? _compatibleRuntimes;
        public InputList<string> CompatibleRuntimes
        {
            get => _compatibleRuntimes ?? (_compatibleRuntimes = new InputList<string>());
            set => _compatibleRuntimes = value;
        }

        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("layerArn")]
        public Input<string>? LayerArn { get; set; }

        [Input("layerName")]
        public Input<string>? LayerName { get; set; }

        [Input("licenseInfo")]
        public Input<string>? LicenseInfo { get; set; }

        [Input("s3Bucket")]
        public Input<string>? S3Bucket { get; set; }

        [Input("s3Key")]
        public Input<string>? S3Key { get; set; }

        [Input("s3ObjectVersion")]
        public Input<string>? S3ObjectVersion { get; set; }

        [Input("signingJobArn")]
        public Input<string>? SigningJobArn { get; set; }

        [Input("signingProfileVersionArn")]
        public Input<string>? SigningProfileVersionArn { get; set; }

        [Input("skipDestroy")]
        public Input<bool>? SkipDestroy { get; set; }

        [Input("sourceCodeHash")]
        public Input<string>? SourceCodeHash { get; set; }

        [Input("sourceCodeSize")]
        public Input<int>? SourceCodeSize { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public LayerVersionState()
        {
        }
        public static new LayerVersionState Empty => new LayerVersionState();
    }
}
