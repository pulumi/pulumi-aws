// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    public static class GetInstance
    {
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("aws:rds/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("aws:rds/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("dbInstanceIdentifier", required: true)]
        public string DbInstanceIdentifier { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("dbInstanceIdentifier", required: true)]
        public Input<string> DbInstanceIdentifier { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string Address;
        public readonly int AllocatedStorage;
        public readonly bool AutoMinorVersionUpgrade;
        public readonly string AvailabilityZone;
        public readonly int BackupRetentionPeriod;
        public readonly string CaCertIdentifier;
        public readonly string DbClusterIdentifier;
        public readonly string DbInstanceArn;
        public readonly string DbInstanceClass;
        public readonly string DbInstanceIdentifier;
        public readonly int DbInstancePort;
        public readonly string DbName;
        public readonly ImmutableArray<string> DbParameterGroups;
        public readonly ImmutableArray<string> DbSecurityGroups;
        public readonly string DbSubnetGroup;
        public readonly ImmutableArray<string> EnabledCloudwatchLogsExports;
        public readonly string Endpoint;
        public readonly string Engine;
        public readonly string EngineVersion;
        public readonly string HostedZoneId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int Iops;
        public readonly string KmsKeyId;
        public readonly string LicenseModel;
        public readonly string MasterUsername;
        public readonly int MonitoringInterval;
        public readonly string MonitoringRoleArn;
        public readonly bool MultiAz;
        public readonly string NetworkType;
        public readonly ImmutableArray<string> OptionGroupMemberships;
        public readonly int Port;
        public readonly string PreferredBackupWindow;
        public readonly string PreferredMaintenanceWindow;
        public readonly bool PubliclyAccessible;
        public readonly string ReplicateSourceDb;
        public readonly string ResourceId;
        public readonly bool StorageEncrypted;
        public readonly int StorageThroughput;
        public readonly string StorageType;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Timezone;
        public readonly ImmutableArray<string> VpcSecurityGroups;

        [OutputConstructor]
        private GetInstanceResult(
            string address,

            int allocatedStorage,

            bool autoMinorVersionUpgrade,

            string availabilityZone,

            int backupRetentionPeriod,

            string caCertIdentifier,

            string dbClusterIdentifier,

            string dbInstanceArn,

            string dbInstanceClass,

            string dbInstanceIdentifier,

            int dbInstancePort,

            string dbName,

            ImmutableArray<string> dbParameterGroups,

            ImmutableArray<string> dbSecurityGroups,

            string dbSubnetGroup,

            ImmutableArray<string> enabledCloudwatchLogsExports,

            string endpoint,

            string engine,

            string engineVersion,

            string hostedZoneId,

            string id,

            int iops,

            string kmsKeyId,

            string licenseModel,

            string masterUsername,

            int monitoringInterval,

            string monitoringRoleArn,

            bool multiAz,

            string networkType,

            ImmutableArray<string> optionGroupMemberships,

            int port,

            string preferredBackupWindow,

            string preferredMaintenanceWindow,

            bool publiclyAccessible,

            string replicateSourceDb,

            string resourceId,

            bool storageEncrypted,

            int storageThroughput,

            string storageType,

            ImmutableDictionary<string, string> tags,

            string timezone,

            ImmutableArray<string> vpcSecurityGroups)
        {
            Address = address;
            AllocatedStorage = allocatedStorage;
            AutoMinorVersionUpgrade = autoMinorVersionUpgrade;
            AvailabilityZone = availabilityZone;
            BackupRetentionPeriod = backupRetentionPeriod;
            CaCertIdentifier = caCertIdentifier;
            DbClusterIdentifier = dbClusterIdentifier;
            DbInstanceArn = dbInstanceArn;
            DbInstanceClass = dbInstanceClass;
            DbInstanceIdentifier = dbInstanceIdentifier;
            DbInstancePort = dbInstancePort;
            DbName = dbName;
            DbParameterGroups = dbParameterGroups;
            DbSecurityGroups = dbSecurityGroups;
            DbSubnetGroup = dbSubnetGroup;
            EnabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            Endpoint = endpoint;
            Engine = engine;
            EngineVersion = engineVersion;
            HostedZoneId = hostedZoneId;
            Id = id;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            LicenseModel = licenseModel;
            MasterUsername = masterUsername;
            MonitoringInterval = monitoringInterval;
            MonitoringRoleArn = monitoringRoleArn;
            MultiAz = multiAz;
            NetworkType = networkType;
            OptionGroupMemberships = optionGroupMemberships;
            Port = port;
            PreferredBackupWindow = preferredBackupWindow;
            PreferredMaintenanceWindow = preferredMaintenanceWindow;
            PubliclyAccessible = publiclyAccessible;
            ReplicateSourceDb = replicateSourceDb;
            ResourceId = resourceId;
            StorageEncrypted = storageEncrypted;
            StorageThroughput = storageThroughput;
            StorageType = storageType;
            Tags = tags;
            Timezone = timezone;
            VpcSecurityGroups = vpcSecurityGroups;
        }
    }
}
