// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    public static class GetInstance
    {
        /// <summary>
        /// Use this data source to get information about an RDS instance
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var database = Aws.Rds.GetInstance.Invoke(new()
        ///     {
        ///         DbInstanceIdentifier = "my-test-database",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("aws:rds/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about an RDS instance
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var database = Aws.Rds.GetInstance.Invoke(new()
        ///     {
        ///         DbInstanceIdentifier = "my-test-database",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("aws:rds/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the RDS instance.
        /// </summary>
        [Input("dbInstanceIdentifier")]
        public string? DbInstanceIdentifier { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired instance.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the RDS instance.
        /// </summary>
        [Input("dbInstanceIdentifier")]
        public Input<string>? DbInstanceIdentifier { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired instance.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// Hostname of the RDS instance. See also `endpoint` and `port`.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Allocated storage size specified in gigabytes.
        /// </summary>
        public readonly int AllocatedStorage;
        /// <summary>
        /// Indicates that minor version patches are applied automatically.
        /// </summary>
        public readonly bool AutoMinorVersionUpgrade;
        /// <summary>
        /// Name of the Availability Zone the DB instance is located in.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// Specifies the number of days for which automatic DB snapshots are retained.
        /// </summary>
        public readonly int BackupRetentionPeriod;
        /// <summary>
        /// Identifier of the CA certificate for the DB instance.
        /// </summary>
        public readonly string CaCertIdentifier;
        /// <summary>
        /// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
        /// </summary>
        public readonly string DbClusterIdentifier;
        /// <summary>
        /// ARN for the DB instance.
        /// </summary>
        public readonly string DbInstanceArn;
        /// <summary>
        /// Contains the name of the compute and memory capacity class of the DB instance.
        /// </summary>
        public readonly string DbInstanceClass;
        public readonly string DbInstanceIdentifier;
        /// <summary>
        /// Port that the DB instance listens on.
        /// </summary>
        public readonly int DbInstancePort;
        /// <summary>
        /// Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.
        /// </summary>
        public readonly string DbName;
        /// <summary>
        /// Provides the list of DB parameter groups applied to this DB instance.
        /// </summary>
        public readonly ImmutableArray<string> DbParameterGroups;
        /// <summary>
        /// Name of the subnet group associated with the DB instance.
        /// </summary>
        public readonly string DbSubnetGroup;
        /// <summary>
        /// List of log types to export to cloudwatch.
        /// </summary>
        public readonly ImmutableArray<string> EnabledCloudwatchLogsExports;
        /// <summary>
        /// Connection endpoint in `address:port` format.
        /// </summary>
        public readonly string Endpoint;
        /// <summary>
        /// Provides the name of the database engine to be used for this DB instance.
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// Database engine version.
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// Canonical hosted zone ID of the DB instance (to be used in a Route 53 Alias record).
        /// </summary>
        public readonly string HostedZoneId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Provisioned IOPS (I/O operations per second) value.
        /// </summary>
        public readonly int Iops;
        /// <summary>
        /// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// License model information for this DB instance.
        /// </summary>
        public readonly string LicenseModel;
        /// <summary>
        /// Provides the master user secret. Only available when `manage_master_user_password` is set to true. Documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceMasterUserSecretResult> MasterUserSecrets;
        /// <summary>
        /// Contains the master username for the DB instance.
        /// </summary>
        public readonly string MasterUsername;
        /// <summary>
        /// The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        /// </summary>
        public readonly int MaxAllocatedStorage;
        /// <summary>
        /// Interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
        /// </summary>
        public readonly int MonitoringInterval;
        /// <summary>
        /// ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to CloudWatch Logs.
        /// </summary>
        public readonly string MonitoringRoleArn;
        /// <summary>
        /// If the DB instance is a Multi-AZ deployment.
        /// </summary>
        public readonly bool MultiAz;
        /// <summary>
        /// Network type of the DB instance.
        /// </summary>
        public readonly string NetworkType;
        /// <summary>
        /// Provides the list of option group memberships for this DB instance.
        /// </summary>
        public readonly ImmutableArray<string> OptionGroupMemberships;
        /// <summary>
        /// Database endpoint port, primarily used by an Aurora DB cluster. For a conventional RDS DB instance, the `db_instance_port` is typically the preferred choice.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Specifies the daily time range during which automated backups are created.
        /// </summary>
        public readonly string PreferredBackupWindow;
        /// <summary>
        /// Specifies the weekly time range during which system maintenance can occur in UTC.
        /// </summary>
        public readonly string PreferredMaintenanceWindow;
        /// <summary>
        /// Accessibility options for the DB instance.
        /// </summary>
        public readonly bool PubliclyAccessible;
        /// <summary>
        /// Identifier of the source DB that this is a replica of.
        /// </summary>
        public readonly string ReplicateSourceDb;
        /// <summary>
        /// RDS Resource ID of this instance.
        /// </summary>
        public readonly string ResourceId;
        /// <summary>
        /// Whether the DB instance is encrypted.
        /// </summary>
        public readonly bool StorageEncrypted;
        /// <summary>
        /// Storage throughput value for the DB instance.
        /// </summary>
        public readonly int StorageThroughput;
        /// <summary>
        /// Storage type associated with DB instance.
        /// </summary>
        public readonly string StorageType;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Time zone of the DB instance.
        /// </summary>
        public readonly string Timezone;
        /// <summary>
        /// Provides a list of VPC security group elements that the DB instance belongs to.
        /// </summary>
        public readonly ImmutableArray<string> VpcSecurityGroups;

        [OutputConstructor]
        private GetInstanceResult(
            string address,

            int allocatedStorage,

            bool autoMinorVersionUpgrade,

            string availabilityZone,

            int backupRetentionPeriod,

            string caCertIdentifier,

            string dbClusterIdentifier,

            string dbInstanceArn,

            string dbInstanceClass,

            string dbInstanceIdentifier,

            int dbInstancePort,

            string dbName,

            ImmutableArray<string> dbParameterGroups,

            string dbSubnetGroup,

            ImmutableArray<string> enabledCloudwatchLogsExports,

            string endpoint,

            string engine,

            string engineVersion,

            string hostedZoneId,

            string id,

            int iops,

            string kmsKeyId,

            string licenseModel,

            ImmutableArray<Outputs.GetInstanceMasterUserSecretResult> masterUserSecrets,

            string masterUsername,

            int maxAllocatedStorage,

            int monitoringInterval,

            string monitoringRoleArn,

            bool multiAz,

            string networkType,

            ImmutableArray<string> optionGroupMemberships,

            int port,

            string preferredBackupWindow,

            string preferredMaintenanceWindow,

            bool publiclyAccessible,

            string replicateSourceDb,

            string resourceId,

            bool storageEncrypted,

            int storageThroughput,

            string storageType,

            ImmutableDictionary<string, string> tags,

            string timezone,

            ImmutableArray<string> vpcSecurityGroups)
        {
            Address = address;
            AllocatedStorage = allocatedStorage;
            AutoMinorVersionUpgrade = autoMinorVersionUpgrade;
            AvailabilityZone = availabilityZone;
            BackupRetentionPeriod = backupRetentionPeriod;
            CaCertIdentifier = caCertIdentifier;
            DbClusterIdentifier = dbClusterIdentifier;
            DbInstanceArn = dbInstanceArn;
            DbInstanceClass = dbInstanceClass;
            DbInstanceIdentifier = dbInstanceIdentifier;
            DbInstancePort = dbInstancePort;
            DbName = dbName;
            DbParameterGroups = dbParameterGroups;
            DbSubnetGroup = dbSubnetGroup;
            EnabledCloudwatchLogsExports = enabledCloudwatchLogsExports;
            Endpoint = endpoint;
            Engine = engine;
            EngineVersion = engineVersion;
            HostedZoneId = hostedZoneId;
            Id = id;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            LicenseModel = licenseModel;
            MasterUserSecrets = masterUserSecrets;
            MasterUsername = masterUsername;
            MaxAllocatedStorage = maxAllocatedStorage;
            MonitoringInterval = monitoringInterval;
            MonitoringRoleArn = monitoringRoleArn;
            MultiAz = multiAz;
            NetworkType = networkType;
            OptionGroupMemberships = optionGroupMemberships;
            Port = port;
            PreferredBackupWindow = preferredBackupWindow;
            PreferredMaintenanceWindow = preferredMaintenanceWindow;
            PubliclyAccessible = publiclyAccessible;
            ReplicateSourceDb = replicateSourceDb;
            ResourceId = resourceId;
            StorageEncrypted = storageEncrypted;
            StorageThroughput = storageThroughput;
            StorageType = storageType;
            Tags = tags;
            Timezone = timezone;
            VpcSecurityGroups = vpcSecurityGroups;
        }
    }
}
