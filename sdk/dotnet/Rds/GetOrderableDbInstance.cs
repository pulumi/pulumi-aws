// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    public static class GetOrderableDbInstance
    {
        /// <summary>
        /// Information about RDS orderable DB instances and valid parameter combinations.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetOrderableDbInstance.Invoke(new()
        ///     {
        ///         Engine = "mysql",
        ///         EngineVersion = "5.7.22",
        ///         LicenseModel = "general-public-license",
        ///         StorageType = "standard",
        ///         PreferredInstanceClasses = new[]
        ///         {
        ///             "db.r6.xlarge",
        ///             "db.m4.large",
        ///             "db.t3.small",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// Valid parameter combinations can also be found with `preferred_engine_versions` and/or `preferred_instance_classes`.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetOrderableDbInstance.Invoke(new()
        ///     {
        ///         Engine = "mysql",
        ///         LicenseModel = "general-public-license",
        ///         PreferredEngineVersions = new[]
        ///         {
        ///             "5.6.35",
        ///             "5.6.41",
        ///             "5.6.44",
        ///         },
        ///         PreferredInstanceClasses = new[]
        ///         {
        ///             "db.t2.small",
        ///             "db.t3.medium",
        ///             "db.t3.large",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetOrderableDbInstanceResult> InvokeAsync(GetOrderableDbInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrderableDbInstanceResult>("aws:rds/getOrderableDbInstance:getOrderableDbInstance", args ?? new GetOrderableDbInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Information about RDS orderable DB instances and valid parameter combinations.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetOrderableDbInstance.Invoke(new()
        ///     {
        ///         Engine = "mysql",
        ///         EngineVersion = "5.7.22",
        ///         LicenseModel = "general-public-license",
        ///         StorageType = "standard",
        ///         PreferredInstanceClasses = new[]
        ///         {
        ///             "db.r6.xlarge",
        ///             "db.m4.large",
        ///             "db.t3.small",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// Valid parameter combinations can also be found with `preferred_engine_versions` and/or `preferred_instance_classes`.
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetOrderableDbInstance.Invoke(new()
        ///     {
        ///         Engine = "mysql",
        ///         LicenseModel = "general-public-license",
        ///         PreferredEngineVersions = new[]
        ///         {
        ///             "5.6.35",
        ///             "5.6.41",
        ///             "5.6.44",
        ///         },
        ///         PreferredInstanceClasses = new[]
        ///         {
        ///             "db.t2.small",
        ///             "db.t3.medium",
        ///             "db.t3.large",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetOrderableDbInstanceResult> Invoke(GetOrderableDbInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrderableDbInstanceResult>("aws:rds/getOrderableDbInstance:getOrderableDbInstance", args ?? new GetOrderableDbInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrderableDbInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone group.
        /// </summary>
        [Input("availabilityZoneGroup")]
        public string? AvailabilityZoneGroup { get; set; }

        /// <summary>
        /// DB engine. Engine values include `aurora`, `aurora-mysql`, `aurora-postgresql`, `docdb`, `mariadb`, `mysql`, `neptune`, `oracle-ee`, `oracle-se`, `oracle-se1`, `oracle-se2`, `postgres`, `sqlserver-ee`, `sqlserver-ex`, `sqlserver-se`, and `sqlserver-web`.
        /// </summary>
        [Input("engine", required: true)]
        public string Engine { get; set; } = null!;

        /// <summary>
        /// When set to `true`, the data source attempts to return the most recent version matching the other criteria you provide. You must use `engine_latest_version` with `preferred_instance_classes` and/or `preferred_engine_versions`. Using `engine_latest_version` will avoid `multiple RDS DB Instance Classes` errors. If you use `engine_latest_version` with `preferred_instance_classes`, the data source returns the latest version for the _first_ matching instance class (instance class priority). **Note:** The data source uses a best-effort approach at selecting the latest version but due to the complexity of version identifiers across engines, using `engine_latest_version` may _not_ return the latest version in every situation.
        /// </summary>
        [Input("engineLatestVersion")]
        public bool? EngineLatestVersion { get; set; }

        /// <summary>
        /// Version of the DB engine. If none is provided, the data source tries to use the AWS-defined default version that matches any other criteria.
        /// </summary>
        [Input("engineVersion")]
        public string? EngineVersion { get; set; }

        /// <summary>
        /// DB instance class. Examples of classes are `db.m3.2xlarge`, `db.t2.small`, and `db.m3.medium`.
        /// </summary>
        [Input("instanceClass")]
        public string? InstanceClass { get; set; }

        /// <summary>
        /// License model. Examples of license models are `general-public-license`, `bring-your-own-license`, and `amazon-license`.
        /// </summary>
        [Input("licenseModel")]
        public string? LicenseModel { get; set; }

        [Input("preferredEngineVersions")]
        private List<string>? _preferredEngineVersions;

        /// <summary>
        /// Ordered list of preferred RDS DB instance engine versions. When `engine_latest_version` is not set, the data source will return the first match in this list that matches any other criteria. If the data source finds no preferred matches or multiple matches without `engine_latest_version`, it returns an error. **CAUTION:** We don't recommend using `preferred_engine_versions` without `preferred_instance_classes` since the data source returns an arbitrary `instance_class` based on the first one AWS returns that matches the engine version and any other criteria.
        /// </summary>
        public List<string> PreferredEngineVersions
        {
            get => _preferredEngineVersions ?? (_preferredEngineVersions = new List<string>());
            set => _preferredEngineVersions = value;
        }

        [Input("preferredInstanceClasses")]
        private List<string>? _preferredInstanceClasses;

        /// <summary>
        /// Ordered list of preferred RDS DB instance classes. The data source will return the first match in this list that matches any other criteria. If the data source finds no preferred matches or multiple matches without `engine_latest_version`, it returns an error. If you use `preferred_instance_classes` without `preferred_engine_versions` or `engine_latest_version`, the data source returns an arbitrary `engine_version` based on the first one AWS returns matching the instance class and any other criteria.
        /// </summary>
        public List<string> PreferredInstanceClasses
        {
            get => _preferredInstanceClasses ?? (_preferredInstanceClasses = new List<string>());
            set => _preferredInstanceClasses = value;
        }

        /// <summary>
        /// Whether a DB instance can have a read replica.
        /// </summary>
        [Input("readReplicaCapable")]
        public bool? ReadReplicaCapable { get; set; }

        /// <summary>
        /// Storage types. Examples of storage types are `standard`, `io1`, `gp2`, and `aurora`.
        /// </summary>
        [Input("storageType")]
        public string? StorageType { get; set; }

        [Input("supportedEngineModes")]
        private List<string>? _supportedEngineModes;

        /// <summary>
        /// Use to limit results to engine modes such as `provisioned`.
        /// </summary>
        public List<string> SupportedEngineModes
        {
            get => _supportedEngineModes ?? (_supportedEngineModes = new List<string>());
            set => _supportedEngineModes = value;
        }

        [Input("supportedNetworkTypes")]
        private List<string>? _supportedNetworkTypes;

        /// <summary>
        /// Use to limit results to network types `IPV4` or `DUAL`.
        /// </summary>
        public List<string> SupportedNetworkTypes
        {
            get => _supportedNetworkTypes ?? (_supportedNetworkTypes = new List<string>());
            set => _supportedNetworkTypes = value;
        }

        /// <summary>
        /// Whether to limit results to instances that support clusters.
        /// </summary>
        [Input("supportsClusters")]
        public bool? SupportsClusters { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        /// </summary>
        [Input("supportsEnhancedMonitoring")]
        public bool? SupportsEnhancedMonitoring { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Aurora global databases with a specific combination of other DB engine attributes.
        /// </summary>
        [Input("supportsGlobalDatabases")]
        public bool? SupportsGlobalDatabases { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports IAM database authentication.
        /// </summary>
        [Input("supportsIamDatabaseAuthentication")]
        public bool? SupportsIamDatabaseAuthentication { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports provisioned IOPS.
        /// </summary>
        [Input("supportsIops")]
        public bool? SupportsIops { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Kerberos Authentication.
        /// </summary>
        [Input("supportsKerberosAuthentication")]
        public bool? SupportsKerberosAuthentication { get; set; }

        /// <summary>
        /// Whether to limit results to instances that are multi-AZ capable.
        /// </summary>
        [Input("supportsMultiAz")]
        public bool? SupportsMultiAz { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Performance Insights.
        /// </summary>
        [Input("supportsPerformanceInsights")]
        public bool? SupportsPerformanceInsights { get; set; }

        /// <summary>
        /// Enable this to ensure Amazon RDS can automatically scale storage for DB instances that use the specified DB instance class.
        /// </summary>
        [Input("supportsStorageAutoscaling")]
        public bool? SupportsStorageAutoscaling { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports encrypted storage.
        /// </summary>
        [Input("supportsStorageEncryption")]
        public bool? SupportsStorageEncryption { get; set; }

        /// <summary>
        /// Boolean that indicates whether to show only VPC or non-VPC offerings.
        /// </summary>
        [Input("vpc")]
        public bool? Vpc { get; set; }

        public GetOrderableDbInstanceArgs()
        {
        }
        public static new GetOrderableDbInstanceArgs Empty => new GetOrderableDbInstanceArgs();
    }

    public sealed class GetOrderableDbInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone group.
        /// </summary>
        [Input("availabilityZoneGroup")]
        public Input<string>? AvailabilityZoneGroup { get; set; }

        /// <summary>
        /// DB engine. Engine values include `aurora`, `aurora-mysql`, `aurora-postgresql`, `docdb`, `mariadb`, `mysql`, `neptune`, `oracle-ee`, `oracle-se`, `oracle-se1`, `oracle-se2`, `postgres`, `sqlserver-ee`, `sqlserver-ex`, `sqlserver-se`, and `sqlserver-web`.
        /// </summary>
        [Input("engine", required: true)]
        public Input<string> Engine { get; set; } = null!;

        /// <summary>
        /// When set to `true`, the data source attempts to return the most recent version matching the other criteria you provide. You must use `engine_latest_version` with `preferred_instance_classes` and/or `preferred_engine_versions`. Using `engine_latest_version` will avoid `multiple RDS DB Instance Classes` errors. If you use `engine_latest_version` with `preferred_instance_classes`, the data source returns the latest version for the _first_ matching instance class (instance class priority). **Note:** The data source uses a best-effort approach at selecting the latest version but due to the complexity of version identifiers across engines, using `engine_latest_version` may _not_ return the latest version in every situation.
        /// </summary>
        [Input("engineLatestVersion")]
        public Input<bool>? EngineLatestVersion { get; set; }

        /// <summary>
        /// Version of the DB engine. If none is provided, the data source tries to use the AWS-defined default version that matches any other criteria.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// DB instance class. Examples of classes are `db.m3.2xlarge`, `db.t2.small`, and `db.m3.medium`.
        /// </summary>
        [Input("instanceClass")]
        public Input<string>? InstanceClass { get; set; }

        /// <summary>
        /// License model. Examples of license models are `general-public-license`, `bring-your-own-license`, and `amazon-license`.
        /// </summary>
        [Input("licenseModel")]
        public Input<string>? LicenseModel { get; set; }

        [Input("preferredEngineVersions")]
        private InputList<string>? _preferredEngineVersions;

        /// <summary>
        /// Ordered list of preferred RDS DB instance engine versions. When `engine_latest_version` is not set, the data source will return the first match in this list that matches any other criteria. If the data source finds no preferred matches or multiple matches without `engine_latest_version`, it returns an error. **CAUTION:** We don't recommend using `preferred_engine_versions` without `preferred_instance_classes` since the data source returns an arbitrary `instance_class` based on the first one AWS returns that matches the engine version and any other criteria.
        /// </summary>
        public InputList<string> PreferredEngineVersions
        {
            get => _preferredEngineVersions ?? (_preferredEngineVersions = new InputList<string>());
            set => _preferredEngineVersions = value;
        }

        [Input("preferredInstanceClasses")]
        private InputList<string>? _preferredInstanceClasses;

        /// <summary>
        /// Ordered list of preferred RDS DB instance classes. The data source will return the first match in this list that matches any other criteria. If the data source finds no preferred matches or multiple matches without `engine_latest_version`, it returns an error. If you use `preferred_instance_classes` without `preferred_engine_versions` or `engine_latest_version`, the data source returns an arbitrary `engine_version` based on the first one AWS returns matching the instance class and any other criteria.
        /// </summary>
        public InputList<string> PreferredInstanceClasses
        {
            get => _preferredInstanceClasses ?? (_preferredInstanceClasses = new InputList<string>());
            set => _preferredInstanceClasses = value;
        }

        /// <summary>
        /// Whether a DB instance can have a read replica.
        /// </summary>
        [Input("readReplicaCapable")]
        public Input<bool>? ReadReplicaCapable { get; set; }

        /// <summary>
        /// Storage types. Examples of storage types are `standard`, `io1`, `gp2`, and `aurora`.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("supportedEngineModes")]
        private InputList<string>? _supportedEngineModes;

        /// <summary>
        /// Use to limit results to engine modes such as `provisioned`.
        /// </summary>
        public InputList<string> SupportedEngineModes
        {
            get => _supportedEngineModes ?? (_supportedEngineModes = new InputList<string>());
            set => _supportedEngineModes = value;
        }

        [Input("supportedNetworkTypes")]
        private InputList<string>? _supportedNetworkTypes;

        /// <summary>
        /// Use to limit results to network types `IPV4` or `DUAL`.
        /// </summary>
        public InputList<string> SupportedNetworkTypes
        {
            get => _supportedNetworkTypes ?? (_supportedNetworkTypes = new InputList<string>());
            set => _supportedNetworkTypes = value;
        }

        /// <summary>
        /// Whether to limit results to instances that support clusters.
        /// </summary>
        [Input("supportsClusters")]
        public Input<bool>? SupportsClusters { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        /// </summary>
        [Input("supportsEnhancedMonitoring")]
        public Input<bool>? SupportsEnhancedMonitoring { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Aurora global databases with a specific combination of other DB engine attributes.
        /// </summary>
        [Input("supportsGlobalDatabases")]
        public Input<bool>? SupportsGlobalDatabases { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports IAM database authentication.
        /// </summary>
        [Input("supportsIamDatabaseAuthentication")]
        public Input<bool>? SupportsIamDatabaseAuthentication { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports provisioned IOPS.
        /// </summary>
        [Input("supportsIops")]
        public Input<bool>? SupportsIops { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Kerberos Authentication.
        /// </summary>
        [Input("supportsKerberosAuthentication")]
        public Input<bool>? SupportsKerberosAuthentication { get; set; }

        /// <summary>
        /// Whether to limit results to instances that are multi-AZ capable.
        /// </summary>
        [Input("supportsMultiAz")]
        public Input<bool>? SupportsMultiAz { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports Performance Insights.
        /// </summary>
        [Input("supportsPerformanceInsights")]
        public Input<bool>? SupportsPerformanceInsights { get; set; }

        /// <summary>
        /// Enable this to ensure Amazon RDS can automatically scale storage for DB instances that use the specified DB instance class.
        /// </summary>
        [Input("supportsStorageAutoscaling")]
        public Input<bool>? SupportsStorageAutoscaling { get; set; }

        /// <summary>
        /// Enable this to ensure a DB instance supports encrypted storage.
        /// </summary>
        [Input("supportsStorageEncryption")]
        public Input<bool>? SupportsStorageEncryption { get; set; }

        /// <summary>
        /// Boolean that indicates whether to show only VPC or non-VPC offerings.
        /// </summary>
        [Input("vpc")]
        public Input<bool>? Vpc { get; set; }

        public GetOrderableDbInstanceInvokeArgs()
        {
        }
        public static new GetOrderableDbInstanceInvokeArgs Empty => new GetOrderableDbInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrderableDbInstanceResult
    {
        public readonly string AvailabilityZoneGroup;
        /// <summary>
        /// Availability zones where the instance is available.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        public readonly string Engine;
        public readonly bool? EngineLatestVersion;
        public readonly string EngineVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceClass;
        public readonly string LicenseModel;
        /// <summary>
        /// Maximum total provisioned IOPS for a DB instance.
        /// </summary>
        public readonly int MaxIopsPerDbInstance;
        /// <summary>
        /// Maximum provisioned IOPS per GiB for a DB instance.
        /// </summary>
        public readonly double MaxIopsPerGib;
        /// <summary>
        /// Maximum storage size for a DB instance.
        /// </summary>
        public readonly int MaxStorageSize;
        /// <summary>
        /// Minimum total provisioned IOPS for a DB instance.
        /// </summary>
        public readonly int MinIopsPerDbInstance;
        /// <summary>
        /// Minimum provisioned IOPS per GiB for a DB instance.
        /// </summary>
        public readonly double MinIopsPerGib;
        /// <summary>
        /// Minimum storage size for a DB instance.
        /// </summary>
        public readonly int MinStorageSize;
        /// <summary>
        /// Whether a DB instance is Multi-AZ capable.
        /// </summary>
        public readonly bool MultiAzCapable;
        /// <summary>
        /// Whether a DB instance supports RDS on Outposts.
        /// </summary>
        public readonly bool OutpostCapable;
        public readonly ImmutableArray<string> PreferredEngineVersions;
        public readonly ImmutableArray<string> PreferredInstanceClasses;
        public readonly bool ReadReplicaCapable;
        public readonly string StorageType;
        public readonly ImmutableArray<string> SupportedEngineModes;
        public readonly ImmutableArray<string> SupportedNetworkTypes;
        public readonly bool SupportsClusters;
        public readonly bool SupportsEnhancedMonitoring;
        public readonly bool SupportsGlobalDatabases;
        public readonly bool SupportsIamDatabaseAuthentication;
        public readonly bool SupportsIops;
        public readonly bool SupportsKerberosAuthentication;
        public readonly bool SupportsMultiAz;
        public readonly bool SupportsPerformanceInsights;
        public readonly bool SupportsStorageAutoscaling;
        public readonly bool SupportsStorageEncryption;
        public readonly bool Vpc;

        [OutputConstructor]
        private GetOrderableDbInstanceResult(
            string availabilityZoneGroup,

            ImmutableArray<string> availabilityZones,

            string engine,

            bool? engineLatestVersion,

            string engineVersion,

            string id,

            string instanceClass,

            string licenseModel,

            int maxIopsPerDbInstance,

            double maxIopsPerGib,

            int maxStorageSize,

            int minIopsPerDbInstance,

            double minIopsPerGib,

            int minStorageSize,

            bool multiAzCapable,

            bool outpostCapable,

            ImmutableArray<string> preferredEngineVersions,

            ImmutableArray<string> preferredInstanceClasses,

            bool readReplicaCapable,

            string storageType,

            ImmutableArray<string> supportedEngineModes,

            ImmutableArray<string> supportedNetworkTypes,

            bool supportsClusters,

            bool supportsEnhancedMonitoring,

            bool supportsGlobalDatabases,

            bool supportsIamDatabaseAuthentication,

            bool supportsIops,

            bool supportsKerberosAuthentication,

            bool supportsMultiAz,

            bool supportsPerformanceInsights,

            bool supportsStorageAutoscaling,

            bool supportsStorageEncryption,

            bool vpc)
        {
            AvailabilityZoneGroup = availabilityZoneGroup;
            AvailabilityZones = availabilityZones;
            Engine = engine;
            EngineLatestVersion = engineLatestVersion;
            EngineVersion = engineVersion;
            Id = id;
            InstanceClass = instanceClass;
            LicenseModel = licenseModel;
            MaxIopsPerDbInstance = maxIopsPerDbInstance;
            MaxIopsPerGib = maxIopsPerGib;
            MaxStorageSize = maxStorageSize;
            MinIopsPerDbInstance = minIopsPerDbInstance;
            MinIopsPerGib = minIopsPerGib;
            MinStorageSize = minStorageSize;
            MultiAzCapable = multiAzCapable;
            OutpostCapable = outpostCapable;
            PreferredEngineVersions = preferredEngineVersions;
            PreferredInstanceClasses = preferredInstanceClasses;
            ReadReplicaCapable = readReplicaCapable;
            StorageType = storageType;
            SupportedEngineModes = supportedEngineModes;
            SupportedNetworkTypes = supportedNetworkTypes;
            SupportsClusters = supportsClusters;
            SupportsEnhancedMonitoring = supportsEnhancedMonitoring;
            SupportsGlobalDatabases = supportsGlobalDatabases;
            SupportsIamDatabaseAuthentication = supportsIamDatabaseAuthentication;
            SupportsIops = supportsIops;
            SupportsKerberosAuthentication = supportsKerberosAuthentication;
            SupportsMultiAz = supportsMultiAz;
            SupportsPerformanceInsights = supportsPerformanceInsights;
            SupportsStorageAutoscaling = supportsStorageAutoscaling;
            SupportsStorageEncryption = supportsStorageEncryption;
            Vpc = vpc;
        }
    }
}
