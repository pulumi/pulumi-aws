// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    /// <summary>
    /// Resource for managing an Amazon Aurora Limitless Database DB shard group
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Rds.Cluster("example", new()
    ///     {
    ///         ClusterIdentifier = "example-limitless-cluster",
    ///         Engine = Aws.Rds.EngineType.AuroraPostgresql,
    ///         EngineVersion = "16.6-limitless",
    ///         EngineMode = "",
    ///         StorageType = "aurora-iopt1",
    ///         ClusterScalabilityType = "limitless",
    ///         MasterUsername = "foo",
    ///         MasterPassword = "must_be_eight_characters",
    ///         PerformanceInsightsEnabled = true,
    ///         PerformanceInsightsRetentionPeriod = 31,
    ///         EnabledCloudwatchLogsExports = new[]
    ///         {
    ///             "postgresql",
    ///         },
    ///         MonitoringInterval = 5,
    ///         MonitoringRoleArn = exampleAwsIamRole.Arn,
    ///     });
    /// 
    ///     var exampleShardGroup = new Aws.Rds.ShardGroup("example", new()
    ///     {
    ///         DbShardGroupIdentifier = "example-shard-group",
    ///         DbClusterIdentifier = example.Id,
    ///         MaxAcu = 1200,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import shard group using the `db_shard_group_identifier`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:rds/shardGroup:ShardGroup example example-shard-group
    /// ```
    /// </summary>
    [AwsResourceType("aws:rds/shardGroup:ShardGroup")]
    public partial class ShardGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the shard group.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
        /// </summary>
        [Output("computeRedundancy")]
        public Output<int> ComputeRedundancy { get; private set; } = null!;

        /// <summary>
        /// The name of the primary DB cluster for the DB shard group.
        /// </summary>
        [Output("dbClusterIdentifier")]
        public Output<string> DbClusterIdentifier { get; private set; } = null!;

        /// <summary>
        /// The name of the DB shard group.
        /// </summary>
        [Output("dbShardGroupIdentifier")]
        public Output<string> DbShardGroupIdentifier { get; private set; } = null!;

        /// <summary>
        /// The AWS Region-unique, immutable identifier for the DB shard group.
        /// </summary>
        [Output("dbShardGroupResourceId")]
        public Output<string> DbShardGroupResourceId { get; private set; } = null!;

        /// <summary>
        /// The connection endpoint for the DB shard group.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
        /// </summary>
        [Output("maxAcu")]
        public Output<double> MaxAcu { get; private set; } = null!;

        /// <summary>
        /// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
        /// </summary>
        [Output("minAcu")]
        public Output<double> MinAcu { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the DB shard group is publicly accessible.
        /// </summary>
        [Output("publiclyAccessible")]
        public Output<bool> PubliclyAccessible { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ShardGroupTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a ShardGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ShardGroup(string name, ShardGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:rds/shardGroup:ShardGroup", name, args ?? new ShardGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ShardGroup(string name, Input<string> id, ShardGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:rds/shardGroup:ShardGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ShardGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ShardGroup Get(string name, Input<string> id, ShardGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ShardGroup(name, id, state, options);
        }
    }

    public sealed class ShardGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
        /// </summary>
        [Input("computeRedundancy")]
        public Input<int>? ComputeRedundancy { get; set; }

        /// <summary>
        /// The name of the primary DB cluster for the DB shard group.
        /// </summary>
        [Input("dbClusterIdentifier", required: true)]
        public Input<string> DbClusterIdentifier { get; set; } = null!;

        /// <summary>
        /// The name of the DB shard group.
        /// </summary>
        [Input("dbShardGroupIdentifier", required: true)]
        public Input<string> DbShardGroupIdentifier { get; set; } = null!;

        /// <summary>
        /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
        /// </summary>
        [Input("maxAcu", required: true)]
        public Input<double> MaxAcu { get; set; } = null!;

        /// <summary>
        /// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
        /// </summary>
        [Input("minAcu")]
        public Input<double>? MinAcu { get; set; }

        /// <summary>
        /// Indicates whether the DB shard group is publicly accessible.
        /// </summary>
        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ShardGroupTimeoutsArgs>? Timeouts { get; set; }

        public ShardGroupArgs()
        {
        }
        public static new ShardGroupArgs Empty => new ShardGroupArgs();
    }

    public sealed class ShardGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the shard group.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Specifies whether to create standby DB shard groups for the DB shard group. Valid values are:
        /// </summary>
        [Input("computeRedundancy")]
        public Input<int>? ComputeRedundancy { get; set; }

        /// <summary>
        /// The name of the primary DB cluster for the DB shard group.
        /// </summary>
        [Input("dbClusterIdentifier")]
        public Input<string>? DbClusterIdentifier { get; set; }

        /// <summary>
        /// The name of the DB shard group.
        /// </summary>
        [Input("dbShardGroupIdentifier")]
        public Input<string>? DbShardGroupIdentifier { get; set; }

        /// <summary>
        /// The AWS Region-unique, immutable identifier for the DB shard group.
        /// </summary>
        [Input("dbShardGroupResourceId")]
        public Input<string>? DbShardGroupResourceId { get; set; }

        /// <summary>
        /// The connection endpoint for the DB shard group.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// The maximum capacity of the DB shard group in Aurora capacity units (ACUs).
        /// </summary>
        [Input("maxAcu")]
        public Input<double>? MaxAcu { get; set; }

        /// <summary>
        /// The minimum capacity of the DB shard group in Aurora capacity units (ACUs).
        /// </summary>
        [Input("minAcu")]
        public Input<double>? MinAcu { get; set; }

        /// <summary>
        /// Indicates whether the DB shard group is publicly accessible.
        /// </summary>
        [Input("publiclyAccessible")]
        public Input<bool>? PubliclyAccessible { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// 
        /// For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/rds/create-shard-group.html).
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ShardGroupTimeoutsGetArgs>? Timeouts { get; set; }

        public ShardGroupState()
        {
        }
        public static new ShardGroupState Empty => new ShardGroupState();
    }
}
