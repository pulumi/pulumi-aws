// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    [AwsResourceType("aws:rds/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        [Output("allocatedStorage")]
        public Output<int> AllocatedStorage { get; private set; } = null!;

        [Output("allowMajorVersionUpgrade")]
        public Output<bool?> AllowMajorVersionUpgrade { get; private set; } = null!;

        [Output("applyImmediately")]
        public Output<bool> ApplyImmediately { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        [Output("backtrackWindow")]
        public Output<int?> BacktrackWindow { get; private set; } = null!;

        [Output("backupRetentionPeriod")]
        public Output<int?> BackupRetentionPeriod { get; private set; } = null!;

        [Output("clusterIdentifier")]
        public Output<string> ClusterIdentifier { get; private set; } = null!;

        [Output("clusterIdentifierPrefix")]
        public Output<string> ClusterIdentifierPrefix { get; private set; } = null!;

        [Output("clusterMembers")]
        public Output<ImmutableArray<string>> ClusterMembers { get; private set; } = null!;

        [Output("clusterResourceId")]
        public Output<string> ClusterResourceId { get; private set; } = null!;

        [Output("copyTagsToSnapshot")]
        public Output<bool?> CopyTagsToSnapshot { get; private set; } = null!;

        [Output("databaseName")]
        public Output<string> DatabaseName { get; private set; } = null!;

        [Output("dbClusterInstanceClass")]
        public Output<string?> DbClusterInstanceClass { get; private set; } = null!;

        [Output("dbClusterParameterGroupName")]
        public Output<string> DbClusterParameterGroupName { get; private set; } = null!;

        [Output("dbInstanceParameterGroupName")]
        public Output<string?> DbInstanceParameterGroupName { get; private set; } = null!;

        [Output("dbSubnetGroupName")]
        public Output<string> DbSubnetGroupName { get; private set; } = null!;

        [Output("deletionProtection")]
        public Output<bool?> DeletionProtection { get; private set; } = null!;

        [Output("enableGlobalWriteForwarding")]
        public Output<bool?> EnableGlobalWriteForwarding { get; private set; } = null!;

        [Output("enableHttpEndpoint")]
        public Output<bool?> EnableHttpEndpoint { get; private set; } = null!;

        [Output("enabledCloudwatchLogsExports")]
        public Output<ImmutableArray<string>> EnabledCloudwatchLogsExports { get; private set; } = null!;

        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        [Output("engine")]
        public Output<string?> Engine { get; private set; } = null!;

        [Output("engineMode")]
        public Output<string?> EngineMode { get; private set; } = null!;

        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        [Output("engineVersionActual")]
        public Output<string> EngineVersionActual { get; private set; } = null!;

        [Output("finalSnapshotIdentifier")]
        public Output<string?> FinalSnapshotIdentifier { get; private set; } = null!;

        [Output("globalClusterIdentifier")]
        public Output<string?> GlobalClusterIdentifier { get; private set; } = null!;

        [Output("hostedZoneId")]
        public Output<string> HostedZoneId { get; private set; } = null!;

        [Output("iamDatabaseAuthenticationEnabled")]
        public Output<bool?> IamDatabaseAuthenticationEnabled { get; private set; } = null!;

        [Output("iamRoles")]
        public Output<ImmutableArray<string>> IamRoles { get; private set; } = null!;

        [Output("iops")]
        public Output<int?> Iops { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string> KmsKeyId { get; private set; } = null!;

        [Output("masterPassword")]
        public Output<string?> MasterPassword { get; private set; } = null!;

        [Output("masterUsername")]
        public Output<string> MasterUsername { get; private set; } = null!;

        [Output("networkType")]
        public Output<string> NetworkType { get; private set; } = null!;

        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        [Output("preferredBackupWindow")]
        public Output<string> PreferredBackupWindow { get; private set; } = null!;

        [Output("preferredMaintenanceWindow")]
        public Output<string> PreferredMaintenanceWindow { get; private set; } = null!;

        [Output("readerEndpoint")]
        public Output<string> ReaderEndpoint { get; private set; } = null!;

        [Output("replicationSourceIdentifier")]
        public Output<string?> ReplicationSourceIdentifier { get; private set; } = null!;

        [Output("restoreToPointInTime")]
        public Output<Outputs.ClusterRestoreToPointInTime?> RestoreToPointInTime { get; private set; } = null!;

        [Output("s3Import")]
        public Output<Outputs.ClusterS3Import?> S3Import { get; private set; } = null!;

        [Output("scalingConfiguration")]
        public Output<Outputs.ClusterScalingConfiguration?> ScalingConfiguration { get; private set; } = null!;

        [Output("serverlessv2ScalingConfiguration")]
        public Output<Outputs.ClusterServerlessv2ScalingConfiguration?> Serverlessv2ScalingConfiguration { get; private set; } = null!;

        [Output("skipFinalSnapshot")]
        public Output<bool?> SkipFinalSnapshot { get; private set; } = null!;

        [Output("snapshotIdentifier")]
        public Output<string?> SnapshotIdentifier { get; private set; } = null!;

        [Output("sourceRegion")]
        public Output<string?> SourceRegion { get; private set; } = null!;

        [Output("storageEncrypted")]
        public Output<bool> StorageEncrypted { get; private set; } = null!;

        [Output("storageType")]
        public Output<string?> StorageType { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("vpcSecurityGroupIds")]
        public Output<ImmutableArray<string>> VpcSecurityGroupIds { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:rds/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:rds/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "masterPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("allocatedStorage")]
        public Input<int>? AllocatedStorage { get; set; }

        [Input("allowMajorVersionUpgrade")]
        public Input<bool>? AllowMajorVersionUpgrade { get; set; }

        [Input("applyImmediately")]
        public Input<bool>? ApplyImmediately { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("backtrackWindow")]
        public Input<int>? BacktrackWindow { get; set; }

        [Input("backupRetentionPeriod")]
        public Input<int>? BackupRetentionPeriod { get; set; }

        [Input("clusterIdentifier")]
        public Input<string>? ClusterIdentifier { get; set; }

        [Input("clusterIdentifierPrefix")]
        public Input<string>? ClusterIdentifierPrefix { get; set; }

        [Input("clusterMembers")]
        private InputList<string>? _clusterMembers;
        public InputList<string> ClusterMembers
        {
            get => _clusterMembers ?? (_clusterMembers = new InputList<string>());
            set => _clusterMembers = value;
        }

        [Input("copyTagsToSnapshot")]
        public Input<bool>? CopyTagsToSnapshot { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("dbClusterInstanceClass")]
        public Input<string>? DbClusterInstanceClass { get; set; }

        [Input("dbClusterParameterGroupName")]
        public Input<string>? DbClusterParameterGroupName { get; set; }

        [Input("dbInstanceParameterGroupName")]
        public Input<string>? DbInstanceParameterGroupName { get; set; }

        [Input("dbSubnetGroupName")]
        public Input<string>? DbSubnetGroupName { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        [Input("enableGlobalWriteForwarding")]
        public Input<bool>? EnableGlobalWriteForwarding { get; set; }

        [Input("enableHttpEndpoint")]
        public Input<bool>? EnableHttpEndpoint { get; set; }

        [Input("enabledCloudwatchLogsExports")]
        private InputList<string>? _enabledCloudwatchLogsExports;
        public InputList<string> EnabledCloudwatchLogsExports
        {
            get => _enabledCloudwatchLogsExports ?? (_enabledCloudwatchLogsExports = new InputList<string>());
            set => _enabledCloudwatchLogsExports = value;
        }

        [Input("engine")]
        public InputUnion<string, Pulumi.Aws.Rds.EngineType>? Engine { get; set; }

        [Input("engineMode")]
        public InputUnion<string, Pulumi.Aws.Rds.EngineMode>? EngineMode { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("finalSnapshotIdentifier")]
        public Input<string>? FinalSnapshotIdentifier { get; set; }

        [Input("globalClusterIdentifier")]
        public Input<string>? GlobalClusterIdentifier { get; set; }

        [Input("iamDatabaseAuthenticationEnabled")]
        public Input<bool>? IamDatabaseAuthenticationEnabled { get; set; }

        [Input("iamRoles")]
        private InputList<string>? _iamRoles;
        public InputList<string> IamRoles
        {
            get => _iamRoles ?? (_iamRoles = new InputList<string>());
            set => _iamRoles = value;
        }

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("masterPassword")]
        private Input<string>? _masterPassword;
        public Input<string>? MasterPassword
        {
            get => _masterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _masterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("masterUsername")]
        public Input<string>? MasterUsername { get; set; }

        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("preferredBackupWindow")]
        public Input<string>? PreferredBackupWindow { get; set; }

        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        [Input("replicationSourceIdentifier")]
        public Input<string>? ReplicationSourceIdentifier { get; set; }

        [Input("restoreToPointInTime")]
        public Input<Inputs.ClusterRestoreToPointInTimeArgs>? RestoreToPointInTime { get; set; }

        [Input("s3Import")]
        public Input<Inputs.ClusterS3ImportArgs>? S3Import { get; set; }

        [Input("scalingConfiguration")]
        public Input<Inputs.ClusterScalingConfigurationArgs>? ScalingConfiguration { get; set; }

        [Input("serverlessv2ScalingConfiguration")]
        public Input<Inputs.ClusterServerlessv2ScalingConfigurationArgs>? Serverlessv2ScalingConfiguration { get; set; }

        [Input("skipFinalSnapshot")]
        public Input<bool>? SkipFinalSnapshot { get; set; }

        [Input("snapshotIdentifier")]
        public Input<string>? SnapshotIdentifier { get; set; }

        [Input("sourceRegion")]
        public Input<string>? SourceRegion { get; set; }

        [Input("storageEncrypted")]
        public Input<bool>? StorageEncrypted { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("allocatedStorage")]
        public Input<int>? AllocatedStorage { get; set; }

        [Input("allowMajorVersionUpgrade")]
        public Input<bool>? AllowMajorVersionUpgrade { get; set; }

        [Input("applyImmediately")]
        public Input<bool>? ApplyImmediately { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        [Input("backtrackWindow")]
        public Input<int>? BacktrackWindow { get; set; }

        [Input("backupRetentionPeriod")]
        public Input<int>? BackupRetentionPeriod { get; set; }

        [Input("clusterIdentifier")]
        public Input<string>? ClusterIdentifier { get; set; }

        [Input("clusterIdentifierPrefix")]
        public Input<string>? ClusterIdentifierPrefix { get; set; }

        [Input("clusterMembers")]
        private InputList<string>? _clusterMembers;
        public InputList<string> ClusterMembers
        {
            get => _clusterMembers ?? (_clusterMembers = new InputList<string>());
            set => _clusterMembers = value;
        }

        [Input("clusterResourceId")]
        public Input<string>? ClusterResourceId { get; set; }

        [Input("copyTagsToSnapshot")]
        public Input<bool>? CopyTagsToSnapshot { get; set; }

        [Input("databaseName")]
        public Input<string>? DatabaseName { get; set; }

        [Input("dbClusterInstanceClass")]
        public Input<string>? DbClusterInstanceClass { get; set; }

        [Input("dbClusterParameterGroupName")]
        public Input<string>? DbClusterParameterGroupName { get; set; }

        [Input("dbInstanceParameterGroupName")]
        public Input<string>? DbInstanceParameterGroupName { get; set; }

        [Input("dbSubnetGroupName")]
        public Input<string>? DbSubnetGroupName { get; set; }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        [Input("enableGlobalWriteForwarding")]
        public Input<bool>? EnableGlobalWriteForwarding { get; set; }

        [Input("enableHttpEndpoint")]
        public Input<bool>? EnableHttpEndpoint { get; set; }

        [Input("enabledCloudwatchLogsExports")]
        private InputList<string>? _enabledCloudwatchLogsExports;
        public InputList<string> EnabledCloudwatchLogsExports
        {
            get => _enabledCloudwatchLogsExports ?? (_enabledCloudwatchLogsExports = new InputList<string>());
            set => _enabledCloudwatchLogsExports = value;
        }

        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("engine")]
        public InputUnion<string, Pulumi.Aws.Rds.EngineType>? Engine { get; set; }

        [Input("engineMode")]
        public InputUnion<string, Pulumi.Aws.Rds.EngineMode>? EngineMode { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("engineVersionActual")]
        public Input<string>? EngineVersionActual { get; set; }

        [Input("finalSnapshotIdentifier")]
        public Input<string>? FinalSnapshotIdentifier { get; set; }

        [Input("globalClusterIdentifier")]
        public Input<string>? GlobalClusterIdentifier { get; set; }

        [Input("hostedZoneId")]
        public Input<string>? HostedZoneId { get; set; }

        [Input("iamDatabaseAuthenticationEnabled")]
        public Input<bool>? IamDatabaseAuthenticationEnabled { get; set; }

        [Input("iamRoles")]
        private InputList<string>? _iamRoles;
        public InputList<string> IamRoles
        {
            get => _iamRoles ?? (_iamRoles = new InputList<string>());
            set => _iamRoles = value;
        }

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("masterPassword")]
        private Input<string>? _masterPassword;
        public Input<string>? MasterPassword
        {
            get => _masterPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _masterPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("masterUsername")]
        public Input<string>? MasterUsername { get; set; }

        [Input("networkType")]
        public Input<string>? NetworkType { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("preferredBackupWindow")]
        public Input<string>? PreferredBackupWindow { get; set; }

        [Input("preferredMaintenanceWindow")]
        public Input<string>? PreferredMaintenanceWindow { get; set; }

        [Input("readerEndpoint")]
        public Input<string>? ReaderEndpoint { get; set; }

        [Input("replicationSourceIdentifier")]
        public Input<string>? ReplicationSourceIdentifier { get; set; }

        [Input("restoreToPointInTime")]
        public Input<Inputs.ClusterRestoreToPointInTimeGetArgs>? RestoreToPointInTime { get; set; }

        [Input("s3Import")]
        public Input<Inputs.ClusterS3ImportGetArgs>? S3Import { get; set; }

        [Input("scalingConfiguration")]
        public Input<Inputs.ClusterScalingConfigurationGetArgs>? ScalingConfiguration { get; set; }

        [Input("serverlessv2ScalingConfiguration")]
        public Input<Inputs.ClusterServerlessv2ScalingConfigurationGetArgs>? Serverlessv2ScalingConfiguration { get; set; }

        [Input("skipFinalSnapshot")]
        public Input<bool>? SkipFinalSnapshot { get; set; }

        [Input("snapshotIdentifier")]
        public Input<string>? SnapshotIdentifier { get; set; }

        [Input("sourceRegion")]
        public Input<string>? SourceRegion { get; set; }

        [Input("storageEncrypted")]
        public Input<bool>? StorageEncrypted { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
