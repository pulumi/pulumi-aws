// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Aws.Rds
{
    [EnumType]
    public readonly struct EngineMode : IEquatable<EngineMode>
    {
        private readonly string _value;

        private EngineMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EngineMode Provisioned { get; } = new EngineMode("provisioned");
        public static EngineMode Serverless { get; } = new EngineMode("serverless");
        public static EngineMode ParallelQuery { get; } = new EngineMode("parallelquery");
        public static EngineMode Global { get; } = new EngineMode("global");

        public static bool operator ==(EngineMode left, EngineMode right) => left.Equals(right);
        public static bool operator !=(EngineMode left, EngineMode right) => !left.Equals(right);

        public static explicit operator string(EngineMode value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EngineMode other && Equals(other);
        public bool Equals(EngineMode other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct EngineType : IEquatable<EngineType>
    {
        private readonly string _value;

        private EngineType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static EngineType Aurora { get; } = new EngineType("aurora");
        public static EngineType AuroraMysql { get; } = new EngineType("aurora-mysql");
        public static EngineType AuroraPostgresql { get; } = new EngineType("aurora-postgresql");

        public static bool operator ==(EngineType left, EngineType right) => left.Equals(right);
        public static bool operator !=(EngineType left, EngineType right) => !left.Equals(right);

        public static explicit operator string(EngineType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is EngineType other && Equals(other);
        public bool Equals(EngineType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct InstanceType : IEquatable<InstanceType>
    {
        private readonly string _value;

        private InstanceType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static InstanceType T3_Micro { get; } = new InstanceType("db.t3.micro");
        public static InstanceType T3_Small { get; } = new InstanceType("db.t3.small");
        public static InstanceType T3_Medium { get; } = new InstanceType("db.t3.medium");
        public static InstanceType T3_Large { get; } = new InstanceType("db.t3.large");
        public static InstanceType T3_XLarge { get; } = new InstanceType("db.t3.xlarge");
        public static InstanceType T3_2XLarge { get; } = new InstanceType("db.t3.2xlarge");
        public static InstanceType T2_Micro { get; } = new InstanceType("db.t2.micro");
        public static InstanceType T2_Small { get; } = new InstanceType("db.t2.small");
        public static InstanceType T2_Medium { get; } = new InstanceType("db.t2.medium");
        public static InstanceType T2_Large { get; } = new InstanceType("db.t2.large");
        public static InstanceType T2_XLarge { get; } = new InstanceType("db.t2.xlarge");
        public static InstanceType T2_2XLarge { get; } = new InstanceType("db.t2.2xlarge");
        public static InstanceType M1_Small { get; } = new InstanceType("db.m1.small");
        public static InstanceType M1_Medium { get; } = new InstanceType("db.m1.medium");
        public static InstanceType M1_Large { get; } = new InstanceType("db.m1.large");
        public static InstanceType M1_XLarge { get; } = new InstanceType("db.m1.xlarge");
        public static InstanceType M2_XLarge { get; } = new InstanceType("db.m2.xlarge");
        public static InstanceType M2_2XLarge { get; } = new InstanceType("db.m2.2xlarge");
        public static InstanceType M2_4XLarge { get; } = new InstanceType("db.m2.4xlarge");
        public static InstanceType M3_Medium { get; } = new InstanceType("db.m3.medium");
        public static InstanceType M3_Large { get; } = new InstanceType("db.m3.large");
        public static InstanceType M3_XLarge { get; } = new InstanceType("db.m3.xlarge");
        public static InstanceType M3_2XLarge { get; } = new InstanceType("db.m3.2xlarge");
        public static InstanceType M4_Large { get; } = new InstanceType("db.m4.large");
        public static InstanceType M4_XLarge { get; } = new InstanceType("db.m4.xlarge");
        public static InstanceType M4_2XLarge { get; } = new InstanceType("db.m4.2xlarge");
        public static InstanceType M4_4XLarge { get; } = new InstanceType("db.m4.4xlarge");
        public static InstanceType M4_10XLarge { get; } = new InstanceType("db.m4.10xlarge");
        public static InstanceType M4_16XLarge { get; } = new InstanceType("db.m4.10xlarge");
        public static InstanceType M5_Large { get; } = new InstanceType("db.m5.large");
        public static InstanceType M5_XLarge { get; } = new InstanceType("db.m5.xlarge");
        public static InstanceType M5_2XLarge { get; } = new InstanceType("db.m5.2xlarge");
        public static InstanceType M5_4XLarge { get; } = new InstanceType("db.m5.4xlarge");
        public static InstanceType M5_12XLarge { get; } = new InstanceType("db.m5.12xlarge");
        public static InstanceType M5_24XLarge { get; } = new InstanceType("db.m5.24xlarge");
        public static InstanceType R3_Large { get; } = new InstanceType("db.r3.large");
        public static InstanceType R3_XLarge { get; } = new InstanceType("db.r3.xlarge");
        public static InstanceType R3_2XLarge { get; } = new InstanceType("db.r3.2xlarge");
        public static InstanceType R3_4XLarge { get; } = new InstanceType("db.r3.4xlarge");
        public static InstanceType R3_8XLarge { get; } = new InstanceType("db.r3.8xlarge");
        public static InstanceType R4_Large { get; } = new InstanceType("db.r4.large");
        public static InstanceType R4_XLarge { get; } = new InstanceType("db.r4.xlarge");
        public static InstanceType R4_2XLarge { get; } = new InstanceType("db.r4.2xlarge");
        public static InstanceType R4_4XLarge { get; } = new InstanceType("db.r4.4xlarge");
        public static InstanceType R4_8XLarge { get; } = new InstanceType("db.r4.8xlarge");
        public static InstanceType R4_16XLarge { get; } = new InstanceType("db.r4.16xlarge");
        public static InstanceType R5_Large { get; } = new InstanceType("db.r5.large");
        public static InstanceType R5_XLarge { get; } = new InstanceType("db.r5.xlarge");
        public static InstanceType R5_2XLarge { get; } = new InstanceType("db.r5.2xlarge");
        public static InstanceType R5_4XLarge { get; } = new InstanceType("db.r5.4xlarge");
        public static InstanceType R5_12XLarge { get; } = new InstanceType("db.r5.12xlarge");
        public static InstanceType R5_24XLarge { get; } = new InstanceType("db.r5.24xlarge");
        public static InstanceType X1_16XLarge { get; } = new InstanceType("db.x1.16xlarge");
        public static InstanceType X1_32XLarge { get; } = new InstanceType("db.x1.32xlarge");
        public static InstanceType X1E_XLarge { get; } = new InstanceType("db.x1e.xlarge");
        public static InstanceType X1E_2XLarge { get; } = new InstanceType("db.x1e.2xlarge");
        public static InstanceType X1E_4XLarge { get; } = new InstanceType("db.x1e.4xlarge");
        public static InstanceType X1E_8XLarge { get; } = new InstanceType("db.x1e.8xlarge");
        public static InstanceType X1E_32XLarge { get; } = new InstanceType("db.x1e.32xlarge");

        public static bool operator ==(InstanceType left, InstanceType right) => left.Equals(right);
        public static bool operator !=(InstanceType left, InstanceType right) => !left.Equals(right);

        public static explicit operator string(InstanceType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is InstanceType other && Equals(other);
        public bool Equals(InstanceType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct StorageType : IEquatable<StorageType>
    {
        private readonly string _value;

        private StorageType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static StorageType Standard { get; } = new StorageType("standard");
        public static StorageType GP2 { get; } = new StorageType("gp2");
        public static StorageType IO1 { get; } = new StorageType("io1");

        public static bool operator ==(StorageType left, StorageType right) => left.Equals(right);
        public static bool operator !=(StorageType left, StorageType right) => !left.Equals(right);

        public static explicit operator string(StorageType value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is StorageType other && Equals(other);
        public bool Equals(StorageType other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
