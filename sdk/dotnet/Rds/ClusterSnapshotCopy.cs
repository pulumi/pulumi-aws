// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    /// <summary>
    /// Manages an RDS database cluster snapshot copy. For managing RDS database instance snapshot copies, see the `aws.rds.SnapshotCopy` resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Rds.Cluster("example", new()
    ///     {
    ///         ClusterIdentifier = "aurora-cluster-demo",
    ///         DatabaseName = "test",
    ///         Engine = Aws.Rds.EngineType.AuroraMysql,
    ///         MasterUsername = "tfacctest",
    ///         MasterPassword = "avoid-plaintext-passwords",
    ///         SkipFinalSnapshot = true,
    ///     });
    /// 
    ///     var exampleClusterSnapshot = new Aws.Rds.ClusterSnapshot("example", new()
    ///     {
    ///         DbClusterIdentifier = example.ClusterIdentifier,
    ///         DbClusterSnapshotIdentifier = "example",
    ///     });
    /// 
    ///     var exampleClusterSnapshotCopy = new Aws.Rds.ClusterSnapshotCopy("example", new()
    ///     {
    ///         SourceDbClusterSnapshotIdentifier = exampleClusterSnapshot.DbClusterSnapshotArn,
    ///         TargetDbClusterSnapshotIdentifier = "example-copy",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import `aws_rds_cluster_snapshot_copy` using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy example my-snapshot
    /// ```
    /// </summary>
    [AwsResourceType("aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy")]
    public partial class ClusterSnapshotCopy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the allocated storage size in gigabytes (GB).
        /// </summary>
        [Output("allocatedStorage")]
        public Output<int> AllocatedStorage { get; private set; } = null!;

        /// <summary>
        /// Whether to copy existing tags. Defaults to `false`.
        /// </summary>
        [Output("copyTags")]
        public Output<bool?> CopyTags { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        /// </summary>
        [Output("dbClusterSnapshotArn")]
        public Output<string> DbClusterSnapshotArn { get; private set; } = null!;

        /// <summary>
        /// The Destination region to place snapshot copy.
        /// </summary>
        [Output("destinationRegion")]
        public Output<string?> DestinationRegion { get; private set; } = null!;

        /// <summary>
        /// Specifies the name of the database engine.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// Specifies the version of the database engine.
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// KMS key ID.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// License model information for the restored DB instance.
        /// </summary>
        [Output("licenseModel")]
        public Output<string> LicenseModel { get; private set; } = null!;

        /// <summary>
        /// URL that contains a Signature Version 4 signed request.
        /// </summary>
        [Output("presignedUrl")]
        public Output<string?> PresignedUrl { get; private set; } = null!;

        /// <summary>
        /// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
        /// </summary>
        [Output("sharedAccounts")]
        public Output<ImmutableArray<string>> SharedAccounts { get; private set; } = null!;

        [Output("snapshotType")]
        public Output<string> SnapshotType { get; private set; } = null!;

        /// <summary>
        /// Identifier of the source snapshot.
        /// </summary>
        [Output("sourceDbClusterSnapshotIdentifier")]
        public Output<string> SourceDbClusterSnapshotIdentifier { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the DB cluster snapshot is encrypted.
        /// </summary>
        [Output("storageEncrypted")]
        public Output<bool> StorageEncrypted { get; private set; } = null!;

        /// <summary>
        /// Specifies the storage type associated with DB cluster snapshot.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Identifier for the snapshot.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("targetDbClusterSnapshotIdentifier")]
        public Output<string> TargetDbClusterSnapshotIdentifier { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ClusterSnapshotCopyTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// Provides the VPC ID associated with the DB cluster snapshot.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ClusterSnapshotCopy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ClusterSnapshotCopy(string name, ClusterSnapshotCopyArgs args, CustomResourceOptions? options = null)
            : base("aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy", name, args ?? new ClusterSnapshotCopyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ClusterSnapshotCopy(string name, Input<string> id, ClusterSnapshotCopyState? state = null, CustomResourceOptions? options = null)
            : base("aws:rds/clusterSnapshotCopy:ClusterSnapshotCopy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ClusterSnapshotCopy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ClusterSnapshotCopy Get(string name, Input<string> id, ClusterSnapshotCopyState? state = null, CustomResourceOptions? options = null)
        {
            return new ClusterSnapshotCopy(name, id, state, options);
        }
    }

    public sealed class ClusterSnapshotCopyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to copy existing tags. Defaults to `false`.
        /// </summary>
        [Input("copyTags")]
        public Input<bool>? CopyTags { get; set; }

        /// <summary>
        /// The Destination region to place snapshot copy.
        /// </summary>
        [Input("destinationRegion")]
        public Input<string>? DestinationRegion { get; set; }

        /// <summary>
        /// KMS key ID.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// URL that contains a Signature Version 4 signed request.
        /// </summary>
        [Input("presignedUrl")]
        public Input<string>? PresignedUrl { get; set; }

        [Input("sharedAccounts")]
        private InputList<string>? _sharedAccounts;

        /// <summary>
        /// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
        /// </summary>
        public InputList<string> SharedAccounts
        {
            get => _sharedAccounts ?? (_sharedAccounts = new InputList<string>());
            set => _sharedAccounts = value;
        }

        /// <summary>
        /// Identifier of the source snapshot.
        /// </summary>
        [Input("sourceDbClusterSnapshotIdentifier", required: true)]
        public Input<string> SourceDbClusterSnapshotIdentifier { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Identifier for the snapshot.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetDbClusterSnapshotIdentifier", required: true)]
        public Input<string> TargetDbClusterSnapshotIdentifier { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.ClusterSnapshotCopyTimeoutsArgs>? Timeouts { get; set; }

        public ClusterSnapshotCopyArgs()
        {
        }
        public static new ClusterSnapshotCopyArgs Empty => new ClusterSnapshotCopyArgs();
    }

    public sealed class ClusterSnapshotCopyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the allocated storage size in gigabytes (GB).
        /// </summary>
        [Input("allocatedStorage")]
        public Input<int>? AllocatedStorage { get; set; }

        /// <summary>
        /// Whether to copy existing tags. Defaults to `false`.
        /// </summary>
        [Input("copyTags")]
        public Input<bool>? CopyTags { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        /// </summary>
        [Input("dbClusterSnapshotArn")]
        public Input<string>? DbClusterSnapshotArn { get; set; }

        /// <summary>
        /// The Destination region to place snapshot copy.
        /// </summary>
        [Input("destinationRegion")]
        public Input<string>? DestinationRegion { get; set; }

        /// <summary>
        /// Specifies the name of the database engine.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// Specifies the version of the database engine.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// KMS key ID.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// License model information for the restored DB instance.
        /// </summary>
        [Input("licenseModel")]
        public Input<string>? LicenseModel { get; set; }

        /// <summary>
        /// URL that contains a Signature Version 4 signed request.
        /// </summary>
        [Input("presignedUrl")]
        public Input<string>? PresignedUrl { get; set; }

        [Input("sharedAccounts")]
        private InputList<string>? _sharedAccounts;

        /// <summary>
        /// List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
        /// </summary>
        public InputList<string> SharedAccounts
        {
            get => _sharedAccounts ?? (_sharedAccounts = new InputList<string>());
            set => _sharedAccounts = value;
        }

        [Input("snapshotType")]
        public Input<string>? SnapshotType { get; set; }

        /// <summary>
        /// Identifier of the source snapshot.
        /// </summary>
        [Input("sourceDbClusterSnapshotIdentifier")]
        public Input<string>? SourceDbClusterSnapshotIdentifier { get; set; }

        /// <summary>
        /// Specifies whether the DB cluster snapshot is encrypted.
        /// </summary>
        [Input("storageEncrypted")]
        public Input<bool>? StorageEncrypted { get; set; }

        /// <summary>
        /// Specifies the storage type associated with DB cluster snapshot.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Identifier for the snapshot.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("targetDbClusterSnapshotIdentifier")]
        public Input<string>? TargetDbClusterSnapshotIdentifier { get; set; }

        [Input("timeouts")]
        public Input<Inputs.ClusterSnapshotCopyTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// Provides the VPC ID associated with the DB cluster snapshot.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ClusterSnapshotCopyState()
        {
        }
        public static new ClusterSnapshotCopyState Empty => new ClusterSnapshotCopyState();
    }
}
