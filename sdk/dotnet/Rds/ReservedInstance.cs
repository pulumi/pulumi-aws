// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    [AwsResourceType("aws:rds/reservedInstance:ReservedInstance")]
    public partial class ReservedInstance : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("currencyCode")]
        public Output<string> CurrencyCode { get; private set; } = null!;

        [Output("dbInstanceClass")]
        public Output<string> DbInstanceClass { get; private set; } = null!;

        [Output("duration")]
        public Output<int> Duration { get; private set; } = null!;

        [Output("fixedPrice")]
        public Output<double> FixedPrice { get; private set; } = null!;

        [Output("instanceCount")]
        public Output<int?> InstanceCount { get; private set; } = null!;

        [Output("leaseId")]
        public Output<string> LeaseId { get; private set; } = null!;

        [Output("multiAz")]
        public Output<bool> MultiAz { get; private set; } = null!;

        [Output("offeringId")]
        public Output<string> OfferingId { get; private set; } = null!;

        [Output("offeringType")]
        public Output<string> OfferingType { get; private set; } = null!;

        [Output("productDescription")]
        public Output<string> ProductDescription { get; private set; } = null!;

        [Output("recurringCharges")]
        public Output<ImmutableArray<Outputs.ReservedInstanceRecurringCharge>> RecurringCharges { get; private set; } = null!;

        [Output("reservationId")]
        public Output<string?> ReservationId { get; private set; } = null!;

        [Output("startTime")]
        public Output<string> StartTime { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("usagePrice")]
        public Output<double> UsagePrice { get; private set; } = null!;


        /// <summary>
        /// Create a ReservedInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReservedInstance(string name, ReservedInstanceArgs args, CustomResourceOptions? options = null)
            : base("aws:rds/reservedInstance:ReservedInstance", name, args ?? new ReservedInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReservedInstance(string name, Input<string> id, ReservedInstanceState? state = null, CustomResourceOptions? options = null)
            : base("aws:rds/reservedInstance:ReservedInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReservedInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReservedInstance Get(string name, Input<string> id, ReservedInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new ReservedInstance(name, id, state, options);
        }
    }

    public sealed class ReservedInstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("instanceCount")]
        public Input<int>? InstanceCount { get; set; }

        [Input("offeringId", required: true)]
        public Input<string> OfferingId { get; set; } = null!;

        [Input("reservationId")]
        public Input<string>? ReservationId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ReservedInstanceArgs()
        {
        }
        public static new ReservedInstanceArgs Empty => new ReservedInstanceArgs();
    }

    public sealed class ReservedInstanceState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("currencyCode")]
        public Input<string>? CurrencyCode { get; set; }

        [Input("dbInstanceClass")]
        public Input<string>? DbInstanceClass { get; set; }

        [Input("duration")]
        public Input<int>? Duration { get; set; }

        [Input("fixedPrice")]
        public Input<double>? FixedPrice { get; set; }

        [Input("instanceCount")]
        public Input<int>? InstanceCount { get; set; }

        [Input("leaseId")]
        public Input<string>? LeaseId { get; set; }

        [Input("multiAz")]
        public Input<bool>? MultiAz { get; set; }

        [Input("offeringId")]
        public Input<string>? OfferingId { get; set; }

        [Input("offeringType")]
        public Input<string>? OfferingType { get; set; }

        [Input("productDescription")]
        public Input<string>? ProductDescription { get; set; }

        [Input("recurringCharges")]
        private InputList<Inputs.ReservedInstanceRecurringChargeGetArgs>? _recurringCharges;
        public InputList<Inputs.ReservedInstanceRecurringChargeGetArgs> RecurringCharges
        {
            get => _recurringCharges ?? (_recurringCharges = new InputList<Inputs.ReservedInstanceRecurringChargeGetArgs>());
            set => _recurringCharges = value;
        }

        [Input("reservationId")]
        public Input<string>? ReservationId { get; set; }

        [Input("startTime")]
        public Input<string>? StartTime { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("usagePrice")]
        public Input<double>? UsagePrice { get; set; }

        public ReservedInstanceState()
        {
        }
        public static new ReservedInstanceState Empty => new ReservedInstanceState();
    }
}
