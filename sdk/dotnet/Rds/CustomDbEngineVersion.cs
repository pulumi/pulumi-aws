// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    /// <summary>
    /// Provides an custom engine version (CEV) resource for Amazon RDS Custom. For additional information, see [Working with CEVs for RDS Custom for Oracle](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html) and [Working with CEVs for RDS Custom for SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev-sqlserver.html) in the the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html).
    /// 
    /// ## Example Usage
    /// ### RDS Custom for Oracle Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleKey = new Aws.Kms.Key("exampleKey", new()
    ///     {
    ///         Description = "KMS symmetric key for RDS Custom for Oracle",
    ///     });
    /// 
    ///     var exampleCustomDbEngineVersion = new Aws.Rds.CustomDbEngineVersion("exampleCustomDbEngineVersion", new()
    ///     {
    ///         DatabaseInstallationFilesS3BucketName = "DOC-EXAMPLE-BUCKET",
    ///         DatabaseInstallationFilesS3Prefix = "1915_GI/",
    ///         Engine = "custom-oracle-ee-cdb",
    ///         EngineVersion = "19.cdb_cev1",
    ///         KmsKeyId = exampleKey.Arn,
    ///         Manifest = @"  {
    /// 	""databaseInstallationFileNames"":[""V982063-01.zip""]
    ///   }
    /// ",
    ///         Tags = 
    ///         {
    ///             { "Name", "example" },
    ///             { "Key", "value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### RDS Custom for Oracle External Manifest Usage
    /// 
    /// ```csharp
    /// using System;
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using System.Security.Cryptography;
    /// using System.Text;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// 	
    /// string ComputeFileBase64Sha256(string path) 
    /// {
    ///     var fileData = Encoding.UTF8.GetBytes(File.ReadAllText(path));
    ///     var hashData = SHA256.Create().ComputeHash(fileData);
    ///     return Convert.ToBase64String(hashData);
    /// }
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleKey = new Aws.Kms.Key("exampleKey", new()
    ///     {
    ///         Description = "KMS symmetric key for RDS Custom for Oracle",
    ///     });
    /// 
    ///     var exampleCustomDbEngineVersion = new Aws.Rds.CustomDbEngineVersion("exampleCustomDbEngineVersion", new()
    ///     {
    ///         DatabaseInstallationFilesS3BucketName = "DOC-EXAMPLE-BUCKET",
    ///         DatabaseInstallationFilesS3Prefix = "1915_GI/",
    ///         Engine = "custom-oracle-ee-cdb",
    ///         EngineVersion = "19.cdb_cev1",
    ///         KmsKeyId = exampleKey.Arn,
    ///         Filename = "manifest_1915_GI.json",
    ///         ManifestHash = ComputeFileBase64Sha256(manifest_1915_GI.Json),
    ///         Tags = 
    ///         {
    ///             { "Name", "example" },
    ///             { "Key", "value" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### RDS Custom for SQL Server Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // CEV creation requires an AMI owned by the operator
    ///     var test = new Aws.Rds.CustomDbEngineVersion("test", new()
    ///     {
    ///         Engine = "custom-sqlserver-se",
    ///         EngineVersion = "15.00.4249.2.cev-1",
    ///         SourceImageId = "ami-0aa12345678a12ab1",
    ///     });
    /// 
    /// });
    /// ```
    /// ### RDS Custom for SQL Server Usage with AMI from another region
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ec2.AmiCopy("example", new()
    ///     {
    ///         Description = "A copy of ami-xxxxxxxx",
    ///         SourceAmiId = "ami-xxxxxxxx",
    ///         SourceAmiRegion = "us-east-1",
    ///     });
    /// 
    ///     // CEV creation requires an AMI owned by the operator
    ///     var test = new Aws.Rds.CustomDbEngineVersion("test", new()
    ///     {
    ///         Engine = "custom-sqlserver-se",
    ///         EngineVersion = "15.00.4249.2.cev-1",
    ///         SourceImageId = example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import custom engine versions for Amazon RDS custom using the `engine` and `engine_version` separated by a colon (`:`). For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:rds/customDbEngineVersion:CustomDbEngineVersion example custom-oracle-ee-cdb:19.cdb_cev1
    /// ```
    /// </summary>
    [AwsResourceType("aws:rds/customDbEngineVersion:CustomDbEngineVersion")]
    public partial class CustomDbEngineVersion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the custom engine version.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The date and time that the CEV was created.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The name of the Amazon S3 bucket that contains the database installation files.
        /// </summary>
        [Output("databaseInstallationFilesS3BucketName")]
        public Output<string?> DatabaseInstallationFilesS3BucketName { get; private set; } = null!;

        /// <summary>
        /// The prefix for the Amazon S3 bucket that contains the database installation files.
        /// </summary>
        [Output("databaseInstallationFilesS3Prefix")]
        public Output<string?> DatabaseInstallationFilesS3Prefix { get; private set; } = null!;

        /// <summary>
        /// The name of the DB parameter group family for the CEV.
        /// </summary>
        [Output("dbParameterGroupFamily")]
        public Output<string> DbParameterGroupFamily { get; private set; } = null!;

        /// <summary>
        /// The description of the CEV.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The version of the database engine.
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the manifest file within the local filesystem. Conflicts with `manifest`.
        /// </summary>
        [Output("filename")]
        public Output<string?> Filename { get; private set; } = null!;

        /// <summary>
        /// The ID of the AMI that was created with the CEV.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
        /// </summary>
        [Output("kmsKeyId")]
        public Output<string> KmsKeyId { get; private set; } = null!;

        /// <summary>
        /// The major version of the database engine.
        /// </summary>
        [Output("majorEngineVersion")]
        public Output<string> MajorEngineVersion { get; private set; } = null!;

        /// <summary>
        /// The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
        /// </summary>
        [Output("manifest")]
        public Output<string?> Manifest { get; private set; } = null!;

        /// <summary>
        /// The returned manifest file, in JSON format, service generated and often different from input `manifest`.
        /// </summary>
        [Output("manifestComputed")]
        public Output<string> ManifestComputed { get; private set; } = null!;

        /// <summary>
        /// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
        /// </summary>
        [Output("manifestHash")]
        public Output<string?> ManifestHash { get; private set; } = null!;

        /// <summary>
        /// The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
        /// </summary>
        [Output("sourceImageId")]
        public Output<string?> SourceImageId { get; private set; } = null!;

        /// <summary>
        /// The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a CustomDbEngineVersion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomDbEngineVersion(string name, CustomDbEngineVersionArgs args, CustomResourceOptions? options = null)
            : base("aws:rds/customDbEngineVersion:CustomDbEngineVersion", name, args ?? new CustomDbEngineVersionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomDbEngineVersion(string name, Input<string> id, CustomDbEngineVersionState? state = null, CustomResourceOptions? options = null)
            : base("aws:rds/customDbEngineVersion:CustomDbEngineVersion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomDbEngineVersion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomDbEngineVersion Get(string name, Input<string> id, CustomDbEngineVersionState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomDbEngineVersion(name, id, state, options);
        }
    }

    public sealed class CustomDbEngineVersionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Amazon S3 bucket that contains the database installation files.
        /// </summary>
        [Input("databaseInstallationFilesS3BucketName")]
        public Input<string>? DatabaseInstallationFilesS3BucketName { get; set; }

        /// <summary>
        /// The prefix for the Amazon S3 bucket that contains the database installation files.
        /// </summary>
        [Input("databaseInstallationFilesS3Prefix")]
        public Input<string>? DatabaseInstallationFilesS3Prefix { get; set; }

        /// <summary>
        /// The description of the CEV.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
        /// </summary>
        [Input("engine", required: true)]
        public Input<string> Engine { get; set; } = null!;

        /// <summary>
        /// The version of the database engine.
        /// </summary>
        [Input("engineVersion", required: true)]
        public Input<string> EngineVersion { get; set; } = null!;

        /// <summary>
        /// The name of the manifest file within the local filesystem. Conflicts with `manifest`.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
        /// </summary>
        [Input("manifest")]
        public Input<string>? Manifest { get; set; }

        /// <summary>
        /// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
        /// </summary>
        [Input("manifestHash")]
        public Input<string>? ManifestHash { get; set; }

        /// <summary>
        /// The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CustomDbEngineVersionArgs()
        {
        }
        public static new CustomDbEngineVersionArgs Empty => new CustomDbEngineVersionArgs();
    }

    public sealed class CustomDbEngineVersionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) for the custom engine version.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The date and time that the CEV was created.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The name of the Amazon S3 bucket that contains the database installation files.
        /// </summary>
        [Input("databaseInstallationFilesS3BucketName")]
        public Input<string>? DatabaseInstallationFilesS3BucketName { get; set; }

        /// <summary>
        /// The prefix for the Amazon S3 bucket that contains the database installation files.
        /// </summary>
        [Input("databaseInstallationFilesS3Prefix")]
        public Input<string>? DatabaseInstallationFilesS3Prefix { get; set; }

        /// <summary>
        /// The name of the DB parameter group family for the CEV.
        /// </summary>
        [Input("dbParameterGroupFamily")]
        public Input<string>? DbParameterGroupFamily { get; set; }

        /// <summary>
        /// The description of the CEV.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The version of the database engine.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The name of the manifest file within the local filesystem. Conflicts with `manifest`.
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        /// <summary>
        /// The ID of the AMI that was created with the CEV.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// The major version of the database engine.
        /// </summary>
        [Input("majorEngineVersion")]
        public Input<string>? MajorEngineVersion { get; set; }

        /// <summary>
        /// The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
        /// </summary>
        [Input("manifest")]
        public Input<string>? Manifest { get; set; }

        /// <summary>
        /// The returned manifest file, in JSON format, service generated and often different from input `manifest`.
        /// </summary>
        [Input("manifestComputed")]
        public Input<string>? ManifestComputed { get; set; }

        /// <summary>
        /// Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
        /// </summary>
        [Input("manifestHash")]
        public Input<string>? ManifestHash { get; set; }

        /// <summary>
        /// The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
        /// </summary>
        [Input("sourceImageId")]
        public Input<string>? SourceImageId { get; set; }

        /// <summary>
        /// The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        public CustomDbEngineVersionState()
        {
        }
        public static new CustomDbEngineVersionState Empty => new CustomDbEngineVersionState();
    }
}
