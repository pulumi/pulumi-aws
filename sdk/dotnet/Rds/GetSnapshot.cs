// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    public static class GetSnapshot
    {
        /// <summary>
        /// Use this data source to get information about a DB Snapshot for use when provisioning DB instances
        /// 
        /// &gt; **NOTE:** This data source does not apply to snapshots created on Aurora DB clusters.
        /// See the `aws.rds.ClusterSnapshot` data source for DB Cluster snapshots.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const prod = new aws.rds.Instance("prod", {
        ///     allocatedStorage: 10,
        ///     engine: "mysql",
        ///     engineVersion: "5.6.17",
        ///     instanceClass: "db.t2.micro",
        ///     name: "mydb",
        ///     username: "foo",
        ///     password: "bar",
        ///     dbSubnetGroupName: "my_database_subnet_group",
        ///     parameterGroupName: "default.mysql5.6",
        /// });
        /// const latestProdSnapshot = aws.rds.getSnapshotOutput({
        ///     dbInstanceIdentifier: prod.id,
        ///     mostRecent: true,
        /// });
        /// // Use the latest production snapshot to create a dev instance.
        /// const dev = new aws.rds.Instance("dev", {
        ///     instanceClass: "db.t2.micro",
        ///     name: "mydbdev",
        ///     snapshotIdentifier: latestProdSnapshot.apply(latestProdSnapshot =&gt; latestProdSnapshot.id),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// prod = aws.rds.Instance("prod",
        ///     allocated_storage=10,
        ///     engine="mysql",
        ///     engine_version="5.6.17",
        ///     instance_class="db.t2.micro",
        ///     name="mydb",
        ///     username="foo",
        ///     password="bar",
        ///     db_subnet_group_name="my_database_subnet_group",
        ///     parameter_group_name="default.mysql5.6")
        /// latest_prod_snapshot = aws.rds.get_snapshot_output(db_instance_identifier=prod.id,
        ///     most_recent=True)
        /// # Use the latest production snapshot to create a dev instance.
        /// dev = aws.rds.Instance("dev",
        ///     instance_class="db.t2.micro",
        ///     name="mydbdev",
        ///     snapshot_identifier=latest_prod_snapshot.id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod = new Aws.Rds.Instance("prod", new()
        ///     {
        ///         AllocatedStorage = 10,
        ///         Engine = "mysql",
        ///         EngineVersion = "5.6.17",
        ///         InstanceClass = "db.t2.micro",
        ///         Name = "mydb",
        ///         Username = "foo",
        ///         Password = "bar",
        ///         DbSubnetGroupName = "my_database_subnet_group",
        ///         ParameterGroupName = "default.mysql5.6",
        ///     });
        /// 
        ///     var latestProdSnapshot = Aws.Rds.GetSnapshot.Invoke(new()
        ///     {
        ///         DbInstanceIdentifier = prod.Id,
        ///         MostRecent = true,
        ///     });
        /// 
        ///     // Use the latest production snapshot to create a dev instance.
        ///     var dev = new Aws.Rds.Instance("dev", new()
        ///     {
        ///         InstanceClass = "db.t2.micro",
        ///         Name = "mydbdev",
        ///         SnapshotIdentifier = latestProdSnapshot.Apply(getSnapshotResult =&gt; getSnapshotResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/rds"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		prod, err := rds.NewInstance(ctx, "prod", &amp;rds.InstanceArgs{
        /// 			AllocatedStorage:   pulumi.Int(10),
        /// 			Engine:             pulumi.String("mysql"),
        /// 			EngineVersion:      pulumi.String("5.6.17"),
        /// 			InstanceClass:      pulumi.String("db.t2.micro"),
        /// 			Name:               pulumi.String("mydb"),
        /// 			Username:           pulumi.String("foo"),
        /// 			Password:           pulumi.String("bar"),
        /// 			DbSubnetGroupName:  pulumi.String("my_database_subnet_group"),
        /// 			ParameterGroupName: pulumi.String("default.mysql5.6"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		latestProdSnapshot := rds.LookupSnapshotOutput(ctx, rds.GetSnapshotOutputArgs{
        /// 			DbInstanceIdentifier: prod.ID(),
        /// 			MostRecent:           pulumi.Bool(true),
        /// 		}, nil)
        /// 		_, err = rds.NewInstance(ctx, "dev", &amp;rds.InstanceArgs{
        /// 			InstanceClass: pulumi.String("db.t2.micro"),
        /// 			Name:          pulumi.String("mydbdev"),
        /// 			SnapshotIdentifier: latestProdSnapshot.ApplyT(func(latestProdSnapshot rds.GetSnapshotResult) (*string, error) {
        /// 				return &amp;latestProdSnapshot.Id, nil
        /// 			}).(pulumi.StringPtrOutput),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.rds.Instance;
        /// import com.pulumi.aws.rds.InstanceArgs;
        /// import com.pulumi.aws.rds.RdsFunctions;
        /// import com.pulumi.aws.rds.inputs.GetSnapshotArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         var prod = new Instance("prod", InstanceArgs.builder()        
        ///             .allocatedStorage(10)
        ///             .engine("mysql")
        ///             .engineVersion("5.6.17")
        ///             .instanceClass("db.t2.micro")
        ///             .name("mydb")
        ///             .username("foo")
        ///             .password("bar")
        ///             .dbSubnetGroupName("my_database_subnet_group")
        ///             .parameterGroupName("default.mysql5.6")
        ///             .build());
        /// 
        ///         final var latestProdSnapshot = RdsFunctions.getSnapshot(GetSnapshotArgs.builder()
        ///             .dbInstanceIdentifier(prod.id())
        ///             .mostRecent(true)
        ///             .build());
        /// 
        ///         var dev = new Instance("dev", InstanceArgs.builder()        
        ///             .instanceClass("db.t2.micro")
        ///             .name("mydbdev")
        ///             .snapshotIdentifier(latestProdSnapshot.applyValue(getSnapshotResult -&gt; getSnapshotResult).applyValue(latestProdSnapshot -&gt; latestProdSnapshot.applyValue(getSnapshotResult -&gt; getSnapshotResult.id())))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   prod:
        ///     type: aws:rds:Instance
        ///     properties:
        ///       allocatedStorage: 10
        ///       engine: mysql
        ///       engineVersion: 5.6.17
        ///       instanceClass: db.t2.micro
        ///       name: mydb
        ///       username: foo
        ///       password: bar
        ///       dbSubnetGroupName: my_database_subnet_group
        ///       parameterGroupName: default.mysql5.6
        ///   # Use the latest production snapshot to create a dev instance.
        ///   dev:
        ///     type: aws:rds:Instance
        ///     properties:
        ///       instanceClass: db.t2.micro
        ///       name: mydbdev
        ///       snapshotIdentifier: ${latestProdSnapshot.id}
        /// variables:
        ///   latestProdSnapshot:
        ///     fn::invoke:
        ///       Function: aws:rds:getSnapshot
        ///       Arguments:
        ///         dbInstanceIdentifier: ${prod.id}
        ///         mostRecent: true
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSnapshotResult> InvokeAsync(GetSnapshotArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotResult>("aws:rds/getSnapshot:getSnapshot", args ?? new GetSnapshotArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a DB Snapshot for use when provisioning DB instances
        /// 
        /// &gt; **NOTE:** This data source does not apply to snapshots created on Aurora DB clusters.
        /// See the `aws.rds.ClusterSnapshot` data source for DB Cluster snapshots.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const prod = new aws.rds.Instance("prod", {
        ///     allocatedStorage: 10,
        ///     engine: "mysql",
        ///     engineVersion: "5.6.17",
        ///     instanceClass: "db.t2.micro",
        ///     name: "mydb",
        ///     username: "foo",
        ///     password: "bar",
        ///     dbSubnetGroupName: "my_database_subnet_group",
        ///     parameterGroupName: "default.mysql5.6",
        /// });
        /// const latestProdSnapshot = aws.rds.getSnapshotOutput({
        ///     dbInstanceIdentifier: prod.id,
        ///     mostRecent: true,
        /// });
        /// // Use the latest production snapshot to create a dev instance.
        /// const dev = new aws.rds.Instance("dev", {
        ///     instanceClass: "db.t2.micro",
        ///     name: "mydbdev",
        ///     snapshotIdentifier: latestProdSnapshot.apply(latestProdSnapshot =&gt; latestProdSnapshot.id),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// prod = aws.rds.Instance("prod",
        ///     allocated_storage=10,
        ///     engine="mysql",
        ///     engine_version="5.6.17",
        ///     instance_class="db.t2.micro",
        ///     name="mydb",
        ///     username="foo",
        ///     password="bar",
        ///     db_subnet_group_name="my_database_subnet_group",
        ///     parameter_group_name="default.mysql5.6")
        /// latest_prod_snapshot = aws.rds.get_snapshot_output(db_instance_identifier=prod.id,
        ///     most_recent=True)
        /// # Use the latest production snapshot to create a dev instance.
        /// dev = aws.rds.Instance("dev",
        ///     instance_class="db.t2.micro",
        ///     name="mydbdev",
        ///     snapshot_identifier=latest_prod_snapshot.id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var prod = new Aws.Rds.Instance("prod", new()
        ///     {
        ///         AllocatedStorage = 10,
        ///         Engine = "mysql",
        ///         EngineVersion = "5.6.17",
        ///         InstanceClass = "db.t2.micro",
        ///         Name = "mydb",
        ///         Username = "foo",
        ///         Password = "bar",
        ///         DbSubnetGroupName = "my_database_subnet_group",
        ///         ParameterGroupName = "default.mysql5.6",
        ///     });
        /// 
        ///     var latestProdSnapshot = Aws.Rds.GetSnapshot.Invoke(new()
        ///     {
        ///         DbInstanceIdentifier = prod.Id,
        ///         MostRecent = true,
        ///     });
        /// 
        ///     // Use the latest production snapshot to create a dev instance.
        ///     var dev = new Aws.Rds.Instance("dev", new()
        ///     {
        ///         InstanceClass = "db.t2.micro",
        ///         Name = "mydbdev",
        ///         SnapshotIdentifier = latestProdSnapshot.Apply(getSnapshotResult =&gt; getSnapshotResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/rds"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		prod, err := rds.NewInstance(ctx, "prod", &amp;rds.InstanceArgs{
        /// 			AllocatedStorage:   pulumi.Int(10),
        /// 			Engine:             pulumi.String("mysql"),
        /// 			EngineVersion:      pulumi.String("5.6.17"),
        /// 			InstanceClass:      pulumi.String("db.t2.micro"),
        /// 			Name:               pulumi.String("mydb"),
        /// 			Username:           pulumi.String("foo"),
        /// 			Password:           pulumi.String("bar"),
        /// 			DbSubnetGroupName:  pulumi.String("my_database_subnet_group"),
        /// 			ParameterGroupName: pulumi.String("default.mysql5.6"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		latestProdSnapshot := rds.LookupSnapshotOutput(ctx, rds.GetSnapshotOutputArgs{
        /// 			DbInstanceIdentifier: prod.ID(),
        /// 			MostRecent:           pulumi.Bool(true),
        /// 		}, nil)
        /// 		_, err = rds.NewInstance(ctx, "dev", &amp;rds.InstanceArgs{
        /// 			InstanceClass: pulumi.String("db.t2.micro"),
        /// 			Name:          pulumi.String("mydbdev"),
        /// 			SnapshotIdentifier: latestProdSnapshot.ApplyT(func(latestProdSnapshot rds.GetSnapshotResult) (*string, error) {
        /// 				return &amp;latestProdSnapshot.Id, nil
        /// 			}).(pulumi.StringPtrOutput),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.rds.Instance;
        /// import com.pulumi.aws.rds.InstanceArgs;
        /// import com.pulumi.aws.rds.RdsFunctions;
        /// import com.pulumi.aws.rds.inputs.GetSnapshotArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         var prod = new Instance("prod", InstanceArgs.builder()        
        ///             .allocatedStorage(10)
        ///             .engine("mysql")
        ///             .engineVersion("5.6.17")
        ///             .instanceClass("db.t2.micro")
        ///             .name("mydb")
        ///             .username("foo")
        ///             .password("bar")
        ///             .dbSubnetGroupName("my_database_subnet_group")
        ///             .parameterGroupName("default.mysql5.6")
        ///             .build());
        /// 
        ///         final var latestProdSnapshot = RdsFunctions.getSnapshot(GetSnapshotArgs.builder()
        ///             .dbInstanceIdentifier(prod.id())
        ///             .mostRecent(true)
        ///             .build());
        /// 
        ///         var dev = new Instance("dev", InstanceArgs.builder()        
        ///             .instanceClass("db.t2.micro")
        ///             .name("mydbdev")
        ///             .snapshotIdentifier(latestProdSnapshot.applyValue(getSnapshotResult -&gt; getSnapshotResult).applyValue(latestProdSnapshot -&gt; latestProdSnapshot.applyValue(getSnapshotResult -&gt; getSnapshotResult.id())))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   prod:
        ///     type: aws:rds:Instance
        ///     properties:
        ///       allocatedStorage: 10
        ///       engine: mysql
        ///       engineVersion: 5.6.17
        ///       instanceClass: db.t2.micro
        ///       name: mydb
        ///       username: foo
        ///       password: bar
        ///       dbSubnetGroupName: my_database_subnet_group
        ///       parameterGroupName: default.mysql5.6
        ///   # Use the latest production snapshot to create a dev instance.
        ///   dev:
        ///     type: aws:rds:Instance
        ///     properties:
        ///       instanceClass: db.t2.micro
        ///       name: mydbdev
        ///       snapshotIdentifier: ${latestProdSnapshot.id}
        /// variables:
        ///   latestProdSnapshot:
        ///     fn::invoke:
        ///       Function: aws:rds:getSnapshot
        ///       Arguments:
        ///         dbInstanceIdentifier: ${prod.id}
        ///         mostRecent: true
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSnapshotResult> Invoke(GetSnapshotInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotResult>("aws:rds/getSnapshot:getSnapshot", args ?? new GetSnapshotInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Returns the list of snapshots created by the specific db_instance
        /// </summary>
        [Input("dbInstanceIdentifier")]
        public string? DbInstanceIdentifier { get; set; }

        /// <summary>
        /// Returns information on a specific snapshot_id.
        /// </summary>
        [Input("dbSnapshotIdentifier")]
        public string? DbSnapshotIdentifier { get; set; }

        /// <summary>
        /// Set this value to true to include manual DB snapshots that are public and can be
        /// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
        /// </summary>
        [Input("includePublic")]
        public bool? IncludePublic { get; set; }

        /// <summary>
        /// Set this value to true to include shared manual DB snapshots from other
        /// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
        /// The default is `false`.
        /// </summary>
        [Input("includeShared")]
        public bool? IncludeShared { get; set; }

        /// <summary>
        /// If more than one result is returned, use the most
        /// recent Snapshot.
        /// </summary>
        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        /// <summary>
        /// Type of snapshots to be returned. If you don't specify a SnapshotType
        /// value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not
        /// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
        /// </summary>
        [Input("snapshotType")]
        public string? SnapshotType { get; set; }

        public GetSnapshotArgs()
        {
        }
        public static new GetSnapshotArgs Empty => new GetSnapshotArgs();
    }

    public sealed class GetSnapshotInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Returns the list of snapshots created by the specific db_instance
        /// </summary>
        [Input("dbInstanceIdentifier")]
        public Input<string>? DbInstanceIdentifier { get; set; }

        /// <summary>
        /// Returns information on a specific snapshot_id.
        /// </summary>
        [Input("dbSnapshotIdentifier")]
        public Input<string>? DbSnapshotIdentifier { get; set; }

        /// <summary>
        /// Set this value to true to include manual DB snapshots that are public and can be
        /// copied or restored by any AWS account, otherwise set this value to false. The default is `false`.
        /// </summary>
        [Input("includePublic")]
        public Input<bool>? IncludePublic { get; set; }

        /// <summary>
        /// Set this value to true to include shared manual DB snapshots from other
        /// AWS accounts that this AWS account has been given permission to copy or restore, otherwise set this value to false.
        /// The default is `false`.
        /// </summary>
        [Input("includeShared")]
        public Input<bool>? IncludeShared { get; set; }

        /// <summary>
        /// If more than one result is returned, use the most
        /// recent Snapshot.
        /// </summary>
        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        /// <summary>
        /// Type of snapshots to be returned. If you don't specify a SnapshotType
        /// value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not
        /// included in the returned results by default. Possible values are, `automated`, `manual`, `shared`, `public` and `awsbackup`.
        /// </summary>
        [Input("snapshotType")]
        public Input<string>? SnapshotType { get; set; }

        public GetSnapshotInvokeArgs()
        {
        }
        public static new GetSnapshotInvokeArgs Empty => new GetSnapshotInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotResult
    {
        /// <summary>
        /// Allocated storage size in gigabytes (GB).
        /// </summary>
        public readonly int AllocatedStorage;
        /// <summary>
        /// Name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
        /// </summary>
        public readonly string AvailabilityZone;
        public readonly string? DbInstanceIdentifier;
        /// <summary>
        /// ARN for the DB snapshot.
        /// </summary>
        public readonly string DbSnapshotArn;
        public readonly string? DbSnapshotIdentifier;
        /// <summary>
        /// Whether the DB snapshot is encrypted.
        /// </summary>
        public readonly bool Encrypted;
        /// <summary>
        /// Name of the database engine.
        /// </summary>
        public readonly string Engine;
        /// <summary>
        /// Version of the database engine.
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludePublic;
        public readonly bool? IncludeShared;
        /// <summary>
        /// Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
        /// </summary>
        public readonly int Iops;
        /// <summary>
        /// ARN for the KMS encryption key.
        /// </summary>
        public readonly string KmsKeyId;
        /// <summary>
        /// License model information for the restored DB instance.
        /// </summary>
        public readonly string LicenseModel;
        public readonly bool? MostRecent;
        /// <summary>
        /// Provides the option group name for the DB snapshot.
        /// </summary>
        public readonly string OptionGroupName;
        public readonly int Port;
        /// <summary>
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        /// </summary>
        public readonly string SnapshotCreateTime;
        public readonly string? SnapshotType;
        /// <summary>
        /// DB snapshot ARN that the DB snapshot was copied from. It only has value in case of cross customer or cross region copy.
        /// </summary>
        public readonly string SourceDbSnapshotIdentifier;
        /// <summary>
        /// Region that the DB snapshot was created in or copied from.
        /// </summary>
        public readonly string SourceRegion;
        /// <summary>
        /// Status of this DB snapshot.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Storage type associated with DB snapshot.
        /// </summary>
        public readonly string StorageType;
        /// <summary>
        /// ID of the VPC associated with the DB snapshot.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetSnapshotResult(
            int allocatedStorage,

            string availabilityZone,

            string? dbInstanceIdentifier,

            string dbSnapshotArn,

            string? dbSnapshotIdentifier,

            bool encrypted,

            string engine,

            string engineVersion,

            string id,

            bool? includePublic,

            bool? includeShared,

            int iops,

            string kmsKeyId,

            string licenseModel,

            bool? mostRecent,

            string optionGroupName,

            int port,

            string snapshotCreateTime,

            string? snapshotType,

            string sourceDbSnapshotIdentifier,

            string sourceRegion,

            string status,

            string storageType,

            string vpcId)
        {
            AllocatedStorage = allocatedStorage;
            AvailabilityZone = availabilityZone;
            DbInstanceIdentifier = dbInstanceIdentifier;
            DbSnapshotArn = dbSnapshotArn;
            DbSnapshotIdentifier = dbSnapshotIdentifier;
            Encrypted = encrypted;
            Engine = engine;
            EngineVersion = engineVersion;
            Id = id;
            IncludePublic = includePublic;
            IncludeShared = includeShared;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            LicenseModel = licenseModel;
            MostRecent = mostRecent;
            OptionGroupName = optionGroupName;
            Port = port;
            SnapshotCreateTime = snapshotCreateTime;
            SnapshotType = snapshotType;
            SourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier;
            SourceRegion = sourceRegion;
            Status = status;
            StorageType = storageType;
            VpcId = vpcId;
        }
    }
}
