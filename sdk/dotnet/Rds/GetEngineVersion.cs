// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Rds
{
    public static class GetEngineVersion
    {
        /// <summary>
        /// Information about an RDS engine version.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetEngineVersion.Invoke(new()
        ///     {
        ///         Engine = "mysql",
        ///         PreferredVersions = new[]
        ///         {
        ///             "8.0.27",
        ///             "8.0.26",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### With `filter`
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetEngineVersion.Invoke(new()
        ///     {
        ///         Engine = "aurora-postgresql",
        ///         Version = "10.14",
        ///         IncludeAll = true,
        ///         Filters = new[]
        ///         {
        ///             new Aws.Rds.Inputs.GetEngineVersionFilterInputArgs
        ///             {
        ///                 Name = "engine-mode",
        ///                 Values = new[]
        ///                 {
        ///                     "serverless",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetEngineVersionResult> InvokeAsync(GetEngineVersionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEngineVersionResult>("aws:rds/getEngineVersion:getEngineVersion", args ?? new GetEngineVersionArgs(), options.WithDefaults());

        /// <summary>
        /// Information about an RDS engine version.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetEngineVersion.Invoke(new()
        ///     {
        ///         Engine = "mysql",
        ///         PreferredVersions = new[]
        ///         {
        ///             "8.0.27",
        ///             "8.0.26",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### With `filter`
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Rds.GetEngineVersion.Invoke(new()
        ///     {
        ///         Engine = "aurora-postgresql",
        ///         Version = "10.14",
        ///         IncludeAll = true,
        ///         Filters = new[]
        ///         {
        ///             new Aws.Rds.Inputs.GetEngineVersionFilterInputArgs
        ///             {
        ///                 Name = "engine-mode",
        ///                 Values = new[]
        ///                 {
        ///                     "serverless",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetEngineVersionResult> Invoke(GetEngineVersionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEngineVersionResult>("aws:rds/getEngineVersion:getEngineVersion", args ?? new GetEngineVersionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEngineVersionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether the engine version must be an AWS-defined default version. Some engines have multiple default versions, such as for each major version. Using `default_only` may help avoid `multiple RDS engine versions` errors. See also `latest`.
        /// </summary>
        [Input("defaultOnly")]
        public bool? DefaultOnly { get; set; }

        /// <summary>
        /// Database engine. Engine values include `aurora`, `aurora-mysql`, `aurora-postgresql`, `docdb`, `mariadb`, `mysql`, `neptune`, `oracle-ee`, `oracle-se`, `oracle-se1`, `oracle-se2`, `postgres`, `sqlserver-ee`, `sqlserver-ex`, `sqlserver-se`, and `sqlserver-web`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("engine", required: true)]
        public string Engine { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetEngineVersionFilterArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to use in filtering versions. There are several valid keys; for a full reference, check out [describe-db-engine-versions in the AWS CLI reference](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/describe-db-engine-versions.html).
        /// </summary>
        public List<Inputs.GetEngineVersionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEngineVersionFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether the engine version must have one or more major upgrade targets. Not including `has_major_target` or setting it to `false` doesn't imply that there's no corresponding major upgrade target for the engine version.
        /// </summary>
        [Input("hasMajorTarget")]
        public bool? HasMajorTarget { get; set; }

        /// <summary>
        /// Whether the engine version must have one or more minor upgrade targets. Not including `has_minor_target` or setting it to `false` doesn't imply that there's no corresponding minor upgrade target for the engine version.
        /// </summary>
        [Input("hasMinorTarget")]
        public bool? HasMinorTarget { get; set; }

        /// <summary>
        /// Whether the engine version `status` can either be `deprecated` or `available`. When not set or set to `false`, the engine version `status` will always be `available`.
        /// </summary>
        [Input("includeAll")]
        public bool? IncludeAll { get; set; }

        /// <summary>
        /// Whether the engine version is the most recent version matching the other criteria. This is different from `default_only` in important ways: "default" relies on AWS-defined defaults, the latest version isn't always the default, and AWS might have multiple default versions for an engine. As a result, `default_only` might not prevent errors from `multiple RDS engine versions`, while `latest` will. (`latest` can be used with `default_only`.) **Note:** The data source uses a best-effort approach at selecting the latest version. Due to the complexity of version identifiers across engines and incomplete version date information provided by AWS, using `latest` may not always result in the engine version being the actual latest version.
        /// </summary>
        [Input("latest")]
        public bool? Latest { get; set; }

        /// <summary>
        /// Name of a specific database parameter group family. Examples of parameter group families are `mysql8.0`, `mariadb10.4`, and `postgres12`.
        /// </summary>
        [Input("parameterGroupFamily")]
        public string? ParameterGroupFamily { get; set; }

        [Input("preferredMajorTargets")]
        private List<string>? _preferredMajorTargets;

        /// <summary>
        /// Ordered list of preferred major version upgrade targets. The engine version will be the first match in the list unless the `latest` parameter is set to `true`. The engine version will be the default version if you don't include any criteria, such as `preferred_major_targets`.
        /// </summary>
        public List<string> PreferredMajorTargets
        {
            get => _preferredMajorTargets ?? (_preferredMajorTargets = new List<string>());
            set => _preferredMajorTargets = value;
        }

        [Input("preferredUpgradeTargets")]
        private List<string>? _preferredUpgradeTargets;

        /// <summary>
        /// Ordered list of preferred version upgrade targets. The engine version will be the first match in this list unless the `latest` parameter is set to `true`. The engine version will be the default version if you don't include any criteria, such as `preferred_upgrade_targets`.
        /// </summary>
        public List<string> PreferredUpgradeTargets
        {
            get => _preferredUpgradeTargets ?? (_preferredUpgradeTargets = new List<string>());
            set => _preferredUpgradeTargets = value;
        }

        [Input("preferredVersions")]
        private List<string>? _preferredVersions;

        /// <summary>
        /// Ordered list of preferred versions. The engine version will be the first match in this list unless the `latest` parameter is set to `true`. The engine version will be the default version if you don't include any criteria, such as `preferred_versions`.
        /// </summary>
        public List<string> PreferredVersions
        {
            get => _preferredVersions ?? (_preferredVersions = new List<string>());
            set => _preferredVersions = value;
        }

        [Input("version")]
        public string? Version { get; set; }

        public GetEngineVersionArgs()
        {
        }
        public static new GetEngineVersionArgs Empty => new GetEngineVersionArgs();
    }

    public sealed class GetEngineVersionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Whether the engine version must be an AWS-defined default version. Some engines have multiple default versions, such as for each major version. Using `default_only` may help avoid `multiple RDS engine versions` errors. See also `latest`.
        /// </summary>
        [Input("defaultOnly")]
        public Input<bool>? DefaultOnly { get; set; }

        /// <summary>
        /// Database engine. Engine values include `aurora`, `aurora-mysql`, `aurora-postgresql`, `docdb`, `mariadb`, `mysql`, `neptune`, `oracle-ee`, `oracle-se`, `oracle-se1`, `oracle-se2`, `postgres`, `sqlserver-ee`, `sqlserver-ex`, `sqlserver-se`, and `sqlserver-web`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("engine", required: true)]
        public Input<string> Engine { get; set; } = null!;

        [Input("filters")]
        private InputList<Inputs.GetEngineVersionFilterInputArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to use in filtering versions. There are several valid keys; for a full reference, check out [describe-db-engine-versions in the AWS CLI reference](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds/describe-db-engine-versions.html).
        /// </summary>
        public InputList<Inputs.GetEngineVersionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEngineVersionFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether the engine version must have one or more major upgrade targets. Not including `has_major_target` or setting it to `false` doesn't imply that there's no corresponding major upgrade target for the engine version.
        /// </summary>
        [Input("hasMajorTarget")]
        public Input<bool>? HasMajorTarget { get; set; }

        /// <summary>
        /// Whether the engine version must have one or more minor upgrade targets. Not including `has_minor_target` or setting it to `false` doesn't imply that there's no corresponding minor upgrade target for the engine version.
        /// </summary>
        [Input("hasMinorTarget")]
        public Input<bool>? HasMinorTarget { get; set; }

        /// <summary>
        /// Whether the engine version `status` can either be `deprecated` or `available`. When not set or set to `false`, the engine version `status` will always be `available`.
        /// </summary>
        [Input("includeAll")]
        public Input<bool>? IncludeAll { get; set; }

        /// <summary>
        /// Whether the engine version is the most recent version matching the other criteria. This is different from `default_only` in important ways: "default" relies on AWS-defined defaults, the latest version isn't always the default, and AWS might have multiple default versions for an engine. As a result, `default_only` might not prevent errors from `multiple RDS engine versions`, while `latest` will. (`latest` can be used with `default_only`.) **Note:** The data source uses a best-effort approach at selecting the latest version. Due to the complexity of version identifiers across engines and incomplete version date information provided by AWS, using `latest` may not always result in the engine version being the actual latest version.
        /// </summary>
        [Input("latest")]
        public Input<bool>? Latest { get; set; }

        /// <summary>
        /// Name of a specific database parameter group family. Examples of parameter group families are `mysql8.0`, `mariadb10.4`, and `postgres12`.
        /// </summary>
        [Input("parameterGroupFamily")]
        public Input<string>? ParameterGroupFamily { get; set; }

        [Input("preferredMajorTargets")]
        private InputList<string>? _preferredMajorTargets;

        /// <summary>
        /// Ordered list of preferred major version upgrade targets. The engine version will be the first match in the list unless the `latest` parameter is set to `true`. The engine version will be the default version if you don't include any criteria, such as `preferred_major_targets`.
        /// </summary>
        public InputList<string> PreferredMajorTargets
        {
            get => _preferredMajorTargets ?? (_preferredMajorTargets = new InputList<string>());
            set => _preferredMajorTargets = value;
        }

        [Input("preferredUpgradeTargets")]
        private InputList<string>? _preferredUpgradeTargets;

        /// <summary>
        /// Ordered list of preferred version upgrade targets. The engine version will be the first match in this list unless the `latest` parameter is set to `true`. The engine version will be the default version if you don't include any criteria, such as `preferred_upgrade_targets`.
        /// </summary>
        public InputList<string> PreferredUpgradeTargets
        {
            get => _preferredUpgradeTargets ?? (_preferredUpgradeTargets = new InputList<string>());
            set => _preferredUpgradeTargets = value;
        }

        [Input("preferredVersions")]
        private InputList<string>? _preferredVersions;

        /// <summary>
        /// Ordered list of preferred versions. The engine version will be the first match in this list unless the `latest` parameter is set to `true`. The engine version will be the default version if you don't include any criteria, such as `preferred_versions`.
        /// </summary>
        public InputList<string> PreferredVersions
        {
            get => _preferredVersions ?? (_preferredVersions = new InputList<string>());
            set => _preferredVersions = value;
        }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public GetEngineVersionInvokeArgs()
        {
        }
        public static new GetEngineVersionInvokeArgs Empty => new GetEngineVersionInvokeArgs();
    }


    [OutputType]
    public sealed class GetEngineVersionResult
    {
        /// <summary>
        /// Default character set for new instances of the engine version.
        /// </summary>
        public readonly string DefaultCharacterSet;
        public readonly bool? DefaultOnly;
        public readonly string Engine;
        /// <summary>
        /// Description of the engine.
        /// </summary>
        public readonly string EngineDescription;
        /// <summary>
        /// Set of log types that the engine version has available for export to CloudWatch Logs.
        /// </summary>
        public readonly ImmutableArray<string> ExportableLogTypes;
        public readonly ImmutableArray<Outputs.GetEngineVersionFilterResult> Filters;
        public readonly bool? HasMajorTarget;
        public readonly bool? HasMinorTarget;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeAll;
        public readonly bool? Latest;
        public readonly string ParameterGroupFamily;
        public readonly ImmutableArray<string> PreferredMajorTargets;
        public readonly ImmutableArray<string> PreferredUpgradeTargets;
        public readonly ImmutableArray<string> PreferredVersions;
        /// <summary>
        /// Status of the engine version, either `available` or `deprecated`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Set of character sets supported by th engine version.
        /// </summary>
        public readonly ImmutableArray<string> SupportedCharacterSets;
        /// <summary>
        /// Set of features supported by the engine version.
        /// </summary>
        public readonly ImmutableArray<string> SupportedFeatureNames;
        /// <summary>
        /// Set of supported engine version modes.
        /// </summary>
        public readonly ImmutableArray<string> SupportedModes;
        /// <summary>
        /// Set of the time zones supported by the engine version.
        /// </summary>
        public readonly ImmutableArray<string> SupportedTimezones;
        /// <summary>
        /// Whether you can use Aurora global databases with the engine version.
        /// </summary>
        public readonly bool SupportsGlobalDatabases;
        /// <summary>
        /// Whether the engine version supports exporting the log types specified by `exportable_log_types` to CloudWatch Logs.
        /// </summary>
        public readonly bool SupportsLogExportsToCloudwatch;
        /// <summary>
        /// Whether you can use Aurora parallel query with the engine version.
        /// </summary>
        public readonly bool SupportsParallelQuery;
        /// <summary>
        /// Whether the engine version supports read replicas.
        /// </summary>
        public readonly bool SupportsReadReplica;
        /// <summary>
        /// Set of versions that are valid major version upgrades for the engine version.
        /// </summary>
        public readonly ImmutableArray<string> ValidMajorTargets;
        /// <summary>
        /// Set of versions that are valid minor version upgrades for the engine version.
        /// </summary>
        public readonly ImmutableArray<string> ValidMinorTargets;
        /// <summary>
        /// Set of versions that are valid major or minor upgrades for the engine version.
        /// </summary>
        public readonly ImmutableArray<string> ValidUpgradeTargets;
        public readonly string Version;
        /// <summary>
        /// Complete engine version.
        /// </summary>
        public readonly string VersionActual;
        /// <summary>
        /// Description of the engine version.
        /// </summary>
        public readonly string VersionDescription;

        [OutputConstructor]
        private GetEngineVersionResult(
            string defaultCharacterSet,

            bool? defaultOnly,

            string engine,

            string engineDescription,

            ImmutableArray<string> exportableLogTypes,

            ImmutableArray<Outputs.GetEngineVersionFilterResult> filters,

            bool? hasMajorTarget,

            bool? hasMinorTarget,

            string id,

            bool? includeAll,

            bool? latest,

            string parameterGroupFamily,

            ImmutableArray<string> preferredMajorTargets,

            ImmutableArray<string> preferredUpgradeTargets,

            ImmutableArray<string> preferredVersions,

            string status,

            ImmutableArray<string> supportedCharacterSets,

            ImmutableArray<string> supportedFeatureNames,

            ImmutableArray<string> supportedModes,

            ImmutableArray<string> supportedTimezones,

            bool supportsGlobalDatabases,

            bool supportsLogExportsToCloudwatch,

            bool supportsParallelQuery,

            bool supportsReadReplica,

            ImmutableArray<string> validMajorTargets,

            ImmutableArray<string> validMinorTargets,

            ImmutableArray<string> validUpgradeTargets,

            string version,

            string versionActual,

            string versionDescription)
        {
            DefaultCharacterSet = defaultCharacterSet;
            DefaultOnly = defaultOnly;
            Engine = engine;
            EngineDescription = engineDescription;
            ExportableLogTypes = exportableLogTypes;
            Filters = filters;
            HasMajorTarget = hasMajorTarget;
            HasMinorTarget = hasMinorTarget;
            Id = id;
            IncludeAll = includeAll;
            Latest = latest;
            ParameterGroupFamily = parameterGroupFamily;
            PreferredMajorTargets = preferredMajorTargets;
            PreferredUpgradeTargets = preferredUpgradeTargets;
            PreferredVersions = preferredVersions;
            Status = status;
            SupportedCharacterSets = supportedCharacterSets;
            SupportedFeatureNames = supportedFeatureNames;
            SupportedModes = supportedModes;
            SupportedTimezones = supportedTimezones;
            SupportsGlobalDatabases = supportsGlobalDatabases;
            SupportsLogExportsToCloudwatch = supportsLogExportsToCloudwatch;
            SupportsParallelQuery = supportsParallelQuery;
            SupportsReadReplica = supportsReadReplica;
            ValidMajorTargets = validMajorTargets;
            ValidMinorTargets = validMinorTargets;
            ValidUpgradeTargets = validUpgradeTargets;
            Version = version;
            VersionActual = versionActual;
            VersionDescription = versionDescription;
        }
    }
}
