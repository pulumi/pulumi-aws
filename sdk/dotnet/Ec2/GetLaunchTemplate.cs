// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetLaunchTemplate
    {
        /// <summary>
        /// Provides information about a Launch Template.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const default = aws.ec2.getLaunchTemplate({
        ///     name: "my-launch-template",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// default = aws.ec2.get_launch_template(name="my-launch-template")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aws.Ec2.GetLaunchTemplate.Invoke(new()
        ///     {
        ///         Name = "my-launch-template",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupLaunchTemplate(ctx, &amp;ec2.LookupLaunchTemplateArgs{
        /// 			Name: pulumi.StringRef("my-launch-template"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetLaunchTemplateArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var default = Ec2Functions.getLaunchTemplate(GetLaunchTemplateArgs.builder()
        ///             .name("my-launch-template")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   default:
        ///     fn::invoke:
        ///       Function: aws:ec2:getLaunchTemplate
        ///       Arguments:
        ///         name: my-launch-template
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const test = aws.ec2.getLaunchTemplate({
        ///     filters: [{
        ///         name: "launch-template-name",
        ///         values: ["some-template"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test = aws.ec2.get_launch_template(filters=[aws.ec2.GetLaunchTemplateFilterArgs(
        ///     name="launch-template-name",
        ///     values=["some-template"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetLaunchTemplate.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetLaunchTemplateFilterInputArgs
        ///             {
        ///                 Name = "launch-template-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-template",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupLaunchTemplate(ctx, &amp;ec2.LookupLaunchTemplateArgs{
        /// 			Filters: []ec2.GetLaunchTemplateFilter{
        /// 				{
        /// 					Name: "launch-template-name",
        /// 					Values: []string{
        /// 						"some-template",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetLaunchTemplateArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var test = Ec2Functions.getLaunchTemplate(GetLaunchTemplateArgs.builder()
        ///             .filters(GetLaunchTemplateFilterArgs.builder()
        ///                 .name("launch-template-name")
        ///                 .values("some-template")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:ec2:getLaunchTemplate
        ///       Arguments:
        ///         filters:
        ///           - name: launch-template-name
        ///             values:
        ///               - some-template
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLaunchTemplateResult> InvokeAsync(GetLaunchTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLaunchTemplateResult>("aws:ec2/getLaunchTemplate:getLaunchTemplate", args ?? new GetLaunchTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a Launch Template.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const default = aws.ec2.getLaunchTemplate({
        ///     name: "my-launch-template",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// default = aws.ec2.get_launch_template(name="my-launch-template")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aws.Ec2.GetLaunchTemplate.Invoke(new()
        ///     {
        ///         Name = "my-launch-template",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupLaunchTemplate(ctx, &amp;ec2.LookupLaunchTemplateArgs{
        /// 			Name: pulumi.StringRef("my-launch-template"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetLaunchTemplateArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var default = Ec2Functions.getLaunchTemplate(GetLaunchTemplateArgs.builder()
        ///             .name("my-launch-template")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   default:
        ///     fn::invoke:
        ///       Function: aws:ec2:getLaunchTemplate
        ///       Arguments:
        ///         name: my-launch-template
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const test = aws.ec2.getLaunchTemplate({
        ///     filters: [{
        ///         name: "launch-template-name",
        ///         values: ["some-template"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test = aws.ec2.get_launch_template(filters=[aws.ec2.GetLaunchTemplateFilterArgs(
        ///     name="launch-template-name",
        ///     values=["some-template"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetLaunchTemplate.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetLaunchTemplateFilterInputArgs
        ///             {
        ///                 Name = "launch-template-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-template",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupLaunchTemplate(ctx, &amp;ec2.LookupLaunchTemplateArgs{
        /// 			Filters: []ec2.GetLaunchTemplateFilter{
        /// 				{
        /// 					Name: "launch-template-name",
        /// 					Values: []string{
        /// 						"some-template",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetLaunchTemplateArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var test = Ec2Functions.getLaunchTemplate(GetLaunchTemplateArgs.builder()
        ///             .filters(GetLaunchTemplateFilterArgs.builder()
        ///                 .name("launch-template-name")
        ///                 .values("some-template")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:ec2:getLaunchTemplate
        ///       Arguments:
        ///         filters:
        ///           - name: launch-template-name
        ///             values:
        ///               - some-template
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLaunchTemplateResult> Invoke(GetLaunchTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLaunchTemplateResult>("aws:ec2/getLaunchTemplate:getLaunchTemplate", args ?? new GetLaunchTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLaunchTemplateArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetLaunchTemplateFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetLaunchTemplateFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLaunchTemplateFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific launch template to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the launch template.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired Launch Template.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetLaunchTemplateArgs()
        {
        }
        public static new GetLaunchTemplateArgs Empty => new GetLaunchTemplateArgs();
    }

    public sealed class GetLaunchTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetLaunchTemplateFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public InputList<Inputs.GetLaunchTemplateFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetLaunchTemplateFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific launch template to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the launch template.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired Launch Template.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetLaunchTemplateInvokeArgs()
        {
        }
        public static new GetLaunchTemplateInvokeArgs Empty => new GetLaunchTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetLaunchTemplateResult
    {
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateBlockDeviceMappingResult> BlockDeviceMappings;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateCapacityReservationSpecificationResult> CapacityReservationSpecifications;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateCpuOptionResult> CpuOptions;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateCreditSpecificationResult> CreditSpecifications;
        public readonly int DefaultVersion;
        public readonly string Description;
        public readonly bool DisableApiStop;
        public readonly bool DisableApiTermination;
        public readonly string EbsOptimized;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateElasticGpuSpecificationResult> ElasticGpuSpecifications;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateElasticInferenceAcceleratorResult> ElasticInferenceAccelerators;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateEnclaveOptionResult> EnclaveOptions;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateFilterResult> Filters;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateHibernationOptionResult> HibernationOptions;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateIamInstanceProfileResult> IamInstanceProfiles;
        /// <summary>
        /// ID of the launch template.
        /// </summary>
        public readonly string Id;
        public readonly string ImageId;
        public readonly string InstanceInitiatedShutdownBehavior;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateInstanceMarketOptionResult> InstanceMarketOptions;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateInstanceRequirementResult> InstanceRequirements;
        public readonly string InstanceType;
        public readonly string KernelId;
        public readonly string KeyName;
        public readonly int LatestVersion;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateLicenseSpecificationResult> LicenseSpecifications;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateMaintenanceOptionResult> MaintenanceOptions;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateMetadataOptionResult> MetadataOptions;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateMonitoringResult> Monitorings;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateNetworkInterfaceResult> NetworkInterfaces;
        public readonly ImmutableArray<Outputs.GetLaunchTemplatePlacementResult> Placements;
        public readonly ImmutableArray<Outputs.GetLaunchTemplatePrivateDnsNameOptionResult> PrivateDnsNameOptions;
        public readonly string RamDiskId;
        public readonly ImmutableArray<string> SecurityGroupNames;
        public readonly ImmutableArray<Outputs.GetLaunchTemplateTagSpecificationResult> TagSpecifications;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string UserData;
        public readonly ImmutableArray<string> VpcSecurityGroupIds;

        [OutputConstructor]
        private GetLaunchTemplateResult(
            string arn,

            ImmutableArray<Outputs.GetLaunchTemplateBlockDeviceMappingResult> blockDeviceMappings,

            ImmutableArray<Outputs.GetLaunchTemplateCapacityReservationSpecificationResult> capacityReservationSpecifications,

            ImmutableArray<Outputs.GetLaunchTemplateCpuOptionResult> cpuOptions,

            ImmutableArray<Outputs.GetLaunchTemplateCreditSpecificationResult> creditSpecifications,

            int defaultVersion,

            string description,

            bool disableApiStop,

            bool disableApiTermination,

            string ebsOptimized,

            ImmutableArray<Outputs.GetLaunchTemplateElasticGpuSpecificationResult> elasticGpuSpecifications,

            ImmutableArray<Outputs.GetLaunchTemplateElasticInferenceAcceleratorResult> elasticInferenceAccelerators,

            ImmutableArray<Outputs.GetLaunchTemplateEnclaveOptionResult> enclaveOptions,

            ImmutableArray<Outputs.GetLaunchTemplateFilterResult> filters,

            ImmutableArray<Outputs.GetLaunchTemplateHibernationOptionResult> hibernationOptions,

            ImmutableArray<Outputs.GetLaunchTemplateIamInstanceProfileResult> iamInstanceProfiles,

            string id,

            string imageId,

            string instanceInitiatedShutdownBehavior,

            ImmutableArray<Outputs.GetLaunchTemplateInstanceMarketOptionResult> instanceMarketOptions,

            ImmutableArray<Outputs.GetLaunchTemplateInstanceRequirementResult> instanceRequirements,

            string instanceType,

            string kernelId,

            string keyName,

            int latestVersion,

            ImmutableArray<Outputs.GetLaunchTemplateLicenseSpecificationResult> licenseSpecifications,

            ImmutableArray<Outputs.GetLaunchTemplateMaintenanceOptionResult> maintenanceOptions,

            ImmutableArray<Outputs.GetLaunchTemplateMetadataOptionResult> metadataOptions,

            ImmutableArray<Outputs.GetLaunchTemplateMonitoringResult> monitorings,

            string name,

            ImmutableArray<Outputs.GetLaunchTemplateNetworkInterfaceResult> networkInterfaces,

            ImmutableArray<Outputs.GetLaunchTemplatePlacementResult> placements,

            ImmutableArray<Outputs.GetLaunchTemplatePrivateDnsNameOptionResult> privateDnsNameOptions,

            string ramDiskId,

            ImmutableArray<string> securityGroupNames,

            ImmutableArray<Outputs.GetLaunchTemplateTagSpecificationResult> tagSpecifications,

            ImmutableDictionary<string, string> tags,

            string userData,

            ImmutableArray<string> vpcSecurityGroupIds)
        {
            Arn = arn;
            BlockDeviceMappings = blockDeviceMappings;
            CapacityReservationSpecifications = capacityReservationSpecifications;
            CpuOptions = cpuOptions;
            CreditSpecifications = creditSpecifications;
            DefaultVersion = defaultVersion;
            Description = description;
            DisableApiStop = disableApiStop;
            DisableApiTermination = disableApiTermination;
            EbsOptimized = ebsOptimized;
            ElasticGpuSpecifications = elasticGpuSpecifications;
            ElasticInferenceAccelerators = elasticInferenceAccelerators;
            EnclaveOptions = enclaveOptions;
            Filters = filters;
            HibernationOptions = hibernationOptions;
            IamInstanceProfiles = iamInstanceProfiles;
            Id = id;
            ImageId = imageId;
            InstanceInitiatedShutdownBehavior = instanceInitiatedShutdownBehavior;
            InstanceMarketOptions = instanceMarketOptions;
            InstanceRequirements = instanceRequirements;
            InstanceType = instanceType;
            KernelId = kernelId;
            KeyName = keyName;
            LatestVersion = latestVersion;
            LicenseSpecifications = licenseSpecifications;
            MaintenanceOptions = maintenanceOptions;
            MetadataOptions = metadataOptions;
            Monitorings = monitorings;
            Name = name;
            NetworkInterfaces = networkInterfaces;
            Placements = placements;
            PrivateDnsNameOptions = privateDnsNameOptions;
            RamDiskId = ramDiskId;
            SecurityGroupNames = securityGroupNames;
            TagSpecifications = tagSpecifications;
            Tags = tags;
            UserData = userData;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
        }
    }
}
