// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetNetworkInsightsPath
    {
        public static Task<GetNetworkInsightsPathResult> InvokeAsync(GetNetworkInsightsPathArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInsightsPathResult>("aws:ec2/getNetworkInsightsPath:getNetworkInsightsPath", args ?? new GetNetworkInsightsPathArgs(), options.WithDefaults());

        public static Output<GetNetworkInsightsPathResult> Invoke(GetNetworkInsightsPathInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkInsightsPathResult>("aws:ec2/getNetworkInsightsPath:getNetworkInsightsPath", args ?? new GetNetworkInsightsPathInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkInsightsPathArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNetworkInsightsPathFilterArgs>? _filters;
        public List<Inputs.GetNetworkInsightsPathFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNetworkInsightsPathFilterArgs>());
            set => _filters = value;
        }

        [Input("networkInsightsPathId")]
        public string? NetworkInsightsPathId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetNetworkInsightsPathArgs()
        {
        }
        public static new GetNetworkInsightsPathArgs Empty => new GetNetworkInsightsPathArgs();
    }

    public sealed class GetNetworkInsightsPathInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNetworkInsightsPathFilterInputArgs>? _filters;
        public InputList<Inputs.GetNetworkInsightsPathFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNetworkInsightsPathFilterInputArgs>());
            set => _filters = value;
        }

        [Input("networkInsightsPathId")]
        public Input<string>? NetworkInsightsPathId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetNetworkInsightsPathInvokeArgs()
        {
        }
        public static new GetNetworkInsightsPathInvokeArgs Empty => new GetNetworkInsightsPathInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkInsightsPathResult
    {
        public readonly string Arn;
        public readonly string Destination;
        public readonly string DestinationIp;
        public readonly int DestinationPort;
        public readonly ImmutableArray<Outputs.GetNetworkInsightsPathFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NetworkInsightsPathId;
        public readonly string Protocol;
        public readonly string Source;
        public readonly string SourceIp;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetNetworkInsightsPathResult(
            string arn,

            string destination,

            string destinationIp,

            int destinationPort,

            ImmutableArray<Outputs.GetNetworkInsightsPathFilterResult> filters,

            string id,

            string networkInsightsPathId,

            string protocol,

            string source,

            string sourceIp,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            Destination = destination;
            DestinationIp = destinationIp;
            DestinationPort = destinationPort;
            Filters = filters;
            Id = id;
            NetworkInsightsPathId = networkInsightsPathId;
            Protocol = protocol;
            Source = source;
            SourceIp = sourceIp;
            Tags = tags;
        }
    }
}
