// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSubnets
    {
        /// <summary>
        /// This resource can be useful for getting back a set of subnet IDs.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputting all CIDR blocks for every subnet ID in a VPC.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetSubnets.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetSubnetsFilterInputArgs
        ///             {
        ///                 Name = "vpc-id",
        ///                 Values = new[]
        ///                 {
        ///                     vpcId,
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleGetSubnet = .ToDictionary(item =&gt; {
        ///         var __key = item.Key;
        ///         return __key;
        ///     }, item =&gt; {
        ///         var __value = item.Value;
        ///         return Aws.Ec2.GetSubnet.Invoke(new()
        ///         {
        ///             Id = __value,
        ///         });
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["subnetCidrBlocks"] = (exampleGetSubnet).Values.Select(s =&gt; 
        ///         {
        ///             return s.CidrBlock;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// 
        /// The following example retrieves a set of all subnets in a VPC with a custom
        /// tag of `Tier` set to a value of "Private" so that the `aws.ec2.Instance` resource
        /// can loop through the subnets, putting instances across availability zones.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @private = Aws.Ec2.GetSubnets.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetSubnetsFilterInputArgs
        ///             {
        ///                 Name = "vpc-id",
        ///                 Values = new[]
        ///                 {
        ///                     vpcId,
        ///                 },
        ///             },
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Tier", "Private" },
        ///         },
        ///     });
        /// 
        ///     var app = new List&lt;Aws.Ec2.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; NotImplemented("toset(data.aws_subnets.private.ids)"); rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         app.Add(new Aws.Ec2.Instance($"app-{range.Value}", new()
        ///         {
        ///             Ami = ami,
        ///             InstanceType = "t2.micro",
        ///             SubnetId = range.Value,
        ///         }));
        ///     }
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubnetsResult> InvokeAsync(GetSubnetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetsResult>("aws:ec2/getSubnets:getSubnets", args ?? new GetSubnetsArgs(), options.WithDefaults());

        /// <summary>
        /// This resource can be useful for getting back a set of subnet IDs.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputting all CIDR blocks for every subnet ID in a VPC.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetSubnets.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetSubnetsFilterInputArgs
        ///             {
        ///                 Name = "vpc-id",
        ///                 Values = new[]
        ///                 {
        ///                     vpcId,
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var exampleGetSubnet = .ToDictionary(item =&gt; {
        ///         var __key = item.Key;
        ///         return __key;
        ///     }, item =&gt; {
        ///         var __value = item.Value;
        ///         return Aws.Ec2.GetSubnet.Invoke(new()
        ///         {
        ///             Id = __value,
        ///         });
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["subnetCidrBlocks"] = (exampleGetSubnet).Values.Select(s =&gt; 
        ///         {
        ///             return s.CidrBlock;
        ///         }).ToList(),
        ///     };
        /// });
        /// ```
        /// 
        /// The following example retrieves a set of all subnets in a VPC with a custom
        /// tag of `Tier` set to a value of "Private" so that the `aws.ec2.Instance` resource
        /// can loop through the subnets, putting instances across availability zones.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @private = Aws.Ec2.GetSubnets.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetSubnetsFilterInputArgs
        ///             {
        ///                 Name = "vpc-id",
        ///                 Values = new[]
        ///                 {
        ///                     vpcId,
        ///                 },
        ///             },
        ///         },
        ///         Tags = 
        ///         {
        ///             { "Tier", "Private" },
        ///         },
        ///     });
        /// 
        ///     var app = new List&lt;Aws.Ec2.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; NotImplemented("toset(data.aws_subnets.private.ids)"); rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         app.Add(new Aws.Ec2.Instance($"app-{range.Value}", new()
        ///         {
        ///             Ami = ami,
        ///             InstanceType = "t2.micro",
        ///             SubnetId = range.Value,
        ///         }));
        ///     }
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubnetsResult> Invoke(GetSubnetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetsResult>("aws:ec2/getSubnets:getSubnets", args ?? new GetSubnetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSubnetsFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetSubnetsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubnetsFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired subnets.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetSubnetsArgs()
        {
        }
        public static new GetSubnetsArgs Empty => new GetSubnetsArgs();
    }

    public sealed class GetSubnetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSubnetsFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetSubnetsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSubnetsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired subnets.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetSubnetsInvokeArgs()
        {
        }
        public static new GetSubnetsInvokeArgs Empty => new GetSubnetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetsResult
    {
        public readonly ImmutableArray<Outputs.GetSubnetsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of all the subnet ids found.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetSubnetsResult(
            ImmutableArray<Outputs.GetSubnetsFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableDictionary<string, string> tags)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Tags = tags;
        }
    }
}
