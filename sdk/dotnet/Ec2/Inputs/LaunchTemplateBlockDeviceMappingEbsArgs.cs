// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2.Inputs
{

    public sealed class LaunchTemplateBlockDeviceMappingEbsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the volume should be destroyed on instance termination.
        /// See [Preserving Amazon EBS Volumes on Instance Termination](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/preserving-volumes-on-termination.html) for more information.
        /// </summary>
        [Input("deleteOnTermination")]
        public Input<string>? DeleteOnTermination { get; set; }

        /// <summary>
        /// Enables [EBS encryption](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html) on the volume.
        /// Cannot be used with `SnapshotId`.
        /// </summary>
        [Input("encrypted")]
        public Input<string>? Encrypted { get; set; }

        /// <summary>
        /// The amount of provisioned [IOPS](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html).
        /// This must be set with a `VolumeType` of `"io1/io2/gp3"`.
        /// </summary>
        [Input("iops")]
        public Input<int>? Iops { get; set; }

        /// <summary>
        /// Identifier (key ID, key alias, key ARN, or alias ARN) of the customer managed KMS key to use for EBS encryption.
        /// `Encrypted` must be set to `True` when this is set.
        /// </summary>
        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        /// <summary>
        /// The Snapshot ID to mount.
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// The throughput to provision for a `Gp3` volume in MiB/s (specified as an integer, e.g., 500), with a maximum of 1,000 MiB/s.
        /// </summary>
        [Input("throughput")]
        public Input<int>? Throughput { get; set; }

        /// <summary>
        /// The volume initialization rate in MiB/s (specified as an integer, e.g. 100), with a minimum of 100 MiB/s and maximum of 300 MiB/s.
        /// </summary>
        [Input("volumeInitializationRate")]
        public Input<int>? VolumeInitializationRate { get; set; }

        /// <summary>
        /// The size of the volume in gigabytes.
        /// </summary>
        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        /// <summary>
        /// The volume type.
        /// Can be one of `Standard`, `Gp2`, `Gp3`, `Io1`, `Io2`, `Sc1` or `St1`.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public LaunchTemplateBlockDeviceMappingEbsArgs()
        {
        }
        public static new LaunchTemplateBlockDeviceMappingEbsArgs Empty => new LaunchTemplateBlockDeviceMappingEbsArgs();
    }
}
