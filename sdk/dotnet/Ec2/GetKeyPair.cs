// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetKeyPair
    {
        /// <summary>
        /// Use this data source to get information about a specific EC2 Key Pair.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how to get a EC2 Key Pair including the public key material from its name.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.ec2.getKeyPair({
        ///     keyName: "test",
        ///     includePublicKey: true,
        ///     filters: [{
        ///         name: "tag:Component",
        ///         values: ["web"],
        ///     }],
        /// });
        /// export const fingerprint = example.then(example =&gt; example.fingerprint);
        /// export const name = example.then(example =&gt; example.keyName);
        /// export const id = example.then(example =&gt; example.id);
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.ec2.get_key_pair(key_name="test",
        ///     include_public_key=True,
        ///     filters=[aws.ec2.GetKeyPairFilterArgs(
        ///         name="tag:Component",
        ///         values=["web"],
        ///     )])
        /// pulumi.export("fingerprint", example.fingerprint)
        /// pulumi.export("name", example.key_name)
        /// pulumi.export("id", example.id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetKeyPair.Invoke(new()
        ///     {
        ///         KeyName = "test",
        ///         IncludePublicKey = true,
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetKeyPairFilterInputArgs
        ///             {
        ///                 Name = "tag:Component",
        ///                 Values = new[]
        ///                 {
        ///                     "web",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["fingerprint"] = example.Apply(getKeyPairResult =&gt; getKeyPairResult.Fingerprint),
        ///         ["name"] = example.Apply(getKeyPairResult =&gt; getKeyPairResult.KeyName),
        ///         ["id"] = example.Apply(getKeyPairResult =&gt; getKeyPairResult.Id),
        ///     };
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		example, err := ec2.LookupKeyPair(ctx, &amp;ec2.LookupKeyPairArgs{
        /// 			KeyName:          pulumi.StringRef("test"),
        /// 			IncludePublicKey: pulumi.BoolRef(true),
        /// 			Filters: []ec2.GetKeyPairFilter{
        /// 				{
        /// 					Name: "tag:Component",
        /// 					Values: []string{
        /// 						"web",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		ctx.Export("fingerprint", example.Fingerprint)
        /// 		ctx.Export("name", example.KeyName)
        /// 		ctx.Export("id", example.Id)
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetKeyPairArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = Ec2Functions.getKeyPair(GetKeyPairArgs.builder()
        ///             .keyName("test")
        ///             .includePublicKey(true)
        ///             .filters(GetKeyPairFilterArgs.builder()
        ///                 .name("tag:Component")
        ///                 .values("web")
        ///                 .build())
        ///             .build());
        /// 
        ///         ctx.export("fingerprint", example.applyValue(getKeyPairResult -&gt; getKeyPairResult.fingerprint()));
        ///         ctx.export("name", example.applyValue(getKeyPairResult -&gt; getKeyPairResult.keyName()));
        ///         ctx.export("id", example.applyValue(getKeyPairResult -&gt; getKeyPairResult.id()));
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:ec2:getKeyPair
        ///       Arguments:
        ///         keyName: test
        ///         includePublicKey: true
        ///         filters:
        ///           - name: tag:Component
        ///             values:
        ///               - web
        /// outputs:
        ///   fingerprint: ${example.fingerprint}
        ///   name: ${example.keyName}
        ///   id: ${example.id}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKeyPairResult> InvokeAsync(GetKeyPairArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeyPairResult>("aws:ec2/getKeyPair:getKeyPair", args ?? new GetKeyPairArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a specific EC2 Key Pair.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how to get a EC2 Key Pair including the public key material from its name.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.ec2.getKeyPair({
        ///     keyName: "test",
        ///     includePublicKey: true,
        ///     filters: [{
        ///         name: "tag:Component",
        ///         values: ["web"],
        ///     }],
        /// });
        /// export const fingerprint = example.then(example =&gt; example.fingerprint);
        /// export const name = example.then(example =&gt; example.keyName);
        /// export const id = example.then(example =&gt; example.id);
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.ec2.get_key_pair(key_name="test",
        ///     include_public_key=True,
        ///     filters=[aws.ec2.GetKeyPairFilterArgs(
        ///         name="tag:Component",
        ///         values=["web"],
        ///     )])
        /// pulumi.export("fingerprint", example.fingerprint)
        /// pulumi.export("name", example.key_name)
        /// pulumi.export("id", example.id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetKeyPair.Invoke(new()
        ///     {
        ///         KeyName = "test",
        ///         IncludePublicKey = true,
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetKeyPairFilterInputArgs
        ///             {
        ///                 Name = "tag:Component",
        ///                 Values = new[]
        ///                 {
        ///                     "web",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["fingerprint"] = example.Apply(getKeyPairResult =&gt; getKeyPairResult.Fingerprint),
        ///         ["name"] = example.Apply(getKeyPairResult =&gt; getKeyPairResult.KeyName),
        ///         ["id"] = example.Apply(getKeyPairResult =&gt; getKeyPairResult.Id),
        ///     };
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		example, err := ec2.LookupKeyPair(ctx, &amp;ec2.LookupKeyPairArgs{
        /// 			KeyName:          pulumi.StringRef("test"),
        /// 			IncludePublicKey: pulumi.BoolRef(true),
        /// 			Filters: []ec2.GetKeyPairFilter{
        /// 				{
        /// 					Name: "tag:Component",
        /// 					Values: []string{
        /// 						"web",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		ctx.Export("fingerprint", example.Fingerprint)
        /// 		ctx.Export("name", example.KeyName)
        /// 		ctx.Export("id", example.Id)
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetKeyPairArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = Ec2Functions.getKeyPair(GetKeyPairArgs.builder()
        ///             .keyName("test")
        ///             .includePublicKey(true)
        ///             .filters(GetKeyPairFilterArgs.builder()
        ///                 .name("tag:Component")
        ///                 .values("web")
        ///                 .build())
        ///             .build());
        /// 
        ///         ctx.export("fingerprint", example.applyValue(getKeyPairResult -&gt; getKeyPairResult.fingerprint()));
        ///         ctx.export("name", example.applyValue(getKeyPairResult -&gt; getKeyPairResult.keyName()));
        ///         ctx.export("id", example.applyValue(getKeyPairResult -&gt; getKeyPairResult.id()));
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:ec2:getKeyPair
        ///       Arguments:
        ///         keyName: test
        ///         includePublicKey: true
        ///         filters:
        ///           - name: tag:Component
        ///             values:
        ///               - web
        /// outputs:
        ///   fingerprint: ${example.fingerprint}
        ///   name: ${example.keyName}
        ///   id: ${example.id}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetKeyPairResult> Invoke(GetKeyPairInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeyPairResult>("aws:ec2/getKeyPair:getKeyPair", args ?? new GetKeyPairInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeyPairArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetKeyPairFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetKeyPairFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetKeyPairFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether to include the public key material in the response.
        /// </summary>
        [Input("includePublicKey")]
        public bool? IncludePublicKey { get; set; }

        /// <summary>
        /// Key Pair name.
        /// </summary>
        [Input("keyName")]
        public string? KeyName { get; set; }

        /// <summary>
        /// Key Pair ID.
        /// </summary>
        [Input("keyPairId")]
        public string? KeyPairId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Any tags assigned to the Key Pair.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetKeyPairArgs()
        {
        }
        public static new GetKeyPairArgs Empty => new GetKeyPairArgs();
    }

    public sealed class GetKeyPairInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetKeyPairFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetKeyPairFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetKeyPairFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Whether to include the public key material in the response.
        /// </summary>
        [Input("includePublicKey")]
        public Input<bool>? IncludePublicKey { get; set; }

        /// <summary>
        /// Key Pair name.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// Key Pair ID.
        /// </summary>
        [Input("keyPairId")]
        public Input<string>? KeyPairId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Any tags assigned to the Key Pair.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetKeyPairInvokeArgs()
        {
        }
        public static new GetKeyPairInvokeArgs Empty => new GetKeyPairInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeyPairResult
    {
        /// <summary>
        /// ARN of the Key Pair.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Timestamp for when the key pair was created in ISO 8601 format.
        /// </summary>
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetKeyPairFilterResult> Filters;
        /// <summary>
        /// SHA-1 digest of the DER encoded private key.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludePublicKey;
        public readonly string? KeyName;
        public readonly string? KeyPairId;
        /// <summary>
        /// Type of key pair.
        /// </summary>
        public readonly string KeyType;
        /// <summary>
        /// Public key material.
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// Any tags assigned to the Key Pair.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetKeyPairResult(
            string arn,

            string createTime,

            ImmutableArray<Outputs.GetKeyPairFilterResult> filters,

            string fingerprint,

            string id,

            bool? includePublicKey,

            string? keyName,

            string? keyPairId,

            string keyType,

            string publicKey,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            CreateTime = createTime;
            Filters = filters;
            Fingerprint = fingerprint;
            Id = id;
            IncludePublicKey = includePublicKey;
            KeyName = keyName;
            KeyPairId = keyPairId;
            KeyType = keyType;
            PublicKey = publicKey;
            Tags = tags;
        }
    }
}
