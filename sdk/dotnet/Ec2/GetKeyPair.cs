// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetKeyPair
    {
        public static Task<GetKeyPairResult> InvokeAsync(GetKeyPairArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKeyPairResult>("aws:ec2/getKeyPair:getKeyPair", args ?? new GetKeyPairArgs(), options.WithDefaults());

        public static Output<GetKeyPairResult> Invoke(GetKeyPairInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKeyPairResult>("aws:ec2/getKeyPair:getKeyPair", args ?? new GetKeyPairInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKeyPairArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetKeyPairFilterArgs>? _filters;
        public List<Inputs.GetKeyPairFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetKeyPairFilterArgs>());
            set => _filters = value;
        }

        [Input("includePublicKey")]
        public bool? IncludePublicKey { get; set; }

        [Input("keyName")]
        public string? KeyName { get; set; }

        [Input("keyPairId")]
        public string? KeyPairId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetKeyPairArgs()
        {
        }
        public static new GetKeyPairArgs Empty => new GetKeyPairArgs();
    }

    public sealed class GetKeyPairInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetKeyPairFilterInputArgs>? _filters;
        public InputList<Inputs.GetKeyPairFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetKeyPairFilterInputArgs>());
            set => _filters = value;
        }

        [Input("includePublicKey")]
        public Input<bool>? IncludePublicKey { get; set; }

        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("keyPairId")]
        public Input<string>? KeyPairId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetKeyPairInvokeArgs()
        {
        }
        public static new GetKeyPairInvokeArgs Empty => new GetKeyPairInvokeArgs();
    }


    [OutputType]
    public sealed class GetKeyPairResult
    {
        public readonly string Arn;
        public readonly string CreateTime;
        public readonly ImmutableArray<Outputs.GetKeyPairFilterResult> Filters;
        public readonly string Fingerprint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludePublicKey;
        public readonly string? KeyName;
        public readonly string? KeyPairId;
        public readonly string KeyType;
        public readonly string PublicKey;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetKeyPairResult(
            string arn,

            string createTime,

            ImmutableArray<Outputs.GetKeyPairFilterResult> filters,

            string fingerprint,

            string id,

            bool? includePublicKey,

            string? keyName,

            string? keyPairId,

            string keyType,

            string publicKey,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            CreateTime = createTime;
            Filters = filters;
            Fingerprint = fingerprint;
            Id = id;
            IncludePublicKey = includePublicKey;
            KeyName = keyName;
            KeyPairId = keyPairId;
            KeyType = keyType;
            PublicKey = publicKey;
            Tags = tags;
        }
    }
}
