// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static partial class Invokes
    {
        /// <summary>
        /// The VPC Peering Connection data source provides details about
        /// a specific VPC peering connection.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/vpc_peering_connection.html.markdown.
        /// </summary>
        public static Task<GetVpcPeeringConnectionResult> GetVpcPeeringConnection(GetVpcPeeringConnectionArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVpcPeeringConnectionResult>("aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection", args ?? ResourceArgs.Empty, options.WithVersion());
    }

    public sealed class GetVpcPeeringConnectionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVpcPeeringConnectionFiltersArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetVpcPeeringConnectionFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcPeeringConnectionFiltersArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// The CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerCidrBlock")]
        public Input<string>? PeerCidrBlock { get; set; }

        /// <summary>
        /// The AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerOwnerId")]
        public Input<string>? PeerOwnerId { get; set; }

        /// <summary>
        /// The region of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerRegion")]
        public Input<string>? PeerRegion { get; set; }

        /// <summary>
        /// The ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerVpcId")]
        public Input<string>? PeerVpcId { get; set; }

        /// <summary>
        /// The region of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The status of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags, each pair of which must exactly match
        /// a pair on the desired VPC Peering Connection.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetVpcPeeringConnectionArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetVpcPeeringConnectionResult
    {
        /// <summary>
        /// A configuration block that describes [VPC Peering Connection]
        /// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the accepter VPC.
        /// </summary>
        public readonly ImmutableDictionary<string, bool> Accepter;
        public readonly string CidrBlock;
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionFiltersResult> Filters;
        public readonly string Id;
        public readonly string OwnerId;
        public readonly string PeerCidrBlock;
        public readonly string PeerOwnerId;
        public readonly string PeerRegion;
        public readonly string PeerVpcId;
        public readonly string Region;
        /// <summary>
        /// A configuration block that describes [VPC Peering Connection]
        /// (http://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide) options set for the requester VPC.
        /// </summary>
        public readonly ImmutableDictionary<string, bool> Requester;
        public readonly string Status;
        public readonly ImmutableDictionary<string, object> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetVpcPeeringConnectionResult(
            ImmutableDictionary<string, bool> accepter,
            string cidrBlock,
            ImmutableArray<Outputs.GetVpcPeeringConnectionFiltersResult> filters,
            string id,
            string ownerId,
            string peerCidrBlock,
            string peerOwnerId,
            string peerRegion,
            string peerVpcId,
            string region,
            ImmutableDictionary<string, bool> requester,
            string status,
            ImmutableDictionary<string, object> tags,
            string vpcId)
        {
            Accepter = accepter;
            CidrBlock = cidrBlock;
            Filters = filters;
            Id = id;
            OwnerId = ownerId;
            PeerCidrBlock = peerCidrBlock;
            PeerOwnerId = peerOwnerId;
            PeerRegion = peerRegion;
            PeerVpcId = peerVpcId;
            Region = region;
            Requester = requester;
            Status = status;
            Tags = tags;
            VpcId = vpcId;
        }
    }

    namespace Inputs
    {

    public sealed class GetVpcPeeringConnectionFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the field to filter by, as defined by
        /// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html).
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("values", required: true)]
        private InputList<string>? _values;

        /// <summary>
        /// Set of values that are accepted for the given field.
        /// A VPC Peering Connection will be selected if any one of the given values matches.
        /// </summary>
        public InputList<string> Values
        {
            get => _values ?? (_values = new InputList<string>());
            set => _values = value;
        }

        public GetVpcPeeringConnectionFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetVpcPeeringConnectionFiltersResult
    {
        /// <summary>
        /// The name of the field to filter by, as defined by
        /// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcPeeringConnections.html).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set of values that are accepted for the given field.
        /// A VPC Peering Connection will be selected if any one of the given values matches.
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetVpcPeeringConnectionFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }
    }
}
