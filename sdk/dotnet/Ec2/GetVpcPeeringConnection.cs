// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpcPeeringConnection
    {
        /// <summary>
        /// The VPC Peering Connection data source provides details about
        /// a specific VPC peering connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pc = Aws.Ec2.GetVpcPeeringConnection.Invoke(new()
        ///     {
        ///         VpcId = aws_vpc.Foo.Id,
        ///         PeerCidrBlock = "10.0.1.0/22",
        ///     });
        /// 
        ///     // Create a route table
        ///     var rt = new Aws.Ec2.RouteTable("rt", new()
        ///     {
        ///         VpcId = aws_vpc.Foo.Id,
        ///     });
        /// 
        ///     // Create a route
        ///     var route = new Aws.Ec2.Route("route", new()
        ///     {
        ///         RouteTableId = rt.Id,
        ///         DestinationCidrBlock = pc.Apply(getVpcPeeringConnectionResult =&gt; getVpcPeeringConnectionResult.PeerCidrBlock),
        ///         VpcPeeringConnectionId = pc.Apply(getVpcPeeringConnectionResult =&gt; getVpcPeeringConnectionResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcPeeringConnectionResult> InvokeAsync(GetVpcPeeringConnectionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcPeeringConnectionResult>("aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection", args ?? new GetVpcPeeringConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// The VPC Peering Connection data source provides details about
        /// a specific VPC peering connection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var pc = Aws.Ec2.GetVpcPeeringConnection.Invoke(new()
        ///     {
        ///         VpcId = aws_vpc.Foo.Id,
        ///         PeerCidrBlock = "10.0.1.0/22",
        ///     });
        /// 
        ///     // Create a route table
        ///     var rt = new Aws.Ec2.RouteTable("rt", new()
        ///     {
        ///         VpcId = aws_vpc.Foo.Id,
        ///     });
        /// 
        ///     // Create a route
        ///     var route = new Aws.Ec2.Route("route", new()
        ///     {
        ///         RouteTableId = rt.Id,
        ///         DestinationCidrBlock = pc.Apply(getVpcPeeringConnectionResult =&gt; getVpcPeeringConnectionResult.PeerCidrBlock),
        ///         VpcPeeringConnectionId = pc.Apply(getVpcPeeringConnectionResult =&gt; getVpcPeeringConnectionResult.Id),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVpcPeeringConnectionResult> Invoke(GetVpcPeeringConnectionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcPeeringConnectionResult>("aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection", args ?? new GetVpcPeeringConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcPeeringConnectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        [Input("filters")]
        private List<Inputs.GetVpcPeeringConnectionFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetVpcPeeringConnectionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcPeeringConnectionFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("ownerId")]
        public string? OwnerId { get; set; }

        /// <summary>
        /// Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerCidrBlock")]
        public string? PeerCidrBlock { get; set; }

        /// <summary>
        /// AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerOwnerId")]
        public string? PeerOwnerId { get; set; }

        /// <summary>
        /// Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerRegion")]
        public string? PeerRegion { get; set; }

        /// <summary>
        /// ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerVpcId")]
        public string? PeerVpcId { get; set; }

        /// <summary>
        /// Region of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// Status of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired VPC Peering Connection.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetVpcPeeringConnectionArgs()
        {
        }
        public static new GetVpcPeeringConnectionArgs Empty => new GetVpcPeeringConnectionArgs();
    }

    public sealed class GetVpcPeeringConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Primary CIDR block of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVpcPeeringConnectionFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetVpcPeeringConnectionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcPeeringConnectionFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// AWS account ID of the owner of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        /// <summary>
        /// Primary CIDR block of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerCidrBlock")]
        public Input<string>? PeerCidrBlock { get; set; }

        /// <summary>
        /// AWS account ID of the owner of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerOwnerId")]
        public Input<string>? PeerOwnerId { get; set; }

        /// <summary>
        /// Region of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerRegion")]
        public Input<string>? PeerRegion { get; set; }

        /// <summary>
        /// ID of the accepter VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("peerVpcId")]
        public Input<string>? PeerVpcId { get; set; }

        /// <summary>
        /// Region of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Status of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired VPC Peering Connection.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the requester VPC of the specific VPC Peering Connection to retrieve.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetVpcPeeringConnectionInvokeArgs()
        {
        }
        public static new GetVpcPeeringConnectionInvokeArgs Empty => new GetVpcPeeringConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcPeeringConnectionResult
    {
        /// <summary>
        /// Configuration block that describes [VPC Peering Connection]
        /// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the accepter VPC.
        /// </summary>
        public readonly ImmutableDictionary<string, bool> Accepter;
        /// <summary>
        /// CIDR block associated to the VPC of the specific VPC Peering Connection.
        /// </summary>
        public readonly string CidrBlock;
        /// <summary>
        /// List of objects with CIDR blocks of the requester VPC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionCidrBlockSetResult> CidrBlockSets;
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionFilterResult> Filters;
        public readonly string Id;
        public readonly string OwnerId;
        public readonly string PeerCidrBlock;
        /// <summary>
        /// List of objects with CIDR blocks of the accepter VPC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionPeerCidrBlockSetResult> PeerCidrBlockSets;
        public readonly string PeerOwnerId;
        public readonly string PeerRegion;
        public readonly string PeerVpcId;
        public readonly string Region;
        /// <summary>
        /// Configuration block that describes [VPC Peering Connection]
        /// (https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options set for the requester VPC.
        /// </summary>
        public readonly ImmutableDictionary<string, bool> Requester;
        public readonly string Status;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetVpcPeeringConnectionResult(
            ImmutableDictionary<string, bool> accepter,

            string cidrBlock,

            ImmutableArray<Outputs.GetVpcPeeringConnectionCidrBlockSetResult> cidrBlockSets,

            ImmutableArray<Outputs.GetVpcPeeringConnectionFilterResult> filters,

            string id,

            string ownerId,

            string peerCidrBlock,

            ImmutableArray<Outputs.GetVpcPeeringConnectionPeerCidrBlockSetResult> peerCidrBlockSets,

            string peerOwnerId,

            string peerRegion,

            string peerVpcId,

            string region,

            ImmutableDictionary<string, bool> requester,

            string status,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Accepter = accepter;
            CidrBlock = cidrBlock;
            CidrBlockSets = cidrBlockSets;
            Filters = filters;
            Id = id;
            OwnerId = ownerId;
            PeerCidrBlock = peerCidrBlock;
            PeerCidrBlockSets = peerCidrBlockSets;
            PeerOwnerId = peerOwnerId;
            PeerRegion = peerRegion;
            PeerVpcId = peerVpcId;
            Region = region;
            Requester = requester;
            Status = status;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
