// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpcPeeringConnection
    {
        public static Task<GetVpcPeeringConnectionResult> InvokeAsync(GetVpcPeeringConnectionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcPeeringConnectionResult>("aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection", args ?? new GetVpcPeeringConnectionArgs(), options.WithDefaults());

        public static Output<GetVpcPeeringConnectionResult> Invoke(GetVpcPeeringConnectionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcPeeringConnectionResult>("aws:ec2/getVpcPeeringConnection:getVpcPeeringConnection", args ?? new GetVpcPeeringConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcPeeringConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        [Input("filters")]
        private List<Inputs.GetVpcPeeringConnectionFilterArgs>? _filters;
        public List<Inputs.GetVpcPeeringConnectionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcPeeringConnectionFilterArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("ownerId")]
        public string? OwnerId { get; set; }

        [Input("peerCidrBlock")]
        public string? PeerCidrBlock { get; set; }

        [Input("peerOwnerId")]
        public string? PeerOwnerId { get; set; }

        [Input("peerRegion")]
        public string? PeerRegion { get; set; }

        [Input("peerVpcId")]
        public string? PeerVpcId { get; set; }

        [Input("region")]
        public string? Region { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetVpcPeeringConnectionArgs()
        {
        }
        public static new GetVpcPeeringConnectionArgs Empty => new GetVpcPeeringConnectionArgs();
    }

    public sealed class GetVpcPeeringConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetVpcPeeringConnectionFilterInputArgs>? _filters;
        public InputList<Inputs.GetVpcPeeringConnectionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcPeeringConnectionFilterInputArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("peerCidrBlock")]
        public Input<string>? PeerCidrBlock { get; set; }

        [Input("peerOwnerId")]
        public Input<string>? PeerOwnerId { get; set; }

        [Input("peerRegion")]
        public Input<string>? PeerRegion { get; set; }

        [Input("peerVpcId")]
        public Input<string>? PeerVpcId { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetVpcPeeringConnectionInvokeArgs()
        {
        }
        public static new GetVpcPeeringConnectionInvokeArgs Empty => new GetVpcPeeringConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcPeeringConnectionResult
    {
        public readonly ImmutableDictionary<string, bool> Accepter;
        public readonly string CidrBlock;
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionCidrBlockSetResult> CidrBlockSets;
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionFilterResult> Filters;
        public readonly string Id;
        public readonly string OwnerId;
        public readonly string PeerCidrBlock;
        public readonly ImmutableArray<Outputs.GetVpcPeeringConnectionPeerCidrBlockSetResult> PeerCidrBlockSets;
        public readonly string PeerOwnerId;
        public readonly string PeerRegion;
        public readonly string PeerVpcId;
        public readonly string Region;
        public readonly ImmutableDictionary<string, bool> Requester;
        public readonly string Status;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetVpcPeeringConnectionResult(
            ImmutableDictionary<string, bool> accepter,

            string cidrBlock,

            ImmutableArray<Outputs.GetVpcPeeringConnectionCidrBlockSetResult> cidrBlockSets,

            ImmutableArray<Outputs.GetVpcPeeringConnectionFilterResult> filters,

            string id,

            string ownerId,

            string peerCidrBlock,

            ImmutableArray<Outputs.GetVpcPeeringConnectionPeerCidrBlockSetResult> peerCidrBlockSets,

            string peerOwnerId,

            string peerRegion,

            string peerVpcId,

            string region,

            ImmutableDictionary<string, bool> requester,

            string status,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Accepter = accepter;
            CidrBlock = cidrBlock;
            CidrBlockSets = cidrBlockSets;
            Filters = filters;
            Id = id;
            OwnerId = ownerId;
            PeerCidrBlock = peerCidrBlock;
            PeerCidrBlockSets = peerCidrBlockSets;
            PeerOwnerId = peerOwnerId;
            PeerRegion = peerRegion;
            PeerVpcId = peerVpcId;
            Region = region;
            Requester = requester;
            Status = status;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
