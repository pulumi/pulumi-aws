// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSerialConsoleAccess
    {
        /// <summary>
        /// Provides a way to check whether serial console access is enabled for your AWS account in the current AWS region.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.Ec2.GetSerialConsoleAccess.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSerialConsoleAccessResult> InvokeAsync(GetSerialConsoleAccessArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSerialConsoleAccessResult>("aws:ec2/getSerialConsoleAccess:getSerialConsoleAccess", args ?? new GetSerialConsoleAccessArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a way to check whether serial console access is enabled for your AWS account in the current AWS region.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.Ec2.GetSerialConsoleAccess.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSerialConsoleAccessResult> Invoke(GetSerialConsoleAccessInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSerialConsoleAccessResult>("aws:ec2/getSerialConsoleAccess:getSerialConsoleAccess", args ?? new GetSerialConsoleAccessInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a way to check whether serial console access is enabled for your AWS account in the current AWS region.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var current = Aws.Ec2.GetSerialConsoleAccess.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSerialConsoleAccessResult> Invoke(GetSerialConsoleAccessInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSerialConsoleAccessResult>("aws:ec2/getSerialConsoleAccess:getSerialConsoleAccess", args ?? new GetSerialConsoleAccessInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSerialConsoleAccessArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        public GetSerialConsoleAccessArgs()
        {
        }
        public static new GetSerialConsoleAccessArgs Empty => new GetSerialConsoleAccessArgs();
    }

    public sealed class GetSerialConsoleAccessInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        public GetSerialConsoleAccessInvokeArgs()
        {
        }
        public static new GetSerialConsoleAccessInvokeArgs Empty => new GetSerialConsoleAccessInvokeArgs();
    }


    [OutputType]
    public sealed class GetSerialConsoleAccessResult
    {
        /// <summary>
        /// Whether or not serial console access is enabled. Returns as `True` or `False`.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Region;

        [OutputConstructor]
        private GetSerialConsoleAccessResult(
            bool enabled,

            string id,

            string region)
        {
            Enabled = enabled;
            Id = id;
            Region = region;
        }
    }
}
