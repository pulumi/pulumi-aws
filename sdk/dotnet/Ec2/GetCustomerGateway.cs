// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetCustomerGateway
    {
        /// <summary>
        /// Get an existing AWS Customer Gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const foo = aws.ec2.getCustomerGateway({
        ///     filters: [{
        ///         name: "tag:Name",
        ///         values: ["foo-prod"],
        ///     }],
        /// });
        /// const main = new aws.ec2.VpnGateway("main", {
        ///     vpcId: aws_vpc.main.id,
        ///     amazonSideAsn: "7224",
        /// });
        /// const transit = new aws.ec2.VpnConnection("transit", {
        ///     vpnGatewayId: main.id,
        ///     customerGatewayId: foo.then(foo =&gt; foo.id),
        ///     type: foo.then(foo =&gt; foo.type),
        ///     staticRoutesOnly: false,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// foo = aws.ec2.get_customer_gateway(filters=[aws.ec2.GetCustomerGatewayFilterArgs(
        ///     name="tag:Name",
        ///     values=["foo-prod"],
        /// )])
        /// main = aws.ec2.VpnGateway("main",
        ///     vpc_id=aws_vpc["main"]["id"],
        ///     amazon_side_asn="7224")
        /// transit = aws.ec2.VpnConnection("transit",
        ///     vpn_gateway_id=main.id,
        ///     customer_gateway_id=foo.id,
        ///     type=foo.type,
        ///     static_routes_only=False)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Aws.Ec2.GetCustomerGateway.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetCustomerGatewayFilterInputArgs
        ///             {
        ///                 Name = "tag:Name",
        ///                 Values = new[]
        ///                 {
        ///                     "foo-prod",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var main = new Aws.Ec2.VpnGateway("main", new()
        ///     {
        ///         VpcId = aws_vpc.Main.Id,
        ///         AmazonSideAsn = "7224",
        ///     });
        /// 
        ///     var transit = new Aws.Ec2.VpnConnection("transit", new()
        ///     {
        ///         VpnGatewayId = main.Id,
        ///         CustomerGatewayId = foo.Apply(getCustomerGatewayResult =&gt; getCustomerGatewayResult.Id),
        ///         Type = foo.Apply(getCustomerGatewayResult =&gt; getCustomerGatewayResult.Type),
        ///         StaticRoutesOnly = false,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		foo, err := ec2.LookupCustomerGateway(ctx, &amp;ec2.LookupCustomerGatewayArgs{
        /// 			Filters: []ec2.GetCustomerGatewayFilter{
        /// 				{
        /// 					Name: "tag:Name",
        /// 					Values: []string{
        /// 						"foo-prod",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		main, err := ec2.NewVpnGateway(ctx, "main", &amp;ec2.VpnGatewayArgs{
        /// 			VpcId:         pulumi.Any(aws_vpc.Main.Id),
        /// 			AmazonSideAsn: pulumi.String("7224"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewVpnConnection(ctx, "transit", &amp;ec2.VpnConnectionArgs{
        /// 			VpnGatewayId:      main.ID(),
        /// 			CustomerGatewayId: *pulumi.String(foo.Id),
        /// 			Type:              *pulumi.String(foo.Type),
        /// 			StaticRoutesOnly:  pulumi.Bool(false),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetCustomerGatewayArgs;
        /// import com.pulumi.aws.ec2.VpnGateway;
        /// import com.pulumi.aws.ec2.VpnGatewayArgs;
        /// import com.pulumi.aws.ec2.VpnConnection;
        /// import com.pulumi.aws.ec2.VpnConnectionArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var foo = Ec2Functions.getCustomerGateway(GetCustomerGatewayArgs.builder()
        ///             .filters(GetCustomerGatewayFilterArgs.builder()
        ///                 .name("tag:Name")
        ///                 .values("foo-prod")
        ///                 .build())
        ///             .build());
        /// 
        ///         var main = new VpnGateway("main", VpnGatewayArgs.builder()        
        ///             .vpcId(aws_vpc.main().id())
        ///             .amazonSideAsn(7224)
        ///             .build());
        /// 
        ///         var transit = new VpnConnection("transit", VpnConnectionArgs.builder()        
        ///             .vpnGatewayId(main.id())
        ///             .customerGatewayId(foo.applyValue(getCustomerGatewayResult -&gt; getCustomerGatewayResult.id()))
        ///             .type(foo.applyValue(getCustomerGatewayResult -&gt; getCustomerGatewayResult.type()))
        ///             .staticRoutesOnly(false)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   main:
        ///     type: aws:ec2:VpnGateway
        ///     properties:
        ///       vpcId: ${aws_vpc.main.id}
        ///       amazonSideAsn: 7224
        ///   transit:
        ///     type: aws:ec2:VpnConnection
        ///     properties:
        ///       vpnGatewayId: ${main.id}
        ///       customerGatewayId: ${foo.id}
        ///       type: ${foo.type}
        ///       staticRoutesOnly: false
        /// variables:
        ///   foo:
        ///     fn::invoke:
        ///       Function: aws:ec2:getCustomerGateway
        ///       Arguments:
        ///         filters:
        ///           - name: tag:Name
        ///             values:
        ///               - foo-prod
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCustomerGatewayResult> InvokeAsync(GetCustomerGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCustomerGatewayResult>("aws:ec2/getCustomerGateway:getCustomerGateway", args ?? new GetCustomerGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Get an existing AWS Customer Gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const foo = aws.ec2.getCustomerGateway({
        ///     filters: [{
        ///         name: "tag:Name",
        ///         values: ["foo-prod"],
        ///     }],
        /// });
        /// const main = new aws.ec2.VpnGateway("main", {
        ///     vpcId: aws_vpc.main.id,
        ///     amazonSideAsn: "7224",
        /// });
        /// const transit = new aws.ec2.VpnConnection("transit", {
        ///     vpnGatewayId: main.id,
        ///     customerGatewayId: foo.then(foo =&gt; foo.id),
        ///     type: foo.then(foo =&gt; foo.type),
        ///     staticRoutesOnly: false,
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// foo = aws.ec2.get_customer_gateway(filters=[aws.ec2.GetCustomerGatewayFilterArgs(
        ///     name="tag:Name",
        ///     values=["foo-prod"],
        /// )])
        /// main = aws.ec2.VpnGateway("main",
        ///     vpc_id=aws_vpc["main"]["id"],
        ///     amazon_side_asn="7224")
        /// transit = aws.ec2.VpnConnection("transit",
        ///     vpn_gateway_id=main.id,
        ///     customer_gateway_id=foo.id,
        ///     type=foo.type,
        ///     static_routes_only=False)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Aws.Ec2.GetCustomerGateway.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetCustomerGatewayFilterInputArgs
        ///             {
        ///                 Name = "tag:Name",
        ///                 Values = new[]
        ///                 {
        ///                     "foo-prod",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var main = new Aws.Ec2.VpnGateway("main", new()
        ///     {
        ///         VpcId = aws_vpc.Main.Id,
        ///         AmazonSideAsn = "7224",
        ///     });
        /// 
        ///     var transit = new Aws.Ec2.VpnConnection("transit", new()
        ///     {
        ///         VpnGatewayId = main.Id,
        ///         CustomerGatewayId = foo.Apply(getCustomerGatewayResult =&gt; getCustomerGatewayResult.Id),
        ///         Type = foo.Apply(getCustomerGatewayResult =&gt; getCustomerGatewayResult.Type),
        ///         StaticRoutesOnly = false,
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		foo, err := ec2.LookupCustomerGateway(ctx, &amp;ec2.LookupCustomerGatewayArgs{
        /// 			Filters: []ec2.GetCustomerGatewayFilter{
        /// 				{
        /// 					Name: "tag:Name",
        /// 					Values: []string{
        /// 						"foo-prod",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		main, err := ec2.NewVpnGateway(ctx, "main", &amp;ec2.VpnGatewayArgs{
        /// 			VpcId:         pulumi.Any(aws_vpc.Main.Id),
        /// 			AmazonSideAsn: pulumi.String("7224"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewVpnConnection(ctx, "transit", &amp;ec2.VpnConnectionArgs{
        /// 			VpnGatewayId:      main.ID(),
        /// 			CustomerGatewayId: *pulumi.String(foo.Id),
        /// 			Type:              *pulumi.String(foo.Type),
        /// 			StaticRoutesOnly:  pulumi.Bool(false),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetCustomerGatewayArgs;
        /// import com.pulumi.aws.ec2.VpnGateway;
        /// import com.pulumi.aws.ec2.VpnGatewayArgs;
        /// import com.pulumi.aws.ec2.VpnConnection;
        /// import com.pulumi.aws.ec2.VpnConnectionArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var foo = Ec2Functions.getCustomerGateway(GetCustomerGatewayArgs.builder()
        ///             .filters(GetCustomerGatewayFilterArgs.builder()
        ///                 .name("tag:Name")
        ///                 .values("foo-prod")
        ///                 .build())
        ///             .build());
        /// 
        ///         var main = new VpnGateway("main", VpnGatewayArgs.builder()        
        ///             .vpcId(aws_vpc.main().id())
        ///             .amazonSideAsn(7224)
        ///             .build());
        /// 
        ///         var transit = new VpnConnection("transit", VpnConnectionArgs.builder()        
        ///             .vpnGatewayId(main.id())
        ///             .customerGatewayId(foo.applyValue(getCustomerGatewayResult -&gt; getCustomerGatewayResult.id()))
        ///             .type(foo.applyValue(getCustomerGatewayResult -&gt; getCustomerGatewayResult.type()))
        ///             .staticRoutesOnly(false)
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   main:
        ///     type: aws:ec2:VpnGateway
        ///     properties:
        ///       vpcId: ${aws_vpc.main.id}
        ///       amazonSideAsn: 7224
        ///   transit:
        ///     type: aws:ec2:VpnConnection
        ///     properties:
        ///       vpnGatewayId: ${main.id}
        ///       customerGatewayId: ${foo.id}
        ///       type: ${foo.type}
        ///       staticRoutesOnly: false
        /// variables:
        ///   foo:
        ///     fn::invoke:
        ///       Function: aws:ec2:getCustomerGateway
        ///       Arguments:
        ///         filters:
        ///           - name: tag:Name
        ///             values:
        ///               - foo-prod
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCustomerGatewayResult> Invoke(GetCustomerGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCustomerGatewayResult>("aws:ec2/getCustomerGateway:getCustomerGateway", args ?? new GetCustomerGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCustomerGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetCustomerGatewayFilterArgs>? _filters;

        /// <summary>
        /// One or more [name-value pairs][dcg-filters] to filter by.
        /// 
        /// [dcg-filters]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCustomerGateways.html
        /// </summary>
        public List<Inputs.GetCustomerGatewayFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCustomerGatewayFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the gateway.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of key-value pairs assigned to the gateway.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetCustomerGatewayArgs()
        {
        }
        public static new GetCustomerGatewayArgs Empty => new GetCustomerGatewayArgs();
    }

    public sealed class GetCustomerGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetCustomerGatewayFilterInputArgs>? _filters;

        /// <summary>
        /// One or more [name-value pairs][dcg-filters] to filter by.
        /// 
        /// [dcg-filters]: https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeCustomerGateways.html
        /// </summary>
        public InputList<Inputs.GetCustomerGatewayFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetCustomerGatewayFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the gateway.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of key-value pairs assigned to the gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetCustomerGatewayInvokeArgs()
        {
        }
        public static new GetCustomerGatewayInvokeArgs Empty => new GetCustomerGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetCustomerGatewayResult
    {
        /// <summary>
        /// ARN of the customer gateway.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).
        /// </summary>
        public readonly int BgpAsn;
        /// <summary>
        /// ARN for the customer gateway certificate.
        /// </summary>
        public readonly string CertificateArn;
        /// <summary>
        /// Name for the customer gateway device.
        /// </summary>
        public readonly string DeviceName;
        public readonly ImmutableArray<Outputs.GetCustomerGatewayFilterResult> Filters;
        public readonly string Id;
        /// <summary>
        /// IP address of the gateway's Internet-routable external interface.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// Map of key-value pairs assigned to the gateway.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Type of customer gateway. The only type AWS supports at this time is "ipsec.1".
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCustomerGatewayResult(
            string arn,

            int bgpAsn,

            string certificateArn,

            string deviceName,

            ImmutableArray<Outputs.GetCustomerGatewayFilterResult> filters,

            string id,

            string ipAddress,

            ImmutableDictionary<string, string> tags,

            string type)
        {
            Arn = arn;
            BgpAsn = bgpAsn;
            CertificateArn = certificateArn;
            DeviceName = deviceName;
            Filters = filters;
            Id = id;
            IpAddress = ipAddress;
            Tags = tags;
            Type = type;
        }
    }
}
