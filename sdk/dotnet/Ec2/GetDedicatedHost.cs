// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aws.Ec2
{
    public static class GetDedicatedHost
    {
        /// <summary>
        /// Use this data source to get information about an EC2 Dedicated Host.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Filter Example
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.Ec2.GetDedicatedHost.InvokeAsync(new Aws.Ec2.GetDedicatedHostArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2.Inputs.GetDedicatedHostFilterArgs
        ///                 {
        ///                     Name = "instance-type",
        ///                     Values = 
        ///                     {
        ///                         "c5.18xlarge",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDedicatedHostResult> InvokeAsync(GetDedicatedHostArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDedicatedHostResult>("aws:ec2/getDedicatedHost:getDedicatedHost", args ?? new GetDedicatedHostArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to get information about an EC2 Dedicated Host.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Filter Example
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.Ec2.GetDedicatedHost.InvokeAsync(new Aws.Ec2.GetDedicatedHostArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2.Inputs.GetDedicatedHostFilterArgs
        ///                 {
        ///                     Name = "instance-type",
        ///                     Values = 
        ///                     {
        ///                         "c5.18xlarge",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDedicatedHostResult> Invoke(GetDedicatedHostInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDedicatedHostResult>("aws:ec2/getDedicatedHost:getDedicatedHost", args ?? new GetDedicatedHostInvokeArgs(), options.WithVersion());
    }


    public sealed class GetDedicatedHostArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetDedicatedHostFilterArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public List<Inputs.GetDedicatedHostFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDedicatedHostFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the Dedicated Host.
        /// </summary>
        [Input("hostId")]
        public string? HostId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDedicatedHostArgs()
        {
        }
    }

    public sealed class GetDedicatedHostInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetDedicatedHostFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public InputList<Inputs.GetDedicatedHostFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetDedicatedHostFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the Dedicated Host.
        /// </summary>
        [Input("hostId")]
        public Input<string>? HostId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDedicatedHostInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDedicatedHostResult
    {
        /// <summary>
        /// The ARN of the Dedicated Host.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Whether auto-placement is on or off.
        /// </summary>
        public readonly string AutoPlacement;
        /// <summary>
        /// The Availability Zone of the Dedicated Host.
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// The number of cores on the Dedicated Host.
        /// </summary>
        public readonly int Cores;
        public readonly ImmutableArray<Outputs.GetDedicatedHostFilterResult> Filters;
        public readonly string HostId;
        /// <summary>
        /// Indicates whether host recovery is enabled or disabled for the Dedicated Host.
        /// </summary>
        public readonly string HostRecovery;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The instance family supported by the Dedicated Host. For example, "m5".
        /// </summary>
        public readonly string InstanceFamily;
        /// <summary>
        /// The instance type supported by the Dedicated Host. For example, "m5.large". If the host supports multiple instance types, no instanceType is returned.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// The ID of the AWS account that owns the Dedicated Host.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// The number of sockets on the Dedicated Host.
        /// </summary>
        public readonly int Sockets;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The total number of vCPUs on the Dedicated Host.
        /// </summary>
        public readonly int TotalVcpus;

        [OutputConstructor]
        private GetDedicatedHostResult(
            string arn,

            string autoPlacement,

            string availabilityZone,

            int cores,

            ImmutableArray<Outputs.GetDedicatedHostFilterResult> filters,

            string hostId,

            string hostRecovery,

            string id,

            string instanceFamily,

            string instanceType,

            string ownerId,

            int sockets,

            ImmutableDictionary<string, string> tags,

            int totalVcpus)
        {
            Arn = arn;
            AutoPlacement = autoPlacement;
            AvailabilityZone = availabilityZone;
            Cores = cores;
            Filters = filters;
            HostId = hostId;
            HostRecovery = hostRecovery;
            Id = id;
            InstanceFamily = instanceFamily;
            InstanceType = instanceType;
            OwnerId = ownerId;
            Sockets = sockets;
            Tags = tags;
            TotalVcpus = totalVcpus;
        }
    }
}
