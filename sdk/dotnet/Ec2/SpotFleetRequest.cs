// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides an EC2 Spot Fleet Request resource. This allows a fleet of Spot
    /// instances to be requested on the Spot market.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/spot_fleet_request.html.markdown.
    /// </summary>
    public partial class SpotFleetRequest : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates how to allocate the target capacity across
        /// the Spot pools specified by the Spot fleet request. The default is
        /// `lowestPrice`.
        /// </summary>
        [Output("allocationStrategy")]
        public Output<string?> AllocationStrategy { get; private set; } = null!;

        [Output("clientToken")]
        public Output<string> ClientToken { get; private set; } = null!;

        /// <summary>
        /// Indicates whether running Spot
        /// instances should be terminated if the target capacity of the Spot fleet
        /// request is decreased below the current size of the Spot fleet.
        /// </summary>
        [Output("excessCapacityTerminationPolicy")]
        public Output<string?> ExcessCapacityTerminationPolicy { get; private set; } = null!;

        /// <summary>
        /// The type of fleet request. Indicates whether the Spot Fleet only requests the target
        /// capacity or also attempts to maintain it. Default is `maintain`.
        /// </summary>
        [Output("fleetType")]
        public Output<string?> FleetType { get; private set; } = null!;

        /// <summary>
        /// Grants the Spot fleet permission to terminate
        /// Spot instances on your behalf when you cancel its Spot fleet request using
        /// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
        /// terminateInstancesWithExpiration.
        /// </summary>
        [Output("iamFleetRole")]
        public Output<string> IamFleetRole { get; private set; } = null!;

        /// <summary>
        /// Indicates whether a Spot
        /// instance stops or terminates when it is interrupted. Default is
        /// `terminate`.
        /// </summary>
        [Output("instanceInterruptionBehaviour")]
        public Output<string?> InstanceInterruptionBehaviour { get; private set; } = null!;

        /// <summary>
        /// 
        /// The number of Spot pools across which to allocate your target Spot capacity.
        /// Valid only when `allocation_strategy` is set to `lowestPrice`. Spot Fleet selects
        /// the cheapest Spot pools and evenly allocates your target Spot capacity across
        /// the number of Spot pools that you specify.
        /// </summary>
        [Output("instancePoolsToUseCount")]
        public Output<int?> InstancePoolsToUseCount { get; private set; } = null!;

        /// <summary>
        /// Used to define the launch configuration of the
        /// spot-fleet request. Can be specified multiple times to define different bids
        /// across different markets and instance types.
        /// </summary>
        [Output("launchSpecifications")]
        public Output<ImmutableArray<Outputs.SpotFleetRequestLaunchSpecifications>> LaunchSpecifications { get; private set; } = null!;

        /// <summary>
        /// A list of elastic load balancer names to add to the Spot fleet.
        /// </summary>
        [Output("loadBalancers")]
        public Output<ImmutableArray<string>> LoadBalancers { get; private set; } = null!;

        /// <summary>
        /// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
        /// </summary>
        [Output("replaceUnhealthyInstances")]
        public Output<bool?> ReplaceUnhealthyInstances { get; private set; } = null!;

        /// <summary>
        /// The maximum bid price per unit hour.
        /// </summary>
        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        /// <summary>
        /// The state of the Spot fleet request.
        /// </summary>
        [Output("spotRequestState")]
        public Output<string> SpotRequestState { get; private set; } = null!;

        /// <summary>
        /// The number of units to request. You can choose to set the
        /// target capacity in terms of instances or a performance characteristic that is
        /// important to your application workload, such as vCPUs, memory, or I/O.
        /// </summary>
        [Output("targetCapacity")]
        public Output<int> TargetCapacity { get; private set; } = null!;

        /// <summary>
        /// A list of `aws.alb.TargetGroup` ARNs, for use with Application Load Balancing.
        /// </summary>
        [Output("targetGroupArns")]
        public Output<ImmutableArray<string>> TargetGroupArns { get; private set; } = null!;

        /// <summary>
        /// Indicates whether running Spot
        /// instances should be terminated when the Spot fleet request expires.
        /// </summary>
        [Output("terminateInstancesWithExpiration")]
        public Output<bool?> TerminateInstancesWithExpiration { get; private set; } = null!;

        /// <summary>
        /// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        /// </summary>
        [Output("validFrom")]
        public Output<string?> ValidFrom { get; private set; } = null!;

        /// <summary>
        /// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. Defaults to 24 hours.
        /// </summary>
        [Output("validUntil")]
        public Output<string?> ValidUntil { get; private set; } = null!;

        /// <summary>
        /// If set, this provider will
        /// wait for the Spot Request to be fulfilled, and will throw an error if the
        /// timeout of 10m is reached.
        /// </summary>
        [Output("waitForFulfillment")]
        public Output<bool?> WaitForFulfillment { get; private set; } = null!;


        /// <summary>
        /// Create a SpotFleetRequest resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SpotFleetRequest(string name, SpotFleetRequestArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/spotFleetRequest:SpotFleetRequest", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private SpotFleetRequest(string name, Input<string> id, SpotFleetRequestState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/spotFleetRequest:SpotFleetRequest", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SpotFleetRequest resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SpotFleetRequest Get(string name, Input<string> id, SpotFleetRequestState? state = null, CustomResourceOptions? options = null)
        {
            return new SpotFleetRequest(name, id, state, options);
        }
    }

    public sealed class SpotFleetRequestArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates how to allocate the target capacity across
        /// the Spot pools specified by the Spot fleet request. The default is
        /// `lowestPrice`.
        /// </summary>
        [Input("allocationStrategy")]
        public Input<string>? AllocationStrategy { get; set; }

        /// <summary>
        /// Indicates whether running Spot
        /// instances should be terminated if the target capacity of the Spot fleet
        /// request is decreased below the current size of the Spot fleet.
        /// </summary>
        [Input("excessCapacityTerminationPolicy")]
        public Input<string>? ExcessCapacityTerminationPolicy { get; set; }

        /// <summary>
        /// The type of fleet request. Indicates whether the Spot Fleet only requests the target
        /// capacity or also attempts to maintain it. Default is `maintain`.
        /// </summary>
        [Input("fleetType")]
        public Input<string>? FleetType { get; set; }

        /// <summary>
        /// Grants the Spot fleet permission to terminate
        /// Spot instances on your behalf when you cancel its Spot fleet request using
        /// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
        /// terminateInstancesWithExpiration.
        /// </summary>
        [Input("iamFleetRole", required: true)]
        public Input<string> IamFleetRole { get; set; } = null!;

        /// <summary>
        /// Indicates whether a Spot
        /// instance stops or terminates when it is interrupted. Default is
        /// `terminate`.
        /// </summary>
        [Input("instanceInterruptionBehaviour")]
        public Input<string>? InstanceInterruptionBehaviour { get; set; }

        /// <summary>
        /// 
        /// The number of Spot pools across which to allocate your target Spot capacity.
        /// Valid only when `allocation_strategy` is set to `lowestPrice`. Spot Fleet selects
        /// the cheapest Spot pools and evenly allocates your target Spot capacity across
        /// the number of Spot pools that you specify.
        /// </summary>
        [Input("instancePoolsToUseCount")]
        public Input<int>? InstancePoolsToUseCount { get; set; }

        [Input("launchSpecifications", required: true)]
        private InputList<Inputs.SpotFleetRequestLaunchSpecificationsArgs>? _launchSpecifications;

        /// <summary>
        /// Used to define the launch configuration of the
        /// spot-fleet request. Can be specified multiple times to define different bids
        /// across different markets and instance types.
        /// </summary>
        public InputList<Inputs.SpotFleetRequestLaunchSpecificationsArgs> LaunchSpecifications
        {
            get => _launchSpecifications ?? (_launchSpecifications = new InputList<Inputs.SpotFleetRequestLaunchSpecificationsArgs>());
            set => _launchSpecifications = value;
        }

        [Input("loadBalancers")]
        private InputList<string>? _loadBalancers;

        /// <summary>
        /// A list of elastic load balancer names to add to the Spot fleet.
        /// </summary>
        public InputList<string> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<string>());
            set => _loadBalancers = value;
        }

        /// <summary>
        /// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
        /// </summary>
        [Input("replaceUnhealthyInstances")]
        public Input<bool>? ReplaceUnhealthyInstances { get; set; }

        /// <summary>
        /// The maximum bid price per unit hour.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// The number of units to request. You can choose to set the
        /// target capacity in terms of instances or a performance characteristic that is
        /// important to your application workload, such as vCPUs, memory, or I/O.
        /// </summary>
        [Input("targetCapacity", required: true)]
        public Input<int> TargetCapacity { get; set; } = null!;

        [Input("targetGroupArns")]
        private InputList<string>? _targetGroupArns;

        /// <summary>
        /// A list of `aws.alb.TargetGroup` ARNs, for use with Application Load Balancing.
        /// </summary>
        public InputList<string> TargetGroupArns
        {
            get => _targetGroupArns ?? (_targetGroupArns = new InputList<string>());
            set => _targetGroupArns = value;
        }

        /// <summary>
        /// Indicates whether running Spot
        /// instances should be terminated when the Spot fleet request expires.
        /// </summary>
        [Input("terminateInstancesWithExpiration")]
        public Input<bool>? TerminateInstancesWithExpiration { get; set; }

        /// <summary>
        /// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        /// </summary>
        [Input("validFrom")]
        public Input<string>? ValidFrom { get; set; }

        /// <summary>
        /// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. Defaults to 24 hours.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        /// <summary>
        /// If set, this provider will
        /// wait for the Spot Request to be fulfilled, and will throw an error if the
        /// timeout of 10m is reached.
        /// </summary>
        [Input("waitForFulfillment")]
        public Input<bool>? WaitForFulfillment { get; set; }

        public SpotFleetRequestArgs()
        {
        }
    }

    public sealed class SpotFleetRequestState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates how to allocate the target capacity across
        /// the Spot pools specified by the Spot fleet request. The default is
        /// `lowestPrice`.
        /// </summary>
        [Input("allocationStrategy")]
        public Input<string>? AllocationStrategy { get; set; }

        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// Indicates whether running Spot
        /// instances should be terminated if the target capacity of the Spot fleet
        /// request is decreased below the current size of the Spot fleet.
        /// </summary>
        [Input("excessCapacityTerminationPolicy")]
        public Input<string>? ExcessCapacityTerminationPolicy { get; set; }

        /// <summary>
        /// The type of fleet request. Indicates whether the Spot Fleet only requests the target
        /// capacity or also attempts to maintain it. Default is `maintain`.
        /// </summary>
        [Input("fleetType")]
        public Input<string>? FleetType { get; set; }

        /// <summary>
        /// Grants the Spot fleet permission to terminate
        /// Spot instances on your behalf when you cancel its Spot fleet request using
        /// CancelSpotFleetRequests or when the Spot fleet request expires, if you set
        /// terminateInstancesWithExpiration.
        /// </summary>
        [Input("iamFleetRole")]
        public Input<string>? IamFleetRole { get; set; }

        /// <summary>
        /// Indicates whether a Spot
        /// instance stops or terminates when it is interrupted. Default is
        /// `terminate`.
        /// </summary>
        [Input("instanceInterruptionBehaviour")]
        public Input<string>? InstanceInterruptionBehaviour { get; set; }

        /// <summary>
        /// 
        /// The number of Spot pools across which to allocate your target Spot capacity.
        /// Valid only when `allocation_strategy` is set to `lowestPrice`. Spot Fleet selects
        /// the cheapest Spot pools and evenly allocates your target Spot capacity across
        /// the number of Spot pools that you specify.
        /// </summary>
        [Input("instancePoolsToUseCount")]
        public Input<int>? InstancePoolsToUseCount { get; set; }

        [Input("launchSpecifications")]
        private InputList<Inputs.SpotFleetRequestLaunchSpecificationsGetArgs>? _launchSpecifications;

        /// <summary>
        /// Used to define the launch configuration of the
        /// spot-fleet request. Can be specified multiple times to define different bids
        /// across different markets and instance types.
        /// </summary>
        public InputList<Inputs.SpotFleetRequestLaunchSpecificationsGetArgs> LaunchSpecifications
        {
            get => _launchSpecifications ?? (_launchSpecifications = new InputList<Inputs.SpotFleetRequestLaunchSpecificationsGetArgs>());
            set => _launchSpecifications = value;
        }

        [Input("loadBalancers")]
        private InputList<string>? _loadBalancers;

        /// <summary>
        /// A list of elastic load balancer names to add to the Spot fleet.
        /// </summary>
        public InputList<string> LoadBalancers
        {
            get => _loadBalancers ?? (_loadBalancers = new InputList<string>());
            set => _loadBalancers = value;
        }

        /// <summary>
        /// Indicates whether Spot fleet should replace unhealthy instances. Default `false`.
        /// </summary>
        [Input("replaceUnhealthyInstances")]
        public Input<bool>? ReplaceUnhealthyInstances { get; set; }

        /// <summary>
        /// The maximum bid price per unit hour.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// The state of the Spot fleet request.
        /// </summary>
        [Input("spotRequestState")]
        public Input<string>? SpotRequestState { get; set; }

        /// <summary>
        /// The number of units to request. You can choose to set the
        /// target capacity in terms of instances or a performance characteristic that is
        /// important to your application workload, such as vCPUs, memory, or I/O.
        /// </summary>
        [Input("targetCapacity")]
        public Input<int>? TargetCapacity { get; set; }

        [Input("targetGroupArns")]
        private InputList<string>? _targetGroupArns;

        /// <summary>
        /// A list of `aws.alb.TargetGroup` ARNs, for use with Application Load Balancing.
        /// </summary>
        public InputList<string> TargetGroupArns
        {
            get => _targetGroupArns ?? (_targetGroupArns = new InputList<string>());
            set => _targetGroupArns = value;
        }

        /// <summary>
        /// Indicates whether running Spot
        /// instances should be terminated when the Spot fleet request expires.
        /// </summary>
        [Input("terminateInstancesWithExpiration")]
        public Input<bool>? TerminateInstancesWithExpiration { get; set; }

        /// <summary>
        /// The start date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). The default is to start fulfilling the request immediately.
        /// </summary>
        [Input("validFrom")]
        public Input<string>? ValidFrom { get; set; }

        /// <summary>
        /// The end date and time of the request, in UTC [RFC3339](https://tools.ietf.org/html/rfc3339#section-5.8) format(for example, YYYY-MM-DDTHH:MM:SSZ). At this point, no new Spot instance requests are placed or enabled to fulfill the request. Defaults to 24 hours.
        /// </summary>
        [Input("validUntil")]
        public Input<string>? ValidUntil { get; set; }

        /// <summary>
        /// If set, this provider will
        /// wait for the Spot Request to be fulfilled, and will throw an error if the
        /// timeout of 10m is reached.
        /// </summary>
        [Input("waitForFulfillment")]
        public Input<bool>? WaitForFulfillment { get; set; }

        public SpotFleetRequestState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class SpotFleetRequestLaunchSpecificationsArgs : Pulumi.ResourceArgs
    {
        [Input("ami", required: true)]
        public Input<string> Ami { get; set; } = null!;

        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("ebsBlockDevices")]
        private InputList<SpotFleetRequestLaunchSpecificationsEbsBlockDevicesArgs>? _ebsBlockDevices;
        public InputList<SpotFleetRequestLaunchSpecificationsEbsBlockDevicesArgs> EbsBlockDevices
        {
            get => _ebsBlockDevices ?? (_ebsBlockDevices = new InputList<SpotFleetRequestLaunchSpecificationsEbsBlockDevicesArgs>());
            set => _ebsBlockDevices = value;
        }

        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        [Input("ephemeralBlockDevices")]
        private InputList<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesArgs>? _ephemeralBlockDevices;
        public InputList<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesArgs> EphemeralBlockDevices
        {
            get => _ephemeralBlockDevices ?? (_ephemeralBlockDevices = new InputList<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesArgs>());
            set => _ephemeralBlockDevices = value;
        }

        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        [Input("iamInstanceProfileArn")]
        public Input<string>? IamInstanceProfileArn { get; set; }

        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        [Input("placementGroup")]
        public Input<string>? PlacementGroup { get; set; }

        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        [Input("rootBlockDevices")]
        private InputList<SpotFleetRequestLaunchSpecificationsRootBlockDevicesArgs>? _rootBlockDevices;
        public InputList<SpotFleetRequestLaunchSpecificationsRootBlockDevicesArgs> RootBlockDevices
        {
            get => _rootBlockDevices ?? (_rootBlockDevices = new InputList<SpotFleetRequestLaunchSpecificationsRootBlockDevicesArgs>());
            set => _rootBlockDevices = value;
        }

        /// <summary>
        /// The maximum bid price per unit hour.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        [Input("weightedCapacity")]
        public Input<string>? WeightedCapacity { get; set; }

        public SpotFleetRequestLaunchSpecificationsArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsEbsBlockDevicesArgs : Pulumi.ResourceArgs
    {
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public SpotFleetRequestLaunchSpecificationsEbsBlockDevicesArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsEbsBlockDevicesGetArgs : Pulumi.ResourceArgs
    {
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public SpotFleetRequestLaunchSpecificationsEbsBlockDevicesGetArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesArgs : Pulumi.ResourceArgs
    {
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        [Input("virtualName", required: true)]
        public Input<string> VirtualName { get; set; } = null!;

        public SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesGetArgs : Pulumi.ResourceArgs
    {
        [Input("deviceName", required: true)]
        public Input<string> DeviceName { get; set; } = null!;

        [Input("virtualName", required: true)]
        public Input<string> VirtualName { get; set; } = null!;

        public SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesGetArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsGetArgs : Pulumi.ResourceArgs
    {
        [Input("ami", required: true)]
        public Input<string> Ami { get; set; } = null!;

        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("ebsBlockDevices")]
        private InputList<SpotFleetRequestLaunchSpecificationsEbsBlockDevicesGetArgs>? _ebsBlockDevices;
        public InputList<SpotFleetRequestLaunchSpecificationsEbsBlockDevicesGetArgs> EbsBlockDevices
        {
            get => _ebsBlockDevices ?? (_ebsBlockDevices = new InputList<SpotFleetRequestLaunchSpecificationsEbsBlockDevicesGetArgs>());
            set => _ebsBlockDevices = value;
        }

        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        [Input("ephemeralBlockDevices")]
        private InputList<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesGetArgs>? _ephemeralBlockDevices;
        public InputList<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesGetArgs> EphemeralBlockDevices
        {
            get => _ephemeralBlockDevices ?? (_ephemeralBlockDevices = new InputList<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevicesGetArgs>());
            set => _ephemeralBlockDevices = value;
        }

        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        [Input("iamInstanceProfileArn")]
        public Input<string>? IamInstanceProfileArn { get; set; }

        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        [Input("placementGroup")]
        public Input<string>? PlacementGroup { get; set; }

        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        [Input("rootBlockDevices")]
        private InputList<SpotFleetRequestLaunchSpecificationsRootBlockDevicesGetArgs>? _rootBlockDevices;
        public InputList<SpotFleetRequestLaunchSpecificationsRootBlockDevicesGetArgs> RootBlockDevices
        {
            get => _rootBlockDevices ?? (_rootBlockDevices = new InputList<SpotFleetRequestLaunchSpecificationsRootBlockDevicesGetArgs>());
            set => _rootBlockDevices = value;
        }

        /// <summary>
        /// The maximum bid price per unit hour.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("vpcSecurityGroupIds")]
        private InputList<string>? _vpcSecurityGroupIds;
        public InputList<string> VpcSecurityGroupIds
        {
            get => _vpcSecurityGroupIds ?? (_vpcSecurityGroupIds = new InputList<string>());
            set => _vpcSecurityGroupIds = value;
        }

        [Input("weightedCapacity")]
        public Input<string>? WeightedCapacity { get; set; }

        public SpotFleetRequestLaunchSpecificationsGetArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsRootBlockDevicesArgs : Pulumi.ResourceArgs
    {
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public SpotFleetRequestLaunchSpecificationsRootBlockDevicesArgs()
        {
        }
    }

    public sealed class SpotFleetRequestLaunchSpecificationsRootBlockDevicesGetArgs : Pulumi.ResourceArgs
    {
        [Input("deleteOnTermination")]
        public Input<bool>? DeleteOnTermination { get; set; }

        [Input("encrypted")]
        public Input<bool>? Encrypted { get; set; }

        [Input("iops")]
        public Input<int>? Iops { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("volumeSize")]
        public Input<int>? VolumeSize { get; set; }

        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        public SpotFleetRequestLaunchSpecificationsRootBlockDevicesGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class SpotFleetRequestLaunchSpecifications
    {
        public readonly string Ami;
        public readonly bool? AssociatePublicIpAddress;
        public readonly string AvailabilityZone;
        public readonly ImmutableArray<SpotFleetRequestLaunchSpecificationsEbsBlockDevices> EbsBlockDevices;
        public readonly bool? EbsOptimized;
        public readonly ImmutableArray<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevices> EphemeralBlockDevices;
        public readonly string? IamInstanceProfile;
        public readonly string? IamInstanceProfileArn;
        public readonly string InstanceType;
        public readonly string KeyName;
        public readonly bool? Monitoring;
        public readonly string PlacementGroup;
        public readonly string? PlacementTenancy;
        public readonly ImmutableArray<SpotFleetRequestLaunchSpecificationsRootBlockDevices> RootBlockDevices;
        /// <summary>
        /// The maximum bid price per unit hour.
        /// </summary>
        public readonly string? SpotPrice;
        public readonly string SubnetId;
        /// <summary>
        /// A mapping of tags to assign to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        public readonly string? UserData;
        public readonly ImmutableArray<string> VpcSecurityGroupIds;
        public readonly string? WeightedCapacity;

        [OutputConstructor]
        private SpotFleetRequestLaunchSpecifications(
            string ami,
            bool? associatePublicIpAddress,
            string availabilityZone,
            ImmutableArray<SpotFleetRequestLaunchSpecificationsEbsBlockDevices> ebsBlockDevices,
            bool? ebsOptimized,
            ImmutableArray<SpotFleetRequestLaunchSpecificationsEphemeralBlockDevices> ephemeralBlockDevices,
            string? iamInstanceProfile,
            string? iamInstanceProfileArn,
            string instanceType,
            string keyName,
            bool? monitoring,
            string placementGroup,
            string? placementTenancy,
            ImmutableArray<SpotFleetRequestLaunchSpecificationsRootBlockDevices> rootBlockDevices,
            string? spotPrice,
            string subnetId,
            ImmutableDictionary<string, object>? tags,
            string? userData,
            ImmutableArray<string> vpcSecurityGroupIds,
            string? weightedCapacity)
        {
            Ami = ami;
            AssociatePublicIpAddress = associatePublicIpAddress;
            AvailabilityZone = availabilityZone;
            EbsBlockDevices = ebsBlockDevices;
            EbsOptimized = ebsOptimized;
            EphemeralBlockDevices = ephemeralBlockDevices;
            IamInstanceProfile = iamInstanceProfile;
            IamInstanceProfileArn = iamInstanceProfileArn;
            InstanceType = instanceType;
            KeyName = keyName;
            Monitoring = monitoring;
            PlacementGroup = placementGroup;
            PlacementTenancy = placementTenancy;
            RootBlockDevices = rootBlockDevices;
            SpotPrice = spotPrice;
            SubnetId = subnetId;
            Tags = tags;
            UserData = userData;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
            WeightedCapacity = weightedCapacity;
        }
    }

    [OutputType]
    public sealed class SpotFleetRequestLaunchSpecificationsEbsBlockDevices
    {
        public readonly bool? DeleteOnTermination;
        public readonly string DeviceName;
        public readonly bool Encrypted;
        public readonly int Iops;
        public readonly string KmsKeyId;
        public readonly string SnapshotId;
        public readonly int VolumeSize;
        public readonly string VolumeType;

        [OutputConstructor]
        private SpotFleetRequestLaunchSpecificationsEbsBlockDevices(
            bool? deleteOnTermination,
            string deviceName,
            bool encrypted,
            int iops,
            string kmsKeyId,
            string snapshotId,
            int volumeSize,
            string volumeType)
        {
            DeleteOnTermination = deleteOnTermination;
            DeviceName = deviceName;
            Encrypted = encrypted;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            SnapshotId = snapshotId;
            VolumeSize = volumeSize;
            VolumeType = volumeType;
        }
    }

    [OutputType]
    public sealed class SpotFleetRequestLaunchSpecificationsEphemeralBlockDevices
    {
        public readonly string DeviceName;
        public readonly string VirtualName;

        [OutputConstructor]
        private SpotFleetRequestLaunchSpecificationsEphemeralBlockDevices(
            string deviceName,
            string virtualName)
        {
            DeviceName = deviceName;
            VirtualName = virtualName;
        }
    }

    [OutputType]
    public sealed class SpotFleetRequestLaunchSpecificationsRootBlockDevices
    {
        public readonly bool? DeleteOnTermination;
        public readonly bool Encrypted;
        public readonly int Iops;
        public readonly string KmsKeyId;
        public readonly int VolumeSize;
        public readonly string VolumeType;

        [OutputConstructor]
        private SpotFleetRequestLaunchSpecificationsRootBlockDevices(
            bool? deleteOnTermination,
            bool encrypted,
            int iops,
            string kmsKeyId,
            int volumeSize,
            string volumeType)
        {
            DeleteOnTermination = deleteOnTermination;
            Encrypted = encrypted;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            VolumeSize = volumeSize;
            VolumeType = volumeType;
        }
    }
    }
}
