// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides an AWS EIP Association as a top level resource, to associate and
    /// disassociate Elastic IPs from AWS Instances and Network Interfaces.
    /// 
    /// &gt; **NOTE:** Do not use this resource to associate an EIP to `aws.lb.LoadBalancer` or `aws.ec2.NatGateway` resources. Instead use the `allocation_id` available in those resources to allow AWS to manage the association, otherwise you will see `AuthFailure` errors.
    /// 
    /// &gt; **NOTE:** `aws.ec2.EipAssociation` is useful in scenarios where EIPs are either
    /// pre-existing or distributed to customers or users and therefore cannot be changed.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var web = new Aws.Ec2.Instance("web", new Aws.Ec2.InstanceArgs
    ///         {
    ///             Ami = "ami-21f78e11",
    ///             AvailabilityZone = "us-west-2a",
    ///             InstanceType = "t2.micro",
    ///             Tags = 
    ///             {
    ///                 { "Name", "HelloWorld" },
    ///             },
    ///         });
    ///         var example = new Aws.Ec2.Eip("example", new Aws.Ec2.EipArgs
    ///         {
    ///             Vpc = true,
    ///         });
    ///         var eipAssoc = new Aws.Ec2.EipAssociation("eipAssoc", new Aws.Ec2.EipAssociationArgs
    ///         {
    ///             InstanceId = web.Id,
    ///             AllocationId = example.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// EIP Assocations can be imported using their association ID.
    /// 
    /// ```sh
    ///  $ pulumi import aws:ec2/eipAssociation:EipAssociation test eipassoc-ab12c345
    /// ```
    /// </summary>
    public partial class EipAssociation : Pulumi.CustomResource
    {
        /// <summary>
        /// The allocation ID. This is required for EC2-VPC.
        /// </summary>
        [Output("allocationId")]
        public Output<string> AllocationId { get; private set; } = null!;

        /// <summary>
        /// Whether to allow an Elastic IP to
        /// be re-associated. Defaults to `true` in VPC.
        /// </summary>
        [Output("allowReassociation")]
        public Output<bool?> AllowReassociation { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance. This is required for
        /// EC2-Classic. For EC2-VPC, you can specify either the instance ID or the
        /// network interface ID, but not both. The operation fails if you specify an
        /// instance ID unless exactly one network interface is attached.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the network interface. If the
        /// instance has more than one network interface, you must specify a network
        /// interface ID.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// The primary or secondary private IP address
        /// to associate with the Elastic IP address. If no private IP address is
        /// specified, the Elastic IP address is associated with the primary private IP
        /// address.
        /// </summary>
        [Output("privateIpAddress")]
        public Output<string> PrivateIpAddress { get; private set; } = null!;

        /// <summary>
        /// The Elastic IP address. This is required for EC2-Classic.
        /// </summary>
        [Output("publicIp")]
        public Output<string> PublicIp { get; private set; } = null!;


        /// <summary>
        /// Create a EipAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EipAssociation(string name, EipAssociationArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:ec2/eipAssociation:EipAssociation", name, args ?? new EipAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EipAssociation(string name, Input<string> id, EipAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/eipAssociation:EipAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EipAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EipAssociation Get(string name, Input<string> id, EipAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new EipAssociation(name, id, state, options);
        }
    }

    public sealed class EipAssociationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation ID. This is required for EC2-VPC.
        /// </summary>
        [Input("allocationId")]
        public Input<string>? AllocationId { get; set; }

        /// <summary>
        /// Whether to allow an Elastic IP to
        /// be re-associated. Defaults to `true` in VPC.
        /// </summary>
        [Input("allowReassociation")]
        public Input<bool>? AllowReassociation { get; set; }

        /// <summary>
        /// The ID of the instance. This is required for
        /// EC2-Classic. For EC2-VPC, you can specify either the instance ID or the
        /// network interface ID, but not both. The operation fails if you specify an
        /// instance ID unless exactly one network interface is attached.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The ID of the network interface. If the
        /// instance has more than one network interface, you must specify a network
        /// interface ID.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// The primary or secondary private IP address
        /// to associate with the Elastic IP address. If no private IP address is
        /// specified, the Elastic IP address is associated with the primary private IP
        /// address.
        /// </summary>
        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        /// <summary>
        /// The Elastic IP address. This is required for EC2-Classic.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        public EipAssociationArgs()
        {
        }
    }

    public sealed class EipAssociationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation ID. This is required for EC2-VPC.
        /// </summary>
        [Input("allocationId")]
        public Input<string>? AllocationId { get; set; }

        /// <summary>
        /// Whether to allow an Elastic IP to
        /// be re-associated. Defaults to `true` in VPC.
        /// </summary>
        [Input("allowReassociation")]
        public Input<bool>? AllowReassociation { get; set; }

        /// <summary>
        /// The ID of the instance. This is required for
        /// EC2-Classic. For EC2-VPC, you can specify either the instance ID or the
        /// network interface ID, but not both. The operation fails if you specify an
        /// instance ID unless exactly one network interface is attached.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The ID of the network interface. If the
        /// instance has more than one network interface, you must specify a network
        /// interface ID.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// The primary or secondary private IP address
        /// to associate with the Elastic IP address. If no private IP address is
        /// specified, the Elastic IP address is associated with the primary private IP
        /// address.
        /// </summary>
        [Input("privateIpAddress")]
        public Input<string>? PrivateIpAddress { get; set; }

        /// <summary>
        /// The Elastic IP address. This is required for EC2-Classic.
        /// </summary>
        [Input("publicIp")]
        public Input<string>? PublicIp { get; set; }

        public EipAssociationState()
        {
        }
    }
}
