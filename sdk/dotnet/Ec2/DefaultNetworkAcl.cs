// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides a resource to manage a VPC's default network ACL. This resource can manage the default network ACL of the default or a non-default VPC.
    /// 
    /// &gt; **NOTE:** This is an advanced resource with special caveats. Please read this document in its entirety before using this resource. The `aws.ec2.DefaultNetworkAcl` behaves differently from normal resources. This provider does not _create_ this resource but instead attempts to "adopt" it into management.
    /// 
    /// Every VPC has a default network ACL that can be managed but not destroyed. When the provider first adopts the Default Network ACL, it **immediately removes all rules in the ACL**. It then proceeds to create any rules specified in the configuration. This step is required so that only the rules specified in the configuration are created.
    /// 
    /// This resource treats its inline rules as absolute; only the rules defined inline are created, and any additions/removals external to this resource will result in diffs being shown. For these reasons, this resource is incompatible with the `aws.ec2.NetworkAclRule` resource.
    /// 
    /// For more information about Network ACLs, see the AWS Documentation on [Network ACLs][aws-network-acls].
    /// 
    /// ## Example Usage
    /// ### Basic Example
    /// 
    /// The following config gives the Default Network ACL the same rules that AWS includes but pulls the resource under management by this provider. This means that any ACL rules added or changed will be detected as drift.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainvpc = new Aws.Ec2.Vpc("mainvpc", new()
    ///     {
    ///         CidrBlock = "10.1.0.0/16",
    ///     });
    /// 
    ///     var @default = new Aws.Ec2.DefaultNetworkAcl("default", new()
    ///     {
    ///         DefaultNetworkAclId = mainvpc.DefaultNetworkAclId,
    ///         Ingress = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.DefaultNetworkAclIngressArgs
    ///             {
    ///                 Protocol = "-1",
    ///                 RuleNo = 100,
    ///                 Action = "allow",
    ///                 CidrBlock = "0.0.0.0/0",
    ///                 FromPort = 0,
    ///                 ToPort = 0,
    ///             },
    ///         },
    ///         Egress = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.DefaultNetworkAclEgressArgs
    ///             {
    ///                 Protocol = "-1",
    ///                 RuleNo = 100,
    ///                 Action = "allow",
    ///                 CidrBlock = "0.0.0.0/0",
    ///                 FromPort = 0,
    ///                 ToPort = 0,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Example: Deny All Egress Traffic, Allow Ingress
    /// 
    /// The following denies all Egress traffic by omitting any `egress` rules, while including the default `ingress` rule to allow all traffic.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainvpc = new Aws.Ec2.Vpc("mainvpc", new()
    ///     {
    ///         CidrBlock = "10.1.0.0/16",
    ///     });
    /// 
    ///     var @default = new Aws.Ec2.DefaultNetworkAcl("default", new()
    ///     {
    ///         DefaultNetworkAclId = mainvpc.DefaultNetworkAclId,
    ///         Ingress = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.DefaultNetworkAclIngressArgs
    ///             {
    ///                 Protocol = "-1",
    ///                 RuleNo = 100,
    ///                 Action = "allow",
    ///                 CidrBlock = aws_default_vpc.Mainvpc.Cidr_block,
    ///                 FromPort = 0,
    ///                 ToPort = 0,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Example: Deny All Traffic To Any Subnet In The Default Network ACL
    /// 
    /// This config denies all traffic in the Default ACL. This can be useful if you want to lock down the VPC to force all resources to assign a non-default ACL.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mainvpc = new Aws.Ec2.Vpc("mainvpc", new()
    ///     {
    ///         CidrBlock = "10.1.0.0/16",
    ///     });
    /// 
    ///     var @default = new Aws.Ec2.DefaultNetworkAcl("default", new()
    ///     {
    ///         DefaultNetworkAclId = mainvpc.DefaultNetworkAclId,
    ///     });
    /// 
    ///     // no rules defined, deny all traffic in this ACL
    /// });
    /// ```
    /// ### Managing Subnets In A Default Network ACL
    /// 
    /// Within a VPC, all Subnets must be associated with a Network ACL. In order to "delete" the association between a Subnet and a non-default Network ACL, the association is destroyed by replacing it with an association between the Subnet and the Default ACL instead.
    /// 
    /// When managing the Default Network ACL, you cannot "remove" Subnets. Instead, they must be reassigned to another Network ACL, or the Subnet itself must be destroyed. Because of these requirements, removing the `subnet_ids` attribute from the configuration of a `aws.ec2.DefaultNetworkAcl` resource may result in a reoccurring plan, until the Subnets are reassigned to another Network ACL or are destroyed.
    /// 
    /// Because Subnets are by default associated with the Default Network ACL, any non-explicit association will show up as a plan to remove the Subnet. For example: if you have a custom `aws.ec2.NetworkAcl` with two subnets attached, and you remove the `aws.ec2.NetworkAcl` resource, after successfully destroying this resource future plans will show a diff on the managed `aws.ec2.DefaultNetworkAcl`, as those two Subnets have been orphaned by the now destroyed network acl and thus adopted by the Default Network ACL. In order to avoid a reoccurring plan, they will need to be reassigned, destroyed, or added to the `subnet_ids` attribute of the `aws.ec2.DefaultNetworkAcl` entry.
    /// 
    /// As an alternative to the above, you can also specify the following lifecycle configuration in your `aws.ec2.DefaultNetworkAcl` resource:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // ... other configuration ...
    ///     var @default = new Aws.Ec2.DefaultNetworkAcl("default");
    /// 
    /// });
    /// ```
    /// ### Removing `aws.ec2.DefaultNetworkAcl` From Your Configuration
    /// 
    /// Each AWS VPC comes with a Default Network ACL that cannot be deleted. The `aws.ec2.DefaultNetworkAcl` allows you to manage this Network ACL, but the provider cannot destroy it. Removing this resource from your configuration will remove it from your statefile and management, **but will not destroy the Network ACL.** All Subnets associations and ingress or egress rules will be left as they are at the time of removal. You can resume managing them via the AWS Console.
    /// 
    /// ## Import
    /// 
    /// Default Network ACLs can be imported using the `id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:ec2/defaultNetworkAcl:DefaultNetworkAcl sample acl-7aaabd18
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl")]
    public partial class DefaultNetworkAcl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the Default Network ACL
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Network ACL ID to manage. This attribute is exported from `aws.ec2.Vpc`, or manually found via the AWS Console.
        /// </summary>
        [Output("defaultNetworkAclId")]
        public Output<string> DefaultNetworkAclId { get; private set; } = null!;

        /// <summary>
        /// Configuration block for an egress rule. Detailed below.
        /// </summary>
        [Output("egress")]
        public Output<ImmutableArray<Outputs.DefaultNetworkAclEgress>> Egress { get; private set; } = null!;

        /// <summary>
        /// Configuration block for an ingress rule. Detailed below.
        /// </summary>
        [Output("ingress")]
        public Output<ImmutableArray<Outputs.DefaultNetworkAclIngress>> Ingress { get; private set; } = null!;

        /// <summary>
        /// ID of the AWS account that owns the Default Network ACL
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// ID of the associated VPC
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultNetworkAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultNetworkAcl(string name, DefaultNetworkAclArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, args ?? new DefaultNetworkAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultNetworkAcl(string name, Input<string> id, DefaultNetworkAclState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/defaultNetworkAcl:DefaultNetworkAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultNetworkAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultNetworkAcl Get(string name, Input<string> id, DefaultNetworkAclState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultNetworkAcl(name, id, state, options);
        }
    }

    public sealed class DefaultNetworkAclArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Network ACL ID to manage. This attribute is exported from `aws.ec2.Vpc`, or manually found via the AWS Console.
        /// </summary>
        [Input("defaultNetworkAclId", required: true)]
        public Input<string> DefaultNetworkAclId { get; set; } = null!;

        [Input("egress")]
        private InputList<Inputs.DefaultNetworkAclEgressArgs>? _egress;

        /// <summary>
        /// Configuration block for an egress rule. Detailed below.
        /// </summary>
        public InputList<Inputs.DefaultNetworkAclEgressArgs> Egress
        {
            get => _egress ?? (_egress = new InputList<Inputs.DefaultNetworkAclEgressArgs>());
            set => _egress = value;
        }

        [Input("ingress")]
        private InputList<Inputs.DefaultNetworkAclIngressArgs>? _ingress;

        /// <summary>
        /// Configuration block for an ingress rule. Detailed below.
        /// </summary>
        public InputList<Inputs.DefaultNetworkAclIngressArgs> Ingress
        {
            get => _ingress ?? (_ingress = new InputList<Inputs.DefaultNetworkAclIngressArgs>());
            set => _ingress = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DefaultNetworkAclArgs()
        {
        }
        public static new DefaultNetworkAclArgs Empty => new DefaultNetworkAclArgs();
    }

    public sealed class DefaultNetworkAclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the Default Network ACL
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Network ACL ID to manage. This attribute is exported from `aws.ec2.Vpc`, or manually found via the AWS Console.
        /// </summary>
        [Input("defaultNetworkAclId")]
        public Input<string>? DefaultNetworkAclId { get; set; }

        [Input("egress")]
        private InputList<Inputs.DefaultNetworkAclEgressGetArgs>? _egress;

        /// <summary>
        /// Configuration block for an egress rule. Detailed below.
        /// </summary>
        public InputList<Inputs.DefaultNetworkAclEgressGetArgs> Egress
        {
            get => _egress ?? (_egress = new InputList<Inputs.DefaultNetworkAclEgressGetArgs>());
            set => _egress = value;
        }

        [Input("ingress")]
        private InputList<Inputs.DefaultNetworkAclIngressGetArgs>? _ingress;

        /// <summary>
        /// Configuration block for an ingress rule. Detailed below.
        /// </summary>
        public InputList<Inputs.DefaultNetworkAclIngressGetArgs> Ingress
        {
            get => _ingress ?? (_ingress = new InputList<Inputs.DefaultNetworkAclIngressGetArgs>());
            set => _ingress = value;
        }

        /// <summary>
        /// ID of the AWS account that owns the Default Network ACL
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// ID of the associated VPC
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public DefaultNetworkAclState()
        {
        }
        public static new DefaultNetworkAclState Empty => new DefaultNetworkAclState();
    }
}
