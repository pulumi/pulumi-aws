// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetNatGateway
    {
        /// <summary>
        /// Provides details about a specific Nat Gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aws.Ec2.GetNatGateway.Invoke(new()
        ///     {
        ///         SubnetId = aws_subnet.Public.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Usage with tags:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aws.Ec2.GetNatGateway.Invoke(new()
        ///     {
        ///         SubnetId = aws_subnet.Public.Id,
        ///         Tags = 
        ///         {
        ///             { "Name", "gw NAT" },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNatGatewayResult> InvokeAsync(GetNatGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNatGatewayResult>("aws:ec2/getNatGateway:getNatGateway", args ?? new GetNatGatewayArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Nat Gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aws.Ec2.GetNatGateway.Invoke(new()
        ///     {
        ///         SubnetId = aws_subnet.Public.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// Usage with tags:
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Aws.Ec2.GetNatGateway.Invoke(new()
        ///     {
        ///         SubnetId = aws_subnet.Public.Id,
        ///         Tags = 
        ///         {
        ///             { "Name", "gw NAT" },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNatGatewayResult> Invoke(GetNatGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatGatewayResult>("aws:ec2/getNatGateway:getNatGateway", args ?? new GetNatGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNatGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNatGatewayFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public List<Inputs.GetNatGatewayFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNatGatewayFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific Nat Gateway to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// State of the NAT gateway (pending | failed | available | deleting | deleted ).
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// ID of subnet that the Nat Gateway resides in.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired Nat Gateway.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the Nat Gateway resides in.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetNatGatewayArgs()
        {
        }
        public static new GetNatGatewayArgs Empty => new GetNatGatewayArgs();
    }

    public sealed class GetNatGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNatGatewayFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public InputList<Inputs.GetNatGatewayFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNatGatewayFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific Nat Gateway to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// State of the NAT gateway (pending | failed | available | deleting | deleted ).
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// ID of subnet that the Nat Gateway resides in.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired Nat Gateway.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the Nat Gateway resides in.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetNatGatewayInvokeArgs()
        {
        }
        public static new GetNatGatewayInvokeArgs Empty => new GetNatGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetNatGatewayResult
    {
        /// <summary>
        /// ID of the EIP allocated to the selected Nat Gateway.
        /// </summary>
        public readonly string AllocationId;
        /// <summary>
        /// The association ID of the Elastic IP address that's associated with the NAT gateway. Only available when `connectivity_type` is `public`.
        /// </summary>
        public readonly string AssociationId;
        /// <summary>
        /// Connectivity type of the NAT Gateway.
        /// </summary>
        public readonly string ConnectivityType;
        public readonly ImmutableArray<Outputs.GetNatGatewayFilterResult> Filters;
        public readonly string Id;
        /// <summary>
        /// The ID of the ENI allocated to the selected Nat Gateway.
        /// </summary>
        public readonly string NetworkInterfaceId;
        /// <summary>
        /// Private Ip address of the selected Nat Gateway.
        /// </summary>
        public readonly string PrivateIp;
        /// <summary>
        /// Public Ip (EIP) address of the selected Nat Gateway.
        /// </summary>
        public readonly string PublicIp;
        public readonly string State;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetNatGatewayResult(
            string allocationId,

            string associationId,

            string connectivityType,

            ImmutableArray<Outputs.GetNatGatewayFilterResult> filters,

            string id,

            string networkInterfaceId,

            string privateIp,

            string publicIp,

            string state,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            AllocationId = allocationId;
            AssociationId = associationId;
            ConnectivityType = connectivityType;
            Filters = filters;
            Id = id;
            NetworkInterfaceId = networkInterfaceId;
            PrivateIp = privateIp;
            PublicIp = publicIp;
            State = state;
            SubnetId = subnetId;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
