// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetNatGateway
    {
        public static Task<GetNatGatewayResult> InvokeAsync(GetNatGatewayArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNatGatewayResult>("aws:ec2/getNatGateway:getNatGateway", args ?? new GetNatGatewayArgs(), options.WithDefaults());

        public static Output<GetNatGatewayResult> Invoke(GetNatGatewayInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatGatewayResult>("aws:ec2/getNatGateway:getNatGateway", args ?? new GetNatGatewayInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNatGatewayArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNatGatewayFilterArgs>? _filters;
        public List<Inputs.GetNatGatewayFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNatGatewayFilterArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public string? Id { get; set; }

        [Input("state")]
        public string? State { get; set; }

        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetNatGatewayArgs()
        {
        }
        public static new GetNatGatewayArgs Empty => new GetNatGatewayArgs();
    }

    public sealed class GetNatGatewayInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNatGatewayFilterInputArgs>? _filters;
        public InputList<Inputs.GetNatGatewayFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNatGatewayFilterInputArgs>());
            set => _filters = value;
        }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetNatGatewayInvokeArgs()
        {
        }
        public static new GetNatGatewayInvokeArgs Empty => new GetNatGatewayInvokeArgs();
    }


    [OutputType]
    public sealed class GetNatGatewayResult
    {
        public readonly string AllocationId;
        public readonly string ConnectivityType;
        public readonly ImmutableArray<Outputs.GetNatGatewayFilterResult> Filters;
        public readonly string Id;
        public readonly string NetworkInterfaceId;
        public readonly string PrivateIp;
        public readonly string PublicIp;
        public readonly string State;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetNatGatewayResult(
            string allocationId,

            string connectivityType,

            ImmutableArray<Outputs.GetNatGatewayFilterResult> filters,

            string id,

            string networkInterfaceId,

            string privateIp,

            string publicIp,

            string state,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            AllocationId = allocationId;
            ConnectivityType = connectivityType;
            Filters = filters;
            Id = id;
            NetworkInterfaceId = networkInterfaceId;
            PrivateIp = privateIp;
            PublicIp = publicIp;
            State = state;
            SubnetId = subnetId;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
