// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetManagedPrefixList
    {
        /// <summary>
        /// `aws.ec2.ManagedPrefixList` provides details about a specific AWS prefix list or
        /// customer-managed prefix list in the current region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Find the regional DynamoDB prefix list
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var current = Output.Create(Aws.GetRegion.InvokeAsync());
        ///         var example = current.Apply(current =&gt; Output.Create(Aws.Ec2.GetManagedPrefixList.InvokeAsync(new Aws.Ec2.GetManagedPrefixListArgs
        ///         {
        ///             Name = $"com.amazonaws.{current.Name}.dynamodb",
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Find a managed prefix list using filters
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Ec2.GetManagedPrefixList.InvokeAsync(new Aws.Ec2.GetManagedPrefixListArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2.Inputs.GetManagedPrefixListFilterArgs
        ///                 {
        ///                     Name = "prefix-list-name",
        ///                     Values = 
        ///                     {
        ///                         "my-prefix-list",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetManagedPrefixListResult> InvokeAsync(GetManagedPrefixListArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetManagedPrefixListResult>("aws:ec2/getManagedPrefixList:getManagedPrefixList", args ?? new GetManagedPrefixListArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ec2.ManagedPrefixList` provides details about a specific AWS prefix list or
        /// customer-managed prefix list in the current region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Find the regional DynamoDB prefix list
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var current = Output.Create(Aws.GetRegion.InvokeAsync());
        ///         var example = current.Apply(current =&gt; Output.Create(Aws.Ec2.GetManagedPrefixList.InvokeAsync(new Aws.Ec2.GetManagedPrefixListArgs
        ///         {
        ///             Name = $"com.amazonaws.{current.Name}.dynamodb",
        ///         })));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Find a managed prefix list using filters
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Ec2.GetManagedPrefixList.InvokeAsync(new Aws.Ec2.GetManagedPrefixListArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2.Inputs.GetManagedPrefixListFilterArgs
        ///                 {
        ///                     Name = "prefix-list-name",
        ///                     Values = 
        ///                     {
        ///                         "my-prefix-list",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetManagedPrefixListResult> Invoke(GetManagedPrefixListInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetManagedPrefixListResult>("aws:ec2/getManagedPrefixList:getManagedPrefixList", args ?? new GetManagedPrefixListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetManagedPrefixListArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetManagedPrefixListFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetManagedPrefixListFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetManagedPrefixListFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the prefix list to select.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the filter field. Valid values can be found in the EC2 [DescribeManagedPrefixLists](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeManagedPrefixLists.html) API Reference.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags assigned to the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetManagedPrefixListArgs()
        {
        }
    }

    public sealed class GetManagedPrefixListInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetManagedPrefixListFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public InputList<Inputs.GetManagedPrefixListFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetManagedPrefixListFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the prefix list to select.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the filter field. Valid values can be found in the EC2 [DescribeManagedPrefixLists](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeManagedPrefixLists.html) API Reference.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags assigned to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetManagedPrefixListInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetManagedPrefixListResult
    {
        /// <summary>
        /// The address family of the prefix list. Valid values are `IPv4` and `IPv6`.
        /// </summary>
        public readonly string AddressFamily;
        /// <summary>
        /// The ARN of the selected prefix list.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The set of entries in this prefix list. Each entry is an object with `cidr` and `description`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetManagedPrefixListEntryResult> Entries;
        public readonly ImmutableArray<Outputs.GetManagedPrefixListFilterResult> Filters;
        /// <summary>
        /// The ID of the selected prefix list.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// When then prefix list is managed, the maximum number of entries it supports, or null otherwise.
        /// </summary>
        public readonly int MaxEntries;
        /// <summary>
        /// The name of the selected prefix list.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Account ID of the owner of a customer-managed prefix list, or `AWS` otherwise.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// A map of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly int Version;

        [OutputConstructor]
        private GetManagedPrefixListResult(
            string addressFamily,

            string arn,

            ImmutableArray<Outputs.GetManagedPrefixListEntryResult> entries,

            ImmutableArray<Outputs.GetManagedPrefixListFilterResult> filters,

            string id,

            int maxEntries,

            string name,

            string ownerId,

            ImmutableDictionary<string, string> tags,

            int version)
        {
            AddressFamily = addressFamily;
            Arn = arn;
            Entries = entries;
            Filters = filters;
            Id = id;
            MaxEntries = maxEntries;
            Name = name;
            OwnerId = ownerId;
            Tags = tags;
            Version = version;
        }
    }
}
