// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpcs
    {
        /// <summary>
        /// This resource can be useful for getting back a list of VPC Ids for a region.
        /// 
        /// The following example retrieves a list of VPC Ids with a custom tag of `service` set to a value of "production".
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputting all VPC Ids.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Aws.Ec2.GetVpcs.Invoke(new()
        ///     {
        ///         Tags = 
        ///         {
        ///             { "service", "production" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["foo"] = foo.Apply(getVpcsResult =&gt; getVpcsResult.Ids),
        ///     };
        /// });
        /// ```
        /// 
        /// An example use case would be interpolate the `aws.ec2.getVpcs` output into `count` of an aws.ec2.FlowLog resource.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var foo = await Aws.Ec2.GetVpcs.InvokeAsync();
        /// 
        ///     var fooGetVpc = ;
        /// 
        ///     var testFlowLog = new List&lt;Aws.Ec2.FlowLog&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; foo.Ids.Length; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         testFlowLog.Add(new Aws.Ec2.FlowLog($"test_flow_log-{range.Value}", new()
        ///         {
        ///             VpcId = fooGetVpc[range.Value].Id,
        ///         }));
        ///     }
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["foo"] = foo.Ids,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcsResult> InvokeAsync(GetVpcsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcsResult>("aws:ec2/getVpcs:getVpcs", args ?? new GetVpcsArgs(), options.WithDefaults());

        /// <summary>
        /// This resource can be useful for getting back a list of VPC Ids for a region.
        /// 
        /// The following example retrieves a list of VPC Ids with a custom tag of `service` set to a value of "production".
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputting all VPC Ids.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Aws.Ec2.GetVpcs.Invoke(new()
        ///     {
        ///         Tags = 
        ///         {
        ///             { "service", "production" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["foo"] = foo.Apply(getVpcsResult =&gt; getVpcsResult.Ids),
        ///     };
        /// });
        /// ```
        /// 
        /// An example use case would be interpolate the `aws.ec2.getVpcs` output into `count` of an aws.ec2.FlowLog resource.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Threading.Tasks;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// 	
        /// object NotImplemented(string errorMessage) 
        /// {
        ///     throw new System.NotImplementedException(errorMessage);
        /// }
        /// 
        /// return await Deployment.RunAsync(async() =&gt; 
        /// {
        ///     var foo = await Aws.Ec2.GetVpcs.InvokeAsync();
        /// 
        ///     var fooGetVpc = ;
        /// 
        ///     var testFlowLog = new List&lt;Aws.Ec2.FlowLog&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; foo.Ids.Length; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         testFlowLog.Add(new Aws.Ec2.FlowLog($"test_flow_log-{range.Value}", new()
        ///         {
        ///             VpcId = fooGetVpc[range.Value].Id,
        ///         }));
        ///     }
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["foo"] = foo.Ids,
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVpcsResult> Invoke(GetVpcsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcsResult>("aws:ec2/getVpcs:getVpcs", args ?? new GetVpcsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpcsFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public List<Inputs.GetVpcsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcsFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired vpcs.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetVpcsArgs()
        {
        }
        public static new GetVpcsArgs Empty => new GetVpcsArgs();
    }

    public sealed class GetVpcsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVpcsFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public InputList<Inputs.GetVpcsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired vpcs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetVpcsInvokeArgs()
        {
        }
        public static new GetVpcsInvokeArgs Empty => new GetVpcsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcsResult
    {
        public readonly ImmutableArray<Outputs.GetVpcsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of all the VPC Ids found.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetVpcsResult(
            ImmutableArray<Outputs.GetVpcsFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableDictionary<string, string> tags)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Tags = tags;
        }
    }
}
