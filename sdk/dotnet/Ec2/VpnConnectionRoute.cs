// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides a static route between a VPN connection and a customer gateway.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var vpc = new Aws.Ec2.Vpc("vpc", new Aws.Ec2.VpcArgs
    ///         {
    ///             CidrBlock = "10.0.0.0/16",
    ///         });
    ///         var vpnGateway = new Aws.Ec2.VpnGateway("vpnGateway", new Aws.Ec2.VpnGatewayArgs
    ///         {
    ///             VpcId = vpc.Id,
    ///         });
    ///         var customerGateway = new Aws.Ec2.CustomerGateway("customerGateway", new Aws.Ec2.CustomerGatewayArgs
    ///         {
    ///             BgpAsn = "65000",
    ///             IpAddress = "172.0.0.1",
    ///             Type = "ipsec.1",
    ///         });
    ///         var main = new Aws.Ec2.VpnConnection("main", new Aws.Ec2.VpnConnectionArgs
    ///         {
    ///             VpnGatewayId = vpnGateway.Id,
    ///             CustomerGatewayId = customerGateway.Id,
    ///             Type = "ipsec.1",
    ///             StaticRoutesOnly = true,
    ///         });
    ///         var office = new Aws.Ec2.VpnConnectionRoute("office", new Aws.Ec2.VpnConnectionRouteArgs
    ///         {
    ///             DestinationCidrBlock = "192.168.10.0/24",
    ///             VpnConnectionId = main.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/vpnConnectionRoute:VpnConnectionRoute")]
    public partial class VpnConnectionRoute : Pulumi.CustomResource
    {
        /// <summary>
        /// The CIDR block associated with the local subnet of the customer network.
        /// </summary>
        [Output("destinationCidrBlock")]
        public Output<string> DestinationCidrBlock { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Output("vpnConnectionId")]
        public Output<string> VpnConnectionId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnConnectionRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnConnectionRoute(string name, VpnConnectionRouteArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/vpnConnectionRoute:VpnConnectionRoute", name, args ?? new VpnConnectionRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnConnectionRoute(string name, Input<string> id, VpnConnectionRouteState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/vpnConnectionRoute:VpnConnectionRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnConnectionRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnConnectionRoute Get(string name, Input<string> id, VpnConnectionRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnConnectionRoute(name, id, state, options);
        }
    }

    public sealed class VpnConnectionRouteArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block associated with the local subnet of the customer network.
        /// </summary>
        [Input("destinationCidrBlock", required: true)]
        public Input<string> DestinationCidrBlock { get; set; } = null!;

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Input("vpnConnectionId", required: true)]
        public Input<string> VpnConnectionId { get; set; } = null!;

        public VpnConnectionRouteArgs()
        {
        }
    }

    public sealed class VpnConnectionRouteState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The CIDR block associated with the local subnet of the customer network.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        /// <summary>
        /// The ID of the VPN connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public Input<string>? VpnConnectionId { get; set; }

        public VpnConnectionRouteState()
        {
        }
    }
}
