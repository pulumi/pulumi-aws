// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetEips
    {
        /// <summary>
        /// Provides a list of Elastic IPs in a region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputing all Elastic IPs with the a specific tag value.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetEips.Invoke(new()
        ///     {
        ///         Tags = 
        ///         {
        ///             { "Env", "dev" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["allocationIds"] = example.Apply(getEipsResult =&gt; getEipsResult.AllocationIds),
        ///         ["publicIps"] = example.Apply(getEipsResult =&gt; getEipsResult.PublicIps),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEipsResult> InvokeAsync(GetEipsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEipsResult>("aws:ec2/getEips:getEips", args ?? new GetEipsArgs(), options.WithDefaults());

        /// <summary>
        /// Provides a list of Elastic IPs in a region.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following shows outputing all Elastic IPs with the a specific tag value.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetEips.Invoke(new()
        ///     {
        ///         Tags = 
        ///         {
        ///             { "Env", "dev" },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["allocationIds"] = example.Apply(getEipsResult =&gt; getEipsResult.AllocationIds),
        ///         ["publicIps"] = example.Apply(getEipsResult =&gt; getEipsResult.PublicIps),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEipsResult> Invoke(GetEipsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetEipsResult>("aws:ec2/getEips:getEips", args ?? new GetEipsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEipsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetEipsFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetEipsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEipsFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired Elastic IPs.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetEipsArgs()
        {
        }
        public static new GetEipsArgs Empty => new GetEipsArgs();
    }

    public sealed class GetEipsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetEipsFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetEipsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEipsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired Elastic IPs.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetEipsInvokeArgs()
        {
        }
        public static new GetEipsInvokeArgs Empty => new GetEipsInvokeArgs();
    }


    [OutputType]
    public sealed class GetEipsResult
    {
        /// <summary>
        /// List of all the allocation IDs for address for use with EC2-VPC.
        /// </summary>
        public readonly ImmutableArray<string> AllocationIds;
        public readonly ImmutableArray<Outputs.GetEipsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of all the Elastic IP addresses.
        /// </summary>
        public readonly ImmutableArray<string> PublicIps;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetEipsResult(
            ImmutableArray<string> allocationIds,

            ImmutableArray<Outputs.GetEipsFilterResult> filters,

            string id,

            ImmutableArray<string> publicIps,

            ImmutableDictionary<string, string> tags)
        {
            AllocationIds = allocationIds;
            Filters = filters;
            Id = id;
            PublicIps = publicIps;
            Tags = tags;
        }
    }
}
