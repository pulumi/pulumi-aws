// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2.Outputs
{

    [OutputType]
    public sealed class AmiCopyEbsBlockDevice
    {
        /// <summary>
        /// Boolean controlling whether the EBS volumes created to
        /// support each created instance will be deleted once that instance is terminated.
        /// </summary>
        public readonly bool? DeleteOnTermination;
        /// <summary>
        /// Path at which the device is exposed to created instances.
        /// </summary>
        public readonly string? DeviceName;
        /// <summary>
        /// Boolean controlling whether the created EBS volumes will be encrypted. Can't be used with `SnapshotId`.
        /// </summary>
        public readonly bool? Encrypted;
        /// <summary>
        /// Number of I/O operations per second the
        /// created volumes will support.
        /// </summary>
        public readonly int? Iops;
        /// <summary>
        /// ARN of the Outpost on which the snapshot is stored.
        /// 
        /// &gt; **Note:** You can specify `Encrypted` or `SnapshotId` but not both.
        /// </summary>
        public readonly string? OutpostArn;
        /// <summary>
        /// ID of an EBS snapshot that will be used to initialize the created
        /// EBS volumes. If set, the `VolumeSize` attribute must be at least as large as the referenced
        /// snapshot.
        /// </summary>
        public readonly string? SnapshotId;
        /// <summary>
        /// Throughput that the EBS volume supports, in MiB/s. Only valid for `VolumeType` of `Gp3`.
        /// </summary>
        public readonly int? Throughput;
        /// <summary>
        /// Size of created volumes in GiB.
        /// If `SnapshotId` is set and `VolumeSize` is omitted then the volume will have the same size
        /// as the selected snapshot.
        /// </summary>
        public readonly int? VolumeSize;
        /// <summary>
        /// Type of EBS volume to create. Can be `Standard`, `Gp2`, `Gp3`, `Io1`, `Io2`, `Sc1` or `St1` (Default: `Standard`).
        /// </summary>
        public readonly string? VolumeType;

        [OutputConstructor]
        private AmiCopyEbsBlockDevice(
            bool? deleteOnTermination,

            string? deviceName,

            bool? encrypted,

            int? iops,

            string? outpostArn,

            string? snapshotId,

            int? throughput,

            int? volumeSize,

            string? volumeType)
        {
            DeleteOnTermination = deleteOnTermination;
            DeviceName = deviceName;
            Encrypted = encrypted;
            Iops = iops;
            OutpostArn = outpostArn;
            SnapshotId = snapshotId;
            Throughput = throughput;
            VolumeSize = volumeSize;
            VolumeType = volumeType;
        }
    }
}
