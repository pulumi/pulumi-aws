// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpnConnection
    {
        /// <summary>
        /// Fetches details of a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetVpnConnection.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpnConnectionFilterInputArgs
        ///             {
        ///                 Name = "customer-gateway-id",
        ///                 Values = new[]
        ///                 {
        ///                     "cgw-1234567890",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpnConnectionId"] = example.Apply(getVpnConnectionResult =&gt; getVpnConnectionResult.VpnConnectionId),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Find by VPN Connection ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetVpnConnection.Invoke(new()
        ///     {
        ///         VpnConnectionId = "vpn-abcd1234567890",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["gatewayAssociationState"] = example.Apply(getVpnConnectionResult =&gt; getVpnConnectionResult.GatewayAssociationState),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpnConnectionResult> InvokeAsync(GetVpnConnectionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnConnectionResult>("aws:ec2/getVpnConnection:getVpnConnection", args ?? new GetVpnConnectionArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches details of a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetVpnConnection.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpnConnectionFilterInputArgs
        ///             {
        ///                 Name = "customer-gateway-id",
        ///                 Values = new[]
        ///                 {
        ///                     "cgw-1234567890",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpnConnectionId"] = example.Apply(getVpnConnectionResult =&gt; getVpnConnectionResult.VpnConnectionId),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Find by VPN Connection ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetVpnConnection.Invoke(new()
        ///     {
        ///         VpnConnectionId = "vpn-abcd1234567890",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["gatewayAssociationState"] = example.Apply(getVpnConnectionResult =&gt; getVpnConnectionResult.GatewayAssociationState),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnConnectionResult> Invoke(GetVpnConnectionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionResult>("aws:ec2/getVpnConnection:getVpnConnection", args ?? new GetVpnConnectionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Fetches details of a Site-to-Site VPN connection. A Site-to-Site VPN connection is an Internet Protocol security (IPsec) VPN connection between a VPC and an on-premises network.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetVpnConnection.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpnConnectionFilterInputArgs
        ///             {
        ///                 Name = "customer-gateway-id",
        ///                 Values = new[]
        ///                 {
        ///                     "cgw-1234567890",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["vpnConnectionId"] = example.Apply(getVpnConnectionResult =&gt; getVpnConnectionResult.VpnConnectionId),
        ///     };
        /// });
        /// ```
        /// 
        /// ### Find by VPN Connection ID
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetVpnConnection.Invoke(new()
        ///     {
        ///         VpnConnectionId = "vpn-abcd1234567890",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["gatewayAssociationState"] = example.Apply(getVpnConnectionResult =&gt; getVpnConnectionResult.GatewayAssociationState),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnConnectionResult> Invoke(GetVpnConnectionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnConnectionResult>("aws:ec2/getVpnConnection:getVpnConnection", args ?? new GetVpnConnectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnConnectionArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpnConnectionFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetVpnConnectionFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpnConnectionFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// Identifier of the EC2 VPN Connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public string? VpnConnectionId { get; set; }

        public GetVpnConnectionArgs()
        {
        }
        public static new GetVpnConnectionArgs Empty => new GetVpnConnectionArgs();
    }

    public sealed class GetVpnConnectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVpnConnectionFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public InputList<Inputs.GetVpnConnectionFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpnConnectionFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Identifier of the EC2 VPN Connection.
        /// </summary>
        [Input("vpnConnectionId")]
        public Input<string>? VpnConnectionId { get; set; }

        public GetVpnConnectionInvokeArgs()
        {
        }
        public static new GetVpnConnectionInvokeArgs Empty => new GetVpnConnectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnConnectionResult
    {
        /// <summary>
        /// Category of the VPN connection. A value of VPN indicates an AWS VPN connection. A value of VPN-Classic indicates an AWS Classic VPN connection.
        /// </summary>
        public readonly string Category;
        /// <summary>
        /// ARN of the core network.
        /// </summary>
        public readonly string CoreNetworkArn;
        /// <summary>
        /// ARN of the core network attachment.
        /// </summary>
        public readonly string CoreNetworkAttachmentArn;
        /// <summary>
        /// Configuration information for the VPN connection's customer gateway (in the native XML format).
        /// </summary>
        public readonly string CustomerGatewayConfiguration;
        /// <summary>
        /// ID of the customer gateway at your end of the VPN connection.
        /// </summary>
        public readonly string CustomerGatewayId;
        public readonly ImmutableArray<Outputs.GetVpnConnectionFilterResult> Filters;
        /// <summary>
        /// Current state of the gateway association.
        /// </summary>
        public readonly string GatewayAssociationState;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (ARN) of the Secrets Manager secret storing the pre-shared key(s) for the VPN connection.
        /// </summary>
        public readonly string PreSharedKeyArn;
        public readonly string Region;
        /// <summary>
        /// List of static routes associated with the VPN connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionRouteResult> Routes;
        /// <summary>
        /// Current state of the VPN connection.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Tags associated to the VPN Connection.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// ID of a transit gateway associated with the VPN connection.
        /// </summary>
        public readonly string TransitGatewayId;
        /// <summary>
        /// Type of VPN connection. Currently the only supported type is ipsec.1.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// List of objects containing information about the VPN tunnel.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnConnectionVgwTelemetryResult> VgwTelemetries;
        public readonly string VpnConnectionId;
        /// <summary>
        /// ID of a virtual private gateway associated with the VPN connection.
        /// </summary>
        public readonly string VpnGatewayId;

        [OutputConstructor]
        private GetVpnConnectionResult(
            string category,

            string coreNetworkArn,

            string coreNetworkAttachmentArn,

            string customerGatewayConfiguration,

            string customerGatewayId,

            ImmutableArray<Outputs.GetVpnConnectionFilterResult> filters,

            string gatewayAssociationState,

            string id,

            string preSharedKeyArn,

            string region,

            ImmutableArray<Outputs.GetVpnConnectionRouteResult> routes,

            string state,

            ImmutableDictionary<string, string> tags,

            string transitGatewayId,

            string type,

            ImmutableArray<Outputs.GetVpnConnectionVgwTelemetryResult> vgwTelemetries,

            string vpnConnectionId,

            string vpnGatewayId)
        {
            Category = category;
            CoreNetworkArn = coreNetworkArn;
            CoreNetworkAttachmentArn = coreNetworkAttachmentArn;
            CustomerGatewayConfiguration = customerGatewayConfiguration;
            CustomerGatewayId = customerGatewayId;
            Filters = filters;
            GatewayAssociationState = gatewayAssociationState;
            Id = id;
            PreSharedKeyArn = preSharedKeyArn;
            Region = region;
            Routes = routes;
            State = state;
            Tags = tags;
            TransitGatewayId = transitGatewayId;
            Type = type;
            VgwTelemetries = vgwTelemetries;
            VpnConnectionId = vpnConnectionId;
            VpnGatewayId = vpnGatewayId;
        }
    }
}
