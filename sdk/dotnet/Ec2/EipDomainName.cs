// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Assigns a static reverse DNS record to an Elastic IP addresses. See [Using reverse DNS for email applications](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#Using_Elastic_Addressing_Reverse_DNS).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Ec2.Eip("example", new()
    ///     {
    ///         Domain = "vpc",
    ///     });
    /// 
    ///     var exampleRecord = new Aws.Route53.Record("example", new()
    ///     {
    ///         ZoneId = main.ZoneId,
    ///         Name = "reverse",
    ///         Type = Aws.Route53.RecordType.A,
    ///         Records = new[]
    ///         {
    ///             example.PublicIp,
    ///         },
    ///     });
    /// 
    ///     var exampleEipDomainName = new Aws.Ec2.EipDomainName("example", new()
    ///     {
    ///         AllocationId = example.AllocationId,
    ///         DomainName = exampleRecord.Fqdn,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/eipDomainName:EipDomainName")]
    public partial class EipDomainName : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The allocation ID.
        /// </summary>
        [Output("allocationId")]
        public Output<string> AllocationId { get; private set; } = null!;

        /// <summary>
        /// The domain name to modify for the IP address.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// The DNS pointer (PTR) record for the IP address.
        /// </summary>
        [Output("ptrRecord")]
        public Output<string> PtrRecord { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.EipDomainNameTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a EipDomainName resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EipDomainName(string name, EipDomainNameArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/eipDomainName:EipDomainName", name, args ?? new EipDomainNameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EipDomainName(string name, Input<string> id, EipDomainNameState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/eipDomainName:EipDomainName", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EipDomainName resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EipDomainName Get(string name, Input<string> id, EipDomainNameState? state = null, CustomResourceOptions? options = null)
        {
            return new EipDomainName(name, id, state, options);
        }
    }

    public sealed class EipDomainNameArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation ID.
        /// </summary>
        [Input("allocationId", required: true)]
        public Input<string> AllocationId { get; set; } = null!;

        /// <summary>
        /// The domain name to modify for the IP address.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.EipDomainNameTimeoutsArgs>? Timeouts { get; set; }

        public EipDomainNameArgs()
        {
        }
        public static new EipDomainNameArgs Empty => new EipDomainNameArgs();
    }

    public sealed class EipDomainNameState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation ID.
        /// </summary>
        [Input("allocationId")]
        public Input<string>? AllocationId { get; set; }

        /// <summary>
        /// The domain name to modify for the IP address.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// The DNS pointer (PTR) record for the IP address.
        /// </summary>
        [Input("ptrRecord")]
        public Input<string>? PtrRecord { get; set; }

        [Input("timeouts")]
        public Input<Inputs.EipDomainNameTimeoutsGetArgs>? Timeouts { get; set; }

        public EipDomainNameState()
        {
        }
        public static new EipDomainNameState Empty => new EipDomainNameState();
    }
}
