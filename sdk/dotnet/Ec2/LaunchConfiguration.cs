// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides a resource to create a new launch configuration, used for autoscaling groups.
    /// 
    /// !&gt; **WARNING:** The use of launch configurations is discouraged in favor of launch templates. Read more in the [AWS EC2 Documentation](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-configurations.html).
    /// 
    /// &gt; **Note** When using `aws.ec2.LaunchConfiguration` with `aws.autoscaling.Group`, it is recommended to use the `name_prefix` (Optional) instead of the `name` (Optional) attribute.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ubuntu = Aws.Ec2.GetAmi.Invoke(new()
    ///     {
    ///         MostRecent = true,
    ///         Filters = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.GetAmiFilterInputArgs
    ///             {
    ///                 Name = "name",
    ///                 Values = new[]
    ///                 {
    ///                     "ubuntu/images/hvm-ssd/ubuntu-trusty-14.04-amd64-server-*",
    ///                 },
    ///             },
    ///             new Aws.Ec2.Inputs.GetAmiFilterInputArgs
    ///             {
    ///                 Name = "virtualization-type",
    ///                 Values = new[]
    ///                 {
    ///                     "hvm",
    ///                 },
    ///             },
    ///         },
    ///         Owners = new[]
    ///         {
    ///             "099720109477",
    ///         },
    ///     });
    /// 
    ///     var asConf = new Aws.Ec2.LaunchConfiguration("as_conf", new()
    ///     {
    ///         Name = "web_config",
    ///         ImageId = ubuntu.Apply(getAmiResult =&gt; getAmiResult.Id),
    ///         InstanceType = "t2.micro",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import launch configurations using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:ec2/launchConfiguration:LaunchConfiguration as_conf pulumi-lg-123456
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/launchConfiguration:LaunchConfiguration")]
    public partial class LaunchConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name of the launch configuration.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Associate a public ip address with an instance in a VPC.
        /// </summary>
        [Output("associatePublicIpAddress")]
        public Output<bool?> AssociatePublicIpAddress { get; private set; } = null!;

        /// <summary>
        /// Additional EBS block devices to attach to the instance. See Block Devices below for details.
        /// </summary>
        [Output("ebsBlockDevices")]
        public Output<ImmutableArray<Outputs.LaunchConfigurationEbsBlockDevice>> EbsBlockDevices { get; private set; } = null!;

        /// <summary>
        /// If true, the launched EC2 instance will be EBS-optimized.
        /// </summary>
        [Output("ebsOptimized")]
        public Output<bool> EbsOptimized { get; private set; } = null!;

        /// <summary>
        /// Enables/disables detailed monitoring. This is enabled by default.
        /// </summary>
        [Output("enableMonitoring")]
        public Output<bool?> EnableMonitoring { get; private set; } = null!;

        /// <summary>
        /// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
        /// </summary>
        [Output("ephemeralBlockDevices")]
        public Output<ImmutableArray<Outputs.LaunchConfigurationEphemeralBlockDevice>> EphemeralBlockDevices { get; private set; } = null!;

        /// <summary>
        /// The name attribute of the IAM instance profile to associate with launched instances.
        /// </summary>
        [Output("iamInstanceProfile")]
        public Output<string?> IamInstanceProfile { get; private set; } = null!;

        /// <summary>
        /// The EC2 image ID to launch.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The size of instance to launch.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The key name that should be used for the instance.
        /// </summary>
        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        /// <summary>
        /// The metadata options for the instance.
        /// </summary>
        [Output("metadataOptions")]
        public Output<Outputs.LaunchConfigurationMetadataOptions> MetadataOptions { get; private set; } = null!;

        /// <summary>
        /// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `name_prefix`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        /// <summary>
        /// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
        /// </summary>
        [Output("placementTenancy")]
        public Output<string?> PlacementTenancy { get; private set; } = null!;

        /// <summary>
        /// Customize details about the root block device of the instance. See Block Devices below for details.
        /// </summary>
        [Output("rootBlockDevice")]
        public Output<Outputs.LaunchConfigurationRootBlockDevice> RootBlockDevice { get; private set; } = null!;

        /// <summary>
        /// A list of associated security group IDS.
        /// </summary>
        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        /// <summary>
        /// The maximum price to use for reserving spot instances.
        /// </summary>
        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        /// <summary>
        /// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        /// <summary>
        /// Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
        /// </summary>
        [Output("userDataBase64")]
        public Output<string?> UserDataBase64 { get; private set; } = null!;


        /// <summary>
        /// Create a LaunchConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LaunchConfiguration(string name, LaunchConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/launchConfiguration:LaunchConfiguration", name, args ?? new LaunchConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LaunchConfiguration(string name, Input<string> id, LaunchConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/launchConfiguration:LaunchConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LaunchConfiguration Get(string name, Input<string> id, LaunchConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new LaunchConfiguration(name, id, state, options);
        }
    }

    public sealed class LaunchConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Associate a public ip address with an instance in a VPC.
        /// </summary>
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("ebsBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEbsBlockDeviceArgs>? _ebsBlockDevices;

        /// <summary>
        /// Additional EBS block devices to attach to the instance. See Block Devices below for details.
        /// </summary>
        public InputList<Inputs.LaunchConfigurationEbsBlockDeviceArgs> EbsBlockDevices
        {
            get => _ebsBlockDevices ?? (_ebsBlockDevices = new InputList<Inputs.LaunchConfigurationEbsBlockDeviceArgs>());
            set => _ebsBlockDevices = value;
        }

        /// <summary>
        /// If true, the launched EC2 instance will be EBS-optimized.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        /// <summary>
        /// Enables/disables detailed monitoring. This is enabled by default.
        /// </summary>
        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        [Input("ephemeralBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceArgs>? _ephemeralBlockDevices;

        /// <summary>
        /// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
        /// </summary>
        public InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceArgs> EphemeralBlockDevices
        {
            get => _ephemeralBlockDevices ?? (_ephemeralBlockDevices = new InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceArgs>());
            set => _ephemeralBlockDevices = value;
        }

        /// <summary>
        /// The name attribute of the IAM instance profile to associate with launched instances.
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// The EC2 image ID to launch.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The size of instance to launch.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// The key name that should be used for the instance.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The metadata options for the instance.
        /// </summary>
        [Input("metadataOptions")]
        public Input<Inputs.LaunchConfigurationMetadataOptionsArgs>? MetadataOptions { get; set; }

        /// <summary>
        /// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
        /// </summary>
        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        /// <summary>
        /// Customize details about the root block device of the instance. See Block Devices below for details.
        /// </summary>
        [Input("rootBlockDevice")]
        public Input<Inputs.LaunchConfigurationRootBlockDeviceArgs>? RootBlockDevice { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// A list of associated security group IDS.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The maximum price to use for reserving spot instances.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
        /// </summary>
        [Input("userDataBase64")]
        public Input<string>? UserDataBase64 { get; set; }

        public LaunchConfigurationArgs()
        {
        }
        public static new LaunchConfigurationArgs Empty => new LaunchConfigurationArgs();
    }

    public sealed class LaunchConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name of the launch configuration.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Associate a public ip address with an instance in a VPC.
        /// </summary>
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("ebsBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEbsBlockDeviceGetArgs>? _ebsBlockDevices;

        /// <summary>
        /// Additional EBS block devices to attach to the instance. See Block Devices below for details.
        /// </summary>
        public InputList<Inputs.LaunchConfigurationEbsBlockDeviceGetArgs> EbsBlockDevices
        {
            get => _ebsBlockDevices ?? (_ebsBlockDevices = new InputList<Inputs.LaunchConfigurationEbsBlockDeviceGetArgs>());
            set => _ebsBlockDevices = value;
        }

        /// <summary>
        /// If true, the launched EC2 instance will be EBS-optimized.
        /// </summary>
        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        /// <summary>
        /// Enables/disables detailed monitoring. This is enabled by default.
        /// </summary>
        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        [Input("ephemeralBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceGetArgs>? _ephemeralBlockDevices;

        /// <summary>
        /// Customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details.
        /// </summary>
        public InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceGetArgs> EphemeralBlockDevices
        {
            get => _ephemeralBlockDevices ?? (_ephemeralBlockDevices = new InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceGetArgs>());
            set => _ephemeralBlockDevices = value;
        }

        /// <summary>
        /// The name attribute of the IAM instance profile to associate with launched instances.
        /// </summary>
        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        /// <summary>
        /// The EC2 image ID to launch.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The size of instance to launch.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The key name that should be used for the instance.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The metadata options for the instance.
        /// </summary>
        [Input("metadataOptions")]
        public Input<Inputs.LaunchConfigurationMetadataOptionsGetArgs>? MetadataOptions { get; set; }

        /// <summary>
        /// The name of the launch configuration. If you leave this blank, this provider will auto-generate a unique name. Conflicts with `name_prefix`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Creates a unique name beginning with the specified prefix. Conflicts with `name`.
        /// </summary>
        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        /// <summary>
        /// The tenancy of the instance. Valid values are `default` or `dedicated`, see [AWS's Create Launch Configuration](http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_CreateLaunchConfiguration.html) for more details.
        /// </summary>
        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        /// <summary>
        /// Customize details about the root block device of the instance. See Block Devices below for details.
        /// </summary>
        [Input("rootBlockDevice")]
        public Input<Inputs.LaunchConfigurationRootBlockDeviceGetArgs>? RootBlockDevice { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// A list of associated security group IDS.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The maximum price to use for reserving spot instances.
        /// </summary>
        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        /// <summary>
        /// The user data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see `user_data_base64` instead.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// Can be used instead of `user_data` to pass base64-encoded binary data directly. Use this instead of `user_data` whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption.
        /// </summary>
        [Input("userDataBase64")]
        public Input<string>? UserDataBase64 { get; set; }

        public LaunchConfigurationState()
        {
        }
        public static new LaunchConfigurationState Empty => new LaunchConfigurationState();
    }
}
