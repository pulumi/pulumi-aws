// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    [AwsResourceType("aws:ec2/launchConfiguration:LaunchConfiguration")]
    public partial class LaunchConfiguration : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("associatePublicIpAddress")]
        public Output<bool?> AssociatePublicIpAddress { get; private set; } = null!;

        [Output("ebsBlockDevices")]
        public Output<ImmutableArray<Outputs.LaunchConfigurationEbsBlockDevice>> EbsBlockDevices { get; private set; } = null!;

        [Output("ebsOptimized")]
        public Output<bool> EbsOptimized { get; private set; } = null!;

        [Output("enableMonitoring")]
        public Output<bool?> EnableMonitoring { get; private set; } = null!;

        [Output("ephemeralBlockDevices")]
        public Output<ImmutableArray<Outputs.LaunchConfigurationEphemeralBlockDevice>> EphemeralBlockDevices { get; private set; } = null!;

        [Output("iamInstanceProfile")]
        public Output<string?> IamInstanceProfile { get; private set; } = null!;

        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        [Output("metadataOptions")]
        public Output<Outputs.LaunchConfigurationMetadataOptions> MetadataOptions { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        [Output("placementTenancy")]
        public Output<string?> PlacementTenancy { get; private set; } = null!;

        [Output("rootBlockDevice")]
        public Output<Outputs.LaunchConfigurationRootBlockDevice> RootBlockDevice { get; private set; } = null!;

        [Output("securityGroups")]
        public Output<ImmutableArray<string>> SecurityGroups { get; private set; } = null!;

        [Output("spotPrice")]
        public Output<string?> SpotPrice { get; private set; } = null!;

        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;

        [Output("userDataBase64")]
        public Output<string?> UserDataBase64 { get; private set; } = null!;

        [Output("vpcClassicLinkId")]
        public Output<string?> VpcClassicLinkId { get; private set; } = null!;

        [Output("vpcClassicLinkSecurityGroups")]
        public Output<ImmutableArray<string>> VpcClassicLinkSecurityGroups { get; private set; } = null!;


        /// <summary>
        /// Create a LaunchConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LaunchConfiguration(string name, LaunchConfigurationArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/launchConfiguration:LaunchConfiguration", name, args ?? new LaunchConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LaunchConfiguration(string name, Input<string> id, LaunchConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/launchConfiguration:LaunchConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LaunchConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LaunchConfiguration Get(string name, Input<string> id, LaunchConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new LaunchConfiguration(name, id, state, options);
        }
    }

    public sealed class LaunchConfigurationArgs : global::Pulumi.ResourceArgs
    {
        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("ebsBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEbsBlockDeviceArgs>? _ebsBlockDevices;
        public InputList<Inputs.LaunchConfigurationEbsBlockDeviceArgs> EbsBlockDevices
        {
            get => _ebsBlockDevices ?? (_ebsBlockDevices = new InputList<Inputs.LaunchConfigurationEbsBlockDeviceArgs>());
            set => _ebsBlockDevices = value;
        }

        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        [Input("ephemeralBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceArgs>? _ephemeralBlockDevices;
        public InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceArgs> EphemeralBlockDevices
        {
            get => _ephemeralBlockDevices ?? (_ephemeralBlockDevices = new InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceArgs>());
            set => _ephemeralBlockDevices = value;
        }

        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("metadataOptions")]
        public Input<Inputs.LaunchConfigurationMetadataOptionsArgs>? MetadataOptions { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        [Input("rootBlockDevice")]
        public Input<Inputs.LaunchConfigurationRootBlockDeviceArgs>? RootBlockDevice { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("userDataBase64")]
        public Input<string>? UserDataBase64 { get; set; }

        [Input("vpcClassicLinkId")]
        public Input<string>? VpcClassicLinkId { get; set; }

        [Input("vpcClassicLinkSecurityGroups")]
        private InputList<string>? _vpcClassicLinkSecurityGroups;
        [Obsolete(@"With the retirement of EC2-Classic the vpc_classic_link_security_groups attribute has been deprecated and will be removed in a future version.")]
        public InputList<string> VpcClassicLinkSecurityGroups
        {
            get => _vpcClassicLinkSecurityGroups ?? (_vpcClassicLinkSecurityGroups = new InputList<string>());
            set => _vpcClassicLinkSecurityGroups = value;
        }

        public LaunchConfigurationArgs()
        {
        }
        public static new LaunchConfigurationArgs Empty => new LaunchConfigurationArgs();
    }

    public sealed class LaunchConfigurationState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("associatePublicIpAddress")]
        public Input<bool>? AssociatePublicIpAddress { get; set; }

        [Input("ebsBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEbsBlockDeviceGetArgs>? _ebsBlockDevices;
        public InputList<Inputs.LaunchConfigurationEbsBlockDeviceGetArgs> EbsBlockDevices
        {
            get => _ebsBlockDevices ?? (_ebsBlockDevices = new InputList<Inputs.LaunchConfigurationEbsBlockDeviceGetArgs>());
            set => _ebsBlockDevices = value;
        }

        [Input("ebsOptimized")]
        public Input<bool>? EbsOptimized { get; set; }

        [Input("enableMonitoring")]
        public Input<bool>? EnableMonitoring { get; set; }

        [Input("ephemeralBlockDevices")]
        private InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceGetArgs>? _ephemeralBlockDevices;
        public InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceGetArgs> EphemeralBlockDevices
        {
            get => _ephemeralBlockDevices ?? (_ephemeralBlockDevices = new InputList<Inputs.LaunchConfigurationEphemeralBlockDeviceGetArgs>());
            set => _ephemeralBlockDevices = value;
        }

        [Input("iamInstanceProfile")]
        public Input<string>? IamInstanceProfile { get; set; }

        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        [Input("metadataOptions")]
        public Input<Inputs.LaunchConfigurationMetadataOptionsGetArgs>? MetadataOptions { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("placementTenancy")]
        public Input<string>? PlacementTenancy { get; set; }

        [Input("rootBlockDevice")]
        public Input<Inputs.LaunchConfigurationRootBlockDeviceGetArgs>? RootBlockDevice { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        [Input("spotPrice")]
        public Input<string>? SpotPrice { get; set; }

        [Input("userData")]
        public Input<string>? UserData { get; set; }

        [Input("userDataBase64")]
        public Input<string>? UserDataBase64 { get; set; }

        [Input("vpcClassicLinkId")]
        public Input<string>? VpcClassicLinkId { get; set; }

        [Input("vpcClassicLinkSecurityGroups")]
        private InputList<string>? _vpcClassicLinkSecurityGroups;
        [Obsolete(@"With the retirement of EC2-Classic the vpc_classic_link_security_groups attribute has been deprecated and will be removed in a future version.")]
        public InputList<string> VpcClassicLinkSecurityGroups
        {
            get => _vpcClassicLinkSecurityGroups ?? (_vpcClassicLinkSecurityGroups = new InputList<string>());
            set => _vpcClassicLinkSecurityGroups = value;
        }

        public LaunchConfigurationState()
        {
        }
        public static new LaunchConfigurationState Empty => new LaunchConfigurationState();
    }
}
