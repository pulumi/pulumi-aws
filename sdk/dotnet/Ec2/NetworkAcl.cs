// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides an network ACL resource. You might set up network ACLs with rules similar
    /// to your security groups in order to add an additional layer of security to your VPC.
    /// 
    /// &gt; **NOTE on Network ACLs and Network ACL Rules:** This provider currently
    /// provides both a standalone Network ACL Rule resource and a Network ACL resource with rules
    /// defined in-line. At this time you cannot use a Network ACL with in-line rules
    /// in conjunction with any Network ACL Rule resources. Doing so will cause
    /// a conflict of rule settings and will overwrite rules.
    /// 
    /// &gt; **NOTE on Network ACLs and Network ACL Associations:** the provider provides both a standalone network ACL association
    /// resource and a network ACL resource with a `subnet_ids` attribute. Do not use the same subnet ID in both a network ACL
    /// resource and a network ACL association resource. Doing so will cause a conflict of associations and will overwrite the association.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Aws.Ec2.NetworkAcl("main", new()
    ///     {
    ///         VpcId = aws_vpc.Main.Id,
    ///         Egress = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.NetworkAclEgressArgs
    ///             {
    ///                 Protocol = "tcp",
    ///                 RuleNo = 200,
    ///                 Action = "allow",
    ///                 CidrBlock = "10.3.0.0/18",
    ///                 FromPort = 443,
    ///                 ToPort = 443,
    ///             },
    ///         },
    ///         Ingress = new[]
    ///         {
    ///             new Aws.Ec2.Inputs.NetworkAclIngressArgs
    ///             {
    ///                 Protocol = "tcp",
    ///                 RuleNo = 100,
    ///                 Action = "allow",
    ///                 CidrBlock = "10.3.0.0/18",
    ///                 FromPort = 80,
    ///                 ToPort = 80,
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "main" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Network ACLs can be imported using the `id`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:ec2/networkAcl:NetworkAcl main acl-7aaabd18
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/networkAcl:NetworkAcl")]
    public partial class NetworkAcl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the network ACL
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies an egress rule. Parameters defined below.
        /// </summary>
        [Output("egress")]
        public Output<ImmutableArray<Outputs.NetworkAclEgress>> Egress { get; private set; } = null!;

        /// <summary>
        /// Specifies an ingress rule. Parameters defined below.
        /// </summary>
        [Output("ingress")]
        public Output<ImmutableArray<Outputs.NetworkAclIngress>> Ingress { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS account that owns the network ACL.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// A list of Subnet IDs to apply the ACL to
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated VPC.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkAcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkAcl(string name, NetworkAclArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/networkAcl:NetworkAcl", name, args ?? new NetworkAclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkAcl(string name, Input<string> id, NetworkAclState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/networkAcl:NetworkAcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkAcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkAcl Get(string name, Input<string> id, NetworkAclState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkAcl(name, id, state, options);
        }
    }

    public sealed class NetworkAclArgs : global::Pulumi.ResourceArgs
    {
        [Input("egress")]
        private InputList<Inputs.NetworkAclEgressArgs>? _egress;

        /// <summary>
        /// Specifies an egress rule. Parameters defined below.
        /// </summary>
        public InputList<Inputs.NetworkAclEgressArgs> Egress
        {
            get => _egress ?? (_egress = new InputList<Inputs.NetworkAclEgressArgs>());
            set => _egress = value;
        }

        [Input("ingress")]
        private InputList<Inputs.NetworkAclIngressArgs>? _ingress;

        /// <summary>
        /// Specifies an ingress rule. Parameters defined below.
        /// </summary>
        public InputList<Inputs.NetworkAclIngressArgs> Ingress
        {
            get => _ingress ?? (_ingress = new InputList<Inputs.NetworkAclIngressArgs>());
            set => _ingress = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// A list of Subnet IDs to apply the ACL to
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The ID of the associated VPC.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public NetworkAclArgs()
        {
        }
        public static new NetworkAclArgs Empty => new NetworkAclArgs();
    }

    public sealed class NetworkAclState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the network ACL
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("egress")]
        private InputList<Inputs.NetworkAclEgressGetArgs>? _egress;

        /// <summary>
        /// Specifies an egress rule. Parameters defined below.
        /// </summary>
        public InputList<Inputs.NetworkAclEgressGetArgs> Egress
        {
            get => _egress ?? (_egress = new InputList<Inputs.NetworkAclEgressGetArgs>());
            set => _egress = value;
        }

        [Input("ingress")]
        private InputList<Inputs.NetworkAclIngressGetArgs>? _ingress;

        /// <summary>
        /// Specifies an ingress rule. Parameters defined below.
        /// </summary>
        public InputList<Inputs.NetworkAclIngressGetArgs> Ingress
        {
            get => _ingress ?? (_ingress = new InputList<Inputs.NetworkAclIngressGetArgs>());
            set => _ingress = value;
        }

        /// <summary>
        /// The ID of the AWS account that owns the network ACL.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// A list of Subnet IDs to apply the ACL to
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The ID of the associated VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public NetworkAclState()
        {
        }
        public static new NetworkAclState Empty => new NetworkAclState();
    }
}
