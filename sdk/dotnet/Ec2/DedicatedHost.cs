// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides an EC2 host resource. This allows hosts to be created, updated,
    /// and deleted.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Aws.Ec2.DedicatedHost("test", new Aws.Ec2.DedicatedHostArgs
    ///         {
    ///             AutoPlacement = "on",
    ///             AvailabilityZone = "us-west-1a",
    ///             HostRecovery = "on",
    ///             InstanceType = "c5.18xlarge",
    ///         });
    ///         var testData = test.Id.Apply(id =&gt; Aws.Ec2.GetDedicatedHost.InvokeAsync(new Aws.Ec2.GetDedicatedHostArgs
    ///         {
    ///             HostId = id,
    ///         }));
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// hosts can be imported using the `host_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:ec2/dedicatedHost:DedicatedHost host_id h-0385a99d0e4b20cbb
    /// ```
    /// </summary>
    public partial class DedicatedHost : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
        /// </summary>
        [Output("autoPlacement")]
        public Output<string> AutoPlacement { get; private set; } = null!;

        /// <summary>
        /// The AZ to start the host in.
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
        /// </summary>
        [Output("hostRecovery")]
        public Output<string> HostRecovery { get; private set; } = null!;

        /// <summary>
        /// Specifies the instance family for which to configure your Dedicated Host. Mutually exclusive with `instance_type`.
        /// </summary>
        [Output("instanceFamily")]
        public Output<string?> InstanceFamily { get; private set; } = null!;

        /// <summary>
        /// Specifies the instance type for which to configure your Dedicated Host. When you specify the instance type, that is the only instance type that you can launch onto that host. Mutually exclusive with `instance_family`.
        /// </summary>
        [Output("instanceType")]
        public Output<string?> InstanceType { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DedicatedHost resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DedicatedHost(string name, DedicatedHostArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/dedicatedHost:DedicatedHost", name, args ?? new DedicatedHostArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DedicatedHost(string name, Input<string> id, DedicatedHostState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/dedicatedHost:DedicatedHost", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DedicatedHost resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DedicatedHost Get(string name, Input<string> id, DedicatedHostState? state = null, CustomResourceOptions? options = null)
        {
            return new DedicatedHost(name, id, state, options);
        }
    }

    public sealed class DedicatedHostArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
        /// </summary>
        [Input("autoPlacement")]
        public Input<string>? AutoPlacement { get; set; }

        /// <summary>
        /// The AZ to start the host in.
        /// </summary>
        [Input("availabilityZone", required: true)]
        public Input<string> AvailabilityZone { get; set; } = null!;

        /// <summary>
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
        /// </summary>
        [Input("hostRecovery")]
        public Input<string>? HostRecovery { get; set; }

        /// <summary>
        /// Specifies the instance family for which to configure your Dedicated Host. Mutually exclusive with `instance_type`.
        /// </summary>
        [Input("instanceFamily")]
        public Input<string>? InstanceFamily { get; set; }

        /// <summary>
        /// Specifies the instance type for which to configure your Dedicated Host. When you specify the instance type, that is the only instance type that you can launch onto that host. Mutually exclusive with `instance_family`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DedicatedHostArgs()
        {
        }
    }

    public sealed class DedicatedHostState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
        /// </summary>
        [Input("autoPlacement")]
        public Input<string>? AutoPlacement { get; set; }

        /// <summary>
        /// The AZ to start the host in.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
        /// </summary>
        [Input("hostRecovery")]
        public Input<string>? HostRecovery { get; set; }

        /// <summary>
        /// Specifies the instance family for which to configure your Dedicated Host. Mutually exclusive with `instance_type`.
        /// </summary>
        [Input("instanceFamily")]
        public Input<string>? InstanceFamily { get; set; }

        /// <summary>
        /// Specifies the instance type for which to configure your Dedicated Host. When you specify the instance type, that is the only instance type that you can launch onto that host. Mutually exclusive with `instance_family`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DedicatedHostState()
        {
        }
    }
}
