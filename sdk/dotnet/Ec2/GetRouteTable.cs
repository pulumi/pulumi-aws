// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetRouteTable
    {
        /// <summary>
        /// `aws.ec2.RouteTable` provides details about a specific Route Table.
        /// 
        /// This resource can prove useful when a module accepts a Subnet id as
        /// an input variable and needs to, for example, add a route in
        /// the Route Table.
        /// 
        /// {{% examples %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRouteTableResult> InvokeAsync(GetRouteTableArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableResult>("aws:ec2/getRouteTable:getRouteTable", args ?? new GetRouteTableArgs(), options.WithVersion());
    }


    public sealed class GetRouteTableArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRouteTableFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetRouteTableFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTableFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The id of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
        /// </summary>
        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        /// <summary>
        /// The id of the specific Route Table to retrieve.
        /// </summary>
        [Input("routeTableId")]
        public string? RouteTableId { get; set; }

        /// <summary>
        /// The id of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A mapping of tags, each pair of which must exactly match
        /// a pair on the desired Route Table.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the VPC that the desired Route Table belongs to.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetRouteTableArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetRouteTableResult
    {
        public readonly ImmutableArray<Outputs.GetRouteTableAssociationResult> Associations;
        public readonly ImmutableArray<Outputs.GetRouteTableFilterResult> Filters;
        /// <summary>
        /// The Gateway ID. Only set when associated with an Internet Gateway or Virtual Private Gateway.
        /// </summary>
        public readonly string GatewayId;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the AWS account that owns the route table
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// The Route Table ID.
        /// </summary>
        public readonly string RouteTableId;
        public readonly ImmutableArray<Outputs.GetRouteTableRouteResult> Routes;
        /// <summary>
        /// The Subnet ID. Only set when associated with a Subnet.
        /// </summary>
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, object> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetRouteTableResult(
            ImmutableArray<Outputs.GetRouteTableAssociationResult> associations,

            ImmutableArray<Outputs.GetRouteTableFilterResult> filters,

            string gatewayId,

            string id,

            string ownerId,

            string routeTableId,

            ImmutableArray<Outputs.GetRouteTableRouteResult> routes,

            string subnetId,

            ImmutableDictionary<string, object> tags,

            string vpcId)
        {
            Associations = associations;
            Filters = filters;
            GatewayId = gatewayId;
            Id = id;
            OwnerId = ownerId;
            RouteTableId = routeTableId;
            Routes = routes;
            SubnetId = subnetId;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
