// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetRouteTable
    {
        /// <summary>
        /// `aws.ec2.RouteTable` provides details about a specific Route Table.
        /// 
        /// This resource can prove useful when a module accepts a Subnet ID as an input variable and needs to, for example, add a route in the Route Table.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a Route Table ID as a variable and use this data source to obtain the data necessary to create a route.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const subnetId = config.requireObject("subnetId");
        /// const selected = aws.ec2.getRouteTable({
        ///     subnetId: subnetId,
        /// });
        /// const route = new aws.ec2.Route("route", {
        ///     routeTableId: selected.then(selected =&gt; selected.id),
        ///     destinationCidrBlock: "10.0.1.0/22",
        ///     vpcPeeringConnectionId: "pcx-45ff3dc1",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// subnet_id = config.require_object("subnetId")
        /// selected = aws.ec2.get_route_table(subnet_id=subnet_id)
        /// route = aws.ec2.Route("route",
        ///     route_table_id=selected.id,
        ///     destination_cidr_block="10.0.1.0/22",
        ///     vpc_peering_connection_id="pcx-45ff3dc1")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///     var selected = Aws.Ec2.GetRouteTable.Invoke(new()
        ///     {
        ///         SubnetId = subnetId,
        ///     });
        /// 
        ///     var route = new Aws.Ec2.Route("route", new()
        ///     {
        ///         RouteTableId = selected.Apply(getRouteTableResult =&gt; getRouteTableResult.Id),
        ///         DestinationCidrBlock = "10.0.1.0/22",
        ///         VpcPeeringConnectionId = "pcx-45ff3dc1",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		subnetId := cfg.RequireObject("subnetId")
        /// 		selected, err := ec2.LookupRouteTable(ctx, &amp;ec2.LookupRouteTableArgs{
        /// 			SubnetId: pulumi.StringRef(subnetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewRoute(ctx, "route", &amp;ec2.RouteArgs{
        /// 			RouteTableId:           *pulumi.String(selected.Id),
        /// 			DestinationCidrBlock:   pulumi.String("10.0.1.0/22"),
        /// 			VpcPeeringConnectionId: pulumi.String("pcx-45ff3dc1"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetRouteTableArgs;
        /// import com.pulumi.aws.ec2.Route;
        /// import com.pulumi.aws.ec2.RouteArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var subnetId = config.get("subnetId");
        ///         final var selected = Ec2Functions.getRouteTable(GetRouteTableArgs.builder()
        ///             .subnetId(subnetId)
        ///             .build());
        /// 
        ///         var route = new Route("route", RouteArgs.builder()        
        ///             .routeTableId(selected.applyValue(getRouteTableResult -&gt; getRouteTableResult.id()))
        ///             .destinationCidrBlock("10.0.1.0/22")
        ///             .vpcPeeringConnectionId("pcx-45ff3dc1")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   subnetId:
        ///     type: dynamic
        /// resources:
        ///   route:
        ///     type: aws:ec2:Route
        ///     properties:
        ///       routeTableId: ${selected.id}
        ///       destinationCidrBlock: 10.0.1.0/22
        ///       vpcPeeringConnectionId: pcx-45ff3dc1
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getRouteTable
        ///       Arguments:
        ///         subnetId: ${subnetId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRouteTableResult> InvokeAsync(GetRouteTableArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableResult>("aws:ec2/getRouteTable:getRouteTable", args ?? new GetRouteTableArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ec2.RouteTable` provides details about a specific Route Table.
        /// 
        /// This resource can prove useful when a module accepts a Subnet ID as an input variable and needs to, for example, add a route in the Route Table.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a Route Table ID as a variable and use this data source to obtain the data necessary to create a route.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const subnetId = config.requireObject("subnetId");
        /// const selected = aws.ec2.getRouteTable({
        ///     subnetId: subnetId,
        /// });
        /// const route = new aws.ec2.Route("route", {
        ///     routeTableId: selected.then(selected =&gt; selected.id),
        ///     destinationCidrBlock: "10.0.1.0/22",
        ///     vpcPeeringConnectionId: "pcx-45ff3dc1",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// subnet_id = config.require_object("subnetId")
        /// selected = aws.ec2.get_route_table(subnet_id=subnet_id)
        /// route = aws.ec2.Route("route",
        ///     route_table_id=selected.id,
        ///     destination_cidr_block="10.0.1.0/22",
        ///     vpc_peering_connection_id="pcx-45ff3dc1")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///     var selected = Aws.Ec2.GetRouteTable.Invoke(new()
        ///     {
        ///         SubnetId = subnetId,
        ///     });
        /// 
        ///     var route = new Aws.Ec2.Route("route", new()
        ///     {
        ///         RouteTableId = selected.Apply(getRouteTableResult =&gt; getRouteTableResult.Id),
        ///         DestinationCidrBlock = "10.0.1.0/22",
        ///         VpcPeeringConnectionId = "pcx-45ff3dc1",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		subnetId := cfg.RequireObject("subnetId")
        /// 		selected, err := ec2.LookupRouteTable(ctx, &amp;ec2.LookupRouteTableArgs{
        /// 			SubnetId: pulumi.StringRef(subnetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewRoute(ctx, "route", &amp;ec2.RouteArgs{
        /// 			RouteTableId:           *pulumi.String(selected.Id),
        /// 			DestinationCidrBlock:   pulumi.String("10.0.1.0/22"),
        /// 			VpcPeeringConnectionId: pulumi.String("pcx-45ff3dc1"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetRouteTableArgs;
        /// import com.pulumi.aws.ec2.Route;
        /// import com.pulumi.aws.ec2.RouteArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var subnetId = config.get("subnetId");
        ///         final var selected = Ec2Functions.getRouteTable(GetRouteTableArgs.builder()
        ///             .subnetId(subnetId)
        ///             .build());
        /// 
        ///         var route = new Route("route", RouteArgs.builder()        
        ///             .routeTableId(selected.applyValue(getRouteTableResult -&gt; getRouteTableResult.id()))
        ///             .destinationCidrBlock("10.0.1.0/22")
        ///             .vpcPeeringConnectionId("pcx-45ff3dc1")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   subnetId:
        ///     type: dynamic
        /// resources:
        ///   route:
        ///     type: aws:ec2:Route
        ///     properties:
        ///       routeTableId: ${selected.id}
        ///       destinationCidrBlock: 10.0.1.0/22
        ///       vpcPeeringConnectionId: pcx-45ff3dc1
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getRouteTable
        ///       Arguments:
        ///         subnetId: ${subnetId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRouteTableResult> Invoke(GetRouteTableInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableResult>("aws:ec2/getRouteTable:getRouteTable", args ?? new GetRouteTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteTableArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRouteTableFilterArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public List<Inputs.GetRouteTableFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTableFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
        /// </summary>
        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        /// <summary>
        /// ID of the specific Route Table to retrieve.
        /// </summary>
        [Input("routeTableId")]
        public string? RouteTableId { get; set; }

        /// <summary>
        /// ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired Route Table.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the desired Route Table belongs to.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetRouteTableArgs()
        {
        }
        public static new GetRouteTableArgs Empty => new GetRouteTableArgs();
    }

    public sealed class GetRouteTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRouteTableFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public InputList<Inputs.GetRouteTableFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteTableFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of an Internet Gateway or Virtual Private Gateway which is connected to the Route Table (not exported if not passed as a parameter).
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// ID of the specific Route Table to retrieve.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        /// <summary>
        /// ID of a Subnet which is connected to the Route Table (not exported if not passed as a parameter).
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired Route Table.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the desired Route Table belongs to.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetRouteTableInvokeArgs()
        {
        }
        public static new GetRouteTableInvokeArgs Empty => new GetRouteTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteTableResult
    {
        /// <summary>
        /// ARN of the route table.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// List of associations with attributes detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableAssociationResult> Associations;
        public readonly ImmutableArray<Outputs.GetRouteTableFilterResult> Filters;
        /// <summary>
        /// Gateway ID. Only set when associated with an Internet Gateway or Virtual Private Gateway.
        /// </summary>
        public readonly string GatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ID of the AWS account that owns the route table.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// Route Table ID.
        /// </summary>
        public readonly string RouteTableId;
        /// <summary>
        /// List of routes with attributes detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRouteTableRouteResult> Routes;
        /// <summary>
        /// Subnet ID. Only set when associated with a subnet.
        /// </summary>
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetRouteTableResult(
            string arn,

            ImmutableArray<Outputs.GetRouteTableAssociationResult> associations,

            ImmutableArray<Outputs.GetRouteTableFilterResult> filters,

            string gatewayId,

            string id,

            string ownerId,

            string routeTableId,

            ImmutableArray<Outputs.GetRouteTableRouteResult> routes,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Arn = arn;
            Associations = associations;
            Filters = filters;
            GatewayId = gatewayId;
            Id = id;
            OwnerId = ownerId;
            RouteTableId = routeTableId;
            Routes = routes;
            SubnetId = subnetId;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
