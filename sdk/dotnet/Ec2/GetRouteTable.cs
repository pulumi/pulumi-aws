// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetRouteTable
    {
        public static Task<GetRouteTableResult> InvokeAsync(GetRouteTableArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteTableResult>("aws:ec2/getRouteTable:getRouteTable", args ?? new GetRouteTableArgs(), options.WithDefaults());

        public static Output<GetRouteTableResult> Invoke(GetRouteTableInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteTableResult>("aws:ec2/getRouteTable:getRouteTable", args ?? new GetRouteTableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteTableArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetRouteTableFilterArgs>? _filters;
        public List<Inputs.GetRouteTableFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetRouteTableFilterArgs>());
            set => _filters = value;
        }

        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        [Input("routeTableId")]
        public string? RouteTableId { get; set; }

        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetRouteTableArgs()
        {
        }
        public static new GetRouteTableArgs Empty => new GetRouteTableArgs();
    }

    public sealed class GetRouteTableInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetRouteTableFilterInputArgs>? _filters;
        public InputList<Inputs.GetRouteTableFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetRouteTableFilterInputArgs>());
            set => _filters = value;
        }

        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetRouteTableInvokeArgs()
        {
        }
        public static new GetRouteTableInvokeArgs Empty => new GetRouteTableInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteTableResult
    {
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetRouteTableAssociationResult> Associations;
        public readonly ImmutableArray<Outputs.GetRouteTableFilterResult> Filters;
        public readonly string GatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string OwnerId;
        public readonly string RouteTableId;
        public readonly ImmutableArray<Outputs.GetRouteTableRouteResult> Routes;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetRouteTableResult(
            string arn,

            ImmutableArray<Outputs.GetRouteTableAssociationResult> associations,

            ImmutableArray<Outputs.GetRouteTableFilterResult> filters,

            string gatewayId,

            string id,

            string ownerId,

            string routeTableId,

            ImmutableArray<Outputs.GetRouteTableRouteResult> routes,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Arn = arn;
            Associations = associations;
            Filters = filters;
            GatewayId = gatewayId;
            Id = id;
            OwnerId = ownerId;
            RouteTableId = routeTableId;
            Routes = routes;
            SubnetId = subnetId;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
