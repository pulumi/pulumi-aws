// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetNetworkInsightsAnalysis
    {
        /// <summary>
        /// `aws.ec2.NetworkInsightsAnalysis` provides details about a specific Network Insights Analysis.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetNetworkInsightsAnalysis.Invoke(new()
        ///     {
        ///         NetworkInsightsAnalysisId = aws_ec2_network_insights_analysis.Example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkInsightsAnalysisResult> InvokeAsync(GetNetworkInsightsAnalysisArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNetworkInsightsAnalysisResult>("aws:ec2/getNetworkInsightsAnalysis:getNetworkInsightsAnalysis", args ?? new GetNetworkInsightsAnalysisArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ec2.NetworkInsightsAnalysis` provides details about a specific Network Insights Analysis.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Ec2.GetNetworkInsightsAnalysis.Invoke(new()
        ///     {
        ///         NetworkInsightsAnalysisId = aws_ec2_network_insights_analysis.Example.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNetworkInsightsAnalysisResult> Invoke(GetNetworkInsightsAnalysisInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNetworkInsightsAnalysisResult>("aws:ec2/getNetworkInsightsAnalysis:getNetworkInsightsAnalysis", args ?? new GetNetworkInsightsAnalysisInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNetworkInsightsAnalysisArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetNetworkInsightsAnalysisFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetNetworkInsightsAnalysisFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetNetworkInsightsAnalysisFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the Network Insights Analysis to select.
        /// </summary>
        [Input("networkInsightsAnalysisId")]
        public string? NetworkInsightsAnalysisId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetNetworkInsightsAnalysisArgs()
        {
        }
        public static new GetNetworkInsightsAnalysisArgs Empty => new GetNetworkInsightsAnalysisArgs();
    }

    public sealed class GetNetworkInsightsAnalysisInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetNetworkInsightsAnalysisFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public InputList<Inputs.GetNetworkInsightsAnalysisFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetNetworkInsightsAnalysisFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the Network Insights Analysis to select.
        /// </summary>
        [Input("networkInsightsAnalysisId")]
        public Input<string>? NetworkInsightsAnalysisId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetNetworkInsightsAnalysisInvokeArgs()
        {
        }
        public static new GetNetworkInsightsAnalysisInvokeArgs Empty => new GetNetworkInsightsAnalysisInvokeArgs();
    }


    [OutputType]
    public sealed class GetNetworkInsightsAnalysisResult
    {
        /// <summary>
        /// Potential intermediate components of a feasible path.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkInsightsAnalysisAlternatePathHintResult> AlternatePathHints;
        /// <summary>
        /// ARN of the selected Network Insights Analysis.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Explanation codes for an unreachable path.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkInsightsAnalysisExplanationResult> Explanations;
        /// <summary>
        /// ARNs of the AWS resources that the path must traverse.
        /// </summary>
        public readonly ImmutableArray<string> FilterInArns;
        public readonly ImmutableArray<Outputs.GetNetworkInsightsAnalysisFilterResult> Filters;
        /// <summary>
        /// The components in the path from source to destination.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkInsightsAnalysisForwardPathComponentResult> ForwardPathComponents;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string NetworkInsightsAnalysisId;
        /// <summary>
        /// The ID of the path.
        /// </summary>
        public readonly string NetworkInsightsPathId;
        /// <summary>
        /// Set to `true` if the destination was reachable.
        /// </summary>
        public readonly bool PathFound;
        /// <summary>
        /// The components in the path from destination to source.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkInsightsAnalysisReturnPathComponentResult> ReturnPathComponents;
        /// <summary>
        /// Date/time the analysis was started.
        /// </summary>
        public readonly string StartDate;
        /// <summary>
        /// Status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `path_found`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Message to provide more context when the `status` is `failed`.
        /// </summary>
        public readonly string StatusMessage;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Warning message.
        /// </summary>
        public readonly string WarningMessage;

        [OutputConstructor]
        private GetNetworkInsightsAnalysisResult(
            ImmutableArray<Outputs.GetNetworkInsightsAnalysisAlternatePathHintResult> alternatePathHints,

            string arn,

            ImmutableArray<Outputs.GetNetworkInsightsAnalysisExplanationResult> explanations,

            ImmutableArray<string> filterInArns,

            ImmutableArray<Outputs.GetNetworkInsightsAnalysisFilterResult> filters,

            ImmutableArray<Outputs.GetNetworkInsightsAnalysisForwardPathComponentResult> forwardPathComponents,

            string id,

            string networkInsightsAnalysisId,

            string networkInsightsPathId,

            bool pathFound,

            ImmutableArray<Outputs.GetNetworkInsightsAnalysisReturnPathComponentResult> returnPathComponents,

            string startDate,

            string status,

            string statusMessage,

            ImmutableDictionary<string, string> tags,

            string warningMessage)
        {
            AlternatePathHints = alternatePathHints;
            Arn = arn;
            Explanations = explanations;
            FilterInArns = filterInArns;
            Filters = filters;
            ForwardPathComponents = forwardPathComponents;
            Id = id;
            NetworkInsightsAnalysisId = networkInsightsAnalysisId;
            NetworkInsightsPathId = networkInsightsPathId;
            PathFound = pathFound;
            ReturnPathComponents = returnPathComponents;
            StartDate = startDate;
            Status = status;
            StatusMessage = statusMessage;
            Tags = tags;
            WarningMessage = warningMessage;
        }
    }
}
