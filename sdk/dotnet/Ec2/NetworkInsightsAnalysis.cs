// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides a Network Insights Analysis resource. Part of the "Reachability Analyzer" service in the AWS VPC console.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var path = new Aws.Ec2.NetworkInsightsPath("path", new()
    ///     {
    ///         Source = aws_network_interface.Source.Id,
    ///         Destination = aws_network_interface.Destination.Id,
    ///         Protocol = "tcp",
    ///     });
    /// 
    ///     var analysis = new Aws.Ec2.NetworkInsightsAnalysis("analysis", new()
    ///     {
    ///         NetworkInsightsPathId = path.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Network Insights Analyses using the `id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis test nia-0462085c957f11a55
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis")]
    public partial class NetworkInsightsAnalysis : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Potential intermediate components of a feasible path. Described below.
        /// </summary>
        [Output("alternatePathHints")]
        public Output<ImmutableArray<Outputs.NetworkInsightsAnalysisAlternatePathHint>> AlternatePathHints { get; private set; } = null!;

        /// <summary>
        /// ARN of the Network Insights Analysis.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
        /// </summary>
        [Output("explanations")]
        public Output<ImmutableArray<Outputs.NetworkInsightsAnalysisExplanation>> Explanations { get; private set; } = null!;

        /// <summary>
        /// A list of ARNs for resources the path must traverse.
        /// </summary>
        [Output("filterInArns")]
        public Output<ImmutableArray<string>> FilterInArns { get; private set; } = null!;

        /// <summary>
        /// The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
        /// </summary>
        [Output("forwardPathComponents")]
        public Output<ImmutableArray<Outputs.NetworkInsightsAnalysisForwardPathComponent>> ForwardPathComponents { get; private set; } = null!;

        /// <summary>
        /// ID of the Network Insights Path to run an analysis on.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("networkInsightsPathId")]
        public Output<string> NetworkInsightsPathId { get; private set; } = null!;

        /// <summary>
        /// Set to `true` if the destination was reachable.
        /// </summary>
        [Output("pathFound")]
        public Output<bool> PathFound { get; private set; } = null!;

        /// <summary>
        /// The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
        /// </summary>
        [Output("returnPathComponents")]
        public Output<ImmutableArray<Outputs.NetworkInsightsAnalysisReturnPathComponent>> ReturnPathComponents { get; private set; } = null!;

        /// <summary>
        /// The date/time the analysis was started.
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `path_found`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A message to provide more context when the `status` is `failed`.
        /// </summary>
        [Output("statusMessage")]
        public Output<string> StatusMessage { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [Output("waitForCompletion")]
        public Output<bool?> WaitForCompletion { get; private set; } = null!;

        /// <summary>
        /// The warning message.
        /// </summary>
        [Output("warningMessage")]
        public Output<string> WarningMessage { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkInsightsAnalysis resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkInsightsAnalysis(string name, NetworkInsightsAnalysisArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis", name, args ?? new NetworkInsightsAnalysisArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkInsightsAnalysis(string name, Input<string> id, NetworkInsightsAnalysisState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/networkInsightsAnalysis:NetworkInsightsAnalysis", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "tagsAll",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkInsightsAnalysis resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkInsightsAnalysis Get(string name, Input<string> id, NetworkInsightsAnalysisState? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkInsightsAnalysis(name, id, state, options);
        }
    }

    public sealed class NetworkInsightsAnalysisArgs : global::Pulumi.ResourceArgs
    {
        [Input("filterInArns")]
        private InputList<string>? _filterInArns;

        /// <summary>
        /// A list of ARNs for resources the path must traverse.
        /// </summary>
        public InputList<string> FilterInArns
        {
            get => _filterInArns ?? (_filterInArns = new InputList<string>());
            set => _filterInArns = value;
        }

        /// <summary>
        /// ID of the Network Insights Path to run an analysis on.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("networkInsightsPathId", required: true)]
        public Input<string> NetworkInsightsPathId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [Input("waitForCompletion")]
        public Input<bool>? WaitForCompletion { get; set; }

        public NetworkInsightsAnalysisArgs()
        {
        }
        public static new NetworkInsightsAnalysisArgs Empty => new NetworkInsightsAnalysisArgs();
    }

    public sealed class NetworkInsightsAnalysisState : global::Pulumi.ResourceArgs
    {
        [Input("alternatePathHints")]
        private InputList<Inputs.NetworkInsightsAnalysisAlternatePathHintGetArgs>? _alternatePathHints;

        /// <summary>
        /// Potential intermediate components of a feasible path. Described below.
        /// </summary>
        public InputList<Inputs.NetworkInsightsAnalysisAlternatePathHintGetArgs> AlternatePathHints
        {
            get => _alternatePathHints ?? (_alternatePathHints = new InputList<Inputs.NetworkInsightsAnalysisAlternatePathHintGetArgs>());
            set => _alternatePathHints = value;
        }

        /// <summary>
        /// ARN of the Network Insights Analysis.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("explanations")]
        private InputList<Inputs.NetworkInsightsAnalysisExplanationGetArgs>? _explanations;

        /// <summary>
        /// Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
        /// </summary>
        public InputList<Inputs.NetworkInsightsAnalysisExplanationGetArgs> Explanations
        {
            get => _explanations ?? (_explanations = new InputList<Inputs.NetworkInsightsAnalysisExplanationGetArgs>());
            set => _explanations = value;
        }

        [Input("filterInArns")]
        private InputList<string>? _filterInArns;

        /// <summary>
        /// A list of ARNs for resources the path must traverse.
        /// </summary>
        public InputList<string> FilterInArns
        {
            get => _filterInArns ?? (_filterInArns = new InputList<string>());
            set => _filterInArns = value;
        }

        [Input("forwardPathComponents")]
        private InputList<Inputs.NetworkInsightsAnalysisForwardPathComponentGetArgs>? _forwardPathComponents;

        /// <summary>
        /// The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
        /// </summary>
        public InputList<Inputs.NetworkInsightsAnalysisForwardPathComponentGetArgs> ForwardPathComponents
        {
            get => _forwardPathComponents ?? (_forwardPathComponents = new InputList<Inputs.NetworkInsightsAnalysisForwardPathComponentGetArgs>());
            set => _forwardPathComponents = value;
        }

        /// <summary>
        /// ID of the Network Insights Path to run an analysis on.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("networkInsightsPathId")]
        public Input<string>? NetworkInsightsPathId { get; set; }

        /// <summary>
        /// Set to `true` if the destination was reachable.
        /// </summary>
        [Input("pathFound")]
        public Input<bool>? PathFound { get; set; }

        [Input("returnPathComponents")]
        private InputList<Inputs.NetworkInsightsAnalysisReturnPathComponentGetArgs>? _returnPathComponents;

        /// <summary>
        /// The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
        /// </summary>
        public InputList<Inputs.NetworkInsightsAnalysisReturnPathComponentGetArgs> ReturnPathComponents
        {
            get => _returnPathComponents ?? (_returnPathComponents = new InputList<Inputs.NetworkInsightsAnalysisReturnPathComponentGetArgs>());
            set => _returnPathComponents = value;
        }

        /// <summary>
        /// The date/time the analysis was started.
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `path_found`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A message to provide more context when the `status` is `failed`.
        /// </summary>
        [Input("statusMessage")]
        public Input<string>? StatusMessage { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _tagsAll = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [Input("waitForCompletion")]
        public Input<bool>? WaitForCompletion { get; set; }

        /// <summary>
        /// The warning message.
        /// </summary>
        [Input("warningMessage")]
        public Input<string>? WarningMessage { get; set; }

        public NetworkInsightsAnalysisState()
        {
        }
        public static new NetworkInsightsAnalysisState Empty => new NetworkInsightsAnalysisState();
    }
}
