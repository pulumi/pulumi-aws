// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetInstance
    {
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("aws:ec2/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("aws:ec2/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetInstanceFilterArgs>? _filters;
        public List<Inputs.GetInstanceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetInstanceFilterArgs>());
            set => _filters = value;
        }

        [Input("getPasswordData")]
        public bool? GetPasswordData { get; set; }

        [Input("getUserData")]
        public bool? GetUserData { get; set; }

        [Input("instanceId")]
        public string? InstanceId { get; set; }

        [Input("instanceTags")]
        private Dictionary<string, string>? _instanceTags;
        public Dictionary<string, string> InstanceTags
        {
            get => _instanceTags ?? (_instanceTags = new Dictionary<string, string>());
            set => _instanceTags = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetInstanceFilterInputArgs>? _filters;
        public InputList<Inputs.GetInstanceFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetInstanceFilterInputArgs>());
            set => _filters = value;
        }

        [Input("getPasswordData")]
        public Input<bool>? GetPasswordData { get; set; }

        [Input("getUserData")]
        public Input<bool>? GetUserData { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("instanceTags")]
        private InputMap<string>? _instanceTags;
        public InputMap<string> InstanceTags
        {
            get => _instanceTags ?? (_instanceTags = new InputMap<string>());
            set => _instanceTags = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        public readonly string Ami;
        public readonly string Arn;
        public readonly bool AssociatePublicIpAddress;
        public readonly string AvailabilityZone;
        public readonly ImmutableArray<Outputs.GetInstanceCreditSpecificationResult> CreditSpecifications;
        public readonly bool DisableApiStop;
        public readonly bool DisableApiTermination;
        public readonly ImmutableArray<Outputs.GetInstanceEbsBlockDeviceResult> EbsBlockDevices;
        public readonly bool EbsOptimized;
        public readonly ImmutableArray<Outputs.GetInstanceEnclaveOptionResult> EnclaveOptions;
        public readonly ImmutableArray<Outputs.GetInstanceEphemeralBlockDeviceResult> EphemeralBlockDevices;
        public readonly ImmutableArray<Outputs.GetInstanceFilterResult> Filters;
        public readonly bool? GetPasswordData;
        public readonly bool? GetUserData;
        public readonly string HostId;
        public readonly string HostResourceGroupArn;
        public readonly string IamInstanceProfile;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? InstanceId;
        public readonly string InstanceState;
        public readonly ImmutableDictionary<string, string> InstanceTags;
        public readonly string InstanceType;
        public readonly ImmutableArray<string> Ipv6Addresses;
        public readonly string KeyName;
        public readonly ImmutableArray<Outputs.GetInstanceMaintenanceOptionResult> MaintenanceOptions;
        public readonly ImmutableArray<Outputs.GetInstanceMetadataOptionResult> MetadataOptions;
        public readonly bool Monitoring;
        public readonly string NetworkInterfaceId;
        public readonly string OutpostArn;
        public readonly string PasswordData;
        public readonly string PlacementGroup;
        public readonly int PlacementPartitionNumber;
        public readonly string PrivateDns;
        public readonly ImmutableArray<Outputs.GetInstancePrivateDnsNameOptionResult> PrivateDnsNameOptions;
        public readonly string PrivateIp;
        public readonly string PublicDns;
        public readonly string PublicIp;
        public readonly ImmutableArray<Outputs.GetInstanceRootBlockDeviceResult> RootBlockDevices;
        public readonly ImmutableArray<string> SecondaryPrivateIps;
        public readonly ImmutableArray<string> SecurityGroups;
        public readonly bool SourceDestCheck;
        public readonly string SubnetId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Tenancy;
        public readonly string UserData;
        public readonly string UserDataBase64;
        public readonly ImmutableArray<string> VpcSecurityGroupIds;

        [OutputConstructor]
        private GetInstanceResult(
            string ami,

            string arn,

            bool associatePublicIpAddress,

            string availabilityZone,

            ImmutableArray<Outputs.GetInstanceCreditSpecificationResult> creditSpecifications,

            bool disableApiStop,

            bool disableApiTermination,

            ImmutableArray<Outputs.GetInstanceEbsBlockDeviceResult> ebsBlockDevices,

            bool ebsOptimized,

            ImmutableArray<Outputs.GetInstanceEnclaveOptionResult> enclaveOptions,

            ImmutableArray<Outputs.GetInstanceEphemeralBlockDeviceResult> ephemeralBlockDevices,

            ImmutableArray<Outputs.GetInstanceFilterResult> filters,

            bool? getPasswordData,

            bool? getUserData,

            string hostId,

            string hostResourceGroupArn,

            string iamInstanceProfile,

            string id,

            string? instanceId,

            string instanceState,

            ImmutableDictionary<string, string> instanceTags,

            string instanceType,

            ImmutableArray<string> ipv6Addresses,

            string keyName,

            ImmutableArray<Outputs.GetInstanceMaintenanceOptionResult> maintenanceOptions,

            ImmutableArray<Outputs.GetInstanceMetadataOptionResult> metadataOptions,

            bool monitoring,

            string networkInterfaceId,

            string outpostArn,

            string passwordData,

            string placementGroup,

            int placementPartitionNumber,

            string privateDns,

            ImmutableArray<Outputs.GetInstancePrivateDnsNameOptionResult> privateDnsNameOptions,

            string privateIp,

            string publicDns,

            string publicIp,

            ImmutableArray<Outputs.GetInstanceRootBlockDeviceResult> rootBlockDevices,

            ImmutableArray<string> secondaryPrivateIps,

            ImmutableArray<string> securityGroups,

            bool sourceDestCheck,

            string subnetId,

            ImmutableDictionary<string, string> tags,

            string tenancy,

            string userData,

            string userDataBase64,

            ImmutableArray<string> vpcSecurityGroupIds)
        {
            Ami = ami;
            Arn = arn;
            AssociatePublicIpAddress = associatePublicIpAddress;
            AvailabilityZone = availabilityZone;
            CreditSpecifications = creditSpecifications;
            DisableApiStop = disableApiStop;
            DisableApiTermination = disableApiTermination;
            EbsBlockDevices = ebsBlockDevices;
            EbsOptimized = ebsOptimized;
            EnclaveOptions = enclaveOptions;
            EphemeralBlockDevices = ephemeralBlockDevices;
            Filters = filters;
            GetPasswordData = getPasswordData;
            GetUserData = getUserData;
            HostId = hostId;
            HostResourceGroupArn = hostResourceGroupArn;
            IamInstanceProfile = iamInstanceProfile;
            Id = id;
            InstanceId = instanceId;
            InstanceState = instanceState;
            InstanceTags = instanceTags;
            InstanceType = instanceType;
            Ipv6Addresses = ipv6Addresses;
            KeyName = keyName;
            MaintenanceOptions = maintenanceOptions;
            MetadataOptions = metadataOptions;
            Monitoring = monitoring;
            NetworkInterfaceId = networkInterfaceId;
            OutpostArn = outpostArn;
            PasswordData = passwordData;
            PlacementGroup = placementGroup;
            PlacementPartitionNumber = placementPartitionNumber;
            PrivateDns = privateDns;
            PrivateDnsNameOptions = privateDnsNameOptions;
            PrivateIp = privateIp;
            PublicDns = publicDns;
            PublicIp = publicIp;
            RootBlockDevices = rootBlockDevices;
            SecondaryPrivateIps = secondaryPrivateIps;
            SecurityGroups = securityGroups;
            SourceDestCheck = sourceDestCheck;
            SubnetId = subnetId;
            Tags = tags;
            Tenancy = tenancy;
            UserData = userData;
            UserDataBase64 = userDataBase64;
            VpcSecurityGroupIds = vpcSecurityGroupIds;
        }
    }
}
