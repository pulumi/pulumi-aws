// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetIpamPreviewNextCidr
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testIpamPreviewNextCidr = Output.Create(Aws.Ec2.GetIpamPreviewNextCidr.InvokeAsync(new Aws.Ec2.GetIpamPreviewNextCidrArgs
        ///         {
        ///             IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///             NetmaskLength = 28,
        ///         }));
        ///         var testVpcIpamPoolCidrAllocation = new Aws.Ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", new Aws.Ec2.VpcIpamPoolCidrAllocationArgs
        ///         {
        ///             IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///             Cidr = testIpamPreviewNextCidr.Apply(testIpamPreviewNextCidr =&gt; testIpamPreviewNextCidr.Cidr),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpamPreviewNextCidrResult> InvokeAsync(GetIpamPreviewNextCidrArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIpamPreviewNextCidrResult>("aws:ec2/getIpamPreviewNextCidr:getIpamPreviewNextCidr", args ?? new GetIpamPreviewNextCidrArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testIpamPreviewNextCidr = Output.Create(Aws.Ec2.GetIpamPreviewNextCidr.InvokeAsync(new Aws.Ec2.GetIpamPreviewNextCidrArgs
        ///         {
        ///             IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///             NetmaskLength = 28,
        ///         }));
        ///         var testVpcIpamPoolCidrAllocation = new Aws.Ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", new Aws.Ec2.VpcIpamPoolCidrAllocationArgs
        ///         {
        ///             IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///             Cidr = testIpamPreviewNextCidr.Apply(testIpamPreviewNextCidr =&gt; testIpamPreviewNextCidr.Cidr),
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpamPreviewNextCidrResult> Invoke(GetIpamPreviewNextCidrInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetIpamPreviewNextCidrResult>("aws:ec2/getIpamPreviewNextCidr:getIpamPreviewNextCidr", args ?? new GetIpamPreviewNextCidrInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpamPreviewNextCidrArgs : Pulumi.InvokeArgs
    {
        [Input("disallowedCidrs")]
        private List<string>? _disallowedCidrs;

        /// <summary>
        /// Exclude a particular CIDR range from being returned by the pool.
        /// </summary>
        public List<string> DisallowedCidrs
        {
            get => _disallowedCidrs ?? (_disallowedCidrs = new List<string>());
            set => _disallowedCidrs = value;
        }

        /// <summary>
        /// The ID of the pool to which you want to assign a CIDR.
        /// </summary>
        [Input("ipamPoolId", required: true)]
        public string IpamPoolId { get; set; } = null!;

        /// <summary>
        /// The netmask length of the CIDR you would like to preview from the IPAM pool.
        /// </summary>
        [Input("netmaskLength")]
        public int? NetmaskLength { get; set; }

        public GetIpamPreviewNextCidrArgs()
        {
        }
    }

    public sealed class GetIpamPreviewNextCidrInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("disallowedCidrs")]
        private InputList<string>? _disallowedCidrs;

        /// <summary>
        /// Exclude a particular CIDR range from being returned by the pool.
        /// </summary>
        public InputList<string> DisallowedCidrs
        {
            get => _disallowedCidrs ?? (_disallowedCidrs = new InputList<string>());
            set => _disallowedCidrs = value;
        }

        /// <summary>
        /// The ID of the pool to which you want to assign a CIDR.
        /// </summary>
        [Input("ipamPoolId", required: true)]
        public Input<string> IpamPoolId { get; set; } = null!;

        /// <summary>
        /// The netmask length of the CIDR you would like to preview from the IPAM pool.
        /// </summary>
        [Input("netmaskLength")]
        public Input<int>? NetmaskLength { get; set; }

        public GetIpamPreviewNextCidrInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIpamPreviewNextCidrResult
    {
        /// <summary>
        /// The previewed CIDR from the pool.
        /// </summary>
        public readonly string Cidr;
        public readonly ImmutableArray<string> DisallowedCidrs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpamPoolId;
        public readonly int? NetmaskLength;

        [OutputConstructor]
        private GetIpamPreviewNextCidrResult(
            string cidr,

            ImmutableArray<string> disallowedCidrs,

            string id,

            string ipamPoolId,

            int? netmaskLength)
        {
            Cidr = cidr;
            DisallowedCidrs = disallowedCidrs;
            Id = id;
            IpamPoolId = ipamPoolId;
            NetmaskLength = netmaskLength;
        }
    }
}
