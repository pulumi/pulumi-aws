// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetIpamPreviewNextCidr
    {
        /// <summary>
        /// Previews a CIDR from an IPAM address pool. Only works for private IPv4.
        /// 
        /// &gt; **NOTE:** This functionality is also encapsulated in a resource sharing the same name. The data source can be used when you need to use the cidr in a calculation of the same Root module, `count` for example. However, once a cidr range has been allocated that was previewed, the next refresh will find a **new** cidr and may force new resources downstream. Make sure to use `ignore_changes` if this is undesirable.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const testIpamPreviewNextCidr = aws.ec2.getIpamPreviewNextCidr({
        ///     ipamPoolId: aws_vpc_ipam_pool.test.id,
        ///     netmaskLength: 28,
        /// });
        /// const testVpcIpamPoolCidrAllocation = new aws.ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", {
        ///     ipamPoolId: aws_vpc_ipam_pool.test.id,
        ///     cidr: testIpamPreviewNextCidr.then(testIpamPreviewNextCidr =&gt; testIpamPreviewNextCidr.cidr),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test_ipam_preview_next_cidr = aws.ec2.get_ipam_preview_next_cidr(ipam_pool_id=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///     netmask_length=28)
        /// test_vpc_ipam_pool_cidr_allocation = aws.ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation",
        ///     ipam_pool_id=aws_vpc_ipam_pool["test"]["id"],
        ///     cidr=test_ipam_preview_next_cidr.cidr)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIpamPreviewNextCidr = Aws.Ec2.GetIpamPreviewNextCidr.Invoke(new()
        ///     {
        ///         IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///         NetmaskLength = 28,
        ///     });
        /// 
        ///     var testVpcIpamPoolCidrAllocation = new Aws.Ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", new()
        ///     {
        ///         IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///         Cidr = testIpamPreviewNextCidr.Apply(getIpamPreviewNextCidrResult =&gt; getIpamPreviewNextCidrResult.Cidr),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		testIpamPreviewNextCidr, err := ec2.GetIpamPreviewNextCidr(ctx, &amp;ec2.GetIpamPreviewNextCidrArgs{
        /// 			IpamPoolId:    aws_vpc_ipam_pool.Test.Id,
        /// 			NetmaskLength: pulumi.IntRef(28),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewVpcIpamPoolCidrAllocation(ctx, "testVpcIpamPoolCidrAllocation", &amp;ec2.VpcIpamPoolCidrAllocationArgs{
        /// 			IpamPoolId: pulumi.Any(aws_vpc_ipam_pool.Test.Id),
        /// 			Cidr:       *pulumi.String(testIpamPreviewNextCidr.Cidr),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetIpamPreviewNextCidrArgs;
        /// import com.pulumi.aws.ec2.VpcIpamPoolCidrAllocation;
        /// import com.pulumi.aws.ec2.VpcIpamPoolCidrAllocationArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var testIpamPreviewNextCidr = Ec2Functions.getIpamPreviewNextCidr(GetIpamPreviewNextCidrArgs.builder()
        ///             .ipamPoolId(aws_vpc_ipam_pool.test().id())
        ///             .netmaskLength(28)
        ///             .build());
        /// 
        ///         var testVpcIpamPoolCidrAllocation = new VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", VpcIpamPoolCidrAllocationArgs.builder()        
        ///             .ipamPoolId(aws_vpc_ipam_pool.test().id())
        ///             .cidr(testIpamPreviewNextCidr.applyValue(getIpamPreviewNextCidrResult -&gt; getIpamPreviewNextCidrResult.cidr()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   testVpcIpamPoolCidrAllocation:
        ///     type: aws:ec2:VpcIpamPoolCidrAllocation
        ///     properties:
        ///       ipamPoolId: ${aws_vpc_ipam_pool.test.id}
        ///       cidr: ${testIpamPreviewNextCidr.cidr}
        /// variables:
        ///   testIpamPreviewNextCidr:
        ///     fn::invoke:
        ///       Function: aws:ec2:getIpamPreviewNextCidr
        ///       Arguments:
        ///         ipamPoolId: ${aws_vpc_ipam_pool.test.id}
        ///         netmaskLength: 28
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIpamPreviewNextCidrResult> InvokeAsync(GetIpamPreviewNextCidrArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIpamPreviewNextCidrResult>("aws:ec2/getIpamPreviewNextCidr:getIpamPreviewNextCidr", args ?? new GetIpamPreviewNextCidrArgs(), options.WithDefaults());

        /// <summary>
        /// Previews a CIDR from an IPAM address pool. Only works for private IPv4.
        /// 
        /// &gt; **NOTE:** This functionality is also encapsulated in a resource sharing the same name. The data source can be used when you need to use the cidr in a calculation of the same Root module, `count` for example. However, once a cidr range has been allocated that was previewed, the next refresh will find a **new** cidr and may force new resources downstream. Make sure to use `ignore_changes` if this is undesirable.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// Basic usage:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const testIpamPreviewNextCidr = aws.ec2.getIpamPreviewNextCidr({
        ///     ipamPoolId: aws_vpc_ipam_pool.test.id,
        ///     netmaskLength: 28,
        /// });
        /// const testVpcIpamPoolCidrAllocation = new aws.ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", {
        ///     ipamPoolId: aws_vpc_ipam_pool.test.id,
        ///     cidr: testIpamPreviewNextCidr.then(testIpamPreviewNextCidr =&gt; testIpamPreviewNextCidr.cidr),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test_ipam_preview_next_cidr = aws.ec2.get_ipam_preview_next_cidr(ipam_pool_id=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///     netmask_length=28)
        /// test_vpc_ipam_pool_cidr_allocation = aws.ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation",
        ///     ipam_pool_id=aws_vpc_ipam_pool["test"]["id"],
        ///     cidr=test_ipam_preview_next_cidr.cidr)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testIpamPreviewNextCidr = Aws.Ec2.GetIpamPreviewNextCidr.Invoke(new()
        ///     {
        ///         IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///         NetmaskLength = 28,
        ///     });
        /// 
        ///     var testVpcIpamPoolCidrAllocation = new Aws.Ec2.VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", new()
        ///     {
        ///         IpamPoolId = aws_vpc_ipam_pool.Test.Id,
        ///         Cidr = testIpamPreviewNextCidr.Apply(getIpamPreviewNextCidrResult =&gt; getIpamPreviewNextCidrResult.Cidr),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		testIpamPreviewNextCidr, err := ec2.GetIpamPreviewNextCidr(ctx, &amp;ec2.GetIpamPreviewNextCidrArgs{
        /// 			IpamPoolId:    aws_vpc_ipam_pool.Test.Id,
        /// 			NetmaskLength: pulumi.IntRef(28),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewVpcIpamPoolCidrAllocation(ctx, "testVpcIpamPoolCidrAllocation", &amp;ec2.VpcIpamPoolCidrAllocationArgs{
        /// 			IpamPoolId: pulumi.Any(aws_vpc_ipam_pool.Test.Id),
        /// 			Cidr:       *pulumi.String(testIpamPreviewNextCidr.Cidr),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetIpamPreviewNextCidrArgs;
        /// import com.pulumi.aws.ec2.VpcIpamPoolCidrAllocation;
        /// import com.pulumi.aws.ec2.VpcIpamPoolCidrAllocationArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var testIpamPreviewNextCidr = Ec2Functions.getIpamPreviewNextCidr(GetIpamPreviewNextCidrArgs.builder()
        ///             .ipamPoolId(aws_vpc_ipam_pool.test().id())
        ///             .netmaskLength(28)
        ///             .build());
        /// 
        ///         var testVpcIpamPoolCidrAllocation = new VpcIpamPoolCidrAllocation("testVpcIpamPoolCidrAllocation", VpcIpamPoolCidrAllocationArgs.builder()        
        ///             .ipamPoolId(aws_vpc_ipam_pool.test().id())
        ///             .cidr(testIpamPreviewNextCidr.applyValue(getIpamPreviewNextCidrResult -&gt; getIpamPreviewNextCidrResult.cidr()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   testVpcIpamPoolCidrAllocation:
        ///     type: aws:ec2:VpcIpamPoolCidrAllocation
        ///     properties:
        ///       ipamPoolId: ${aws_vpc_ipam_pool.test.id}
        ///       cidr: ${testIpamPreviewNextCidr.cidr}
        /// variables:
        ///   testIpamPreviewNextCidr:
        ///     fn::invoke:
        ///       Function: aws:ec2:getIpamPreviewNextCidr
        ///       Arguments:
        ///         ipamPoolId: ${aws_vpc_ipam_pool.test.id}
        ///         netmaskLength: 28
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetIpamPreviewNextCidrResult> Invoke(GetIpamPreviewNextCidrInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIpamPreviewNextCidrResult>("aws:ec2/getIpamPreviewNextCidr:getIpamPreviewNextCidr", args ?? new GetIpamPreviewNextCidrInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIpamPreviewNextCidrArgs : global::Pulumi.InvokeArgs
    {
        [Input("disallowedCidrs")]
        private List<string>? _disallowedCidrs;

        /// <summary>
        /// Exclude a particular CIDR range from being returned by the pool.
        /// </summary>
        public List<string> DisallowedCidrs
        {
            get => _disallowedCidrs ?? (_disallowedCidrs = new List<string>());
            set => _disallowedCidrs = value;
        }

        /// <summary>
        /// ID of the pool to which you want to assign a CIDR.
        /// </summary>
        [Input("ipamPoolId", required: true)]
        public string IpamPoolId { get; set; } = null!;

        /// <summary>
        /// Netmask length of the CIDR you would like to preview from the IPAM pool.
        /// </summary>
        [Input("netmaskLength")]
        public int? NetmaskLength { get; set; }

        public GetIpamPreviewNextCidrArgs()
        {
        }
        public static new GetIpamPreviewNextCidrArgs Empty => new GetIpamPreviewNextCidrArgs();
    }

    public sealed class GetIpamPreviewNextCidrInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("disallowedCidrs")]
        private InputList<string>? _disallowedCidrs;

        /// <summary>
        /// Exclude a particular CIDR range from being returned by the pool.
        /// </summary>
        public InputList<string> DisallowedCidrs
        {
            get => _disallowedCidrs ?? (_disallowedCidrs = new InputList<string>());
            set => _disallowedCidrs = value;
        }

        /// <summary>
        /// ID of the pool to which you want to assign a CIDR.
        /// </summary>
        [Input("ipamPoolId", required: true)]
        public Input<string> IpamPoolId { get; set; } = null!;

        /// <summary>
        /// Netmask length of the CIDR you would like to preview from the IPAM pool.
        /// </summary>
        [Input("netmaskLength")]
        public Input<int>? NetmaskLength { get; set; }

        public GetIpamPreviewNextCidrInvokeArgs()
        {
        }
        public static new GetIpamPreviewNextCidrInvokeArgs Empty => new GetIpamPreviewNextCidrInvokeArgs();
    }


    [OutputType]
    public sealed class GetIpamPreviewNextCidrResult
    {
        /// <summary>
        /// Previewed CIDR from the pool.
        /// </summary>
        public readonly string Cidr;
        public readonly ImmutableArray<string> DisallowedCidrs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IpamPoolId;
        public readonly int? NetmaskLength;

        [OutputConstructor]
        private GetIpamPreviewNextCidrResult(
            string cidr,

            ImmutableArray<string> disallowedCidrs,

            string id,

            string ipamPoolId,

            int? netmaskLength)
        {
            Cidr = cidr;
            DisallowedCidrs = disallowedCidrs;
            Id = id;
            IpamPoolId = ipamPoolId;
            NetmaskLength = netmaskLength;
        }
    }
}
