// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Adds a launch permission to an Amazon Machine Image (AMI).
    /// 
    /// ## Example Usage
    /// ### AWS Account ID
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Ec2.AmiLaunchPermission("example", new Aws.Ec2.AmiLaunchPermissionArgs
    ///         {
    ///             AccountId = "123456789012",
    ///             ImageId = "ami-12345678",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Public Access
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Ec2.AmiLaunchPermission("example", new Aws.Ec2.AmiLaunchPermissionArgs
    ///         {
    ///             Group = "all",
    ///             ImageId = "ami-12345678",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Organization Access
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var current = Output.Create(Aws.Organizations.GetOrganization.InvokeAsync());
    ///         var example = new Aws.Ec2.AmiLaunchPermission("example", new Aws.Ec2.AmiLaunchPermissionArgs
    ///         {
    ///             ImageId = "ami-12345678",
    ///             OrganizationArn = current.Apply(current =&gt; current.Arn),
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// AMI Launch Permissions can be imported using `[ACCOUNT-ID|GROUP-NAME|ORGANIZATION-ARN|ORGANIZATIONAL-UNIT-ARN]/IMAGE-ID`, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:ec2/amiLaunchPermission:AmiLaunchPermission example 123456789012/ami-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/amiLaunchPermission:AmiLaunchPermission")]
    public partial class AmiLaunchPermission : Pulumi.CustomResource
    {
        /// <summary>
        /// The AWS account ID for the launch permission.
        /// </summary>
        [Output("accountId")]
        public Output<string?> AccountId { get; private set; } = null!;

        /// <summary>
        /// The name of the group for the launch permission. Valid values: `"all"`.
        /// </summary>
        [Output("group")]
        public Output<string?> Group { get; private set; } = null!;

        /// <summary>
        /// The ID of the AMI.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The ARN of an organization for the launch permission.
        /// </summary>
        [Output("organizationArn")]
        public Output<string?> OrganizationArn { get; private set; } = null!;

        /// <summary>
        /// The ARN of an organizational unit for the launch permission.
        /// </summary>
        [Output("organizationalUnitArn")]
        public Output<string?> OrganizationalUnitArn { get; private set; } = null!;


        /// <summary>
        /// Create a AmiLaunchPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AmiLaunchPermission(string name, AmiLaunchPermissionArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/amiLaunchPermission:AmiLaunchPermission", name, args ?? new AmiLaunchPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AmiLaunchPermission(string name, Input<string> id, AmiLaunchPermissionState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/amiLaunchPermission:AmiLaunchPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AmiLaunchPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AmiLaunchPermission Get(string name, Input<string> id, AmiLaunchPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new AmiLaunchPermission(name, id, state, options);
        }
    }

    public sealed class AmiLaunchPermissionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS account ID for the launch permission.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The name of the group for the launch permission. Valid values: `"all"`.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The ID of the AMI.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The ARN of an organization for the launch permission.
        /// </summary>
        [Input("organizationArn")]
        public Input<string>? OrganizationArn { get; set; }

        /// <summary>
        /// The ARN of an organizational unit for the launch permission.
        /// </summary>
        [Input("organizationalUnitArn")]
        public Input<string>? OrganizationalUnitArn { get; set; }

        public AmiLaunchPermissionArgs()
        {
        }
    }

    public sealed class AmiLaunchPermissionState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The AWS account ID for the launch permission.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The name of the group for the launch permission. Valid values: `"all"`.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// The ID of the AMI.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The ARN of an organization for the launch permission.
        /// </summary>
        [Input("organizationArn")]
        public Input<string>? OrganizationArn { get; set; }

        /// <summary>
        /// The ARN of an organizational unit for the launch permission.
        /// </summary>
        [Input("organizationalUnitArn")]
        public Input<string>? OrganizationalUnitArn { get; set; }

        public AmiLaunchPermissionState()
        {
        }
    }
}
