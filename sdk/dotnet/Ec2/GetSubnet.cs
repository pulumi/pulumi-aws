// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static partial class Invokes
    {
        /// <summary>
        /// `aws.ec2.Subnet` provides details about a specific VPC subnet.
        /// 
        /// This resource can prove useful when a module accepts a subnet id as
        /// an input variable and needs to, for example, determine the id of the
        /// VPC that the subnet belongs to.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/subnet.html.markdown.
        /// </summary>
        public static Task<GetSubnetResult> GetSubnet(GetSubnetArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("aws:ec2/getSubnet:getSubnet", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetSubnetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The availability zone where the
        /// subnet must reside.
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        /// <summary>
        /// The ID of the Availability Zone for the subnet.
        /// </summary>
        [Input("availabilityZoneId")]
        public string? AvailabilityZoneId { get; set; }

        /// <summary>
        /// The cidr block of the desired subnet.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        /// <summary>
        /// Boolean constraint for whether the desired
        /// subnet must be the default subnet for its associated availability zone.
        /// </summary>
        [Input("defaultForAz")]
        public bool? DefaultForAz { get; set; }

        [Input("filters")]
        private List<Inputs.GetSubnetFiltersArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetSubnetFiltersArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubnetFiltersArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The id of the specific subnet to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The Ipv6 cidr block of the desired subnet
        /// </summary>
        [Input("ipv6CidrBlock")]
        public string? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// The state that the desired subnet must have.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("tags")]
        private Dictionary<string, object>? _tags;

        /// <summary>
        /// A mapping of tags, each pair of which must exactly match
        /// a pair on the desired subnet.
        /// </summary>
        public Dictionary<string, object> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, object>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the VPC that the desired subnet belongs to.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetSubnetArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// The ARN of the subnet.
        /// </summary>
        public readonly string Arn;
        public readonly bool AssignIpv6AddressOnCreation;
        public readonly string AvailabilityZone;
        public readonly string AvailabilityZoneId;
        public readonly string CidrBlock;
        public readonly bool DefaultForAz;
        public readonly ImmutableArray<Outputs.GetSubnetFiltersResult> Filters;
        public readonly string Id;
        public readonly string Ipv6CidrBlock;
        public readonly string Ipv6CidrBlockAssociationId;
        public readonly bool MapPublicIpOnLaunch;
        /// <summary>
        /// The ID of the AWS account that owns the subnet.
        /// </summary>
        public readonly string OwnerId;
        public readonly string State;
        public readonly ImmutableDictionary<string, object> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetSubnetResult(
            string arn,
            bool assignIpv6AddressOnCreation,
            string availabilityZone,
            string availabilityZoneId,
            string cidrBlock,
            bool defaultForAz,
            ImmutableArray<Outputs.GetSubnetFiltersResult> filters,
            string id,
            string ipv6CidrBlock,
            string ipv6CidrBlockAssociationId,
            bool mapPublicIpOnLaunch,
            string ownerId,
            string state,
            ImmutableDictionary<string, object> tags,
            string vpcId)
        {
            Arn = arn;
            AssignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            AvailabilityZone = availabilityZone;
            AvailabilityZoneId = availabilityZoneId;
            CidrBlock = cidrBlock;
            DefaultForAz = defaultForAz;
            Filters = filters;
            Id = id;
            Ipv6CidrBlock = ipv6CidrBlock;
            Ipv6CidrBlockAssociationId = ipv6CidrBlockAssociationId;
            MapPublicIpOnLaunch = mapPublicIpOnLaunch;
            OwnerId = ownerId;
            State = state;
            Tags = tags;
            VpcId = vpcId;
        }
    }

    namespace Inputs
    {

    public sealed class GetSubnetFiltersArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the field to filter by, as defined by
        /// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
        /// For example, if matching against tag `Name`, use:
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("values", required: true)]
        private List<string>? _values;

        /// <summary>
        /// Set of values that are accepted for the given field.
        /// A subnet will be selected if any one of the given values matches.
        /// </summary>
        public List<string> Values
        {
            get => _values ?? (_values = new List<string>());
            set => _values = value;
        }

        public GetSubnetFiltersArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetSubnetFiltersResult
    {
        /// <summary>
        /// The name of the field to filter by, as defined by
        /// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
        /// For example, if matching against tag `Name`, use:
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set of values that are accepted for the given field.
        /// A subnet will be selected if any one of the given values matches.
        /// </summary>
        public readonly ImmutableArray<string> Values;

        [OutputConstructor]
        private GetSubnetFiltersResult(
            string name,
            ImmutableArray<string> values)
        {
            Name = name;
            Values = values;
        }
    }
    }
}
