// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSubnet
    {
        /// <summary>
        /// `aws.ec2.Subnet` provides details about a specific VPC subnet.
        /// 
        /// This resource can prove useful when a module accepts a subnet ID as an input variable and needs to, for example, determine the ID of the VPC that the subnet belongs to.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a subnet ID as a variable and use this data source to obtain the data necessary to create a security group that allows connections from hosts in that subnet.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var config = new Config();
        ///         var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///         var selected = Output.Create(Aws.Ec2.GetSubnet.InvokeAsync(new Aws.Ec2.GetSubnetArgs
        ///         {
        ///             Id = subnetId,
        ///         }));
        ///         var subnet = new Aws.Ec2.SecurityGroup("subnet", new Aws.Ec2.SecurityGroupArgs
        ///         {
        ///             VpcId = selected.Apply(selected =&gt; selected.VpcId),
        ///             Ingress = 
        ///             {
        ///                 new Aws.Ec2.Inputs.SecurityGroupIngressArgs
        ///                 {
        ///                     CidrBlocks = 
        ///                     {
        ///                         selected.Apply(selected =&gt; selected.CidrBlock),
        ///                     },
        ///                     FromPort = 80,
        ///                     ToPort = 80,
        ///                     Protocol = "tcp",
        ///                 },
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter Example
        /// 
        /// If you want to match against tag `Name`, use:
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var selected = Output.Create(Aws.Ec2.GetSubnet.InvokeAsync(new Aws.Ec2.GetSubnetArgs
        ///         {
        ///             Filters = 
        ///             {
        ///                 new Aws.Ec2.Inputs.GetSubnetFilterArgs
        ///                 {
        ///                     Name = "tag:Name",
        ///                     Values = 
        ///                     {
        ///                         "yakdriver",
        ///                     },
        ///                 },
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("aws:ec2/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithVersion());
    }


    public sealed class GetSubnetArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where the subnet must reside.
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        /// <summary>
        /// ID of the Availability Zone for the subnet.
        /// </summary>
        [Input("availabilityZoneId")]
        public string? AvailabilityZoneId { get; set; }

        /// <summary>
        /// CIDR block of the desired subnet.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        /// <summary>
        /// Whether the desired subnet must be the default subnet for its associated availability zone.
        /// </summary>
        [Input("defaultForAz")]
        public bool? DefaultForAz { get; set; }

        [Input("filters")]
        private List<Inputs.GetSubnetFilterArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public List<Inputs.GetSubnetFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubnetFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific subnet to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// IPv6 CIDR block of the desired subnet.
        /// </summary>
        [Input("ipv6CidrBlock")]
        public string? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// State that the desired subnet must have.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired subnet.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the desired subnet belongs to.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetSubnetArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// ARN of the subnet.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Whether an IPv6 address is assigned on creation.
        /// </summary>
        public readonly bool AssignIpv6AddressOnCreation;
        public readonly string AvailabilityZone;
        public readonly string AvailabilityZoneId;
        /// <summary>
        /// Available IP addresses of the subnet.
        /// </summary>
        public readonly int AvailableIpAddressCount;
        public readonly string CidrBlock;
        /// <summary>
        /// Identifier of customer owned IPv4 address pool.
        /// </summary>
        public readonly string CustomerOwnedIpv4Pool;
        public readonly bool DefaultForAz;
        public readonly ImmutableArray<Outputs.GetSubnetFilterResult> Filters;
        public readonly string Id;
        public readonly string Ipv6CidrBlock;
        /// <summary>
        /// Association ID of the IPv6 CIDR block.
        /// </summary>
        public readonly string Ipv6CidrBlockAssociationId;
        /// <summary>
        /// Whether customer owned IP addresses are assigned on network interface creation.
        /// </summary>
        public readonly bool MapCustomerOwnedIpOnLaunch;
        /// <summary>
        /// Whether public IP addresses are assigned on instance launch.
        /// </summary>
        public readonly bool MapPublicIpOnLaunch;
        /// <summary>
        /// ARN of the Outpost.
        /// </summary>
        public readonly string OutpostArn;
        /// <summary>
        /// ID of the AWS account that owns the subnet.
        /// </summary>
        public readonly string OwnerId;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetSubnetResult(
            string arn,

            bool assignIpv6AddressOnCreation,

            string availabilityZone,

            string availabilityZoneId,

            int availableIpAddressCount,

            string cidrBlock,

            string customerOwnedIpv4Pool,

            bool defaultForAz,

            ImmutableArray<Outputs.GetSubnetFilterResult> filters,

            string id,

            string ipv6CidrBlock,

            string ipv6CidrBlockAssociationId,

            bool mapCustomerOwnedIpOnLaunch,

            bool mapPublicIpOnLaunch,

            string outpostArn,

            string ownerId,

            string state,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Arn = arn;
            AssignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            AvailabilityZone = availabilityZone;
            AvailabilityZoneId = availabilityZoneId;
            AvailableIpAddressCount = availableIpAddressCount;
            CidrBlock = cidrBlock;
            CustomerOwnedIpv4Pool = customerOwnedIpv4Pool;
            DefaultForAz = defaultForAz;
            Filters = filters;
            Id = id;
            Ipv6CidrBlock = ipv6CidrBlock;
            Ipv6CidrBlockAssociationId = ipv6CidrBlockAssociationId;
            MapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
            MapPublicIpOnLaunch = mapPublicIpOnLaunch;
            OutpostArn = outpostArn;
            OwnerId = ownerId;
            State = state;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
