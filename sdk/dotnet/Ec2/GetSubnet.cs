// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSubnet
    {
        /// <summary>
        /// `aws.ec2.Subnet` provides details about a specific VPC subnet.
        /// 
        /// This resource can prove useful when a module accepts a subnet ID as an input variable and needs to, for example, determine the ID of the VPC that the subnet belongs to.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a subnet ID as a variable and use this data source to obtain the data necessary to create a security group that allows connections from hosts in that subnet.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const subnetId = config.requireObject("subnetId");
        /// const selected = aws.ec2.getSubnet({
        ///     id: subnetId,
        /// });
        /// const subnet = new aws.ec2.SecurityGroup("subnet", {
        ///     vpcId: selected.then(selected =&gt; selected.vpcId),
        ///     ingress: [{
        ///         cidrBlocks: [selected.then(selected =&gt; selected.cidrBlock)],
        ///         fromPort: 80,
        ///         toPort: 80,
        ///         protocol: "tcp",
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// subnet_id = config.require_object("subnetId")
        /// selected = aws.ec2.get_subnet(id=subnet_id)
        /// subnet = aws.ec2.SecurityGroup("subnet",
        ///     vpc_id=selected.vpc_id,
        ///     ingress=[aws.ec2.SecurityGroupIngressArgs(
        ///         cidr_blocks=[selected.cidr_block],
        ///         from_port=80,
        ///         to_port=80,
        ///         protocol="tcp",
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///     var selected = Aws.Ec2.GetSubnet.Invoke(new()
        ///     {
        ///         Id = subnetId,
        ///     });
        /// 
        ///     var subnet = new Aws.Ec2.SecurityGroup("subnet", new()
        ///     {
        ///         VpcId = selected.Apply(getSubnetResult =&gt; getSubnetResult.VpcId),
        ///         Ingress = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.SecurityGroupIngressArgs
        ///             {
        ///                 CidrBlocks = new[]
        ///                 {
        ///                     selected.Apply(getSubnetResult =&gt; getSubnetResult.CidrBlock),
        ///                 },
        ///                 FromPort = 80,
        ///                 ToPort = 80,
        ///                 Protocol = "tcp",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		subnetId := cfg.RequireObject("subnetId")
        /// 		selected, err := ec2.LookupSubnet(ctx, &amp;ec2.LookupSubnetArgs{
        /// 			Id: pulumi.StringRef(subnetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewSecurityGroup(ctx, "subnet", &amp;ec2.SecurityGroupArgs{
        /// 			VpcId: *pulumi.String(selected.VpcId),
        /// 			Ingress: ec2.SecurityGroupIngressArray{
        /// 				&amp;ec2.SecurityGroupIngressArgs{
        /// 					CidrBlocks: pulumi.StringArray{
        /// 						*pulumi.String(selected.CidrBlock),
        /// 					},
        /// 					FromPort: pulumi.Int(80),
        /// 					ToPort:   pulumi.Int(80),
        /// 					Protocol: pulumi.String("tcp"),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetSubnetArgs;
        /// import com.pulumi.aws.ec2.SecurityGroup;
        /// import com.pulumi.aws.ec2.SecurityGroupArgs;
        /// import com.pulumi.aws.ec2.inputs.SecurityGroupIngressArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var subnetId = config.get("subnetId");
        ///         final var selected = Ec2Functions.getSubnet(GetSubnetArgs.builder()
        ///             .id(subnetId)
        ///             .build());
        /// 
        ///         var subnet = new SecurityGroup("subnet", SecurityGroupArgs.builder()        
        ///             .vpcId(selected.applyValue(getSubnetResult -&gt; getSubnetResult.vpcId()))
        ///             .ingress(SecurityGroupIngressArgs.builder()
        ///                 .cidrBlocks(selected.applyValue(getSubnetResult -&gt; getSubnetResult.cidrBlock()))
        ///                 .fromPort(80)
        ///                 .toPort(80)
        ///                 .protocol("tcp")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   subnetId:
        ///     type: dynamic
        /// resources:
        ///   subnet:
        ///     type: aws:ec2:SecurityGroup
        ///     properties:
        ///       vpcId: ${selected.vpcId}
        ///       ingress:
        ///         - cidrBlocks:
        ///             - ${selected.cidrBlock}
        ///           fromPort: 80
        ///           toPort: 80
        ///           protocol: tcp
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getSubnet
        ///       Arguments:
        ///         id: ${subnetId}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter Example
        /// 
        /// If you want to match against tag `Name`, use:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const selected = aws.ec2.getSubnet({
        ///     filters: [{
        ///         name: "tag:Name",
        ///         values: ["yakdriver"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// selected = aws.ec2.get_subnet(filters=[aws.ec2.GetSubnetFilterArgs(
        ///     name="tag:Name",
        ///     values=["yakdriver"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Aws.Ec2.GetSubnet.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetSubnetFilterInputArgs
        ///             {
        ///                 Name = "tag:Name",
        ///                 Values = new[]
        ///                 {
        ///                     "yakdriver",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupSubnet(ctx, &amp;ec2.LookupSubnetArgs{
        /// 			Filters: []ec2.GetSubnetFilter{
        /// 				{
        /// 					Name: "tag:Name",
        /// 					Values: []string{
        /// 						"yakdriver",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetSubnetArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var selected = Ec2Functions.getSubnet(GetSubnetArgs.builder()
        ///             .filters(GetSubnetFilterArgs.builder()
        ///                 .name("tag:Name")
        ///                 .values("yakdriver")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getSubnet
        ///       Arguments:
        ///         filters:
        ///           - name: tag:Name
        ///             values:
        ///               - yakdriver
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("aws:ec2/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ec2.Subnet` provides details about a specific VPC subnet.
        /// 
        /// This resource can prove useful when a module accepts a subnet ID as an input variable and needs to, for example, determine the ID of the VPC that the subnet belongs to.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a subnet ID as a variable and use this data source to obtain the data necessary to create a security group that allows connections from hosts in that subnet.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const subnetId = config.requireObject("subnetId");
        /// const selected = aws.ec2.getSubnet({
        ///     id: subnetId,
        /// });
        /// const subnet = new aws.ec2.SecurityGroup("subnet", {
        ///     vpcId: selected.then(selected =&gt; selected.vpcId),
        ///     ingress: [{
        ///         cidrBlocks: [selected.then(selected =&gt; selected.cidrBlock)],
        ///         fromPort: 80,
        ///         toPort: 80,
        ///         protocol: "tcp",
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// subnet_id = config.require_object("subnetId")
        /// selected = aws.ec2.get_subnet(id=subnet_id)
        /// subnet = aws.ec2.SecurityGroup("subnet",
        ///     vpc_id=selected.vpc_id,
        ///     ingress=[aws.ec2.SecurityGroupIngressArgs(
        ///         cidr_blocks=[selected.cidr_block],
        ///         from_port=80,
        ///         to_port=80,
        ///         protocol="tcp",
        ///     )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///     var selected = Aws.Ec2.GetSubnet.Invoke(new()
        ///     {
        ///         Id = subnetId,
        ///     });
        /// 
        ///     var subnet = new Aws.Ec2.SecurityGroup("subnet", new()
        ///     {
        ///         VpcId = selected.Apply(getSubnetResult =&gt; getSubnetResult.VpcId),
        ///         Ingress = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.SecurityGroupIngressArgs
        ///             {
        ///                 CidrBlocks = new[]
        ///                 {
        ///                     selected.Apply(getSubnetResult =&gt; getSubnetResult.CidrBlock),
        ///                 },
        ///                 FromPort = 80,
        ///                 ToPort = 80,
        ///                 Protocol = "tcp",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		subnetId := cfg.RequireObject("subnetId")
        /// 		selected, err := ec2.LookupSubnet(ctx, &amp;ec2.LookupSubnetArgs{
        /// 			Id: pulumi.StringRef(subnetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewSecurityGroup(ctx, "subnet", &amp;ec2.SecurityGroupArgs{
        /// 			VpcId: *pulumi.String(selected.VpcId),
        /// 			Ingress: ec2.SecurityGroupIngressArray{
        /// 				&amp;ec2.SecurityGroupIngressArgs{
        /// 					CidrBlocks: pulumi.StringArray{
        /// 						*pulumi.String(selected.CidrBlock),
        /// 					},
        /// 					FromPort: pulumi.Int(80),
        /// 					ToPort:   pulumi.Int(80),
        /// 					Protocol: pulumi.String("tcp"),
        /// 				},
        /// 			},
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetSubnetArgs;
        /// import com.pulumi.aws.ec2.SecurityGroup;
        /// import com.pulumi.aws.ec2.SecurityGroupArgs;
        /// import com.pulumi.aws.ec2.inputs.SecurityGroupIngressArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var subnetId = config.get("subnetId");
        ///         final var selected = Ec2Functions.getSubnet(GetSubnetArgs.builder()
        ///             .id(subnetId)
        ///             .build());
        /// 
        ///         var subnet = new SecurityGroup("subnet", SecurityGroupArgs.builder()        
        ///             .vpcId(selected.applyValue(getSubnetResult -&gt; getSubnetResult.vpcId()))
        ///             .ingress(SecurityGroupIngressArgs.builder()
        ///                 .cidrBlocks(selected.applyValue(getSubnetResult -&gt; getSubnetResult.cidrBlock()))
        ///                 .fromPort(80)
        ///                 .toPort(80)
        ///                 .protocol("tcp")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   subnetId:
        ///     type: dynamic
        /// resources:
        ///   subnet:
        ///     type: aws:ec2:SecurityGroup
        ///     properties:
        ///       vpcId: ${selected.vpcId}
        ///       ingress:
        ///         - cidrBlocks:
        ///             - ${selected.cidrBlock}
        ///           fromPort: 80
        ///           toPort: 80
        ///           protocol: tcp
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getSubnet
        ///       Arguments:
        ///         id: ${subnetId}
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter Example
        /// 
        /// If you want to match against tag `Name`, use:
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const selected = aws.ec2.getSubnet({
        ///     filters: [{
        ///         name: "tag:Name",
        ///         values: ["yakdriver"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// selected = aws.ec2.get_subnet(filters=[aws.ec2.GetSubnetFilterArgs(
        ///     name="tag:Name",
        ///     values=["yakdriver"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var selected = Aws.Ec2.GetSubnet.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetSubnetFilterInputArgs
        ///             {
        ///                 Name = "tag:Name",
        ///                 Values = new[]
        ///                 {
        ///                     "yakdriver",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupSubnet(ctx, &amp;ec2.LookupSubnetArgs{
        /// 			Filters: []ec2.GetSubnetFilter{
        /// 				{
        /// 					Name: "tag:Name",
        /// 					Values: []string{
        /// 						"yakdriver",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetSubnetArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var selected = Ec2Functions.getSubnet(GetSubnetArgs.builder()
        ///             .filters(GetSubnetFilterArgs.builder()
        ///                 .name("tag:Name")
        ///                 .values("yakdriver")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getSubnet
        ///       Arguments:
        ///         filters:
        ///           - name: tag:Name
        ///             values:
        ///               - yakdriver
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("aws:ec2/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where the subnet must reside.
        /// </summary>
        [Input("availabilityZone")]
        public string? AvailabilityZone { get; set; }

        /// <summary>
        /// ID of the Availability Zone for the subnet. This argument is not supported in all regions or partitions. If necessary, use `availability_zone` instead.
        /// </summary>
        [Input("availabilityZoneId")]
        public string? AvailabilityZoneId { get; set; }

        /// <summary>
        /// CIDR block of the desired subnet.
        /// </summary>
        [Input("cidrBlock")]
        public string? CidrBlock { get; set; }

        /// <summary>
        /// Whether the desired subnet must be the default subnet for its associated availability zone.
        /// </summary>
        [Input("defaultForAz")]
        public bool? DefaultForAz { get; set; }

        [Input("filters")]
        private List<Inputs.GetSubnetFilterArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public List<Inputs.GetSubnetFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSubnetFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific subnet to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// IPv6 CIDR block of the desired subnet.
        /// </summary>
        [Input("ipv6CidrBlock")]
        public string? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// State that the desired subnet must have.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired subnet.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the desired subnet belongs to.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Availability zone where the subnet must reside.
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// ID of the Availability Zone for the subnet. This argument is not supported in all regions or partitions. If necessary, use `availability_zone` instead.
        /// </summary>
        [Input("availabilityZoneId")]
        public Input<string>? AvailabilityZoneId { get; set; }

        /// <summary>
        /// CIDR block of the desired subnet.
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// Whether the desired subnet must be the default subnet for its associated availability zone.
        /// </summary>
        [Input("defaultForAz")]
        public Input<bool>? DefaultForAz { get; set; }

        [Input("filters")]
        private InputList<Inputs.GetSubnetFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block. Detailed below.
        /// </summary>
        public InputList<Inputs.GetSubnetFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSubnetFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// ID of the specific subnet to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// IPv6 CIDR block of the desired subnet.
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// State that the desired subnet must have.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired subnet.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// ID of the VPC that the desired subnet belongs to.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// ARN of the subnet.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Whether an IPv6 address is assigned on creation.
        /// </summary>
        public readonly bool AssignIpv6AddressOnCreation;
        public readonly string AvailabilityZone;
        public readonly string AvailabilityZoneId;
        /// <summary>
        /// Available IP addresses of the subnet.
        /// </summary>
        public readonly int AvailableIpAddressCount;
        public readonly string CidrBlock;
        /// <summary>
        /// Identifier of customer owned IPv4 address pool.
        /// </summary>
        public readonly string CustomerOwnedIpv4Pool;
        public readonly bool DefaultForAz;
        /// <summary>
        /// Whether DNS queries made to the Amazon-provided DNS Resolver in this subnet return synthetic IPv6 addresses for IPv4-only destinations.
        /// </summary>
        public readonly bool EnableDns64;
        /// <summary>
        /// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
        /// </summary>
        public readonly int EnableLniAtDeviceIndex;
        /// <summary>
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
        /// </summary>
        public readonly bool EnableResourceNameDnsARecordOnLaunch;
        /// <summary>
        /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
        /// </summary>
        public readonly bool EnableResourceNameDnsAaaaRecordOnLaunch;
        public readonly ImmutableArray<Outputs.GetSubnetFilterResult> Filters;
        public readonly string Id;
        public readonly string Ipv6CidrBlock;
        /// <summary>
        /// Association ID of the IPv6 CIDR block.
        /// </summary>
        public readonly string Ipv6CidrBlockAssociationId;
        /// <summary>
        /// Whether this is an IPv6-only subnet.
        /// </summary>
        public readonly bool Ipv6Native;
        /// <summary>
        /// Whether customer owned IP addresses are assigned on network interface creation.
        /// </summary>
        public readonly bool MapCustomerOwnedIpOnLaunch;
        /// <summary>
        /// Whether public IP addresses are assigned on instance launch.
        /// </summary>
        public readonly bool MapPublicIpOnLaunch;
        /// <summary>
        /// ARN of the Outpost.
        /// </summary>
        public readonly string OutpostArn;
        /// <summary>
        /// ID of the AWS account that owns the subnet.
        /// </summary>
        public readonly string OwnerId;
        /// <summary>
        /// The type of hostnames assigned to instances in the subnet at launch.
        /// </summary>
        public readonly string PrivateDnsHostnameTypeOnLaunch;
        public readonly string State;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetSubnetResult(
            string arn,

            bool assignIpv6AddressOnCreation,

            string availabilityZone,

            string availabilityZoneId,

            int availableIpAddressCount,

            string cidrBlock,

            string customerOwnedIpv4Pool,

            bool defaultForAz,

            bool enableDns64,

            int enableLniAtDeviceIndex,

            bool enableResourceNameDnsARecordOnLaunch,

            bool enableResourceNameDnsAaaaRecordOnLaunch,

            ImmutableArray<Outputs.GetSubnetFilterResult> filters,

            string id,

            string ipv6CidrBlock,

            string ipv6CidrBlockAssociationId,

            bool ipv6Native,

            bool mapCustomerOwnedIpOnLaunch,

            bool mapPublicIpOnLaunch,

            string outpostArn,

            string ownerId,

            string privateDnsHostnameTypeOnLaunch,

            string state,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Arn = arn;
            AssignIpv6AddressOnCreation = assignIpv6AddressOnCreation;
            AvailabilityZone = availabilityZone;
            AvailabilityZoneId = availabilityZoneId;
            AvailableIpAddressCount = availableIpAddressCount;
            CidrBlock = cidrBlock;
            CustomerOwnedIpv4Pool = customerOwnedIpv4Pool;
            DefaultForAz = defaultForAz;
            EnableDns64 = enableDns64;
            EnableLniAtDeviceIndex = enableLniAtDeviceIndex;
            EnableResourceNameDnsARecordOnLaunch = enableResourceNameDnsARecordOnLaunch;
            EnableResourceNameDnsAaaaRecordOnLaunch = enableResourceNameDnsAaaaRecordOnLaunch;
            Filters = filters;
            Id = id;
            Ipv6CidrBlock = ipv6CidrBlock;
            Ipv6CidrBlockAssociationId = ipv6CidrBlockAssociationId;
            Ipv6Native = ipv6Native;
            MapCustomerOwnedIpOnLaunch = mapCustomerOwnedIpOnLaunch;
            MapPublicIpOnLaunch = mapPublicIpOnLaunch;
            OutpostArn = outpostArn;
            OwnerId = ownerId;
            PrivateDnsHostnameTypeOnLaunch = privateDnsHostnameTypeOnLaunch;
            State = state;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
