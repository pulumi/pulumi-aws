// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    [AwsResourceType("aws:ec2/vpnConnection:VpnConnection")]
    public partial class VpnConnection : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("coreNetworkArn")]
        public Output<string> CoreNetworkArn { get; private set; } = null!;

        [Output("coreNetworkAttachmentArn")]
        public Output<string> CoreNetworkAttachmentArn { get; private set; } = null!;

        [Output("customerGatewayConfiguration")]
        public Output<string> CustomerGatewayConfiguration { get; private set; } = null!;

        [Output("customerGatewayId")]
        public Output<string> CustomerGatewayId { get; private set; } = null!;

        [Output("enableAcceleration")]
        public Output<bool> EnableAcceleration { get; private set; } = null!;

        [Output("localIpv4NetworkCidr")]
        public Output<string> LocalIpv4NetworkCidr { get; private set; } = null!;

        [Output("localIpv6NetworkCidr")]
        public Output<string> LocalIpv6NetworkCidr { get; private set; } = null!;

        [Output("outsideIpAddressType")]
        public Output<string> OutsideIpAddressType { get; private set; } = null!;

        [Output("remoteIpv4NetworkCidr")]
        public Output<string> RemoteIpv4NetworkCidr { get; private set; } = null!;

        [Output("remoteIpv6NetworkCidr")]
        public Output<string> RemoteIpv6NetworkCidr { get; private set; } = null!;

        [Output("routes")]
        public Output<ImmutableArray<Outputs.VpnConnectionRoute>> Routes { get; private set; } = null!;

        [Output("staticRoutesOnly")]
        public Output<bool> StaticRoutesOnly { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("transitGatewayAttachmentId")]
        public Output<string> TransitGatewayAttachmentId { get; private set; } = null!;

        [Output("transitGatewayId")]
        public Output<string?> TransitGatewayId { get; private set; } = null!;

        [Output("transportTransitGatewayAttachmentId")]
        public Output<string?> TransportTransitGatewayAttachmentId { get; private set; } = null!;

        [Output("tunnel1Address")]
        public Output<string> Tunnel1Address { get; private set; } = null!;

        [Output("tunnel1BgpAsn")]
        public Output<string> Tunnel1BgpAsn { get; private set; } = null!;

        [Output("tunnel1BgpHoldtime")]
        public Output<int> Tunnel1BgpHoldtime { get; private set; } = null!;

        [Output("tunnel1CgwInsideAddress")]
        public Output<string> Tunnel1CgwInsideAddress { get; private set; } = null!;

        [Output("tunnel1DpdTimeoutAction")]
        public Output<string?> Tunnel1DpdTimeoutAction { get; private set; } = null!;

        [Output("tunnel1DpdTimeoutSeconds")]
        public Output<int?> Tunnel1DpdTimeoutSeconds { get; private set; } = null!;

        [Output("tunnel1IkeVersions")]
        public Output<ImmutableArray<string>> Tunnel1IkeVersions { get; private set; } = null!;

        [Output("tunnel1InsideCidr")]
        public Output<string> Tunnel1InsideCidr { get; private set; } = null!;

        [Output("tunnel1InsideIpv6Cidr")]
        public Output<string> Tunnel1InsideIpv6Cidr { get; private set; } = null!;

        [Output("tunnel1LogOptions")]
        public Output<Outputs.VpnConnectionTunnel1LogOptions> Tunnel1LogOptions { get; private set; } = null!;

        [Output("tunnel1Phase1DhGroupNumbers")]
        public Output<ImmutableArray<int>> Tunnel1Phase1DhGroupNumbers { get; private set; } = null!;

        [Output("tunnel1Phase1EncryptionAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel1Phase1EncryptionAlgorithms { get; private set; } = null!;

        [Output("tunnel1Phase1IntegrityAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel1Phase1IntegrityAlgorithms { get; private set; } = null!;

        [Output("tunnel1Phase1LifetimeSeconds")]
        public Output<int?> Tunnel1Phase1LifetimeSeconds { get; private set; } = null!;

        [Output("tunnel1Phase2DhGroupNumbers")]
        public Output<ImmutableArray<int>> Tunnel1Phase2DhGroupNumbers { get; private set; } = null!;

        [Output("tunnel1Phase2EncryptionAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel1Phase2EncryptionAlgorithms { get; private set; } = null!;

        [Output("tunnel1Phase2IntegrityAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel1Phase2IntegrityAlgorithms { get; private set; } = null!;

        [Output("tunnel1Phase2LifetimeSeconds")]
        public Output<int?> Tunnel1Phase2LifetimeSeconds { get; private set; } = null!;

        [Output("tunnel1PresharedKey")]
        public Output<string> Tunnel1PresharedKey { get; private set; } = null!;

        [Output("tunnel1RekeyFuzzPercentage")]
        public Output<int?> Tunnel1RekeyFuzzPercentage { get; private set; } = null!;

        [Output("tunnel1RekeyMarginTimeSeconds")]
        public Output<int?> Tunnel1RekeyMarginTimeSeconds { get; private set; } = null!;

        [Output("tunnel1ReplayWindowSize")]
        public Output<int?> Tunnel1ReplayWindowSize { get; private set; } = null!;

        [Output("tunnel1StartupAction")]
        public Output<string?> Tunnel1StartupAction { get; private set; } = null!;

        [Output("tunnel1VgwInsideAddress")]
        public Output<string> Tunnel1VgwInsideAddress { get; private set; } = null!;

        [Output("tunnel2Address")]
        public Output<string> Tunnel2Address { get; private set; } = null!;

        [Output("tunnel2BgpAsn")]
        public Output<string> Tunnel2BgpAsn { get; private set; } = null!;

        [Output("tunnel2BgpHoldtime")]
        public Output<int> Tunnel2BgpHoldtime { get; private set; } = null!;

        [Output("tunnel2CgwInsideAddress")]
        public Output<string> Tunnel2CgwInsideAddress { get; private set; } = null!;

        [Output("tunnel2DpdTimeoutAction")]
        public Output<string?> Tunnel2DpdTimeoutAction { get; private set; } = null!;

        [Output("tunnel2DpdTimeoutSeconds")]
        public Output<int?> Tunnel2DpdTimeoutSeconds { get; private set; } = null!;

        [Output("tunnel2IkeVersions")]
        public Output<ImmutableArray<string>> Tunnel2IkeVersions { get; private set; } = null!;

        [Output("tunnel2InsideCidr")]
        public Output<string> Tunnel2InsideCidr { get; private set; } = null!;

        [Output("tunnel2InsideIpv6Cidr")]
        public Output<string> Tunnel2InsideIpv6Cidr { get; private set; } = null!;

        [Output("tunnel2LogOptions")]
        public Output<Outputs.VpnConnectionTunnel2LogOptions> Tunnel2LogOptions { get; private set; } = null!;

        [Output("tunnel2Phase1DhGroupNumbers")]
        public Output<ImmutableArray<int>> Tunnel2Phase1DhGroupNumbers { get; private set; } = null!;

        [Output("tunnel2Phase1EncryptionAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel2Phase1EncryptionAlgorithms { get; private set; } = null!;

        [Output("tunnel2Phase1IntegrityAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel2Phase1IntegrityAlgorithms { get; private set; } = null!;

        [Output("tunnel2Phase1LifetimeSeconds")]
        public Output<int?> Tunnel2Phase1LifetimeSeconds { get; private set; } = null!;

        [Output("tunnel2Phase2DhGroupNumbers")]
        public Output<ImmutableArray<int>> Tunnel2Phase2DhGroupNumbers { get; private set; } = null!;

        [Output("tunnel2Phase2EncryptionAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel2Phase2EncryptionAlgorithms { get; private set; } = null!;

        [Output("tunnel2Phase2IntegrityAlgorithms")]
        public Output<ImmutableArray<string>> Tunnel2Phase2IntegrityAlgorithms { get; private set; } = null!;

        [Output("tunnel2Phase2LifetimeSeconds")]
        public Output<int?> Tunnel2Phase2LifetimeSeconds { get; private set; } = null!;

        [Output("tunnel2PresharedKey")]
        public Output<string> Tunnel2PresharedKey { get; private set; } = null!;

        [Output("tunnel2RekeyFuzzPercentage")]
        public Output<int?> Tunnel2RekeyFuzzPercentage { get; private set; } = null!;

        [Output("tunnel2RekeyMarginTimeSeconds")]
        public Output<int?> Tunnel2RekeyMarginTimeSeconds { get; private set; } = null!;

        [Output("tunnel2ReplayWindowSize")]
        public Output<int?> Tunnel2ReplayWindowSize { get; private set; } = null!;

        [Output("tunnel2StartupAction")]
        public Output<string?> Tunnel2StartupAction { get; private set; } = null!;

        [Output("tunnel2VgwInsideAddress")]
        public Output<string> Tunnel2VgwInsideAddress { get; private set; } = null!;

        [Output("tunnelInsideIpVersion")]
        public Output<string> TunnelInsideIpVersion { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("vgwTelemetries")]
        public Output<ImmutableArray<Outputs.VpnConnectionVgwTelemetry>> VgwTelemetries { get; private set; } = null!;

        [Output("vpnGatewayId")]
        public Output<string?> VpnGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a VpnConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnConnection(string name, VpnConnectionArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/vpnConnection:VpnConnection", name, args ?? new VpnConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnConnection(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/vpnConnection:VpnConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "customerGatewayConfiguration",
                    "tunnel1PresharedKey",
                    "tunnel2PresharedKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnConnection Get(string name, Input<string> id, VpnConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnConnection(name, id, state, options);
        }
    }

    public sealed class VpnConnectionArgs : global::Pulumi.ResourceArgs
    {
        [Input("customerGatewayId", required: true)]
        public Input<string> CustomerGatewayId { get; set; } = null!;

        [Input("enableAcceleration")]
        public Input<bool>? EnableAcceleration { get; set; }

        [Input("localIpv4NetworkCidr")]
        public Input<string>? LocalIpv4NetworkCidr { get; set; }

        [Input("localIpv6NetworkCidr")]
        public Input<string>? LocalIpv6NetworkCidr { get; set; }

        [Input("outsideIpAddressType")]
        public Input<string>? OutsideIpAddressType { get; set; }

        [Input("remoteIpv4NetworkCidr")]
        public Input<string>? RemoteIpv4NetworkCidr { get; set; }

        [Input("remoteIpv6NetworkCidr")]
        public Input<string>? RemoteIpv6NetworkCidr { get; set; }

        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("transitGatewayId")]
        public Input<string>? TransitGatewayId { get; set; }

        [Input("transportTransitGatewayAttachmentId")]
        public Input<string>? TransportTransitGatewayAttachmentId { get; set; }

        [Input("tunnel1DpdTimeoutAction")]
        public Input<string>? Tunnel1DpdTimeoutAction { get; set; }

        [Input("tunnel1DpdTimeoutSeconds")]
        public Input<int>? Tunnel1DpdTimeoutSeconds { get; set; }

        [Input("tunnel1IkeVersions")]
        private InputList<string>? _tunnel1IkeVersions;
        public InputList<string> Tunnel1IkeVersions
        {
            get => _tunnel1IkeVersions ?? (_tunnel1IkeVersions = new InputList<string>());
            set => _tunnel1IkeVersions = value;
        }

        [Input("tunnel1InsideCidr")]
        public Input<string>? Tunnel1InsideCidr { get; set; }

        [Input("tunnel1InsideIpv6Cidr")]
        public Input<string>? Tunnel1InsideIpv6Cidr { get; set; }

        [Input("tunnel1LogOptions")]
        public Input<Inputs.VpnConnectionTunnel1LogOptionsArgs>? Tunnel1LogOptions { get; set; }

        [Input("tunnel1Phase1DhGroupNumbers")]
        private InputList<int>? _tunnel1Phase1DhGroupNumbers;
        public InputList<int> Tunnel1Phase1DhGroupNumbers
        {
            get => _tunnel1Phase1DhGroupNumbers ?? (_tunnel1Phase1DhGroupNumbers = new InputList<int>());
            set => _tunnel1Phase1DhGroupNumbers = value;
        }

        [Input("tunnel1Phase1EncryptionAlgorithms")]
        private InputList<string>? _tunnel1Phase1EncryptionAlgorithms;
        public InputList<string> Tunnel1Phase1EncryptionAlgorithms
        {
            get => _tunnel1Phase1EncryptionAlgorithms ?? (_tunnel1Phase1EncryptionAlgorithms = new InputList<string>());
            set => _tunnel1Phase1EncryptionAlgorithms = value;
        }

        [Input("tunnel1Phase1IntegrityAlgorithms")]
        private InputList<string>? _tunnel1Phase1IntegrityAlgorithms;
        public InputList<string> Tunnel1Phase1IntegrityAlgorithms
        {
            get => _tunnel1Phase1IntegrityAlgorithms ?? (_tunnel1Phase1IntegrityAlgorithms = new InputList<string>());
            set => _tunnel1Phase1IntegrityAlgorithms = value;
        }

        [Input("tunnel1Phase1LifetimeSeconds")]
        public Input<int>? Tunnel1Phase1LifetimeSeconds { get; set; }

        [Input("tunnel1Phase2DhGroupNumbers")]
        private InputList<int>? _tunnel1Phase2DhGroupNumbers;
        public InputList<int> Tunnel1Phase2DhGroupNumbers
        {
            get => _tunnel1Phase2DhGroupNumbers ?? (_tunnel1Phase2DhGroupNumbers = new InputList<int>());
            set => _tunnel1Phase2DhGroupNumbers = value;
        }

        [Input("tunnel1Phase2EncryptionAlgorithms")]
        private InputList<string>? _tunnel1Phase2EncryptionAlgorithms;
        public InputList<string> Tunnel1Phase2EncryptionAlgorithms
        {
            get => _tunnel1Phase2EncryptionAlgorithms ?? (_tunnel1Phase2EncryptionAlgorithms = new InputList<string>());
            set => _tunnel1Phase2EncryptionAlgorithms = value;
        }

        [Input("tunnel1Phase2IntegrityAlgorithms")]
        private InputList<string>? _tunnel1Phase2IntegrityAlgorithms;
        public InputList<string> Tunnel1Phase2IntegrityAlgorithms
        {
            get => _tunnel1Phase2IntegrityAlgorithms ?? (_tunnel1Phase2IntegrityAlgorithms = new InputList<string>());
            set => _tunnel1Phase2IntegrityAlgorithms = value;
        }

        [Input("tunnel1Phase2LifetimeSeconds")]
        public Input<int>? Tunnel1Phase2LifetimeSeconds { get; set; }

        [Input("tunnel1PresharedKey")]
        private Input<string>? _tunnel1PresharedKey;
        public Input<string>? Tunnel1PresharedKey
        {
            get => _tunnel1PresharedKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tunnel1PresharedKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tunnel1RekeyFuzzPercentage")]
        public Input<int>? Tunnel1RekeyFuzzPercentage { get; set; }

        [Input("tunnel1RekeyMarginTimeSeconds")]
        public Input<int>? Tunnel1RekeyMarginTimeSeconds { get; set; }

        [Input("tunnel1ReplayWindowSize")]
        public Input<int>? Tunnel1ReplayWindowSize { get; set; }

        [Input("tunnel1StartupAction")]
        public Input<string>? Tunnel1StartupAction { get; set; }

        [Input("tunnel2DpdTimeoutAction")]
        public Input<string>? Tunnel2DpdTimeoutAction { get; set; }

        [Input("tunnel2DpdTimeoutSeconds")]
        public Input<int>? Tunnel2DpdTimeoutSeconds { get; set; }

        [Input("tunnel2IkeVersions")]
        private InputList<string>? _tunnel2IkeVersions;
        public InputList<string> Tunnel2IkeVersions
        {
            get => _tunnel2IkeVersions ?? (_tunnel2IkeVersions = new InputList<string>());
            set => _tunnel2IkeVersions = value;
        }

        [Input("tunnel2InsideCidr")]
        public Input<string>? Tunnel2InsideCidr { get; set; }

        [Input("tunnel2InsideIpv6Cidr")]
        public Input<string>? Tunnel2InsideIpv6Cidr { get; set; }

        [Input("tunnel2LogOptions")]
        public Input<Inputs.VpnConnectionTunnel2LogOptionsArgs>? Tunnel2LogOptions { get; set; }

        [Input("tunnel2Phase1DhGroupNumbers")]
        private InputList<int>? _tunnel2Phase1DhGroupNumbers;
        public InputList<int> Tunnel2Phase1DhGroupNumbers
        {
            get => _tunnel2Phase1DhGroupNumbers ?? (_tunnel2Phase1DhGroupNumbers = new InputList<int>());
            set => _tunnel2Phase1DhGroupNumbers = value;
        }

        [Input("tunnel2Phase1EncryptionAlgorithms")]
        private InputList<string>? _tunnel2Phase1EncryptionAlgorithms;
        public InputList<string> Tunnel2Phase1EncryptionAlgorithms
        {
            get => _tunnel2Phase1EncryptionAlgorithms ?? (_tunnel2Phase1EncryptionAlgorithms = new InputList<string>());
            set => _tunnel2Phase1EncryptionAlgorithms = value;
        }

        [Input("tunnel2Phase1IntegrityAlgorithms")]
        private InputList<string>? _tunnel2Phase1IntegrityAlgorithms;
        public InputList<string> Tunnel2Phase1IntegrityAlgorithms
        {
            get => _tunnel2Phase1IntegrityAlgorithms ?? (_tunnel2Phase1IntegrityAlgorithms = new InputList<string>());
            set => _tunnel2Phase1IntegrityAlgorithms = value;
        }

        [Input("tunnel2Phase1LifetimeSeconds")]
        public Input<int>? Tunnel2Phase1LifetimeSeconds { get; set; }

        [Input("tunnel2Phase2DhGroupNumbers")]
        private InputList<int>? _tunnel2Phase2DhGroupNumbers;
        public InputList<int> Tunnel2Phase2DhGroupNumbers
        {
            get => _tunnel2Phase2DhGroupNumbers ?? (_tunnel2Phase2DhGroupNumbers = new InputList<int>());
            set => _tunnel2Phase2DhGroupNumbers = value;
        }

        [Input("tunnel2Phase2EncryptionAlgorithms")]
        private InputList<string>? _tunnel2Phase2EncryptionAlgorithms;
        public InputList<string> Tunnel2Phase2EncryptionAlgorithms
        {
            get => _tunnel2Phase2EncryptionAlgorithms ?? (_tunnel2Phase2EncryptionAlgorithms = new InputList<string>());
            set => _tunnel2Phase2EncryptionAlgorithms = value;
        }

        [Input("tunnel2Phase2IntegrityAlgorithms")]
        private InputList<string>? _tunnel2Phase2IntegrityAlgorithms;
        public InputList<string> Tunnel2Phase2IntegrityAlgorithms
        {
            get => _tunnel2Phase2IntegrityAlgorithms ?? (_tunnel2Phase2IntegrityAlgorithms = new InputList<string>());
            set => _tunnel2Phase2IntegrityAlgorithms = value;
        }

        [Input("tunnel2Phase2LifetimeSeconds")]
        public Input<int>? Tunnel2Phase2LifetimeSeconds { get; set; }

        [Input("tunnel2PresharedKey")]
        private Input<string>? _tunnel2PresharedKey;
        public Input<string>? Tunnel2PresharedKey
        {
            get => _tunnel2PresharedKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tunnel2PresharedKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tunnel2RekeyFuzzPercentage")]
        public Input<int>? Tunnel2RekeyFuzzPercentage { get; set; }

        [Input("tunnel2RekeyMarginTimeSeconds")]
        public Input<int>? Tunnel2RekeyMarginTimeSeconds { get; set; }

        [Input("tunnel2ReplayWindowSize")]
        public Input<int>? Tunnel2ReplayWindowSize { get; set; }

        [Input("tunnel2StartupAction")]
        public Input<string>? Tunnel2StartupAction { get; set; }

        [Input("tunnelInsideIpVersion")]
        public Input<string>? TunnelInsideIpVersion { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public VpnConnectionArgs()
        {
        }
        public static new VpnConnectionArgs Empty => new VpnConnectionArgs();
    }

    public sealed class VpnConnectionState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("coreNetworkArn")]
        public Input<string>? CoreNetworkArn { get; set; }

        [Input("coreNetworkAttachmentArn")]
        public Input<string>? CoreNetworkAttachmentArn { get; set; }

        [Input("customerGatewayConfiguration")]
        private Input<string>? _customerGatewayConfiguration;
        public Input<string>? CustomerGatewayConfiguration
        {
            get => _customerGatewayConfiguration;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _customerGatewayConfiguration = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        [Input("enableAcceleration")]
        public Input<bool>? EnableAcceleration { get; set; }

        [Input("localIpv4NetworkCidr")]
        public Input<string>? LocalIpv4NetworkCidr { get; set; }

        [Input("localIpv6NetworkCidr")]
        public Input<string>? LocalIpv6NetworkCidr { get; set; }

        [Input("outsideIpAddressType")]
        public Input<string>? OutsideIpAddressType { get; set; }

        [Input("remoteIpv4NetworkCidr")]
        public Input<string>? RemoteIpv4NetworkCidr { get; set; }

        [Input("remoteIpv6NetworkCidr")]
        public Input<string>? RemoteIpv6NetworkCidr { get; set; }

        [Input("routes")]
        private InputList<Inputs.VpnConnectionRouteGetArgs>? _routes;
        public InputList<Inputs.VpnConnectionRouteGetArgs> Routes
        {
            get => _routes ?? (_routes = new InputList<Inputs.VpnConnectionRouteGetArgs>());
            set => _routes = value;
        }

        [Input("staticRoutesOnly")]
        public Input<bool>? StaticRoutesOnly { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("transitGatewayAttachmentId")]
        public Input<string>? TransitGatewayAttachmentId { get; set; }

        [Input("transitGatewayId")]
        public Input<string>? TransitGatewayId { get; set; }

        [Input("transportTransitGatewayAttachmentId")]
        public Input<string>? TransportTransitGatewayAttachmentId { get; set; }

        [Input("tunnel1Address")]
        public Input<string>? Tunnel1Address { get; set; }

        [Input("tunnel1BgpAsn")]
        public Input<string>? Tunnel1BgpAsn { get; set; }

        [Input("tunnel1BgpHoldtime")]
        public Input<int>? Tunnel1BgpHoldtime { get; set; }

        [Input("tunnel1CgwInsideAddress")]
        public Input<string>? Tunnel1CgwInsideAddress { get; set; }

        [Input("tunnel1DpdTimeoutAction")]
        public Input<string>? Tunnel1DpdTimeoutAction { get; set; }

        [Input("tunnel1DpdTimeoutSeconds")]
        public Input<int>? Tunnel1DpdTimeoutSeconds { get; set; }

        [Input("tunnel1IkeVersions")]
        private InputList<string>? _tunnel1IkeVersions;
        public InputList<string> Tunnel1IkeVersions
        {
            get => _tunnel1IkeVersions ?? (_tunnel1IkeVersions = new InputList<string>());
            set => _tunnel1IkeVersions = value;
        }

        [Input("tunnel1InsideCidr")]
        public Input<string>? Tunnel1InsideCidr { get; set; }

        [Input("tunnel1InsideIpv6Cidr")]
        public Input<string>? Tunnel1InsideIpv6Cidr { get; set; }

        [Input("tunnel1LogOptions")]
        public Input<Inputs.VpnConnectionTunnel1LogOptionsGetArgs>? Tunnel1LogOptions { get; set; }

        [Input("tunnel1Phase1DhGroupNumbers")]
        private InputList<int>? _tunnel1Phase1DhGroupNumbers;
        public InputList<int> Tunnel1Phase1DhGroupNumbers
        {
            get => _tunnel1Phase1DhGroupNumbers ?? (_tunnel1Phase1DhGroupNumbers = new InputList<int>());
            set => _tunnel1Phase1DhGroupNumbers = value;
        }

        [Input("tunnel1Phase1EncryptionAlgorithms")]
        private InputList<string>? _tunnel1Phase1EncryptionAlgorithms;
        public InputList<string> Tunnel1Phase1EncryptionAlgorithms
        {
            get => _tunnel1Phase1EncryptionAlgorithms ?? (_tunnel1Phase1EncryptionAlgorithms = new InputList<string>());
            set => _tunnel1Phase1EncryptionAlgorithms = value;
        }

        [Input("tunnel1Phase1IntegrityAlgorithms")]
        private InputList<string>? _tunnel1Phase1IntegrityAlgorithms;
        public InputList<string> Tunnel1Phase1IntegrityAlgorithms
        {
            get => _tunnel1Phase1IntegrityAlgorithms ?? (_tunnel1Phase1IntegrityAlgorithms = new InputList<string>());
            set => _tunnel1Phase1IntegrityAlgorithms = value;
        }

        [Input("tunnel1Phase1LifetimeSeconds")]
        public Input<int>? Tunnel1Phase1LifetimeSeconds { get; set; }

        [Input("tunnel1Phase2DhGroupNumbers")]
        private InputList<int>? _tunnel1Phase2DhGroupNumbers;
        public InputList<int> Tunnel1Phase2DhGroupNumbers
        {
            get => _tunnel1Phase2DhGroupNumbers ?? (_tunnel1Phase2DhGroupNumbers = new InputList<int>());
            set => _tunnel1Phase2DhGroupNumbers = value;
        }

        [Input("tunnel1Phase2EncryptionAlgorithms")]
        private InputList<string>? _tunnel1Phase2EncryptionAlgorithms;
        public InputList<string> Tunnel1Phase2EncryptionAlgorithms
        {
            get => _tunnel1Phase2EncryptionAlgorithms ?? (_tunnel1Phase2EncryptionAlgorithms = new InputList<string>());
            set => _tunnel1Phase2EncryptionAlgorithms = value;
        }

        [Input("tunnel1Phase2IntegrityAlgorithms")]
        private InputList<string>? _tunnel1Phase2IntegrityAlgorithms;
        public InputList<string> Tunnel1Phase2IntegrityAlgorithms
        {
            get => _tunnel1Phase2IntegrityAlgorithms ?? (_tunnel1Phase2IntegrityAlgorithms = new InputList<string>());
            set => _tunnel1Phase2IntegrityAlgorithms = value;
        }

        [Input("tunnel1Phase2LifetimeSeconds")]
        public Input<int>? Tunnel1Phase2LifetimeSeconds { get; set; }

        [Input("tunnel1PresharedKey")]
        private Input<string>? _tunnel1PresharedKey;
        public Input<string>? Tunnel1PresharedKey
        {
            get => _tunnel1PresharedKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tunnel1PresharedKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tunnel1RekeyFuzzPercentage")]
        public Input<int>? Tunnel1RekeyFuzzPercentage { get; set; }

        [Input("tunnel1RekeyMarginTimeSeconds")]
        public Input<int>? Tunnel1RekeyMarginTimeSeconds { get; set; }

        [Input("tunnel1ReplayWindowSize")]
        public Input<int>? Tunnel1ReplayWindowSize { get; set; }

        [Input("tunnel1StartupAction")]
        public Input<string>? Tunnel1StartupAction { get; set; }

        [Input("tunnel1VgwInsideAddress")]
        public Input<string>? Tunnel1VgwInsideAddress { get; set; }

        [Input("tunnel2Address")]
        public Input<string>? Tunnel2Address { get; set; }

        [Input("tunnel2BgpAsn")]
        public Input<string>? Tunnel2BgpAsn { get; set; }

        [Input("tunnel2BgpHoldtime")]
        public Input<int>? Tunnel2BgpHoldtime { get; set; }

        [Input("tunnel2CgwInsideAddress")]
        public Input<string>? Tunnel2CgwInsideAddress { get; set; }

        [Input("tunnel2DpdTimeoutAction")]
        public Input<string>? Tunnel2DpdTimeoutAction { get; set; }

        [Input("tunnel2DpdTimeoutSeconds")]
        public Input<int>? Tunnel2DpdTimeoutSeconds { get; set; }

        [Input("tunnel2IkeVersions")]
        private InputList<string>? _tunnel2IkeVersions;
        public InputList<string> Tunnel2IkeVersions
        {
            get => _tunnel2IkeVersions ?? (_tunnel2IkeVersions = new InputList<string>());
            set => _tunnel2IkeVersions = value;
        }

        [Input("tunnel2InsideCidr")]
        public Input<string>? Tunnel2InsideCidr { get; set; }

        [Input("tunnel2InsideIpv6Cidr")]
        public Input<string>? Tunnel2InsideIpv6Cidr { get; set; }

        [Input("tunnel2LogOptions")]
        public Input<Inputs.VpnConnectionTunnel2LogOptionsGetArgs>? Tunnel2LogOptions { get; set; }

        [Input("tunnel2Phase1DhGroupNumbers")]
        private InputList<int>? _tunnel2Phase1DhGroupNumbers;
        public InputList<int> Tunnel2Phase1DhGroupNumbers
        {
            get => _tunnel2Phase1DhGroupNumbers ?? (_tunnel2Phase1DhGroupNumbers = new InputList<int>());
            set => _tunnel2Phase1DhGroupNumbers = value;
        }

        [Input("tunnel2Phase1EncryptionAlgorithms")]
        private InputList<string>? _tunnel2Phase1EncryptionAlgorithms;
        public InputList<string> Tunnel2Phase1EncryptionAlgorithms
        {
            get => _tunnel2Phase1EncryptionAlgorithms ?? (_tunnel2Phase1EncryptionAlgorithms = new InputList<string>());
            set => _tunnel2Phase1EncryptionAlgorithms = value;
        }

        [Input("tunnel2Phase1IntegrityAlgorithms")]
        private InputList<string>? _tunnel2Phase1IntegrityAlgorithms;
        public InputList<string> Tunnel2Phase1IntegrityAlgorithms
        {
            get => _tunnel2Phase1IntegrityAlgorithms ?? (_tunnel2Phase1IntegrityAlgorithms = new InputList<string>());
            set => _tunnel2Phase1IntegrityAlgorithms = value;
        }

        [Input("tunnel2Phase1LifetimeSeconds")]
        public Input<int>? Tunnel2Phase1LifetimeSeconds { get; set; }

        [Input("tunnel2Phase2DhGroupNumbers")]
        private InputList<int>? _tunnel2Phase2DhGroupNumbers;
        public InputList<int> Tunnel2Phase2DhGroupNumbers
        {
            get => _tunnel2Phase2DhGroupNumbers ?? (_tunnel2Phase2DhGroupNumbers = new InputList<int>());
            set => _tunnel2Phase2DhGroupNumbers = value;
        }

        [Input("tunnel2Phase2EncryptionAlgorithms")]
        private InputList<string>? _tunnel2Phase2EncryptionAlgorithms;
        public InputList<string> Tunnel2Phase2EncryptionAlgorithms
        {
            get => _tunnel2Phase2EncryptionAlgorithms ?? (_tunnel2Phase2EncryptionAlgorithms = new InputList<string>());
            set => _tunnel2Phase2EncryptionAlgorithms = value;
        }

        [Input("tunnel2Phase2IntegrityAlgorithms")]
        private InputList<string>? _tunnel2Phase2IntegrityAlgorithms;
        public InputList<string> Tunnel2Phase2IntegrityAlgorithms
        {
            get => _tunnel2Phase2IntegrityAlgorithms ?? (_tunnel2Phase2IntegrityAlgorithms = new InputList<string>());
            set => _tunnel2Phase2IntegrityAlgorithms = value;
        }

        [Input("tunnel2Phase2LifetimeSeconds")]
        public Input<int>? Tunnel2Phase2LifetimeSeconds { get; set; }

        [Input("tunnel2PresharedKey")]
        private Input<string>? _tunnel2PresharedKey;
        public Input<string>? Tunnel2PresharedKey
        {
            get => _tunnel2PresharedKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tunnel2PresharedKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tunnel2RekeyFuzzPercentage")]
        public Input<int>? Tunnel2RekeyFuzzPercentage { get; set; }

        [Input("tunnel2RekeyMarginTimeSeconds")]
        public Input<int>? Tunnel2RekeyMarginTimeSeconds { get; set; }

        [Input("tunnel2ReplayWindowSize")]
        public Input<int>? Tunnel2ReplayWindowSize { get; set; }

        [Input("tunnel2StartupAction")]
        public Input<string>? Tunnel2StartupAction { get; set; }

        [Input("tunnel2VgwInsideAddress")]
        public Input<string>? Tunnel2VgwInsideAddress { get; set; }

        [Input("tunnelInsideIpVersion")]
        public Input<string>? TunnelInsideIpVersion { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vgwTelemetries")]
        private InputList<Inputs.VpnConnectionVgwTelemetryGetArgs>? _vgwTelemetries;
        public InputList<Inputs.VpnConnectionVgwTelemetryGetArgs> VgwTelemetries
        {
            get => _vgwTelemetries ?? (_vgwTelemetries = new InputList<Inputs.VpnConnectionVgwTelemetryGetArgs>());
            set => _vgwTelemetries = value;
        }

        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public VpnConnectionState()
        {
        }
        public static new VpnConnectionState Empty => new VpnConnectionState();
    }
}
