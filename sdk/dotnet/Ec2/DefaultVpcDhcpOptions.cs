// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    /// <summary>
    /// Provides a resource to manage the [default AWS DHCP Options Set](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html#AmazonDNS)
    /// in the current region.
    /// 
    /// Each AWS region comes with a default set of DHCP options.
    /// **This is an advanced resource**, and has special caveats to be aware of when
    /// using it. Please read this document in its entirety before using this resource.
    /// 
    /// The `aws.ec2.DefaultVpcDhcpOptions` behaves differently from normal resources, in that
    /// this provider does not _create_ this resource, but instead "adopts" it
    /// into management.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage with tags:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var @default = new Aws.Ec2.DefaultVpcDhcpOptions("default", new Aws.Ec2.DefaultVpcDhcpOptionsArgs
    ///         {
    ///             Tags = 
    ///             {
    ///                 { "Name", "Default DHCP Option Set" },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AwsResourceType("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions")]
    public partial class DefaultVpcDhcpOptions : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the DHCP Options Set.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        [Output("domainNameServers")]
        public Output<string> DomainNameServers { get; private set; } = null!;

        /// <summary>
        /// List of NETBIOS name servers.
        /// </summary>
        [Output("netbiosNameServers")]
        public Output<ImmutableArray<string>> NetbiosNameServers { get; private set; } = null!;

        /// <summary>
        /// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
        /// </summary>
        [Output("netbiosNodeType")]
        public Output<string?> NetbiosNodeType { get; private set; } = null!;

        [Output("ntpServers")]
        public Output<string> NtpServers { get; private set; } = null!;

        /// <summary>
        /// The ID of the AWS account that owns the DHCP options set.
        /// </summary>
        [Output("ownerId")]
        public Output<string> OwnerId { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultVpcDhcpOptions resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultVpcDhcpOptions(string name, DefaultVpcDhcpOptionsArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions", name, args ?? new DefaultVpcDhcpOptionsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultVpcDhcpOptions(string name, Input<string> id, DefaultVpcDhcpOptionsState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultVpcDhcpOptions resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultVpcDhcpOptions Get(string name, Input<string> id, DefaultVpcDhcpOptionsState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultVpcDhcpOptions(name, id, state, options);
        }
    }

    public sealed class DefaultVpcDhcpOptionsArgs : Pulumi.ResourceArgs
    {
        [Input("netbiosNameServers")]
        private InputList<string>? _netbiosNameServers;

        /// <summary>
        /// List of NETBIOS name servers.
        /// </summary>
        public InputList<string> NetbiosNameServers
        {
            get => _netbiosNameServers ?? (_netbiosNameServers = new InputList<string>());
            set => _netbiosNameServers = value;
        }

        /// <summary>
        /// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
        /// </summary>
        [Input("netbiosNodeType")]
        public Input<string>? NetbiosNodeType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DefaultVpcDhcpOptionsArgs()
        {
        }
    }

    public sealed class DefaultVpcDhcpOptionsState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the DHCP Options Set.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("domainNameServers")]
        public Input<string>? DomainNameServers { get; set; }

        [Input("netbiosNameServers")]
        private InputList<string>? _netbiosNameServers;

        /// <summary>
        /// List of NETBIOS name servers.
        /// </summary>
        public InputList<string> NetbiosNameServers
        {
            get => _netbiosNameServers ?? (_netbiosNameServers = new InputList<string>());
            set => _netbiosNameServers = value;
        }

        /// <summary>
        /// The NetBIOS node type (1, 2, 4, or 8). AWS recommends to specify 2 since broadcast and multicast are not supported in their network. For more information about these node types, see [RFC 2132](http://www.ietf.org/rfc/rfc2132.txt).
        /// </summary>
        [Input("netbiosNodeType")]
        public Input<string>? NetbiosNodeType { get; set; }

        [Input("ntpServers")]
        public Input<string>? NtpServers { get; set; }

        /// <summary>
        /// The ID of the AWS account that owns the DHCP options set.
        /// </summary>
        [Input("ownerId")]
        public Input<string>? OwnerId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DefaultVpcDhcpOptionsState()
        {
        }
    }
}
