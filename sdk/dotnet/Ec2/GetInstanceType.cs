// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetInstanceType
    {
        public static Task<GetInstanceTypeResult> InvokeAsync(GetInstanceTypeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceTypeResult>("aws:ec2/getInstanceType:getInstanceType", args ?? new GetInstanceTypeArgs(), options.WithDefaults());

        public static Output<GetInstanceTypeResult> Invoke(GetInstanceTypeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceTypeResult>("aws:ec2/getInstanceType:getInstanceType", args ?? new GetInstanceTypeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceTypeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceType", required: true)]
        public string InstanceType { get; set; } = null!;

        public GetInstanceTypeArgs()
        {
        }
        public static new GetInstanceTypeArgs Empty => new GetInstanceTypeArgs();
    }

    public sealed class GetInstanceTypeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        public GetInstanceTypeInvokeArgs()
        {
        }
        public static new GetInstanceTypeInvokeArgs Empty => new GetInstanceTypeInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceTypeResult
    {
        public readonly bool AutoRecoverySupported;
        public readonly bool BareMetal;
        public readonly bool BurstablePerformanceSupported;
        public readonly bool CurrentGeneration;
        public readonly bool DedicatedHostsSupported;
        public readonly int DefaultCores;
        public readonly int DefaultThreadsPerCore;
        public readonly int DefaultVcpus;
        public readonly string EbsEncryptionSupport;
        public readonly string EbsNvmeSupport;
        public readonly string EbsOptimizedSupport;
        public readonly int EbsPerformanceBaselineBandwidth;
        public readonly int EbsPerformanceBaselineIops;
        public readonly double EbsPerformanceBaselineThroughput;
        public readonly int EbsPerformanceMaximumBandwidth;
        public readonly int EbsPerformanceMaximumIops;
        public readonly double EbsPerformanceMaximumThroughput;
        public readonly bool EfaSupported;
        public readonly string EnaSupport;
        public readonly bool EncryptionInTransitSupported;
        public readonly ImmutableArray<Outputs.GetInstanceTypeFpgaResult> Fpgas;
        public readonly bool FreeTierEligible;
        public readonly ImmutableArray<Outputs.GetInstanceTypeGpusResult> Gpuses;
        public readonly bool HibernationSupported;
        public readonly string Hypervisor;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetInstanceTypeInferenceAcceleratorResult> InferenceAccelerators;
        public readonly ImmutableArray<Outputs.GetInstanceTypeInstanceDiskResult> InstanceDisks;
        public readonly bool InstanceStorageSupported;
        public readonly string InstanceType;
        public readonly bool Ipv6Supported;
        public readonly int MaximumIpv4AddressesPerInterface;
        public readonly int MaximumIpv6AddressesPerInterface;
        public readonly int MaximumNetworkInterfaces;
        public readonly int MemorySize;
        public readonly string NetworkPerformance;
        public readonly ImmutableArray<string> SupportedArchitectures;
        public readonly ImmutableArray<string> SupportedPlacementStrategies;
        public readonly ImmutableArray<string> SupportedRootDeviceTypes;
        public readonly ImmutableArray<string> SupportedUsagesClasses;
        public readonly ImmutableArray<string> SupportedVirtualizationTypes;
        public readonly double SustainedClockSpeed;
        public readonly int TotalFpgaMemory;
        public readonly int TotalGpuMemory;
        public readonly int TotalInstanceStorage;
        public readonly ImmutableArray<int> ValidCores;
        public readonly ImmutableArray<int> ValidThreadsPerCores;

        [OutputConstructor]
        private GetInstanceTypeResult(
            bool autoRecoverySupported,

            bool bareMetal,

            bool burstablePerformanceSupported,

            bool currentGeneration,

            bool dedicatedHostsSupported,

            int defaultCores,

            int defaultThreadsPerCore,

            int defaultVcpus,

            string ebsEncryptionSupport,

            string ebsNvmeSupport,

            string ebsOptimizedSupport,

            int ebsPerformanceBaselineBandwidth,

            int ebsPerformanceBaselineIops,

            double ebsPerformanceBaselineThroughput,

            int ebsPerformanceMaximumBandwidth,

            int ebsPerformanceMaximumIops,

            double ebsPerformanceMaximumThroughput,

            bool efaSupported,

            string enaSupport,

            bool encryptionInTransitSupported,

            ImmutableArray<Outputs.GetInstanceTypeFpgaResult> fpgas,

            bool freeTierEligible,

            ImmutableArray<Outputs.GetInstanceTypeGpusResult> gpuses,

            bool hibernationSupported,

            string hypervisor,

            string id,

            ImmutableArray<Outputs.GetInstanceTypeInferenceAcceleratorResult> inferenceAccelerators,

            ImmutableArray<Outputs.GetInstanceTypeInstanceDiskResult> instanceDisks,

            bool instanceStorageSupported,

            string instanceType,

            bool ipv6Supported,

            int maximumIpv4AddressesPerInterface,

            int maximumIpv6AddressesPerInterface,

            int maximumNetworkInterfaces,

            int memorySize,

            string networkPerformance,

            ImmutableArray<string> supportedArchitectures,

            ImmutableArray<string> supportedPlacementStrategies,

            ImmutableArray<string> supportedRootDeviceTypes,

            ImmutableArray<string> supportedUsagesClasses,

            ImmutableArray<string> supportedVirtualizationTypes,

            double sustainedClockSpeed,

            int totalFpgaMemory,

            int totalGpuMemory,

            int totalInstanceStorage,

            ImmutableArray<int> validCores,

            ImmutableArray<int> validThreadsPerCores)
        {
            AutoRecoverySupported = autoRecoverySupported;
            BareMetal = bareMetal;
            BurstablePerformanceSupported = burstablePerformanceSupported;
            CurrentGeneration = currentGeneration;
            DedicatedHostsSupported = dedicatedHostsSupported;
            DefaultCores = defaultCores;
            DefaultThreadsPerCore = defaultThreadsPerCore;
            DefaultVcpus = defaultVcpus;
            EbsEncryptionSupport = ebsEncryptionSupport;
            EbsNvmeSupport = ebsNvmeSupport;
            EbsOptimizedSupport = ebsOptimizedSupport;
            EbsPerformanceBaselineBandwidth = ebsPerformanceBaselineBandwidth;
            EbsPerformanceBaselineIops = ebsPerformanceBaselineIops;
            EbsPerformanceBaselineThroughput = ebsPerformanceBaselineThroughput;
            EbsPerformanceMaximumBandwidth = ebsPerformanceMaximumBandwidth;
            EbsPerformanceMaximumIops = ebsPerformanceMaximumIops;
            EbsPerformanceMaximumThroughput = ebsPerformanceMaximumThroughput;
            EfaSupported = efaSupported;
            EnaSupport = enaSupport;
            EncryptionInTransitSupported = encryptionInTransitSupported;
            Fpgas = fpgas;
            FreeTierEligible = freeTierEligible;
            Gpuses = gpuses;
            HibernationSupported = hibernationSupported;
            Hypervisor = hypervisor;
            Id = id;
            InferenceAccelerators = inferenceAccelerators;
            InstanceDisks = instanceDisks;
            InstanceStorageSupported = instanceStorageSupported;
            InstanceType = instanceType;
            Ipv6Supported = ipv6Supported;
            MaximumIpv4AddressesPerInterface = maximumIpv4AddressesPerInterface;
            MaximumIpv6AddressesPerInterface = maximumIpv6AddressesPerInterface;
            MaximumNetworkInterfaces = maximumNetworkInterfaces;
            MemorySize = memorySize;
            NetworkPerformance = networkPerformance;
            SupportedArchitectures = supportedArchitectures;
            SupportedPlacementStrategies = supportedPlacementStrategies;
            SupportedRootDeviceTypes = supportedRootDeviceTypes;
            SupportedUsagesClasses = supportedUsagesClasses;
            SupportedVirtualizationTypes = supportedVirtualizationTypes;
            SustainedClockSpeed = sustainedClockSpeed;
            TotalFpgaMemory = totalFpgaMemory;
            TotalGpuMemory = totalGpuMemory;
            TotalInstanceStorage = totalInstanceStorage;
            ValidCores = validCores;
            ValidThreadsPerCores = validThreadsPerCores;
        }
    }
}
