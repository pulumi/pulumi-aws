// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    [AwsResourceType("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter")]
    public partial class VpcPeeringConnectionAccepter : global::Pulumi.CustomResource
    {
        [Output("acceptStatus")]
        public Output<string> AcceptStatus { get; private set; } = null!;

        [Output("accepter")]
        public Output<Outputs.VpcPeeringConnectionAccepterAccepter> Accepter { get; private set; } = null!;

        [Output("autoAccept")]
        public Output<bool?> AutoAccept { get; private set; } = null!;

        [Output("peerOwnerId")]
        public Output<string> PeerOwnerId { get; private set; } = null!;

        [Output("peerRegion")]
        public Output<string> PeerRegion { get; private set; } = null!;

        [Output("peerVpcId")]
        public Output<string> PeerVpcId { get; private set; } = null!;

        [Output("requester")]
        public Output<Outputs.VpcPeeringConnectionAccepterRequester> Requester { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        [Output("vpcPeeringConnectionId")]
        public Output<string> VpcPeeringConnectionId { get; private set; } = null!;


        /// <summary>
        /// Create a VpcPeeringConnectionAccepter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpcPeeringConnectionAccepter(string name, VpcPeeringConnectionAccepterArgs args, CustomResourceOptions? options = null)
            : base("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, args ?? new VpcPeeringConnectionAccepterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpcPeeringConnectionAccepter(string name, Input<string> id, VpcPeeringConnectionAccepterState? state = null, CustomResourceOptions? options = null)
            : base("aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpcPeeringConnectionAccepter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpcPeeringConnectionAccepter Get(string name, Input<string> id, VpcPeeringConnectionAccepterState? state = null, CustomResourceOptions? options = null)
        {
            return new VpcPeeringConnectionAccepter(name, id, state, options);
        }
    }

    public sealed class VpcPeeringConnectionAccepterArgs : global::Pulumi.ResourceArgs
    {
        [Input("accepter")]
        public Input<Inputs.VpcPeeringConnectionAccepterAccepterArgs>? Accepter { get; set; }

        [Input("autoAccept")]
        public Input<bool>? AutoAccept { get; set; }

        [Input("requester")]
        public Input<Inputs.VpcPeeringConnectionAccepterRequesterArgs>? Requester { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("vpcPeeringConnectionId", required: true)]
        public Input<string> VpcPeeringConnectionId { get; set; } = null!;

        public VpcPeeringConnectionAccepterArgs()
        {
        }
        public static new VpcPeeringConnectionAccepterArgs Empty => new VpcPeeringConnectionAccepterArgs();
    }

    public sealed class VpcPeeringConnectionAccepterState : global::Pulumi.ResourceArgs
    {
        [Input("acceptStatus")]
        public Input<string>? AcceptStatus { get; set; }

        [Input("accepter")]
        public Input<Inputs.VpcPeeringConnectionAccepterAccepterGetArgs>? Accepter { get; set; }

        [Input("autoAccept")]
        public Input<bool>? AutoAccept { get; set; }

        [Input("peerOwnerId")]
        public Input<string>? PeerOwnerId { get; set; }

        [Input("peerRegion")]
        public Input<string>? PeerRegion { get; set; }

        [Input("peerVpcId")]
        public Input<string>? PeerVpcId { get; set; }

        [Input("requester")]
        public Input<Inputs.VpcPeeringConnectionAccepterRequesterGetArgs>? Requester { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("vpcPeeringConnectionId")]
        public Input<string>? VpcPeeringConnectionId { get; set; }

        public VpcPeeringConnectionAccepterState()
        {
        }
        public static new VpcPeeringConnectionAccepterState Empty => new VpcPeeringConnectionAccepterState();
    }
}
