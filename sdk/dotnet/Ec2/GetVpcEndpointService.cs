// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpcEndpointService
    {
        /// <summary>
        /// The VPC Endpoint Service data source details about a specific service that
        /// can be specified when creating a VPC endpoint within the region configured in the provider.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### AWS Service
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const s3 = aws.ec2.getVpcEndpointService({
        ///     service: "s3",
        ///     serviceType: "Gateway",
        /// });
        /// // Create a VPC
        /// const foo = new aws.ec2.Vpc("foo", {cidrBlock: "10.0.0.0/16"});
        /// // Create a VPC endpoint
        /// const ep = new aws.ec2.VpcEndpoint("ep", {
        ///     vpcId: foo.id,
        ///     serviceName: s3.then(s3 =&gt; s3.serviceName),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// s3 = aws.ec2.get_vpc_endpoint_service(service="s3",
        ///     service_type="Gateway")
        /// # Create a VPC
        /// foo = aws.ec2.Vpc("foo", cidr_block="10.0.0.0/16")
        /// # Create a VPC endpoint
        /// ep = aws.ec2.VpcEndpoint("ep",
        ///     vpc_id=foo.id,
        ///     service_name=s3.service_name)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var s3 = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Service = "s3",
        ///         ServiceType = "Gateway",
        ///     });
        /// 
        ///     // Create a VPC
        ///     var foo = new Aws.Ec2.Vpc("foo", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     // Create a VPC endpoint
        ///     var ep = new Aws.Ec2.VpcEndpoint("ep", new()
        ///     {
        ///         VpcId = foo.Id,
        ///         ServiceName = s3.Apply(getVpcEndpointServiceResult =&gt; getVpcEndpointServiceResult.ServiceName),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		s3, err := ec2.LookupVpcEndpointService(ctx, &amp;ec2.LookupVpcEndpointServiceArgs{
        /// 			Service:     pulumi.StringRef("s3"),
        /// 			ServiceType: pulumi.StringRef("Gateway"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		foo, err := ec2.NewVpc(ctx, "foo", &amp;ec2.VpcArgs{
        /// 			CidrBlock: pulumi.String("10.0.0.0/16"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewVpcEndpoint(ctx, "ep", &amp;ec2.VpcEndpointArgs{
        /// 			VpcId:       foo.ID(),
        /// 			ServiceName: *pulumi.String(s3.ServiceName),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetVpcEndpointServiceArgs;
        /// import com.pulumi.aws.ec2.Vpc;
        /// import com.pulumi.aws.ec2.VpcArgs;
        /// import com.pulumi.aws.ec2.VpcEndpoint;
        /// import com.pulumi.aws.ec2.VpcEndpointArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var s3 = Ec2Functions.getVpcEndpointService(GetVpcEndpointServiceArgs.builder()
        ///             .service("s3")
        ///             .serviceType("Gateway")
        ///             .build());
        /// 
        ///         var foo = new Vpc("foo", VpcArgs.builder()        
        ///             .cidrBlock("10.0.0.0/16")
        ///             .build());
        /// 
        ///         var ep = new VpcEndpoint("ep", VpcEndpointArgs.builder()        
        ///             .vpcId(foo.id())
        ///             .serviceName(s3.applyValue(getVpcEndpointServiceResult -&gt; getVpcEndpointServiceResult.serviceName()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   # Create a VPC
        ///   foo:
        ///     type: aws:ec2:Vpc
        ///     properties:
        ///       cidrBlock: 10.0.0.0/16
        ///   # Create a VPC endpoint
        ///   ep:
        ///     type: aws:ec2:VpcEndpoint
        ///     properties:
        ///       vpcId: ${foo.id}
        ///       serviceName: ${s3.serviceName}
        /// variables:
        ///   s3:
        ///     fn::invoke:
        ///       Function: aws:ec2:getVpcEndpointService
        ///       Arguments:
        ///         service: s3
        ///         serviceType: Gateway
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Non-AWS Service
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const custome = aws.ec2.getVpcEndpointService({
        ///     serviceName: "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// custome = aws.ec2.get_vpc_endpoint_service(service_name="com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custome = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         ServiceName = "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupVpcEndpointService(ctx, &amp;ec2.LookupVpcEndpointServiceArgs{
        /// 			ServiceName: pulumi.StringRef("com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetVpcEndpointServiceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var custome = Ec2Functions.getVpcEndpointService(GetVpcEndpointServiceArgs.builder()
        ///             .serviceName("com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   custome:
        ///     fn::invoke:
        ///       Function: aws:ec2:getVpcEndpointService
        ///       Arguments:
        ///         serviceName: com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const test = aws.ec2.getVpcEndpointService({
        ///     filters: [{
        ///         name: "service-name",
        ///         values: ["some-service"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test = aws.ec2.get_vpc_endpoint_service(filters=[aws.ec2.GetVpcEndpointServiceFilterArgs(
        ///     name="service-name",
        ///     values=["some-service"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpcEndpointServiceFilterInputArgs
        ///             {
        ///                 Name = "service-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-service",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupVpcEndpointService(ctx, &amp;ec2.LookupVpcEndpointServiceArgs{
        /// 			Filters: []ec2.GetVpcEndpointServiceFilter{
        /// 				{
        /// 					Name: "service-name",
        /// 					Values: []string{
        /// 						"some-service",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetVpcEndpointServiceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var test = Ec2Functions.getVpcEndpointService(GetVpcEndpointServiceArgs.builder()
        ///             .filters(GetVpcEndpointServiceFilterArgs.builder()
        ///                 .name("service-name")
        ///                 .values("some-service")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:ec2:getVpcEndpointService
        ///       Arguments:
        ///         filters:
        ///           - name: service-name
        ///             values:
        ///               - some-service
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVpcEndpointServiceResult> InvokeAsync(GetVpcEndpointServiceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcEndpointServiceResult>("aws:ec2/getVpcEndpointService:getVpcEndpointService", args ?? new GetVpcEndpointServiceArgs(), options.WithDefaults());

        /// <summary>
        /// The VPC Endpoint Service data source details about a specific service that
        /// can be specified when creating a VPC endpoint within the region configured in the provider.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### AWS Service
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const s3 = aws.ec2.getVpcEndpointService({
        ///     service: "s3",
        ///     serviceType: "Gateway",
        /// });
        /// // Create a VPC
        /// const foo = new aws.ec2.Vpc("foo", {cidrBlock: "10.0.0.0/16"});
        /// // Create a VPC endpoint
        /// const ep = new aws.ec2.VpcEndpoint("ep", {
        ///     vpcId: foo.id,
        ///     serviceName: s3.then(s3 =&gt; s3.serviceName),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// s3 = aws.ec2.get_vpc_endpoint_service(service="s3",
        ///     service_type="Gateway")
        /// # Create a VPC
        /// foo = aws.ec2.Vpc("foo", cidr_block="10.0.0.0/16")
        /// # Create a VPC endpoint
        /// ep = aws.ec2.VpcEndpoint("ep",
        ///     vpc_id=foo.id,
        ///     service_name=s3.service_name)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var s3 = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Service = "s3",
        ///         ServiceType = "Gateway",
        ///     });
        /// 
        ///     // Create a VPC
        ///     var foo = new Aws.Ec2.Vpc("foo", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     // Create a VPC endpoint
        ///     var ep = new Aws.Ec2.VpcEndpoint("ep", new()
        ///     {
        ///         VpcId = foo.Id,
        ///         ServiceName = s3.Apply(getVpcEndpointServiceResult =&gt; getVpcEndpointServiceResult.ServiceName),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		s3, err := ec2.LookupVpcEndpointService(ctx, &amp;ec2.LookupVpcEndpointServiceArgs{
        /// 			Service:     pulumi.StringRef("s3"),
        /// 			ServiceType: pulumi.StringRef("Gateway"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		foo, err := ec2.NewVpc(ctx, "foo", &amp;ec2.VpcArgs{
        /// 			CidrBlock: pulumi.String("10.0.0.0/16"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewVpcEndpoint(ctx, "ep", &amp;ec2.VpcEndpointArgs{
        /// 			VpcId:       foo.ID(),
        /// 			ServiceName: *pulumi.String(s3.ServiceName),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetVpcEndpointServiceArgs;
        /// import com.pulumi.aws.ec2.Vpc;
        /// import com.pulumi.aws.ec2.VpcArgs;
        /// import com.pulumi.aws.ec2.VpcEndpoint;
        /// import com.pulumi.aws.ec2.VpcEndpointArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var s3 = Ec2Functions.getVpcEndpointService(GetVpcEndpointServiceArgs.builder()
        ///             .service("s3")
        ///             .serviceType("Gateway")
        ///             .build());
        /// 
        ///         var foo = new Vpc("foo", VpcArgs.builder()        
        ///             .cidrBlock("10.0.0.0/16")
        ///             .build());
        /// 
        ///         var ep = new VpcEndpoint("ep", VpcEndpointArgs.builder()        
        ///             .vpcId(foo.id())
        ///             .serviceName(s3.applyValue(getVpcEndpointServiceResult -&gt; getVpcEndpointServiceResult.serviceName()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   # Create a VPC
        ///   foo:
        ///     type: aws:ec2:Vpc
        ///     properties:
        ///       cidrBlock: 10.0.0.0/16
        ///   # Create a VPC endpoint
        ///   ep:
        ///     type: aws:ec2:VpcEndpoint
        ///     properties:
        ///       vpcId: ${foo.id}
        ///       serviceName: ${s3.serviceName}
        /// variables:
        ///   s3:
        ///     fn::invoke:
        ///       Function: aws:ec2:getVpcEndpointService
        ///       Arguments:
        ///         service: s3
        ///         serviceType: Gateway
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Non-AWS Service
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const custome = aws.ec2.getVpcEndpointService({
        ///     serviceName: "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// custome = aws.ec2.get_vpc_endpoint_service(service_name="com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custome = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         ServiceName = "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupVpcEndpointService(ctx, &amp;ec2.LookupVpcEndpointServiceArgs{
        /// 			ServiceName: pulumi.StringRef("com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetVpcEndpointServiceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var custome = Ec2Functions.getVpcEndpointService(GetVpcEndpointServiceArgs.builder()
        ///             .serviceName("com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   custome:
        ///     fn::invoke:
        ///       Function: aws:ec2:getVpcEndpointService
        ///       Arguments:
        ///         serviceName: com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const test = aws.ec2.getVpcEndpointService({
        ///     filters: [{
        ///         name: "service-name",
        ///         values: ["some-service"],
        ///     }],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// test = aws.ec2.get_vpc_endpoint_service(filters=[aws.ec2.GetVpcEndpointServiceFilterArgs(
        ///     name="service-name",
        ///     values=["some-service"],
        /// )])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpcEndpointServiceFilterInputArgs
        ///             {
        ///                 Name = "service-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-service",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ec2.LookupVpcEndpointService(ctx, &amp;ec2.LookupVpcEndpointServiceArgs{
        /// 			Filters: []ec2.GetVpcEndpointServiceFilter{
        /// 				{
        /// 					Name: "service-name",
        /// 					Values: []string{
        /// 						"some-service",
        /// 					},
        /// 				},
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetVpcEndpointServiceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var test = Ec2Functions.getVpcEndpointService(GetVpcEndpointServiceArgs.builder()
        ///             .filters(GetVpcEndpointServiceFilterArgs.builder()
        ///                 .name("service-name")
        ///                 .values("some-service")
        ///                 .build())
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   test:
        ///     fn::invoke:
        ///       Function: aws:ec2:getVpcEndpointService
        ///       Arguments:
        ///         filters:
        ///           - name: service-name
        ///             values:
        ///               - some-service
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVpcEndpointServiceResult> Invoke(GetVpcEndpointServiceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcEndpointServiceResult>("aws:ec2/getVpcEndpointService:getVpcEndpointService", args ?? new GetVpcEndpointServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcEndpointServiceArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpcEndpointServiceFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetVpcEndpointServiceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcEndpointServiceFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Common name of an AWS service (e.g., `s3`).
        /// </summary>
        [Input("service")]
        public string? Service { get; set; }

        /// <summary>
        /// Service name that is specified when creating a VPC endpoint. For AWS services the service name is usually in the form `com.amazonaws.&lt;region&gt;.&lt;service&gt;` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.&lt;region&gt;.notebook`).
        /// </summary>
        [Input("serviceName")]
        public string? ServiceName { get; set; }

        /// <summary>
        /// Service type, `Gateway` or `Interface`.
        /// </summary>
        [Input("serviceType")]
        public string? ServiceType { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired VPC Endpoint Service.
        /// 
        /// &gt; **NOTE:** Specifying `service` will not work for non-AWS services or AWS services that don't follow the standard `service_name` pattern of `com.amazonaws.&lt;region&gt;.&lt;service&gt;`.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetVpcEndpointServiceArgs()
        {
        }
        public static new GetVpcEndpointServiceArgs Empty => new GetVpcEndpointServiceArgs();
    }

    public sealed class GetVpcEndpointServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVpcEndpointServiceFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public InputList<Inputs.GetVpcEndpointServiceFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcEndpointServiceFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Common name of an AWS service (e.g., `s3`).
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// Service name that is specified when creating a VPC endpoint. For AWS services the service name is usually in the form `com.amazonaws.&lt;region&gt;.&lt;service&gt;` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.&lt;region&gt;.notebook`).
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Service type, `Gateway` or `Interface`.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired VPC Endpoint Service.
        /// 
        /// &gt; **NOTE:** Specifying `service` will not work for non-AWS services or AWS services that don't follow the standard `service_name` pattern of `com.amazonaws.&lt;region&gt;.&lt;service&gt;`.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetVpcEndpointServiceInvokeArgs()
        {
        }
        public static new GetVpcEndpointServiceInvokeArgs Empty => new GetVpcEndpointServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcEndpointServiceResult
    {
        /// <summary>
        /// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
        /// </summary>
        public readonly bool AcceptanceRequired;
        /// <summary>
        /// ARN of the VPC endpoint service.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Availability Zones in which the service is available.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// The DNS names for the service.
        /// </summary>
        public readonly ImmutableArray<string> BaseEndpointDnsNames;
        public readonly ImmutableArray<Outputs.GetVpcEndpointServiceFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether or not the service manages its VPC endpoints - `true` or `false`.
        /// </summary>
        public readonly bool ManagesVpcEndpoints;
        /// <summary>
        /// AWS account ID of the service owner or `amazon`.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Private DNS name for the service.
        /// </summary>
        public readonly string PrivateDnsName;
        public readonly string? Service;
        /// <summary>
        /// ID of the endpoint service.
        /// </summary>
        public readonly string ServiceId;
        public readonly string ServiceName;
        public readonly string ServiceType;
        /// <summary>
        /// The supported IP address types.
        /// </summary>
        public readonly ImmutableArray<string> SupportedIpAddressTypes;
        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Whether or not the service supports endpoint policies - `true` or `false`.
        /// </summary>
        public readonly bool VpcEndpointPolicySupported;

        [OutputConstructor]
        private GetVpcEndpointServiceResult(
            bool acceptanceRequired,

            string arn,

            ImmutableArray<string> availabilityZones,

            ImmutableArray<string> baseEndpointDnsNames,

            ImmutableArray<Outputs.GetVpcEndpointServiceFilterResult> filters,

            string id,

            bool managesVpcEndpoints,

            string owner,

            string privateDnsName,

            string? service,

            string serviceId,

            string serviceName,

            string serviceType,

            ImmutableArray<string> supportedIpAddressTypes,

            ImmutableDictionary<string, string> tags,

            bool vpcEndpointPolicySupported)
        {
            AcceptanceRequired = acceptanceRequired;
            Arn = arn;
            AvailabilityZones = availabilityZones;
            BaseEndpointDnsNames = baseEndpointDnsNames;
            Filters = filters;
            Id = id;
            ManagesVpcEndpoints = managesVpcEndpoints;
            Owner = owner;
            PrivateDnsName = privateDnsName;
            Service = service;
            ServiceId = serviceId;
            ServiceName = serviceName;
            ServiceType = serviceType;
            SupportedIpAddressTypes = supportedIpAddressTypes;
            Tags = tags;
            VpcEndpointPolicySupported = vpcEndpointPolicySupported;
        }
    }
}
