// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetVpcEndpointService
    {
        /// <summary>
        /// The VPC Endpoint Service data source details about a specific service that
        /// can be specified when creating a VPC endpoint within the region configured in the provider.
        /// 
        /// ## Example Usage
        /// 
        /// ### AWS Service
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Declare the data source
        ///     var s3 = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Service = "s3",
        ///         ServiceType = "Gateway",
        ///     });
        /// 
        ///     // Create a VPC
        ///     var foo = new Aws.Ec2.Vpc("foo", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     // Create a VPC endpoint
        ///     var ep = new Aws.Ec2.VpcEndpoint("ep", new()
        ///     {
        ///         VpcId = foo.Id,
        ///         ServiceName = s3.Apply(getVpcEndpointServiceResult =&gt; getVpcEndpointServiceResult.ServiceName),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Non-AWS Service
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custome = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         ServiceName = "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpcEndpointServiceFilterInputArgs
        ///             {
        ///                 Name = "service-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-service",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpcEndpointServiceResult> InvokeAsync(GetVpcEndpointServiceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcEndpointServiceResult>("aws:ec2/getVpcEndpointService:getVpcEndpointService", args ?? new GetVpcEndpointServiceArgs(), options.WithDefaults());

        /// <summary>
        /// The VPC Endpoint Service data source details about a specific service that
        /// can be specified when creating a VPC endpoint within the region configured in the provider.
        /// 
        /// ## Example Usage
        /// 
        /// ### AWS Service
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Declare the data source
        ///     var s3 = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Service = "s3",
        ///         ServiceType = "Gateway",
        ///     });
        /// 
        ///     // Create a VPC
        ///     var foo = new Aws.Ec2.Vpc("foo", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     // Create a VPC endpoint
        ///     var ep = new Aws.Ec2.VpcEndpoint("ep", new()
        ///     {
        ///         VpcId = foo.Id,
        ///         ServiceName = s3.Apply(getVpcEndpointServiceResult =&gt; getVpcEndpointServiceResult.ServiceName),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Non-AWS Service
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custome = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         ServiceName = "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpcEndpointServiceFilterInputArgs
        ///             {
        ///                 Name = "service-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-service",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcEndpointServiceResult> Invoke(GetVpcEndpointServiceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcEndpointServiceResult>("aws:ec2/getVpcEndpointService:getVpcEndpointService", args ?? new GetVpcEndpointServiceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// The VPC Endpoint Service data source details about a specific service that
        /// can be specified when creating a VPC endpoint within the region configured in the provider.
        /// 
        /// ## Example Usage
        /// 
        /// ### AWS Service
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // Declare the data source
        ///     var s3 = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Service = "s3",
        ///         ServiceType = "Gateway",
        ///     });
        /// 
        ///     // Create a VPC
        ///     var foo = new Aws.Ec2.Vpc("foo", new()
        ///     {
        ///         CidrBlock = "10.0.0.0/16",
        ///     });
        /// 
        ///     // Create a VPC endpoint
        ///     var ep = new Aws.Ec2.VpcEndpoint("ep", new()
        ///     {
        ///         VpcId = foo.Id,
        ///         ServiceName = s3.Apply(getVpcEndpointServiceResult =&gt; getVpcEndpointServiceResult.ServiceName),
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Non-AWS Service
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var custome = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         ServiceName = "com.amazonaws.vpce.us-west-2.vpce-svc-0e87519c997c63cd8",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Aws.Ec2.GetVpcEndpointService.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ec2.Inputs.GetVpcEndpointServiceFilterInputArgs
        ///             {
        ///                 Name = "service-name",
        ///                 Values = new[]
        ///                 {
        ///                     "some-service",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcEndpointServiceResult> Invoke(GetVpcEndpointServiceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcEndpointServiceResult>("aws:ec2/getVpcEndpointService:getVpcEndpointService", args ?? new GetVpcEndpointServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcEndpointServiceArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVpcEndpointServiceFilterArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public List<Inputs.GetVpcEndpointServiceFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVpcEndpointServiceFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Common name of an AWS service (e.g., `s3`).
        /// </summary>
        [Input("service")]
        public string? Service { get; set; }

        /// <summary>
        /// Service name that is specified when creating a VPC endpoint. For AWS services the service name is usually in the form `com.amazonaws.&lt;region&gt;.&lt;service&gt;` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.&lt;region&gt;.notebook`).
        /// </summary>
        [Input("serviceName")]
        public string? ServiceName { get; set; }

        [Input("serviceRegions")]
        private List<string>? _serviceRegions;

        /// <summary>
        /// AWS regions in which to look for services.
        /// </summary>
        public List<string> ServiceRegions
        {
            get => _serviceRegions ?? (_serviceRegions = new List<string>());
            set => _serviceRegions = value;
        }

        /// <summary>
        /// Service type, `Gateway` or `Interface`.
        /// </summary>
        [Input("serviceType")]
        public string? ServiceType { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired VPC Endpoint Service.
        /// 
        /// &gt; **NOTE:** Specifying `service` will not work for non-AWS services or AWS services that don't follow the standard `service_name` pattern of `com.amazonaws.&lt;region&gt;.&lt;service&gt;`.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetVpcEndpointServiceArgs()
        {
        }
        public static new GetVpcEndpointServiceArgs Empty => new GetVpcEndpointServiceArgs();
    }

    public sealed class GetVpcEndpointServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVpcEndpointServiceFilterInputArgs>? _filters;

        /// <summary>
        /// Configuration block(s) for filtering. Detailed below.
        /// </summary>
        public InputList<Inputs.GetVpcEndpointServiceFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVpcEndpointServiceFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Common name of an AWS service (e.g., `s3`).
        /// </summary>
        [Input("service")]
        public Input<string>? Service { get; set; }

        /// <summary>
        /// Service name that is specified when creating a VPC endpoint. For AWS services the service name is usually in the form `com.amazonaws.&lt;region&gt;.&lt;service&gt;` (the SageMaker Notebook service is an exception to this rule, the service name is in the form `aws.sagemaker.&lt;region&gt;.notebook`).
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("serviceRegions")]
        private InputList<string>? _serviceRegions;

        /// <summary>
        /// AWS regions in which to look for services.
        /// </summary>
        public InputList<string> ServiceRegions
        {
            get => _serviceRegions ?? (_serviceRegions = new InputList<string>());
            set => _serviceRegions = value;
        }

        /// <summary>
        /// Service type, `Gateway` or `Interface`.
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match a pair on the desired VPC Endpoint Service.
        /// 
        /// &gt; **NOTE:** Specifying `service` will not work for non-AWS services or AWS services that don't follow the standard `service_name` pattern of `com.amazonaws.&lt;region&gt;.&lt;service&gt;`.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetVpcEndpointServiceInvokeArgs()
        {
        }
        public static new GetVpcEndpointServiceInvokeArgs Empty => new GetVpcEndpointServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcEndpointServiceResult
    {
        /// <summary>
        /// Whether or not VPC endpoint connection requests to the service must be accepted by the service owner - `true` or `false`.
        /// </summary>
        public readonly bool AcceptanceRequired;
        /// <summary>
        /// ARN of the VPC endpoint service.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Availability Zones in which the service is available. Not available for endpoint services in other regions.
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// The DNS names for the service.
        /// </summary>
        public readonly ImmutableArray<string> BaseEndpointDnsNames;
        public readonly ImmutableArray<Outputs.GetVpcEndpointServiceFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Whether or not the service manages its VPC endpoints - `true` or `false`.
        /// </summary>
        public readonly bool ManagesVpcEndpoints;
        /// <summary>
        /// AWS account ID of the service owner or `amazon`.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Private DNS name for the service.
        /// </summary>
        public readonly string PrivateDnsName;
        /// <summary>
        /// Private DNS names assigned to the VPC endpoint service.
        /// </summary>
        public readonly ImmutableArray<string> PrivateDnsNames;
        /// <summary>
        /// Region of the endpoint service.
        /// </summary>
        public readonly string Region;
        public readonly string? Service;
        /// <summary>
        /// ID of the endpoint service.
        /// </summary>
        public readonly string ServiceId;
        public readonly string ServiceName;
        public readonly ImmutableArray<string> ServiceRegions;
        public readonly string ServiceType;
        /// <summary>
        /// The supported IP address types.
        /// </summary>
        public readonly ImmutableArray<string> SupportedIpAddressTypes;
        /// <summary>
        /// Map of tags assigned to the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Whether or not the service supports endpoint policies - `true` or `false`.
        /// </summary>
        public readonly bool VpcEndpointPolicySupported;

        [OutputConstructor]
        private GetVpcEndpointServiceResult(
            bool acceptanceRequired,

            string arn,

            ImmutableArray<string> availabilityZones,

            ImmutableArray<string> baseEndpointDnsNames,

            ImmutableArray<Outputs.GetVpcEndpointServiceFilterResult> filters,

            string id,

            bool managesVpcEndpoints,

            string owner,

            string privateDnsName,

            ImmutableArray<string> privateDnsNames,

            string region,

            string? service,

            string serviceId,

            string serviceName,

            ImmutableArray<string> serviceRegions,

            string serviceType,

            ImmutableArray<string> supportedIpAddressTypes,

            ImmutableDictionary<string, string> tags,

            bool vpcEndpointPolicySupported)
        {
            AcceptanceRequired = acceptanceRequired;
            Arn = arn;
            AvailabilityZones = availabilityZones;
            BaseEndpointDnsNames = baseEndpointDnsNames;
            Filters = filters;
            Id = id;
            ManagesVpcEndpoints = managesVpcEndpoints;
            Owner = owner;
            PrivateDnsName = privateDnsName;
            PrivateDnsNames = privateDnsNames;
            Region = region;
            Service = service;
            ServiceId = serviceId;
            ServiceName = serviceName;
            ServiceRegions = serviceRegions;
            ServiceType = serviceType;
            SupportedIpAddressTypes = supportedIpAddressTypes;
            Tags = tags;
            VpcEndpointPolicySupported = vpcEndpointPolicySupported;
        }
    }
}
