// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetSecurityGroup
    {
        /// <summary>
        /// `aws.ec2.SecurityGroup` provides details about a specific Security Group.
        /// 
        /// This resource can prove useful when a module accepts a Security Group id as
        /// an input variable and needs to, for example, determine the id of the
        /// VPC that the security group belongs to.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a Security Group id as a variable
        /// and use this data source to obtain the data necessary to create a subnet.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const securityGroupId = config.requireObject("securityGroupId");
        /// const selected = aws.ec2.getSecurityGroup({
        ///     id: securityGroupId,
        /// });
        /// const subnet = new aws.ec2.Subnet("subnet", {
        ///     vpcId: selected.then(selected =&gt; selected.vpcId),
        ///     cidrBlock: "10.0.1.0/24",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// security_group_id = config.require_object("securityGroupId")
        /// selected = aws.ec2.get_security_group(id=security_group_id)
        /// subnet = aws.ec2.Subnet("subnet",
        ///     vpc_id=selected.vpc_id,
        ///     cidr_block="10.0.1.0/24")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var securityGroupId = config.RequireObject&lt;dynamic&gt;("securityGroupId");
        ///     var selected = Aws.Ec2.GetSecurityGroup.Invoke(new()
        ///     {
        ///         Id = securityGroupId,
        ///     });
        /// 
        ///     var subnet = new Aws.Ec2.Subnet("subnet", new()
        ///     {
        ///         VpcId = selected.Apply(getSecurityGroupResult =&gt; getSecurityGroupResult.VpcId),
        ///         CidrBlock = "10.0.1.0/24",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		securityGroupId := cfg.RequireObject("securityGroupId")
        /// 		selected, err := ec2.LookupSecurityGroup(ctx, &amp;ec2.LookupSecurityGroupArgs{
        /// 			Id: pulumi.StringRef(securityGroupId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewSubnet(ctx, "subnet", &amp;ec2.SubnetArgs{
        /// 			VpcId:     *pulumi.String(selected.VpcId),
        /// 			CidrBlock: pulumi.String("10.0.1.0/24"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetSecurityGroupArgs;
        /// import com.pulumi.aws.ec2.Subnet;
        /// import com.pulumi.aws.ec2.SubnetArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var securityGroupId = config.get("securityGroupId");
        ///         final var selected = Ec2Functions.getSecurityGroup(GetSecurityGroupArgs.builder()
        ///             .id(securityGroupId)
        ///             .build());
        /// 
        ///         var subnet = new Subnet("subnet", SubnetArgs.builder()        
        ///             .vpcId(selected.applyValue(getSecurityGroupResult -&gt; getSecurityGroupResult.vpcId()))
        ///             .cidrBlock("10.0.1.0/24")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   securityGroupId:
        ///     type: dynamic
        /// resources:
        ///   subnet:
        ///     type: aws:ec2:Subnet
        ///     properties:
        ///       vpcId: ${selected.vpcId}
        ///       cidrBlock: 10.0.1.0/24
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getSecurityGroup
        ///       Arguments:
        ///         id: ${securityGroupId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecurityGroupResult> InvokeAsync(GetSecurityGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityGroupResult>("aws:ec2/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ec2.SecurityGroup` provides details about a specific Security Group.
        /// 
        /// This resource can prove useful when a module accepts a Security Group id as
        /// an input variable and needs to, for example, determine the id of the
        /// VPC that the security group belongs to.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might accept a Security Group id as a variable
        /// and use this data source to obtain the data necessary to create a subnet.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const securityGroupId = config.requireObject("securityGroupId");
        /// const selected = aws.ec2.getSecurityGroup({
        ///     id: securityGroupId,
        /// });
        /// const subnet = new aws.ec2.Subnet("subnet", {
        ///     vpcId: selected.then(selected =&gt; selected.vpcId),
        ///     cidrBlock: "10.0.1.0/24",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// security_group_id = config.require_object("securityGroupId")
        /// selected = aws.ec2.get_security_group(id=security_group_id)
        /// subnet = aws.ec2.Subnet("subnet",
        ///     vpc_id=selected.vpc_id,
        ///     cidr_block="10.0.1.0/24")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var securityGroupId = config.RequireObject&lt;dynamic&gt;("securityGroupId");
        ///     var selected = Aws.Ec2.GetSecurityGroup.Invoke(new()
        ///     {
        ///         Id = securityGroupId,
        ///     });
        /// 
        ///     var subnet = new Aws.Ec2.Subnet("subnet", new()
        ///     {
        ///         VpcId = selected.Apply(getSecurityGroupResult =&gt; getSecurityGroupResult.VpcId),
        ///         CidrBlock = "10.0.1.0/24",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		securityGroupId := cfg.RequireObject("securityGroupId")
        /// 		selected, err := ec2.LookupSecurityGroup(ctx, &amp;ec2.LookupSecurityGroupArgs{
        /// 			Id: pulumi.StringRef(securityGroupId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.NewSubnet(ctx, "subnet", &amp;ec2.SubnetArgs{
        /// 			VpcId:     *pulumi.String(selected.VpcId),
        /// 			CidrBlock: pulumi.String("10.0.1.0/24"),
        /// 		})
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetSecurityGroupArgs;
        /// import com.pulumi.aws.ec2.Subnet;
        /// import com.pulumi.aws.ec2.SubnetArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var securityGroupId = config.get("securityGroupId");
        ///         final var selected = Ec2Functions.getSecurityGroup(GetSecurityGroupArgs.builder()
        ///             .id(securityGroupId)
        ///             .build());
        /// 
        ///         var subnet = new Subnet("subnet", SubnetArgs.builder()        
        ///             .vpcId(selected.applyValue(getSecurityGroupResult -&gt; getSecurityGroupResult.vpcId()))
        ///             .cidrBlock("10.0.1.0/24")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   securityGroupId:
        ///     type: dynamic
        /// resources:
        ///   subnet:
        ///     type: aws:ec2:Subnet
        ///     properties:
        ///       vpcId: ${selected.vpcId}
        ///       cidrBlock: 10.0.1.0/24
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getSecurityGroup
        ///       Arguments:
        ///         id: ${securityGroupId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecurityGroupResult> Invoke(GetSecurityGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityGroupResult>("aws:ec2/getSecurityGroup:getSecurityGroup", args ?? new GetSecurityGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSecurityGroupFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetSecurityGroupFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSecurityGroupFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Id of the specific security group to retrieve.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the field to filter by, as defined by
        /// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired security group.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// Id of the VPC that the desired security group belongs to.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetSecurityGroupArgs()
        {
        }
        public static new GetSecurityGroupArgs Empty => new GetSecurityGroupArgs();
    }

    public sealed class GetSecurityGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSecurityGroupFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetSecurityGroupFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSecurityGroupFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Id of the specific security group to retrieve.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the field to filter by, as defined by
        /// [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSecurityGroups.html).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired security group.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Id of the VPC that the desired security group belongs to.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetSecurityGroupInvokeArgs()
        {
        }
        public static new GetSecurityGroupInvokeArgs Empty => new GetSecurityGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityGroupResult
    {
        /// <summary>
        /// Computed ARN of the security group.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Description of the security group.
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetSecurityGroupFilterResult> Filters;
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string VpcId;

        [OutputConstructor]
        private GetSecurityGroupResult(
            string arn,

            string description,

            ImmutableArray<Outputs.GetSecurityGroupFilterResult> filters,

            string id,

            string name,

            ImmutableDictionary<string, string> tags,

            string vpcId)
        {
            Arn = arn;
            Description = description;
            Filters = filters;
            Id = id;
            Name = name;
            Tags = tags;
            VpcId = vpcId;
        }
    }
}
