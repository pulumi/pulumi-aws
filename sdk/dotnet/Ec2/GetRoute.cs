// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetRoute
    {
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("aws:ec2/getRoute:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteResult>("aws:ec2/getRoute:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : global::Pulumi.InvokeArgs
    {
        [Input("carrierGatewayId")]
        public string? CarrierGatewayId { get; set; }

        [Input("coreNetworkArn")]
        public string? CoreNetworkArn { get; set; }

        [Input("destinationCidrBlock")]
        public string? DestinationCidrBlock { get; set; }

        [Input("destinationIpv6CidrBlock")]
        public string? DestinationIpv6CidrBlock { get; set; }

        [Input("destinationPrefixListId")]
        public string? DestinationPrefixListId { get; set; }

        [Input("egressOnlyGatewayId")]
        public string? EgressOnlyGatewayId { get; set; }

        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        [Input("instanceId")]
        public string? InstanceId { get; set; }

        [Input("localGatewayId")]
        public string? LocalGatewayId { get; set; }

        [Input("natGatewayId")]
        public string? NatGatewayId { get; set; }

        [Input("networkInterfaceId")]
        public string? NetworkInterfaceId { get; set; }

        [Input("routeTableId", required: true)]
        public string RouteTableId { get; set; } = null!;

        [Input("transitGatewayId")]
        public string? TransitGatewayId { get; set; }

        [Input("vpcPeeringConnectionId")]
        public string? VpcPeeringConnectionId { get; set; }

        public GetRouteArgs()
        {
        }
        public static new GetRouteArgs Empty => new GetRouteArgs();
    }

    public sealed class GetRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("carrierGatewayId")]
        public Input<string>? CarrierGatewayId { get; set; }

        [Input("coreNetworkArn")]
        public Input<string>? CoreNetworkArn { get; set; }

        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        [Input("destinationIpv6CidrBlock")]
        public Input<string>? DestinationIpv6CidrBlock { get; set; }

        [Input("destinationPrefixListId")]
        public Input<string>? DestinationPrefixListId { get; set; }

        [Input("egressOnlyGatewayId")]
        public Input<string>? EgressOnlyGatewayId { get; set; }

        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("localGatewayId")]
        public Input<string>? LocalGatewayId { get; set; }

        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        [Input("transitGatewayId")]
        public Input<string>? TransitGatewayId { get; set; }

        [Input("vpcPeeringConnectionId")]
        public Input<string>? VpcPeeringConnectionId { get; set; }

        public GetRouteInvokeArgs()
        {
        }
        public static new GetRouteInvokeArgs Empty => new GetRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        public readonly string CarrierGatewayId;
        public readonly string CoreNetworkArn;
        public readonly string DestinationCidrBlock;
        public readonly string DestinationIpv6CidrBlock;
        public readonly string DestinationPrefixListId;
        public readonly string EgressOnlyGatewayId;
        public readonly string GatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string LocalGatewayId;
        public readonly string NatGatewayId;
        public readonly string NetworkInterfaceId;
        public readonly string RouteTableId;
        public readonly string TransitGatewayId;
        public readonly string VpcPeeringConnectionId;

        [OutputConstructor]
        private GetRouteResult(
            string carrierGatewayId,

            string coreNetworkArn,

            string destinationCidrBlock,

            string destinationIpv6CidrBlock,

            string destinationPrefixListId,

            string egressOnlyGatewayId,

            string gatewayId,

            string id,

            string instanceId,

            string localGatewayId,

            string natGatewayId,

            string networkInterfaceId,

            string routeTableId,

            string transitGatewayId,

            string vpcPeeringConnectionId)
        {
            CarrierGatewayId = carrierGatewayId;
            CoreNetworkArn = coreNetworkArn;
            DestinationCidrBlock = destinationCidrBlock;
            DestinationIpv6CidrBlock = destinationIpv6CidrBlock;
            DestinationPrefixListId = destinationPrefixListId;
            EgressOnlyGatewayId = egressOnlyGatewayId;
            GatewayId = gatewayId;
            Id = id;
            InstanceId = instanceId;
            LocalGatewayId = localGatewayId;
            NatGatewayId = natGatewayId;
            NetworkInterfaceId = networkInterfaceId;
            RouteTableId = routeTableId;
            TransitGatewayId = transitGatewayId;
            VpcPeeringConnectionId = vpcPeeringConnectionId;
        }
    }
}
