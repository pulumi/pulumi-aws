// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ec2
{
    public static class GetRoute
    {
        /// <summary>
        /// `aws.ec2.Route` provides details about a specific Route.
        /// 
        /// This resource can prove useful when finding the resource associated with a CIDR. For example, finding the peering connection associated with a CIDR value.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might use a CIDR value to find a network interface id and use this to create a data source of that network interface.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const subnetId = config.requireObject("subnetId");
        /// const selected = aws.ec2.getRouteTable({
        ///     subnetId: subnetId,
        /// });
        /// const route = aws.ec2.getRoute({
        ///     routeTableId: aws_route_table.selected.id,
        ///     destinationCidrBlock: "10.0.1.0/24",
        /// });
        /// const interface = route.then(route =&gt; aws.ec2.getNetworkInterface({
        ///     id: route.networkInterfaceId,
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// subnet_id = config.require_object("subnetId")
        /// selected = aws.ec2.get_route_table(subnet_id=subnet_id)
        /// route = aws.ec2.get_route(route_table_id=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///     destination_cidr_block="10.0.1.0/24")
        /// interface = aws.ec2.get_network_interface(id=route.network_interface_id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///     var selected = Aws.Ec2.GetRouteTable.Invoke(new()
        ///     {
        ///         SubnetId = subnetId,
        ///     });
        /// 
        ///     var route = Aws.Ec2.GetRoute.Invoke(new()
        ///     {
        ///         RouteTableId = aws_route_table.Selected.Id,
        ///         DestinationCidrBlock = "10.0.1.0/24",
        ///     });
        /// 
        ///     var @interface = Aws.Ec2.GetNetworkInterface.Invoke(new()
        ///     {
        ///         Id = route.Apply(getRouteResult =&gt; getRouteResult.NetworkInterfaceId),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		subnetId := cfg.RequireObject("subnetId")
        /// 		_, err := ec2.LookupRouteTable(ctx, &amp;ec2.LookupRouteTableArgs{
        /// 			SubnetId: pulumi.StringRef(subnetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		route, err := ec2.LookupRoute(ctx, &amp;ec2.LookupRouteArgs{
        /// 			RouteTableId:         aws_route_table.Selected.Id,
        /// 			DestinationCidrBlock: pulumi.StringRef("10.0.1.0/24"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.LookupNetworkInterface(ctx, &amp;ec2.LookupNetworkInterfaceArgs{
        /// 			Id: pulumi.StringRef(route.NetworkInterfaceId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetRouteTableArgs;
        /// import com.pulumi.aws.ec2.inputs.GetRouteArgs;
        /// import com.pulumi.aws.ec2.inputs.GetNetworkInterfaceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var subnetId = config.get("subnetId");
        ///         final var selected = Ec2Functions.getRouteTable(GetRouteTableArgs.builder()
        ///             .subnetId(subnetId)
        ///             .build());
        /// 
        ///         final var route = Ec2Functions.getRoute(GetRouteArgs.builder()
        ///             .routeTableId(aws_route_table.selected().id())
        ///             .destinationCidrBlock("10.0.1.0/24")
        ///             .build());
        /// 
        ///         final var interface = Ec2Functions.getNetworkInterface(GetNetworkInterfaceArgs.builder()
        ///             .id(route.applyValue(getRouteResult -&gt; getRouteResult.networkInterfaceId()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   subnetId:
        ///     type: dynamic
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getRouteTable
        ///       Arguments:
        ///         subnetId: ${subnetId}
        ///   route:
        ///     fn::invoke:
        ///       Function: aws:ec2:getRoute
        ///       Arguments:
        ///         routeTableId: ${aws_route_table.selected.id}
        ///         destinationCidrBlock: 10.0.1.0/24
        ///   interface:
        ///     fn::invoke:
        ///       Function: aws:ec2:getNetworkInterface
        ///       Arguments:
        ///         id: ${route.networkInterfaceId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRouteResult> InvokeAsync(GetRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRouteResult>("aws:ec2/getRoute:getRoute", args ?? new GetRouteArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ec2.Route` provides details about a specific Route.
        /// 
        /// This resource can prove useful when finding the resource associated with a CIDR. For example, finding the peering connection associated with a CIDR value.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following example shows how one might use a CIDR value to find a network interface id and use this to create a data source of that network interface.
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const config = new pulumi.Config();
        /// const subnetId = config.requireObject("subnetId");
        /// const selected = aws.ec2.getRouteTable({
        ///     subnetId: subnetId,
        /// });
        /// const route = aws.ec2.getRoute({
        ///     routeTableId: aws_route_table.selected.id,
        ///     destinationCidrBlock: "10.0.1.0/24",
        /// });
        /// const interface = route.then(route =&gt; aws.ec2.getNetworkInterface({
        ///     id: route.networkInterfaceId,
        /// }));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// config = pulumi.Config()
        /// subnet_id = config.require_object("subnetId")
        /// selected = aws.ec2.get_route_table(subnet_id=subnet_id)
        /// route = aws.ec2.get_route(route_table_id=%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),
        ///     destination_cidr_block="10.0.1.0/24")
        /// interface = aws.ec2.get_network_interface(id=route.network_interface_id)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var config = new Config();
        ///     var subnetId = config.RequireObject&lt;dynamic&gt;("subnetId");
        ///     var selected = Aws.Ec2.GetRouteTable.Invoke(new()
        ///     {
        ///         SubnetId = subnetId,
        ///     });
        /// 
        ///     var route = Aws.Ec2.GetRoute.Invoke(new()
        ///     {
        ///         RouteTableId = aws_route_table.Selected.Id,
        ///         DestinationCidrBlock = "10.0.1.0/24",
        ///     });
        /// 
        ///     var @interface = Aws.Ec2.GetNetworkInterface.Invoke(new()
        ///     {
        ///         Id = route.Apply(getRouteResult =&gt; getRouteResult.NetworkInterfaceId),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ec2"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		cfg := config.New(ctx, "")
        /// 		subnetId := cfg.RequireObject("subnetId")
        /// 		_, err := ec2.LookupRouteTable(ctx, &amp;ec2.LookupRouteTableArgs{
        /// 			SubnetId: pulumi.StringRef(subnetId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		route, err := ec2.LookupRoute(ctx, &amp;ec2.LookupRouteArgs{
        /// 			RouteTableId:         aws_route_table.Selected.Id,
        /// 			DestinationCidrBlock: pulumi.StringRef("10.0.1.0/24"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		_, err = ec2.LookupNetworkInterface(ctx, &amp;ec2.LookupNetworkInterfaceArgs{
        /// 			Id: pulumi.StringRef(route.NetworkInterfaceId),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ec2.Ec2Functions;
        /// import com.pulumi.aws.ec2.inputs.GetRouteTableArgs;
        /// import com.pulumi.aws.ec2.inputs.GetRouteArgs;
        /// import com.pulumi.aws.ec2.inputs.GetNetworkInterfaceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var config = ctx.config();
        ///         final var subnetId = config.get("subnetId");
        ///         final var selected = Ec2Functions.getRouteTable(GetRouteTableArgs.builder()
        ///             .subnetId(subnetId)
        ///             .build());
        /// 
        ///         final var route = Ec2Functions.getRoute(GetRouteArgs.builder()
        ///             .routeTableId(aws_route_table.selected().id())
        ///             .destinationCidrBlock("10.0.1.0/24")
        ///             .build());
        /// 
        ///         final var interface = Ec2Functions.getNetworkInterface(GetNetworkInterfaceArgs.builder()
        ///             .id(route.applyValue(getRouteResult -&gt; getRouteResult.networkInterfaceId()))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// configuration:
        ///   subnetId:
        ///     type: dynamic
        /// variables:
        ///   selected:
        ///     fn::invoke:
        ///       Function: aws:ec2:getRouteTable
        ///       Arguments:
        ///         subnetId: ${subnetId}
        ///   route:
        ///     fn::invoke:
        ///       Function: aws:ec2:getRoute
        ///       Arguments:
        ///         routeTableId: ${aws_route_table.selected.id}
        ///         destinationCidrBlock: 10.0.1.0/24
        ///   interface:
        ///     fn::invoke:
        ///       Function: aws:ec2:getNetworkInterface
        ///       Arguments:
        ///         id: ${route.networkInterfaceId}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRouteResult> Invoke(GetRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRouteResult>("aws:ec2/getRoute:getRoute", args ?? new GetRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRouteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// EC2 Carrier Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("carrierGatewayId")]
        public string? CarrierGatewayId { get; set; }

        /// <summary>
        /// Core network ARN of the Route belonging to the Route Table.
        /// </summary>
        [Input("coreNetworkArn")]
        public string? CoreNetworkArn { get; set; }

        /// <summary>
        /// CIDR block of the Route belonging to the Route Table.
        /// </summary>
        [Input("destinationCidrBlock")]
        public string? DestinationCidrBlock { get; set; }

        /// <summary>
        /// IPv6 CIDR block of the Route belonging to the Route Table.
        /// </summary>
        [Input("destinationIpv6CidrBlock")]
        public string? DestinationIpv6CidrBlock { get; set; }

        /// <summary>
        /// ID of a managed prefix list destination of the Route belonging to the Route Table.
        /// </summary>
        [Input("destinationPrefixListId")]
        public string? DestinationPrefixListId { get; set; }

        /// <summary>
        /// Egress Only Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("egressOnlyGatewayId")]
        public string? EgressOnlyGatewayId { get; set; }

        /// <summary>
        /// Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("gatewayId")]
        public string? GatewayId { get; set; }

        /// <summary>
        /// Instance ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// Local Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("localGatewayId")]
        public string? LocalGatewayId { get; set; }

        /// <summary>
        /// NAT Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("natGatewayId")]
        public string? NatGatewayId { get; set; }

        /// <summary>
        /// Network Interface ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("networkInterfaceId")]
        public string? NetworkInterfaceId { get; set; }

        /// <summary>
        /// ID of the specific Route Table containing the Route entry.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("routeTableId", required: true)]
        public string RouteTableId { get; set; } = null!;

        /// <summary>
        /// EC2 Transit Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("transitGatewayId")]
        public string? TransitGatewayId { get; set; }

        /// <summary>
        /// VPC Peering Connection ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("vpcPeeringConnectionId")]
        public string? VpcPeeringConnectionId { get; set; }

        public GetRouteArgs()
        {
        }
        public static new GetRouteArgs Empty => new GetRouteArgs();
    }

    public sealed class GetRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// EC2 Carrier Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("carrierGatewayId")]
        public Input<string>? CarrierGatewayId { get; set; }

        /// <summary>
        /// Core network ARN of the Route belonging to the Route Table.
        /// </summary>
        [Input("coreNetworkArn")]
        public Input<string>? CoreNetworkArn { get; set; }

        /// <summary>
        /// CIDR block of the Route belonging to the Route Table.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        /// <summary>
        /// IPv6 CIDR block of the Route belonging to the Route Table.
        /// </summary>
        [Input("destinationIpv6CidrBlock")]
        public Input<string>? DestinationIpv6CidrBlock { get; set; }

        /// <summary>
        /// ID of a managed prefix list destination of the Route belonging to the Route Table.
        /// </summary>
        [Input("destinationPrefixListId")]
        public Input<string>? DestinationPrefixListId { get; set; }

        /// <summary>
        /// Egress Only Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("egressOnlyGatewayId")]
        public Input<string>? EgressOnlyGatewayId { get; set; }

        /// <summary>
        /// Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("gatewayId")]
        public Input<string>? GatewayId { get; set; }

        /// <summary>
        /// Instance ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Local Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("localGatewayId")]
        public Input<string>? LocalGatewayId { get; set; }

        /// <summary>
        /// NAT Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        /// <summary>
        /// Network Interface ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// ID of the specific Route Table containing the Route entry.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        /// <summary>
        /// EC2 Transit Gateway ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("transitGatewayId")]
        public Input<string>? TransitGatewayId { get; set; }

        /// <summary>
        /// VPC Peering Connection ID of the Route belonging to the Route Table.
        /// </summary>
        [Input("vpcPeeringConnectionId")]
        public Input<string>? VpcPeeringConnectionId { get; set; }

        public GetRouteInvokeArgs()
        {
        }
        public static new GetRouteInvokeArgs Empty => new GetRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetRouteResult
    {
        public readonly string CarrierGatewayId;
        public readonly string CoreNetworkArn;
        public readonly string DestinationCidrBlock;
        public readonly string DestinationIpv6CidrBlock;
        public readonly string DestinationPrefixListId;
        public readonly string EgressOnlyGatewayId;
        public readonly string GatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string LocalGatewayId;
        public readonly string NatGatewayId;
        public readonly string NetworkInterfaceId;
        public readonly string RouteTableId;
        public readonly string TransitGatewayId;
        public readonly string VpcPeeringConnectionId;

        [OutputConstructor]
        private GetRouteResult(
            string carrierGatewayId,

            string coreNetworkArn,

            string destinationCidrBlock,

            string destinationIpv6CidrBlock,

            string destinationPrefixListId,

            string egressOnlyGatewayId,

            string gatewayId,

            string id,

            string instanceId,

            string localGatewayId,

            string natGatewayId,

            string networkInterfaceId,

            string routeTableId,

            string transitGatewayId,

            string vpcPeeringConnectionId)
        {
            CarrierGatewayId = carrierGatewayId;
            CoreNetworkArn = coreNetworkArn;
            DestinationCidrBlock = destinationCidrBlock;
            DestinationIpv6CidrBlock = destinationIpv6CidrBlock;
            DestinationPrefixListId = destinationPrefixListId;
            EgressOnlyGatewayId = egressOnlyGatewayId;
            GatewayId = gatewayId;
            Id = id;
            InstanceId = instanceId;
            LocalGatewayId = localGatewayId;
            NatGatewayId = natGatewayId;
            NetworkInterfaceId = networkInterfaceId;
            RouteTableId = routeTableId;
            TransitGatewayId = transitGatewayId;
            VpcPeeringConnectionId = vpcPeeringConnectionId;
        }
    }
}
