// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ControlTower
{
    /// <summary>
    /// Creates a new landing zone using Control Tower. For more information on usage, please see the
    /// [AWS Control Tower Landing Zone User Guide](https://docs.aws.amazon.com/controltower/latest/userguide/how-control-tower-works.html).
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import a Control Tower Landing Zone using the `id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:controltower/landingZone:LandingZone example 1A2B3C4D5E6F7G8H
    /// ```
    /// </summary>
    [AwsResourceType("aws:controltower/landingZone:LandingZone")]
    public partial class LandingZone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the landing zone.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The drift status summary of the landing zone.
        /// </summary>
        [Output("driftStatuses")]
        public Output<ImmutableArray<Outputs.LandingZoneDriftStatus>> DriftStatuses { get; private set; } = null!;

        /// <summary>
        /// The latest available version of the landing zone.
        /// </summary>
        [Output("latestAvailableVersion")]
        public Output<string> LatestAvailableVersion { get; private set; } = null!;

        /// <summary>
        /// The manifest JSON file is a text file that describes your AWS resources. For examples, review [Launch your landing zone](https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch).
        /// </summary>
        [Output("manifestJson")]
        public Output<string> ManifestJson { get; private set; } = null!;

        /// <summary>
        /// Tags to apply to the landing zone. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the landing zone, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The landing zone version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a LandingZone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LandingZone(string name, LandingZoneArgs args, CustomResourceOptions? options = null)
            : base("aws:controltower/landingZone:LandingZone", name, args ?? new LandingZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LandingZone(string name, Input<string> id, LandingZoneState? state = null, CustomResourceOptions? options = null)
            : base("aws:controltower/landingZone:LandingZone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LandingZone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LandingZone Get(string name, Input<string> id, LandingZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new LandingZone(name, id, state, options);
        }
    }

    public sealed class LandingZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The manifest JSON file is a text file that describes your AWS resources. For examples, review [Launch your landing zone](https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch).
        /// </summary>
        [Input("manifestJson", required: true)]
        public Input<string> ManifestJson { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the landing zone. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The landing zone version.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public LandingZoneArgs()
        {
        }
        public static new LandingZoneArgs Empty => new LandingZoneArgs();
    }

    public sealed class LandingZoneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the landing zone.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("driftStatuses")]
        private InputList<Inputs.LandingZoneDriftStatusGetArgs>? _driftStatuses;

        /// <summary>
        /// The drift status summary of the landing zone.
        /// </summary>
        public InputList<Inputs.LandingZoneDriftStatusGetArgs> DriftStatuses
        {
            get => _driftStatuses ?? (_driftStatuses = new InputList<Inputs.LandingZoneDriftStatusGetArgs>());
            set => _driftStatuses = value;
        }

        /// <summary>
        /// The latest available version of the landing zone.
        /// </summary>
        [Input("latestAvailableVersion")]
        public Input<string>? LatestAvailableVersion { get; set; }

        /// <summary>
        /// The manifest JSON file is a text file that describes your AWS resources. For examples, review [Launch your landing zone](https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch).
        /// </summary>
        [Input("manifestJson")]
        public Input<string>? ManifestJson { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the landing zone. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the landing zone, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The landing zone version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public LandingZoneState()
        {
        }
        public static new LandingZoneState Empty => new LandingZoneState();
    }
}
