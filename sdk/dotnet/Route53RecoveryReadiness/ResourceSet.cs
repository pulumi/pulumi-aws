// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Route53RecoveryReadiness
{
    /// <summary>
    /// Provides an AWS Route 53 Recovery Readiness Resource Set.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Route53RecoveryReadiness.ResourceSet("example", new()
    ///     {
    ///         ResourceSetName = my_cw_alarm_set,
    ///         ResourceSetType = "AWS::CloudWatch::Alarm",
    ///         Resources = new[]
    ///         {
    ///             new Aws.Route53RecoveryReadiness.Inputs.ResourceSetResourceArgs
    ///             {
    ///                 ResourceArn = aws_cloudwatch_metric_alarm.Example.Arn,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_route53recoveryreadiness_resource_set.my-cw-alarm-set
    /// 
    ///  id = "example" } Using `pulumi import`, import Route53 Recovery Readiness resource set name using the resource set name. For exampleconsole % pulumi import aws_route53recoveryreadiness_resource_set.my-cw-alarm-set example
    /// </summary>
    [AwsResourceType("aws:route53recoveryreadiness/resourceSet:ResourceSet")]
    public partial class ResourceSet : global::Pulumi.CustomResource
    {
        /// <summary>
        /// NLB resource ARN.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Unique name describing the resource set.
        /// </summary>
        [Output("resourceSetName")]
        public Output<string> ResourceSetName { get; private set; } = null!;

        /// <summary>
        /// Type of the resources in the resource set.
        /// </summary>
        [Output("resourceSetType")]
        public Output<string> ResourceSetType { get; private set; } = null!;

        /// <summary>
        /// List of resources to add to this resource set. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.ResourceSetResource>> Resources { get; private set; } = null!;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a ResourceSet resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ResourceSet(string name, ResourceSetArgs args, CustomResourceOptions? options = null)
            : base("aws:route53recoveryreadiness/resourceSet:ResourceSet", name, args ?? new ResourceSetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ResourceSet(string name, Input<string> id, ResourceSetState? state = null, CustomResourceOptions? options = null)
            : base("aws:route53recoveryreadiness/resourceSet:ResourceSet", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ResourceSet resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ResourceSet Get(string name, Input<string> id, ResourceSetState? state = null, CustomResourceOptions? options = null)
        {
            return new ResourceSet(name, id, state, options);
        }
    }

    public sealed class ResourceSetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique name describing the resource set.
        /// </summary>
        [Input("resourceSetName", required: true)]
        public Input<string> ResourceSetName { get; set; } = null!;

        /// <summary>
        /// Type of the resources in the resource set.
        /// </summary>
        [Input("resourceSetType", required: true)]
        public Input<string> ResourceSetType { get; set; } = null!;

        [Input("resources", required: true)]
        private InputList<Inputs.ResourceSetResourceArgs>? _resources;

        /// <summary>
        /// List of resources to add to this resource set. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.ResourceSetResourceArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.ResourceSetResourceArgs>());
            set => _resources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public ResourceSetArgs()
        {
        }
        public static new ResourceSetArgs Empty => new ResourceSetArgs();
    }

    public sealed class ResourceSetState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// NLB resource ARN.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Unique name describing the resource set.
        /// </summary>
        [Input("resourceSetName")]
        public Input<string>? ResourceSetName { get; set; }

        /// <summary>
        /// Type of the resources in the resource set.
        /// </summary>
        [Input("resourceSetType")]
        public Input<string>? ResourceSetType { get; set; }

        [Input("resources")]
        private InputList<Inputs.ResourceSetResourceGetArgs>? _resources;

        /// <summary>
        /// List of resources to add to this resource set. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.ResourceSetResourceGetArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.ResourceSetResourceGetArgs>());
            set => _resources = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public ResourceSetState()
        {
        }
        public static new ResourceSetState Empty => new ResourceSetState();
    }
}
