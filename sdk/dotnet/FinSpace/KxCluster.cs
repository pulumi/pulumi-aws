// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.FinSpace
{
    /// <summary>
    /// Resource for managing an AWS FinSpace Kx Cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_finspace_kx_cluster.example
    /// 
    ///  id = "n3ceo7wqxoxcti5tujqwzs,my-tf-kx-cluster" } Using `pulumi import`, import an AWS FinSpace Kx Cluster using the `id` (environment ID and cluster name, comma-delimited). For exampleconsole % pulumi import aws_finspace_kx_cluster.example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-cluster
    /// </summary>
    [AwsResourceType("aws:finspace/kxCluster:KxCluster")]
    public partial class KxCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) identifier of the KX cluster.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
        /// </summary>
        [Output("autoScalingConfiguration")]
        public Output<Outputs.KxClusterAutoScalingConfiguration?> AutoScalingConfiguration { get; private set; } = null!;

        /// <summary>
        /// The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
        /// </summary>
        [Output("availabilityZoneId")]
        public Output<string?> AvailabilityZoneId { get; private set; } = null!;

        /// <summary>
        /// The number of availability zones you want to assign per cluster. This can be one of the following:
        /// * SINGLE - Assigns one availability zone per cluster.
        /// * MULTI - Assigns all the availability zones per cluster.
        /// </summary>
        [Output("azMode")]
        public Output<string> AzMode { get; private set; } = null!;

        /// <summary>
        /// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
        /// </summary>
        [Output("cacheStorageConfigurations")]
        public Output<ImmutableArray<Outputs.KxClusterCacheStorageConfiguration>> CacheStorageConfigurations { get; private set; } = null!;

        /// <summary>
        /// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
        /// </summary>
        [Output("capacityConfiguration")]
        public Output<Outputs.KxClusterCapacityConfiguration> CapacityConfiguration { get; private set; } = null!;

        /// <summary>
        /// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
        /// </summary>
        [Output("code")]
        public Output<Outputs.KxClusterCode?> Code { get; private set; } = null!;

        /// <summary>
        /// List of key-value pairs to make available inside the cluster.
        /// </summary>
        [Output("commandLineArguments")]
        public Output<ImmutableDictionary<string, string>?> CommandLineArguments { get; private set; } = null!;

        /// <summary>
        /// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
        /// </summary>
        [Output("createdTimestamp")]
        public Output<string> CreatedTimestamp { get; private set; } = null!;

        /// <summary>
        /// KX database that will be available for querying. Defined below.
        /// </summary>
        [Output("databases")]
        public Output<ImmutableArray<Outputs.KxClusterDatabase>> Databases { get; private set; } = null!;

        /// <summary>
        /// Description of the cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the KX environment.
        /// </summary>
        [Output("environmentId")]
        public Output<string> EnvironmentId { get; private set; } = null!;

        /// <summary>
        /// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
        /// </summary>
        [Output("executionRole")]
        public Output<string?> ExecutionRole { get; private set; } = null!;

        /// <summary>
        /// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
        /// </summary>
        [Output("initializationScript")]
        public Output<string?> InitializationScript { get; private set; } = null!;

        /// <summary>
        /// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
        /// </summary>
        [Output("lastModifiedTimestamp")]
        public Output<string> LastModifiedTimestamp { get; private set; } = null!;

        /// <summary>
        /// Unique name for the cluster that you want to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Version of FinSpace Managed kdb to run.
        /// </summary>
        [Output("releaseLabel")]
        public Output<string> ReleaseLabel { get; private set; } = null!;

        /// <summary>
        /// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
        /// </summary>
        [Output("savedownStorageConfiguration")]
        public Output<Outputs.KxClusterSavedownStorageConfiguration?> SavedownStorageConfiguration { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("statusReason")]
        public Output<string> StatusReason { get; private set; } = null!;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Type of KDB database. The following types are available:
        /// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
        /// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
        /// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("vpcConfiguration")]
        public Output<Outputs.KxClusterVpcConfiguration> VpcConfiguration { get; private set; } = null!;


        /// <summary>
        /// Create a KxCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KxCluster(string name, KxClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:finspace/kxCluster:KxCluster", name, args ?? new KxClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KxCluster(string name, Input<string> id, KxClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:finspace/kxCluster:KxCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KxCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KxCluster Get(string name, Input<string> id, KxClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new KxCluster(name, id, state, options);
        }
    }

    public sealed class KxClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
        /// </summary>
        [Input("autoScalingConfiguration")]
        public Input<Inputs.KxClusterAutoScalingConfigurationArgs>? AutoScalingConfiguration { get; set; }

        /// <summary>
        /// The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
        /// </summary>
        [Input("availabilityZoneId")]
        public Input<string>? AvailabilityZoneId { get; set; }

        /// <summary>
        /// The number of availability zones you want to assign per cluster. This can be one of the following:
        /// * SINGLE - Assigns one availability zone per cluster.
        /// * MULTI - Assigns all the availability zones per cluster.
        /// </summary>
        [Input("azMode", required: true)]
        public Input<string> AzMode { get; set; } = null!;

        [Input("cacheStorageConfigurations")]
        private InputList<Inputs.KxClusterCacheStorageConfigurationArgs>? _cacheStorageConfigurations;

        /// <summary>
        /// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
        /// </summary>
        public InputList<Inputs.KxClusterCacheStorageConfigurationArgs> CacheStorageConfigurations
        {
            get => _cacheStorageConfigurations ?? (_cacheStorageConfigurations = new InputList<Inputs.KxClusterCacheStorageConfigurationArgs>());
            set => _cacheStorageConfigurations = value;
        }

        /// <summary>
        /// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
        /// </summary>
        [Input("capacityConfiguration", required: true)]
        public Input<Inputs.KxClusterCapacityConfigurationArgs> CapacityConfiguration { get; set; } = null!;

        /// <summary>
        /// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
        /// </summary>
        [Input("code")]
        public Input<Inputs.KxClusterCodeArgs>? Code { get; set; }

        [Input("commandLineArguments")]
        private InputMap<string>? _commandLineArguments;

        /// <summary>
        /// List of key-value pairs to make available inside the cluster.
        /// </summary>
        public InputMap<string> CommandLineArguments
        {
            get => _commandLineArguments ?? (_commandLineArguments = new InputMap<string>());
            set => _commandLineArguments = value;
        }

        [Input("databases")]
        private InputList<Inputs.KxClusterDatabaseArgs>? _databases;

        /// <summary>
        /// KX database that will be available for querying. Defined below.
        /// </summary>
        public InputList<Inputs.KxClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.KxClusterDatabaseArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique identifier for the KX environment.
        /// </summary>
        [Input("environmentId", required: true)]
        public Input<string> EnvironmentId { get; set; } = null!;

        /// <summary>
        /// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
        /// </summary>
        [Input("executionRole")]
        public Input<string>? ExecutionRole { get; set; }

        /// <summary>
        /// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
        /// </summary>
        [Input("initializationScript")]
        public Input<string>? InitializationScript { get; set; }

        /// <summary>
        /// Unique name for the cluster that you want to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Version of FinSpace Managed kdb to run.
        /// </summary>
        [Input("releaseLabel", required: true)]
        public Input<string> ReleaseLabel { get; set; } = null!;

        /// <summary>
        /// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
        /// </summary>
        [Input("savedownStorageConfiguration")]
        public Input<Inputs.KxClusterSavedownStorageConfigurationArgs>? SavedownStorageConfiguration { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Type of KDB database. The following types are available:
        /// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
        /// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
        /// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("vpcConfiguration", required: true)]
        public Input<Inputs.KxClusterVpcConfigurationArgs> VpcConfiguration { get; set; } = null!;

        public KxClusterArgs()
        {
        }
        public static new KxClusterArgs Empty => new KxClusterArgs();
    }

    public sealed class KxClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) identifier of the KX cluster.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Configuration based on which FinSpace will scale in or scale out nodes in your cluster. See auto_scaling_configuration.
        /// </summary>
        [Input("autoScalingConfiguration")]
        public Input<Inputs.KxClusterAutoScalingConfigurationGetArgs>? AutoScalingConfiguration { get; set; }

        /// <summary>
        /// The availability zone identifiers for the requested regions. Required when `az_mode` is set to SINGLE.
        /// </summary>
        [Input("availabilityZoneId")]
        public Input<string>? AvailabilityZoneId { get; set; }

        /// <summary>
        /// The number of availability zones you want to assign per cluster. This can be one of the following:
        /// * SINGLE - Assigns one availability zone per cluster.
        /// * MULTI - Assigns all the availability zones per cluster.
        /// </summary>
        [Input("azMode")]
        public Input<string>? AzMode { get; set; }

        [Input("cacheStorageConfigurations")]
        private InputList<Inputs.KxClusterCacheStorageConfigurationGetArgs>? _cacheStorageConfigurations;

        /// <summary>
        /// Configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. See cache_storage_configuration.
        /// </summary>
        public InputList<Inputs.KxClusterCacheStorageConfigurationGetArgs> CacheStorageConfigurations
        {
            get => _cacheStorageConfigurations ?? (_cacheStorageConfigurations = new InputList<Inputs.KxClusterCacheStorageConfigurationGetArgs>());
            set => _cacheStorageConfigurations = value;
        }

        /// <summary>
        /// Structure for the metadata of a cluster. Includes information like the CPUs needed, memory of instances, and number of instances. See capacity_configuration.
        /// </summary>
        [Input("capacityConfiguration")]
        public Input<Inputs.KxClusterCapacityConfigurationGetArgs>? CapacityConfiguration { get; set; }

        /// <summary>
        /// Details of the custom code that you want to use inside a cluster when analyzing data. Consists of the S3 source bucket, location, object version, and the relative path from where the custom code is loaded into the cluster. See code.
        /// </summary>
        [Input("code")]
        public Input<Inputs.KxClusterCodeGetArgs>? Code { get; set; }

        [Input("commandLineArguments")]
        private InputMap<string>? _commandLineArguments;

        /// <summary>
        /// List of key-value pairs to make available inside the cluster.
        /// </summary>
        public InputMap<string> CommandLineArguments
        {
            get => _commandLineArguments ?? (_commandLineArguments = new InputMap<string>());
            set => _commandLineArguments = value;
        }

        /// <summary>
        /// Timestamp at which the cluster is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
        /// </summary>
        [Input("createdTimestamp")]
        public Input<string>? CreatedTimestamp { get; set; }

        [Input("databases")]
        private InputList<Inputs.KxClusterDatabaseGetArgs>? _databases;

        /// <summary>
        /// KX database that will be available for querying. Defined below.
        /// </summary>
        public InputList<Inputs.KxClusterDatabaseGetArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.KxClusterDatabaseGetArgs>());
            set => _databases = value;
        }

        /// <summary>
        /// Description of the cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Unique identifier for the KX environment.
        /// </summary>
        [Input("environmentId")]
        public Input<string>? EnvironmentId { get; set; }

        /// <summary>
        /// An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster.
        /// </summary>
        [Input("executionRole")]
        public Input<string>? ExecutionRole { get; set; }

        /// <summary>
        /// Path to Q program that will be run at launch of a cluster. This is a relative path within .zip file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, somedir/init.q.
        /// </summary>
        [Input("initializationScript")]
        public Input<string>? InitializationScript { get; set; }

        /// <summary>
        /// Last timestamp at which the cluster was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
        /// </summary>
        [Input("lastModifiedTimestamp")]
        public Input<string>? LastModifiedTimestamp { get; set; }

        /// <summary>
        /// Unique name for the cluster that you want to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Version of FinSpace Managed kdb to run.
        /// </summary>
        [Input("releaseLabel")]
        public Input<string>? ReleaseLabel { get; set; }

        /// <summary>
        /// Size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose `type` as RDB. All the data written to this storage space is lost when the cluster node is restarted. See savedown_storage_configuration.
        /// </summary>
        [Input("savedownStorageConfiguration")]
        public Input<Inputs.KxClusterSavedownStorageConfigurationGetArgs>? SavedownStorageConfiguration { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("statusReason")]
        public Input<string>? StatusReason { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value mapping of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Type of KDB database. The following types are available:
        /// * HDB - Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed KX databases mounted to the cluster.
        /// * RDB - Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the `savedownStorageConfiguration` parameter.
        /// * GATEWAY - A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a  writable local storage.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Configuration details about the network where the Privatelink endpoint of the cluster resides. See vpc_configuration.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("vpcConfiguration")]
        public Input<Inputs.KxClusterVpcConfigurationGetArgs>? VpcConfiguration { get; set; }

        public KxClusterState()
        {
        }
        public static new KxClusterState Empty => new KxClusterState();
    }
}
