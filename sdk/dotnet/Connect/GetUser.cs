// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Connect
{
    public static class GetUser
    {
        /// <summary>
        /// Provides details about a specific Amazon Connect User.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// By `name`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetUser.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// By `user_id`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetUser.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         UserId = "cccccccc-bbbb-cccc-dddd-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("aws:connect/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Amazon Connect User.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// By `name`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetUser.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// By `user_id`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetUser.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         UserId = "cccccccc-bbbb-cccc-dddd-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("aws:connect/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reference to the hosting Amazon Connect Instance
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Returns information on a specific User by name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags to assign to the User.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// Returns information on a specific User by User id
        /// </summary>
        [Input("userId")]
        public string? UserId { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reference to the hosting Amazon Connect Instance
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Returns information on a specific User by name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the User.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Returns information on a specific User by User id
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the User.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The identifier of the user account in the directory used for identity management.
        /// </summary>
        public readonly string DirectoryUserId;
        /// <summary>
        /// The identifier of the hierarchy group for the user.
        /// </summary>
        public readonly string HierarchyGroupId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A block that contains information about the identity of the user. Documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserIdentityInfoResult> IdentityInfos;
        /// <summary>
        /// Specifies the identifier of the hosting Amazon Connect Instance.
        /// </summary>
        public readonly string InstanceId;
        public readonly string Name;
        /// <summary>
        /// A block that contains information about the phone settings for the user. Documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserPhoneConfigResult> PhoneConfigs;
        /// <summary>
        /// The identifier of the routing profile for the user.
        /// </summary>
        public readonly string RoutingProfileId;
        /// <summary>
        /// A list of identifiers for the security profiles for the user.
        /// </summary>
        public readonly ImmutableArray<string> SecurityProfileIds;
        /// <summary>
        /// A map of tags to assign to the User.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string UserId;

        [OutputConstructor]
        private GetUserResult(
            string arn,

            string directoryUserId,

            string hierarchyGroupId,

            string id,

            ImmutableArray<Outputs.GetUserIdentityInfoResult> identityInfos,

            string instanceId,

            string name,

            ImmutableArray<Outputs.GetUserPhoneConfigResult> phoneConfigs,

            string routingProfileId,

            ImmutableArray<string> securityProfileIds,

            ImmutableDictionary<string, string> tags,

            string userId)
        {
            Arn = arn;
            DirectoryUserId = directoryUserId;
            HierarchyGroupId = hierarchyGroupId;
            Id = id;
            IdentityInfos = identityInfos;
            InstanceId = instanceId;
            Name = name;
            PhoneConfigs = phoneConfigs;
            RoutingProfileId = routingProfileId;
            SecurityProfileIds = securityProfileIds;
            Tags = tags;
            UserId = userId;
        }
    }
}
