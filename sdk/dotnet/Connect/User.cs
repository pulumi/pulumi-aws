// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Connect
{
    /// <summary>
    /// Provides an Amazon Connect User resource. For more information see
    /// [Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)
    /// 
    /// ## Example Usage
    /// ### Basic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Connect.User("example", new()
    ///     {
    ///         InstanceId = aws_connect_instance.Example.Id,
    ///         Password = "Password123",
    ///         RoutingProfileId = aws_connect_routing_profile.Example.Routing_profile_id,
    ///         SecurityProfileIds = new[]
    ///         {
    ///             aws_connect_security_profile.Example.Security_profile_id,
    ///         },
    ///         IdentityInfo = new Aws.Connect.Inputs.UserIdentityInfoArgs
    ///         {
    ///             FirstName = "example",
    ///             LastName = "example2",
    ///         },
    ///         PhoneConfig = new Aws.Connect.Inputs.UserPhoneConfigArgs
    ///         {
    ///             AfterContactWorkTimeLimit = 0,
    ///             PhoneType = "SOFT_PHONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With hierarchy_group_id
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Connect.User("example", new()
    ///     {
    ///         InstanceId = aws_connect_instance.Example.Id,
    ///         Password = "Password123",
    ///         RoutingProfileId = aws_connect_routing_profile.Example.Routing_profile_id,
    ///         HierarchyGroupId = aws_connect_user_hierarchy_group.Example.Hierarchy_group_id,
    ///         SecurityProfileIds = new[]
    ///         {
    ///             aws_connect_security_profile.Example.Security_profile_id,
    ///         },
    ///         IdentityInfo = new Aws.Connect.Inputs.UserIdentityInfoArgs
    ///         {
    ///             FirstName = "example",
    ///             LastName = "example2",
    ///         },
    ///         PhoneConfig = new Aws.Connect.Inputs.UserPhoneConfigArgs
    ///         {
    ///             AfterContactWorkTimeLimit = 0,
    ///             PhoneType = "SOFT_PHONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With identity_info filled
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Connect.User("example", new()
    ///     {
    ///         InstanceId = aws_connect_instance.Example.Id,
    ///         Password = "Password123",
    ///         RoutingProfileId = aws_connect_routing_profile.Example.Routing_profile_id,
    ///         SecurityProfileIds = new[]
    ///         {
    ///             aws_connect_security_profile.Example.Security_profile_id,
    ///         },
    ///         IdentityInfo = new Aws.Connect.Inputs.UserIdentityInfoArgs
    ///         {
    ///             Email = "example@example.com",
    ///             FirstName = "example",
    ///             LastName = "example2",
    ///         },
    ///         PhoneConfig = new Aws.Connect.Inputs.UserPhoneConfigArgs
    ///         {
    ///             AfterContactWorkTimeLimit = 0,
    ///             PhoneType = "SOFT_PHONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With phone_config phone type as desk phone
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Connect.User("example", new()
    ///     {
    ///         InstanceId = aws_connect_instance.Example.Id,
    ///         Password = "Password123",
    ///         RoutingProfileId = aws_connect_routing_profile.Example.Routing_profile_id,
    ///         SecurityProfileIds = new[]
    ///         {
    ///             aws_connect_security_profile.Example.Security_profile_id,
    ///         },
    ///         PhoneConfig = new Aws.Connect.Inputs.UserPhoneConfigArgs
    ///         {
    ///             AfterContactWorkTimeLimit = 0,
    ///             PhoneType = "SOFT_PHONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### With multiple Security profile ids specified in security_profile_ids
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Connect.User("example", new()
    ///     {
    ///         InstanceId = aws_connect_instance.Example.Id,
    ///         Password = "Password123",
    ///         RoutingProfileId = aws_connect_routing_profile.Example.Routing_profile_id,
    ///         SecurityProfileIds = new[]
    ///         {
    ///             aws_connect_security_profile.Example.Security_profile_id,
    ///             aws_connect_security_profile.Example2.Security_profile_id,
    ///         },
    ///         PhoneConfig = new Aws.Connect.Inputs.UserPhoneConfigArgs
    ///         {
    ///             AfterContactWorkTimeLimit = 0,
    ///             AutoAccept = false,
    ///             DeskPhoneNumber = "+112345678912",
    ///             PhoneType = "DESK_PHONE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Amazon Connect Users can be imported using the `instance_id` and `user_id` separated by a colon (`:`), e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:connect/user:User example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5
    /// ```
    /// </summary>
    [AwsResourceType("aws:connect/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the user.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory. This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.
        /// </summary>
        [Output("directoryUserId")]
        public Output<string> DirectoryUserId { get; private set; } = null!;

        /// <summary>
        /// The identifier of the hierarchy group for the user.
        /// </summary>
        [Output("hierarchyGroupId")]
        public Output<string?> HierarchyGroupId { get; private set; } = null!;

        /// <summary>
        /// A block that contains information about the identity of the user. Documented below.
        /// </summary>
        [Output("identityInfo")]
        public Output<Outputs.UserIdentityInfo?> IdentityInfo { get; private set; } = null!;

        /// <summary>
        /// Specifies the identifier of the hosting Amazon Connect Instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from `[a-zA-Z0-9_-.\@]+`.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// A block that contains information about the phone settings for the user. Documented below.
        /// </summary>
        [Output("phoneConfig")]
        public Output<Outputs.UserPhoneConfig> PhoneConfig { get; private set; } = null!;

        /// <summary>
        /// The identifier of the routing profile for the user.
        /// </summary>
        [Output("routingProfileId")]
        public Output<string> RoutingProfileId { get; private set; } = null!;

        /// <summary>
        /// A list of identifiers for the security profiles for the user. Specify a minimum of 1 and maximum of 10 security profile ids. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
        /// </summary>
        [Output("securityProfileIds")]
        public Output<ImmutableArray<string>> SecurityProfileIds { get; private set; } = null!;

        /// <summary>
        /// Tags to apply to the user. If configured with a provider
        /// `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// The identifier for the user.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("aws:connect/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("aws:connect/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory. This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.
        /// </summary>
        [Input("directoryUserId")]
        public Input<string>? DirectoryUserId { get; set; }

        /// <summary>
        /// The identifier of the hierarchy group for the user.
        /// </summary>
        [Input("hierarchyGroupId")]
        public Input<string>? HierarchyGroupId { get; set; }

        /// <summary>
        /// A block that contains information about the identity of the user. Documented below.
        /// </summary>
        [Input("identityInfo")]
        public Input<Inputs.UserIdentityInfoArgs>? IdentityInfo { get; set; }

        /// <summary>
        /// Specifies the identifier of the hosting Amazon Connect Instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from `[a-zA-Z0-9_-.\@]+`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// A block that contains information about the phone settings for the user. Documented below.
        /// </summary>
        [Input("phoneConfig", required: true)]
        public Input<Inputs.UserPhoneConfigArgs> PhoneConfig { get; set; } = null!;

        /// <summary>
        /// The identifier of the routing profile for the user.
        /// </summary>
        [Input("routingProfileId", required: true)]
        public Input<string> RoutingProfileId { get; set; } = null!;

        [Input("securityProfileIds", required: true)]
        private InputList<string>? _securityProfileIds;

        /// <summary>
        /// A list of identifiers for the security profiles for the user. Specify a minimum of 1 and maximum of 10 security profile ids. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
        /// </summary>
        public InputList<string> SecurityProfileIds
        {
            get => _securityProfileIds ?? (_securityProfileIds = new InputList<string>());
            set => _securityProfileIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the user. If configured with a provider
        /// `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the user.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The identifier of the user account in the directory used for identity management. If Amazon Connect cannot access the directory, you can specify this identifier to authenticate users. If you include the identifier, we assume that Amazon Connect cannot access the directory. Otherwise, the identity information is used to authenticate users from your directory. This parameter is required if you are using an existing directory for identity management in Amazon Connect when Amazon Connect cannot access your directory to authenticate users. If you are using SAML for identity management and include this parameter, an error is returned.
        /// </summary>
        [Input("directoryUserId")]
        public Input<string>? DirectoryUserId { get; set; }

        /// <summary>
        /// The identifier of the hierarchy group for the user.
        /// </summary>
        [Input("hierarchyGroupId")]
        public Input<string>? HierarchyGroupId { get; set; }

        /// <summary>
        /// A block that contains information about the identity of the user. Documented below.
        /// </summary>
        [Input("identityInfo")]
        public Input<Inputs.UserIdentityInfoGetArgs>? IdentityInfo { get; set; }

        /// <summary>
        /// Specifies the identifier of the hosting Amazon Connect Instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The user name for the account. For instances not using SAML for identity management, the user name can include up to 20 characters. If you are using SAML for identity management, the user name can include up to 64 characters from `[a-zA-Z0-9_-.\@]+`.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The password for the user account. A password is required if you are using Amazon Connect for identity management. Otherwise, it is an error to include a password.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// A block that contains information about the phone settings for the user. Documented below.
        /// </summary>
        [Input("phoneConfig")]
        public Input<Inputs.UserPhoneConfigGetArgs>? PhoneConfig { get; set; }

        /// <summary>
        /// The identifier of the routing profile for the user.
        /// </summary>
        [Input("routingProfileId")]
        public Input<string>? RoutingProfileId { get; set; }

        [Input("securityProfileIds")]
        private InputList<string>? _securityProfileIds;

        /// <summary>
        /// A list of identifiers for the security profiles for the user. Specify a minimum of 1 and maximum of 10 security profile ids. For more information, see [Best Practices for Security Profiles](https://docs.aws.amazon.com/connect/latest/adminguide/security-profile-best-practices.html) in the Amazon Connect Administrator Guide.
        /// </summary>
        public InputList<string> SecurityProfileIds
        {
            get => _securityProfileIds ?? (_securityProfileIds = new InputList<string>());
            set => _securityProfileIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags to apply to the user. If configured with a provider
        /// `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// The identifier for the user.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
