// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Connect
{
    public static class GetRoutingProfile
    {
        /// <summary>
        /// Provides details about a specific Amazon Connect Routing Profile.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// By `name`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetRoutingProfile.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// By `routing_profile_id`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetRoutingProfile.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         RoutingProfileId = "cccccccc-bbbb-cccc-dddd-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRoutingProfileResult> InvokeAsync(GetRoutingProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoutingProfileResult>("aws:connect/getRoutingProfile:getRoutingProfile", args ?? new GetRoutingProfileArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Amazon Connect Routing Profile.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// By `name`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetRoutingProfile.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         Name = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// By `routing_profile_id`
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Connect.GetRoutingProfile.Invoke(new()
        ///     {
        ///         InstanceId = "aaaaaaaa-bbbb-cccc-dddd-111111111111",
        ///         RoutingProfileId = "cccccccc-bbbb-cccc-dddd-111111111111",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRoutingProfileResult> Invoke(GetRoutingProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoutingProfileResult>("aws:connect/getRoutingProfile:getRoutingProfile", args ?? new GetRoutingProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoutingProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reference to the hosting Amazon Connect Instance
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Returns information on a specific Routing Profile by name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Returns information on a specific Routing Profile by Routing Profile id
        /// </summary>
        [Input("routingProfileId")]
        public string? RoutingProfileId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags to assign to the Routing Profile.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetRoutingProfileArgs()
        {
        }
        public static new GetRoutingProfileArgs Empty => new GetRoutingProfileArgs();
    }

    public sealed class GetRoutingProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Reference to the hosting Amazon Connect Instance
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Returns information on a specific Routing Profile by name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Returns information on a specific Routing Profile by Routing Profile id
        /// </summary>
        [Input("routingProfileId")]
        public Input<string>? RoutingProfileId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the Routing Profile.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetRoutingProfileInvokeArgs()
        {
        }
        public static new GetRoutingProfileInvokeArgs Empty => new GetRoutingProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoutingProfileResult
    {
        /// <summary>
        /// ARN of the Routing Profile.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Specifies the default outbound queue for the Routing Profile.
        /// </summary>
        public readonly string DefaultOutboundQueueId;
        /// <summary>
        /// Description of the Routing Profile.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        /// <summary>
        /// One or more `media_concurrencies` blocks that specify the channels that agents can handle in the Contact Control Panel (CCP) for this Routing Profile. The `media_concurrencies` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProfileMediaConcurrencyResult> MediaConcurrencies;
        public readonly string Name;
        /// <summary>
        /// One or more `queue_configs` blocks that specify the inbound queues associated with the routing profile. If no queue is added, the agent only can make outbound calls. The `queue_configs` block is documented below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRoutingProfileQueueConfigResult> QueueConfigs;
        public readonly string RoutingProfileId;
        /// <summary>
        /// Map of tags to assign to the Routing Profile.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetRoutingProfileResult(
            string arn,

            string defaultOutboundQueueId,

            string description,

            string id,

            string instanceId,

            ImmutableArray<Outputs.GetRoutingProfileMediaConcurrencyResult> mediaConcurrencies,

            string name,

            ImmutableArray<Outputs.GetRoutingProfileQueueConfigResult> queueConfigs,

            string routingProfileId,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            DefaultOutboundQueueId = defaultOutboundQueueId;
            Description = description;
            Id = id;
            InstanceId = instanceId;
            MediaConcurrencies = mediaConcurrencies;
            Name = name;
            QueueConfigs = queueConfigs;
            RoutingProfileId = routingProfileId;
            Tags = tags;
        }
    }
}
