// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Lex
{
    /// <summary>
    /// Provides an Amazon Lex Intent resource. For more information see
    /// [Amazon Lex: How It Works](https://docs.aws.amazon.com/lex/latest/dg/how-it-works.html)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var orderFlowersIntent = new Aws.Lex.Intent("orderFlowersIntent", new Aws.Lex.IntentArgs
    ///         {
    ///             ConfirmationPrompt = new Aws.Lex.Inputs.IntentConfirmationPromptArgs
    ///             {
    ///                 MaxAttempts = 2,
    ///                 Messages = 
    ///                 {
    ///                     new Aws.Lex.Inputs.IntentConfirmationPromptMessageArgs
    ///                     {
    ///                         Content = "Okay, your {FlowerType} will be ready for pickup by {PickupTime} on {PickupDate}.  Does this sound okay?",
    ///                         ContentType = "PlainText",
    ///                     },
    ///                 },
    ///             },
    ///             CreateVersion = false,
    ///             Description = "Intent to order a bouquet of flowers for pick up",
    ///             FulfillmentActivity = new Aws.Lex.Inputs.IntentFulfillmentActivityArgs
    ///             {
    ///                 Type = "ReturnIntent",
    ///             },
    ///             RejectionStatement = new Aws.Lex.Inputs.IntentRejectionStatementArgs
    ///             {
    ///                 Messages = 
    ///                 {
    ///                     new Aws.Lex.Inputs.IntentRejectionStatementMessageArgs
    ///                     {
    ///                         Content = "Okay, I will not place your order.",
    ///                         ContentType = "PlainText",
    ///                     },
    ///                 },
    ///             },
    ///             SampleUtterances = 
    ///             {
    ///                 "I would like to order some flowers",
    ///                 "I would like to pick up flowers",
    ///             },
    ///             Slots = 
    ///             {
    ///                 new Aws.Lex.Inputs.IntentSlotArgs
    ///                 {
    ///                     Description = "The type of flowers to pick up",
    ///                     Name = "FlowerType",
    ///                     Priority = 1,
    ///                     SampleUtterances = 
    ///                     {
    ///                         "I would like to order {FlowerType}",
    ///                     },
    ///                     SlotConstraint = "Required",
    ///                     SlotType = "FlowerTypes",
    ///                     SlotTypeVersion = "$LATEST",
    ///                     ValueElicitationPrompt = new Aws.Lex.Inputs.IntentSlotValueElicitationPromptArgs
    ///                     {
    ///                         MaxAttempts = 2,
    ///                         Message = 
    ///                         {
    ///                             
    ///                             {
    ///                                 { "content", "What type of flowers would you like to order?" },
    ///                                 { "contentType", "PlainText" },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.Lex.Inputs.IntentSlotArgs
    ///                 {
    ///                     Description = "The date to pick up the flowers",
    ///                     Name = "PickupDate",
    ///                     Priority = 2,
    ///                     SampleUtterances = 
    ///                     {
    ///                         "I would like to order {FlowerType}",
    ///                     },
    ///                     SlotConstraint = "Required",
    ///                     SlotType = "AMAZON.DATE",
    ///                     SlotTypeVersion = "$LATEST",
    ///                     ValueElicitationPrompt = new Aws.Lex.Inputs.IntentSlotValueElicitationPromptArgs
    ///                     {
    ///                         MaxAttempts = 2,
    ///                         Message = 
    ///                         {
    ///                             
    ///                             {
    ///                                 { "content", "What day do you want the {FlowerType} to be picked up?" },
    ///                                 { "contentType", "PlainText" },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new Aws.Lex.Inputs.IntentSlotArgs
    ///                 {
    ///                     Description = "The time to pick up the flowers",
    ///                     Name = "PickupTime",
    ///                     Priority = 3,
    ///                     SampleUtterances = 
    ///                     {
    ///                         "I would like to order {FlowerType}",
    ///                     },
    ///                     SlotConstraint = "Required",
    ///                     SlotType = "AMAZON.TIME",
    ///                     SlotTypeVersion = "$LATEST",
    ///                     ValueElicitationPrompt = new Aws.Lex.Inputs.IntentSlotValueElicitationPromptArgs
    ///                     {
    ///                         MaxAttempts = 2,
    ///                         Message = 
    ///                         {
    ///                             
    ///                             {
    ///                                 { "content", "Pick up the {FlowerType} at what time on {PickupDate}?" },
    ///                                 { "contentType", "PlainText" },
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Intents can be imported using their name.
    /// 
    /// ```sh
    ///  $ pulumi import aws:lex/intent:Intent order_flowers_intent OrderFlowers
    /// ```
    /// </summary>
    public partial class Intent : Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the Lex intent.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Checksum identifying the version of the intent that was created. The checksum is not
        /// included as an argument because the resource will add it automatically when updating the intent.
        /// </summary>
        [Output("checksum")]
        public Output<string> Checksum { get; private set; } = null!;

        /// <summary>
        /// The statement that you want Amazon Lex to convey to the user
        /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
        /// you provide a Lambda function in the `fulfillment_activity`. If you return the intent to the client
        /// application, you can't specify this element. The `follow_up_prompt` and `conclusion_statement` are
        /// mutually exclusive. You can specify only one. Attributes are documented under statement.
        /// </summary>
        [Output("conclusionStatement")]
        public Output<Outputs.IntentConclusionStatement?> ConclusionStatement { get; private set; } = null!;

        /// <summary>
        /// Prompts the user to confirm the intent. This question should
        /// have a yes or no answer. You you must provide both the `rejection_statement` and `confirmation_prompt`,
        /// or neither. Attributes are documented under prompt.
        /// </summary>
        [Output("confirmationPrompt")]
        public Output<Outputs.IntentConfirmationPrompt?> ConfirmationPrompt { get; private set; } = null!;

        /// <summary>
        /// Determines if a new slot type version is created when the initial
        /// resource is created and on each update. Defaults to `false`.
        /// </summary>
        [Output("createVersion")]
        public Output<bool?> CreateVersion { get; private set; } = null!;

        /// <summary>
        /// The date when the intent version was created.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// A description of the bot. Must be less than or equal to 200 characters in length.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Specifies a Lambda function to invoke for each user input. You can
        /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
        /// </summary>
        [Output("dialogCodeHook")]
        public Output<Outputs.IntentDialogCodeHook?> DialogCodeHook { get; private set; } = null!;

        /// <summary>
        /// Amazon Lex uses this prompt to solicit additional activity after
        /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
        /// user to order a drink. The `follow_up_prompt` field and the `conclusion_statement` field are mutually
        /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
        /// </summary>
        [Output("followUpPrompt")]
        public Output<Outputs.IntentFollowUpPrompt?> FollowUpPrompt { get; private set; } = null!;

        /// <summary>
        /// Describes how the intent is fulfilled. For example, after a
        /// user provides all of the information for a pizza order, `fulfillment_activity` defines how the bot
        /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
        /// </summary>
        [Output("fulfillmentActivity")]
        public Output<Outputs.IntentFulfillmentActivity> FulfillmentActivity { get; private set; } = null!;

        /// <summary>
        /// The date when the $LATEST version of this intent was updated.
        /// </summary>
        [Output("lastUpdatedDate")]
        public Output<string> LastUpdatedDate { get; private set; } = null!;

        /// <summary>
        /// The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A unique identifier for the built-in intent to base this
        /// intent on. To find the signature for an intent, see
        /// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
        /// in the Alexa Skills Kit.
        /// </summary>
        [Output("parentIntentSignature")]
        public Output<string?> ParentIntentSignature { get; private set; } = null!;

        /// <summary>
        /// If the user answers "no" to the question defined in the prompt field,
        /// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
        /// documented below under statement.
        /// </summary>
        [Output("rejectionStatement")]
        public Output<Outputs.IntentRejectionStatement?> RejectionStatement { get; private set; } = null!;

        /// <summary>
        /// If you know a specific pattern with which users might respond to
        /// an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
        /// is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        /// </summary>
        [Output("sampleUtterances")]
        public Output<ImmutableArray<string>> SampleUtterances { get; private set; } = null!;

        /// <summary>
        /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
        /// from the user using prompts defined in the slots. Attributes are documented under slot.
        /// </summary>
        [Output("slots")]
        public Output<ImmutableArray<Outputs.IntentSlot>> Slots { get; private set; } = null!;

        /// <summary>
        /// The version of the bot.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Intent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Intent(string name, IntentArgs args, CustomResourceOptions? options = null)
            : base("aws:lex/intent:Intent", name, args ?? new IntentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Intent(string name, Input<string> id, IntentState? state = null, CustomResourceOptions? options = null)
            : base("aws:lex/intent:Intent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Intent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Intent Get(string name, Input<string> id, IntentState? state = null, CustomResourceOptions? options = null)
        {
            return new Intent(name, id, state, options);
        }
    }

    public sealed class IntentArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The statement that you want Amazon Lex to convey to the user
        /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
        /// you provide a Lambda function in the `fulfillment_activity`. If you return the intent to the client
        /// application, you can't specify this element. The `follow_up_prompt` and `conclusion_statement` are
        /// mutually exclusive. You can specify only one. Attributes are documented under statement.
        /// </summary>
        [Input("conclusionStatement")]
        public Input<Inputs.IntentConclusionStatementArgs>? ConclusionStatement { get; set; }

        /// <summary>
        /// Prompts the user to confirm the intent. This question should
        /// have a yes or no answer. You you must provide both the `rejection_statement` and `confirmation_prompt`,
        /// or neither. Attributes are documented under prompt.
        /// </summary>
        [Input("confirmationPrompt")]
        public Input<Inputs.IntentConfirmationPromptArgs>? ConfirmationPrompt { get; set; }

        /// <summary>
        /// Determines if a new slot type version is created when the initial
        /// resource is created and on each update. Defaults to `false`.
        /// </summary>
        [Input("createVersion")]
        public Input<bool>? CreateVersion { get; set; }

        /// <summary>
        /// A description of the bot. Must be less than or equal to 200 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies a Lambda function to invoke for each user input. You can
        /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
        /// </summary>
        [Input("dialogCodeHook")]
        public Input<Inputs.IntentDialogCodeHookArgs>? DialogCodeHook { get; set; }

        /// <summary>
        /// Amazon Lex uses this prompt to solicit additional activity after
        /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
        /// user to order a drink. The `follow_up_prompt` field and the `conclusion_statement` field are mutually
        /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
        /// </summary>
        [Input("followUpPrompt")]
        public Input<Inputs.IntentFollowUpPromptArgs>? FollowUpPrompt { get; set; }

        /// <summary>
        /// Describes how the intent is fulfilled. For example, after a
        /// user provides all of the information for a pizza order, `fulfillment_activity` defines how the bot
        /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
        /// </summary>
        [Input("fulfillmentActivity", required: true)]
        public Input<Inputs.IntentFulfillmentActivityArgs> FulfillmentActivity { get; set; } = null!;

        /// <summary>
        /// The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A unique identifier for the built-in intent to base this
        /// intent on. To find the signature for an intent, see
        /// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
        /// in the Alexa Skills Kit.
        /// </summary>
        [Input("parentIntentSignature")]
        public Input<string>? ParentIntentSignature { get; set; }

        /// <summary>
        /// If the user answers "no" to the question defined in the prompt field,
        /// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
        /// documented below under statement.
        /// </summary>
        [Input("rejectionStatement")]
        public Input<Inputs.IntentRejectionStatementArgs>? RejectionStatement { get; set; }

        [Input("sampleUtterances")]
        private InputList<string>? _sampleUtterances;

        /// <summary>
        /// If you know a specific pattern with which users might respond to
        /// an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
        /// is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        /// </summary>
        public InputList<string> SampleUtterances
        {
            get => _sampleUtterances ?? (_sampleUtterances = new InputList<string>());
            set => _sampleUtterances = value;
        }

        [Input("slots")]
        private InputList<Inputs.IntentSlotArgs>? _slots;

        /// <summary>
        /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
        /// from the user using prompts defined in the slots. Attributes are documented under slot.
        /// </summary>
        public InputList<Inputs.IntentSlotArgs> Slots
        {
            get => _slots ?? (_slots = new InputList<Inputs.IntentSlotArgs>());
            set => _slots = value;
        }

        public IntentArgs()
        {
        }
    }

    public sealed class IntentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the Lex intent.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Checksum identifying the version of the intent that was created. The checksum is not
        /// included as an argument because the resource will add it automatically when updating the intent.
        /// </summary>
        [Input("checksum")]
        public Input<string>? Checksum { get; set; }

        /// <summary>
        /// The statement that you want Amazon Lex to convey to the user
        /// after the intent is successfully fulfilled by the Lambda function. This element is relevant only if
        /// you provide a Lambda function in the `fulfillment_activity`. If you return the intent to the client
        /// application, you can't specify this element. The `follow_up_prompt` and `conclusion_statement` are
        /// mutually exclusive. You can specify only one. Attributes are documented under statement.
        /// </summary>
        [Input("conclusionStatement")]
        public Input<Inputs.IntentConclusionStatementGetArgs>? ConclusionStatement { get; set; }

        /// <summary>
        /// Prompts the user to confirm the intent. This question should
        /// have a yes or no answer. You you must provide both the `rejection_statement` and `confirmation_prompt`,
        /// or neither. Attributes are documented under prompt.
        /// </summary>
        [Input("confirmationPrompt")]
        public Input<Inputs.IntentConfirmationPromptGetArgs>? ConfirmationPrompt { get; set; }

        /// <summary>
        /// Determines if a new slot type version is created when the initial
        /// resource is created and on each update. Defaults to `false`.
        /// </summary>
        [Input("createVersion")]
        public Input<bool>? CreateVersion { get; set; }

        /// <summary>
        /// The date when the intent version was created.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// A description of the bot. Must be less than or equal to 200 characters in length.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Specifies a Lambda function to invoke for each user input. You can
        /// invoke this Lambda function to personalize user interaction. Attributes are documented under code_hook.
        /// </summary>
        [Input("dialogCodeHook")]
        public Input<Inputs.IntentDialogCodeHookGetArgs>? DialogCodeHook { get; set; }

        /// <summary>
        /// Amazon Lex uses this prompt to solicit additional activity after
        /// fulfilling an intent. For example, after the OrderPizza intent is fulfilled, you might prompt the
        /// user to order a drink. The `follow_up_prompt` field and the `conclusion_statement` field are mutually
        /// exclusive. You can specify only one. Attributes are documented under follow_up_prompt.
        /// </summary>
        [Input("followUpPrompt")]
        public Input<Inputs.IntentFollowUpPromptGetArgs>? FollowUpPrompt { get; set; }

        /// <summary>
        /// Describes how the intent is fulfilled. For example, after a
        /// user provides all of the information for a pizza order, `fulfillment_activity` defines how the bot
        /// places an order with a local pizza store. Attributes are documented under fulfillment_activity.
        /// </summary>
        [Input("fulfillmentActivity")]
        public Input<Inputs.IntentFulfillmentActivityGetArgs>? FulfillmentActivity { get; set; }

        /// <summary>
        /// The date when the $LATEST version of this intent was updated.
        /// </summary>
        [Input("lastUpdatedDate")]
        public Input<string>? LastUpdatedDate { get; set; }

        /// <summary>
        /// The name of the intent slot that you want to create. The name is case sensitive. Must be less than or equal to 100 characters in length.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A unique identifier for the built-in intent to base this
        /// intent on. To find the signature for an intent, see
        /// [Standard Built-in Intents](https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/standard-intents)
        /// in the Alexa Skills Kit.
        /// </summary>
        [Input("parentIntentSignature")]
        public Input<string>? ParentIntentSignature { get; set; }

        /// <summary>
        /// If the user answers "no" to the question defined in the prompt field,
        /// Amazon Lex responds with this statement to acknowledge that the intent was canceled. Attributes are
        /// documented below under statement.
        /// </summary>
        [Input("rejectionStatement")]
        public Input<Inputs.IntentRejectionStatementGetArgs>? RejectionStatement { get; set; }

        [Input("sampleUtterances")]
        private InputList<string>? _sampleUtterances;

        /// <summary>
        /// If you know a specific pattern with which users might respond to
        /// an Amazon Lex request for a slot value, you can provide those utterances to improve accuracy. This
        /// is optional. In most cases, Amazon Lex is capable of understanding user utterances. Must have between 1 and 10 items in the list, and each item must be less than or equal to 200 characters in length.
        /// </summary>
        public InputList<string> SampleUtterances
        {
            get => _sampleUtterances ?? (_sampleUtterances = new InputList<string>());
            set => _sampleUtterances = value;
        }

        [Input("slots")]
        private InputList<Inputs.IntentSlotGetArgs>? _slots;

        /// <summary>
        /// An list of intent slots. At runtime, Amazon Lex elicits required slot values
        /// from the user using prompts defined in the slots. Attributes are documented under slot.
        /// </summary>
        public InputList<Inputs.IntentSlotGetArgs> Slots
        {
            get => _slots ?? (_slots = new InputList<Inputs.IntentSlotGetArgs>());
            set => _slots = value;
        }

        /// <summary>
        /// The version of the bot.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public IntentState()
        {
        }
    }
}
