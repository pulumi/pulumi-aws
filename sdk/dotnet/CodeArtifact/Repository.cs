// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeArtifact
{
    [AwsResourceType("aws:codeartifact/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        [Output("administratorAccount")]
        public Output<string> AdministratorAccount { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        [Output("domainOwner")]
        public Output<string> DomainOwner { get; private set; } = null!;

        [Output("externalConnections")]
        public Output<Outputs.RepositoryExternalConnections?> ExternalConnections { get; private set; } = null!;

        [Output("repository")]
        public Output<string> RepositoryName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("upstreams")]
        public Output<ImmutableArray<Outputs.RepositoryUpstream>> Upstreams { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("aws:codeartifact/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("aws:codeartifact/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("domainOwner")]
        public Input<string>? DomainOwner { get; set; }

        [Input("externalConnections")]
        public Input<Inputs.RepositoryExternalConnectionsArgs>? ExternalConnections { get; set; }

        [Input("repository", required: true)]
        public Input<string> RepositoryName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("upstreams")]
        private InputList<Inputs.RepositoryUpstreamArgs>? _upstreams;
        public InputList<Inputs.RepositoryUpstreamArgs> Upstreams
        {
            get => _upstreams ?? (_upstreams = new InputList<Inputs.RepositoryUpstreamArgs>());
            set => _upstreams = value;
        }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        [Input("administratorAccount")]
        public Input<string>? AdministratorAccount { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("domainOwner")]
        public Input<string>? DomainOwner { get; set; }

        [Input("externalConnections")]
        public Input<Inputs.RepositoryExternalConnectionsGetArgs>? ExternalConnections { get; set; }

        [Input("repository")]
        public Input<string>? RepositoryName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("upstreams")]
        private InputList<Inputs.RepositoryUpstreamGetArgs>? _upstreams;
        public InputList<Inputs.RepositoryUpstreamGetArgs> Upstreams
        {
            get => _upstreams ?? (_upstreams = new InputList<Inputs.RepositoryUpstreamGetArgs>());
            set => _upstreams = value;
        }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}
