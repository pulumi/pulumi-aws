// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Auditmanager
{
    public static class GetFramework
    {
        /// <summary>
        /// Data source for managing an AWS Audit Manager Framework.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Auditmanager.GetFramework.Invoke(new()
        ///     {
        ///         Name = "Essential Eight",
        ///         FrameworkType = "Standard",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetFrameworkResult> InvokeAsync(GetFrameworkArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFrameworkResult>("aws:auditmanager/getFramework:getFramework", args ?? new GetFrameworkArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS Audit Manager Framework.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Auditmanager.GetFramework.Invoke(new()
        ///     {
        ///         Name = "Essential Eight",
        ///         FrameworkType = "Standard",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetFrameworkResult> Invoke(GetFrameworkInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFrameworkResult>("aws:auditmanager/getFramework:getFramework", args ?? new GetFrameworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFrameworkArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlSets")]
        private List<Inputs.GetFrameworkControlSetArgs>? _controlSets;
        public List<Inputs.GetFrameworkControlSetArgs> ControlSets
        {
            get => _controlSets ?? (_controlSets = new List<Inputs.GetFrameworkControlSetArgs>());
            set => _controlSets = value;
        }

        [Input("frameworkType", required: true)]
        public string FrameworkType { get; set; } = null!;

        /// <summary>
        /// Name of the framework.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetFrameworkArgs()
        {
        }
        public static new GetFrameworkArgs Empty => new GetFrameworkArgs();
    }

    public sealed class GetFrameworkInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlSets")]
        private InputList<Inputs.GetFrameworkControlSetInputArgs>? _controlSets;
        public InputList<Inputs.GetFrameworkControlSetInputArgs> ControlSets
        {
            get => _controlSets ?? (_controlSets = new InputList<Inputs.GetFrameworkControlSetInputArgs>());
            set => _controlSets = value;
        }

        [Input("frameworkType", required: true)]
        public Input<string> FrameworkType { get; set; } = null!;

        /// <summary>
        /// Name of the framework.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetFrameworkInvokeArgs()
        {
        }
        public static new GetFrameworkInvokeArgs Empty => new GetFrameworkInvokeArgs();
    }


    [OutputType]
    public sealed class GetFrameworkResult
    {
        public readonly string Arn;
        public readonly string ComplianceType;
        public readonly ImmutableArray<Outputs.GetFrameworkControlSetResult> ControlSets;
        public readonly string Description;
        public readonly string FrameworkType;
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetFrameworkResult(
            string arn,

            string complianceType,

            ImmutableArray<Outputs.GetFrameworkControlSetResult> controlSets,

            string description,

            string frameworkType,

            string id,

            string name,

            ImmutableDictionary<string, string> tags)
        {
            Arn = arn;
            ComplianceType = complianceType;
            ControlSets = controlSets;
            Description = description;
            FrameworkType = frameworkType;
            Id = id;
            Name = name;
            Tags = tags;
        }
    }
}
