// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Auditmanager
{
    /// <summary>
    /// Resource for managing an AWS Audit Manager Framework.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Auditmanager.Framework("test", new()
    ///     {
    ///         ControlSets = new[]
    ///         {
    ///             new Aws.Auditmanager.Inputs.FrameworkControlSetArgs
    ///             {
    ///                 Name = "example",
    ///                 Controls = new[]
    ///                 {
    ///                     new Aws.Auditmanager.Inputs.FrameworkControlSetControlArgs
    ///                     {
    ///                         Id = aws_auditmanager_control.Test.Id,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_auditmanager_framework.example
    /// 
    ///  id = "abc123-de45" } Using `pulumi import`, import Audit Manager Framework using the framework `id`. For exampleconsole % pulumi import aws_auditmanager_framework.example abc123-de45
    /// </summary>
    [AwsResourceType("aws:auditmanager/framework:Framework")]
    public partial class Framework : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the framework.
        /// * `control_sets[*].id` - Unique identifier for the framework control set.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
        /// </summary>
        [Output("complianceType")]
        public Output<string?> ComplianceType { get; private set; } = null!;

        /// <summary>
        /// Control sets that are associated with the framework. See `control_sets` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("controlSets")]
        public Output<ImmutableArray<Outputs.FrameworkControlSet>> ControlSets { get; private set; } = null!;

        /// <summary>
        /// Description of the framework.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Framework type, such as a custom framework or a standard framework.
        /// </summary>
        [Output("frameworkType")]
        public Output<string> FrameworkType { get; private set; } = null!;

        /// <summary>
        /// Name of the framework.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the framework. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Framework resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Framework(string name, FrameworkArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:auditmanager/framework:Framework", name, args ?? new FrameworkArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Framework(string name, Input<string> id, FrameworkState? state = null, CustomResourceOptions? options = null)
            : base("aws:auditmanager/framework:Framework", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Framework resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Framework Get(string name, Input<string> id, FrameworkState? state = null, CustomResourceOptions? options = null)
        {
            return new Framework(name, id, state, options);
        }
    }

    public sealed class FrameworkArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
        /// </summary>
        [Input("complianceType")]
        public Input<string>? ComplianceType { get; set; }

        [Input("controlSets")]
        private InputList<Inputs.FrameworkControlSetArgs>? _controlSets;

        /// <summary>
        /// Control sets that are associated with the framework. See `control_sets` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.FrameworkControlSetArgs> ControlSets
        {
            get => _controlSets ?? (_controlSets = new InputList<Inputs.FrameworkControlSetArgs>());
            set => _controlSets = value;
        }

        /// <summary>
        /// Description of the framework.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the framework.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the framework. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public FrameworkArgs()
        {
        }
        public static new FrameworkArgs Empty => new FrameworkArgs();
    }

    public sealed class FrameworkState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the framework.
        /// * `control_sets[*].id` - Unique identifier for the framework control set.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Compliance type that the new custom framework supports, such as `CIS` or `HIPAA`.
        /// </summary>
        [Input("complianceType")]
        public Input<string>? ComplianceType { get; set; }

        [Input("controlSets")]
        private InputList<Inputs.FrameworkControlSetGetArgs>? _controlSets;

        /// <summary>
        /// Control sets that are associated with the framework. See `control_sets` below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        public InputList<Inputs.FrameworkControlSetGetArgs> ControlSets
        {
            get => _controlSets ?? (_controlSets = new InputList<Inputs.FrameworkControlSetGetArgs>());
            set => _controlSets = value;
        }

        /// <summary>
        /// Description of the framework.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Framework type, such as a custom framework or a standard framework.
        /// </summary>
        [Input("frameworkType")]
        public Input<string>? FrameworkType { get; set; }

        /// <summary>
        /// Name of the framework.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the framework. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public FrameworkState()
        {
        }
        public static new FrameworkState Empty => new FrameworkState();
    }
}
