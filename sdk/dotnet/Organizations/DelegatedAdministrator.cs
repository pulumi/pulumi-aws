// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Organizations
{
    /// <summary>
    /// Provides a resource to manage an [AWS Organizations Delegated Administrator](https://docs.aws.amazon.com/organizations/latest/APIReference/API_RegisterDelegatedAdministrator.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Organizations.DelegatedAdministrator("example", new Aws.Organizations.DelegatedAdministratorArgs
    ///         {
    ///             AccountId = "123456789012",
    ///             ServicePrincipal = "principal",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_organizations_delegated_administrator` can be imported by using the account ID and its service principal, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:organizations/delegatedAdministrator:DelegatedAdministrator example 123456789012/config.amazonaws.com
    /// ```
    /// </summary>
    [AwsResourceType("aws:organizations/delegatedAdministrator:DelegatedAdministrator")]
    public partial class DelegatedAdministrator : Pulumi.CustomResource
    {
        /// <summary>
        /// The account ID number of the member account in the organization to register as a delegated administrator.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the delegated administrator's account.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The date when the account was made a delegated administrator.
        /// </summary>
        [Output("delegationEnabledDate")]
        public Output<string> DelegationEnabledDate { get; private set; } = null!;

        /// <summary>
        /// The email address that is associated with the delegated administrator's AWS account.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// The method by which the delegated administrator's account joined the organization.
        /// </summary>
        [Output("joinedMethod")]
        public Output<string> JoinedMethod { get; private set; } = null!;

        /// <summary>
        /// The date when the delegated administrator's account became a part of the organization.
        /// </summary>
        [Output("joinedTimestamp")]
        public Output<string> JoinedTimestamp { get; private set; } = null!;

        /// <summary>
        /// The friendly name of the delegated administrator's account.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The service principal of the AWS service for which you want to make the member account a delegated administrator.
        /// </summary>
        [Output("servicePrincipal")]
        public Output<string> ServicePrincipal { get; private set; } = null!;

        /// <summary>
        /// The status of the delegated administrator's account in the organization.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a DelegatedAdministrator resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DelegatedAdministrator(string name, DelegatedAdministratorArgs args, CustomResourceOptions? options = null)
            : base("aws:organizations/delegatedAdministrator:DelegatedAdministrator", name, args ?? new DelegatedAdministratorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DelegatedAdministrator(string name, Input<string> id, DelegatedAdministratorState? state = null, CustomResourceOptions? options = null)
            : base("aws:organizations/delegatedAdministrator:DelegatedAdministrator", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DelegatedAdministrator resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DelegatedAdministrator Get(string name, Input<string> id, DelegatedAdministratorState? state = null, CustomResourceOptions? options = null)
        {
            return new DelegatedAdministrator(name, id, state, options);
        }
    }

    public sealed class DelegatedAdministratorArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account ID number of the member account in the organization to register as a delegated administrator.
        /// </summary>
        [Input("accountId", required: true)]
        public Input<string> AccountId { get; set; } = null!;

        /// <summary>
        /// The service principal of the AWS service for which you want to make the member account a delegated administrator.
        /// </summary>
        [Input("servicePrincipal", required: true)]
        public Input<string> ServicePrincipal { get; set; } = null!;

        public DelegatedAdministratorArgs()
        {
        }
    }

    public sealed class DelegatedAdministratorState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account ID number of the member account in the organization to register as a delegated administrator.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the delegated administrator's account.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The date when the account was made a delegated administrator.
        /// </summary>
        [Input("delegationEnabledDate")]
        public Input<string>? DelegationEnabledDate { get; set; }

        /// <summary>
        /// The email address that is associated with the delegated administrator's AWS account.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The method by which the delegated administrator's account joined the organization.
        /// </summary>
        [Input("joinedMethod")]
        public Input<string>? JoinedMethod { get; set; }

        /// <summary>
        /// The date when the delegated administrator's account became a part of the organization.
        /// </summary>
        [Input("joinedTimestamp")]
        public Input<string>? JoinedTimestamp { get; set; }

        /// <summary>
        /// The friendly name of the delegated administrator's account.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The service principal of the AWS service for which you want to make the member account a delegated administrator.
        /// </summary>
        [Input("servicePrincipal")]
        public Input<string>? ServicePrincipal { get; set; }

        /// <summary>
        /// The status of the delegated administrator's account in the organization.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public DelegatedAdministratorState()
        {
        }
    }
}
