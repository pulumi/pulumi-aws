// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Organizations
{
    /// <summary>
    /// Provides a resource to create an organizational unit.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.Organizations.OrganizationalUnit("example", new Aws.Organizations.OrganizationalUnitArgs
    ///         {
    ///             ParentId = aws_organizations_organization.Example.Roots[0].Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// AWS Organizations Organizational Units can be imported by using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:organizations/organizationalUnit:OrganizationalUnit example ou-1234567
    /// ```
    /// </summary>
    public partial class OrganizationalUnit : Pulumi.CustomResource
    {
        /// <summary>
        /// List of child accounts for this Organizational Unit. Does not return account information for child Organizational Units. All elements have these attributes:
        /// </summary>
        [Output("accounts")]
        public Output<ImmutableArray<Outputs.OrganizationalUnitAccount>> Accounts { get; private set; } = null!;

        /// <summary>
        /// ARN of the organizational unit
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The name for the organizational unit
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// ID of the parent organizational unit, which may be the root
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationalUnit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationalUnit(string name, OrganizationalUnitArgs args, CustomResourceOptions? options = null)
            : base("aws:organizations/organizationalUnit:OrganizationalUnit", name, args ?? new OrganizationalUnitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationalUnit(string name, Input<string> id, OrganizationalUnitState? state = null, CustomResourceOptions? options = null)
            : base("aws:organizations/organizationalUnit:OrganizationalUnit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationalUnit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationalUnit Get(string name, Input<string> id, OrganizationalUnitState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationalUnit(name, id, state, options);
        }
    }

    public sealed class OrganizationalUnitArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name for the organizational unit
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the parent organizational unit, which may be the root
        /// </summary>
        [Input("parentId", required: true)]
        public Input<string> ParentId { get; set; } = null!;

        public OrganizationalUnitArgs()
        {
        }
    }

    public sealed class OrganizationalUnitState : Pulumi.ResourceArgs
    {
        [Input("accounts")]
        private InputList<Inputs.OrganizationalUnitAccountGetArgs>? _accounts;

        /// <summary>
        /// List of child accounts for this Organizational Unit. Does not return account information for child Organizational Units. All elements have these attributes:
        /// </summary>
        public InputList<Inputs.OrganizationalUnitAccountGetArgs> Accounts
        {
            get => _accounts ?? (_accounts = new InputList<Inputs.OrganizationalUnitAccountGetArgs>());
            set => _accounts = value;
        }

        /// <summary>
        /// ARN of the organizational unit
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The name for the organizational unit
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// ID of the parent organizational unit, which may be the root
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        public OrganizationalUnitState()
        {
        }
    }
}
