// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Organizations
{
    public static class GetDelegatedAdministrators
    {
        /// <summary>
        /// Get a list the AWS accounts that are designated as delegated administrators in this organization
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Organizations.GetDelegatedAdministrators.InvokeAsync(new Aws.Organizations.GetDelegatedAdministratorsArgs
        ///         {
        ///             ServicePrincipal = "SERVICE PRINCIPAL",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDelegatedAdministratorsResult> InvokeAsync(GetDelegatedAdministratorsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDelegatedAdministratorsResult>("aws:organizations/getDelegatedAdministrators:getDelegatedAdministrators", args ?? new GetDelegatedAdministratorsArgs(), options.WithDefaults());

        /// <summary>
        /// Get a list the AWS accounts that are designated as delegated administrators in this organization
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Organizations.GetDelegatedAdministrators.InvokeAsync(new Aws.Organizations.GetDelegatedAdministratorsArgs
        ///         {
        ///             ServicePrincipal = "SERVICE PRINCIPAL",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDelegatedAdministratorsResult> Invoke(GetDelegatedAdministratorsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDelegatedAdministratorsResult>("aws:organizations/getDelegatedAdministrators:getDelegatedAdministrators", args ?? new GetDelegatedAdministratorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDelegatedAdministratorsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies a service principal name. If specified, then the operation lists the delegated administrators only for the specified service. If you don't specify a service principal, the operation lists all delegated administrators for all services in your organization.
        /// </summary>
        [Input("servicePrincipal")]
        public string? ServicePrincipal { get; set; }

        public GetDelegatedAdministratorsArgs()
        {
        }
    }

    public sealed class GetDelegatedAdministratorsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specifies a service principal name. If specified, then the operation lists the delegated administrators only for the specified service. If you don't specify a service principal, the operation lists all delegated administrators for all services in your organization.
        /// </summary>
        [Input("servicePrincipal")]
        public Input<string>? ServicePrincipal { get; set; }

        public GetDelegatedAdministratorsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDelegatedAdministratorsResult
    {
        /// <summary>
        /// The list of delegated administrators in your organization, which have the following attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDelegatedAdministratorsDelegatedAdministratorResult> DelegatedAdministrators;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? ServicePrincipal;

        [OutputConstructor]
        private GetDelegatedAdministratorsResult(
            ImmutableArray<Outputs.GetDelegatedAdministratorsDelegatedAdministratorResult> delegatedAdministrators,

            string id,

            string? servicePrincipal)
        {
            DelegatedAdministrators = delegatedAdministrators;
            Id = id;
            ServicePrincipal = servicePrincipal;
        }
    }
}
