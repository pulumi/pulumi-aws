// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Organizations
{
    public static class GetOrganization
    {
        /// <summary>
        /// Get information about the organization that the user's account belongs to
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### List all account IDs for the organization
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.organizations.getOrganization({});
        /// export const accountIds = example.then(example =&gt; example.accounts.map(__item =&gt; __item.id));
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.organizations.get_organization()
        /// pulumi.export("accountIds", [__item.id for __item in example.accounts])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Organizations.GetOrganization.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["accountIds"] = example.Apply(getOrganizationResult =&gt; getOrganizationResult.Accounts).Select(__item =&gt; __item.Id).ToList(),
        ///     };
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/organizations"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		example, err := organizations.LookupOrganization(ctx, nil, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		var splat0 []*string
        /// 		for _, val0 := range example.Accounts {
        /// 			splat0 = append(splat0, val0.Id)
        /// 		}
        /// 		ctx.Export("accountIds", splat0)
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.organizations.OrganizationsFunctions;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = OrganizationsFunctions.getOrganization();
        /// 
        ///         ctx.export("accountIds", example.applyValue(getOrganizationResult -&gt; getOrganizationResult.accounts()).stream().map(element -&gt; element.id()).collect(toList()));
        ///     }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### SNS topic that can be interacted by the organization only
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.organizations.getOrganization({});
        /// const snsTopic = new aws.sns.Topic("snsTopic", {});
        /// const snsTopicPolicyPolicyDocument = pulumi.all([example, snsTopic.arn]).apply(([example, arn]) =&gt; aws.iam.getPolicyDocumentOutput({
        ///     statements: [{
        ///         effect: "Allow",
        ///         actions: [
        ///             "SNS:Subscribe",
        ///             "SNS:Publish",
        ///         ],
        ///         conditions: [{
        ///             test: "StringEquals",
        ///             variable: "aws:PrincipalOrgID",
        ///             values: [example.id],
        ///         }],
        ///         principals: [{
        ///             type: "AWS",
        ///             identifiers: ["*"],
        ///         }],
        ///         resources: [arn],
        ///     }],
        /// }));
        /// const snsTopicPolicyTopicPolicy = new aws.sns.TopicPolicy("snsTopicPolicyTopicPolicy", {
        ///     arn: snsTopic.arn,
        ///     policy: snsTopicPolicyPolicyDocument.apply(snsTopicPolicyPolicyDocument =&gt; snsTopicPolicyPolicyDocument.json),
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.organizations.get_organization()
        /// sns_topic = aws.sns.Topic("snsTopic")
        /// sns_topic_policy_policy_document = sns_topic.arn.apply(lambda arn: aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        ///     effect="Allow",
        ///     actions=[
        ///         "SNS:Subscribe",
        ///         "SNS:Publish",
        ///     ],
        ///     conditions=[aws.iam.GetPolicyDocumentStatementConditionArgs(
        ///         test="StringEquals",
        ///         variable="aws:PrincipalOrgID",
        ///         values=[example.id],
        ///     )],
        ///     principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
        ///         type="AWS",
        ///         identifiers=["*"],
        ///     )],
        ///     resources=[arn],
        /// )]))
        /// sns_topic_policy_topic_policy = aws.sns.TopicPolicy("snsTopicPolicyTopicPolicy",
        ///     arn=sns_topic.arn,
        ///     policy=sns_topic_policy_policy_document.json)
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Organizations.GetOrganization.Invoke();
        /// 
        ///     var snsTopic = new Aws.Sns.Topic("snsTopic");
        /// 
        ///     var snsTopicPolicyPolicyDocument = Aws.Iam.GetPolicyDocument.Invoke(new()
        ///     {
        ///         Statements = new[]
        ///         {
        ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
        ///             {
        ///                 Effect = "Allow",
        ///                 Actions = new[]
        ///                 {
        ///                     "SNS:Subscribe",
        ///                     "SNS:Publish",
        ///                 },
        ///                 Conditions = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementConditionInputArgs
        ///                     {
        ///                         Test = "StringEquals",
        ///                         Variable = "aws:PrincipalOrgID",
        ///                         Values = new[]
        ///                         {
        ///                             example.Apply(getOrganizationResult =&gt; getOrganizationResult.Id),
        ///                         },
        ///                     },
        ///                 },
        ///                 Principals = new[]
        ///                 {
        ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
        ///                     {
        ///                         Type = "AWS",
        ///                         Identifiers = new[]
        ///                         {
        ///                             "*",
        ///                         },
        ///                     },
        ///                 },
        ///                 Resources = new[]
        ///                 {
        ///                     snsTopic.Arn,
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var snsTopicPolicyTopicPolicy = new Aws.Sns.TopicPolicy("snsTopicPolicyTopicPolicy", new()
        ///     {
        ///         Arn = snsTopic.Arn,
        ///         Policy = snsTopicPolicyPolicyDocument.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 
        /// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/iam"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/organizations"
        /// "github.com/pulumi/pulumi-aws/sdk/v5/go/aws/sns"
        /// )
        /// func main() {
        /// pulumi.Run(func(ctx *pulumi.Context) error {
        /// example, err := organizations.LookupOrganization(ctx, nil, nil);
        /// if err != nil {
        /// return err
        /// }
        /// snsTopic, err := sns.NewTopic(ctx, "snsTopic", nil)
        /// if err != nil {
        /// return err
        /// }
        /// snsTopicPolicyPolicyDocument := snsTopic.Arn.ApplyT(func(arn string) (iam.GetPolicyDocumentResult, error) {
        /// return iam.GetPolicyDocumentOutput(ctx, iam.GetPolicyDocumentOutputArgs{
        /// Statements: []iam.GetPolicyDocumentStatement{
        /// {
        /// Effect: "Allow",
        /// Actions: []string{
        /// "SNS:Subscribe",
        /// "SNS:Publish",
        /// },
        /// Conditions: []iam.GetPolicyDocumentStatementCondition{
        /// {
        /// Test: "StringEquals",
        /// Variable: "aws:PrincipalOrgID",
        /// Values: interface{}{
        /// example.Id,
        /// },
        /// },
        /// },
        /// Principals: []iam.GetPolicyDocumentStatementPrincipal{
        /// {
        /// Type: "AWS",
        /// Identifiers: []string{
        /// "*",
        /// },
        /// },
        /// },
        /// Resources: interface{}{
        /// arn,
        /// },
        /// },
        /// },
        /// }, nil), nil
        /// }).(iam.GetPolicyDocumentResultOutput)
        /// _, err = sns.NewTopicPolicy(ctx, "snsTopicPolicyTopicPolicy", &amp;sns.TopicPolicyArgs{
        /// Arn: snsTopic.Arn,
        /// Policy: snsTopicPolicyPolicyDocument.ApplyT(func(snsTopicPolicyPolicyDocument iam.GetPolicyDocumentResult) (*string, error) {
        /// return &amp;snsTopicPolicyPolicyDocument.Json, nil
        /// }).(pulumi.StringPtrOutput),
        /// })
        /// if err != nil {
        /// return err
        /// }
        /// return nil
        /// })
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.organizations.OrganizationsFunctions;
        /// import com.pulumi.aws.sns.Topic;
        /// import com.pulumi.aws.iam.IamFunctions;
        /// import com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;
        /// import com.pulumi.aws.sns.TopicPolicy;
        /// import com.pulumi.aws.sns.TopicPolicyArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = OrganizationsFunctions.getOrganization();
        /// 
        ///         var snsTopic = new Topic("snsTopic");
        /// 
        ///         final var snsTopicPolicyPolicyDocument = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()
        ///             .statements(GetPolicyDocumentStatementArgs.builder()
        ///                 .effect("Allow")
        ///                 .actions(                
        ///                     "SNS:Subscribe",
        ///                     "SNS:Publish")
        ///                 .conditions(GetPolicyDocumentStatementConditionArgs.builder()
        ///                     .test("StringEquals")
        ///                     .variable("aws:PrincipalOrgID")
        ///                     .values(example.applyValue(getOrganizationResult -&gt; getOrganizationResult.id()))
        ///                     .build())
        ///                 .principals(GetPolicyDocumentStatementPrincipalArgs.builder()
        ///                     .type("AWS")
        ///                     .identifiers("*")
        ///                     .build())
        ///                 .resources(snsTopic.arn())
        ///                 .build())
        ///             .build());
        /// 
        ///         var snsTopicPolicyTopicPolicy = new TopicPolicy("snsTopicPolicyTopicPolicy", TopicPolicyArgs.builder()        
        ///             .arn(snsTopic.arn())
        ///             .policy(snsTopicPolicyPolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult).applyValue(snsTopicPolicyPolicyDocument -&gt; snsTopicPolicyPolicyDocument.applyValue(getPolicyDocumentResult -&gt; getPolicyDocumentResult.json())))
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// resources:
        ///   snsTopic:
        ///     type: aws:sns:Topic
        ///   snsTopicPolicyTopicPolicy:
        ///     type: aws:sns:TopicPolicy
        ///     properties:
        ///       arn: ${snsTopic.arn}
        ///       policy: ${snsTopicPolicyPolicyDocument.json}
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:organizations:getOrganization
        ///       Arguments: {}
        ///   snsTopicPolicyPolicyDocument:
        ///     fn::invoke:
        ///       Function: aws:iam:getPolicyDocument
        ///       Arguments:
        ///         statements:
        ///           - effect: Allow
        ///             actions:
        ///               - SNS:Subscribe
        ///               - SNS:Publish
        ///             conditions:
        ///               - test: StringEquals
        ///                 variable: aws:PrincipalOrgID
        ///                 values:
        ///                   - ${example.id}
        ///             principals:
        ///               - type: AWS
        ///                 identifiers:
        ///                   - '*'
        ///             resources:
        ///               - ${snsTopic.arn}
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOrganizationResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationResult>("aws:organizations/getOrganization:getOrganization", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetOrganizationResult
    {
        /// <summary>
        /// List of organization accounts including the master account. For a list excluding the master account, see the `non_master_accounts` attribute. All elements have these attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrganizationAccountResult> Accounts;
        /// <summary>
        /// ARN of the root
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// A list of AWS service principal names that have integration enabled with your organization. Organization must have `feature_set` set to `ALL`. For additional information, see the [AWS Organizations User Guide](https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html).
        /// </summary>
        public readonly ImmutableArray<string> AwsServiceAccessPrincipals;
        /// <summary>
        /// A list of Organizations policy types that are enabled in the Organization Root. Organization must have `feature_set` set to `ALL`. For additional information about valid policy types (e.g., `SERVICE_CONTROL_POLICY`), see the [AWS Organizations API Reference](https://docs.aws.amazon.com/organizations/latest/APIReference/API_EnablePolicyType.html).
        /// </summary>
        public readonly ImmutableArray<string> EnabledPolicyTypes;
        /// <summary>
        /// FeatureSet of the organization.
        /// </summary>
        public readonly string FeatureSet;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARN of the account that is designated as the master account for the organization.
        /// </summary>
        public readonly string MasterAccountArn;
        /// <summary>
        /// The email address that is associated with the AWS account that is designated as the master account for the organization.
        /// </summary>
        public readonly string MasterAccountEmail;
        /// <summary>
        /// Unique identifier (ID) of the master account of an organization.
        /// </summary>
        public readonly string MasterAccountId;
        /// <summary>
        /// List of organization accounts excluding the master account. For a list including the master account, see the `accounts` attribute. All elements have these attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrganizationNonMasterAccountResult> NonMasterAccounts;
        /// <summary>
        /// List of organization roots. All elements have these attributes:
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOrganizationRootResult> Roots;

        [OutputConstructor]
        private GetOrganizationResult(
            ImmutableArray<Outputs.GetOrganizationAccountResult> accounts,

            string arn,

            ImmutableArray<string> awsServiceAccessPrincipals,

            ImmutableArray<string> enabledPolicyTypes,

            string featureSet,

            string id,

            string masterAccountArn,

            string masterAccountEmail,

            string masterAccountId,

            ImmutableArray<Outputs.GetOrganizationNonMasterAccountResult> nonMasterAccounts,

            ImmutableArray<Outputs.GetOrganizationRootResult> roots)
        {
            Accounts = accounts;
            Arn = arn;
            AwsServiceAccessPrincipals = awsServiceAccessPrincipals;
            EnabledPolicyTypes = enabledPolicyTypes;
            FeatureSet = featureSet;
            Id = id;
            MasterAccountArn = masterAccountArn;
            MasterAccountEmail = masterAccountEmail;
            MasterAccountId = masterAccountId;
            NonMasterAccounts = nonMasterAccounts;
            Roots = roots;
        }
    }
}
