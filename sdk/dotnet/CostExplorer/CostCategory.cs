// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CostExplorer
{
    /// <summary>
    /// Provides a CE Cost Category.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.CostExplorer.CostCategory("test", new()
    ///     {
    ///         Rules = new[]
    ///         {
    ///             new Aws.CostExplorer.Inputs.CostCategoryRuleArgs
    ///             {
    ///                 Rule = new Aws.CostExplorer.Inputs.CostCategoryRuleRuleArgs
    ///                 {
    ///                     Dimension = new Aws.CostExplorer.Inputs.CostCategoryRuleRuleDimensionArgs
    ///                     {
    ///                         Key = "LINKED_ACCOUNT_NAME",
    ///                         MatchOptions = new[]
    ///                         {
    ///                             "ENDS_WITH",
    ///                         },
    ///                         Values = new[]
    ///                         {
    ///                             "-prod",
    ///                         },
    ///                     },
    ///                 },
    ///                 Value = "production",
    ///             },
    ///             new Aws.CostExplorer.Inputs.CostCategoryRuleArgs
    ///             {
    ///                 Rule = new Aws.CostExplorer.Inputs.CostCategoryRuleRuleArgs
    ///                 {
    ///                     Dimension = new Aws.CostExplorer.Inputs.CostCategoryRuleRuleDimensionArgs
    ///                     {
    ///                         Key = "LINKED_ACCOUNT_NAME",
    ///                         MatchOptions = new[]
    ///                         {
    ///                             "ENDS_WITH",
    ///                         },
    ///                         Values = new[]
    ///                         {
    ///                             "-stg",
    ///                         },
    ///                     },
    ///                 },
    ///                 Value = "staging",
    ///             },
    ///             new Aws.CostExplorer.Inputs.CostCategoryRuleArgs
    ///             {
    ///                 Rule = new Aws.CostExplorer.Inputs.CostCategoryRuleRuleArgs
    ///                 {
    ///                     Dimension = new Aws.CostExplorer.Inputs.CostCategoryRuleRuleDimensionArgs
    ///                     {
    ///                         Key = "LINKED_ACCOUNT_NAME",
    ///                         MatchOptions = new[]
    ///                         {
    ///                             "ENDS_WITH",
    ///                         },
    ///                         Values = new[]
    ///                         {
    ///                             "-dev",
    ///                         },
    ///                     },
    ///                 },
    ///                 Value = "testing",
    ///             },
    ///         },
    ///         RuleVersion = "CostCategoryExpression.v1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_ce_cost_category` can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:costexplorer/costCategory:CostCategory example costCategoryARN
    /// ```
    /// </summary>
    [AwsResourceType("aws:costexplorer/costCategory:CostCategory")]
    public partial class CostCategory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// ARN of the cost category.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Default value for the cost category.
        /// </summary>
        [Output("defaultValue")]
        public Output<string?> DefaultValue { get; private set; } = null!;

        /// <summary>
        /// Effective end data of your Cost Category.
        /// </summary>
        [Output("effectiveEnd")]
        public Output<string> EffectiveEnd { get; private set; } = null!;

        /// <summary>
        /// The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future. For example `2022-11-01T00:00:00Z`.
        /// </summary>
        [Output("effectiveStart")]
        public Output<string> EffectiveStart { get; private set; } = null!;

        /// <summary>
        /// Unique name for the Cost Category.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Rule schema version in this particular Cost Category.
        /// </summary>
        [Output("ruleVersion")]
        public Output<string> RuleVersion { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the `Expression` object used to categorize costs. See below.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.CostCategoryRule>> Rules { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the split charge rules used to allocate your charges between your Cost Category values. See below.
        /// </summary>
        [Output("splitChargeRules")]
        public Output<ImmutableArray<Outputs.CostCategorySplitChargeRule>> SplitChargeRules { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the specific `Tag` to use for `Expression`. See below.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a CostCategory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CostCategory(string name, CostCategoryArgs args, CustomResourceOptions? options = null)
            : base("aws:costexplorer/costCategory:CostCategory", name, args ?? new CostCategoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CostCategory(string name, Input<string> id, CostCategoryState? state = null, CustomResourceOptions? options = null)
            : base("aws:costexplorer/costCategory:CostCategory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CostCategory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CostCategory Get(string name, Input<string> id, CostCategoryState? state = null, CustomResourceOptions? options = null)
        {
            return new CostCategory(name, id, state, options);
        }
    }

    public sealed class CostCategoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Default value for the cost category.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future. For example `2022-11-01T00:00:00Z`.
        /// </summary>
        [Input("effectiveStart")]
        public Input<string>? EffectiveStart { get; set; }

        /// <summary>
        /// Unique name for the Cost Category.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Rule schema version in this particular Cost Category.
        /// </summary>
        [Input("ruleVersion", required: true)]
        public Input<string> RuleVersion { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<Inputs.CostCategoryRuleArgs>? _rules;

        /// <summary>
        /// Configuration block for the `Expression` object used to categorize costs. See below.
        /// </summary>
        public InputList<Inputs.CostCategoryRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.CostCategoryRuleArgs>());
            set => _rules = value;
        }

        [Input("splitChargeRules")]
        private InputList<Inputs.CostCategorySplitChargeRuleArgs>? _splitChargeRules;

        /// <summary>
        /// Configuration block for the split charge rules used to allocate your charges between your Cost Category values. See below.
        /// </summary>
        public InputList<Inputs.CostCategorySplitChargeRuleArgs> SplitChargeRules
        {
            get => _splitChargeRules ?? (_splitChargeRules = new InputList<Inputs.CostCategorySplitChargeRuleArgs>());
            set => _splitChargeRules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Configuration block for the specific `Tag` to use for `Expression`. See below.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public CostCategoryArgs()
        {
        }
        public static new CostCategoryArgs Empty => new CostCategoryArgs();
    }

    public sealed class CostCategoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// ARN of the cost category.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Default value for the cost category.
        /// </summary>
        [Input("defaultValue")]
        public Input<string>? DefaultValue { get; set; }

        /// <summary>
        /// Effective end data of your Cost Category.
        /// </summary>
        [Input("effectiveEnd")]
        public Input<string>? EffectiveEnd { get; set; }

        /// <summary>
        /// The Cost Category's effective start date. It can only be a billing start date (first day of the month). If the date isn't provided, it's the first day of the current month. Dates can't be before the previous twelve months, or in the future. For example `2022-11-01T00:00:00Z`.
        /// </summary>
        [Input("effectiveStart")]
        public Input<string>? EffectiveStart { get; set; }

        /// <summary>
        /// Unique name for the Cost Category.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Rule schema version in this particular Cost Category.
        /// </summary>
        [Input("ruleVersion")]
        public Input<string>? RuleVersion { get; set; }

        [Input("rules")]
        private InputList<Inputs.CostCategoryRuleGetArgs>? _rules;

        /// <summary>
        /// Configuration block for the `Expression` object used to categorize costs. See below.
        /// </summary>
        public InputList<Inputs.CostCategoryRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.CostCategoryRuleGetArgs>());
            set => _rules = value;
        }

        [Input("splitChargeRules")]
        private InputList<Inputs.CostCategorySplitChargeRuleGetArgs>? _splitChargeRules;

        /// <summary>
        /// Configuration block for the split charge rules used to allocate your charges between your Cost Category values. See below.
        /// </summary>
        public InputList<Inputs.CostCategorySplitChargeRuleGetArgs> SplitChargeRules
        {
            get => _splitChargeRules ?? (_splitChargeRules = new InputList<Inputs.CostCategorySplitChargeRuleGetArgs>());
            set => _splitChargeRules = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Configuration block for the specific `Tag` to use for `Expression`. See below.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public CostCategoryState()
        {
        }
        public static new CostCategoryState Empty => new CostCategoryState();
    }
}
