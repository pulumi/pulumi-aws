// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.WorkSpacesWeb
{
    /// <summary>
    /// Resource for managing an AWS WorkSpaces Web Session Logger.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleBucket = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "example-session-logs",
    ///     });
    /// 
    ///     var example = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "workspaces-web.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:PutObject",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     $"{exampleBucket.Arn}/*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleBucketPolicy = new Aws.S3.BucketPolicy("example", new()
    ///     {
    ///         Bucket = exampleBucket.Id,
    ///         Policy = example.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var exampleSessionLogger = new Aws.WorkSpacesWeb.SessionLogger("example", new()
    ///     {
    ///         DisplayName = "example-session-logger",
    ///         EventFilter = new Aws.WorkSpacesWeb.Inputs.SessionLoggerEventFilterArgs
    ///         {
    ///             All = null,
    ///         },
    ///         LogConfiguration = new Aws.WorkSpacesWeb.Inputs.SessionLoggerLogConfigurationArgs
    ///         {
    ///             S3 = new Aws.WorkSpacesWeb.Inputs.SessionLoggerLogConfigurationS3Args
    ///             {
    ///                 Bucket = exampleBucket.Id,
    ///                 FolderStructure = "Flat",
    ///                 LogFileFormat = "Json",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleBucketPolicy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Complete Configuration with KMS Encryption
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleBucket = new Aws.S3.Bucket("example", new()
    ///     {
    ///         BucketName = "example-session-logs",
    ///         ForceDestroy = true,
    ///     });
    /// 
    ///     var example = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Effect = "Allow",
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "workspaces-web.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "s3:PutObject",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     exampleBucket.Arn,
    ///                     $"{exampleBucket.Arn}/*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleBucketPolicy = new Aws.S3.BucketPolicy("example", new()
    ///     {
    ///         Bucket = exampleBucket.Id,
    ///         Policy = example.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var current = Aws.GetPartition.Invoke();
    /// 
    ///     var currentGetCallerIdentity = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var kmsKeyPolicy = Aws.Iam.GetPolicyDocument.Invoke(new()
    ///     {
    ///         Statements = new[]
    ///         {
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "AWS",
    ///                         Identifiers = new[]
    ///                         {
    ///                             $"arn:{current.Apply(getPartitionResult =&gt; getPartitionResult.Partition)}:iam::{currentGetCallerIdentity.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId)}:root",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "kms:*",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///             },
    ///             new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs
    ///             {
    ///                 Principals = new[]
    ///                 {
    ///                     new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs
    ///                     {
    ///                         Type = "Service",
    ///                         Identifiers = new[]
    ///                         {
    ///                             "workspaces-web.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///                 Actions = new[]
    ///                 {
    ///                     "kms:Encrypt",
    ///                     "kms:GenerateDataKey*",
    ///                     "kms:ReEncrypt*",
    ///                     "kms:Decrypt",
    ///                 },
    ///                 Resources = new[]
    ///                 {
    ///                     "*",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var exampleKey = new Aws.Kms.Key("example", new()
    ///     {
    ///         Description = "KMS key for WorkSpaces Web Session Logger",
    ///         Policy = kmsKeyPolicy.Apply(getPolicyDocumentResult =&gt; getPolicyDocumentResult.Json),
    ///     });
    /// 
    ///     var exampleSessionLogger = new Aws.WorkSpacesWeb.SessionLogger("example", new()
    ///     {
    ///         DisplayName = "example-session-logger",
    ///         CustomerManagedKey = exampleKey.Arn,
    ///         AdditionalEncryptionContext = 
    ///         {
    ///             { "Environment", "Production" },
    ///             { "Application", "WorkSpacesWeb" },
    ///         },
    ///         EventFilter = new Aws.WorkSpacesWeb.Inputs.SessionLoggerEventFilterArgs
    ///         {
    ///             Includes = new[]
    ///             {
    ///                 "SessionStart",
    ///                 "SessionEnd",
    ///             },
    ///         },
    ///         LogConfiguration = new Aws.WorkSpacesWeb.Inputs.SessionLoggerLogConfigurationArgs
    ///         {
    ///             S3 = new Aws.WorkSpacesWeb.Inputs.SessionLoggerLogConfigurationS3Args
    ///             {
    ///                 Bucket = exampleBucket.Id,
    ///                 BucketOwner = currentGetCallerIdentity.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///                 FolderStructure = "NestedByDate",
    ///                 KeyPrefix = "workspaces-web-logs/",
    ///                 LogFileFormat = "JsonLines",
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "example-session-logger" },
    ///             { "Environment", "Production" },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             exampleBucketPolicy,
    ///             exampleKey,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import WorkSpaces Web Session Logger using the `session_logger_arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:workspacesweb/sessionLogger:SessionLogger example arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:workspacesweb/sessionLogger:SessionLogger")]
    public partial class SessionLogger : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Map of additional encryption context key-value pairs.
        /// </summary>
        [Output("additionalEncryptionContext")]
        public Output<ImmutableDictionary<string, string>?> AdditionalEncryptionContext { get; private set; } = null!;

        /// <summary>
        /// List of ARNs of the web portals associated with the session logger.
        /// </summary>
        [Output("associatedPortalArns")]
        public Output<ImmutableArray<string>> AssociatedPortalArns { get; private set; } = null!;

        /// <summary>
        /// ARN of the customer managed KMS key used to encrypt sensitive information.
        /// </summary>
        [Output("customerManagedKey")]
        public Output<string?> CustomerManagedKey { get; private set; } = null!;

        /// <summary>
        /// Human-readable display name for the session logger resource. Forces replacement if changed.
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Event filter that determines which events are logged. See Event Filter below.
        /// </summary>
        [Output("eventFilter")]
        public Output<Outputs.SessionLoggerEventFilter?> EventFilter { get; private set; } = null!;

        /// <summary>
        /// Configuration block for specifying where logs are delivered. See Log Configuration below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("logConfiguration")]
        public Output<Outputs.SessionLoggerLogConfiguration?> LogConfiguration { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// ARN of the session logger.
        /// </summary>
        [Output("sessionLoggerArn")]
        public Output<string> SessionLoggerArn { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a SessionLogger resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SessionLogger(string name, SessionLoggerArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:workspacesweb/sessionLogger:SessionLogger", name, args ?? new SessionLoggerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SessionLogger(string name, Input<string> id, SessionLoggerState? state = null, CustomResourceOptions? options = null)
            : base("aws:workspacesweb/sessionLogger:SessionLogger", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SessionLogger resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SessionLogger Get(string name, Input<string> id, SessionLoggerState? state = null, CustomResourceOptions? options = null)
        {
            return new SessionLogger(name, id, state, options);
        }
    }

    public sealed class SessionLoggerArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalEncryptionContext")]
        private InputMap<string>? _additionalEncryptionContext;

        /// <summary>
        /// Map of additional encryption context key-value pairs.
        /// </summary>
        public InputMap<string> AdditionalEncryptionContext
        {
            get => _additionalEncryptionContext ?? (_additionalEncryptionContext = new InputMap<string>());
            set => _additionalEncryptionContext = value;
        }

        /// <summary>
        /// ARN of the customer managed KMS key used to encrypt sensitive information.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<string>? CustomerManagedKey { get; set; }

        /// <summary>
        /// Human-readable display name for the session logger resource. Forces replacement if changed.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Event filter that determines which events are logged. See Event Filter below.
        /// </summary>
        [Input("eventFilter")]
        public Input<Inputs.SessionLoggerEventFilterArgs>? EventFilter { get; set; }

        /// <summary>
        /// Configuration block for specifying where logs are delivered. See Log Configuration below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("logConfiguration")]
        public Input<Inputs.SessionLoggerLogConfigurationArgs>? LogConfiguration { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SessionLoggerArgs()
        {
        }
        public static new SessionLoggerArgs Empty => new SessionLoggerArgs();
    }

    public sealed class SessionLoggerState : global::Pulumi.ResourceArgs
    {
        [Input("additionalEncryptionContext")]
        private InputMap<string>? _additionalEncryptionContext;

        /// <summary>
        /// Map of additional encryption context key-value pairs.
        /// </summary>
        public InputMap<string> AdditionalEncryptionContext
        {
            get => _additionalEncryptionContext ?? (_additionalEncryptionContext = new InputMap<string>());
            set => _additionalEncryptionContext = value;
        }

        [Input("associatedPortalArns")]
        private InputList<string>? _associatedPortalArns;

        /// <summary>
        /// List of ARNs of the web portals associated with the session logger.
        /// </summary>
        public InputList<string> AssociatedPortalArns
        {
            get => _associatedPortalArns ?? (_associatedPortalArns = new InputList<string>());
            set => _associatedPortalArns = value;
        }

        /// <summary>
        /// ARN of the customer managed KMS key used to encrypt sensitive information.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<string>? CustomerManagedKey { get; set; }

        /// <summary>
        /// Human-readable display name for the session logger resource. Forces replacement if changed.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Event filter that determines which events are logged. See Event Filter below.
        /// </summary>
        [Input("eventFilter")]
        public Input<Inputs.SessionLoggerEventFilterGetArgs>? EventFilter { get; set; }

        /// <summary>
        /// Configuration block for specifying where logs are delivered. See Log Configuration below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("logConfiguration")]
        public Input<Inputs.SessionLoggerLogConfigurationGetArgs>? LogConfiguration { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// ARN of the session logger.
        /// </summary>
        [Input("sessionLoggerArn")]
        public Input<string>? SessionLoggerArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `DefaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `DefaultTags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public SessionLoggerState()
        {
        }
        public static new SessionLoggerState Empty => new SessionLoggerState();
    }
}
