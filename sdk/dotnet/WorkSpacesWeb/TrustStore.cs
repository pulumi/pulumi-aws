// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.WorkSpacesWeb
{
    /// <summary>
    /// Resource for managing an AWS WorkSpaces Web Trust Store.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WorkSpacesWeb.TrustStore("example", new()
    ///     {
    ///         Certificates = new[]
    ///         {
    ///             new Aws.WorkSpacesWeb.Inputs.TrustStoreCertificateArgs
    ///             {
    ///                 Body = Std.File.Invoke(new()
    ///                 {
    ///                     Input = "certificate.pem",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Multiple Certificates
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Std = Pulumi.Std;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.WorkSpacesWeb.TrustStore("example", new()
    ///     {
    ///         Certificates = new[]
    ///         {
    ///             new Aws.WorkSpacesWeb.Inputs.TrustStoreCertificateArgs
    ///             {
    ///                 Body = Std.File.Invoke(new()
    ///                 {
    ///                     Input = "certificate1.pem",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///             new Aws.WorkSpacesWeb.Inputs.TrustStoreCertificateArgs
    ///             {
    ///                 Body = Std.File.Invoke(new()
    ///                 {
    ///                     Input = "certificate2.pem",
    ///                 }).Apply(invoke =&gt; invoke.Result),
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "example-trust-store" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import WorkSpaces Web Trust Store using the `trust_store_arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:workspacesweb/trustStore:TrustStore example arn:aws:workspaces-web:us-west-2:123456789012:trustStore/trust_store-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:workspacesweb/trustStore:TrustStore")]
    public partial class TrustStore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of ARNs of the web portals associated with the trust store.
        /// </summary>
        [Output("associatedPortalArns")]
        public Output<ImmutableArray<string>> AssociatedPortalArns { get; private set; } = null!;

        /// <summary>
        /// Set of certificates to include in the trust store. See Certificate below.
        /// </summary>
        [Output("certificates")]
        public Output<ImmutableArray<Outputs.TrustStoreCertificate>> Certificates { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// ARN of the trust store.
        /// </summary>
        [Output("trustStoreArn")]
        public Output<string> TrustStoreArn { get; private set; } = null!;


        /// <summary>
        /// Create a TrustStore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrustStore(string name, TrustStoreArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:workspacesweb/trustStore:TrustStore", name, args ?? new TrustStoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrustStore(string name, Input<string> id, TrustStoreState? state = null, CustomResourceOptions? options = null)
            : base("aws:workspacesweb/trustStore:TrustStore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrustStore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrustStore Get(string name, Input<string> id, TrustStoreState? state = null, CustomResourceOptions? options = null)
        {
            return new TrustStore(name, id, state, options);
        }
    }

    public sealed class TrustStoreArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificates")]
        private InputList<Inputs.TrustStoreCertificateArgs>? _certificates;

        /// <summary>
        /// Set of certificates to include in the trust store. See Certificate below.
        /// </summary>
        public InputList<Inputs.TrustStoreCertificateArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.TrustStoreCertificateArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public TrustStoreArgs()
        {
        }
        public static new TrustStoreArgs Empty => new TrustStoreArgs();
    }

    public sealed class TrustStoreState : global::Pulumi.ResourceArgs
    {
        [Input("associatedPortalArns")]
        private InputList<string>? _associatedPortalArns;

        /// <summary>
        /// List of ARNs of the web portals associated with the trust store.
        /// </summary>
        public InputList<string> AssociatedPortalArns
        {
            get => _associatedPortalArns ?? (_associatedPortalArns = new InputList<string>());
            set => _associatedPortalArns = value;
        }

        [Input("certificates")]
        private InputList<Inputs.TrustStoreCertificateGetArgs>? _certificates;

        /// <summary>
        /// Set of certificates to include in the trust store. See Certificate below.
        /// </summary>
        public InputList<Inputs.TrustStoreCertificateGetArgs> Certificates
        {
            get => _certificates ?? (_certificates = new InputList<Inputs.TrustStoreCertificateGetArgs>());
            set => _certificates = value;
        }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// ARN of the trust store.
        /// </summary>
        [Input("trustStoreArn")]
        public Input<string>? TrustStoreArn { get; set; }

        public TrustStoreState()
        {
        }
        public static new TrustStoreState Empty => new TrustStoreState();
    }
}
