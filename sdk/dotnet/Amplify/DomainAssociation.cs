// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Amplify
{
    /// <summary>
    /// Provides an Amplify Domain Association resource.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var exampleApp = new Aws.Amplify.App("exampleApp", new Aws.Amplify.AppArgs
    ///         {
    ///             CustomRules = 
    ///             {
    ///                 new Aws.Amplify.Inputs.AppCustomRuleArgs
    ///                 {
    ///                     Source = "https://example.com",
    ///                     Status = "302",
    ///                     Target = "https://www.example.com",
    ///                 },
    ///             },
    ///         });
    ///         var master = new Aws.Amplify.Branch("master", new Aws.Amplify.BranchArgs
    ///         {
    ///             AppId = exampleApp.Id,
    ///             BranchName = "master",
    ///         });
    ///         var exampleDomainAssociation = new Aws.Amplify.DomainAssociation("exampleDomainAssociation", new Aws.Amplify.DomainAssociationArgs
    ///         {
    ///             AppId = exampleApp.Id,
    ///             DomainName = "example.com",
    ///             SubDomains = 
    ///             {
    ///                 new Aws.Amplify.Inputs.DomainAssociationSubDomainArgs
    ///                 {
    ///                     BranchName = master.BranchName,
    ///                     Prefix = "",
    ///                 },
    ///                 new Aws.Amplify.Inputs.DomainAssociationSubDomainArgs
    ///                 {
    ///                     BranchName = master.BranchName,
    ///                     Prefix = "www",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Amplify domain association can be imported using `app_id` and `domain_name`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:amplify/domainAssociation:DomainAssociation app d2ypk4k47z8u6/example.com
    /// ```
    /// </summary>
    [AwsResourceType("aws:amplify/domainAssociation:DomainAssociation")]
    public partial class DomainAssociation : Pulumi.CustomResource
    {
        /// <summary>
        /// The unique ID for an Amplify app.
        /// </summary>
        [Output("appId")]
        public Output<string> AppId { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) for the domain association.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The DNS record for certificate verification.
        /// </summary>
        [Output("certificateVerificationDnsRecord")]
        public Output<string> CertificateVerificationDnsRecord { get; private set; } = null!;

        /// <summary>
        /// The domain name for the domain association.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// The setting for the subdomain. Documented below.
        /// </summary>
        [Output("subDomains")]
        public Output<ImmutableArray<Outputs.DomainAssociationSubDomain>> SubDomains { get; private set; } = null!;

        /// <summary>
        /// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [Output("waitForVerification")]
        public Output<bool?> WaitForVerification { get; private set; } = null!;


        /// <summary>
        /// Create a DomainAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainAssociation(string name, DomainAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:amplify/domainAssociation:DomainAssociation", name, args ?? new DomainAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainAssociation(string name, Input<string> id, DomainAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:amplify/domainAssociation:DomainAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainAssociation Get(string name, Input<string> id, DomainAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainAssociation(name, id, state, options);
        }
    }

    public sealed class DomainAssociationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique ID for an Amplify app.
        /// </summary>
        [Input("appId", required: true)]
        public Input<string> AppId { get; set; } = null!;

        /// <summary>
        /// The domain name for the domain association.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("subDomains", required: true)]
        private InputList<Inputs.DomainAssociationSubDomainArgs>? _subDomains;

        /// <summary>
        /// The setting for the subdomain. Documented below.
        /// </summary>
        public InputList<Inputs.DomainAssociationSubDomainArgs> SubDomains
        {
            get => _subDomains ?? (_subDomains = new InputList<Inputs.DomainAssociationSubDomainArgs>());
            set => _subDomains = value;
        }

        /// <summary>
        /// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [Input("waitForVerification")]
        public Input<bool>? WaitForVerification { get; set; }

        public DomainAssociationArgs()
        {
        }
    }

    public sealed class DomainAssociationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique ID for an Amplify app.
        /// </summary>
        [Input("appId")]
        public Input<string>? AppId { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) for the domain association.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The DNS record for certificate verification.
        /// </summary>
        [Input("certificateVerificationDnsRecord")]
        public Input<string>? CertificateVerificationDnsRecord { get; set; }

        /// <summary>
        /// The domain name for the domain association.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        [Input("subDomains")]
        private InputList<Inputs.DomainAssociationSubDomainGetArgs>? _subDomains;

        /// <summary>
        /// The setting for the subdomain. Documented below.
        /// </summary>
        public InputList<Inputs.DomainAssociationSubDomainGetArgs> SubDomains
        {
            get => _subDomains ?? (_subDomains = new InputList<Inputs.DomainAssociationSubDomainGetArgs>());
            set => _subDomains = value;
        }

        /// <summary>
        /// If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.
        /// </summary>
        [Input("waitForVerification")]
        public Input<bool>? WaitForVerification { get; set; }

        public DomainAssociationState()
        {
        }
    }
}
