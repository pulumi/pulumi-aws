// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CloudTrail
{
    [AwsResourceType("aws:cloudtrail/trail:Trail")]
    public partial class Trail : global::Pulumi.CustomResource
    {
        [Output("advancedEventSelectors")]
        public Output<ImmutableArray<Outputs.TrailAdvancedEventSelector>> AdvancedEventSelectors { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("cloudWatchLogsGroupArn")]
        public Output<string?> CloudWatchLogsGroupArn { get; private set; } = null!;

        [Output("cloudWatchLogsRoleArn")]
        public Output<string?> CloudWatchLogsRoleArn { get; private set; } = null!;

        [Output("enableLogFileValidation")]
        public Output<bool?> EnableLogFileValidation { get; private set; } = null!;

        [Output("enableLogging")]
        public Output<bool?> EnableLogging { get; private set; } = null!;

        [Output("eventSelectors")]
        public Output<ImmutableArray<Outputs.TrailEventSelector>> EventSelectors { get; private set; } = null!;

        [Output("homeRegion")]
        public Output<string> HomeRegion { get; private set; } = null!;

        [Output("includeGlobalServiceEvents")]
        public Output<bool?> IncludeGlobalServiceEvents { get; private set; } = null!;

        [Output("insightSelectors")]
        public Output<ImmutableArray<Outputs.TrailInsightSelector>> InsightSelectors { get; private set; } = null!;

        [Output("isMultiRegionTrail")]
        public Output<bool?> IsMultiRegionTrail { get; private set; } = null!;

        [Output("isOrganizationTrail")]
        public Output<bool?> IsOrganizationTrail { get; private set; } = null!;

        [Output("kmsKeyId")]
        public Output<string?> KmsKeyId { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("s3BucketName")]
        public Output<string> S3BucketName { get; private set; } = null!;

        [Output("s3KeyPrefix")]
        public Output<string?> S3KeyPrefix { get; private set; } = null!;

        [Output("snsTopicName")]
        public Output<string?> SnsTopicName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a Trail resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Trail(string name, TrailArgs args, CustomResourceOptions? options = null)
            : base("aws:cloudtrail/trail:Trail", name, args ?? new TrailArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Trail(string name, Input<string> id, TrailState? state = null, CustomResourceOptions? options = null)
            : base("aws:cloudtrail/trail:Trail", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Trail resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Trail Get(string name, Input<string> id, TrailState? state = null, CustomResourceOptions? options = null)
        {
            return new Trail(name, id, state, options);
        }
    }

    public sealed class TrailArgs : global::Pulumi.ResourceArgs
    {
        [Input("advancedEventSelectors")]
        private InputList<Inputs.TrailAdvancedEventSelectorArgs>? _advancedEventSelectors;
        public InputList<Inputs.TrailAdvancedEventSelectorArgs> AdvancedEventSelectors
        {
            get => _advancedEventSelectors ?? (_advancedEventSelectors = new InputList<Inputs.TrailAdvancedEventSelectorArgs>());
            set => _advancedEventSelectors = value;
        }

        [Input("cloudWatchLogsGroupArn")]
        public Input<string>? CloudWatchLogsGroupArn { get; set; }

        [Input("cloudWatchLogsRoleArn")]
        public Input<string>? CloudWatchLogsRoleArn { get; set; }

        [Input("enableLogFileValidation")]
        public Input<bool>? EnableLogFileValidation { get; set; }

        [Input("enableLogging")]
        public Input<bool>? EnableLogging { get; set; }

        [Input("eventSelectors")]
        private InputList<Inputs.TrailEventSelectorArgs>? _eventSelectors;
        public InputList<Inputs.TrailEventSelectorArgs> EventSelectors
        {
            get => _eventSelectors ?? (_eventSelectors = new InputList<Inputs.TrailEventSelectorArgs>());
            set => _eventSelectors = value;
        }

        [Input("includeGlobalServiceEvents")]
        public Input<bool>? IncludeGlobalServiceEvents { get; set; }

        [Input("insightSelectors")]
        private InputList<Inputs.TrailInsightSelectorArgs>? _insightSelectors;
        public InputList<Inputs.TrailInsightSelectorArgs> InsightSelectors
        {
            get => _insightSelectors ?? (_insightSelectors = new InputList<Inputs.TrailInsightSelectorArgs>());
            set => _insightSelectors = value;
        }

        [Input("isMultiRegionTrail")]
        public Input<bool>? IsMultiRegionTrail { get; set; }

        [Input("isOrganizationTrail")]
        public Input<bool>? IsOrganizationTrail { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("s3BucketName", required: true)]
        public Input<string> S3BucketName { get; set; } = null!;

        [Input("s3KeyPrefix")]
        public Input<string>? S3KeyPrefix { get; set; }

        [Input("snsTopicName")]
        public Input<string>? SnsTopicName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public TrailArgs()
        {
        }
        public static new TrailArgs Empty => new TrailArgs();
    }

    public sealed class TrailState : global::Pulumi.ResourceArgs
    {
        [Input("advancedEventSelectors")]
        private InputList<Inputs.TrailAdvancedEventSelectorGetArgs>? _advancedEventSelectors;
        public InputList<Inputs.TrailAdvancedEventSelectorGetArgs> AdvancedEventSelectors
        {
            get => _advancedEventSelectors ?? (_advancedEventSelectors = new InputList<Inputs.TrailAdvancedEventSelectorGetArgs>());
            set => _advancedEventSelectors = value;
        }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("cloudWatchLogsGroupArn")]
        public Input<string>? CloudWatchLogsGroupArn { get; set; }

        [Input("cloudWatchLogsRoleArn")]
        public Input<string>? CloudWatchLogsRoleArn { get; set; }

        [Input("enableLogFileValidation")]
        public Input<bool>? EnableLogFileValidation { get; set; }

        [Input("enableLogging")]
        public Input<bool>? EnableLogging { get; set; }

        [Input("eventSelectors")]
        private InputList<Inputs.TrailEventSelectorGetArgs>? _eventSelectors;
        public InputList<Inputs.TrailEventSelectorGetArgs> EventSelectors
        {
            get => _eventSelectors ?? (_eventSelectors = new InputList<Inputs.TrailEventSelectorGetArgs>());
            set => _eventSelectors = value;
        }

        [Input("homeRegion")]
        public Input<string>? HomeRegion { get; set; }

        [Input("includeGlobalServiceEvents")]
        public Input<bool>? IncludeGlobalServiceEvents { get; set; }

        [Input("insightSelectors")]
        private InputList<Inputs.TrailInsightSelectorGetArgs>? _insightSelectors;
        public InputList<Inputs.TrailInsightSelectorGetArgs> InsightSelectors
        {
            get => _insightSelectors ?? (_insightSelectors = new InputList<Inputs.TrailInsightSelectorGetArgs>());
            set => _insightSelectors = value;
        }

        [Input("isMultiRegionTrail")]
        public Input<bool>? IsMultiRegionTrail { get; set; }

        [Input("isOrganizationTrail")]
        public Input<bool>? IsOrganizationTrail { get; set; }

        [Input("kmsKeyId")]
        public Input<string>? KmsKeyId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("s3BucketName")]
        public Input<string>? S3BucketName { get; set; }

        [Input("s3KeyPrefix")]
        public Input<string>? S3KeyPrefix { get; set; }

        [Input("snsTopicName")]
        public Input<string>? SnsTopicName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public TrailState()
        {
        }
        public static new TrailState Empty => new TrailState();
    }
}
