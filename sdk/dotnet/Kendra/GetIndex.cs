// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Kendra
{
    public static class GetIndex
    {
        public static Task<GetIndexResult> InvokeAsync(GetIndexArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIndexResult>("aws:kendra/getIndex:getIndex", args ?? new GetIndexArgs(), options.WithDefaults());

        public static Output<GetIndexResult> Invoke(GetIndexInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIndexResult>("aws:kendra/getIndex:getIndex", args ?? new GetIndexInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIndexArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetIndexArgs()
        {
        }
        public static new GetIndexArgs Empty => new GetIndexArgs();
    }

    public sealed class GetIndexInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetIndexInvokeArgs()
        {
        }
        public static new GetIndexInvokeArgs Empty => new GetIndexInvokeArgs();
    }


    [OutputType]
    public sealed class GetIndexResult
    {
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetIndexCapacityUnitResult> CapacityUnits;
        public readonly string CreatedAt;
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetIndexDocumentMetadataConfigurationUpdateResult> DocumentMetadataConfigurationUpdates;
        public readonly string Edition;
        public readonly string ErrorMessage;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetIndexIndexStatisticResult> IndexStatistics;
        public readonly string Name;
        public readonly string RoleArn;
        public readonly ImmutableArray<Outputs.GetIndexServerSideEncryptionConfigurationResult> ServerSideEncryptionConfigurations;
        public readonly string Status;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string UpdatedAt;
        public readonly string UserContextPolicy;
        public readonly ImmutableArray<Outputs.GetIndexUserGroupResolutionConfigurationResult> UserGroupResolutionConfigurations;
        public readonly ImmutableArray<Outputs.GetIndexUserTokenConfigurationResult> UserTokenConfigurations;

        [OutputConstructor]
        private GetIndexResult(
            string arn,

            ImmutableArray<Outputs.GetIndexCapacityUnitResult> capacityUnits,

            string createdAt,

            string description,

            ImmutableArray<Outputs.GetIndexDocumentMetadataConfigurationUpdateResult> documentMetadataConfigurationUpdates,

            string edition,

            string errorMessage,

            string id,

            ImmutableArray<Outputs.GetIndexIndexStatisticResult> indexStatistics,

            string name,

            string roleArn,

            ImmutableArray<Outputs.GetIndexServerSideEncryptionConfigurationResult> serverSideEncryptionConfigurations,

            string status,

            ImmutableDictionary<string, string> tags,

            string updatedAt,

            string userContextPolicy,

            ImmutableArray<Outputs.GetIndexUserGroupResolutionConfigurationResult> userGroupResolutionConfigurations,

            ImmutableArray<Outputs.GetIndexUserTokenConfigurationResult> userTokenConfigurations)
        {
            Arn = arn;
            CapacityUnits = capacityUnits;
            CreatedAt = createdAt;
            Description = description;
            DocumentMetadataConfigurationUpdates = documentMetadataConfigurationUpdates;
            Edition = edition;
            ErrorMessage = errorMessage;
            Id = id;
            IndexStatistics = indexStatistics;
            Name = name;
            RoleArn = roleArn;
            ServerSideEncryptionConfigurations = serverSideEncryptionConfigurations;
            Status = status;
            Tags = tags;
            UpdatedAt = updatedAt;
            UserContextPolicy = userContextPolicy;
            UserGroupResolutionConfigurations = userGroupResolutionConfigurations;
            UserTokenConfigurations = userTokenConfigurations;
        }
    }
}
