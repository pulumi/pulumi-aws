// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Kendra
{
    public static class GetThesaurus
    {
        /// <summary>
        /// Provides details about a specific Amazon Kendra Thesaurus.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.kendra.getThesaurus({
        ///     indexId: "12345678-1234-1234-1234-123456789123",
        ///     thesaurusId: "87654321-1234-4321-4321-321987654321",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.kendra.get_thesaurus(index_id="12345678-1234-1234-1234-123456789123",
        ///     thesaurus_id="87654321-1234-4321-4321-321987654321")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Kendra.GetThesaurus.Invoke(new()
        ///     {
        ///         IndexId = "12345678-1234-1234-1234-123456789123",
        ///         ThesaurusId = "87654321-1234-4321-4321-321987654321",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/kendra"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := kendra.LookupThesaurus(ctx, &amp;kendra.LookupThesaurusArgs{
        /// 			IndexId:     "12345678-1234-1234-1234-123456789123",
        /// 			ThesaurusId: "87654321-1234-4321-4321-321987654321",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.kendra.KendraFunctions;
        /// import com.pulumi.aws.kendra.inputs.GetThesaurusArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = KendraFunctions.getThesaurus(GetThesaurusArgs.builder()
        ///             .indexId("12345678-1234-1234-1234-123456789123")
        ///             .thesaurusId("87654321-1234-4321-4321-321987654321")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:kendra:getThesaurus
        ///       Arguments:
        ///         indexId: 12345678-1234-1234-1234-123456789123
        ///         thesaurusId: 87654321-1234-4321-4321-321987654321
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetThesaurusResult> InvokeAsync(GetThesaurusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetThesaurusResult>("aws:kendra/getThesaurus:getThesaurus", args ?? new GetThesaurusArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific Amazon Kendra Thesaurus.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.kendra.getThesaurus({
        ///     indexId: "12345678-1234-1234-1234-123456789123",
        ///     thesaurusId: "87654321-1234-4321-4321-321987654321",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.kendra.get_thesaurus(index_id="12345678-1234-1234-1234-123456789123",
        ///     thesaurus_id="87654321-1234-4321-4321-321987654321")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Kendra.GetThesaurus.Invoke(new()
        ///     {
        ///         IndexId = "12345678-1234-1234-1234-123456789123",
        ///         ThesaurusId = "87654321-1234-4321-4321-321987654321",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/kendra"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := kendra.LookupThesaurus(ctx, &amp;kendra.LookupThesaurusArgs{
        /// 			IndexId:     "12345678-1234-1234-1234-123456789123",
        /// 			ThesaurusId: "87654321-1234-4321-4321-321987654321",
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.kendra.KendraFunctions;
        /// import com.pulumi.aws.kendra.inputs.GetThesaurusArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = KendraFunctions.getThesaurus(GetThesaurusArgs.builder()
        ///             .indexId("12345678-1234-1234-1234-123456789123")
        ///             .thesaurusId("87654321-1234-4321-4321-321987654321")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:kendra:getThesaurus
        ///       Arguments:
        ///         indexId: 12345678-1234-1234-1234-123456789123
        ///         thesaurusId: 87654321-1234-4321-4321-321987654321
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetThesaurusResult> Invoke(GetThesaurusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetThesaurusResult>("aws:kendra/getThesaurus:getThesaurus", args ?? new GetThesaurusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetThesaurusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the index that contains the Thesaurus.
        /// </summary>
        [Input("indexId", required: true)]
        public string IndexId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Metadata that helps organize the Thesaurus you create.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// Identifier of the Thesaurus.
        /// </summary>
        [Input("thesaurusId", required: true)]
        public string ThesaurusId { get; set; } = null!;

        public GetThesaurusArgs()
        {
        }
        public static new GetThesaurusArgs Empty => new GetThesaurusArgs();
    }

    public sealed class GetThesaurusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifier of the index that contains the Thesaurus.
        /// </summary>
        [Input("indexId", required: true)]
        public Input<string> IndexId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Metadata that helps organize the Thesaurus you create.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Identifier of the Thesaurus.
        /// </summary>
        [Input("thesaurusId", required: true)]
        public Input<string> ThesaurusId { get; set; } = null!;

        public GetThesaurusInvokeArgs()
        {
        }
        public static new GetThesaurusInvokeArgs Empty => new GetThesaurusInvokeArgs();
    }


    [OutputType]
    public sealed class GetThesaurusResult
    {
        /// <summary>
        /// ARN of the Thesaurus.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Unix datetime that the Thesaurus was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Description of the Thesaurus.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// When the `status` field value is `FAILED`, this contains a message that explains why.
        /// </summary>
        public readonly string ErrorMessage;
        /// <summary>
        /// Size of the Thesaurus file in bytes.
        /// </summary>
        public readonly int FileSizeBytes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IndexId;
        /// <summary>
        /// Name of the Thesaurus.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// ARN of a role with permission to access the S3 bucket that contains the Thesaurus. For more information, see [IAM Roles for Amazon Kendra](https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html).
        /// </summary>
        public readonly string RoleArn;
        /// <summary>
        /// S3 location of the Thesaurus input data. Detailed below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetThesaurusSourceS3PathResult> SourceS3Paths;
        /// <summary>
        /// Status of the Thesaurus. It is ready to use when the status is `ACTIVE`.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Number of synonym rules in the Thesaurus file.
        /// </summary>
        public readonly int SynonymRuleCount;
        /// <summary>
        /// Metadata that helps organize the Thesaurus you create.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Number of unique terms in the Thesaurus file. For example, the synonyms `a,b,c` and `a=&gt;d`, the term count would be 4.
        /// </summary>
        public readonly int TermCount;
        public readonly string ThesaurusId;
        /// <summary>
        /// Date and time that the Thesaurus was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetThesaurusResult(
            string arn,

            string createdAt,

            string description,

            string errorMessage,

            int fileSizeBytes,

            string id,

            string indexId,

            string name,

            string roleArn,

            ImmutableArray<Outputs.GetThesaurusSourceS3PathResult> sourceS3Paths,

            string status,

            int synonymRuleCount,

            ImmutableDictionary<string, string> tags,

            int termCount,

            string thesaurusId,

            string updatedAt)
        {
            Arn = arn;
            CreatedAt = createdAt;
            Description = description;
            ErrorMessage = errorMessage;
            FileSizeBytes = fileSizeBytes;
            Id = id;
            IndexId = indexId;
            Name = name;
            RoleArn = roleArn;
            SourceS3Paths = sourceS3Paths;
            Status = status;
            SynonymRuleCount = synonymRuleCount;
            Tags = tags;
            TermCount = termCount;
            ThesaurusId = thesaurusId;
            UpdatedAt = updatedAt;
        }
    }
}
