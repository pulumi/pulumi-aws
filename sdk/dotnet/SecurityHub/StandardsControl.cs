// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SecurityHub
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.SecurityHub.Account("example", new Aws.SecurityHub.AccountArgs
    ///         {
    ///         });
    ///         var cisAwsFoundationsBenchmark = new Aws.SecurityHub.StandardsSubscription("cisAwsFoundationsBenchmark", new Aws.SecurityHub.StandardsSubscriptionArgs
    ///         {
    ///             StandardsArn = "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 example,
    ///             },
    ///         });
    ///         var ensureIamPasswordPolicyPreventsPasswordReuse = new Aws.SecurityHub.StandardsControl("ensureIamPasswordPolicyPreventsPasswordReuse", new Aws.SecurityHub.StandardsControlArgs
    ///         {
    ///             StandardsControlArn = "arn:aws:securityhub:us-east-1:111111111111:control/cis-aws-foundations-benchmark/v/1.2.0/1.10",
    ///             ControlStatus = "DISABLED",
    ///             DisabledReason = "We handle password policies within Okta",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 cisAwsFoundationsBenchmark,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [AwsResourceType("aws:securityhub/standardsControl:StandardsControl")]
    public partial class StandardsControl : Pulumi.CustomResource
    {
        /// <summary>
        /// The identifier of the security standard control.
        /// </summary>
        [Output("controlId")]
        public Output<string> ControlId { get; private set; } = null!;

        /// <summary>
        /// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabled_reason` argument for `DISABLED` control status.
        /// </summary>
        [Output("controlStatus")]
        public Output<string> ControlStatus { get; private set; } = null!;

        /// <summary>
        /// The date and time that the status of the security standard control was most recently updated.
        /// </summary>
        [Output("controlStatusUpdatedAt")]
        public Output<string> ControlStatusUpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The standard control longer description. Provides information about what the control is checking for.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// A description of the reason why you are disabling a security standard control. If you specify this attribute, `control_status` will be set to `DISABLED` automatically.
        /// </summary>
        [Output("disabledReason")]
        public Output<string> DisabledReason { get; private set; } = null!;

        /// <summary>
        /// The list of requirements that are related to this control.
        /// </summary>
        [Output("relatedRequirements")]
        public Output<ImmutableArray<string>> RelatedRequirements { get; private set; } = null!;

        /// <summary>
        /// A link to remediation information for the control in the Security Hub user documentation.
        /// </summary>
        [Output("remediationUrl")]
        public Output<string> RemediationUrl { get; private set; } = null!;

        /// <summary>
        /// The severity of findings generated from this security standard control.
        /// </summary>
        [Output("severityRating")]
        public Output<string> SeverityRating { get; private set; } = null!;

        /// <summary>
        /// The standards control ARN.
        /// </summary>
        [Output("standardsControlArn")]
        public Output<string> StandardsControlArn { get; private set; } = null!;

        /// <summary>
        /// The standard control title.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a StandardsControl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StandardsControl(string name, StandardsControlArgs args, CustomResourceOptions? options = null)
            : base("aws:securityhub/standardsControl:StandardsControl", name, args ?? new StandardsControlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StandardsControl(string name, Input<string> id, StandardsControlState? state = null, CustomResourceOptions? options = null)
            : base("aws:securityhub/standardsControl:StandardsControl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StandardsControl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StandardsControl Get(string name, Input<string> id, StandardsControlState? state = null, CustomResourceOptions? options = null)
        {
            return new StandardsControl(name, id, state, options);
        }
    }

    public sealed class StandardsControlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabled_reason` argument for `DISABLED` control status.
        /// </summary>
        [Input("controlStatus", required: true)]
        public Input<string> ControlStatus { get; set; } = null!;

        /// <summary>
        /// A description of the reason why you are disabling a security standard control. If you specify this attribute, `control_status` will be set to `DISABLED` automatically.
        /// </summary>
        [Input("disabledReason")]
        public Input<string>? DisabledReason { get; set; }

        /// <summary>
        /// The standards control ARN.
        /// </summary>
        [Input("standardsControlArn", required: true)]
        public Input<string> StandardsControlArn { get; set; } = null!;

        public StandardsControlArgs()
        {
        }
    }

    public sealed class StandardsControlState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the security standard control.
        /// </summary>
        [Input("controlId")]
        public Input<string>? ControlId { get; set; }

        /// <summary>
        /// The control status could be `ENABLED` or `DISABLED`. You have to specify `disabled_reason` argument for `DISABLED` control status.
        /// </summary>
        [Input("controlStatus")]
        public Input<string>? ControlStatus { get; set; }

        /// <summary>
        /// The date and time that the status of the security standard control was most recently updated.
        /// </summary>
        [Input("controlStatusUpdatedAt")]
        public Input<string>? ControlStatusUpdatedAt { get; set; }

        /// <summary>
        /// The standard control longer description. Provides information about what the control is checking for.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A description of the reason why you are disabling a security standard control. If you specify this attribute, `control_status` will be set to `DISABLED` automatically.
        /// </summary>
        [Input("disabledReason")]
        public Input<string>? DisabledReason { get; set; }

        [Input("relatedRequirements")]
        private InputList<string>? _relatedRequirements;

        /// <summary>
        /// The list of requirements that are related to this control.
        /// </summary>
        public InputList<string> RelatedRequirements
        {
            get => _relatedRequirements ?? (_relatedRequirements = new InputList<string>());
            set => _relatedRequirements = value;
        }

        /// <summary>
        /// A link to remediation information for the control in the Security Hub user documentation.
        /// </summary>
        [Input("remediationUrl")]
        public Input<string>? RemediationUrl { get; set; }

        /// <summary>
        /// The severity of findings generated from this security standard control.
        /// </summary>
        [Input("severityRating")]
        public Input<string>? SeverityRating { get; set; }

        /// <summary>
        /// The standards control ARN.
        /// </summary>
        [Input("standardsControlArn")]
        public Input<string>? StandardsControlArn { get; set; }

        /// <summary>
        /// The standard control title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public StandardsControlState()
        {
        }
    }
}
