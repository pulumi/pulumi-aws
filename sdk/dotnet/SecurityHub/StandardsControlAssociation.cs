// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SecurityHub
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Basic usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.SecurityHub.Account("example");
    /// 
    ///     var cisAwsFoundationsBenchmark = new Aws.SecurityHub.StandardsSubscription("cis_aws_foundations_benchmark", new()
    ///     {
    ///         StandardsArn = "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             example,
    ///         },
    ///     });
    /// 
    ///     var cisAwsFoundationsBenchmarkDisableIam1 = new Aws.SecurityHub.StandardsControlAssociation("cis_aws_foundations_benchmark_disable_iam_1", new()
    ///     {
    ///         StandardsArn = cisAwsFoundationsBenchmark.StandardsArn,
    ///         SecurityControlId = "IAM.1",
    ///         AssociationStatus = "DISABLED",
    ///         UpdatedReason = "Not needed",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:securityhub/standardsControlAssociation:StandardsControlAssociation")]
    public partial class StandardsControlAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Output("associationStatus")]
        public Output<string> AssociationStatus { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the security control whose enablement status you want to update.
        /// </summary>
        [Output("securityControlId")]
        public Output<string> SecurityControlId { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("standardsArn")]
        public Output<string> StandardsArn { get; private set; } = null!;

        /// <summary>
        /// The reason for updating the control's enablement status in the standard. Required when `association_status` is `DISABLED`.
        /// </summary>
        [Output("updatedReason")]
        public Output<string?> UpdatedReason { get; private set; } = null!;


        /// <summary>
        /// Create a StandardsControlAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StandardsControlAssociation(string name, StandardsControlAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:securityhub/standardsControlAssociation:StandardsControlAssociation", name, args ?? new StandardsControlAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StandardsControlAssociation(string name, Input<string> id, StandardsControlAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:securityhub/standardsControlAssociation:StandardsControlAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StandardsControlAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StandardsControlAssociation Get(string name, Input<string> id, StandardsControlAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new StandardsControlAssociation(name, id, state, options);
        }
    }

    public sealed class StandardsControlAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("associationStatus", required: true)]
        public Input<string> AssociationStatus { get; set; } = null!;

        /// <summary>
        /// The unique identifier for the security control whose enablement status you want to update.
        /// </summary>
        [Input("securityControlId", required: true)]
        public Input<string> SecurityControlId { get; set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("standardsArn", required: true)]
        public Input<string> StandardsArn { get; set; } = null!;

        /// <summary>
        /// The reason for updating the control's enablement status in the standard. Required when `association_status` is `DISABLED`.
        /// </summary>
        [Input("updatedReason")]
        public Input<string>? UpdatedReason { get; set; }

        public StandardsControlAssociationArgs()
        {
        }
        public static new StandardsControlAssociationArgs Empty => new StandardsControlAssociationArgs();
    }

    public sealed class StandardsControlAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
        /// </summary>
        [Input("associationStatus")]
        public Input<string>? AssociationStatus { get; set; }

        /// <summary>
        /// The unique identifier for the security control whose enablement status you want to update.
        /// </summary>
        [Input("securityControlId")]
        public Input<string>? SecurityControlId { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("standardsArn")]
        public Input<string>? StandardsArn { get; set; }

        /// <summary>
        /// The reason for updating the control's enablement status in the standard. Required when `association_status` is `DISABLED`.
        /// </summary>
        [Input("updatedReason")]
        public Input<string>? UpdatedReason { get; set; }

        public StandardsControlAssociationState()
        {
        }
        public static new StandardsControlAssociationState Empty => new StandardsControlAssociationState();
    }
}
