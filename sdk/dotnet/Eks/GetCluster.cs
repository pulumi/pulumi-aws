// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Eks
{
    public static class GetCluster
    {
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("aws:eks/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("aws:eks/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        public readonly string Arn;
        public readonly ImmutableArray<Outputs.GetClusterCertificateAuthorityResult> CertificateAuthorities;
        public readonly string ClusterId;
        public readonly string CreatedAt;
        public readonly ImmutableArray<string> EnabledClusterLogTypes;
        public readonly string Endpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetClusterIdentityResult> Identities;
        public readonly ImmutableArray<Outputs.GetClusterKubernetesNetworkConfigResult> KubernetesNetworkConfigs;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetClusterOutpostConfigResult> OutpostConfigs;
        public readonly string PlatformVersion;
        public readonly string RoleArn;
        public readonly string Status;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string Version;
        public readonly Outputs.GetClusterVpcConfigResult VpcConfig;

        [OutputConstructor]
        private GetClusterResult(
            string arn,

            ImmutableArray<Outputs.GetClusterCertificateAuthorityResult> certificateAuthorities,

            string clusterId,

            string createdAt,

            ImmutableArray<string> enabledClusterLogTypes,

            string endpoint,

            string id,

            ImmutableArray<Outputs.GetClusterIdentityResult> identities,

            ImmutableArray<Outputs.GetClusterKubernetesNetworkConfigResult> kubernetesNetworkConfigs,

            string name,

            ImmutableArray<Outputs.GetClusterOutpostConfigResult> outpostConfigs,

            string platformVersion,

            string roleArn,

            string status,

            ImmutableDictionary<string, string> tags,

            string version,

            Outputs.GetClusterVpcConfigResult vpcConfig)
        {
            Arn = arn;
            CertificateAuthorities = certificateAuthorities;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            EnabledClusterLogTypes = enabledClusterLogTypes;
            Endpoint = endpoint;
            Id = id;
            Identities = identities;
            KubernetesNetworkConfigs = kubernetesNetworkConfigs;
            Name = name;
            OutpostConfigs = outpostConfigs;
            PlatformVersion = platformVersion;
            RoleArn = roleArn;
            Status = status;
            Tags = tags;
            Version = version;
            VpcConfig = vpcConfig;
        }
    }
}
