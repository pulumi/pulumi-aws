// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Eks
{
    public static class GetClusterVersions
    {
        /// <summary>
        /// Data source for managing AWS EKS (Elastic Kubernetes) Cluster Versions.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter by Cluster Type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke(new()
        ///     {
        ///         ClusterType = "eks",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter by Version Status
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke(new()
        ///     {
        ///         VersionStatus = "STANDARD_SUPPORT",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetClusterVersionsResult> InvokeAsync(GetClusterVersionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterVersionsResult>("aws:eks/getClusterVersions:getClusterVersions", args ?? new GetClusterVersionsArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing AWS EKS (Elastic Kubernetes) Cluster Versions.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter by Cluster Type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke(new()
        ///     {
        ///         ClusterType = "eks",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter by Version Status
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke(new()
        ///     {
        ///         VersionStatus = "STANDARD_SUPPORT",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterVersionsResult> Invoke(GetClusterVersionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterVersionsResult>("aws:eks/getClusterVersions:getClusterVersions", args ?? new GetClusterVersionsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing AWS EKS (Elastic Kubernetes) Cluster Versions.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke();
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter by Cluster Type
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke(new()
        ///     {
        ///         ClusterType = "eks",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ### Filter by Version Status
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Eks.GetClusterVersions.Invoke(new()
        ///     {
        ///         VersionStatus = "STANDARD_SUPPORT",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetClusterVersionsResult> Invoke(GetClusterVersionsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterVersionsResult>("aws:eks/getClusterVersions:getClusterVersions", args ?? new GetClusterVersionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterVersionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of clusters to filter by.
        /// Currently, the only valid value is `eks`.
        /// </summary>
        [Input("clusterType")]
        public string? ClusterType { get; set; }

        [Input("clusterVersionsOnlies")]
        private List<string>? _clusterVersionsOnlies;
        public List<string> ClusterVersionsOnlies
        {
            get => _clusterVersionsOnlies ?? (_clusterVersionsOnlies = new List<string>());
            set => _clusterVersionsOnlies = value;
        }

        /// <summary>
        /// Whether to show only the default versions of Kubernetes supported by EKS.
        /// </summary>
        [Input("defaultOnly")]
        public bool? DefaultOnly { get; set; }

        /// <summary>
        /// Whether to include all kubernetes versions in the response.
        /// </summary>
        [Input("includeAll")]
        public bool? IncludeAll { get; set; }

        /// <summary>
        /// Status of the EKS cluster versions to list.
        /// Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
        /// </summary>
        [Input("versionStatus")]
        public string? VersionStatus { get; set; }

        public GetClusterVersionsArgs()
        {
        }
        public static new GetClusterVersionsArgs Empty => new GetClusterVersionsArgs();
    }

    public sealed class GetClusterVersionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Type of clusters to filter by.
        /// Currently, the only valid value is `eks`.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("clusterVersionsOnlies")]
        private InputList<string>? _clusterVersionsOnlies;
        public InputList<string> ClusterVersionsOnlies
        {
            get => _clusterVersionsOnlies ?? (_clusterVersionsOnlies = new InputList<string>());
            set => _clusterVersionsOnlies = value;
        }

        /// <summary>
        /// Whether to show only the default versions of Kubernetes supported by EKS.
        /// </summary>
        [Input("defaultOnly")]
        public Input<bool>? DefaultOnly { get; set; }

        /// <summary>
        /// Whether to include all kubernetes versions in the response.
        /// </summary>
        [Input("includeAll")]
        public Input<bool>? IncludeAll { get; set; }

        /// <summary>
        /// Status of the EKS cluster versions to list.
        /// Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.
        /// </summary>
        [Input("versionStatus")]
        public Input<string>? VersionStatus { get; set; }

        public GetClusterVersionsInvokeArgs()
        {
        }
        public static new GetClusterVersionsInvokeArgs Empty => new GetClusterVersionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterVersionsResult
    {
        /// <summary>
        /// Type of cluster that the version belongs to.
        /// </summary>
        public readonly string? ClusterType;
        public readonly ImmutableArray<Outputs.GetClusterVersionsClusterVersionResult> ClusterVersions;
        public readonly ImmutableArray<string> ClusterVersionsOnlies;
        public readonly bool? DefaultOnly;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IncludeAll;
        /// <summary>
        /// Status of the EKS cluster version.
        /// </summary>
        public readonly string? VersionStatus;

        [OutputConstructor]
        private GetClusterVersionsResult(
            string? clusterType,

            ImmutableArray<Outputs.GetClusterVersionsClusterVersionResult> clusterVersions,

            ImmutableArray<string> clusterVersionsOnlies,

            bool? defaultOnly,

            string id,

            bool? includeAll,

            string? versionStatus)
        {
            ClusterType = clusterType;
            ClusterVersions = clusterVersions;
            ClusterVersionsOnlies = clusterVersionsOnlies;
            DefaultOnly = defaultOnly;
            Id = id;
            IncludeAll = includeAll;
            VersionStatus = versionStatus;
        }
    }
}
