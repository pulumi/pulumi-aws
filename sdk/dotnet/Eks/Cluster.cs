// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Eks
{
    /// <summary>
    /// Manages an EKS Cluster.
    /// 
    /// ## Example Usage
    /// 
    /// ### EKS Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster = new Aws.Iam.Role("cluster", new()
    ///     {
    ///         Name = "eks-cluster-example",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "eks.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var clusterAmazonEKSClusterPolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSClusterPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var example = new Aws.Eks.Cluster("example", new()
    ///     {
    ///         Name = "example",
    ///         AccessConfig = new Aws.Eks.Inputs.ClusterAccessConfigArgs
    ///         {
    ///             AuthenticationMode = "API",
    ///         },
    ///         RoleArn = exampleAwsIamRole.Arn,
    ///         Version = "1.31",
    ///         VpcConfig = new Aws.Eks.Inputs.ClusterVpcConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 az1.Id,
    ///                 az2.Id,
    ///                 az3.Id,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             clusterAmazonEKSClusterPolicy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### EKS Cluster with EKS Auto Mode
    /// 
    /// &gt; **NOTE:** When using EKS Auto Mode `compute_config.enabled`, `kubernetes_network_config.elastic_load_balancing.enabled`, and `storage_config.block_storage.enabled` must *ALL be set to `true`. Likewise for disabling EKS Auto Mode, all three arguments must be set to `false`. Enabling EKS Auto Mode also requires that `bootstrap_self_managed_addons` is set to `false`.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var node = new Aws.Iam.Role("node", new()
    ///     {
    ///         Name = "eks-auto-node-example",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "ec2.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var cluster = new Aws.Iam.Role("cluster", new()
    ///     {
    ///         Name = "eks-cluster-example",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "eks.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var clusterAmazonEKSClusterPolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSClusterPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var clusterAmazonEKSComputePolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSComputePolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSComputePolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var clusterAmazonEKSBlockStoragePolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSBlockStoragePolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSBlockStoragePolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var clusterAmazonEKSLoadBalancingPolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSLoadBalancingPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSLoadBalancingPolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var clusterAmazonEKSNetworkingPolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSNetworkingPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSNetworkingPolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var example = new Aws.Eks.Cluster("example", new()
    ///     {
    ///         Name = "example",
    ///         AccessConfig = new Aws.Eks.Inputs.ClusterAccessConfigArgs
    ///         {
    ///             AuthenticationMode = "API",
    ///         },
    ///         RoleArn = cluster.Arn,
    ///         Version = "1.31",
    ///         BootstrapSelfManagedAddons = false,
    ///         ComputeConfig = new Aws.Eks.Inputs.ClusterComputeConfigArgs
    ///         {
    ///             Enabled = true,
    ///             NodePools = new[]
    ///             {
    ///                 "general-purpose",
    ///             },
    ///             NodeRoleArn = node.Arn,
    ///         },
    ///         KubernetesNetworkConfig = new Aws.Eks.Inputs.ClusterKubernetesNetworkConfigArgs
    ///         {
    ///             ElasticLoadBalancing = new Aws.Eks.Inputs.ClusterKubernetesNetworkConfigElasticLoadBalancingArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         StorageConfig = new Aws.Eks.Inputs.ClusterStorageConfigArgs
    ///         {
    ///             BlockStorage = new Aws.Eks.Inputs.ClusterStorageConfigBlockStorageArgs
    ///             {
    ///                 Enabled = true,
    ///             },
    ///         },
    ///         VpcConfig = new Aws.Eks.Inputs.ClusterVpcConfigArgs
    ///         {
    ///             EndpointPrivateAccess = true,
    ///             EndpointPublicAccess = true,
    ///             SubnetIds = new[]
    ///             {
    ///                 az1.Id,
    ///                 az2.Id,
    ///                 az3.Id,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             clusterAmazonEKSClusterPolicy,
    ///             clusterAmazonEKSComputePolicy,
    ///             clusterAmazonEKSBlockStoragePolicy,
    ///             clusterAmazonEKSLoadBalancingPolicy,
    ///             clusterAmazonEKSNetworkingPolicy,
    ///         },
    ///     });
    /// 
    ///     var nodeAmazonEKSWorkerNodeMinimalPolicy = new Aws.Iam.RolePolicyAttachment("node_AmazonEKSWorkerNodeMinimalPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodeMinimalPolicy",
    ///         Role = node.Name,
    ///     });
    /// 
    ///     var nodeAmazonEC2ContainerRegistryPullOnly = new Aws.Iam.RolePolicyAttachment("node_AmazonEC2ContainerRegistryPullOnly", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPullOnly",
    ///         Role = node.Name,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### EKS Cluster with EKS Hybrid Nodes
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster = new Aws.Iam.Role("cluster", new()
    ///     {
    ///         Name = "eks-cluster-example",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = "eks.amazonaws.com",
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var clusterAmazonEKSClusterPolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSClusterPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var example = new Aws.Eks.Cluster("example", new()
    ///     {
    ///         Name = "example",
    ///         AccessConfig = new Aws.Eks.Inputs.ClusterAccessConfigArgs
    ///         {
    ///             AuthenticationMode = "API",
    ///         },
    ///         RoleArn = cluster.Arn,
    ///         Version = "1.31",
    ///         RemoteNetworkConfig = new Aws.Eks.Inputs.ClusterRemoteNetworkConfigArgs
    ///         {
    ///             RemoteNodeNetworks = new Aws.Eks.Inputs.ClusterRemoteNetworkConfigRemoteNodeNetworksArgs
    ///             {
    ///                 Cidrs = new[]
    ///                 {
    ///                     "172.16.0.0/18",
    ///                 },
    ///             },
    ///             RemotePodNetworks = new Aws.Eks.Inputs.ClusterRemoteNetworkConfigRemotePodNetworksArgs
    ///             {
    ///                 Cidrs = new[]
    ///                 {
    ///                     "172.16.64.0/18",
    ///                 },
    ///             },
    ///         },
    ///         VpcConfig = new Aws.Eks.Inputs.ClusterVpcConfigArgs
    ///         {
    ///             EndpointPrivateAccess = true,
    ///             EndpointPublicAccess = true,
    ///             SubnetIds = new[]
    ///             {
    ///                 az1.Id,
    ///                 az2.Id,
    ///                 az3.Id,
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             clusterAmazonEKSClusterPolicy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Local EKS Cluster on AWS Outpost
    /// 
    /// [Creating a local Amazon EKS cluster on an AWS Outpost](https://docs.aws.amazon.com/eks/latest/userguide/create-cluster-outpost.html)
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = Aws.Outposts.GetOutpost.Invoke(new()
    ///     {
    ///         Name = "example",
    ///     });
    /// 
    ///     var cluster = new Aws.Iam.Role("cluster", new()
    ///     {
    ///         Name = "eks-cluster-example",
    ///         AssumeRolePolicy = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["Version"] = "2012-10-17",
    ///             ["Statement"] = new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Action"] = new[]
    ///                     {
    ///                         "sts:AssumeRole",
    ///                         "sts:TagSession",
    ///                     },
    ///                     ["Effect"] = "Allow",
    ///                     ["Principal"] = new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["Service"] = new[]
    ///                         {
    ///                             "eks.amazonaws.com",
    ///                             "ec2.amazonaws.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         }),
    ///     });
    /// 
    ///     var clusterAmazonEKSLocalOutpostClusterPolicy = new Aws.Iam.RolePolicyAttachment("cluster_AmazonEKSLocalOutpostClusterPolicy", new()
    ///     {
    ///         PolicyArn = "arn:aws:iam::aws:policy/AmazonEKSLocalOutpostClusterPolicy",
    ///         Role = cluster.Name,
    ///     });
    /// 
    ///     var exampleCluster = new Aws.Eks.Cluster("example", new()
    ///     {
    ///         Name = "example",
    ///         AccessConfig = new Aws.Eks.Inputs.ClusterAccessConfigArgs
    ///         {
    ///             AuthenticationMode = "CONFIG_MAP",
    ///         },
    ///         RoleArn = exampleAwsIamRole.Arn,
    ///         Version = "1.31",
    ///         VpcConfig = new Aws.Eks.Inputs.ClusterVpcConfigArgs
    ///         {
    ///             EndpointPrivateAccess = true,
    ///             EndpointPublicAccess = false,
    ///             SubnetIds = new[]
    ///             {
    ///                 az1.Id,
    ///                 az2.Id,
    ///                 az3.Id,
    ///             },
    ///         },
    ///         OutpostConfig = new Aws.Eks.Inputs.ClusterOutpostConfigArgs
    ///         {
    ///             ControlPlaneInstanceType = "m5.large",
    ///             OutpostArns = new[]
    ///             {
    ///                 example.Apply(getOutpostResult =&gt; getOutpostResult.Arn),
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             clusterAmazonEKSLocalOutpostClusterPolicy,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import EKS Clusters using the `name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:eks/cluster:Cluster my_cluster my_cluster
    /// ```
    /// </summary>
    [AwsResourceType("aws:eks/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block for the access config associated with your cluster, see [Amazon EKS Access Entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html). Detailed below.
        /// </summary>
        [Output("accessConfig")]
        public Output<Outputs.ClusterAccessConfig> AccessConfig { get; private set; } = null!;

        /// <summary>
        /// ARN of the cluster.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Install default unmanaged add-ons, such as `aws-cni`, `kube-proxy`, and CoreDNS during cluster creation. If `false`, you must manually install desired add-ons. Changing this value will force a new cluster to be created. Defaults to `true`.
        /// </summary>
        [Output("bootstrapSelfManagedAddons")]
        public Output<bool?> BootstrapSelfManagedAddons { get; private set; } = null!;

        [Output("certificateAuthorities")]
        public Output<ImmutableArray<Outputs.ClusterCertificateAuthority>> CertificateAuthorities { get; private set; } = null!;

        /// <summary>
        /// Attribute block containing `certificate-authority-data` for your cluster. Detailed below.
        /// </summary>
        [Output("certificateAuthority")]
        public Output<Outputs.ClusterCertificateAuthority> CertificateAuthority { get; private set; } = null!;

        /// <summary>
        /// The ID of your local Amazon EKS cluster on the AWS Outpost. This attribute isn't available for an AWS EKS cluster on AWS cloud.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
        /// </summary>
        [Output("computeConfig")]
        public Output<Outputs.ClusterComputeConfig?> ComputeConfig { get; private set; } = null!;

        /// <summary>
        /// Unix epoch timestamp in seconds for when the cluster was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        [Output("defaultAddonsToRemoves")]
        public Output<ImmutableArray<string>> DefaultAddonsToRemoves { get; private set; } = null!;

        /// <summary>
        /// List of the desired control plane logging to enable. For more information, see [Amazon EKS Control Plane Logging](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html).
        /// </summary>
        [Output("enabledClusterLogTypes")]
        public Output<ImmutableArray<string>> EnabledClusterLogTypes { get; private set; } = null!;

        /// <summary>
        /// Configuration block with encryption configuration for the cluster. Detailed below.
        /// </summary>
        [Output("encryptionConfig")]
        public Output<Outputs.ClusterEncryptionConfig?> EncryptionConfig { get; private set; } = null!;

        /// <summary>
        /// Endpoint for your Kubernetes API server.
        /// </summary>
        [Output("endpoint")]
        public Output<string> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Attribute block containing identity provider information for your cluster. Only available on Kubernetes version 1.13 and 1.14 clusters created or upgraded on or after September 3, 2019. Detailed below.
        /// </summary>
        [Output("identities")]
        public Output<ImmutableArray<Outputs.ClusterIdentity>> Identities { get; private set; } = null!;

        /// <summary>
        /// Configuration block with kubernetes network configuration for the cluster. Detailed below. If removed, the provider will only perform drift detection if a configuration value is provided.
        /// </summary>
        [Output("kubernetesNetworkConfig")]
        public Output<Outputs.ClusterKubernetesNetworkConfig> KubernetesNetworkConfig { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]*$`).
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
        /// </summary>
        [Output("outpostConfig")]
        public Output<Outputs.ClusterOutpostConfig?> OutpostConfig { get; private set; } = null!;

        /// <summary>
        /// Platform version for the cluster.
        /// </summary>
        [Output("platformVersion")]
        public Output<string> PlatformVersion { get; private set; } = null!;

        /// <summary>
        /// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
        /// </summary>
        [Output("remoteNetworkConfig")]
        public Output<Outputs.ClusterRemoteNetworkConfig?> RemoteNetworkConfig { get; private set; } = null!;

        /// <summary>
        /// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. Ensure the resource configuration includes explicit dependencies on the IAM Role permissions by adding `depends_on` if using the `aws.iam.RolePolicy` resource or `aws.iam.RolePolicyAttachment` resource, otherwise EKS cannot delete EKS managed EC2 infrastructure such as Security Groups on EKS Cluster deletion.
        /// </summary>
        [Output("roleArn")]
        public Output<string> RoleArn { get; private set; } = null!;

        /// <summary>
        /// Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
        /// </summary>
        [Output("storageConfig")]
        public Output<Outputs.ClusterStorageConfig?> StorageConfig { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
        /// </summary>
        [Output("upgradePolicy")]
        public Output<Outputs.ClusterUpgradePolicy> UpgradePolicy { get; private set; } = null!;

        /// <summary>
        /// Desired Kubernetes master version. If you do not specify a value, the latest available version at resource creation is used and no upgrades will occur except those automatically triggered by EKS. The value must be configured and increased to upgrade the version when desired. Downgrades are not supported by EKS.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.ClusterVpcConfig> VpcConfig { get; private set; } = null!;

        /// <summary>
        /// Configuration block with zonal shift configuration for the cluster. Detailed below.
        /// </summary>
        [Output("zonalShiftConfig")]
        public Output<Outputs.ClusterZonalShiftConfig?> ZonalShiftConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:eks/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:eks/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for the access config associated with your cluster, see [Amazon EKS Access Entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html). Detailed below.
        /// </summary>
        [Input("accessConfig")]
        public Input<Inputs.ClusterAccessConfigArgs>? AccessConfig { get; set; }

        /// <summary>
        /// Install default unmanaged add-ons, such as `aws-cni`, `kube-proxy`, and CoreDNS during cluster creation. If `false`, you must manually install desired add-ons. Changing this value will force a new cluster to be created. Defaults to `true`.
        /// </summary>
        [Input("bootstrapSelfManagedAddons")]
        public Input<bool>? BootstrapSelfManagedAddons { get; set; }

        /// <summary>
        /// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
        /// </summary>
        [Input("computeConfig")]
        public Input<Inputs.ClusterComputeConfigArgs>? ComputeConfig { get; set; }

        [Input("defaultAddonsToRemoves")]
        private InputList<string>? _defaultAddonsToRemoves;
        public InputList<string> DefaultAddonsToRemoves
        {
            get => _defaultAddonsToRemoves ?? (_defaultAddonsToRemoves = new InputList<string>());
            set => _defaultAddonsToRemoves = value;
        }

        [Input("enabledClusterLogTypes")]
        private InputList<string>? _enabledClusterLogTypes;

        /// <summary>
        /// List of the desired control plane logging to enable. For more information, see [Amazon EKS Control Plane Logging](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html).
        /// </summary>
        public InputList<string> EnabledClusterLogTypes
        {
            get => _enabledClusterLogTypes ?? (_enabledClusterLogTypes = new InputList<string>());
            set => _enabledClusterLogTypes = value;
        }

        /// <summary>
        /// Configuration block with encryption configuration for the cluster. Detailed below.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.ClusterEncryptionConfigArgs>? EncryptionConfig { get; set; }

        /// <summary>
        /// Configuration block with kubernetes network configuration for the cluster. Detailed below. If removed, the provider will only perform drift detection if a configuration value is provided.
        /// </summary>
        [Input("kubernetesNetworkConfig")]
        public Input<Inputs.ClusterKubernetesNetworkConfigArgs>? KubernetesNetworkConfig { get; set; }

        /// <summary>
        /// Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]*$`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
        /// </summary>
        [Input("outpostConfig")]
        public Input<Inputs.ClusterOutpostConfigArgs>? OutpostConfig { get; set; }

        /// <summary>
        /// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
        /// </summary>
        [Input("remoteNetworkConfig")]
        public Input<Inputs.ClusterRemoteNetworkConfigArgs>? RemoteNetworkConfig { get; set; }

        /// <summary>
        /// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. Ensure the resource configuration includes explicit dependencies on the IAM Role permissions by adding `depends_on` if using the `aws.iam.RolePolicy` resource or `aws.iam.RolePolicyAttachment` resource, otherwise EKS cannot delete EKS managed EC2 infrastructure such as Security Groups on EKS Cluster deletion.
        /// </summary>
        [Input("roleArn", required: true)]
        public Input<string> RoleArn { get; set; } = null!;

        /// <summary>
        /// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
        /// </summary>
        [Input("storageConfig")]
        public Input<Inputs.ClusterStorageConfigArgs>? StorageConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
        /// </summary>
        [Input("upgradePolicy")]
        public Input<Inputs.ClusterUpgradePolicyArgs>? UpgradePolicy { get; set; }

        /// <summary>
        /// Desired Kubernetes master version. If you do not specify a value, the latest available version at resource creation is used and no upgrades will occur except those automatically triggered by EKS. The value must be configured and increased to upgrade the version when desired. Downgrades are not supported by EKS.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("vpcConfig", required: true)]
        public Input<Inputs.ClusterVpcConfigArgs> VpcConfig { get; set; } = null!;

        /// <summary>
        /// Configuration block with zonal shift configuration for the cluster. Detailed below.
        /// </summary>
        [Input("zonalShiftConfig")]
        public Input<Inputs.ClusterZonalShiftConfigArgs>? ZonalShiftConfig { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for the access config associated with your cluster, see [Amazon EKS Access Entries](https://docs.aws.amazon.com/eks/latest/userguide/access-entries.html). Detailed below.
        /// </summary>
        [Input("accessConfig")]
        public Input<Inputs.ClusterAccessConfigGetArgs>? AccessConfig { get; set; }

        /// <summary>
        /// ARN of the cluster.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Install default unmanaged add-ons, such as `aws-cni`, `kube-proxy`, and CoreDNS during cluster creation. If `false`, you must manually install desired add-ons. Changing this value will force a new cluster to be created. Defaults to `true`.
        /// </summary>
        [Input("bootstrapSelfManagedAddons")]
        public Input<bool>? BootstrapSelfManagedAddons { get; set; }

        [Input("certificateAuthorities")]
        private InputList<Inputs.ClusterCertificateAuthorityGetArgs>? _certificateAuthorities;
        public InputList<Inputs.ClusterCertificateAuthorityGetArgs> CertificateAuthorities
        {
            get => _certificateAuthorities ?? (_certificateAuthorities = new InputList<Inputs.ClusterCertificateAuthorityGetArgs>());
            set => _certificateAuthorities = value;
        }

        /// <summary>
        /// Attribute block containing `certificate-authority-data` for your cluster. Detailed below.
        /// </summary>
        [Input("certificateAuthority")]
        public Input<Inputs.ClusterCertificateAuthorityGetArgs>? CertificateAuthority { get; set; }

        /// <summary>
        /// The ID of your local Amazon EKS cluster on the AWS Outpost. This attribute isn't available for an AWS EKS cluster on AWS cloud.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
        /// </summary>
        [Input("computeConfig")]
        public Input<Inputs.ClusterComputeConfigGetArgs>? ComputeConfig { get; set; }

        /// <summary>
        /// Unix epoch timestamp in seconds for when the cluster was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("defaultAddonsToRemoves")]
        private InputList<string>? _defaultAddonsToRemoves;
        public InputList<string> DefaultAddonsToRemoves
        {
            get => _defaultAddonsToRemoves ?? (_defaultAddonsToRemoves = new InputList<string>());
            set => _defaultAddonsToRemoves = value;
        }

        [Input("enabledClusterLogTypes")]
        private InputList<string>? _enabledClusterLogTypes;

        /// <summary>
        /// List of the desired control plane logging to enable. For more information, see [Amazon EKS Control Plane Logging](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html).
        /// </summary>
        public InputList<string> EnabledClusterLogTypes
        {
            get => _enabledClusterLogTypes ?? (_enabledClusterLogTypes = new InputList<string>());
            set => _enabledClusterLogTypes = value;
        }

        /// <summary>
        /// Configuration block with encryption configuration for the cluster. Detailed below.
        /// </summary>
        [Input("encryptionConfig")]
        public Input<Inputs.ClusterEncryptionConfigGetArgs>? EncryptionConfig { get; set; }

        /// <summary>
        /// Endpoint for your Kubernetes API server.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        [Input("identities")]
        private InputList<Inputs.ClusterIdentityGetArgs>? _identities;

        /// <summary>
        /// Attribute block containing identity provider information for your cluster. Only available on Kubernetes version 1.13 and 1.14 clusters created or upgraded on or after September 3, 2019. Detailed below.
        /// </summary>
        public InputList<Inputs.ClusterIdentityGetArgs> Identities
        {
            get => _identities ?? (_identities = new InputList<Inputs.ClusterIdentityGetArgs>());
            set => _identities = value;
        }

        /// <summary>
        /// Configuration block with kubernetes network configuration for the cluster. Detailed below. If removed, the provider will only perform drift detection if a configuration value is provided.
        /// </summary>
        [Input("kubernetesNetworkConfig")]
        public Input<Inputs.ClusterKubernetesNetworkConfigGetArgs>? KubernetesNetworkConfig { get; set; }

        /// <summary>
        /// Name of the cluster. Must be between 1-100 characters in length. Must begin with an alphanumeric character, and must only contain alphanumeric characters, dashes and underscores (`^[0-9A-Za-z][A-Za-z0-9\-_]*$`).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
        /// </summary>
        [Input("outpostConfig")]
        public Input<Inputs.ClusterOutpostConfigGetArgs>? OutpostConfig { get; set; }

        /// <summary>
        /// Platform version for the cluster.
        /// </summary>
        [Input("platformVersion")]
        public Input<string>? PlatformVersion { get; set; }

        /// <summary>
        /// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
        /// </summary>
        [Input("remoteNetworkConfig")]
        public Input<Inputs.ClusterRemoteNetworkConfigGetArgs>? RemoteNetworkConfig { get; set; }

        /// <summary>
        /// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. Ensure the resource configuration includes explicit dependencies on the IAM Role permissions by adding `depends_on` if using the `aws.iam.RolePolicy` resource or `aws.iam.RolePolicyAttachment` resource, otherwise EKS cannot delete EKS managed EC2 infrastructure such as Security Groups on EKS Cluster deletion.
        /// </summary>
        [Input("roleArn")]
        public Input<string>? RoleArn { get; set; }

        /// <summary>
        /// Status of the EKS cluster. One of `CREATING`, `ACTIVE`, `DELETING`, `FAILED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
        /// </summary>
        [Input("storageConfig")]
        public Input<Inputs.ClusterStorageConfigGetArgs>? StorageConfig { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
        /// </summary>
        [Input("upgradePolicy")]
        public Input<Inputs.ClusterUpgradePolicyGetArgs>? UpgradePolicy { get; set; }

        /// <summary>
        /// Desired Kubernetes master version. If you do not specify a value, the latest available version at resource creation is used and no upgrades will occur except those automatically triggered by EKS. The value must be configured and increased to upgrade the version when desired. Downgrades are not supported by EKS.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see [Cluster VPC Considerations](https://docs.aws.amazon.com/eks/latest/userguide/network_reqs.html) and [Cluster Security Group Considerations](https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html) in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.ClusterVpcConfigGetArgs>? VpcConfig { get; set; }

        /// <summary>
        /// Configuration block with zonal shift configuration for the cluster. Detailed below.
        /// </summary>
        [Input("zonalShiftConfig")]
        public Input<Inputs.ClusterZonalShiftConfigGetArgs>? ZonalShiftConfig { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
