// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Eks
{
    [AwsResourceType("aws:eks/nodeGroup:NodeGroup")]
    public partial class NodeGroup : global::Pulumi.CustomResource
    {
        [Output("amiType")]
        public Output<string> AmiType { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("capacityType")]
        public Output<string> CapacityType { get; private set; } = null!;

        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        [Output("diskSize")]
        public Output<int> DiskSize { get; private set; } = null!;

        [Output("forceUpdateVersion")]
        public Output<bool?> ForceUpdateVersion { get; private set; } = null!;

        [Output("instanceTypes")]
        public Output<ImmutableArray<string>> InstanceTypes { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        [Output("launchTemplate")]
        public Output<Outputs.NodeGroupLaunchTemplate?> LaunchTemplate { get; private set; } = null!;

        [Output("nodeGroupName")]
        public Output<string> NodeGroupName { get; private set; } = null!;

        [Output("nodeGroupNamePrefix")]
        public Output<string> NodeGroupNamePrefix { get; private set; } = null!;

        [Output("nodeRoleArn")]
        public Output<string> NodeRoleArn { get; private set; } = null!;

        [Output("releaseVersion")]
        public Output<string> ReleaseVersion { get; private set; } = null!;

        [Output("remoteAccess")]
        public Output<Outputs.NodeGroupRemoteAccess?> RemoteAccess { get; private set; } = null!;

        [Output("resources")]
        public Output<ImmutableArray<Outputs.NodeGroupResource>> Resources { get; private set; } = null!;

        [Output("scalingConfig")]
        public Output<Outputs.NodeGroupScalingConfig> ScalingConfig { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("taints")]
        public Output<ImmutableArray<Outputs.NodeGroupTaint>> Taints { get; private set; } = null!;

        [Output("updateConfig")]
        public Output<Outputs.NodeGroupUpdateConfig> UpdateConfig { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a NodeGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodeGroup(string name, NodeGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:eks/nodeGroup:NodeGroup", name, args ?? new NodeGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodeGroup(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:eks/nodeGroup:NodeGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodeGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodeGroup Get(string name, Input<string> id, NodeGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new NodeGroup(name, id, state, options);
        }
    }

    public sealed class NodeGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("amiType")]
        public Input<string>? AmiType { get; set; }

        [Input("capacityType")]
        public Input<string>? CapacityType { get; set; }

        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        [Input("forceUpdateVersion")]
        public Input<bool>? ForceUpdateVersion { get; set; }

        [Input("instanceTypes")]
        private InputList<string>? _instanceTypes;
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("launchTemplate")]
        public Input<Inputs.NodeGroupLaunchTemplateArgs>? LaunchTemplate { get; set; }

        [Input("nodeGroupName")]
        public Input<string>? NodeGroupName { get; set; }

        [Input("nodeGroupNamePrefix")]
        public Input<string>? NodeGroupNamePrefix { get; set; }

        [Input("nodeRoleArn", required: true)]
        public Input<string> NodeRoleArn { get; set; } = null!;

        [Input("releaseVersion")]
        public Input<string>? ReleaseVersion { get; set; }

        [Input("remoteAccess")]
        public Input<Inputs.NodeGroupRemoteAccessArgs>? RemoteAccess { get; set; }

        [Input("scalingConfig", required: true)]
        public Input<Inputs.NodeGroupScalingConfigArgs> ScalingConfig { get; set; } = null!;

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("taints")]
        private InputList<Inputs.NodeGroupTaintArgs>? _taints;
        public InputList<Inputs.NodeGroupTaintArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.NodeGroupTaintArgs>());
            set => _taints = value;
        }

        [Input("updateConfig")]
        public Input<Inputs.NodeGroupUpdateConfigArgs>? UpdateConfig { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public NodeGroupArgs()
        {
        }
        public static new NodeGroupArgs Empty => new NodeGroupArgs();
    }

    public sealed class NodeGroupState : global::Pulumi.ResourceArgs
    {
        [Input("amiType")]
        public Input<string>? AmiType { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("capacityType")]
        public Input<string>? CapacityType { get; set; }

        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        [Input("diskSize")]
        public Input<int>? DiskSize { get; set; }

        [Input("forceUpdateVersion")]
        public Input<bool>? ForceUpdateVersion { get; set; }

        [Input("instanceTypes")]
        private InputList<string>? _instanceTypes;
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("launchTemplate")]
        public Input<Inputs.NodeGroupLaunchTemplateGetArgs>? LaunchTemplate { get; set; }

        [Input("nodeGroupName")]
        public Input<string>? NodeGroupName { get; set; }

        [Input("nodeGroupNamePrefix")]
        public Input<string>? NodeGroupNamePrefix { get; set; }

        [Input("nodeRoleArn")]
        public Input<string>? NodeRoleArn { get; set; }

        [Input("releaseVersion")]
        public Input<string>? ReleaseVersion { get; set; }

        [Input("remoteAccess")]
        public Input<Inputs.NodeGroupRemoteAccessGetArgs>? RemoteAccess { get; set; }

        [Input("resources")]
        private InputList<Inputs.NodeGroupResourceGetArgs>? _resources;
        public InputList<Inputs.NodeGroupResourceGetArgs> Resources
        {
            get => _resources ?? (_resources = new InputList<Inputs.NodeGroupResourceGetArgs>());
            set => _resources = value;
        }

        [Input("scalingConfig")]
        public Input<Inputs.NodeGroupScalingConfigGetArgs>? ScalingConfig { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("taints")]
        private InputList<Inputs.NodeGroupTaintGetArgs>? _taints;
        public InputList<Inputs.NodeGroupTaintGetArgs> Taints
        {
            get => _taints ?? (_taints = new InputList<Inputs.NodeGroupTaintGetArgs>());
            set => _taints = value;
        }

        [Input("updateConfig")]
        public Input<Inputs.NodeGroupUpdateConfigGetArgs>? UpdateConfig { get; set; }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public NodeGroupState()
        {
        }
        public static new NodeGroupState Empty => new NodeGroupState();
    }
}
