// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aws.Eks
{
    public static class GetNodeGroup
    {
        /// <summary>
        /// Retrieve information about an EKS Node Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Eks.GetNodeGroup.InvokeAsync(new Aws.Eks.GetNodeGroupArgs
        ///         {
        ///             ClusterName = "example",
        ///             NodeGroupName = "example",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNodeGroupResult> InvokeAsync(GetNodeGroupArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNodeGroupResult>("aws:eks/getNodeGroup:getNodeGroup", args ?? new GetNodeGroupArgs(), options.WithVersion());

        /// <summary>
        /// Retrieve information about an EKS Node Group.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Eks.GetNodeGroup.InvokeAsync(new Aws.Eks.GetNodeGroupArgs
        ///         {
        ///             ClusterName = "example",
        ///             NodeGroupName = "example",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetNodeGroupResult> Invoke(GetNodeGroupInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetNodeGroupResult>("aws:eks/getNodeGroup:getNodeGroup", args ?? new GetNodeGroupInvokeArgs(), options.WithVersion());
    }


    public sealed class GetNodeGroupArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Input("nodeGroupName", required: true)]
        public string NodeGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetNodeGroupArgs()
        {
        }
    }

    public sealed class GetNodeGroupInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the node group.
        /// </summary>
        [Input("nodeGroupName", required: true)]
        public Input<string> NodeGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetNodeGroupInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNodeGroupResult
    {
        /// <summary>
        /// Type of Amazon Machine Image (AMI) associated with the EKS Node Group.
        /// </summary>
        public readonly string AmiType;
        /// <summary>
        /// Amazon Resource Name (ARN) of the EKS Node Group.
        /// </summary>
        public readonly string Arn;
        public readonly string ClusterName;
        /// <summary>
        /// Disk size in GiB for worker nodes.
        /// </summary>
        public readonly int DiskSize;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of instance types associated with the EKS Node Group.
        /// </summary>
        public readonly ImmutableArray<string> InstanceTypes;
        /// <summary>
        /// Key-value map of Kubernetes labels. Only labels that are applied with the EKS API are managed by this argument. Other Kubernetes labels applied to the EKS Node Group will not be managed.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string NodeGroupName;
        /// <summary>
        /// Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Node Group.
        /// </summary>
        public readonly string NodeRoleArn;
        /// <summary>
        /// AMI version of the EKS Node Group.
        /// </summary>
        public readonly string ReleaseVersion;
        /// <summary>
        /// Configuration block with remote access settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodeGroupRemoteAccessResult> RemoteAccesses;
        /// <summary>
        /// List of objects containing information about underlying resources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodeGroupResourceResult> Resources;
        /// <summary>
        /// Configuration block with scaling settings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodeGroupScalingConfigResult> ScalingConfigs;
        /// <summary>
        /// Status of the EKS Node Group.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Identifiers of EC2 Subnets to associate with the EKS Node Group.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Kubernetes version.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetNodeGroupResult(
            string amiType,

            string arn,

            string clusterName,

            int diskSize,

            string id,

            ImmutableArray<string> instanceTypes,

            ImmutableDictionary<string, string> labels,

            string nodeGroupName,

            string nodeRoleArn,

            string releaseVersion,

            ImmutableArray<Outputs.GetNodeGroupRemoteAccessResult> remoteAccesses,

            ImmutableArray<Outputs.GetNodeGroupResourceResult> resources,

            ImmutableArray<Outputs.GetNodeGroupScalingConfigResult> scalingConfigs,

            string status,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string> tags,

            string version)
        {
            AmiType = amiType;
            Arn = arn;
            ClusterName = clusterName;
            DiskSize = diskSize;
            Id = id;
            InstanceTypes = instanceTypes;
            Labels = labels;
            NodeGroupName = nodeGroupName;
            NodeRoleArn = nodeRoleArn;
            ReleaseVersion = releaseVersion;
            RemoteAccesses = remoteAccesses;
            Resources = resources;
            ScalingConfigs = scalingConfigs;
            Status = status;
            SubnetIds = subnetIds;
            Tags = tags;
            Version = version;
        }
    }
}
