// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Eks
{
    public static class GetNodeGroup
    {
        public static Task<GetNodeGroupResult> InvokeAsync(GetNodeGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodeGroupResult>("aws:eks/getNodeGroup:getNodeGroup", args ?? new GetNodeGroupArgs(), options.WithDefaults());

        public static Output<GetNodeGroupResult> Invoke(GetNodeGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodeGroupResult>("aws:eks/getNodeGroup:getNodeGroup", args ?? new GetNodeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodeGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        [Input("nodeGroupName", required: true)]
        public string NodeGroupName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetNodeGroupArgs()
        {
        }
        public static new GetNodeGroupArgs Empty => new GetNodeGroupArgs();
    }

    public sealed class GetNodeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        [Input("nodeGroupName", required: true)]
        public Input<string> NodeGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetNodeGroupInvokeArgs()
        {
        }
        public static new GetNodeGroupInvokeArgs Empty => new GetNodeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodeGroupResult
    {
        public readonly string AmiType;
        public readonly string Arn;
        public readonly string CapacityType;
        public readonly string ClusterName;
        public readonly int DiskSize;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> InstanceTypes;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string NodeGroupName;
        public readonly string NodeRoleArn;
        public readonly string ReleaseVersion;
        public readonly ImmutableArray<Outputs.GetNodeGroupRemoteAccessResult> RemoteAccesses;
        public readonly ImmutableArray<Outputs.GetNodeGroupResourceResult> Resources;
        public readonly ImmutableArray<Outputs.GetNodeGroupScalingConfigResult> ScalingConfigs;
        public readonly string Status;
        public readonly ImmutableArray<string> SubnetIds;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly ImmutableArray<Outputs.GetNodeGroupTaintResult> Taints;
        public readonly string Version;

        [OutputConstructor]
        private GetNodeGroupResult(
            string amiType,

            string arn,

            string capacityType,

            string clusterName,

            int diskSize,

            string id,

            ImmutableArray<string> instanceTypes,

            ImmutableDictionary<string, string> labels,

            string nodeGroupName,

            string nodeRoleArn,

            string releaseVersion,

            ImmutableArray<Outputs.GetNodeGroupRemoteAccessResult> remoteAccesses,

            ImmutableArray<Outputs.GetNodeGroupResourceResult> resources,

            ImmutableArray<Outputs.GetNodeGroupScalingConfigResult> scalingConfigs,

            string status,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetNodeGroupTaintResult> taints,

            string version)
        {
            AmiType = amiType;
            Arn = arn;
            CapacityType = capacityType;
            ClusterName = clusterName;
            DiskSize = diskSize;
            Id = id;
            InstanceTypes = instanceTypes;
            Labels = labels;
            NodeGroupName = nodeGroupName;
            NodeRoleArn = nodeRoleArn;
            ReleaseVersion = releaseVersion;
            RemoteAccesses = remoteAccesses;
            Resources = resources;
            ScalingConfigs = scalingConfigs;
            Status = status;
            SubnetIds = subnetIds;
            Tags = tags;
            Taints = taints;
            Version = version;
        }
    }
}
