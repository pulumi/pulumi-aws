// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Scheduler.Inputs
{

    public sealed class ScheduleTargetEcsParametersGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("capacityProviderStrategies")]
        private InputList<Inputs.ScheduleTargetEcsParametersCapacityProviderStrategyGetArgs>? _capacityProviderStrategies;

        /// <summary>
        /// Up to `6` capacity provider strategies to use for the task. Detailed below.
        /// </summary>
        public InputList<Inputs.ScheduleTargetEcsParametersCapacityProviderStrategyGetArgs> CapacityProviderStrategies
        {
            get => _capacityProviderStrategies ?? (_capacityProviderStrategies = new InputList<Inputs.ScheduleTargetEcsParametersCapacityProviderStrategyGetArgs>());
            set => _capacityProviderStrategies = value;
        }

        /// <summary>
        /// Specifies whether to enable Amazon ECS managed tags for the task. For more information, see [Tagging Your Amazon ECS Resources](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html) in the Amazon ECS Developer Guide.
        /// </summary>
        [Input("enableEcsManagedTags")]
        public Input<bool>? EnableEcsManagedTags { get; set; }

        /// <summary>
        /// Specifies whether to enable the execute command functionality for the containers in this task.
        /// </summary>
        [Input("enableExecuteCommand")]
        public Input<bool>? EnableExecuteCommand { get; set; }

        /// <summary>
        /// Specifies an ECS task group for the task. At most 255 characters.
        /// </summary>
        [Input("group")]
        public Input<string>? Group { get; set; }

        /// <summary>
        /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. One of: `EC2`, `FARGATE`, `EXTERNAL`.
        /// </summary>
        [Input("launchType")]
        public Input<string>? LaunchType { get; set; }

        /// <summary>
        /// Configures the networking associated with the task. Detailed below.
        /// </summary>
        [Input("networkConfiguration")]
        public Input<Inputs.ScheduleTargetEcsParametersNetworkConfigurationGetArgs>? NetworkConfiguration { get; set; }

        [Input("placementConstraints")]
        private InputList<Inputs.ScheduleTargetEcsParametersPlacementConstraintGetArgs>? _placementConstraints;

        /// <summary>
        /// A set of up to 10 placement constraints to use for the task. Detailed below.
        /// </summary>
        public InputList<Inputs.ScheduleTargetEcsParametersPlacementConstraintGetArgs> PlacementConstraints
        {
            get => _placementConstraints ?? (_placementConstraints = new InputList<Inputs.ScheduleTargetEcsParametersPlacementConstraintGetArgs>());
            set => _placementConstraints = value;
        }

        [Input("placementStrategies")]
        private InputList<Inputs.ScheduleTargetEcsParametersPlacementStrategyGetArgs>? _placementStrategies;

        /// <summary>
        /// A set of up to 5 placement strategies. Detailed below.
        /// </summary>
        public InputList<Inputs.ScheduleTargetEcsParametersPlacementStrategyGetArgs> PlacementStrategies
        {
            get => _placementStrategies ?? (_placementStrategies = new InputList<Inputs.ScheduleTargetEcsParametersPlacementStrategyGetArgs>());
            set => _placementStrategies = value;
        }

        /// <summary>
        /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as `1.1.0`.
        /// </summary>
        [Input("platformVersion")]
        public Input<string>? PlatformVersion { get; set; }

        /// <summary>
        /// Specifies whether to propagate the tags from the task definition to the task. One of: `TASK_DEFINITION`.
        /// </summary>
        [Input("propagateTags")]
        public Input<string>? PropagateTags { get; set; }

        /// <summary>
        /// Reference ID to use for the task.
        /// </summary>
        [Input("referenceId")]
        public Input<string>? ReferenceId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// The metadata that you apply to the task. Each tag consists of a key and an optional value. For more information, see [`RunTask`](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html) in the Amazon ECS API Reference.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The number of tasks to create. Ranges from `1` (default) to `10`.
        /// </summary>
        [Input("taskCount")]
        public Input<int>? TaskCount { get; set; }

        /// <summary>
        /// ARN of the task definition to use.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("taskDefinitionArn", required: true)]
        public Input<string> TaskDefinitionArn { get; set; } = null!;

        public ScheduleTargetEcsParametersGetArgs()
        {
        }
        public static new ScheduleTargetEcsParametersGetArgs Empty => new ScheduleTargetEcsParametersGetArgs();
    }
}
