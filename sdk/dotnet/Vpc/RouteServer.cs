// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Vpc
{
    /// <summary>
    /// Provides a resource for managing a VPC (Virtual Private Cloud) Route Server.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Vpc.RouteServer("test", new()
    ///     {
    ///         AmazonSideAsn = 65534,
    ///         Tags = 
    ///         {
    ///             { "Name", "Test" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Persist Route and SNS Notification
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Vpc.RouteServer("test", new()
    ///     {
    ///         AmazonSideAsn = 65534,
    ///         PersistRoutes = "enable",
    ///         PersistRoutesDuration = 2,
    ///         SnsNotificationsEnabled = true,
    ///         Tags = 
    ///         {
    ///             { "Name", "Main Route Server" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import VPC (Virtual Private Cloud) Route Server using the `route_server_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:vpc/routeServer:RouteServer example rs-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:vpc/routeServer:RouteServer")]
    public partial class RouteServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("amazonSideAsn")]
        public Output<int> AmazonSideAsn { get; private set; } = null!;

        /// <summary>
        /// The ARN of the route server.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
        /// </summary>
        [Output("persistRoutes")]
        public Output<string> PersistRoutes { get; private set; } = null!;

        /// <summary>
        /// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persist_routes` is enabled.
        /// </summary>
        [Output("persistRoutesDuration")]
        public Output<int?> PersistRoutesDuration { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the route server.
        /// </summary>
        [Output("routeServerId")]
        public Output<string> RouteServerId { get; private set; } = null!;

        /// <summary>
        /// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
        /// </summary>
        [Output("snsNotificationsEnabled")]
        public Output<bool> SnsNotificationsEnabled { get; private set; } = null!;

        /// <summary>
        /// The ARN of the SNS topic where notifications are published.
        /// </summary>
        [Output("snsTopicArn")]
        public Output<string> SnsTopicArn { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.RouteServerTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a RouteServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteServer(string name, RouteServerArgs args, CustomResourceOptions? options = null)
            : base("aws:vpc/routeServer:RouteServer", name, args ?? new RouteServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteServer(string name, Input<string> id, RouteServerState? state = null, CustomResourceOptions? options = null)
            : base("aws:vpc/routeServer:RouteServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteServer Get(string name, Input<string> id, RouteServerState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteServer(name, id, state, options);
        }
    }

    public sealed class RouteServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("amazonSideAsn", required: true)]
        public Input<int> AmazonSideAsn { get; set; } = null!;

        /// <summary>
        /// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
        /// </summary>
        [Input("persistRoutes")]
        public Input<string>? PersistRoutes { get; set; }

        /// <summary>
        /// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persist_routes` is enabled.
        /// </summary>
        [Input("persistRoutesDuration")]
        public Input<int>? PersistRoutesDuration { get; set; }

        /// <summary>
        /// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
        /// </summary>
        [Input("snsNotificationsEnabled")]
        public Input<bool>? SnsNotificationsEnabled { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RouteServerTimeoutsArgs>? Timeouts { get; set; }

        public RouteServerArgs()
        {
        }
        public static new RouteServerArgs Empty => new RouteServerArgs();
    }

    public sealed class RouteServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Border Gateway Protocol (BGP) Autonomous System Number (ASN) for the appliance. Valid values are from 1 to 4294967295.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("amazonSideAsn")]
        public Input<int>? AmazonSideAsn { get; set; }

        /// <summary>
        /// The ARN of the route server.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Indicates whether routes should be persisted after all BGP sessions are terminated. Valid values are `enable`, `disable`, `reset`
        /// </summary>
        [Input("persistRoutes")]
        public Input<string>? PersistRoutes { get; set; }

        /// <summary>
        /// The number of minutes a route server will wait after BGP is re-established to unpersist the routes in the FIB and RIB. Value must be in the range of 1-5. Required if `persist_routes` is enabled.
        /// </summary>
        [Input("persistRoutesDuration")]
        public Input<int>? PersistRoutesDuration { get; set; }

        /// <summary>
        /// The unique identifier of the route server.
        /// </summary>
        [Input("routeServerId")]
        public Input<string>? RouteServerId { get; set; }

        /// <summary>
        /// Indicates whether SNS notifications should be enabled for route server events. Enabling SNS notifications persists BGP status changes to an SNS topic provisioned by AWS`.
        /// </summary>
        [Input("snsNotificationsEnabled")]
        public Input<bool>? SnsNotificationsEnabled { get; set; }

        /// <summary>
        /// The ARN of the SNS topic where notifications are published.
        /// </summary>
        [Input("snsTopicArn")]
        public Input<string>? SnsTopicArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RouteServerTimeoutsGetArgs>? Timeouts { get; set; }

        public RouteServerState()
        {
        }
        public static new RouteServerState Empty => new RouteServerState();
    }
}
