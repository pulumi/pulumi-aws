// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Vpc
{
    /// <summary>
    /// Provides a resource for managing a VPC (Virtual Private Cloud) Route Server Endpoint.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Aws.Vpc.RouteServerEndpoint("test", new()
    ///     {
    ///         RouteServerId = example.RouteServerId,
    ///         SubnetId = main.Id,
    ///         Tags = 
    ///         {
    ///             { "Name", "Endpoint A" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import VPC (Virtual Private Cloud) Route Server Endpoint using the `route_server_endpoint_id`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:vpc/routeServerEndpoint:RouteServerEndpoint example rse-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:vpc/routeServerEndpoint:RouteServerEndpoint")]
    public partial class RouteServerEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the route server endpoint.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The IP address of the Elastic network interface for the endpoint.
        /// </summary>
        [Output("eniAddress")]
        public Output<string> EniAddress { get; private set; } = null!;

        /// <summary>
        /// The ID of the Elastic network interface for the endpoint.
        /// </summary>
        [Output("eniId")]
        public Output<string> EniId { get; private set; } = null!;

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the route server endpoint.
        /// </summary>
        [Output("routeServerEndpointId")]
        public Output<string> RouteServerEndpointId { get; private set; } = null!;

        /// <summary>
        /// The ID of the route server for which to create an endpoint.
        /// </summary>
        [Output("routeServerId")]
        public Output<string> RouteServerId { get; private set; } = null!;

        /// <summary>
        /// The ID of the subnet in which to create the route server endpoint.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.RouteServerEndpointTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPC containing the endpoint.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a RouteServerEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteServerEndpoint(string name, RouteServerEndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:vpc/routeServerEndpoint:RouteServerEndpoint", name, args ?? new RouteServerEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteServerEndpoint(string name, Input<string> id, RouteServerEndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:vpc/routeServerEndpoint:RouteServerEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteServerEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteServerEndpoint Get(string name, Input<string> id, RouteServerEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteServerEndpoint(name, id, state, options);
        }
    }

    public sealed class RouteServerEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The ID of the route server for which to create an endpoint.
        /// </summary>
        [Input("routeServerId", required: true)]
        public Input<string> RouteServerId { get; set; } = null!;

        /// <summary>
        /// The ID of the subnet in which to create the route server endpoint.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RouteServerEndpointTimeoutsArgs>? Timeouts { get; set; }

        public RouteServerEndpointArgs()
        {
        }
        public static new RouteServerEndpointArgs Empty => new RouteServerEndpointArgs();
    }

    public sealed class RouteServerEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the route server endpoint.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The IP address of the Elastic network interface for the endpoint.
        /// </summary>
        [Input("eniAddress")]
        public Input<string>? EniAddress { get; set; }

        /// <summary>
        /// The ID of the Elastic network interface for the endpoint.
        /// </summary>
        [Input("eniId")]
        public Input<string>? EniId { get; set; }

        /// <summary>
        /// Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the provider configuration.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The unique identifier of the route server endpoint.
        /// </summary>
        [Input("routeServerEndpointId")]
        public Input<string>? RouteServerEndpointId { get; set; }

        /// <summary>
        /// The ID of the route server for which to create an endpoint.
        /// </summary>
        [Input("routeServerId")]
        public Input<string>? RouteServerId { get; set; }

        /// <summary>
        /// The ID of the subnet in which to create the route server endpoint.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.RouteServerEndpointTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// The ID of the VPC containing the endpoint.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public RouteServerEndpointState()
        {
        }
        public static new RouteServerEndpointState Empty => new RouteServerEndpointState();
    }
}
