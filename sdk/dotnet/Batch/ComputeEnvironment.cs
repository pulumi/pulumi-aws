// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Batch
{
    /// <summary>
    /// Creates a AWS Batch compute environment. Compute environments contain the Amazon ECS container instances that are used to run containerized batch jobs.
    /// 
    /// For information about AWS Batch, see [What is AWS Batch?][1] .
    /// For information about compute environment, see [Compute Environments][2] .
    /// 
    /// &gt; **Note:** To prevent a race condition during environment deletion, make sure to set `depends_on` to the related `aws.iam.RolePolicyAttachment`;
    /// otherwise, the policy may be destroyed too soon and the compute environment will then get stuck in the `DELETING` state, see [Troubleshooting AWS Batch][3] .
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/batch_compute_environment.html.markdown.
    /// </summary>
    public partial class ComputeEnvironment : Pulumi.CustomResource
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the compute environment.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("computeEnvironmentName")]
        public Output<string> ComputeEnvironmentName { get; private set; } = null!;

        /// <summary>
        /// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.
        /// </summary>
        [Output("computeEnvironmentNamePrefix")]
        public Output<string?> ComputeEnvironmentNamePrefix { get; private set; } = null!;

        /// <summary>
        /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
        /// </summary>
        [Output("computeResources")]
        public Output<Outputs.ComputeEnvironmentComputeResources?> ComputeResources { get; private set; } = null!;

        /// <summary>
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
        /// </summary>
        [Output("ecsClusterArn")]
        public Output<string> EcsClusterArn { get; private set; } = null!;

        /// <summary>
        /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
        /// </summary>
        [Output("serviceRole")]
        public Output<string> ServiceRole { get; private set; } = null!;

        /// <summary>
        /// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The current status of the compute environment (for example, CREATING or VALID).
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A short, human-readable string to provide additional details about the current status of the compute environment.
        /// </summary>
        [Output("statusReason")]
        public Output<string> StatusReason { get; private set; } = null!;

        /// <summary>
        /// The type of compute environment. Valid items are `EC2` or `SPOT`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeEnvironment(string name, ComputeEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("aws:batch/computeEnvironment:ComputeEnvironment", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ComputeEnvironment(string name, Input<string> id, ComputeEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:batch/computeEnvironment:ComputeEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeEnvironment Get(string name, Input<string> id, ComputeEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeEnvironment(name, id, state, options);
        }
    }

    public sealed class ComputeEnvironmentArgs : Pulumi.ResourceArgs
    {
        [Input("computeEnvironmentName")]
        public Input<string>? ComputeEnvironmentName { get; set; }

        /// <summary>
        /// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.
        /// </summary>
        [Input("computeEnvironmentNamePrefix")]
        public Input<string>? ComputeEnvironmentNamePrefix { get; set; }

        /// <summary>
        /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
        /// </summary>
        [Input("computeResources")]
        public Input<Inputs.ComputeEnvironmentComputeResourcesArgs>? ComputeResources { get; set; }

        /// <summary>
        /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
        /// </summary>
        [Input("serviceRole", required: true)]
        public Input<string> ServiceRole { get; set; } = null!;

        /// <summary>
        /// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The type of compute environment. Valid items are `EC2` or `SPOT`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ComputeEnvironmentArgs()
        {
        }
    }

    public sealed class ComputeEnvironmentState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Amazon Resource Name (ARN) of the compute environment.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("computeEnvironmentName")]
        public Input<string>? ComputeEnvironmentName { get; set; }

        /// <summary>
        /// Creates a unique compute environment name beginning with the specified prefix. Conflicts with `compute_environment_name`.
        /// </summary>
        [Input("computeEnvironmentNamePrefix")]
        public Input<string>? ComputeEnvironmentNamePrefix { get; set; }

        /// <summary>
        /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
        /// </summary>
        [Input("computeResources")]
        public Input<Inputs.ComputeEnvironmentComputeResourcesGetArgs>? ComputeResources { get; set; }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
        /// </summary>
        [Input("ecsClusterArn")]
        public Input<string>? EcsClusterArn { get; set; }

        /// <summary>
        /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
        /// </summary>
        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        /// <summary>
        /// The state of the compute environment. If the state is `ENABLED`, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are `ENABLED` or `DISABLED`. Defaults to `ENABLED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The current status of the compute environment (for example, CREATING or VALID).
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A short, human-readable string to provide additional details about the current status of the compute environment.
        /// </summary>
        [Input("statusReason")]
        public Input<string>? StatusReason { get; set; }

        /// <summary>
        /// The type of compute environment. Valid items are `EC2` or `SPOT`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ComputeEnvironmentState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ComputeEnvironmentComputeResourcesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
        /// </summary>
        [Input("allocationStrategy")]
        public Input<string>? AllocationStrategy { get; set; }

        /// <summary>
        /// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
        /// </summary>
        [Input("bidPercentage")]
        public Input<int>? BidPercentage { get; set; }

        /// <summary>
        /// The desired number of EC2 vCPUS in the compute environment.
        /// </summary>
        [Input("desiredVcpus")]
        public Input<int>? DesiredVcpus { get; set; }

        /// <summary>
        /// The EC2 key pair that is used for instances launched in the compute environment.
        /// </summary>
        [Input("ec2KeyPair")]
        public Input<string>? Ec2KeyPair { get; set; }

        /// <summary>
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
        /// </summary>
        [Input("instanceRole", required: true)]
        public Input<string> InstanceRole { get; set; } = null!;

        [Input("instanceTypes", required: true)]
        private InputList<string>? _instanceTypes;

        /// <summary>
        /// A list of instance types that may be launched.
        /// </summary>
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        /// <summary>
        /// The launch template to use for your compute resources. See details below.
        /// </summary>
        [Input("launchTemplate")]
        public Input<ComputeEnvironmentComputeResourcesLaunchTemplateArgs>? LaunchTemplate { get; set; }

        /// <summary>
        /// The maximum number of EC2 vCPUs that an environment can reach.
        /// </summary>
        [Input("maxVcpus", required: true)]
        public Input<int> MaxVcpus { get; set; } = null!;

        /// <summary>
        /// The minimum number of EC2 vCPUs that an environment should maintain.
        /// </summary>
        [Input("minVcpus", required: true)]
        public Input<int> MinVcpus { get; set; } = null!;

        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A list of EC2 security group that are associated with instances launched in the compute environment.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
        /// </summary>
        [Input("spotIamFleetRole")]
        public Input<string>? SpotIamFleetRole { get; set; }

        [Input("subnets", required: true)]
        private InputList<string>? _subnets;

        /// <summary>
        /// A list of VPC subnets into which the compute resources are launched.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Key-value pair tags to be applied to resources that are launched in the compute environment.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of compute environment. Valid items are `EC2` or `SPOT`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ComputeEnvironmentComputeResourcesArgs()
        {
        }
    }

    public sealed class ComputeEnvironmentComputeResourcesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
        /// </summary>
        [Input("allocationStrategy")]
        public Input<string>? AllocationStrategy { get; set; }

        /// <summary>
        /// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
        /// </summary>
        [Input("bidPercentage")]
        public Input<int>? BidPercentage { get; set; }

        /// <summary>
        /// The desired number of EC2 vCPUS in the compute environment.
        /// </summary>
        [Input("desiredVcpus")]
        public Input<int>? DesiredVcpus { get; set; }

        /// <summary>
        /// The EC2 key pair that is used for instances launched in the compute environment.
        /// </summary>
        [Input("ec2KeyPair")]
        public Input<string>? Ec2KeyPair { get; set; }

        /// <summary>
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
        /// </summary>
        [Input("instanceRole", required: true)]
        public Input<string> InstanceRole { get; set; } = null!;

        [Input("instanceTypes", required: true)]
        private InputList<string>? _instanceTypes;

        /// <summary>
        /// A list of instance types that may be launched.
        /// </summary>
        public InputList<string> InstanceTypes
        {
            get => _instanceTypes ?? (_instanceTypes = new InputList<string>());
            set => _instanceTypes = value;
        }

        /// <summary>
        /// The launch template to use for your compute resources. See details below.
        /// </summary>
        [Input("launchTemplate")]
        public Input<ComputeEnvironmentComputeResourcesLaunchTemplateGetArgs>? LaunchTemplate { get; set; }

        /// <summary>
        /// The maximum number of EC2 vCPUs that an environment can reach.
        /// </summary>
        [Input("maxVcpus", required: true)]
        public Input<int> MaxVcpus { get; set; } = null!;

        /// <summary>
        /// The minimum number of EC2 vCPUs that an environment should maintain.
        /// </summary>
        [Input("minVcpus", required: true)]
        public Input<int> MinVcpus { get; set; } = null!;

        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// A list of EC2 security group that are associated with instances launched in the compute environment.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
        /// </summary>
        [Input("spotIamFleetRole")]
        public Input<string>? SpotIamFleetRole { get; set; }

        [Input("subnets", required: true)]
        private InputList<string>? _subnets;

        /// <summary>
        /// A list of VPC subnets into which the compute resources are launched.
        /// </summary>
        public InputList<string> Subnets
        {
            get => _subnets ?? (_subnets = new InputList<string>());
            set => _subnets = value;
        }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// Key-value pair tags to be applied to resources that are launched in the compute environment.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of compute environment. Valid items are `EC2` or `SPOT`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ComputeEnvironmentComputeResourcesGetArgs()
        {
        }
    }

    public sealed class ComputeEnvironmentComputeResourcesLaunchTemplateArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        /// </summary>
        [Input("launchTemplateId")]
        public Input<string>? LaunchTemplateId { get; set; }

        /// <summary>
        /// Name of the launch template.
        /// </summary>
        [Input("launchTemplateName")]
        public Input<string>? LaunchTemplateName { get; set; }

        /// <summary>
        /// The version number of the launch template. Default: The default version of the launch template.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ComputeEnvironmentComputeResourcesLaunchTemplateArgs()
        {
        }
    }

    public sealed class ComputeEnvironmentComputeResourcesLaunchTemplateGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        /// </summary>
        [Input("launchTemplateId")]
        public Input<string>? LaunchTemplateId { get; set; }

        /// <summary>
        /// Name of the launch template.
        /// </summary>
        [Input("launchTemplateName")]
        public Input<string>? LaunchTemplateName { get; set; }

        /// <summary>
        /// The version number of the launch template. Default: The default version of the launch template.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ComputeEnvironmentComputeResourcesLaunchTemplateGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ComputeEnvironmentComputeResources
    {
        /// <summary>
        /// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. Valid items are `BEST_FIT_PROGRESSIVE`, `SPOT_CAPACITY_OPTIMIZED` or `BEST_FIT`. Defaults to `BEST_FIT`. See [AWS docs](https://docs.aws.amazon.com/batch/latest/userguide/allocation-strategies.html) for details.
        /// </summary>
        public readonly string? AllocationStrategy;
        /// <summary>
        /// Integer of minimum percentage that a Spot Instance price must be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (`20`), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. This parameter is required for SPOT compute environments.
        /// </summary>
        public readonly int? BidPercentage;
        /// <summary>
        /// The desired number of EC2 vCPUS in the compute environment.
        /// </summary>
        public readonly int? DesiredVcpus;
        /// <summary>
        /// The EC2 key pair that is used for instances launched in the compute environment.
        /// </summary>
        public readonly string? Ec2KeyPair;
        /// <summary>
        /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment.
        /// </summary>
        public readonly string? ImageId;
        /// <summary>
        /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment.
        /// </summary>
        public readonly string InstanceRole;
        /// <summary>
        /// A list of instance types that may be launched.
        /// </summary>
        public readonly ImmutableArray<string> InstanceTypes;
        /// <summary>
        /// The launch template to use for your compute resources. See details below.
        /// </summary>
        public readonly ComputeEnvironmentComputeResourcesLaunchTemplate? LaunchTemplate;
        /// <summary>
        /// The maximum number of EC2 vCPUs that an environment can reach.
        /// </summary>
        public readonly int MaxVcpus;
        /// <summary>
        /// The minimum number of EC2 vCPUs that an environment should maintain.
        /// </summary>
        public readonly int MinVcpus;
        /// <summary>
        /// A list of EC2 security group that are associated with instances launched in the compute environment.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments.
        /// </summary>
        public readonly string? SpotIamFleetRole;
        /// <summary>
        /// A list of VPC subnets into which the compute resources are launched.
        /// </summary>
        public readonly ImmutableArray<string> Subnets;
        /// <summary>
        /// Key-value pair tags to be applied to resources that are launched in the compute environment.
        /// </summary>
        public readonly ImmutableDictionary<string, object>? Tags;
        /// <summary>
        /// The type of compute environment. Valid items are `EC2` or `SPOT`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ComputeEnvironmentComputeResources(
            string? allocationStrategy,
            int? bidPercentage,
            int? desiredVcpus,
            string? ec2KeyPair,
            string? imageId,
            string instanceRole,
            ImmutableArray<string> instanceTypes,
            ComputeEnvironmentComputeResourcesLaunchTemplate? launchTemplate,
            int maxVcpus,
            int minVcpus,
            ImmutableArray<string> securityGroupIds,
            string? spotIamFleetRole,
            ImmutableArray<string> subnets,
            ImmutableDictionary<string, object>? tags,
            string type)
        {
            AllocationStrategy = allocationStrategy;
            BidPercentage = bidPercentage;
            DesiredVcpus = desiredVcpus;
            Ec2KeyPair = ec2KeyPair;
            ImageId = imageId;
            InstanceRole = instanceRole;
            InstanceTypes = instanceTypes;
            LaunchTemplate = launchTemplate;
            MaxVcpus = maxVcpus;
            MinVcpus = minVcpus;
            SecurityGroupIds = securityGroupIds;
            SpotIamFleetRole = spotIamFleetRole;
            Subnets = subnets;
            Tags = tags;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ComputeEnvironmentComputeResourcesLaunchTemplate
    {
        /// <summary>
        /// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
        /// </summary>
        public readonly string? LaunchTemplateId;
        /// <summary>
        /// Name of the launch template.
        /// </summary>
        public readonly string? LaunchTemplateName;
        /// <summary>
        /// The version number of the launch template. Default: The default version of the launch template.
        /// </summary>
        public readonly string? Version;

        [OutputConstructor]
        private ComputeEnvironmentComputeResourcesLaunchTemplate(
            string? launchTemplateId,
            string? launchTemplateName,
            string? version)
        {
            LaunchTemplateId = launchTemplateId;
            LaunchTemplateName = launchTemplateName;
            Version = version;
        }
    }
    }
}
