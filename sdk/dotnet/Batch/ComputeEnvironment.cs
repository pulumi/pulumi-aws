// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Batch
{
    [AwsResourceType("aws:batch/computeEnvironment:ComputeEnvironment")]
    public partial class ComputeEnvironment : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("computeEnvironmentName")]
        public Output<string> ComputeEnvironmentName { get; private set; } = null!;

        [Output("computeEnvironmentNamePrefix")]
        public Output<string> ComputeEnvironmentNamePrefix { get; private set; } = null!;

        [Output("computeResources")]
        public Output<Outputs.ComputeEnvironmentComputeResources?> ComputeResources { get; private set; } = null!;

        [Output("ecsClusterArn")]
        public Output<string> EcsClusterArn { get; private set; } = null!;

        [Output("eksConfiguration")]
        public Output<Outputs.ComputeEnvironmentEksConfiguration?> EksConfiguration { get; private set; } = null!;

        [Output("serviceRole")]
        public Output<string> ServiceRole { get; private set; } = null!;

        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("statusReason")]
        public Output<string> StatusReason { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeEnvironment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeEnvironment(string name, ComputeEnvironmentArgs args, CustomResourceOptions? options = null)
            : base("aws:batch/computeEnvironment:ComputeEnvironment", name, args ?? new ComputeEnvironmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeEnvironment(string name, Input<string> id, ComputeEnvironmentState? state = null, CustomResourceOptions? options = null)
            : base("aws:batch/computeEnvironment:ComputeEnvironment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeEnvironment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeEnvironment Get(string name, Input<string> id, ComputeEnvironmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeEnvironment(name, id, state, options);
        }
    }

    public sealed class ComputeEnvironmentArgs : global::Pulumi.ResourceArgs
    {
        [Input("computeEnvironmentName")]
        public Input<string>? ComputeEnvironmentName { get; set; }

        [Input("computeEnvironmentNamePrefix")]
        public Input<string>? ComputeEnvironmentNamePrefix { get; set; }

        [Input("computeResources")]
        public Input<Inputs.ComputeEnvironmentComputeResourcesArgs>? ComputeResources { get; set; }

        [Input("eksConfiguration")]
        public Input<Inputs.ComputeEnvironmentEksConfigurationArgs>? EksConfiguration { get; set; }

        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ComputeEnvironmentArgs()
        {
        }
        public static new ComputeEnvironmentArgs Empty => new ComputeEnvironmentArgs();
    }

    public sealed class ComputeEnvironmentState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("computeEnvironmentName")]
        public Input<string>? ComputeEnvironmentName { get; set; }

        [Input("computeEnvironmentNamePrefix")]
        public Input<string>? ComputeEnvironmentNamePrefix { get; set; }

        [Input("computeResources")]
        public Input<Inputs.ComputeEnvironmentComputeResourcesGetArgs>? ComputeResources { get; set; }

        [Input("ecsClusterArn")]
        public Input<string>? EcsClusterArn { get; set; }

        [Input("eksConfiguration")]
        public Input<Inputs.ComputeEnvironmentEksConfigurationGetArgs>? EksConfiguration { get; set; }

        [Input("serviceRole")]
        public Input<string>? ServiceRole { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("statusReason")]
        public Input<string>? StatusReason { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ComputeEnvironmentState()
        {
        }
        public static new ComputeEnvironmentState Empty => new ComputeEnvironmentState();
    }
}
