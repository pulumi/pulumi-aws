// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Batch.Outputs
{

    [OutputType]
    public sealed class GetJobDefinitionNodePropertyNodeRangePropertyContainerResult
    {
        /// <summary>
        /// The command that's passed to the container.
        /// </summary>
        public readonly ImmutableArray<string> Commands;
        /// <summary>
        /// The environment variables to pass to a container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironmentResult> Environments;
        /// <summary>
        /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorageResult> EphemeralStorages;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the execution role that AWS Batch can assume. For jobs that run on Fargate resources, you must provide an execution role.
        /// </summary>
        public readonly string ExecutionRoleArn;
        /// <summary>
        /// The platform configuration for jobs that are running on Fargate resources. Jobs that are running on EC2 resources must not specify this parameter.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfigurationResult> FargatePlatformConfigurations;
        /// <summary>
        /// The image used to start a container.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The instance type to use for a multi-node parallel job.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the IAM role that the container can assume for AWS permissions.
        /// </summary>
        public readonly string JobRoleArn;
        /// <summary>
        /// Linux-specific modifications that are applied to the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterResult> LinuxParameters;
        /// <summary>
        /// The log configuration specification for the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfigurationResult> LogConfigurations;
        /// <summary>
        /// The mount points for data volumes in your container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPointResult> MountPoints;
        /// <summary>
        /// The network configuration for jobs that are running on Fargate resources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfigurationResult> NetworkConfigurations;
        /// <summary>
        /// When this parameter is true, the container is given elevated permissions on the host container instance (similar to the root user).
        /// </summary>
        public readonly bool Privileged;
        /// <summary>
        /// When this parameter is true, the container is given read-only access to its root file system.
        /// </summary>
        public readonly bool ReadonlyRootFilesystem;
        /// <summary>
        /// The type and amount of resources to assign to a container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirementResult> ResourceRequirements;
        /// <summary>
        /// An object that represents the compute environment architecture for AWS Batch jobs on Fargate.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatformResult> RuntimePlatforms;
        /// <summary>
        /// The secrets for the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerSecretResult> Secrets;
        /// <summary>
        /// A list of ulimits to set in the container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimitResult> Ulimits;
        /// <summary>
        /// The user name to use inside the container.
        /// </summary>
        public readonly string User;
        /// <summary>
        /// A list of data volumes used in a job.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeResult> Volumes;

        [OutputConstructor]
        private GetJobDefinitionNodePropertyNodeRangePropertyContainerResult(
            ImmutableArray<string> commands,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerEnvironmentResult> environments,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerEphemeralStorageResult> ephemeralStorages,

            string executionRoleArn,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerFargatePlatformConfigurationResult> fargatePlatformConfigurations,

            string image,

            string instanceType,

            string jobRoleArn,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLinuxParameterResult> linuxParameters,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerLogConfigurationResult> logConfigurations,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerMountPointResult> mountPoints,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerNetworkConfigurationResult> networkConfigurations,

            bool privileged,

            bool readonlyRootFilesystem,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerResourceRequirementResult> resourceRequirements,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerRuntimePlatformResult> runtimePlatforms,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerSecretResult> secrets,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerUlimitResult> ulimits,

            string user,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyNodeRangePropertyContainerVolumeResult> volumes)
        {
            Commands = commands;
            Environments = environments;
            EphemeralStorages = ephemeralStorages;
            ExecutionRoleArn = executionRoleArn;
            FargatePlatformConfigurations = fargatePlatformConfigurations;
            Image = image;
            InstanceType = instanceType;
            JobRoleArn = jobRoleArn;
            LinuxParameters = linuxParameters;
            LogConfigurations = logConfigurations;
            MountPoints = mountPoints;
            NetworkConfigurations = networkConfigurations;
            Privileged = privileged;
            ReadonlyRootFilesystem = readonlyRootFilesystem;
            ResourceRequirements = resourceRequirements;
            RuntimePlatforms = runtimePlatforms;
            Secrets = secrets;
            Ulimits = ulimits;
            User = user;
            Volumes = volumes;
        }
    }
}
