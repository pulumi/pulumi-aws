// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Batch
{
    public static class GetJobDefinition
    {
        /// <summary>
        /// Data source for managing an AWS Batch Job Definition.
        /// 
        /// ## Example Usage
        /// 
        /// ### Lookup via Arn
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var arn = Aws.Batch.GetJobDefinition.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:batch:us-east-1:012345678910:job-definition/example",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### Lookup via Name
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Aws.Batch.GetJobDefinition.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         Revision = 2,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetJobDefinitionResult> InvokeAsync(GetJobDefinitionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetJobDefinitionResult>("aws:batch/getJobDefinition:getJobDefinition", args ?? new GetJobDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS Batch Job Definition.
        /// 
        /// ## Example Usage
        /// 
        /// ### Lookup via Arn
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var arn = Aws.Batch.GetJobDefinition.Invoke(new()
        ///     {
        ///         Arn = "arn:aws:batch:us-east-1:012345678910:job-definition/example",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// 
        /// ### Lookup via Name
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var name = Aws.Batch.GetJobDefinition.Invoke(new()
        ///     {
        ///         Name = "example",
        ///         Revision = 2,
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetJobDefinitionResult> Invoke(GetJobDefinitionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetJobDefinitionResult>("aws:batch/getJobDefinition:getJobDefinition", args ?? new GetJobDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetJobDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the Job Definition. Do not begin the description with "An", "The", "Defines", "Indicates", or "Specifies," as these are verbose. In other words, "Indicates the amount of storage," can be rewritten as "Amount of storage," without losing any information.
        /// </summary>
        [Input("arn")]
        public string? Arn { get; set; }

        /// <summary>
        /// The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The revision of the job definition.
        /// </summary>
        [Input("revision")]
        public int? Revision { get; set; }

        /// <summary>
        /// The status of the job definition.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetJobDefinitionArgs()
        {
        }
        public static new GetJobDefinitionArgs Empty => new GetJobDefinitionArgs();
    }

    public sealed class GetJobDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ARN of the Job Definition. Do not begin the description with "An", "The", "Defines", "Indicates", or "Specifies," as these are verbose. In other words, "Indicates the amount of storage," can be rewritten as "Amount of storage," without losing any information.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The name of the job definition to register. It can be up to 128 letters long. It can contain uppercase and lowercase letters, numbers, hyphens (-), and underscores (_).
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The revision of the job definition.
        /// </summary>
        [Input("revision")]
        public Input<int>? Revision { get; set; }

        /// <summary>
        /// The status of the job definition.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetJobDefinitionInvokeArgs()
        {
        }
        public static new GetJobDefinitionInvokeArgs Empty => new GetJobDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetJobDefinitionResult
    {
        public readonly string? Arn;
        public readonly string ArnPrefix;
        /// <summary>
        /// The orchestration type of the compute environment.
        /// </summary>
        public readonly string ContainerOrchestrationType;
        /// <summary>
        /// An object with various properties that are specific to Amazon EKS based jobs. This must not be specified for Amazon ECS based job definitions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionEksPropertyResult> EksProperties;
        /// <summary>
        /// The ARN
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the volume.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// An object with various properties specific to multi-node parallel jobs. If you specify node properties for a job, it becomes a multi-node parallel job. For more information, see Multi-node Parallel Jobs in the AWS Batch User Guide. If the job definition's type parameter is container, then you must specify either containerProperties or nodeProperties.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionNodePropertyResult> NodeProperties;
        /// <summary>
        /// The retry strategy to use for failed jobs that are submitted with this job definition. Any retry strategy that's specified during a SubmitJob operation overrides the retry strategy defined here. If a job is terminated due to a timeout, it isn't retried.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionRetryStrategyResult> RetryStrategies;
        public readonly int? Revision;
        /// <summary>
        /// The scheduling priority for jobs that are submitted with this job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority.
        /// </summary>
        public readonly int SchedulingPriority;
        public readonly string? Status;
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// The timeout configuration for jobs that are submitted with this job definition, after which AWS Batch terminates your jobs if they have not finished. If a job is terminated due to a timeout, it isn't retried. The minimum value for the timeout is 60 seconds.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetJobDefinitionTimeoutResult> Timeouts;
        /// <summary>
        /// The type of resource to assign to a container. The supported resources include `GPU`, `MEMORY`, and `VCPU`.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetJobDefinitionResult(
            string? arn,

            string arnPrefix,

            string containerOrchestrationType,

            ImmutableArray<Outputs.GetJobDefinitionEksPropertyResult> eksProperties,

            string id,

            string? name,

            ImmutableArray<Outputs.GetJobDefinitionNodePropertyResult> nodeProperties,

            ImmutableArray<Outputs.GetJobDefinitionRetryStrategyResult> retryStrategies,

            int? revision,

            int schedulingPriority,

            string? status,

            ImmutableDictionary<string, string> tags,

            ImmutableArray<Outputs.GetJobDefinitionTimeoutResult> timeouts,

            string type)
        {
            Arn = arn;
            ArnPrefix = arnPrefix;
            ContainerOrchestrationType = containerOrchestrationType;
            EksProperties = eksProperties;
            Id = id;
            Name = name;
            NodeProperties = nodeProperties;
            RetryStrategies = retryStrategies;
            Revision = revision;
            SchedulingPriority = schedulingPriority;
            Status = status;
            Tags = tags;
            Timeouts = timeouts;
            Type = type;
        }
    }
}
