// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aws.ApiGateway
{
    public static class GetDomainName
    {
        /// <summary>
        /// Use this data source to get the custom domain name for use with AWS API Gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.ApiGateway.GetDomainName.InvokeAsync(new Aws.ApiGateway.GetDomainNameArgs
        ///         {
        ///             DomainName = "api.example.com",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDomainNameResult> InvokeAsync(GetDomainNameArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDomainNameResult>("aws:apigateway/getDomainName:getDomainName", args ?? new GetDomainNameArgs(), options.WithVersion());

        /// <summary>
        /// Use this data source to get the custom domain name for use with AWS API Gateway.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.ApiGateway.GetDomainName.InvokeAsync(new Aws.ApiGateway.GetDomainNameArgs
        ///         {
        ///             DomainName = "api.example.com",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDomainNameResult> Invoke(GetDomainNameInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDomainNameResult>("aws:apigateway/getDomainName:getDomainName", args ?? new GetDomainNameInvokeArgs(), options.WithVersion());
    }


    public sealed class GetDomainNameArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully-qualified domain name to look up. If no domain name is found, an error will be returned.
        /// </summary>
        [Input("domainName", required: true)]
        public string DomainName { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Key-value map of tags for the resource.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDomainNameArgs()
        {
        }
    }

    public sealed class GetDomainNameInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The fully-qualified domain name to look up. If no domain name is found, an error will be returned.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of tags for the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDomainNameInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDomainNameResult
    {
        /// <summary>
        /// The ARN of the found custom domain name.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The ARN for an AWS-managed certificate that is used by edge-optimized endpoint for this domain name.
        /// </summary>
        public readonly string CertificateArn;
        /// <summary>
        /// The name of the certificate that is used by edge-optimized endpoint for this domain name.
        /// </summary>
        public readonly string CertificateName;
        /// <summary>
        /// The upload date associated with the domain certificate.
        /// </summary>
        public readonly string CertificateUploadDate;
        /// <summary>
        /// The hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
        /// </summary>
        public readonly string CloudfrontDomainName;
        /// <summary>
        /// For convenience, the hosted zone ID (`Z2FDTNDATAQYW2`) that can be used to create a Route53 alias record for the distribution.
        /// </summary>
        public readonly string CloudfrontZoneId;
        public readonly string DomainName;
        /// <summary>
        /// List of objects with the endpoint configuration of this domain name.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainNameEndpointConfigurationResult> EndpointConfigurations;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ARN for an AWS-managed certificate that is used for validating the regional domain name.
        /// </summary>
        public readonly string RegionalCertificateArn;
        /// <summary>
        /// The user-friendly name of the certificate that is used by regional endpoint for this domain name.
        /// </summary>
        public readonly string RegionalCertificateName;
        /// <summary>
        /// The hostname for the custom domain's regional endpoint.
        /// </summary>
        public readonly string RegionalDomainName;
        /// <summary>
        /// The hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
        /// </summary>
        public readonly string RegionalZoneId;
        /// <summary>
        /// The security policy for the domain name.
        /// </summary>
        public readonly string SecurityPolicy;
        /// <summary>
        /// Key-value map of tags for the resource.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetDomainNameResult(
            string arn,

            string certificateArn,

            string certificateName,

            string certificateUploadDate,

            string cloudfrontDomainName,

            string cloudfrontZoneId,

            string domainName,

            ImmutableArray<Outputs.GetDomainNameEndpointConfigurationResult> endpointConfigurations,

            string id,

            string regionalCertificateArn,

            string regionalCertificateName,

            string regionalDomainName,

            string regionalZoneId,

            string securityPolicy,

            ImmutableDictionary<string, string>? tags)
        {
            Arn = arn;
            CertificateArn = certificateArn;
            CertificateName = certificateName;
            CertificateUploadDate = certificateUploadDate;
            CloudfrontDomainName = cloudfrontDomainName;
            CloudfrontZoneId = cloudfrontZoneId;
            DomainName = domainName;
            EndpointConfigurations = endpointConfigurations;
            Id = id;
            RegionalCertificateArn = regionalCertificateArn;
            RegionalCertificateName = regionalCertificateName;
            RegionalDomainName = regionalDomainName;
            RegionalZoneId = regionalZoneId;
            SecurityPolicy = securityPolicy;
            Tags = tags;
        }
    }
}
