// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGateway
{
    public static class GetAuthorizer
    {
        /// <summary>
        /// Provides details about a specific API Gateway Authorizer.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ApiGateway.GetAuthorizer.Invoke(new()
        ///     {
        ///         RestApiId = aws_api_gateway_rest_api.Example.Id,
        ///         AuthorizerId = data.Aws_api_gateway_authorizers.Example.Ids[0],
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAuthorizerResult> InvokeAsync(GetAuthorizerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizerResult>("aws:apigateway/getAuthorizer:getAuthorizer", args ?? new GetAuthorizerArgs(), options.WithDefaults());

        /// <summary>
        /// Provides details about a specific API Gateway Authorizer.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.ApiGateway.GetAuthorizer.Invoke(new()
        ///     {
        ///         RestApiId = aws_api_gateway_rest_api.Example.Id,
        ///         AuthorizerId = data.Aws_api_gateway_authorizers.Example.Ids[0],
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAuthorizerResult> Invoke(GetAuthorizerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizerResult>("aws:apigateway/getAuthorizer:getAuthorizer", args ?? new GetAuthorizerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Authorizer identifier.
        /// </summary>
        [Input("authorizerId", required: true)]
        public string AuthorizerId { get; set; } = null!;

        /// <summary>
        /// ID of the associated REST API.
        /// </summary>
        [Input("restApiId", required: true)]
        public string RestApiId { get; set; } = null!;

        public GetAuthorizerArgs()
        {
        }
        public static new GetAuthorizerArgs Empty => new GetAuthorizerArgs();
    }

    public sealed class GetAuthorizerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Authorizer identifier.
        /// </summary>
        [Input("authorizerId", required: true)]
        public Input<string> AuthorizerId { get; set; } = null!;

        /// <summary>
        /// ID of the associated REST API.
        /// </summary>
        [Input("restApiId", required: true)]
        public Input<string> RestApiId { get; set; } = null!;

        public GetAuthorizerInvokeArgs()
        {
        }
        public static new GetAuthorizerInvokeArgs Empty => new GetAuthorizerInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizerResult
    {
        /// <summary>
        /// ARN of the API Gateway Authorizer.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Credentials required for the authorizer.
        /// </summary>
        public readonly string AuthorizerCredentials;
        public readonly string AuthorizerId;
        /// <summary>
        /// TTL of cached authorizer results in seconds.
        /// </summary>
        public readonly int AuthorizerResultTtlInSeconds;
        /// <summary>
        /// Authorizer's Uniform Resource Identifier (URI).
        /// </summary>
        public readonly string AuthorizerUri;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Source of the identity in an incoming request.
        /// </summary>
        public readonly string IdentitySource;
        /// <summary>
        /// Validation expression for the incoming identity.
        /// </summary>
        public readonly string IdentityValidationExpression;
        /// <summary>
        /// Name of the authorizer.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of the Amazon Cognito user pool ARNs.
        /// </summary>
        public readonly ImmutableArray<string> ProviderArns;
        public readonly string RestApiId;
        /// <summary>
        /// Type of the authorizer.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetAuthorizerResult(
            string arn,

            string authorizerCredentials,

            string authorizerId,

            int authorizerResultTtlInSeconds,

            string authorizerUri,

            string id,

            string identitySource,

            string identityValidationExpression,

            string name,

            ImmutableArray<string> providerArns,

            string restApiId,

            string type)
        {
            Arn = arn;
            AuthorizerCredentials = authorizerCredentials;
            AuthorizerId = authorizerId;
            AuthorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
            AuthorizerUri = authorizerUri;
            Id = id;
            IdentitySource = identitySource;
            IdentityValidationExpression = identityValidationExpression;
            Name = name;
            ProviderArns = providerArns;
            RestApiId = restApiId;
            Type = type;
        }
    }
}
