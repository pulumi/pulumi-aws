// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGateway.Outputs
{

    [OutputType]
    public sealed class MethodSettingsSettings
    {
        /// <summary>
        /// Whether the cached responses are encrypted.
        /// </summary>
        public readonly bool? CacheDataEncrypted;
        /// <summary>
        /// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
        /// </summary>
        public readonly int? CacheTtlInSeconds;
        /// <summary>
        /// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
        /// </summary>
        public readonly bool? CachingEnabled;
        /// <summary>
        /// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
        /// </summary>
        public readonly bool? DataTraceEnabled;
        /// <summary>
        /// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are `OFF`, `ERROR`, and `INFO`.
        /// </summary>
        public readonly string? LoggingLevel;
        /// <summary>
        /// Whether Amazon CloudWatch metrics are enabled for this method.
        /// </summary>
        public readonly bool? MetricsEnabled;
        /// <summary>
        /// Whether authorization is required for a cache invalidation request.
        /// </summary>
        public readonly bool? RequireAuthorizationForCacheControl;
        /// <summary>
        /// Throttling burst limit. Default: `-1` (throttling disabled).
        /// </summary>
        public readonly int? ThrottlingBurstLimit;
        /// <summary>
        /// Throttling rate limit. Default: `-1` (throttling disabled).
        /// </summary>
        public readonly double? ThrottlingRateLimit;
        /// <summary>
        /// How to handle unauthorized requests for cache invalidation. The available values are `FAIL_WITH_403`, `SUCCEED_WITH_RESPONSE_HEADER`, `SUCCEED_WITHOUT_RESPONSE_HEADER`.
        /// </summary>
        public readonly string? UnauthorizedCacheControlHeaderStrategy;

        [OutputConstructor]
        private MethodSettingsSettings(
            bool? cacheDataEncrypted,

            int? cacheTtlInSeconds,

            bool? cachingEnabled,

            bool? dataTraceEnabled,

            string? loggingLevel,

            bool? metricsEnabled,

            bool? requireAuthorizationForCacheControl,

            int? throttlingBurstLimit,

            double? throttlingRateLimit,

            string? unauthorizedCacheControlHeaderStrategy)
        {
            CacheDataEncrypted = cacheDataEncrypted;
            CacheTtlInSeconds = cacheTtlInSeconds;
            CachingEnabled = cachingEnabled;
            DataTraceEnabled = dataTraceEnabled;
            LoggingLevel = loggingLevel;
            MetricsEnabled = metricsEnabled;
            RequireAuthorizationForCacheControl = requireAuthorizationForCacheControl;
            ThrottlingBurstLimit = throttlingBurstLimit;
            ThrottlingRateLimit = throttlingRateLimit;
            UnauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy;
        }
    }
}
