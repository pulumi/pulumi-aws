// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGateway
{
    /// <summary>
    /// Provides an API Gateway Stage.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testRestApi = new Aws.ApiGateway.RestApi("testRestApi", new Aws.ApiGateway.RestApiArgs
    ///         {
    ///             Description = "This is my API for demonstration purposes",
    ///         });
    ///         var testResource = new Aws.ApiGateway.Resource("testResource", new Aws.ApiGateway.ResourceArgs
    ///         {
    ///             RestApi = testRestApi.Id,
    ///             ParentId = testRestApi.RootResourceId,
    ///             PathPart = "mytestresource",
    ///         });
    ///         var testMethod = new Aws.ApiGateway.Method("testMethod", new Aws.ApiGateway.MethodArgs
    ///         {
    ///             RestApi = testRestApi.Id,
    ///             ResourceId = testResource.Id,
    ///             HttpMethod = "GET",
    ///             Authorization = "NONE",
    ///         });
    ///         var testIntegration = new Aws.ApiGateway.Integration("testIntegration", new Aws.ApiGateway.IntegrationArgs
    ///         {
    ///             RestApi = testRestApi.Id,
    ///             ResourceId = testResource.Id,
    ///             HttpMethod = testMethod.HttpMethod,
    ///             Type = "MOCK",
    ///         });
    ///         var testDeployment = new Aws.ApiGateway.Deployment("testDeployment", new Aws.ApiGateway.DeploymentArgs
    ///         {
    ///             RestApi = testRestApi.Id,
    ///             StageName = "dev",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 testIntegration,
    ///             },
    ///         });
    ///         var testStage = new Aws.ApiGateway.Stage("testStage", new Aws.ApiGateway.StageArgs
    ///         {
    ///             StageName = "prod",
    ///             RestApi = testRestApi.Id,
    ///             Deployment = testDeployment.Id,
    ///         });
    ///         var methodSettings = new Aws.ApiGateway.MethodSettings("methodSettings", new Aws.ApiGateway.MethodSettingsArgs
    ///         {
    ///             RestApi = testRestApi.Id,
    ///             StageName = testStage.StageName,
    ///             MethodPath = Output.Tuple(testResource.PathPart, testMethod.HttpMethod).Apply(values =&gt;
    ///             {
    ///                 var pathPart = values.Item1;
    ///                 var httpMethod = values.Item2;
    ///                 return $"{pathPart}/{httpMethod}";
    ///             }),
    ///             Settings = new Aws.ApiGateway.Inputs.MethodSettingsSettingsArgs
    ///             {
    ///                 MetricsEnabled = true,
    ///                 LoggingLevel = "INFO",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Managing the API Logging CloudWatch Log Group
    /// 
    /// API Gateway provides the ability to [enable CloudWatch API logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html). To manage the CloudWatch Log Group when this feature is enabled, the `aws.cloudwatch.LogGroup` resource can be used where the name matches the API Gateway naming convention. If the CloudWatch Log Group previously exists, the `aws.cloudwatch.LogGroup` resource can be imported as a one time operation and recreation of the environment can occur without import.
    /// 
    /// &gt; The below configuration uses [`dependsOn`](https://www.pulumi.com/docs/intro/concepts/programming-model/#dependson) to prevent ordering issues with API Gateway automatically creating the log group first and a variable for naming consistency. Other ordering and naming methodologies may be more appropriate for your environment.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var config = new Config();
    ///         var stageName = config.Get("stageName") ?? "example";
    ///         var exampleRestApi = new Aws.ApiGateway.RestApi("exampleRestApi", new Aws.ApiGateway.RestApiArgs
    ///         {
    ///         });
    ///         // ... other configuration ...
    ///         var exampleLogGroup = new Aws.CloudWatch.LogGroup("exampleLogGroup", new Aws.CloudWatch.LogGroupArgs
    ///         {
    ///             RetentionInDays = 7,
    ///         });
    ///         // ... potentially other configuration ...
    ///         var exampleStage = new Aws.ApiGateway.Stage("exampleStage", new Aws.ApiGateway.StageArgs
    ///         {
    ///             StageName = stageName,
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 exampleLogGroup,
    ///             },
    ///         });
    ///         // ... other configuration ...
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// `aws_api_gateway_stage` can be imported using `REST-API-ID/STAGE-NAME`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import aws:apigateway/stage:Stage example 12345abcde/example
    /// ```
    /// </summary>
    public partial class Stage : Pulumi.CustomResource
    {
        /// <summary>
        /// Enables access logs for the API stage. Detailed below.
        /// </summary>
        [Output("accessLogSettings")]
        public Output<Outputs.StageAccessLogSettings?> AccessLogSettings { get; private set; } = null!;

        /// <summary>
        /// Amazon Resource Name (ARN)
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// Specifies whether a cache cluster is enabled for the stage
        /// </summary>
        [Output("cacheClusterEnabled")]
        public Output<bool?> CacheClusterEnabled { get; private set; } = null!;

        /// <summary>
        /// The size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
        /// </summary>
        [Output("cacheClusterSize")]
        public Output<string?> CacheClusterSize { get; private set; } = null!;

        /// <summary>
        /// The identifier of a client certificate for the stage.
        /// </summary>
        [Output("clientCertificateId")]
        public Output<string?> ClientCertificateId { get; private set; } = null!;

        /// <summary>
        /// The ID of the deployment that the stage points to
        /// </summary>
        [Output("deployment")]
        public Output<string> Deployment { get; private set; } = null!;

        /// <summary>
        /// The description of the stage
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The version of the associated API documentation
        /// </summary>
        [Output("documentationVersion")]
        public Output<string?> DocumentationVersion { get; private set; } = null!;

        /// <summary>
        /// The execution ARN to be used in `lambda_permission`'s `source_arn`
        /// when allowing API Gateway to invoke a Lambda function,
        /// e.g. `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
        /// </summary>
        [Output("executionArn")]
        public Output<string> ExecutionArn { get; private set; } = null!;

        /// <summary>
        /// The URL to invoke the API pointing to the stage,
        /// e.g. `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
        /// </summary>
        [Output("invokeUrl")]
        public Output<string> InvokeUrl { get; private set; } = null!;

        /// <summary>
        /// The ID of the associated REST API
        /// </summary>
        [Output("restApi")]
        public Output<string> RestApi { get; private set; } = null!;

        /// <summary>
        /// The name of the stage
        /// </summary>
        [Output("stageName")]
        public Output<string> StageName { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map that defines the stage variables
        /// </summary>
        [Output("variables")]
        public Output<ImmutableDictionary<string, string>?> Variables { get; private set; } = null!;

        /// <summary>
        /// Whether active tracing with X-ray is enabled. Defaults to `false`.
        /// </summary>
        [Output("xrayTracingEnabled")]
        public Output<bool?> XrayTracingEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Stage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Stage(string name, StageArgs args, CustomResourceOptions? options = null)
            : base("aws:apigateway/stage:Stage", name, args ?? new StageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Stage(string name, Input<string> id, StageState? state = null, CustomResourceOptions? options = null)
            : base("aws:apigateway/stage:Stage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Stage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Stage Get(string name, Input<string> id, StageState? state = null, CustomResourceOptions? options = null)
        {
            return new Stage(name, id, state, options);
        }
    }

    public sealed class StageArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables access logs for the API stage. Detailed below.
        /// </summary>
        [Input("accessLogSettings")]
        public Input<Inputs.StageAccessLogSettingsArgs>? AccessLogSettings { get; set; }

        /// <summary>
        /// Specifies whether a cache cluster is enabled for the stage
        /// </summary>
        [Input("cacheClusterEnabled")]
        public Input<bool>? CacheClusterEnabled { get; set; }

        /// <summary>
        /// The size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
        /// </summary>
        [Input("cacheClusterSize")]
        public Input<string>? CacheClusterSize { get; set; }

        /// <summary>
        /// The identifier of a client certificate for the stage.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// The ID of the deployment that the stage points to
        /// </summary>
        [Input("deployment", required: true)]
        public Input<string> Deployment { get; set; } = null!;

        /// <summary>
        /// The description of the stage
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The version of the associated API documentation
        /// </summary>
        [Input("documentationVersion")]
        public Input<string>? DocumentationVersion { get; set; }

        /// <summary>
        /// The ID of the associated REST API
        /// </summary>
        [Input("restApi", required: true)]
        public Input<string> RestApi { get; set; } = null!;

        /// <summary>
        /// The name of the stage
        /// </summary>
        [Input("stageName", required: true)]
        public Input<string> StageName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("variables")]
        private InputMap<string>? _variables;

        /// <summary>
        /// A map that defines the stage variables
        /// </summary>
        public InputMap<string> Variables
        {
            get => _variables ?? (_variables = new InputMap<string>());
            set => _variables = value;
        }

        /// <summary>
        /// Whether active tracing with X-ray is enabled. Defaults to `false`.
        /// </summary>
        [Input("xrayTracingEnabled")]
        public Input<bool>? XrayTracingEnabled { get; set; }

        public StageArgs()
        {
        }
    }

    public sealed class StageState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enables access logs for the API stage. Detailed below.
        /// </summary>
        [Input("accessLogSettings")]
        public Input<Inputs.StageAccessLogSettingsGetArgs>? AccessLogSettings { get; set; }

        /// <summary>
        /// Amazon Resource Name (ARN)
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// Specifies whether a cache cluster is enabled for the stage
        /// </summary>
        [Input("cacheClusterEnabled")]
        public Input<bool>? CacheClusterEnabled { get; set; }

        /// <summary>
        /// The size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
        /// </summary>
        [Input("cacheClusterSize")]
        public Input<string>? CacheClusterSize { get; set; }

        /// <summary>
        /// The identifier of a client certificate for the stage.
        /// </summary>
        [Input("clientCertificateId")]
        public Input<string>? ClientCertificateId { get; set; }

        /// <summary>
        /// The ID of the deployment that the stage points to
        /// </summary>
        [Input("deployment")]
        public Input<string>? Deployment { get; set; }

        /// <summary>
        /// The description of the stage
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The version of the associated API documentation
        /// </summary>
        [Input("documentationVersion")]
        public Input<string>? DocumentationVersion { get; set; }

        /// <summary>
        /// The execution ARN to be used in `lambda_permission`'s `source_arn`
        /// when allowing API Gateway to invoke a Lambda function,
        /// e.g. `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
        /// </summary>
        [Input("executionArn")]
        public Input<string>? ExecutionArn { get; set; }

        /// <summary>
        /// The URL to invoke the API pointing to the stage,
        /// e.g. `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
        /// </summary>
        [Input("invokeUrl")]
        public Input<string>? InvokeUrl { get; set; }

        /// <summary>
        /// The ID of the associated REST API
        /// </summary>
        [Input("restApi")]
        public Input<string>? RestApi { get; set; }

        /// <summary>
        /// The name of the stage
        /// </summary>
        [Input("stageName")]
        public Input<string>? StageName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("variables")]
        private InputMap<string>? _variables;

        /// <summary>
        /// A map that defines the stage variables
        /// </summary>
        public InputMap<string> Variables
        {
            get => _variables ?? (_variables = new InputMap<string>());
            set => _variables = value;
        }

        /// <summary>
        /// Whether active tracing with X-ray is enabled. Defaults to `false`.
        /// </summary>
        [Input("xrayTracingEnabled")]
        public Input<bool>? XrayTracingEnabled { get; set; }

        public StageState()
        {
        }
    }
}
