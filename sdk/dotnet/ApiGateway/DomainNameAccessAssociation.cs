// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGateway
{
    /// <summary>
    /// Creates a domain name access association resource between an access association source and a private custom domain name.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.ApiGateway.DomainNameAccessAssociation("example", new()
    ///     {
    ///         AccessAssociationSource = exampleAwsVpcEndpoint.Id,
    ///         AccessAssociationSourceType = "VPCE",
    ///         DomainNameArn = exampleAwsApiGatewayDomainName.Arn,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import API Gateway domain name acces associations as using their `arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation example arn:aws:apigateway:us-west-2:123456789012:/domainnameaccessassociations/domainname/12qmzgp2.9m7ilski.test+hykg7a12e7/vpcesource/vpce-05de3f8f82740a748
    /// ```
    /// </summary>
    [AwsResourceType("aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation")]
    public partial class DomainNameAccessAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
        /// </summary>
        [Output("accessAssociationSource")]
        public Output<string> AccessAssociationSource { get; private set; } = null!;

        /// <summary>
        /// The type of the domain name access association source. Valid values are `VPCE`.
        /// </summary>
        [Output("accessAssociationSourceType")]
        public Output<string> AccessAssociationSourceType { get; private set; } = null!;

        /// <summary>
        /// ARN of the domain name access association.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// The ARN of the domain name.
        /// </summary>
        [Output("domainNameArn")]
        public Output<string> DomainNameArn { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a DomainNameAccessAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainNameAccessAssociation(string name, DomainNameAccessAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation", name, args ?? new DomainNameAccessAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainNameAccessAssociation(string name, Input<string> id, DomainNameAccessAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:apigateway/domainNameAccessAssociation:DomainNameAccessAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainNameAccessAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainNameAccessAssociation Get(string name, Input<string> id, DomainNameAccessAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainNameAccessAssociation(name, id, state, options);
        }
    }

    public sealed class DomainNameAccessAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
        /// </summary>
        [Input("accessAssociationSource", required: true)]
        public Input<string> AccessAssociationSource { get; set; } = null!;

        /// <summary>
        /// The type of the domain name access association source. Valid values are `VPCE`.
        /// </summary>
        [Input("accessAssociationSourceType", required: true)]
        public Input<string> AccessAssociationSourceType { get; set; } = null!;

        /// <summary>
        /// The ARN of the domain name.
        /// </summary>
        [Input("domainNameArn", required: true)]
        public Input<string> DomainNameArn { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DomainNameAccessAssociationArgs()
        {
        }
        public static new DomainNameAccessAssociationArgs Empty => new DomainNameAccessAssociationArgs();
    }

    public sealed class DomainNameAccessAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The identifier of the domain name access association source. For a `VPCE`, the value is the VPC endpoint ID.
        /// </summary>
        [Input("accessAssociationSource")]
        public Input<string>? AccessAssociationSource { get; set; }

        /// <summary>
        /// The type of the domain name access association source. Valid values are `VPCE`.
        /// </summary>
        [Input("accessAssociationSourceType")]
        public Input<string>? AccessAssociationSourceType { get; set; }

        /// <summary>
        /// ARN of the domain name access association.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// The ARN of the domain name.
        /// </summary>
        [Input("domainNameArn")]
        public Input<string>? DomainNameArn { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public DomainNameAccessAssociationState()
        {
        }
        public static new DomainNameAccessAssociationState Empty => new DomainNameAccessAssociationState();
    }
}
