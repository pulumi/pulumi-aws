// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ApiGateway
{
    [AwsResourceType("aws:apigateway/domainName:DomainName")]
    public partial class DomainName : global::Pulumi.CustomResource
    {
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("certificateArn")]
        public Output<string?> CertificateArn { get; private set; } = null!;

        [Output("certificateBody")]
        public Output<string?> CertificateBody { get; private set; } = null!;

        [Output("certificateChain")]
        public Output<string?> CertificateChain { get; private set; } = null!;

        [Output("certificateName")]
        public Output<string?> CertificateName { get; private set; } = null!;

        [Output("certificatePrivateKey")]
        public Output<string?> CertificatePrivateKey { get; private set; } = null!;

        [Output("certificateUploadDate")]
        public Output<string> CertificateUploadDate { get; private set; } = null!;

        [Output("cloudfrontDomainName")]
        public Output<string> CloudfrontDomainName { get; private set; } = null!;

        [Output("cloudfrontZoneId")]
        public Output<string> CloudfrontZoneId { get; private set; } = null!;

        [Output("domainName")]
        public Output<string> Domain { get; private set; } = null!;

        [Output("endpointConfiguration")]
        public Output<Outputs.DomainNameEndpointConfiguration> EndpointConfiguration { get; private set; } = null!;

        [Output("mutualTlsAuthentication")]
        public Output<Outputs.DomainNameMutualTlsAuthentication?> MutualTlsAuthentication { get; private set; } = null!;

        [Output("ownershipVerificationCertificateArn")]
        public Output<string> OwnershipVerificationCertificateArn { get; private set; } = null!;

        [Output("regionalCertificateArn")]
        public Output<string?> RegionalCertificateArn { get; private set; } = null!;

        [Output("regionalCertificateName")]
        public Output<string?> RegionalCertificateName { get; private set; } = null!;

        [Output("regionalDomainName")]
        public Output<string> RegionalDomainName { get; private set; } = null!;

        [Output("regionalZoneId")]
        public Output<string> RegionalZoneId { get; private set; } = null!;

        [Output("securityPolicy")]
        public Output<string> SecurityPolicy { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;


        /// <summary>
        /// Create a DomainName resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DomainName(string name, DomainNameArgs args, CustomResourceOptions? options = null)
            : base("aws:apigateway/domainName:DomainName", name, args ?? new DomainNameArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DomainName(string name, Input<string> id, DomainNameState? state = null, CustomResourceOptions? options = null)
            : base("aws:apigateway/domainName:DomainName", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "certificatePrivateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DomainName resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DomainName Get(string name, Input<string> id, DomainNameState? state = null, CustomResourceOptions? options = null)
        {
            return new DomainName(name, id, state, options);
        }
    }

    public sealed class DomainNameArgs : global::Pulumi.ResourceArgs
    {
        [Input("certificateArn")]
        public Input<string>? CertificateArn { get; set; }

        [Input("certificateBody")]
        public Input<string>? CertificateBody { get; set; }

        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        [Input("certificatePrivateKey")]
        private Input<string>? _certificatePrivateKey;
        public Input<string>? CertificatePrivateKey
        {
            get => _certificatePrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("domainName", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("endpointConfiguration")]
        public Input<Inputs.DomainNameEndpointConfigurationArgs>? EndpointConfiguration { get; set; }

        [Input("mutualTlsAuthentication")]
        public Input<Inputs.DomainNameMutualTlsAuthenticationArgs>? MutualTlsAuthentication { get; set; }

        [Input("ownershipVerificationCertificateArn")]
        public Input<string>? OwnershipVerificationCertificateArn { get; set; }

        [Input("regionalCertificateArn")]
        public Input<string>? RegionalCertificateArn { get; set; }

        [Input("regionalCertificateName")]
        public Input<string>? RegionalCertificateName { get; set; }

        [Input("securityPolicy")]
        public Input<string>? SecurityPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public DomainNameArgs()
        {
        }
        public static new DomainNameArgs Empty => new DomainNameArgs();
    }

    public sealed class DomainNameState : global::Pulumi.ResourceArgs
    {
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("certificateArn")]
        public Input<string>? CertificateArn { get; set; }

        [Input("certificateBody")]
        public Input<string>? CertificateBody { get; set; }

        [Input("certificateChain")]
        public Input<string>? CertificateChain { get; set; }

        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        [Input("certificatePrivateKey")]
        private Input<string>? _certificatePrivateKey;
        public Input<string>? CertificatePrivateKey
        {
            get => _certificatePrivateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _certificatePrivateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("certificateUploadDate")]
        public Input<string>? CertificateUploadDate { get; set; }

        [Input("cloudfrontDomainName")]
        public Input<string>? CloudfrontDomainName { get; set; }

        [Input("cloudfrontZoneId")]
        public Input<string>? CloudfrontZoneId { get; set; }

        [Input("domainName")]
        public Input<string>? Domain { get; set; }

        [Input("endpointConfiguration")]
        public Input<Inputs.DomainNameEndpointConfigurationGetArgs>? EndpointConfiguration { get; set; }

        [Input("mutualTlsAuthentication")]
        public Input<Inputs.DomainNameMutualTlsAuthenticationGetArgs>? MutualTlsAuthentication { get; set; }

        [Input("ownershipVerificationCertificateArn")]
        public Input<string>? OwnershipVerificationCertificateArn { get; set; }

        [Input("regionalCertificateArn")]
        public Input<string>? RegionalCertificateArn { get; set; }

        [Input("regionalCertificateName")]
        public Input<string>? RegionalCertificateName { get; set; }

        [Input("regionalDomainName")]
        public Input<string>? RegionalDomainName { get; set; }

        [Input("regionalZoneId")]
        public Input<string>? RegionalZoneId { get; set; }

        [Input("securityPolicy")]
        public Input<string>? SecurityPolicy { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public DomainNameState()
        {
        }
        public static new DomainNameState Empty => new DomainNameState();
    }
}
