// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    public static class GetServerlessCollection
    {
        /// <summary>
        /// Data source for managing an AWS OpenSearch Serverless Collection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.OpenSearch.GetServerlessCollection.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServerlessCollectionResult> InvokeAsync(GetServerlessCollectionArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerlessCollectionResult>("aws:opensearch/getServerlessCollection:getServerlessCollection", args ?? new GetServerlessCollectionArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for managing an AWS OpenSearch Serverless Collection.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.OpenSearch.GetServerlessCollection.Invoke(new()
        ///     {
        ///         Name = "example",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServerlessCollectionResult> Invoke(GetServerlessCollectionInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessCollectionResult>("aws:opensearch/getServerlessCollection:getServerlessCollection", args ?? new GetServerlessCollectionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerlessCollectionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the collection. Either `id` or `name` must be provided.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the collection. Either `name` or `id` must be provided.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetServerlessCollectionArgs()
        {
        }
        public static new GetServerlessCollectionArgs Empty => new GetServerlessCollectionArgs();
    }

    public sealed class GetServerlessCollectionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the collection. Either `id` or `name` must be provided.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Name of the collection. Either `name` or `id` must be provided.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetServerlessCollectionInvokeArgs()
        {
        }
        public static new GetServerlessCollectionInvokeArgs Empty => new GetServerlessCollectionInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerlessCollectionResult
    {
        /// <summary>
        /// Amazon Resource Name (ARN) of the collection.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Collection-specific endpoint used to submit index, search, and data upload requests to an OpenSearch Serverless collection.
        /// </summary>
        public readonly string CollectionEndpoint;
        /// <summary>
        /// Date the Collection was created.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Collection-specific endpoint used to access OpenSearch Dashboards.
        /// </summary>
        public readonly string DashboardEndpoint;
        /// <summary>
        /// Description of the collection.
        /// </summary>
        public readonly string Description;
        public readonly string Id;
        /// <summary>
        /// The ARN of the Amazon Web Services KMS key used to encrypt the collection.
        /// </summary>
        public readonly string KmsKeyArn;
        /// <summary>
        /// Date the Collection was last modified.
        /// </summary>
        public readonly string LastModifiedDate;
        public readonly string Name;
        /// <summary>
        /// A map of tags to assign to the collection.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// Type of collection.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetServerlessCollectionResult(
            string arn,

            string collectionEndpoint,

            string createdDate,

            string dashboardEndpoint,

            string description,

            string id,

            string kmsKeyArn,

            string lastModifiedDate,

            string name,

            ImmutableDictionary<string, string> tags,

            string type)
        {
            Arn = arn;
            CollectionEndpoint = collectionEndpoint;
            CreatedDate = createdDate;
            DashboardEndpoint = dashboardEndpoint;
            Description = description;
            Id = id;
            KmsKeyArn = kmsKeyArn;
            LastModifiedDate = lastModifiedDate;
            Name = name;
            Tags = tags;
            Type = type;
        }
    }
}
