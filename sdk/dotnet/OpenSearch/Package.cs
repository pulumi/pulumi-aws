// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    /// <summary>
    /// Manages an AWS Opensearch Package.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_opensearch_package.example
    /// 
    ///  id = "package-id" } Using `pulumi import`, import AWS Opensearch Packages using the Package ID. For exampleconsole % pulumi import aws:opensearch/package:Package example package-id
    /// </summary>
    [AwsResourceType("aws:opensearch/package:Package")]
    public partial class Package : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The current version of the package.
        /// </summary>
        [Output("availablePackageVersion")]
        public Output<string> AvailablePackageVersion { get; private set; } = null!;

        /// <summary>
        /// Description of the package.
        /// </summary>
        [Output("packageDescription")]
        public Output<string?> PackageDescription { get; private set; } = null!;

        [Output("packageId")]
        public Output<string> PackageId { get; private set; } = null!;

        /// <summary>
        /// Unique name for the package.
        /// </summary>
        [Output("packageName")]
        public Output<string> PackageName { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the package source options.
        /// </summary>
        [Output("packageSource")]
        public Output<Outputs.PackagePackageSource> PackageSource { get; private set; } = null!;

        /// <summary>
        /// The type of package.
        /// </summary>
        [Output("packageType")]
        public Output<string> PackageType { get; private set; } = null!;


        /// <summary>
        /// Create a Package resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Package(string name, PackageArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearch/package:Package", name, args ?? new PackageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Package(string name, Input<string> id, PackageState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearch/package:Package", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Package resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Package Get(string name, Input<string> id, PackageState? state = null, CustomResourceOptions? options = null)
        {
            return new Package(name, id, state, options);
        }
    }

    public sealed class PackageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the package.
        /// </summary>
        [Input("packageDescription")]
        public Input<string>? PackageDescription { get; set; }

        /// <summary>
        /// Unique name for the package.
        /// </summary>
        [Input("packageName", required: true)]
        public Input<string> PackageName { get; set; } = null!;

        /// <summary>
        /// Configuration block for the package source options.
        /// </summary>
        [Input("packageSource", required: true)]
        public Input<Inputs.PackagePackageSourceArgs> PackageSource { get; set; } = null!;

        /// <summary>
        /// The type of package.
        /// </summary>
        [Input("packageType", required: true)]
        public Input<string> PackageType { get; set; } = null!;

        public PackageArgs()
        {
        }
        public static new PackageArgs Empty => new PackageArgs();
    }

    public sealed class PackageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The current version of the package.
        /// </summary>
        [Input("availablePackageVersion")]
        public Input<string>? AvailablePackageVersion { get; set; }

        /// <summary>
        /// Description of the package.
        /// </summary>
        [Input("packageDescription")]
        public Input<string>? PackageDescription { get; set; }

        [Input("packageId")]
        public Input<string>? PackageId { get; set; }

        /// <summary>
        /// Unique name for the package.
        /// </summary>
        [Input("packageName")]
        public Input<string>? PackageName { get; set; }

        /// <summary>
        /// Configuration block for the package source options.
        /// </summary>
        [Input("packageSource")]
        public Input<Inputs.PackagePackageSourceGetArgs>? PackageSource { get; set; }

        /// <summary>
        /// The type of package.
        /// </summary>
        [Input("packageType")]
        public Input<string>? PackageType { get; set; }

        public PackageState()
        {
        }
        public static new PackageState Empty => new PackageState();
    }
}
