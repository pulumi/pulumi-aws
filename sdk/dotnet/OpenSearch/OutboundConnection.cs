// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    /// <summary>
    /// Manages an AWS Opensearch Outbound Connection.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// AWS Opensearch Outbound Connections can be imported by using the Outbound Connection ID, e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:opensearch/outboundConnection:OutboundConnection foo connection-id
    /// ```
    /// </summary>
    [AwsResourceType("aws:opensearch/outboundConnection:OutboundConnection")]
    public partial class OutboundConnection : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies the connection alias that will be used by the customer for this connection.
        /// </summary>
        [Output("connectionAlias")]
        public Output<string> ConnectionAlias { get; private set; } = null!;

        /// <summary>
        /// Status of the connection request.
        /// </summary>
        [Output("connectionStatus")]
        public Output<string> ConnectionStatus { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the local Opensearch domain.
        /// </summary>
        [Output("localDomainInfo")]
        public Output<Outputs.OutboundConnectionLocalDomainInfo> LocalDomainInfo { get; private set; } = null!;

        /// <summary>
        /// Configuration block for the remote Opensearch domain.
        /// </summary>
        [Output("remoteDomainInfo")]
        public Output<Outputs.OutboundConnectionRemoteDomainInfo> RemoteDomainInfo { get; private set; } = null!;


        /// <summary>
        /// Create a OutboundConnection resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OutboundConnection(string name, OutboundConnectionArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearch/outboundConnection:OutboundConnection", name, args ?? new OutboundConnectionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OutboundConnection(string name, Input<string> id, OutboundConnectionState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearch/outboundConnection:OutboundConnection", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OutboundConnection resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OutboundConnection Get(string name, Input<string> id, OutboundConnectionState? state = null, CustomResourceOptions? options = null)
        {
            return new OutboundConnection(name, id, state, options);
        }
    }

    public sealed class OutboundConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the connection alias that will be used by the customer for this connection.
        /// </summary>
        [Input("connectionAlias", required: true)]
        public Input<string> ConnectionAlias { get; set; } = null!;

        /// <summary>
        /// Configuration block for the local Opensearch domain.
        /// </summary>
        [Input("localDomainInfo", required: true)]
        public Input<Inputs.OutboundConnectionLocalDomainInfoArgs> LocalDomainInfo { get; set; } = null!;

        /// <summary>
        /// Configuration block for the remote Opensearch domain.
        /// </summary>
        [Input("remoteDomainInfo", required: true)]
        public Input<Inputs.OutboundConnectionRemoteDomainInfoArgs> RemoteDomainInfo { get; set; } = null!;

        public OutboundConnectionArgs()
        {
        }
        public static new OutboundConnectionArgs Empty => new OutboundConnectionArgs();
    }

    public sealed class OutboundConnectionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the connection alias that will be used by the customer for this connection.
        /// </summary>
        [Input("connectionAlias")]
        public Input<string>? ConnectionAlias { get; set; }

        /// <summary>
        /// Status of the connection request.
        /// </summary>
        [Input("connectionStatus")]
        public Input<string>? ConnectionStatus { get; set; }

        /// <summary>
        /// Configuration block for the local Opensearch domain.
        /// </summary>
        [Input("localDomainInfo")]
        public Input<Inputs.OutboundConnectionLocalDomainInfoGetArgs>? LocalDomainInfo { get; set; }

        /// <summary>
        /// Configuration block for the remote Opensearch domain.
        /// </summary>
        [Input("remoteDomainInfo")]
        public Input<Inputs.OutboundConnectionRemoteDomainInfoGetArgs>? RemoteDomainInfo { get; set; }

        public OutboundConnectionState()
        {
        }
        public static new OutboundConnectionState Empty => new OutboundConnectionState();
    }
}
