// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    /// <summary>
    /// Resource for managing an AWS OpenSearchServerless VPC Endpoint.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.OpenSearch.ServerlessVpcEndpoint("example", new()
    ///     {
    ///         SubnetIds = new[]
    ///         {
    ///             aws_subnet.Example.Id,
    ///         },
    ///         VpcId = aws_vpc.Example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import OpenSearchServerless Vpc Endpointa using the `id`. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint example vpce-8012925589
    /// ```
    /// </summary>
    [AwsResourceType("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint")]
    public partial class ServerlessVpcEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the interface endpoint.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.ServerlessVpcEndpointTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// ID of the VPC from which you'll access OpenSearch Serverless.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerlessVpcEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerlessVpcEndpoint(string name, ServerlessVpcEndpointArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", name, args ?? new ServerlessVpcEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerlessVpcEndpoint(string name, Input<string> id, ServerlessVpcEndpointState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearch/serverlessVpcEndpoint:ServerlessVpcEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerlessVpcEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerlessVpcEndpoint Get(string name, Input<string> id, ServerlessVpcEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerlessVpcEndpoint(name, id, state, options);
        }
    }

    public sealed class ServerlessVpcEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the interface endpoint.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ServerlessVpcEndpointTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// ID of the VPC from which you'll access OpenSearch Serverless.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ServerlessVpcEndpointArgs()
        {
        }
        public static new ServerlessVpcEndpointArgs Empty => new ServerlessVpcEndpointArgs();
    }

    public sealed class ServerlessVpcEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the interface endpoint.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// One or more security groups that define the ports, protocols, and sources for inbound traffic that you are authorizing into your endpoint. Up to 5 security groups can be provided.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// One or more subnet IDs from which you'll access OpenSearch Serverless. Up to 6 subnets can be provided.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("timeouts")]
        public Input<Inputs.ServerlessVpcEndpointTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// ID of the VPC from which you'll access OpenSearch Serverless.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerlessVpcEndpointState()
        {
        }
        public static new ServerlessVpcEndpointState Empty => new ServerlessVpcEndpointState();
    }
}
