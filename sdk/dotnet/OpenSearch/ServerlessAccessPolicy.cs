// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    /// <summary>
    /// Resource for managing an AWS OpenSearch Serverless Access Policy.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var currentCallerIdentity = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var currentPartition = Aws.GetPartition.Invoke();
    /// 
    ///     var test = new Aws.OpenSearch.ServerlessAccessPolicy("test", new()
    ///     {
    ///         Name = "example",
    ///         Type = "data",
    ///         Policy = Output.Tuple(currentPartition, currentCallerIdentity).Apply(values =&gt;
    ///         {
    ///             var currentPartition = values.Item1;
    ///             var currentCallerIdentity = values.Item2;
    ///             return JsonSerializer.Serialize(new[]
    ///             {
    ///                 new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     ["Rules"] = new[]
    ///                     {
    ///                         new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["ResourceType"] = "index",
    ///                             ["Resource"] = new[]
    ///                             {
    ///                                 "index/books/*",
    ///                             },
    ///                             ["Permission"] = new[]
    ///                             {
    ///                                 "aoss:CreateIndex",
    ///                                 "aoss:ReadDocument",
    ///                                 "aoss:UpdateIndex",
    ///                                 "aoss:DeleteIndex",
    ///                                 "aoss:WriteDocument",
    ///                             },
    ///                         },
    ///                     },
    ///                     ["Principal"] = new[]
    ///                     {
    ///                         $"arn:{currentPartition.Apply(getPartitionResult =&gt; getPartitionResult.Partition)}:iam::{currentCallerIdentity.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId)}:user/admin",
    ///                     },
    ///                 },
    ///             });
    ///         }),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OpenSearchServerless Access Policy can be imported using the `name` and `type` arguments separated by a slash (`/`), e.g.,
    /// 
    /// ```sh
    ///  $ pulumi import aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy example example/data
    /// ```
    /// </summary>
    [AwsResourceType("aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy")]
    public partial class ServerlessAccessPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the policy. Typically used to store information about the permissions defined in the policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// JSON policy document to use as the content for the new policy
        /// </summary>
        [Output("policy")]
        public Output<string> Policy { get; private set; } = null!;

        /// <summary>
        /// Version of the policy.
        /// </summary>
        [Output("policyVersion")]
        public Output<string> PolicyVersion { get; private set; } = null!;

        /// <summary>
        /// Type of access policy. Must be `data`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ServerlessAccessPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerlessAccessPolicy(string name, ServerlessAccessPolicyArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy", name, args ?? new ServerlessAccessPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerlessAccessPolicy(string name, Input<string> id, ServerlessAccessPolicyState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearch/serverlessAccessPolicy:ServerlessAccessPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerlessAccessPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerlessAccessPolicy Get(string name, Input<string> id, ServerlessAccessPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerlessAccessPolicy(name, id, state, options);
        }
    }

    public sealed class ServerlessAccessPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the policy. Typically used to store information about the permissions defined in the policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the policy.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// JSON policy document to use as the content for the new policy
        /// </summary>
        [Input("policy", required: true)]
        public Input<string> Policy { get; set; } = null!;

        /// <summary>
        /// Type of access policy. Must be `data`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServerlessAccessPolicyArgs()
        {
        }
        public static new ServerlessAccessPolicyArgs Empty => new ServerlessAccessPolicyArgs();
    }

    public sealed class ServerlessAccessPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the policy. Typically used to store information about the permissions defined in the policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// JSON policy document to use as the content for the new policy
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Version of the policy.
        /// </summary>
        [Input("policyVersion")]
        public Input<string>? PolicyVersion { get; set; }

        /// <summary>
        /// Type of access policy. Must be `data`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServerlessAccessPolicyState()
        {
        }
        public static new ServerlessAccessPolicyState Empty => new ServerlessAccessPolicyState();
    }
}
