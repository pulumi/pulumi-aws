// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    /// <summary>
    /// Resource for managing an AWS OpenSearch Authorize Vpc Endpoint Access.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var current = Aws.GetCallerIdentity.Invoke();
    /// 
    ///     var test = new Aws.OpenSearch.AuthorizeVpcEndpointAccess("test", new()
    ///     {
    ///         DomainName = testAwsOpensearchDomain.DomainName,
    ///         Account = current.Apply(getCallerIdentityResult =&gt; getCallerIdentityResult.AccountId),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import OpenSearch Authorize Vpc Endpoint Access using the `example_id_arg`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:opensearch/authorizeVpcEndpointAccess:AuthorizeVpcEndpointAccess example authorize_vpc_endpoint_access-id-12345678
    /// ```
    /// </summary>
    [AwsResourceType("aws:opensearch/authorizeVpcEndpointAccess:AuthorizeVpcEndpointAccess")]
    public partial class AuthorizeVpcEndpointAccess : global::Pulumi.CustomResource
    {
        /// <summary>
        /// AWS account ID to grant access to.
        /// </summary>
        [Output("account")]
        public Output<string> Account { get; private set; } = null!;

        /// <summary>
        /// Information about the Amazon Web Services account or service that was provided access to the domain. See authorized principal attribute for further details.
        /// </summary>
        [Output("authorizedPrincipals")]
        public Output<ImmutableArray<Outputs.AuthorizeVpcEndpointAccessAuthorizedPrincipal>> AuthorizedPrincipals { get; private set; } = null!;

        /// <summary>
        /// Name of OpenSearch Service domain to provide access to.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;


        /// <summary>
        /// Create a AuthorizeVpcEndpointAccess resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AuthorizeVpcEndpointAccess(string name, AuthorizeVpcEndpointAccessArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearch/authorizeVpcEndpointAccess:AuthorizeVpcEndpointAccess", name, args ?? new AuthorizeVpcEndpointAccessArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AuthorizeVpcEndpointAccess(string name, Input<string> id, AuthorizeVpcEndpointAccessState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearch/authorizeVpcEndpointAccess:AuthorizeVpcEndpointAccess", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AuthorizeVpcEndpointAccess resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AuthorizeVpcEndpointAccess Get(string name, Input<string> id, AuthorizeVpcEndpointAccessState? state = null, CustomResourceOptions? options = null)
        {
            return new AuthorizeVpcEndpointAccess(name, id, state, options);
        }
    }

    public sealed class AuthorizeVpcEndpointAccessArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS account ID to grant access to.
        /// </summary>
        [Input("account", required: true)]
        public Input<string> Account { get; set; } = null!;

        /// <summary>
        /// Name of OpenSearch Service domain to provide access to.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        public AuthorizeVpcEndpointAccessArgs()
        {
        }
        public static new AuthorizeVpcEndpointAccessArgs Empty => new AuthorizeVpcEndpointAccessArgs();
    }

    public sealed class AuthorizeVpcEndpointAccessState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// AWS account ID to grant access to.
        /// </summary>
        [Input("account")]
        public Input<string>? Account { get; set; }

        [Input("authorizedPrincipals")]
        private InputList<Inputs.AuthorizeVpcEndpointAccessAuthorizedPrincipalGetArgs>? _authorizedPrincipals;

        /// <summary>
        /// Information about the Amazon Web Services account or service that was provided access to the domain. See authorized principal attribute for further details.
        /// </summary>
        public InputList<Inputs.AuthorizeVpcEndpointAccessAuthorizedPrincipalGetArgs> AuthorizedPrincipals
        {
            get => _authorizedPrincipals ?? (_authorizedPrincipals = new InputList<Inputs.AuthorizeVpcEndpointAccessAuthorizedPrincipalGetArgs>());
            set => _authorizedPrincipals = value;
        }

        /// <summary>
        /// Name of OpenSearch Service domain to provide access to.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        public AuthorizeVpcEndpointAccessState()
        {
        }
        public static new AuthorizeVpcEndpointAccessState Empty => new AuthorizeVpcEndpointAccessState();
    }
}
