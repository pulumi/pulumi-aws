// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpenSearch
{
    /// <summary>
    /// Manages an AWS Opensearch Package Association.
    /// 
    /// ## Example Usage
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myDomain = new Aws.OpenSearch.Domain("myDomain", new()
    ///     {
    ///         EngineVersion = "Elasticsearch_7.10",
    ///         ClusterConfig = new Aws.OpenSearch.Inputs.DomainClusterConfigArgs
    ///         {
    ///             InstanceType = "r4.large.search",
    ///         },
    ///     });
    /// 
    ///     var examplePackage = new Aws.OpenSearch.Package("examplePackage", new()
    ///     {
    ///         PackageName = "example-txt",
    ///         PackageSource = new Aws.OpenSearch.Inputs.PackagePackageSourceArgs
    ///         {
    ///             S3BucketName = aws_s3_bucket.My_opensearch_packages.Bucket,
    ///             S3Key = aws_s3_object.Example.Key,
    ///         },
    ///         PackageType = "TXT-DICTIONARY",
    ///     });
    /// 
    ///     var examplePackageAssociation = new Aws.OpenSearch.PackageAssociation("examplePackageAssociation", new()
    ///     {
    ///         PackageId = examplePackage.Id,
    ///         DomainName = myDomain.DomainName,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [AwsResourceType("aws:opensearch/packageAssociation:PackageAssociation")]
    public partial class PackageAssociation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the domain to associate the package with.
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// Internal ID of the package to associate with a domain.
        /// </summary>
        [Output("packageId")]
        public Output<string> PackageId { get; private set; } = null!;

        [Output("referencePath")]
        public Output<string> ReferencePath { get; private set; } = null!;


        /// <summary>
        /// Create a PackageAssociation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PackageAssociation(string name, PackageAssociationArgs args, CustomResourceOptions? options = null)
            : base("aws:opensearch/packageAssociation:PackageAssociation", name, args ?? new PackageAssociationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PackageAssociation(string name, Input<string> id, PackageAssociationState? state = null, CustomResourceOptions? options = null)
            : base("aws:opensearch/packageAssociation:PackageAssociation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PackageAssociation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PackageAssociation Get(string name, Input<string> id, PackageAssociationState? state = null, CustomResourceOptions? options = null)
        {
            return new PackageAssociation(name, id, state, options);
        }
    }

    public sealed class PackageAssociationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the domain to associate the package with.
        /// </summary>
        [Input("domainName", required: true)]
        public Input<string> DomainName { get; set; } = null!;

        /// <summary>
        /// Internal ID of the package to associate with a domain.
        /// </summary>
        [Input("packageId", required: true)]
        public Input<string> PackageId { get; set; } = null!;

        public PackageAssociationArgs()
        {
        }
        public static new PackageAssociationArgs Empty => new PackageAssociationArgs();
    }

    public sealed class PackageAssociationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the domain to associate the package with.
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Internal ID of the package to associate with a domain.
        /// </summary>
        [Input("packageId")]
        public Input<string>? PackageId { get; set; }

        [Input("referencePath")]
        public Input<string>? ReferencePath { get; set; }

        public PackageAssociationState()
        {
        }
        public static new PackageAssociationState Empty => new PackageAssociationState();
    }
}
