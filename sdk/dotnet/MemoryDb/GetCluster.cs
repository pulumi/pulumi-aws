// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MemoryDb
{
    public static class GetCluster
    {
        /// <summary>
        /// Provides information about a MemoryDB Cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.MemoryDb.GetCluster.Invoke(new()
        ///     {
        ///         Name = "my-cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterResult> InvokeAsync(GetClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetClusterResult>("aws:memorydb/getCluster:getCluster", args ?? new GetClusterArgs(), options.WithDefaults());

        /// <summary>
        /// Provides information about a MemoryDB Cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.MemoryDb.GetCluster.Invoke(new()
        ///     {
        ///         Name = "my-cluster",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterResult> Invoke(GetClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetClusterResult>("aws:memorydb/getCluster:getCluster", args ?? new GetClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the cluster.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags assigned to the cluster.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetClusterArgs()
        {
        }
        public static new GetClusterArgs Empty => new GetClusterArgs();
    }

    public sealed class GetClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the cluster.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the cluster.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetClusterInvokeArgs()
        {
        }
        public static new GetClusterInvokeArgs Empty => new GetClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetClusterResult
    {
        /// <summary>
        /// Name of the Access Control List associated with the cluster.
        /// </summary>
        public readonly string AclName;
        /// <summary>
        /// ARN of the cluster.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// True when the cluster allows automatic minor version upgrades.
        /// * `cluster_endpoint`
        /// </summary>
        public readonly bool AutoMinorVersionUpgrade;
        public readonly ImmutableArray<Outputs.GetClusterClusterEndpointResult> ClusterEndpoints;
        /// <summary>
        /// True when data tiering is enabled.
        /// </summary>
        public readonly bool DataTiering;
        /// <summary>
        /// Description for the cluster.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Patch version number of the Redis engine used by the cluster.
        /// </summary>
        public readonly string EnginePatchVersion;
        /// <summary>
        /// Version number of the Redis engine used by the cluster.
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// Name of the final cluster snapshot to be created when this resource is deleted. If omitted, no final snapshot will be made.
        /// </summary>
        public readonly string FinalSnapshotName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARN of the KMS key used to encrypt the cluster at rest.
        /// </summary>
        public readonly string KmsKeyArn;
        /// <summary>
        /// Weekly time range during which maintenance on the cluster is performed. Specify as a range in the format `ddd:hh24:mi-ddd:hh24:mi` (24H Clock UTC). Example: `sun:23:00-mon:01:30`.
        /// </summary>
        public readonly string MaintenanceWindow;
        /// <summary>
        /// Name of this node.
        /// * `endpoint`
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Compute and memory capacity of the nodes in the cluster.
        /// </summary>
        public readonly string NodeType;
        /// <summary>
        /// The number of replicas to apply to each shard.
        /// </summary>
        public readonly int NumReplicasPerShard;
        /// <summary>
        /// Number of shards in the cluster.
        /// </summary>
        public readonly int NumShards;
        /// <summary>
        /// The name of the parameter group associated with the cluster.
        /// </summary>
        public readonly string ParameterGroupName;
        /// <summary>
        /// Port number that this node is listening on.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Set of VPC Security Group ID-s associated with this cluster.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// Set of shards in this cluster.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetClusterShardResult> Shards;
        /// <summary>
        /// The number of days for which MemoryDB retains automatic snapshots before deleting them. When set to `0`, automatic backups are disabled.
        /// </summary>
        public readonly int SnapshotRetentionLimit;
        /// <summary>
        /// Daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your shard. Example: `05:00-09:00`.
        /// </summary>
        public readonly string SnapshotWindow;
        /// <summary>
        /// ARN of the SNS topic to which cluster notifications are sent.
        /// * `subnet_group_name` -The name of the subnet group used for the cluster.
        /// </summary>
        public readonly string SnsTopicArn;
        public readonly string SubnetGroupName;
        /// <summary>
        /// Map of tags assigned to the cluster.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Tags;
        /// <summary>
        /// When true, in-transit encryption is enabled for the cluster.
        /// </summary>
        public readonly bool TlsEnabled;

        [OutputConstructor]
        private GetClusterResult(
            string aclName,

            string arn,

            bool autoMinorVersionUpgrade,

            ImmutableArray<Outputs.GetClusterClusterEndpointResult> clusterEndpoints,

            bool dataTiering,

            string description,

            string enginePatchVersion,

            string engineVersion,

            string finalSnapshotName,

            string id,

            string kmsKeyArn,

            string maintenanceWindow,

            string name,

            string nodeType,

            int numReplicasPerShard,

            int numShards,

            string parameterGroupName,

            int port,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<Outputs.GetClusterShardResult> shards,

            int snapshotRetentionLimit,

            string snapshotWindow,

            string snsTopicArn,

            string subnetGroupName,

            ImmutableDictionary<string, string> tags,

            bool tlsEnabled)
        {
            AclName = aclName;
            Arn = arn;
            AutoMinorVersionUpgrade = autoMinorVersionUpgrade;
            ClusterEndpoints = clusterEndpoints;
            DataTiering = dataTiering;
            Description = description;
            EnginePatchVersion = enginePatchVersion;
            EngineVersion = engineVersion;
            FinalSnapshotName = finalSnapshotName;
            Id = id;
            KmsKeyArn = kmsKeyArn;
            MaintenanceWindow = maintenanceWindow;
            Name = name;
            NodeType = nodeType;
            NumReplicasPerShard = numReplicasPerShard;
            NumShards = numShards;
            ParameterGroupName = parameterGroupName;
            Port = port;
            SecurityGroupIds = securityGroupIds;
            Shards = shards;
            SnapshotRetentionLimit = snapshotRetentionLimit;
            SnapshotWindow = snapshotWindow;
            SnsTopicArn = snsTopicArn;
            SubnetGroupName = subnetGroupName;
            Tags = tags;
            TlsEnabled = tlsEnabled;
        }
    }
}
