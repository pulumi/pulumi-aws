// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MemoryDb
{
    /// <summary>
    /// Provides a MemoryDB Multi Region Cluster.
    /// 
    /// More information about MemoryDB can be found in the [Developer Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/what-is-memorydb-for-redis.html).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.MemoryDb.MultiRegionCluster("example", new()
    ///     {
    ///         MultiRegionClusterNameSuffix = "example",
    ///         NodeType = "db.r7g.xlarge",
    ///     });
    /// 
    ///     var exampleCluster = new Aws.MemoryDb.Cluster("example", new()
    ///     {
    ///         AclName = exampleAwsMemorydbAcl.Id,
    ///         AutoMinorVersionUpgrade = false,
    ///         Name = "example",
    ///         NodeType = "db.t4g.small",
    ///         NumShards = 2,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             exampleAwsSecurityGroup.Id,
    ///         },
    ///         SnapshotRetentionLimit = 7,
    ///         SubnetGroupName = exampleAwsMemorydbSubnetGroup.Id,
    ///         MultiRegionClusterName = example.MultiRegionClusterName,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import a cluster using the `multi_region_cluster_name`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:memorydb/multiRegionCluster:MultiRegionCluster example virxk-example
    /// ```
    /// </summary>
    [AwsResourceType("aws:memorydb/multiRegionCluster:MultiRegionCluster")]
    public partial class MultiRegionCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ARN of the multi-region cluster.
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// description for the multi-region cluster.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
        /// </summary>
        [Output("engine")]
        public Output<string> Engine { get; private set; } = null!;

        /// <summary>
        /// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
        /// </summary>
        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        /// <summary>
        /// The name of the multi-region cluster.
        /// </summary>
        [Output("multiRegionClusterName")]
        public Output<string> MultiRegionClusterName { get; private set; } = null!;

        /// <summary>
        /// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
        /// </summary>
        [Output("multiRegionClusterNameSuffix")]
        public Output<string> MultiRegionClusterNameSuffix { get; private set; } = null!;

        /// <summary>
        /// The name of the multi-region parameter group to be associated with the cluster.
        /// </summary>
        [Output("multiRegionParameterGroupName")]
        public Output<string> MultiRegionParameterGroupName { get; private set; } = null!;

        /// <summary>
        /// The node type to be used for the multi-region cluster.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        /// <summary>
        /// The number of shards for the multi-region cluster.
        /// </summary>
        [Output("numShards")]
        public Output<int> NumShards { get; private set; } = null!;

        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.MultiRegionClusterTimeouts?> Timeouts { get; private set; } = null!;

        /// <summary>
        /// A flag to enable in-transit encryption on the cluster.
        /// </summary>
        [Output("tlsEnabled")]
        public Output<bool> TlsEnabled { get; private set; } = null!;

        [Output("updateStrategy")]
        public Output<string?> UpdateStrategy { get; private set; } = null!;


        /// <summary>
        /// Create a MultiRegionCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MultiRegionCluster(string name, MultiRegionClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:memorydb/multiRegionCluster:MultiRegionCluster", name, args ?? new MultiRegionClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MultiRegionCluster(string name, Input<string> id, MultiRegionClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:memorydb/multiRegionCluster:MultiRegionCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MultiRegionCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MultiRegionCluster Get(string name, Input<string> id, MultiRegionClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new MultiRegionCluster(name, id, state, options);
        }
    }

    public sealed class MultiRegionClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// description for the multi-region cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
        /// </summary>
        [Input("multiRegionClusterNameSuffix", required: true)]
        public Input<string> MultiRegionClusterNameSuffix { get; set; } = null!;

        /// <summary>
        /// The name of the multi-region parameter group to be associated with the cluster.
        /// </summary>
        [Input("multiRegionParameterGroupName")]
        public Input<string>? MultiRegionParameterGroupName { get; set; }

        /// <summary>
        /// The node type to be used for the multi-region cluster.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        /// <summary>
        /// The number of shards for the multi-region cluster.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("timeouts")]
        public Input<Inputs.MultiRegionClusterTimeoutsArgs>? Timeouts { get; set; }

        /// <summary>
        /// A flag to enable in-transit encryption on the cluster.
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        [Input("updateStrategy")]
        public Input<string>? UpdateStrategy { get; set; }

        public MultiRegionClusterArgs()
        {
        }
        public static new MultiRegionClusterArgs Empty => new MultiRegionClusterArgs();
    }

    public sealed class MultiRegionClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ARN of the multi-region cluster.
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        /// <summary>
        /// description for the multi-region cluster.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
        /// </summary>
        [Input("engine")]
        public Input<string>? Engine { get; set; }

        /// <summary>
        /// The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
        /// </summary>
        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        /// <summary>
        /// The name of the multi-region cluster.
        /// </summary>
        [Input("multiRegionClusterName")]
        public Input<string>? MultiRegionClusterName { get; set; }

        /// <summary>
        /// A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
        /// </summary>
        [Input("multiRegionClusterNameSuffix")]
        public Input<string>? MultiRegionClusterNameSuffix { get; set; }

        /// <summary>
        /// The name of the multi-region parameter group to be associated with the cluster.
        /// </summary>
        [Input("multiRegionParameterGroupName")]
        public Input<string>? MultiRegionParameterGroupName { get; set; }

        /// <summary>
        /// The node type to be used for the multi-region cluster.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        /// <summary>
        /// The number of shards for the multi-region cluster.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("timeouts")]
        public Input<Inputs.MultiRegionClusterTimeoutsGetArgs>? Timeouts { get; set; }

        /// <summary>
        /// A flag to enable in-transit encryption on the cluster.
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        [Input("updateStrategy")]
        public Input<string>? UpdateStrategy { get; set; }

        public MultiRegionClusterState()
        {
        }
        public static new MultiRegionClusterState Empty => new MultiRegionClusterState();
    }
}
