// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.MemoryDb
{
    [AwsResourceType("aws:memorydb/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        [Output("aclName")]
        public Output<string> AclName { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("autoMinorVersionUpgrade")]
        public Output<bool?> AutoMinorVersionUpgrade { get; private set; } = null!;

        [Output("clusterEndpoints")]
        public Output<ImmutableArray<Outputs.ClusterClusterEndpoint>> ClusterEndpoints { get; private set; } = null!;

        [Output("dataTiering")]
        public Output<bool?> DataTiering { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("enginePatchVersion")]
        public Output<string> EnginePatchVersion { get; private set; } = null!;

        [Output("engineVersion")]
        public Output<string> EngineVersion { get; private set; } = null!;

        [Output("finalSnapshotName")]
        public Output<string?> FinalSnapshotName { get; private set; } = null!;

        [Output("kmsKeyArn")]
        public Output<string?> KmsKeyArn { get; private set; } = null!;

        [Output("maintenanceWindow")]
        public Output<string> MaintenanceWindow { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("namePrefix")]
        public Output<string> NamePrefix { get; private set; } = null!;

        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        [Output("numReplicasPerShard")]
        public Output<int?> NumReplicasPerShard { get; private set; } = null!;

        [Output("numShards")]
        public Output<int?> NumShards { get; private set; } = null!;

        [Output("parameterGroupName")]
        public Output<string> ParameterGroupName { get; private set; } = null!;

        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        [Output("shards")]
        public Output<ImmutableArray<Outputs.ClusterShard>> Shards { get; private set; } = null!;

        [Output("snapshotArns")]
        public Output<ImmutableArray<string>> SnapshotArns { get; private set; } = null!;

        [Output("snapshotName")]
        public Output<string?> SnapshotName { get; private set; } = null!;

        [Output("snapshotRetentionLimit")]
        public Output<int> SnapshotRetentionLimit { get; private set; } = null!;

        [Output("snapshotWindow")]
        public Output<string> SnapshotWindow { get; private set; } = null!;

        [Output("snsTopicArn")]
        public Output<string?> SnsTopicArn { get; private set; } = null!;

        [Output("subnetGroupName")]
        public Output<string> SubnetGroupName { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("tlsEnabled")]
        public Output<bool?> TlsEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("aws:memorydb/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("aws:memorydb/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclName", required: true)]
        public Input<string> AclName { get; set; } = null!;

        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        [Input("dataTiering")]
        public Input<bool>? DataTiering { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("finalSnapshotName")]
        public Input<string>? FinalSnapshotName { get; set; }

        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("maintenanceWindow")]
        public Input<string>? MaintenanceWindow { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        [Input("numReplicasPerShard")]
        public Input<int>? NumReplicasPerShard { get; set; }

        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("snapshotArns")]
        private InputList<string>? _snapshotArns;
        public InputList<string> SnapshotArns
        {
            get => _snapshotArns ?? (_snapshotArns = new InputList<string>());
            set => _snapshotArns = value;
        }

        [Input("snapshotName")]
        public Input<string>? SnapshotName { get; set; }

        [Input("snapshotRetentionLimit")]
        public Input<int>? SnapshotRetentionLimit { get; set; }

        [Input("snapshotWindow")]
        public Input<string>? SnapshotWindow { get; set; }

        [Input("snsTopicArn")]
        public Input<string>? SnsTopicArn { get; set; }

        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("aclName")]
        public Input<string>? AclName { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("autoMinorVersionUpgrade")]
        public Input<bool>? AutoMinorVersionUpgrade { get; set; }

        [Input("clusterEndpoints")]
        private InputList<Inputs.ClusterClusterEndpointGetArgs>? _clusterEndpoints;
        public InputList<Inputs.ClusterClusterEndpointGetArgs> ClusterEndpoints
        {
            get => _clusterEndpoints ?? (_clusterEndpoints = new InputList<Inputs.ClusterClusterEndpointGetArgs>());
            set => _clusterEndpoints = value;
        }

        [Input("dataTiering")]
        public Input<bool>? DataTiering { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enginePatchVersion")]
        public Input<string>? EnginePatchVersion { get; set; }

        [Input("engineVersion")]
        public Input<string>? EngineVersion { get; set; }

        [Input("finalSnapshotName")]
        public Input<string>? FinalSnapshotName { get; set; }

        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        [Input("maintenanceWindow")]
        public Input<string>? MaintenanceWindow { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namePrefix")]
        public Input<string>? NamePrefix { get; set; }

        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("numReplicasPerShard")]
        public Input<int>? NumReplicasPerShard { get; set; }

        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("parameterGroupName")]
        public Input<string>? ParameterGroupName { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("shards")]
        private InputList<Inputs.ClusterShardGetArgs>? _shards;
        public InputList<Inputs.ClusterShardGetArgs> Shards
        {
            get => _shards ?? (_shards = new InputList<Inputs.ClusterShardGetArgs>());
            set => _shards = value;
        }

        [Input("snapshotArns")]
        private InputList<string>? _snapshotArns;
        public InputList<string> SnapshotArns
        {
            get => _snapshotArns ?? (_snapshotArns = new InputList<string>());
            set => _snapshotArns = value;
        }

        [Input("snapshotName")]
        public Input<string>? SnapshotName { get; set; }

        [Input("snapshotRetentionLimit")]
        public Input<int>? SnapshotRetentionLimit { get; set; }

        [Input("snapshotWindow")]
        public Input<string>? SnapshotWindow { get; set; }

        [Input("snsTopicArn")]
        public Input<string>? SnsTopicArn { get; set; }

        [Input("subnetGroupName")]
        public Input<string>? SubnetGroupName { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
