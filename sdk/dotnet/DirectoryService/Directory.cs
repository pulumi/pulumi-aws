// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectoryService
{
    [AwsResourceType("aws:directoryservice/directory:Directory")]
    public partial class Directory : global::Pulumi.CustomResource
    {
        [Output("accessUrl")]
        public Output<string> AccessUrl { get; private set; } = null!;

        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        [Output("connectSettings")]
        public Output<Outputs.DirectoryConnectSettings?> ConnectSettings { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("desiredNumberOfDomainControllers")]
        public Output<int> DesiredNumberOfDomainControllers { get; private set; } = null!;

        [Output("dnsIpAddresses")]
        public Output<ImmutableArray<string>> DnsIpAddresses { get; private set; } = null!;

        [Output("edition")]
        public Output<string> Edition { get; private set; } = null!;

        [Output("enableSso")]
        public Output<bool?> EnableSso { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        [Output("shortName")]
        public Output<string> ShortName { get; private set; } = null!;

        [Output("size")]
        public Output<string> Size { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("vpcSettings")]
        public Output<Outputs.DirectoryVpcSettings?> VpcSettings { get; private set; } = null!;


        /// <summary>
        /// Create a Directory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Directory(string name, DirectoryArgs args, CustomResourceOptions? options = null)
            : base("aws:directoryservice/directory:Directory", name, args ?? new DirectoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Directory(string name, Input<string> id, DirectoryState? state = null, CustomResourceOptions? options = null)
            : base("aws:directoryservice/directory:Directory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Directory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Directory Get(string name, Input<string> id, DirectoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Directory(name, id, state, options);
        }
    }

    public sealed class DirectoryArgs : global::Pulumi.ResourceArgs
    {
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("connectSettings")]
        public Input<Inputs.DirectoryConnectSettingsArgs>? ConnectSettings { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("desiredNumberOfDomainControllers")]
        public Input<int>? DesiredNumberOfDomainControllers { get; set; }

        [Input("edition")]
        public Input<string>? Edition { get; set; }

        [Input("enableSso")]
        public Input<bool>? EnableSso { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vpcSettings")]
        public Input<Inputs.DirectoryVpcSettingsArgs>? VpcSettings { get; set; }

        public DirectoryArgs()
        {
        }
        public static new DirectoryArgs Empty => new DirectoryArgs();
    }

    public sealed class DirectoryState : global::Pulumi.ResourceArgs
    {
        [Input("accessUrl")]
        public Input<string>? AccessUrl { get; set; }

        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("connectSettings")]
        public Input<Inputs.DirectoryConnectSettingsGetArgs>? ConnectSettings { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("desiredNumberOfDomainControllers")]
        public Input<int>? DesiredNumberOfDomainControllers { get; set; }

        [Input("dnsIpAddresses")]
        private InputList<string>? _dnsIpAddresses;
        public InputList<string> DnsIpAddresses
        {
            get => _dnsIpAddresses ?? (_dnsIpAddresses = new InputList<string>());
            set => _dnsIpAddresses = value;
        }

        [Input("edition")]
        public Input<string>? Edition { get; set; }

        [Input("enableSso")]
        public Input<bool>? EnableSso { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        [Input("size")]
        public Input<string>? Size { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("vpcSettings")]
        public Input<Inputs.DirectoryVpcSettingsGetArgs>? VpcSettings { get; set; }

        public DirectoryState()
        {
        }
        public static new DirectoryState Empty => new DirectoryState();
    }
}
