// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectoryService
{
    /// <summary>
    /// Manages a trust relationship between two Active Directory Directories.
    /// 
    /// The directories may either be both AWS Managed Microsoft AD domains or an AWS Managed Microsoft AD domain and a self-managed Active Directory Domain.
    /// 
    /// The Trust relationship must be configured on both sides of the relationship.
    /// If a Trust has only been created on one side, it will be in the state `VerifyFailed`.
    /// Once the second Trust is created, the first will update to the correct state.
    /// 
    /// ## Example Usage
    /// ### Two-Way Trust
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oneDirectory = new Aws.DirectoryService.Directory("oneDirectory", new()
    ///     {
    ///         Name = "one.example.com",
    ///         Type = "MicrosoftAD",
    ///     });
    /// 
    ///     // ...
    ///     var twoDirectory = new Aws.DirectoryService.Directory("twoDirectory", new()
    ///     {
    ///         Name = "two.example.com",
    ///         Type = "MicrosoftAD",
    ///     });
    /// 
    ///     // ...
    ///     var oneTrust = new Aws.DirectoryService.Trust("oneTrust", new()
    ///     {
    ///         DirectoryId = oneDirectory.Id,
    ///         RemoteDomainName = twoDirectory.Name,
    ///         TrustDirection = "Two-Way",
    ///         TrustPassword = "Some0therPassword",
    ///         ConditionalForwarderIpAddrs = twoDirectory.DnsIpAddresses,
    ///     });
    /// 
    ///     var twoTrust = new Aws.DirectoryService.Trust("twoTrust", new()
    ///     {
    ///         DirectoryId = twoDirectory.Id,
    ///         RemoteDomainName = oneDirectory.Name,
    ///         TrustDirection = "Two-Way",
    ///         TrustPassword = "Some0therPassword",
    ///         ConditionalForwarderIpAddrs = oneDirectory.DnsIpAddresses,
    ///     });
    /// 
    /// });
    /// ```
    /// ### One-Way Trust
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var oneDirectory = new Aws.DirectoryService.Directory("oneDirectory", new()
    ///     {
    ///         Name = "one.example.com",
    ///         Type = "MicrosoftAD",
    ///     });
    /// 
    ///     // ...
    ///     var twoDirectory = new Aws.DirectoryService.Directory("twoDirectory", new()
    ///     {
    ///         Name = "two.example.com",
    ///         Type = "MicrosoftAD",
    ///     });
    /// 
    ///     // ...
    ///     var oneTrust = new Aws.DirectoryService.Trust("oneTrust", new()
    ///     {
    ///         DirectoryId = oneDirectory.Id,
    ///         RemoteDomainName = twoDirectory.Name,
    ///         TrustDirection = "One-Way: Incoming",
    ///         TrustPassword = "Some0therPassword",
    ///         ConditionalForwarderIpAddrs = twoDirectory.DnsIpAddresses,
    ///     });
    /// 
    ///     var twoTrust = new Aws.DirectoryService.Trust("twoTrust", new()
    ///     {
    ///         DirectoryId = twoDirectory.Id,
    ///         RemoteDomainName = oneDirectory.Name,
    ///         TrustDirection = "One-Way: Outgoing",
    ///         TrustPassword = "Some0therPassword",
    ///         ConditionalForwarderIpAddrs = oneDirectory.DnsIpAddresses,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_directory_service_trust.example
    /// 
    ///  id = "d-926724cf57/directory.example.com" } Using `pulumi import`, import the Trust relationship using the directory ID and remote domain name, separated by a `/`. For exampleconsole % pulumi import aws_directory_service_trust.example d-926724cf57/directory.example.com
    /// </summary>
    [AwsResourceType("aws:directoryservice/trust:Trust")]
    public partial class Trust : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set of IPv4 addresses for the DNS server associated with the remote Directory.
        /// Can contain between 1 and 4 values.
        /// </summary>
        [Output("conditionalForwarderIpAddrs")]
        public Output<ImmutableArray<string>> ConditionalForwarderIpAddrs { get; private set; } = null!;

        /// <summary>
        /// Date and time when the Trust was created.
        /// </summary>
        [Output("createdDateTime")]
        public Output<string> CreatedDateTime { get; private set; } = null!;

        /// <summary>
        /// Whether to delete the conditional forwarder when deleting the Trust relationship.
        /// </summary>
        [Output("deleteAssociatedConditionalForwarder")]
        public Output<bool> DeleteAssociatedConditionalForwarder { get; private set; } = null!;

        /// <summary>
        /// ID of the Directory.
        /// </summary>
        [Output("directoryId")]
        public Output<string> DirectoryId { get; private set; } = null!;

        /// <summary>
        /// Date and time when the Trust was last updated.
        /// </summary>
        [Output("lastUpdatedDateTime")]
        public Output<string> LastUpdatedDateTime { get; private set; } = null!;

        /// <summary>
        /// Fully qualified domain name of the remote Directory.
        /// </summary>
        [Output("remoteDomainName")]
        public Output<string> RemoteDomainName { get; private set; } = null!;

        /// <summary>
        /// Whether to enable selective authentication.
        /// Valid values are `Enabled` and `Disabled`.
        /// Default value is `Disabled`.
        /// </summary>
        [Output("selectiveAuth")]
        public Output<string> SelectiveAuth { get; private set; } = null!;

        /// <summary>
        /// Date and time when the Trust state in `trust_state` was last updated.
        /// </summary>
        [Output("stateLastUpdatedDateTime")]
        public Output<string> StateLastUpdatedDateTime { get; private set; } = null!;

        /// <summary>
        /// The direction of the Trust relationship.
        /// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
        /// </summary>
        [Output("trustDirection")]
        public Output<string> TrustDirection { get; private set; } = null!;

        /// <summary>
        /// Password for the Trust.
        /// Does not need to match the passwords for either Directory.
        /// Can contain upper- and lower-case letters, numbers, and punctuation characters.
        /// May be up to 128 characters long.
        /// </summary>
        [Output("trustPassword")]
        public Output<string> TrustPassword { get; private set; } = null!;

        /// <summary>
        /// State of the Trust relationship.
        /// One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
        /// </summary>
        [Output("trustState")]
        public Output<string> Truststate { get; private set; } = null!;

        /// <summary>
        /// Reason for the Trust state set in `trust_state`.
        /// </summary>
        [Output("trustStateReason")]
        public Output<string> TrustStateReason { get; private set; } = null!;

        /// <summary>
        /// Type of the Trust relationship.
        /// Valid values are `Forest` and `External`.
        /// Default value is `Forest`.
        /// </summary>
        [Output("trustType")]
        public Output<string> TrustType { get; private set; } = null!;


        /// <summary>
        /// Create a Trust resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Trust(string name, TrustArgs args, CustomResourceOptions? options = null)
            : base("aws:directoryservice/trust:Trust", name, args ?? new TrustArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Trust(string name, Input<string> id, TrustState? state = null, CustomResourceOptions? options = null)
            : base("aws:directoryservice/trust:Trust", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Trust resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Trust Get(string name, Input<string> id, TrustState? state = null, CustomResourceOptions? options = null)
        {
            return new Trust(name, id, state, options);
        }
    }

    public sealed class TrustArgs : global::Pulumi.ResourceArgs
    {
        [Input("conditionalForwarderIpAddrs")]
        private InputList<string>? _conditionalForwarderIpAddrs;

        /// <summary>
        /// Set of IPv4 addresses for the DNS server associated with the remote Directory.
        /// Can contain between 1 and 4 values.
        /// </summary>
        public InputList<string> ConditionalForwarderIpAddrs
        {
            get => _conditionalForwarderIpAddrs ?? (_conditionalForwarderIpAddrs = new InputList<string>());
            set => _conditionalForwarderIpAddrs = value;
        }

        /// <summary>
        /// Whether to delete the conditional forwarder when deleting the Trust relationship.
        /// </summary>
        [Input("deleteAssociatedConditionalForwarder")]
        public Input<bool>? DeleteAssociatedConditionalForwarder { get; set; }

        /// <summary>
        /// ID of the Directory.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        /// <summary>
        /// Fully qualified domain name of the remote Directory.
        /// </summary>
        [Input("remoteDomainName", required: true)]
        public Input<string> RemoteDomainName { get; set; } = null!;

        /// <summary>
        /// Whether to enable selective authentication.
        /// Valid values are `Enabled` and `Disabled`.
        /// Default value is `Disabled`.
        /// </summary>
        [Input("selectiveAuth")]
        public Input<string>? SelectiveAuth { get; set; }

        /// <summary>
        /// The direction of the Trust relationship.
        /// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
        /// </summary>
        [Input("trustDirection", required: true)]
        public Input<string> TrustDirection { get; set; } = null!;

        /// <summary>
        /// Password for the Trust.
        /// Does not need to match the passwords for either Directory.
        /// Can contain upper- and lower-case letters, numbers, and punctuation characters.
        /// May be up to 128 characters long.
        /// </summary>
        [Input("trustPassword", required: true)]
        public Input<string> TrustPassword { get; set; } = null!;

        /// <summary>
        /// Type of the Trust relationship.
        /// Valid values are `Forest` and `External`.
        /// Default value is `Forest`.
        /// </summary>
        [Input("trustType")]
        public Input<string>? TrustType { get; set; }

        public TrustArgs()
        {
        }
        public static new TrustArgs Empty => new TrustArgs();
    }

    public sealed class TrustState : global::Pulumi.ResourceArgs
    {
        [Input("conditionalForwarderIpAddrs")]
        private InputList<string>? _conditionalForwarderIpAddrs;

        /// <summary>
        /// Set of IPv4 addresses for the DNS server associated with the remote Directory.
        /// Can contain between 1 and 4 values.
        /// </summary>
        public InputList<string> ConditionalForwarderIpAddrs
        {
            get => _conditionalForwarderIpAddrs ?? (_conditionalForwarderIpAddrs = new InputList<string>());
            set => _conditionalForwarderIpAddrs = value;
        }

        /// <summary>
        /// Date and time when the Trust was created.
        /// </summary>
        [Input("createdDateTime")]
        public Input<string>? CreatedDateTime { get; set; }

        /// <summary>
        /// Whether to delete the conditional forwarder when deleting the Trust relationship.
        /// </summary>
        [Input("deleteAssociatedConditionalForwarder")]
        public Input<bool>? DeleteAssociatedConditionalForwarder { get; set; }

        /// <summary>
        /// ID of the Directory.
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        /// <summary>
        /// Date and time when the Trust was last updated.
        /// </summary>
        [Input("lastUpdatedDateTime")]
        public Input<string>? LastUpdatedDateTime { get; set; }

        /// <summary>
        /// Fully qualified domain name of the remote Directory.
        /// </summary>
        [Input("remoteDomainName")]
        public Input<string>? RemoteDomainName { get; set; }

        /// <summary>
        /// Whether to enable selective authentication.
        /// Valid values are `Enabled` and `Disabled`.
        /// Default value is `Disabled`.
        /// </summary>
        [Input("selectiveAuth")]
        public Input<string>? SelectiveAuth { get; set; }

        /// <summary>
        /// Date and time when the Trust state in `trust_state` was last updated.
        /// </summary>
        [Input("stateLastUpdatedDateTime")]
        public Input<string>? StateLastUpdatedDateTime { get; set; }

        /// <summary>
        /// The direction of the Trust relationship.
        /// Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
        /// </summary>
        [Input("trustDirection")]
        public Input<string>? TrustDirection { get; set; }

        /// <summary>
        /// Password for the Trust.
        /// Does not need to match the passwords for either Directory.
        /// Can contain upper- and lower-case letters, numbers, and punctuation characters.
        /// May be up to 128 characters long.
        /// </summary>
        [Input("trustPassword")]
        public Input<string>? TrustPassword { get; set; }

        /// <summary>
        /// State of the Trust relationship.
        /// One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
        /// </summary>
        [Input("trustState")]
        public Input<string>? Truststate { get; set; }

        /// <summary>
        /// Reason for the Trust state set in `trust_state`.
        /// </summary>
        [Input("trustStateReason")]
        public Input<string>? TrustStateReason { get; set; }

        /// <summary>
        /// Type of the Trust relationship.
        /// Valid values are `Forest` and `External`.
        /// Default value is `Forest`.
        /// </summary>
        [Input("trustType")]
        public Input<string>? TrustType { get; set; }

        public TrustState()
        {
        }
        public static new TrustState Empty => new TrustState();
    }
}
