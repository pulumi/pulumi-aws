// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectoryService
{
    /// <summary>
    /// Manages a directory in your account (directory owner) shared with another account (directory consumer).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleDirectory = new Aws.DirectoryService.Directory("exampleDirectory", new()
    ///     {
    ///         Name = "tf-example",
    ///         Password = "SuperSecretPassw0rd",
    ///         Type = "MicrosoftAD",
    ///         Edition = "Standard",
    ///         VpcSettings = new Aws.DirectoryService.Inputs.DirectoryVpcSettingsArgs
    ///         {
    ///             VpcId = aws_vpc.Example.Id,
    ///             SubnetIds = aws_subnet.Example.Select(__item =&gt; __item.Id).ToList(),
    ///         },
    ///     });
    /// 
    ///     var exampleSharedDirectory = new Aws.DirectoryService.SharedDirectory("exampleSharedDirectory", new()
    ///     {
    ///         DirectoryId = exampleDirectory.Id,
    ///         Notes = "You wanna have a catch?",
    ///         Target = new Aws.DirectoryService.Inputs.SharedDirectoryTargetArgs
    ///         {
    ///             Id = data.Aws_caller_identity.Receiver.Account_id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import Directory Service Shared Directories using the owner directory ID/shared directory ID. For example:
    /// 
    /// ```sh
    ///  $ pulumi import aws:directoryservice/sharedDirectory:SharedDirectory example d-1234567890/d-9267633ece
    /// ```
    /// </summary>
    [AwsResourceType("aws:directoryservice/sharedDirectory:SharedDirectory")]
    public partial class SharedDirectory : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Identifier of the Managed Microsoft AD directory that you want to share with other accounts.
        /// </summary>
        [Output("directoryId")]
        public Output<string> DirectoryId { get; private set; } = null!;

        /// <summary>
        /// Method used when sharing a directory. Valid values are `ORGANIZATIONS` and `HANDSHAKE`. Default is `HANDSHAKE`.
        /// </summary>
        [Output("method")]
        public Output<string?> Method { get; private set; } = null!;

        /// <summary>
        /// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
        /// </summary>
        [Output("notes")]
        public Output<string?> Notes { get; private set; } = null!;

        /// <summary>
        /// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
        /// </summary>
        [Output("sharedDirectoryId")]
        public Output<string> SharedDirectoryId { get; private set; } = null!;

        /// <summary>
        /// Identifier for the directory consumer account with whom the directory is to be shared. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("target")]
        public Output<Outputs.SharedDirectoryTarget> Target { get; private set; } = null!;


        /// <summary>
        /// Create a SharedDirectory resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SharedDirectory(string name, SharedDirectoryArgs args, CustomResourceOptions? options = null)
            : base("aws:directoryservice/sharedDirectory:SharedDirectory", name, args ?? new SharedDirectoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SharedDirectory(string name, Input<string> id, SharedDirectoryState? state = null, CustomResourceOptions? options = null)
            : base("aws:directoryservice/sharedDirectory:SharedDirectory", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "notes",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SharedDirectory resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SharedDirectory Get(string name, Input<string> id, SharedDirectoryState? state = null, CustomResourceOptions? options = null)
        {
            return new SharedDirectory(name, id, state, options);
        }
    }

    public sealed class SharedDirectoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the Managed Microsoft AD directory that you want to share with other accounts.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        /// <summary>
        /// Method used when sharing a directory. Valid values are `ORGANIZATIONS` and `HANDSHAKE`. Default is `HANDSHAKE`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        [Input("notes")]
        private Input<string>? _notes;

        /// <summary>
        /// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
        /// </summary>
        public Input<string>? Notes
        {
            get => _notes;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _notes = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Identifier for the directory consumer account with whom the directory is to be shared. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("target", required: true)]
        public Input<Inputs.SharedDirectoryTargetArgs> Target { get; set; } = null!;

        public SharedDirectoryArgs()
        {
        }
        public static new SharedDirectoryArgs Empty => new SharedDirectoryArgs();
    }

    public sealed class SharedDirectoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Identifier of the Managed Microsoft AD directory that you want to share with other accounts.
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        /// <summary>
        /// Method used when sharing a directory. Valid values are `ORGANIZATIONS` and `HANDSHAKE`. Default is `HANDSHAKE`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        [Input("notes")]
        private Input<string>? _notes;

        /// <summary>
        /// Message sent by the directory owner to the directory consumer to help the directory consumer administrator determine whether to approve or reject the share invitation.
        /// </summary>
        public Input<string>? Notes
        {
            get => _notes;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _notes = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Identifier of the directory that is stored in the directory consumer account that corresponds to the shared directory in the owner account.
        /// </summary>
        [Input("sharedDirectoryId")]
        public Input<string>? SharedDirectoryId { get; set; }

        /// <summary>
        /// Identifier for the directory consumer account with whom the directory is to be shared. See below.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("target")]
        public Input<Inputs.SharedDirectoryTargetGetArgs>? Target { get; set; }

        public SharedDirectoryState()
        {
        }
        public static new SharedDirectoryState Empty => new SharedDirectoryState();
    }
}
