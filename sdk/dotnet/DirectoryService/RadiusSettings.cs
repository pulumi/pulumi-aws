// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DirectoryService
{
    /// <summary>
    /// Manages a directory's multi-factor authentication (MFA) using a Remote Authentication Dial In User Service (RADIUS) server.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.DirectoryService.RadiusSettings("example", new()
    ///     {
    ///         DirectoryId = aws_directory_service_directory.Example.Id,
    ///         AuthenticationProtocol = "PAP",
    ///         DisplayLabel = "example",
    ///         RadiusPort = 1812,
    ///         RadiusRetries = 4,
    ///         RadiusServers = new[]
    ///         {
    ///             "10.0.1.5",
    ///         },
    ///         RadiusTimeout = 1,
    ///         SharedSecret = "12345678",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_directory_service_radius_settings.example
    /// 
    ///  id = "d-926724cf57" } Using `pulumi import`, import RADIUS settings using the directory ID. For exampleconsole % pulumi import aws_directory_service_radius_settings.example d-926724cf57
    /// </summary>
    [AwsResourceType("aws:directoryservice/radiusSettings:RadiusSettings")]
    public partial class RadiusSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
        /// </summary>
        [Output("authenticationProtocol")]
        public Output<string> AuthenticationProtocol { get; private set; } = null!;

        /// <summary>
        /// The identifier of the directory for which you want to manager RADIUS settings.
        /// </summary>
        [Output("directoryId")]
        public Output<string> DirectoryId { get; private set; } = null!;

        /// <summary>
        /// Display label.
        /// </summary>
        [Output("displayLabel")]
        public Output<string> DisplayLabel { get; private set; } = null!;

        /// <summary>
        /// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
        /// </summary>
        [Output("radiusPort")]
        public Output<int> RadiusPort { get; private set; } = null!;

        /// <summary>
        /// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
        /// </summary>
        [Output("radiusRetries")]
        public Output<int> RadiusRetries { get; private set; } = null!;

        /// <summary>
        /// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
        /// </summary>
        [Output("radiusServers")]
        public Output<ImmutableArray<string>> RadiusServers { get; private set; } = null!;

        /// <summary>
        /// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
        /// </summary>
        [Output("radiusTimeout")]
        public Output<int> RadiusTimeout { get; private set; } = null!;

        /// <summary>
        /// Required for enabling RADIUS on the directory.
        /// </summary>
        [Output("sharedSecret")]
        public Output<string> SharedSecret { get; private set; } = null!;

        /// <summary>
        /// Not currently used.
        /// </summary>
        [Output("useSameUsername")]
        public Output<bool?> UseSameUsername { get; private set; } = null!;


        /// <summary>
        /// Create a RadiusSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RadiusSettings(string name, RadiusSettingsArgs args, CustomResourceOptions? options = null)
            : base("aws:directoryservice/radiusSettings:RadiusSettings", name, args ?? new RadiusSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RadiusSettings(string name, Input<string> id, RadiusSettingsState? state = null, CustomResourceOptions? options = null)
            : base("aws:directoryservice/radiusSettings:RadiusSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "sharedSecret",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RadiusSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RadiusSettings Get(string name, Input<string> id, RadiusSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new RadiusSettings(name, id, state, options);
        }
    }

    public sealed class RadiusSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
        /// </summary>
        [Input("authenticationProtocol", required: true)]
        public Input<string> AuthenticationProtocol { get; set; } = null!;

        /// <summary>
        /// The identifier of the directory for which you want to manager RADIUS settings.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        /// <summary>
        /// Display label.
        /// </summary>
        [Input("displayLabel", required: true)]
        public Input<string> DisplayLabel { get; set; } = null!;

        /// <summary>
        /// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
        /// </summary>
        [Input("radiusPort", required: true)]
        public Input<int> RadiusPort { get; set; } = null!;

        /// <summary>
        /// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
        /// </summary>
        [Input("radiusRetries", required: true)]
        public Input<int> RadiusRetries { get; set; } = null!;

        [Input("radiusServers", required: true)]
        private InputList<string>? _radiusServers;

        /// <summary>
        /// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
        /// </summary>
        public InputList<string> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<string>());
            set => _radiusServers = value;
        }

        /// <summary>
        /// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
        /// </summary>
        [Input("radiusTimeout", required: true)]
        public Input<int> RadiusTimeout { get; set; } = null!;

        [Input("sharedSecret", required: true)]
        private Input<string>? _sharedSecret;

        /// <summary>
        /// Required for enabling RADIUS on the directory.
        /// </summary>
        public Input<string>? SharedSecret
        {
            get => _sharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Not currently used.
        /// </summary>
        [Input("useSameUsername")]
        public Input<bool>? UseSameUsername { get; set; }

        public RadiusSettingsArgs()
        {
        }
        public static new RadiusSettingsArgs Empty => new RadiusSettingsArgs();
    }

    public sealed class RadiusSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The protocol specified for your RADIUS endpoints. Valid values: `PAP`, `CHAP`, `MS-CHAPv1`, `MS-CHAPv2`.
        /// </summary>
        [Input("authenticationProtocol")]
        public Input<string>? AuthenticationProtocol { get; set; }

        /// <summary>
        /// The identifier of the directory for which you want to manager RADIUS settings.
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        /// <summary>
        /// Display label.
        /// </summary>
        [Input("displayLabel")]
        public Input<string>? DisplayLabel { get; set; }

        /// <summary>
        /// The port that your RADIUS server is using for communications. Your self-managed network must allow inbound traffic over this port from the AWS Directory Service servers.
        /// </summary>
        [Input("radiusPort")]
        public Input<int>? RadiusPort { get; set; }

        /// <summary>
        /// The maximum number of times that communication with the RADIUS server is attempted. Minimum value of `0`. Maximum value of `10`.
        /// </summary>
        [Input("radiusRetries")]
        public Input<int>? RadiusRetries { get; set; }

        [Input("radiusServers")]
        private InputList<string>? _radiusServers;

        /// <summary>
        /// An array of strings that contains the fully qualified domain name (FQDN) or IP addresses of the RADIUS server endpoints, or the FQDN or IP addresses of your RADIUS server load balancer.
        /// </summary>
        public InputList<string> RadiusServers
        {
            get => _radiusServers ?? (_radiusServers = new InputList<string>());
            set => _radiusServers = value;
        }

        /// <summary>
        /// The amount of time, in seconds, to wait for the RADIUS server to respond. Minimum value of `1`. Maximum value of `50`.
        /// </summary>
        [Input("radiusTimeout")]
        public Input<int>? RadiusTimeout { get; set; }

        [Input("sharedSecret")]
        private Input<string>? _sharedSecret;

        /// <summary>
        /// Required for enabling RADIUS on the directory.
        /// </summary>
        public Input<string>? SharedSecret
        {
            get => _sharedSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sharedSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Not currently used.
        /// </summary>
        [Input("useSameUsername")]
        public Input<bool>? UseSameUsername { get; set; }

        public RadiusSettingsState()
        {
        }
        public static new RadiusSettingsState Empty => new RadiusSettingsState();
    }
}
