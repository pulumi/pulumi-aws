// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ComputeOptimizer
{
    /// <summary>
    /// Manages AWS Compute Optimizer enrollment status.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.ComputeOptimizer.EnrollmentStatus("example", new()
    ///     {
    ///         Status = "Active",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import enrollment status using the account ID. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:computeoptimizer/enrollmentStatus:EnrollmentStatus example 123456789012
    /// ```
    /// </summary>
    [AwsResourceType("aws:computeoptimizer/enrollmentStatus:EnrollmentStatus")]
    public partial class EnrollmentStatus : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enroll member accounts of the organization if the account is the management account of an organization. Default is `false`.
        /// </summary>
        [Output("includeMemberAccounts")]
        public Output<bool> IncludeMemberAccounts { get; private set; } = null!;

        /// <summary>
        /// The count of organization member accounts that are opted in to the service, if your account is an organization management account.
        /// </summary>
        [Output("numberOfMemberAccountsOptedIn")]
        public Output<int> NumberOfMemberAccountsOptedIn { get; private set; } = null!;

        /// <summary>
        /// The enrollment status of the account. Valid values: `Active`, `Inactive`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("timeouts")]
        public Output<Outputs.EnrollmentStatusTimeouts?> Timeouts { get; private set; } = null!;


        /// <summary>
        /// Create a EnrollmentStatus resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EnrollmentStatus(string name, EnrollmentStatusArgs args, CustomResourceOptions? options = null)
            : base("aws:computeoptimizer/enrollmentStatus:EnrollmentStatus", name, args ?? new EnrollmentStatusArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EnrollmentStatus(string name, Input<string> id, EnrollmentStatusState? state = null, CustomResourceOptions? options = null)
            : base("aws:computeoptimizer/enrollmentStatus:EnrollmentStatus", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EnrollmentStatus resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EnrollmentStatus Get(string name, Input<string> id, EnrollmentStatusState? state = null, CustomResourceOptions? options = null)
        {
            return new EnrollmentStatus(name, id, state, options);
        }
    }

    public sealed class EnrollmentStatusArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enroll member accounts of the organization if the account is the management account of an organization. Default is `false`.
        /// </summary>
        [Input("includeMemberAccounts")]
        public Input<bool>? IncludeMemberAccounts { get; set; }

        /// <summary>
        /// The enrollment status of the account. Valid values: `Active`, `Inactive`.
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        [Input("timeouts")]
        public Input<Inputs.EnrollmentStatusTimeoutsArgs>? Timeouts { get; set; }

        public EnrollmentStatusArgs()
        {
        }
        public static new EnrollmentStatusArgs Empty => new EnrollmentStatusArgs();
    }

    public sealed class EnrollmentStatusState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enroll member accounts of the organization if the account is the management account of an organization. Default is `false`.
        /// </summary>
        [Input("includeMemberAccounts")]
        public Input<bool>? IncludeMemberAccounts { get; set; }

        /// <summary>
        /// The count of organization member accounts that are opted in to the service, if your account is an organization management account.
        /// </summary>
        [Input("numberOfMemberAccountsOptedIn")]
        public Input<int>? NumberOfMemberAccountsOptedIn { get; set; }

        /// <summary>
        /// The enrollment status of the account. Valid values: `Active`, `Inactive`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("timeouts")]
        public Input<Inputs.EnrollmentStatusTimeoutsGetArgs>? Timeouts { get; set; }

        public EnrollmentStatusState()
        {
        }
        public static new EnrollmentStatusState Empty => new EnrollmentStatusState();
    }
}
