// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ebs
{
    public static class GetEbsVolumes
    {
        /// <summary>
        /// `aws.ebs.getEbsVolumes` provides identifying information for EBS volumes matching given criteria.
        /// 
        /// This data source can be useful for getting a list of volume IDs with (for example) matching tags.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following demonstrates obtaining a map of availability zone to EBS volume ID for volumes with a given tag value.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEbsVolumes = Aws.Ebs.GetEbsVolumes.Invoke(new()
        ///     {
        ///         Tags = 
        ///         {
        ///             { "VolumeSet", "TestVolumeSet" },
        ///         },
        ///     });
        /// 
        ///     var exampleVolume = .Select(__value =&gt; 
        ///     {
        ///         return  Aws.Ebs.GetVolume.Invoke(new()
        ///         {
        ///             Filters = new[]
        ///             {
        ///                 new Aws.Ebs.Inputs.GetVolumeFilterInputArgs
        ///                 {
        ///                     Name = "volume-id",
        ///                     Values = new[]
        ///                     {
        ///                         each.Value,
        ///                     },
        ///                 },
        ///             },
        ///         });
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["availabilityZoneToVolumeId"] = exampleVolume.Select(s =&gt; 
        ///         {
        ///             return  s.AvailabilityZone;
        ///         }),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEbsVolumesResult> InvokeAsync(GetEbsVolumesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEbsVolumesResult>("aws:ebs/getEbsVolumes:getEbsVolumes", args ?? new GetEbsVolumesArgs(), options.WithDefaults());

        /// <summary>
        /// `aws.ebs.getEbsVolumes` provides identifying information for EBS volumes matching given criteria.
        /// 
        /// This data source can be useful for getting a list of volume IDs with (for example) matching tags.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// The following demonstrates obtaining a map of availability zone to EBS volume ID for volumes with a given tag value.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleEbsVolumes = Aws.Ebs.GetEbsVolumes.Invoke(new()
        ///     {
        ///         Tags = 
        ///         {
        ///             { "VolumeSet", "TestVolumeSet" },
        ///         },
        ///     });
        /// 
        ///     var exampleVolume = .Select(__value =&gt; 
        ///     {
        ///         return  Aws.Ebs.GetVolume.Invoke(new()
        ///         {
        ///             Filters = new[]
        ///             {
        ///                 new Aws.Ebs.Inputs.GetVolumeFilterInputArgs
        ///                 {
        ///                     Name = "volume-id",
        ///                     Values = new[]
        ///                     {
        ///                         each.Value,
        ///                     },
        ///                 },
        ///             },
        ///         });
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["availabilityZoneToVolumeId"] = exampleVolume.Select(s =&gt; 
        ///         {
        ///             return  s.AvailabilityZone;
        ///         }),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEbsVolumesResult> Invoke(GetEbsVolumesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEbsVolumesResult>("aws:ebs/getEbsVolumes:getEbsVolumes", args ?? new GetEbsVolumesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEbsVolumesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetEbsVolumesFilterArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public List<Inputs.GetEbsVolumesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEbsVolumesFilterArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired volumes.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetEbsVolumesArgs()
        {
        }
        public static new GetEbsVolumesArgs Empty => new GetEbsVolumesArgs();
    }

    public sealed class GetEbsVolumesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetEbsVolumesFilterInputArgs>? _filters;

        /// <summary>
        /// Custom filter block as described below.
        /// </summary>
        public InputList<Inputs.GetEbsVolumesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetEbsVolumesFilterInputArgs>());
            set => _filters = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags, each pair of which must exactly match
        /// a pair on the desired volumes.
        /// 
        /// More complex filters can be expressed using one or more `filter` sub-blocks,
        /// which take the following arguments:
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetEbsVolumesInvokeArgs()
        {
        }
        public static new GetEbsVolumesInvokeArgs Empty => new GetEbsVolumesInvokeArgs();
    }


    [OutputType]
    public sealed class GetEbsVolumesResult
    {
        public readonly ImmutableArray<Outputs.GetEbsVolumesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of all the EBS Volume IDs found. This data source will fail if
        /// no volumes match the provided criteria.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableDictionary<string, string>? Tags;

        [OutputConstructor]
        private GetEbsVolumesResult(
            ImmutableArray<Outputs.GetEbsVolumesFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableDictionary<string, string>? tags)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Tags = tags;
        }
    }
}
