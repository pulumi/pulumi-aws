// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ebs
{
    public static class GetVolume
    {
        public static Task<GetVolumeResult> InvokeAsync(GetVolumeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVolumeResult>("aws:ebs/getVolume:getVolume", args ?? new GetVolumeArgs(), options.WithDefaults());

        public static Output<GetVolumeResult> Invoke(GetVolumeInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVolumeResult>("aws:ebs/getVolume:getVolume", args ?? new GetVolumeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVolumeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetVolumeFilterArgs>? _filters;
        public List<Inputs.GetVolumeFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetVolumeFilterArgs>());
            set => _filters = value;
        }

        [Input("mostRecent")]
        public bool? MostRecent { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetVolumeArgs()
        {
        }
        public static new GetVolumeArgs Empty => new GetVolumeArgs();
    }

    public sealed class GetVolumeInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetVolumeFilterInputArgs>? _filters;
        public InputList<Inputs.GetVolumeFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetVolumeFilterInputArgs>());
            set => _filters = value;
        }

        [Input("mostRecent")]
        public Input<bool>? MostRecent { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetVolumeInvokeArgs()
        {
        }
        public static new GetVolumeInvokeArgs Empty => new GetVolumeInvokeArgs();
    }


    [OutputType]
    public sealed class GetVolumeResult
    {
        public readonly string Arn;
        public readonly string AvailabilityZone;
        public readonly bool Encrypted;
        public readonly ImmutableArray<Outputs.GetVolumeFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int Iops;
        public readonly string KmsKeyId;
        public readonly bool? MostRecent;
        public readonly bool MultiAttachEnabled;
        public readonly string OutpostArn;
        public readonly int Size;
        public readonly string SnapshotId;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly int Throughput;
        public readonly string VolumeId;
        public readonly string VolumeType;

        [OutputConstructor]
        private GetVolumeResult(
            string arn,

            string availabilityZone,

            bool encrypted,

            ImmutableArray<Outputs.GetVolumeFilterResult> filters,

            string id,

            int iops,

            string kmsKeyId,

            bool? mostRecent,

            bool multiAttachEnabled,

            string outpostArn,

            int size,

            string snapshotId,

            ImmutableDictionary<string, string> tags,

            int throughput,

            string volumeId,

            string volumeType)
        {
            Arn = arn;
            AvailabilityZone = availabilityZone;
            Encrypted = encrypted;
            Filters = filters;
            Id = id;
            Iops = iops;
            KmsKeyId = kmsKeyId;
            MostRecent = mostRecent;
            MultiAttachEnabled = multiAttachEnabled;
            OutpostArn = outpostArn;
            Size = size;
            SnapshotId = snapshotId;
            Tags = tags;
            Throughput = throughput;
            VolumeId = volumeId;
            VolumeType = volumeType;
        }
    }
}
