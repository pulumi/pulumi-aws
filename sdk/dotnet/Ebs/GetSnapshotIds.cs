// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Ebs
{
    public static class GetSnapshotIds
    {
        /// <summary>
        /// Use this data source to get a list of EBS Snapshot IDs matching the specified
        /// criteria.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ebsVolumes = aws.ebs.getSnapshotIds({
        ///     filters: [
        ///         {
        ///             name: "volume-size",
        ///             values: ["40"],
        ///         },
        ///         {
        ///             name: "tag:Name",
        ///             values: ["Example"],
        ///         },
        ///     ],
        ///     owners: ["self"],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ebs_volumes = aws.ebs.get_snapshot_ids(filters=[
        ///         aws.ebs.GetSnapshotIdsFilterArgs(
        ///             name="volume-size",
        ///             values=["40"],
        ///         ),
        ///         aws.ebs.GetSnapshotIdsFilterArgs(
        ///             name="tag:Name",
        ///             values=["Example"],
        ///         ),
        ///     ],
        ///     owners=["self"])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ebsVolumes = Aws.Ebs.GetSnapshotIds.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ebs.Inputs.GetSnapshotIdsFilterInputArgs
        ///             {
        ///                 Name = "volume-size",
        ///                 Values = new[]
        ///                 {
        ///                     "40",
        ///                 },
        ///             },
        ///             new Aws.Ebs.Inputs.GetSnapshotIdsFilterInputArgs
        ///             {
        ///                 Name = "tag:Name",
        ///                 Values = new[]
        ///                 {
        ///                     "Example",
        ///                 },
        ///             },
        ///         },
        ///         Owners = new[]
        ///         {
        ///             "self",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ebs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ebs.GetSnapshotIds(ctx, &amp;ebs.GetSnapshotIdsArgs{
        /// 			Filters: []ebs.GetSnapshotIdsFilter{
        /// 				{
        /// 					Name: "volume-size",
        /// 					Values: []string{
        /// 						"40",
        /// 					},
        /// 				},
        /// 				{
        /// 					Name: "tag:Name",
        /// 					Values: []string{
        /// 						"Example",
        /// 					},
        /// 				},
        /// 			},
        /// 			Owners: []string{
        /// 				"self",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ebs.EbsFunctions;
        /// import com.pulumi.aws.ebs.inputs.GetSnapshotIdsArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var ebsVolumes = EbsFunctions.getSnapshotIds(GetSnapshotIdsArgs.builder()
        ///             .filters(            
        ///                 GetSnapshotIdsFilterArgs.builder()
        ///                     .name("volume-size")
        ///                     .values("40")
        ///                     .build(),
        ///                 GetSnapshotIdsFilterArgs.builder()
        ///                     .name("tag:Name")
        ///                     .values("Example")
        ///                     .build())
        ///             .owners("self")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   ebsVolumes:
        ///     fn::invoke:
        ///       Function: aws:ebs:getSnapshotIds
        ///       Arguments:
        ///         filters:
        ///           - name: volume-size
        ///             values:
        ///               - '40'
        ///           - name: tag:Name
        ///             values:
        ///               - Example
        ///         owners:
        ///           - self
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSnapshotIdsResult> InvokeAsync(GetSnapshotIdsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotIdsResult>("aws:ebs/getSnapshotIds:getSnapshotIds", args ?? new GetSnapshotIdsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a list of EBS Snapshot IDs matching the specified
        /// criteria.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const ebsVolumes = aws.ebs.getSnapshotIds({
        ///     filters: [
        ///         {
        ///             name: "volume-size",
        ///             values: ["40"],
        ///         },
        ///         {
        ///             name: "tag:Name",
        ///             values: ["Example"],
        ///         },
        ///     ],
        ///     owners: ["self"],
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// ebs_volumes = aws.ebs.get_snapshot_ids(filters=[
        ///         aws.ebs.GetSnapshotIdsFilterArgs(
        ///             name="volume-size",
        ///             values=["40"],
        ///         ),
        ///         aws.ebs.GetSnapshotIdsFilterArgs(
        ///             name="tag:Name",
        ///             values=["Example"],
        ///         ),
        ///     ],
        ///     owners=["self"])
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ebsVolumes = Aws.Ebs.GetSnapshotIds.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Aws.Ebs.Inputs.GetSnapshotIdsFilterInputArgs
        ///             {
        ///                 Name = "volume-size",
        ///                 Values = new[]
        ///                 {
        ///                     "40",
        ///                 },
        ///             },
        ///             new Aws.Ebs.Inputs.GetSnapshotIdsFilterInputArgs
        ///             {
        ///                 Name = "tag:Name",
        ///                 Values = new[]
        ///                 {
        ///                     "Example",
        ///                 },
        ///             },
        ///         },
        ///         Owners = new[]
        ///         {
        ///             "self",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/ebs"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := ebs.GetSnapshotIds(ctx, &amp;ebs.GetSnapshotIdsArgs{
        /// 			Filters: []ebs.GetSnapshotIdsFilter{
        /// 				{
        /// 					Name: "volume-size",
        /// 					Values: []string{
        /// 						"40",
        /// 					},
        /// 				},
        /// 				{
        /// 					Name: "tag:Name",
        /// 					Values: []string{
        /// 						"Example",
        /// 					},
        /// 				},
        /// 			},
        /// 			Owners: []string{
        /// 				"self",
        /// 			},
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.ebs.EbsFunctions;
        /// import com.pulumi.aws.ebs.inputs.GetSnapshotIdsArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var ebsVolumes = EbsFunctions.getSnapshotIds(GetSnapshotIdsArgs.builder()
        ///             .filters(            
        ///                 GetSnapshotIdsFilterArgs.builder()
        ///                     .name("volume-size")
        ///                     .values("40")
        ///                     .build(),
        ///                 GetSnapshotIdsFilterArgs.builder()
        ///                     .name("tag:Name")
        ///                     .values("Example")
        ///                     .build())
        ///             .owners("self")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   ebsVolumes:
        ///     fn::invoke:
        ///       Function: aws:ebs:getSnapshotIds
        ///       Arguments:
        ///         filters:
        ///           - name: volume-size
        ///             values:
        ///               - '40'
        ///           - name: tag:Name
        ///             values:
        ///               - Example
        ///         owners:
        ///           - self
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSnapshotIdsResult> Invoke(GetSnapshotIdsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotIdsResult>("aws:ebs/getSnapshotIds:getSnapshotIds", args ?? new GetSnapshotIdsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotIdsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetSnapshotIdsFilterArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to filter off of. There are
        /// several valid keys, for a full reference, check out
        /// [describe-volumes in the AWS CLI reference][1].
        /// </summary>
        public List<Inputs.GetSnapshotIdsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetSnapshotIdsFilterArgs>());
            set => _filters = value;
        }

        [Input("owners")]
        private List<string>? _owners;

        /// <summary>
        /// Returns the snapshots owned by the specified owner id. Multiple owners can be specified.
        /// </summary>
        public List<string> Owners
        {
            get => _owners ?? (_owners = new List<string>());
            set => _owners = value;
        }

        [Input("restorableByUserIds")]
        private List<string>? _restorableByUserIds;

        /// <summary>
        /// One or more AWS accounts IDs that can create volumes from the snapshot.
        /// </summary>
        public List<string> RestorableByUserIds
        {
            get => _restorableByUserIds ?? (_restorableByUserIds = new List<string>());
            set => _restorableByUserIds = value;
        }

        public GetSnapshotIdsArgs()
        {
        }
        public static new GetSnapshotIdsArgs Empty => new GetSnapshotIdsArgs();
    }

    public sealed class GetSnapshotIdsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetSnapshotIdsFilterInputArgs>? _filters;

        /// <summary>
        /// One or more name/value pairs to filter off of. There are
        /// several valid keys, for a full reference, check out
        /// [describe-volumes in the AWS CLI reference][1].
        /// </summary>
        public InputList<Inputs.GetSnapshotIdsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetSnapshotIdsFilterInputArgs>());
            set => _filters = value;
        }

        [Input("owners")]
        private InputList<string>? _owners;

        /// <summary>
        /// Returns the snapshots owned by the specified owner id. Multiple owners can be specified.
        /// </summary>
        public InputList<string> Owners
        {
            get => _owners ?? (_owners = new InputList<string>());
            set => _owners = value;
        }

        [Input("restorableByUserIds")]
        private InputList<string>? _restorableByUserIds;

        /// <summary>
        /// One or more AWS accounts IDs that can create volumes from the snapshot.
        /// </summary>
        public InputList<string> RestorableByUserIds
        {
            get => _restorableByUserIds ?? (_restorableByUserIds = new InputList<string>());
            set => _restorableByUserIds = value;
        }

        public GetSnapshotIdsInvokeArgs()
        {
        }
        public static new GetSnapshotIdsInvokeArgs Empty => new GetSnapshotIdsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotIdsResult
    {
        public readonly ImmutableArray<Outputs.GetSnapshotIdsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set of EBS snapshot IDs, sorted by creation time in descending order.
        /// </summary>
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<string> Owners;
        public readonly ImmutableArray<string> RestorableByUserIds;

        [OutputConstructor]
        private GetSnapshotIdsResult(
            ImmutableArray<Outputs.GetSnapshotIdsFilterResult> filters,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<string> owners,

            ImmutableArray<string> restorableByUserIds)
        {
            Filters = filters;
            Id = id;
            Ids = ids;
            Owners = owners;
            RestorableByUserIds = restorableByUserIds;
        }
    }
}
