// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.OpsWorks
{
    /// <summary>
    /// Provides an OpsWorks application resource.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/opsworks_application.html.markdown.
    /// </summary>
    public partial class Application : Pulumi.CustomResource
    {
        /// <summary>
        /// SCM configuration of the app as described below.
        /// </summary>
        [Output("appSources")]
        public Output<ImmutableArray<Outputs.ApplicationAppSources>> AppSources { get; private set; } = null!;

        /// <summary>
        /// Run bundle install when deploying for application of type `rails`.
        /// </summary>
        [Output("autoBundleOnDeploy")]
        public Output<string?> AutoBundleOnDeploy { get; private set; } = null!;

        /// <summary>
        /// Specify activity and workflow workers for your app using the aws-flow gem.
        /// </summary>
        [Output("awsFlowRubySettings")]
        public Output<string?> AwsFlowRubySettings { get; private set; } = null!;

        /// <summary>
        /// The data source's ARN.
        /// </summary>
        [Output("dataSourceArn")]
        public Output<string?> DataSourceArn { get; private set; } = null!;

        /// <summary>
        /// The database name.
        /// </summary>
        [Output("dataSourceDatabaseName")]
        public Output<string?> DataSourceDatabaseName { get; private set; } = null!;

        /// <summary>
        /// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
        /// </summary>
        [Output("dataSourceType")]
        public Output<string?> DataSourceType { get; private set; } = null!;

        /// <summary>
        /// A description of the app.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Subfolder for the document root for application of type `rails`.
        /// </summary>
        [Output("documentRoot")]
        public Output<string?> DocumentRoot { get; private set; } = null!;

        /// <summary>
        /// A list of virtual host alias.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
        /// </summary>
        [Output("enableSsl")]
        public Output<bool?> EnableSsl { get; private set; } = null!;

        /// <summary>
        /// Object to define environment variables.  Object is described below.
        /// </summary>
        [Output("environments")]
        public Output<ImmutableArray<Outputs.ApplicationEnvironments>> Environments { get; private set; } = null!;

        /// <summary>
        /// A human-readable name for the application.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the Rails environment for application of type `rails`.
        /// </summary>
        [Output("railsEnv")]
        public Output<string?> RailsEnv { get; private set; } = null!;

        /// <summary>
        /// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
        /// </summary>
        [Output("shortName")]
        public Output<string> ShortName { get; private set; } = null!;

        /// <summary>
        /// The SSL configuration of the app. Object is described below.
        /// </summary>
        [Output("sslConfigurations")]
        public Output<ImmutableArray<Outputs.ApplicationSslConfigurations>> SslConfigurations { get; private set; } = null!;

        /// <summary>
        /// The id of the stack the application will belong to.
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;

        /// <summary>
        /// The type of source to use. For example, "archive".
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Application resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Application(string name, ApplicationArgs args, CustomResourceOptions? options = null)
            : base("aws:opsworks/application:Application", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Application(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
            : base("aws:opsworks/application:Application", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Application resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Application Get(string name, Input<string> id, ApplicationState? state = null, CustomResourceOptions? options = null)
        {
            return new Application(name, id, state, options);
        }
    }

    public sealed class ApplicationArgs : Pulumi.ResourceArgs
    {
        [Input("appSources")]
        private InputList<Inputs.ApplicationAppSourcesArgs>? _appSources;

        /// <summary>
        /// SCM configuration of the app as described below.
        /// </summary>
        public InputList<Inputs.ApplicationAppSourcesArgs> AppSources
        {
            get => _appSources ?? (_appSources = new InputList<Inputs.ApplicationAppSourcesArgs>());
            set => _appSources = value;
        }

        /// <summary>
        /// Run bundle install when deploying for application of type `rails`.
        /// </summary>
        [Input("autoBundleOnDeploy")]
        public Input<string>? AutoBundleOnDeploy { get; set; }

        /// <summary>
        /// Specify activity and workflow workers for your app using the aws-flow gem.
        /// </summary>
        [Input("awsFlowRubySettings")]
        public Input<string>? AwsFlowRubySettings { get; set; }

        /// <summary>
        /// The data source's ARN.
        /// </summary>
        [Input("dataSourceArn")]
        public Input<string>? DataSourceArn { get; set; }

        /// <summary>
        /// The database name.
        /// </summary>
        [Input("dataSourceDatabaseName")]
        public Input<string>? DataSourceDatabaseName { get; set; }

        /// <summary>
        /// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
        /// </summary>
        [Input("dataSourceType")]
        public Input<string>? DataSourceType { get; set; }

        /// <summary>
        /// A description of the app.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Subfolder for the document root for application of type `rails`.
        /// </summary>
        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// A list of virtual host alias.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
        /// </summary>
        [Input("enableSsl")]
        public Input<bool>? EnableSsl { get; set; }

        [Input("environments")]
        private InputList<Inputs.ApplicationEnvironmentsArgs>? _environments;

        /// <summary>
        /// Object to define environment variables.  Object is described below.
        /// </summary>
        public InputList<Inputs.ApplicationEnvironmentsArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.ApplicationEnvironmentsArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// A human-readable name for the application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Rails environment for application of type `rails`.
        /// </summary>
        [Input("railsEnv")]
        public Input<string>? RailsEnv { get; set; }

        /// <summary>
        /// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
        /// </summary>
        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        [Input("sslConfigurations")]
        private InputList<Inputs.ApplicationSslConfigurationsArgs>? _sslConfigurations;

        /// <summary>
        /// The SSL configuration of the app. Object is described below.
        /// </summary>
        public InputList<Inputs.ApplicationSslConfigurationsArgs> SslConfigurations
        {
            get => _sslConfigurations ?? (_sslConfigurations = new InputList<Inputs.ApplicationSslConfigurationsArgs>());
            set => _sslConfigurations = value;
        }

        /// <summary>
        /// The id of the stack the application will belong to.
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        /// <summary>
        /// The type of source to use. For example, "archive".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ApplicationArgs()
        {
        }
    }

    public sealed class ApplicationState : Pulumi.ResourceArgs
    {
        [Input("appSources")]
        private InputList<Inputs.ApplicationAppSourcesGetArgs>? _appSources;

        /// <summary>
        /// SCM configuration of the app as described below.
        /// </summary>
        public InputList<Inputs.ApplicationAppSourcesGetArgs> AppSources
        {
            get => _appSources ?? (_appSources = new InputList<Inputs.ApplicationAppSourcesGetArgs>());
            set => _appSources = value;
        }

        /// <summary>
        /// Run bundle install when deploying for application of type `rails`.
        /// </summary>
        [Input("autoBundleOnDeploy")]
        public Input<string>? AutoBundleOnDeploy { get; set; }

        /// <summary>
        /// Specify activity and workflow workers for your app using the aws-flow gem.
        /// </summary>
        [Input("awsFlowRubySettings")]
        public Input<string>? AwsFlowRubySettings { get; set; }

        /// <summary>
        /// The data source's ARN.
        /// </summary>
        [Input("dataSourceArn")]
        public Input<string>? DataSourceArn { get; set; }

        /// <summary>
        /// The database name.
        /// </summary>
        [Input("dataSourceDatabaseName")]
        public Input<string>? DataSourceDatabaseName { get; set; }

        /// <summary>
        /// The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
        /// </summary>
        [Input("dataSourceType")]
        public Input<string>? DataSourceType { get; set; }

        /// <summary>
        /// A description of the app.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Subfolder for the document root for application of type `rails`.
        /// </summary>
        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// A list of virtual host alias.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
        /// </summary>
        [Input("enableSsl")]
        public Input<bool>? EnableSsl { get; set; }

        [Input("environments")]
        private InputList<Inputs.ApplicationEnvironmentsGetArgs>? _environments;

        /// <summary>
        /// Object to define environment variables.  Object is described below.
        /// </summary>
        public InputList<Inputs.ApplicationEnvironmentsGetArgs> Environments
        {
            get => _environments ?? (_environments = new InputList<Inputs.ApplicationEnvironmentsGetArgs>());
            set => _environments = value;
        }

        /// <summary>
        /// A human-readable name for the application.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the Rails environment for application of type `rails`.
        /// </summary>
        [Input("railsEnv")]
        public Input<string>? RailsEnv { get; set; }

        /// <summary>
        /// A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
        /// </summary>
        [Input("shortName")]
        public Input<string>? ShortName { get; set; }

        [Input("sslConfigurations")]
        private InputList<Inputs.ApplicationSslConfigurationsGetArgs>? _sslConfigurations;

        /// <summary>
        /// The SSL configuration of the app. Object is described below.
        /// </summary>
        public InputList<Inputs.ApplicationSslConfigurationsGetArgs> SslConfigurations
        {
            get => _sslConfigurations ?? (_sslConfigurations = new InputList<Inputs.ApplicationSslConfigurationsGetArgs>());
            set => _sslConfigurations = value;
        }

        /// <summary>
        /// The id of the stack the application will belong to.
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// The type of source to use. For example, "archive".
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ApplicationState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ApplicationAppSourcesArgs : Pulumi.ResourceArgs
    {
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// For sources that are version-aware, the revision to use.
        /// </summary>
        [Input("revision")]
        public Input<string>? Revision { get; set; }

        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// The type of source to use. For example, "archive".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The URL where the app resource can be found.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username to use when authenticating to the source.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ApplicationAppSourcesArgs()
        {
        }
    }

    public sealed class ApplicationAppSourcesGetArgs : Pulumi.ResourceArgs
    {
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// For sources that are version-aware, the revision to use.
        /// </summary>
        [Input("revision")]
        public Input<string>? Revision { get; set; }

        [Input("sshKey")]
        public Input<string>? SshKey { get; set; }

        /// <summary>
        /// The type of source to use. For example, "archive".
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The URL where the app resource can be found.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username to use when authenticating to the source.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ApplicationAppSourcesGetArgs()
        {
        }
    }

    public sealed class ApplicationEnvironmentsArgs : Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("secure")]
        public Input<bool>? Secure { get; set; }

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ApplicationEnvironmentsArgs()
        {
        }
    }

    public sealed class ApplicationEnvironmentsGetArgs : Pulumi.ResourceArgs
    {
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        [Input("secure")]
        public Input<bool>? Secure { get; set; }

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ApplicationEnvironmentsGetArgs()
        {
        }
    }

    public sealed class ApplicationSslConfigurationsArgs : Pulumi.ResourceArgs
    {
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        [Input("chain")]
        public Input<string>? Chain { get; set; }

        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        public ApplicationSslConfigurationsArgs()
        {
        }
    }

    public sealed class ApplicationSslConfigurationsGetArgs : Pulumi.ResourceArgs
    {
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        [Input("chain")]
        public Input<string>? Chain { get; set; }

        [Input("privateKey", required: true)]
        public Input<string> PrivateKey { get; set; } = null!;

        public ApplicationSslConfigurationsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ApplicationAppSources
    {
        public readonly string? Password;
        /// <summary>
        /// For sources that are version-aware, the revision to use.
        /// </summary>
        public readonly string? Revision;
        public readonly string? SshKey;
        /// <summary>
        /// The type of source to use. For example, "archive".
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The URL where the app resource can be found.
        /// </summary>
        public readonly string? Url;
        /// <summary>
        /// Username to use when authenticating to the source.
        /// </summary>
        public readonly string? Username;

        [OutputConstructor]
        private ApplicationAppSources(
            string? password,
            string? revision,
            string? sshKey,
            string type,
            string? url,
            string? username)
        {
            Password = password;
            Revision = revision;
            SshKey = sshKey;
            Type = type;
            Url = url;
            Username = username;
        }
    }

    [OutputType]
    public sealed class ApplicationEnvironments
    {
        public readonly string Key;
        public readonly bool? Secure;
        public readonly string Value;

        [OutputConstructor]
        private ApplicationEnvironments(
            string key,
            bool? secure,
            string value)
        {
            Key = key;
            Secure = secure;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ApplicationSslConfigurations
    {
        public readonly string Certificate;
        public readonly string? Chain;
        public readonly string PrivateKey;

        [OutputConstructor]
        private ApplicationSslConfigurations(
            string certificate,
            string? chain,
            string privateKey)
        {
            Certificate = certificate;
            Chain = chain;
            PrivateKey = privateKey;
        }
    }
    }
}
