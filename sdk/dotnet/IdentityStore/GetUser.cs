// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.IdentityStore
{
    public static class GetUser
    {
        public static Task<GetUserResult> InvokeAsync(GetUserArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("aws:identitystore/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        public static Output<GetUserResult> Invoke(GetUserInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserResult>("aws:identitystore/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        [Input("alternateIdentifier")]
        public Inputs.GetUserAlternateIdentifierArgs? AlternateIdentifier { get; set; }

        [Input("filter")]
        public Inputs.GetUserFilterArgs? Filter { get; set; }

        [Input("identityStoreId", required: true)]
        public string IdentityStoreId { get; set; } = null!;

        [Input("userId")]
        public string? UserId { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("alternateIdentifier")]
        public Input<Inputs.GetUserAlternateIdentifierInputArgs>? AlternateIdentifier { get; set; }

        [Input("filter")]
        public Input<Inputs.GetUserFilterInputArgs>? Filter { get; set; }

        [Input("identityStoreId", required: true)]
        public Input<string> IdentityStoreId { get; set; } = null!;

        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        public readonly ImmutableArray<Outputs.GetUserAddressResult> Addresses;
        public readonly Outputs.GetUserAlternateIdentifierResult? AlternateIdentifier;
        public readonly string DisplayName;
        public readonly ImmutableArray<Outputs.GetUserEmailResult> Emails;
        public readonly ImmutableArray<Outputs.GetUserExternalIdResult> ExternalIds;
        public readonly Outputs.GetUserFilterResult? Filter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdentityStoreId;
        public readonly string Locale;
        public readonly ImmutableArray<Outputs.GetUserNameResult> Names;
        public readonly string Nickname;
        public readonly ImmutableArray<Outputs.GetUserPhoneNumberResult> PhoneNumbers;
        public readonly string PreferredLanguage;
        public readonly string ProfileUrl;
        public readonly string Timezone;
        public readonly string Title;
        public readonly string UserId;
        public readonly string UserName;
        public readonly string UserType;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<Outputs.GetUserAddressResult> addresses,

            Outputs.GetUserAlternateIdentifierResult? alternateIdentifier,

            string displayName,

            ImmutableArray<Outputs.GetUserEmailResult> emails,

            ImmutableArray<Outputs.GetUserExternalIdResult> externalIds,

            Outputs.GetUserFilterResult? filter,

            string id,

            string identityStoreId,

            string locale,

            ImmutableArray<Outputs.GetUserNameResult> names,

            string nickname,

            ImmutableArray<Outputs.GetUserPhoneNumberResult> phoneNumbers,

            string preferredLanguage,

            string profileUrl,

            string timezone,

            string title,

            string userId,

            string userName,

            string userType)
        {
            Addresses = addresses;
            AlternateIdentifier = alternateIdentifier;
            DisplayName = displayName;
            Emails = emails;
            ExternalIds = externalIds;
            Filter = filter;
            Id = id;
            IdentityStoreId = identityStoreId;
            Locale = locale;
            Names = names;
            Nickname = nickname;
            PhoneNumbers = phoneNumbers;
            PreferredLanguage = preferredLanguage;
            ProfileUrl = profileUrl;
            Timezone = timezone;
            Title = title;
            UserId = userId;
            UserName = userName;
            UserType = userType;
        }
    }
}
