// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.IdentityStore
{
    /// <summary>
    /// This resource manages a User resource within an Identity Store.
    /// 
    /// &gt; **Note:** If you use an external identity provider or Active Directory as your identity source,
    /// use this resource with caution. IAM Identity Center does not support outbound synchronization,
    /// so your identity source does not automatically update with the changes that you make to
    /// users using this resource.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// terraform import {
    /// 
    ///  to = aws_identitystore_user.example
    /// 
    ///  id = "d-9c6705e95c/065212b4-9061-703b-5876-13a517ae2a7c" } Using `pulumi import`, import an Identity Store User using the combination `identity_store_id/user_id`. For exampleconsole % pulumi import aws_identitystore_user.example d-9c6705e95c/065212b4-9061-703b-5876-13a517ae2a7c
    /// </summary>
    [AwsResourceType("aws:identitystore/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Details about the user's address. At most 1 address is allowed. Detailed below.
        /// </summary>
        [Output("addresses")]
        public Output<Outputs.UserAddresses?> Addresses { get; private set; } = null!;

        /// <summary>
        /// The name that is typically displayed when the user is referenced.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Details about the user's email. At most 1 email is allowed. Detailed below.
        /// </summary>
        [Output("emails")]
        public Output<Outputs.UserEmails?> Emails { get; private set; } = null!;

        /// <summary>
        /// A list of identifiers issued to this resource by an external identity provider.
        /// </summary>
        [Output("externalIds")]
        public Output<ImmutableArray<Outputs.UserExternalId>> ExternalIds { get; private set; } = null!;

        /// <summary>
        /// The globally unique identifier for the identity store that this user is in.
        /// </summary>
        [Output("identityStoreId")]
        public Output<string> IdentityStoreId { get; private set; } = null!;

        /// <summary>
        /// The user's geographical region or location.
        /// </summary>
        [Output("locale")]
        public Output<string?> Locale { get; private set; } = null!;

        /// <summary>
        /// Details about the user's full name. Detailed below.
        /// </summary>
        [Output("name")]
        public Output<Outputs.UserName> Name { get; private set; } = null!;

        /// <summary>
        /// An alternate name for the user.
        /// </summary>
        [Output("nickname")]
        public Output<string?> Nickname { get; private set; } = null!;

        /// <summary>
        /// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
        /// </summary>
        [Output("phoneNumbers")]
        public Output<Outputs.UserPhoneNumbers?> PhoneNumbers { get; private set; } = null!;

        /// <summary>
        /// The preferred language of the user.
        /// </summary>
        [Output("preferredLanguage")]
        public Output<string?> PreferredLanguage { get; private set; } = null!;

        /// <summary>
        /// An URL that may be associated with the user.
        /// </summary>
        [Output("profileUrl")]
        public Output<string?> ProfileUrl { get; private set; } = null!;

        /// <summary>
        /// The user's time zone.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// The user's title.
        /// </summary>
        [Output("title")]
        public Output<string?> Title { get; private set; } = null!;

        /// <summary>
        /// The identifier for this user in the identity store.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;

        /// <summary>
        /// A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// The user type.
        /// </summary>
        [Output("userType")]
        public Output<string?> UserType { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("aws:identitystore/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("aws:identitystore/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Details about the user's address. At most 1 address is allowed. Detailed below.
        /// </summary>
        [Input("addresses")]
        public Input<Inputs.UserAddressesArgs>? Addresses { get; set; }

        /// <summary>
        /// The name that is typically displayed when the user is referenced.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Details about the user's email. At most 1 email is allowed. Detailed below.
        /// </summary>
        [Input("emails")]
        public Input<Inputs.UserEmailsArgs>? Emails { get; set; }

        /// <summary>
        /// The globally unique identifier for the identity store that this user is in.
        /// </summary>
        [Input("identityStoreId", required: true)]
        public Input<string> IdentityStoreId { get; set; } = null!;

        /// <summary>
        /// The user's geographical region or location.
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        /// <summary>
        /// Details about the user's full name. Detailed below.
        /// </summary>
        [Input("name")]
        public Input<Inputs.UserNameArgs>? Name { get; set; }

        /// <summary>
        /// An alternate name for the user.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        /// <summary>
        /// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
        /// </summary>
        [Input("phoneNumbers")]
        public Input<Inputs.UserPhoneNumbersArgs>? PhoneNumbers { get; set; }

        /// <summary>
        /// The preferred language of the user.
        /// </summary>
        [Input("preferredLanguage")]
        public Input<string>? PreferredLanguage { get; set; }

        /// <summary>
        /// An URL that may be associated with the user.
        /// </summary>
        [Input("profileUrl")]
        public Input<string>? ProfileUrl { get; set; }

        /// <summary>
        /// The user's time zone.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The user's title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        /// <summary>
        /// The user type.
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Details about the user's address. At most 1 address is allowed. Detailed below.
        /// </summary>
        [Input("addresses")]
        public Input<Inputs.UserAddressesGetArgs>? Addresses { get; set; }

        /// <summary>
        /// The name that is typically displayed when the user is referenced.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Details about the user's email. At most 1 email is allowed. Detailed below.
        /// </summary>
        [Input("emails")]
        public Input<Inputs.UserEmailsGetArgs>? Emails { get; set; }

        [Input("externalIds")]
        private InputList<Inputs.UserExternalIdGetArgs>? _externalIds;

        /// <summary>
        /// A list of identifiers issued to this resource by an external identity provider.
        /// </summary>
        public InputList<Inputs.UserExternalIdGetArgs> ExternalIds
        {
            get => _externalIds ?? (_externalIds = new InputList<Inputs.UserExternalIdGetArgs>());
            set => _externalIds = value;
        }

        /// <summary>
        /// The globally unique identifier for the identity store that this user is in.
        /// </summary>
        [Input("identityStoreId")]
        public Input<string>? IdentityStoreId { get; set; }

        /// <summary>
        /// The user's geographical region or location.
        /// </summary>
        [Input("locale")]
        public Input<string>? Locale { get; set; }

        /// <summary>
        /// Details about the user's full name. Detailed below.
        /// </summary>
        [Input("name")]
        public Input<Inputs.UserNameGetArgs>? Name { get; set; }

        /// <summary>
        /// An alternate name for the user.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        /// <summary>
        /// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
        /// </summary>
        [Input("phoneNumbers")]
        public Input<Inputs.UserPhoneNumbersGetArgs>? PhoneNumbers { get; set; }

        /// <summary>
        /// The preferred language of the user.
        /// </summary>
        [Input("preferredLanguage")]
        public Input<string>? PreferredLanguage { get; set; }

        /// <summary>
        /// An URL that may be associated with the user.
        /// </summary>
        [Input("profileUrl")]
        public Input<string>? ProfileUrl { get; set; }

        /// <summary>
        /// The user's time zone.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The user's title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The identifier for this user in the identity store.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        /// <summary>
        /// A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// The user type.
        /// </summary>
        [Input("userType")]
        public Input<string>? UserType { get; set; }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
