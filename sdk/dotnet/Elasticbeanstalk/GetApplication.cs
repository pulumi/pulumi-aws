// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ElasticBeanstalk
{
    public static partial class Invokes
    {
        /// <summary>
        /// Retrieve information about an Elastic Beanstalk Application.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/elastic_beanstalk_application.html.markdown.
        /// </summary>
        [Obsolete("Use GetApplication.InvokeAsync() instead")]
        public static Task<GetApplicationResult> GetApplication(GetApplicationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("aws:elasticbeanstalk/getApplication:getApplication", args ?? InvokeArgs.Empty, options.WithVersion());
    }
    public static class GetApplication
    {
        /// <summary>
        /// Retrieve information about an Elastic Beanstalk Application.
        /// 
        /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/d/elastic_beanstalk_application.html.markdown.
        /// </summary>
        public static Task<GetApplicationResult> InvokeAsync(GetApplicationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApplicationResult>("aws:elasticbeanstalk/getApplication:getApplication", args ?? InvokeArgs.Empty, options.WithVersion());
    }

    public sealed class GetApplicationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the application
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetApplicationArgs()
        {
        }
    }

    [OutputType]
    public sealed class GetApplicationResult
    {
        public readonly Outputs.GetApplicationAppversionLifecycleResult AppversionLifecycle;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the application.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// Short description of the application
        /// </summary>
        public readonly string Description;
        public readonly string Name;
        /// <summary>
        /// id is the provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetApplicationResult(
            Outputs.GetApplicationAppversionLifecycleResult appversionLifecycle,
            string arn,
            string description,
            string name,
            string id)
        {
            AppversionLifecycle = appversionLifecycle;
            Arn = arn;
            Description = description;
            Name = name;
            Id = id;
        }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class GetApplicationAppversionLifecycleResult
    {
        /// <summary>
        /// Specifies whether delete a version's source bundle from S3 when the application version is deleted.
        /// </summary>
        public readonly bool DeleteSourceFromS3;
        /// <summary>
        /// The number of days to retain an application version.
        /// </summary>
        public readonly int MaxAgeInDays;
        /// <summary>
        /// The maximum number of application versions to retain.
        /// </summary>
        public readonly int MaxCount;
        /// <summary>
        /// The ARN of an IAM service role under which the application version is deleted.  Elastic Beanstalk must have permission to assume this role.
        /// </summary>
        public readonly string ServiceRole;

        [OutputConstructor]
        private GetApplicationAppversionLifecycleResult(
            bool deleteSourceFromS3,
            int maxAgeInDays,
            int maxCount,
            string serviceRole)
        {
            DeleteSourceFromS3 = deleteSourceFromS3;
            MaxAgeInDays = maxAgeInDays;
            MaxCount = maxCount;
            ServiceRole = serviceRole;
        }
    }
    }
}
