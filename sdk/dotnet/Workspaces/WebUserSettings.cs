// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Workspaces
{
    /// <summary>
    /// Resource for managing an AWS WorkSpaces Web User Settings resource. Once associated with a web portal, user settings control how users can transfer data between a streaming session and their local devices.
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Workspaces.WebUserSettings("example", new()
    ///     {
    ///         CopyAllowed = "Enabled",
    ///         DownloadAllowed = "Enabled",
    ///         PasteAllowed = "Enabled",
    ///         PrintAllowed = "Enabled",
    ///         UploadAllowed = "Enabled",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### With Toolbar Configuration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Workspaces.WebUserSettings("example", new()
    ///     {
    ///         CopyAllowed = "Enabled",
    ///         DownloadAllowed = "Enabled",
    ///         PasteAllowed = "Enabled",
    ///         PrintAllowed = "Enabled",
    ///         UploadAllowed = "Enabled",
    ///         ToolbarConfiguration = new Aws.Workspaces.Inputs.WebUserSettingsToolbarConfigurationArgs
    ///         {
    ///             ToolbarType = "Docked",
    ///             VisualMode = "Dark",
    ///             HiddenToolbarItems = new[]
    ///             {
    ///                 "Webcam",
    ///                 "Microphone",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Complete Example
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Aws.Kms.Key("example", new()
    ///     {
    ///         Description = "KMS key for WorkSpaces Web User Settings",
    ///         DeletionWindowInDays = 7,
    ///     });
    /// 
    ///     var exampleWebUserSettings = new Aws.Workspaces.WebUserSettings("example", new()
    ///     {
    ///         CopyAllowed = "Enabled",
    ///         DownloadAllowed = "Enabled",
    ///         PasteAllowed = "Enabled",
    ///         PrintAllowed = "Enabled",
    ///         UploadAllowed = "Enabled",
    ///         DeepLinkAllowed = "Enabled",
    ///         DisconnectTimeoutInMinutes = 30,
    ///         IdleDisconnectTimeoutInMinutes = 15,
    ///         CustomerManagedKey = example.Arn,
    ///         AdditionalEncryptionContext = 
    ///         {
    ///             { "Environment", "Production" },
    ///         },
    ///         ToolbarConfiguration = new Aws.Workspaces.Inputs.WebUserSettingsToolbarConfigurationArgs
    ///         {
    ///             ToolbarType = "Docked",
    ///             VisualMode = "Dark",
    ///             HiddenToolbarItems = new[]
    ///             {
    ///                 "Webcam",
    ///                 "Microphone",
    ///             },
    ///             MaxDisplayResolution = "size1920X1080",
    ///         },
    ///         CookieSynchronizationConfiguration = new Aws.Workspaces.Inputs.WebUserSettingsCookieSynchronizationConfigurationArgs
    ///         {
    ///             Allowlists = new[]
    ///             {
    ///                 new Aws.Workspaces.Inputs.WebUserSettingsCookieSynchronizationConfigurationAllowlistArgs
    ///                 {
    ///                     Domain = "example.com",
    ///                     Path = "/path",
    ///                 },
    ///             },
    ///             Blocklists = new[]
    ///             {
    ///                 new Aws.Workspaces.Inputs.WebUserSettingsCookieSynchronizationConfigurationBlocklistArgs
    ///                 {
    ///                     Domain = "blocked.com",
    ///                 },
    ///             },
    ///         },
    ///         Tags = 
    ///         {
    ///             { "Name", "example-user-settings" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Using `pulumi import`, import WorkSpaces Web User Settings using the `user_settings_arn`. For example:
    /// 
    /// ```sh
    /// $ pulumi import aws:workspaces/webUserSettings:WebUserSettings example arn:aws:workspacesweb:us-west-2:123456789012:usersettings/abcdef12345
    /// ```
    /// </summary>
    [AwsResourceType("aws:workspaces/webUserSettings:WebUserSettings")]
    public partial class WebUserSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional encryption context for the user settings.
        /// </summary>
        [Output("additionalEncryptionContext")]
        public Output<ImmutableDictionary<string, string>?> AdditionalEncryptionContext { get; private set; } = null!;

        /// <summary>
        /// List of web portal ARNs to associate with the user settings.
        /// </summary>
        [Output("associatedPortalArns")]
        public Output<ImmutableArray<string>> AssociatedPortalArns { get; private set; } = null!;

        /// <summary>
        /// Configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser. Detailed below.
        /// </summary>
        [Output("cookieSynchronizationConfiguration")]
        public Output<Outputs.WebUserSettingsCookieSynchronizationConfiguration?> CookieSynchronizationConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Output("copyAllowed")]
        public Output<string> CopyAllowed { get; private set; } = null!;

        /// <summary>
        /// ARN of the customer managed KMS key.
        /// </summary>
        [Output("customerManagedKey")]
        public Output<string?> CustomerManagedKey { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Output("deepLinkAllowed")]
        public Output<string> DeepLinkAllowed { get; private set; } = null!;

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
        /// </summary>
        [Output("disconnectTimeoutInMinutes")]
        public Output<int?> DisconnectTimeoutInMinutes { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Output("downloadAllowed")]
        public Output<string> DownloadAllowed { get; private set; } = null!;

        /// <summary>
        /// Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
        /// </summary>
        [Output("idleDisconnectTimeoutInMinutes")]
        public Output<int?> IdleDisconnectTimeoutInMinutes { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Output("pasteAllowed")]
        public Output<string> PasteAllowed { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Output("printAllowed")]
        public Output<string> PrintAllowed { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Output("tagsAll")]
        public Output<ImmutableDictionary<string, string>> TagsAll { get; private set; } = null!;

        /// <summary>
        /// Configuration of the toolbar. Detailed below.
        /// </summary>
        [Output("toolbarConfiguration")]
        public Output<Outputs.WebUserSettingsToolbarConfiguration?> ToolbarConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Output("uploadAllowed")]
        public Output<string> UploadAllowed { get; private set; } = null!;

        /// <summary>
        /// ARN of the user settings resource.
        /// </summary>
        [Output("userSettingsArn")]
        public Output<string> UserSettingsArn { get; private set; } = null!;


        /// <summary>
        /// Create a WebUserSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebUserSettings(string name, WebUserSettingsArgs args, CustomResourceOptions? options = null)
            : base("aws:workspaces/webUserSettings:WebUserSettings", name, args ?? new WebUserSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebUserSettings(string name, Input<string> id, WebUserSettingsState? state = null, CustomResourceOptions? options = null)
            : base("aws:workspaces/webUserSettings:WebUserSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebUserSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebUserSettings Get(string name, Input<string> id, WebUserSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new WebUserSettings(name, id, state, options);
        }
    }

    public sealed class WebUserSettingsArgs : global::Pulumi.ResourceArgs
    {
        [Input("additionalEncryptionContext")]
        private InputMap<string>? _additionalEncryptionContext;

        /// <summary>
        /// Additional encryption context for the user settings.
        /// </summary>
        public InputMap<string> AdditionalEncryptionContext
        {
            get => _additionalEncryptionContext ?? (_additionalEncryptionContext = new InputMap<string>());
            set => _additionalEncryptionContext = value;
        }

        /// <summary>
        /// Configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser. Detailed below.
        /// </summary>
        [Input("cookieSynchronizationConfiguration")]
        public Input<Inputs.WebUserSettingsCookieSynchronizationConfigurationArgs>? CookieSynchronizationConfiguration { get; set; }

        /// <summary>
        /// Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("copyAllowed", required: true)]
        public Input<string> CopyAllowed { get; set; } = null!;

        /// <summary>
        /// ARN of the customer managed KMS key.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<string>? CustomerManagedKey { get; set; }

        /// <summary>
        /// Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("deepLinkAllowed")]
        public Input<string>? DeepLinkAllowed { get; set; }

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
        /// </summary>
        [Input("disconnectTimeoutInMinutes")]
        public Input<int>? DisconnectTimeoutInMinutes { get; set; }

        /// <summary>
        /// Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("downloadAllowed", required: true)]
        public Input<string> DownloadAllowed { get; set; } = null!;

        /// <summary>
        /// Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
        /// </summary>
        [Input("idleDisconnectTimeoutInMinutes")]
        public Input<int>? IdleDisconnectTimeoutInMinutes { get; set; }

        /// <summary>
        /// Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("pasteAllowed", required: true)]
        public Input<string> PasteAllowed { get; set; } = null!;

        /// <summary>
        /// Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("printAllowed", required: true)]
        public Input<string> PrintAllowed { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Configuration of the toolbar. Detailed below.
        /// </summary>
        [Input("toolbarConfiguration")]
        public Input<Inputs.WebUserSettingsToolbarConfigurationArgs>? ToolbarConfiguration { get; set; }

        /// <summary>
        /// Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("uploadAllowed", required: true)]
        public Input<string> UploadAllowed { get; set; } = null!;

        public WebUserSettingsArgs()
        {
        }
        public static new WebUserSettingsArgs Empty => new WebUserSettingsArgs();
    }

    public sealed class WebUserSettingsState : global::Pulumi.ResourceArgs
    {
        [Input("additionalEncryptionContext")]
        private InputMap<string>? _additionalEncryptionContext;

        /// <summary>
        /// Additional encryption context for the user settings.
        /// </summary>
        public InputMap<string> AdditionalEncryptionContext
        {
            get => _additionalEncryptionContext ?? (_additionalEncryptionContext = new InputMap<string>());
            set => _additionalEncryptionContext = value;
        }

        [Input("associatedPortalArns")]
        private InputList<string>? _associatedPortalArns;

        /// <summary>
        /// List of web portal ARNs to associate with the user settings.
        /// </summary>
        public InputList<string> AssociatedPortalArns
        {
            get => _associatedPortalArns ?? (_associatedPortalArns = new InputList<string>());
            set => _associatedPortalArns = value;
        }

        /// <summary>
        /// Configuration that specifies which cookies should be synchronized from the end user's local browser to the remote browser. Detailed below.
        /// </summary>
        [Input("cookieSynchronizationConfiguration")]
        public Input<Inputs.WebUserSettingsCookieSynchronizationConfigurationGetArgs>? CookieSynchronizationConfiguration { get; set; }

        /// <summary>
        /// Specifies whether the user can copy text from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("copyAllowed")]
        public Input<string>? CopyAllowed { get; set; }

        /// <summary>
        /// ARN of the customer managed KMS key.
        /// </summary>
        [Input("customerManagedKey")]
        public Input<string>? CustomerManagedKey { get; set; }

        /// <summary>
        /// Specifies whether the user can use deep links that open automatically when connecting to a session. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("deepLinkAllowed")]
        public Input<string>? DeepLinkAllowed { get; set; }

        /// <summary>
        /// Amount of time that a streaming session remains active after users disconnect. Value must be between 1 and 600 minutes.
        /// </summary>
        [Input("disconnectTimeoutInMinutes")]
        public Input<int>? DisconnectTimeoutInMinutes { get; set; }

        /// <summary>
        /// Specifies whether the user can download files from the streaming session to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("downloadAllowed")]
        public Input<string>? DownloadAllowed { get; set; }

        /// <summary>
        /// Amount of time that users can be idle before they are disconnected from their streaming session. Value must be between 0 and 60 minutes.
        /// </summary>
        [Input("idleDisconnectTimeoutInMinutes")]
        public Input<int>? IdleDisconnectTimeoutInMinutes { get; set; }

        /// <summary>
        /// Specifies whether the user can paste text from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("pasteAllowed")]
        public Input<string>? PasteAllowed { get; set; }

        /// <summary>
        /// Specifies whether the user can print to the local device. Valid values are `Enabled` or `Disabled`.
        /// </summary>
        [Input("printAllowed")]
        public Input<string>? PrintAllowed { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Map of tags assigned to the resource. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        [Obsolete(@"Please use `tags` instead.")]
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        /// <summary>
        /// Configuration of the toolbar. Detailed below.
        /// </summary>
        [Input("toolbarConfiguration")]
        public Input<Inputs.WebUserSettingsToolbarConfigurationGetArgs>? ToolbarConfiguration { get; set; }

        /// <summary>
        /// Specifies whether the user can upload files from the local device to the streaming session. Valid values are `Enabled` or `Disabled`.
        /// 
        /// The following arguments are optional:
        /// </summary>
        [Input("uploadAllowed")]
        public Input<string>? UploadAllowed { get; set; }

        /// <summary>
        /// ARN of the user settings resource.
        /// </summary>
        [Input("userSettingsArn")]
        public Input<string>? UserSettingsArn { get; set; }

        public WebUserSettingsState()
        {
        }
        public static new WebUserSettingsState Empty => new WebUserSettingsState();
    }
}
