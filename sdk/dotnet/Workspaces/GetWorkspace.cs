// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.Workspaces
{
    public static class GetWorkspace
    {
        /// <summary>
        /// Use this data source to get information about a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Filter By Workspace ID
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.workspaces.getWorkspace({
        ///     workspaceId: "ws-cj5xcxsz5",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.workspaces.get_workspace(workspace_id="ws-cj5xcxsz5")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Workspaces.GetWorkspace.Invoke(new()
        ///     {
        ///         WorkspaceId = "ws-cj5xcxsz5",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/workspaces"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := workspaces.LookupWorkspace(ctx, &amp;workspaces.LookupWorkspaceArgs{
        /// 			WorkspaceId: pulumi.StringRef("ws-cj5xcxsz5"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.workspaces.WorkspacesFunctions;
        /// import com.pulumi.aws.workspaces.inputs.GetWorkspaceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = WorkspacesFunctions.getWorkspace(GetWorkspaceArgs.builder()
        ///             .workspaceId("ws-cj5xcxsz5")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:workspaces:getWorkspace
        ///       Arguments:
        ///         workspaceId: ws-cj5xcxsz5
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter By Directory ID &amp; User Name
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.workspaces.getWorkspace({
        ///     directoryId: "d-9967252f57",
        ///     userName: "Example",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.workspaces.get_workspace(directory_id="d-9967252f57",
        ///     user_name="Example")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Workspaces.GetWorkspace.Invoke(new()
        ///     {
        ///         DirectoryId = "d-9967252f57",
        ///         UserName = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/workspaces"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := workspaces.LookupWorkspace(ctx, &amp;workspaces.LookupWorkspaceArgs{
        /// 			DirectoryId: pulumi.StringRef("d-9967252f57"),
        /// 			UserName:    pulumi.StringRef("Example"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.workspaces.WorkspacesFunctions;
        /// import com.pulumi.aws.workspaces.inputs.GetWorkspaceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = WorkspacesFunctions.getWorkspace(GetWorkspaceArgs.builder()
        ///             .directoryId("d-9967252f57")
        ///             .userName("Example")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:workspaces:getWorkspace
        ///       Arguments:
        ///         directoryId: d-9967252f57
        ///         userName: Example
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetWorkspaceResult> InvokeAsync(GetWorkspaceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkspaceResult>("aws:workspaces/getWorkspace:getWorkspace", args ?? new GetWorkspaceArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Filter By Workspace ID
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.workspaces.getWorkspace({
        ///     workspaceId: "ws-cj5xcxsz5",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.workspaces.get_workspace(workspace_id="ws-cj5xcxsz5")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Workspaces.GetWorkspace.Invoke(new()
        ///     {
        ///         WorkspaceId = "ws-cj5xcxsz5",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/workspaces"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := workspaces.LookupWorkspace(ctx, &amp;workspaces.LookupWorkspaceArgs{
        /// 			WorkspaceId: pulumi.StringRef("ws-cj5xcxsz5"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.workspaces.WorkspacesFunctions;
        /// import com.pulumi.aws.workspaces.inputs.GetWorkspaceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = WorkspacesFunctions.getWorkspace(GetWorkspaceArgs.builder()
        ///             .workspaceId("ws-cj5xcxsz5")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:workspaces:getWorkspace
        ///       Arguments:
        ///         workspaceId: ws-cj5xcxsz5
        /// ```
        /// {{% /example %}}
        /// {{% example %}}
        /// ### Filter By Directory ID &amp; User Name
        /// 
        /// ```typescript
        /// import * as pulumi from "@pulumi/pulumi";
        /// import * as aws from "@pulumi/aws";
        /// 
        /// const example = aws.workspaces.getWorkspace({
        ///     directoryId: "d-9967252f57",
        ///     userName: "Example",
        /// });
        /// ```
        /// ```python
        /// import pulumi
        /// import pulumi_aws as aws
        /// 
        /// example = aws.workspaces.get_workspace(directory_id="d-9967252f57",
        ///     user_name="Example")
        /// ```
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Aws.Workspaces.GetWorkspace.Invoke(new()
        ///     {
        ///         DirectoryId = "d-9967252f57",
        ///         UserName = "Example",
        ///     });
        /// 
        /// });
        /// ```
        /// ```go
        /// package main
        /// 
        /// import (
        /// 	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/workspaces"
        /// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
        /// )
        /// 
        /// func main() {
        /// 	pulumi.Run(func(ctx *pulumi.Context) error {
        /// 		_, err := workspaces.LookupWorkspace(ctx, &amp;workspaces.LookupWorkspaceArgs{
        /// 			DirectoryId: pulumi.StringRef("d-9967252f57"),
        /// 			UserName:    pulumi.StringRef("Example"),
        /// 		}, nil)
        /// 		if err != nil {
        /// 			return err
        /// 		}
        /// 		return nil
        /// 	})
        /// }
        /// ```
        /// ```java
        /// package generated_program;
        /// 
        /// import com.pulumi.Context;
        /// import com.pulumi.Pulumi;
        /// import com.pulumi.core.Output;
        /// import com.pulumi.aws.workspaces.WorkspacesFunctions;
        /// import com.pulumi.aws.workspaces.inputs.GetWorkspaceArgs;
        /// import java.util.List;
        /// import java.util.ArrayList;
        /// import java.util.Map;
        /// import java.io.File;
        /// import java.nio.file.Files;
        /// import java.nio.file.Paths;
        /// 
        /// public class App {
        ///     public static void main(String[] args) {
        ///         Pulumi.run(App::stack);
        ///     }
        /// 
        ///     public static void stack(Context ctx) {
        ///         final var example = WorkspacesFunctions.getWorkspace(GetWorkspaceArgs.builder()
        ///             .directoryId("d-9967252f57")
        ///             .userName("Example")
        ///             .build());
        /// 
        ///     }
        /// }
        /// ```
        /// ```yaml
        /// variables:
        ///   example:
        ///     fn::invoke:
        ///       Function: aws:workspaces:getWorkspace
        ///       Arguments:
        ///         directoryId: d-9967252f57
        ///         userName: Example
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetWorkspaceResult> Invoke(GetWorkspaceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkspaceResult>("aws:workspaces/getWorkspace:getWorkspace", args ?? new GetWorkspaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the directory for the WorkSpace. You have to specify `user_name` along with `directory_id`. You cannot combine this parameter with `workspace_id`.
        /// </summary>
        [Input("directoryId")]
        public string? DirectoryId { get; set; }

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// Tags for the WorkSpace.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        /// <summary>
        /// User name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace. You cannot combine this parameter with `workspace_id`.
        /// </summary>
        [Input("userName")]
        public string? UserName { get; set; }

        /// <summary>
        /// ID of the WorkSpace. You cannot combine this parameter with `directory_id`.
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public GetWorkspaceArgs()
        {
        }
        public static new GetWorkspaceArgs Empty => new GetWorkspaceArgs();
    }

    public sealed class GetWorkspaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the directory for the WorkSpace. You have to specify `user_name` along with `directory_id`. You cannot combine this parameter with `workspace_id`.
        /// </summary>
        [Input("directoryId")]
        public Input<string>? DirectoryId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Tags for the WorkSpace.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// User name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace. You cannot combine this parameter with `workspace_id`.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        /// <summary>
        /// ID of the WorkSpace. You cannot combine this parameter with `directory_id`.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public GetWorkspaceInvokeArgs()
        {
        }
        public static new GetWorkspaceInvokeArgs Empty => new GetWorkspaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspaceResult
    {
        public readonly string BundleId;
        /// <summary>
        /// Name of the WorkSpace, as seen by the operating system.
        /// </summary>
        public readonly string ComputerName;
        public readonly string DirectoryId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP address of the WorkSpace.
        /// </summary>
        public readonly string IpAddress;
        public readonly bool RootVolumeEncryptionEnabled;
        /// <summary>
        /// Operational state of the WorkSpace.
        /// </summary>
        public readonly string State;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly string UserName;
        public readonly bool UserVolumeEncryptionEnabled;
        public readonly string VolumeEncryptionKey;
        public readonly string WorkspaceId;
        public readonly ImmutableArray<Outputs.GetWorkspaceWorkspacePropertyResult> WorkspaceProperties;

        [OutputConstructor]
        private GetWorkspaceResult(
            string bundleId,

            string computerName,

            string directoryId,

            string id,

            string ipAddress,

            bool rootVolumeEncryptionEnabled,

            string state,

            ImmutableDictionary<string, string> tags,

            string userName,

            bool userVolumeEncryptionEnabled,

            string volumeEncryptionKey,

            string workspaceId,

            ImmutableArray<Outputs.GetWorkspaceWorkspacePropertyResult> workspaceProperties)
        {
            BundleId = bundleId;
            ComputerName = computerName;
            DirectoryId = directoryId;
            Id = id;
            IpAddress = ipAddress;
            RootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled;
            State = state;
            Tags = tags;
            UserName = userName;
            UserVolumeEncryptionEnabled = userVolumeEncryptionEnabled;
            VolumeEncryptionKey = volumeEncryptionKey;
            WorkspaceId = workspaceId;
            WorkspaceProperties = workspaceProperties;
        }
    }
}
