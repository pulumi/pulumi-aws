// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Aws.Workspaces
{
    public static class GetDirectory
    {
        /// <summary>
        /// Retrieve information about an AWS WorkSpaces directory.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Workspaces.GetDirectory.InvokeAsync(new Aws.Workspaces.GetDirectoryArgs
        ///         {
        ///             DirectoryId = "d-9067783251",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDirectoryResult> InvokeAsync(GetDirectoryArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDirectoryResult>("aws:workspaces/getDirectory:getDirectory", args ?? new GetDirectoryArgs(), options.WithVersion());

        /// <summary>
        /// Retrieve information about an AWS WorkSpaces directory.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Aws.Workspaces.GetDirectory.InvokeAsync(new Aws.Workspaces.GetDirectoryArgs
        ///         {
        ///             DirectoryId = "d-9067783251",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetDirectoryResult> Invoke(GetDirectoryInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetDirectoryResult>("aws:workspaces/getDirectory:getDirectory", args ?? new GetDirectoryInvokeArgs(), options.WithVersion());
    }


    public sealed class GetDirectoryArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The directory identifier for registration in WorkSpaces service.
        /// </summary>
        [Input("directoryId", required: true)]
        public string DirectoryId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        public GetDirectoryArgs()
        {
        }
    }

    public sealed class GetDirectoryInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The directory identifier for registration in WorkSpaces service.
        /// </summary>
        [Input("directoryId", required: true)]
        public Input<string> DirectoryId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GetDirectoryInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDirectoryResult
    {
        /// <summary>
        /// The directory alias.
        /// </summary>
        public readonly string Alias;
        /// <summary>
        /// The user name for the service account.
        /// </summary>
        public readonly string CustomerUserName;
        public readonly string DirectoryId;
        /// <summary>
        /// The name of the directory.
        /// </summary>
        public readonly string DirectoryName;
        /// <summary>
        /// The directory type.
        /// </summary>
        public readonly string DirectoryType;
        /// <summary>
        /// The IP addresses of the DNS servers for the directory.
        /// </summary>
        public readonly ImmutableArray<string> DnsIpAddresses;
        /// <summary>
        /// The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
        /// </summary>
        public readonly string IamRoleId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identifiers of the IP access control groups associated with the directory.
        /// </summary>
        public readonly ImmutableArray<string> IpGroupIds;
        /// <summary>
        /// The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
        /// </summary>
        public readonly string RegistrationCode;
        /// <summary>
        /// The permissions to enable or disable self-service capabilities.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDirectorySelfServicePermissionResult> SelfServicePermissions;
        /// <summary>
        /// The identifiers of the subnets where the directory resides.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// A map of tags assigned to the WorkSpaces directory.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// (Optional) Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDirectoryWorkspaceAccessPropertyResult> WorkspaceAccessProperties;
        /// <summary>
        /// The default properties that are used for creating WorkSpaces. Defined below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDirectoryWorkspaceCreationPropertyResult> WorkspaceCreationProperties;
        /// <summary>
        /// The identifier of the security group that is assigned to new WorkSpaces. Defined below.
        /// </summary>
        public readonly string WorkspaceSecurityGroupId;

        [OutputConstructor]
        private GetDirectoryResult(
            string alias,

            string customerUserName,

            string directoryId,

            string directoryName,

            string directoryType,

            ImmutableArray<string> dnsIpAddresses,

            string iamRoleId,

            string id,

            ImmutableArray<string> ipGroupIds,

            string registrationCode,

            ImmutableArray<Outputs.GetDirectorySelfServicePermissionResult> selfServicePermissions,

            ImmutableArray<string> subnetIds,

            ImmutableDictionary<string, string>? tags,

            ImmutableArray<Outputs.GetDirectoryWorkspaceAccessPropertyResult> workspaceAccessProperties,

            ImmutableArray<Outputs.GetDirectoryWorkspaceCreationPropertyResult> workspaceCreationProperties,

            string workspaceSecurityGroupId)
        {
            Alias = alias;
            CustomerUserName = customerUserName;
            DirectoryId = directoryId;
            DirectoryName = directoryName;
            DirectoryType = directoryType;
            DnsIpAddresses = dnsIpAddresses;
            IamRoleId = iamRoleId;
            Id = id;
            IpGroupIds = ipGroupIds;
            RegistrationCode = registrationCode;
            SelfServicePermissions = selfServicePermissions;
            SubnetIds = subnetIds;
            Tags = tags;
            WorkspaceAccessProperties = workspaceAccessProperties;
            WorkspaceCreationProperties = workspaceCreationProperties;
            WorkspaceSecurityGroupId = workspaceSecurityGroupId;
        }
    }
}
