// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.DynamoDB
{
    /// <summary>
    /// Provides a DynamoDB table resource
    /// 
    /// &gt; **Note:** It is recommended to use `lifecycle` [`ignore_changes`](https://www.terraform.io/docs/configuration/resources.html#ignore_changes) for `read_capacity` and/or `write_capacity` if there's [autoscaling policy](https://www.terraform.io/docs/providers/aws/r/appautoscaling_policy.html) attached to the table.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/dynamodb_table.html.markdown.
    /// </summary>
    public partial class Table : Pulumi.CustomResource
    {
        /// <summary>
        /// The arn of the table
        /// </summary>
        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        /// <summary>
        /// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableArray<Outputs.TableAttributes>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
        /// </summary>
        [Output("billingMode")]
        public Output<string?> BillingMode { get; private set; } = null!;

        /// <summary>
        /// Describe a GSI for the table;
        /// subject to the normal limits on the number of GSIs, projected
        /// attributes, etc.
        /// </summary>
        [Output("globalSecondaryIndexes")]
        public Output<ImmutableArray<Outputs.TableGlobalSecondaryIndexes>> GlobalSecondaryIndexes { get; private set; } = null!;

        /// <summary>
        /// The name of the hash key in the index; must be
        /// defined as an attribute in the resource.
        /// </summary>
        [Output("hashKey")]
        public Output<string> HashKey { get; private set; } = null!;

        /// <summary>
        /// Describe an LSI on the table;
        /// these can only be allocated *at creation* so you cannot change this
        /// definition after you have created the resource.
        /// </summary>
        [Output("localSecondaryIndexes")]
        public Output<ImmutableArray<Outputs.TableLocalSecondaryIndexes>> LocalSecondaryIndexes { get; private set; } = null!;

        /// <summary>
        /// The name of the index
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Point-in-time recovery options.
        /// </summary>
        [Output("pointInTimeRecovery")]
        public Output<Outputs.TablePointInTimeRecovery> PointInTimeRecovery { get; private set; } = null!;

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Output("rangeKey")]
        public Output<string?> RangeKey { get; private set; } = null!;

        /// <summary>
        /// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Output("readCapacity")]
        public Output<int?> ReadCapacity { get; private set; } = null!;

        /// <summary>
        /// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
        /// </summary>
        [Output("serverSideEncryption")]
        public Output<Outputs.TableServerSideEncryption> ServerSideEncryption { get; private set; } = null!;

        /// <summary>
        /// The ARN of the Table Stream. Only available when `stream_enabled = true`
        /// </summary>
        [Output("streamArn")]
        public Output<string> StreamArn { get; private set; } = null!;

        /// <summary>
        /// Indicates whether Streams are to be enabled (true) or disabled (false).
        /// </summary>
        [Output("streamEnabled")]
        public Output<bool?> StreamEnabled { get; private set; } = null!;

        /// <summary>
        /// A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
        /// a unique identifier for the stream on its own. However, the combination of AWS customer ID,
        /// table name and this field is guaranteed to be unique.
        /// It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`
        /// </summary>
        [Output("streamLabel")]
        public Output<string> StreamLabel { get; private set; } = null!;

        /// <summary>
        /// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
        /// </summary>
        [Output("streamViewType")]
        public Output<string> StreamViewType { get; private set; } = null!;

        /// <summary>
        /// A map of tags to populate on the created table.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Defines ttl, has two properties, and can only be specified once:
        /// </summary>
        [Output("ttl")]
        public Output<Outputs.TableTtl?> Ttl { get; private set; } = null!;

        /// <summary>
        /// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Output("writeCapacity")]
        public Output<int?> WriteCapacity { get; private set; } = null!;


        /// <summary>
        /// Create a Table resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Table(string name, TableArgs args, CustomResourceOptions? options = null)
            : base("aws:dynamodb/table:Table", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Table(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
            : base("aws:dynamodb/table:Table", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Table resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Table Get(string name, Input<string> id, TableState? state = null, CustomResourceOptions? options = null)
        {
            return new Table(name, id, state, options);
        }
    }

    public sealed class TableArgs : Pulumi.ResourceArgs
    {
        [Input("attributes", required: true)]
        private InputList<Inputs.TableAttributesArgs>? _attributes;

        /// <summary>
        /// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
        /// </summary>
        public InputList<Inputs.TableAttributesArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.TableAttributesArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
        /// </summary>
        [Input("billingMode")]
        public Input<string>? BillingMode { get; set; }

        [Input("globalSecondaryIndexes")]
        private InputList<Inputs.TableGlobalSecondaryIndexesArgs>? _globalSecondaryIndexes;

        /// <summary>
        /// Describe a GSI for the table;
        /// subject to the normal limits on the number of GSIs, projected
        /// attributes, etc.
        /// </summary>
        public InputList<Inputs.TableGlobalSecondaryIndexesArgs> GlobalSecondaryIndexes
        {
            get => _globalSecondaryIndexes ?? (_globalSecondaryIndexes = new InputList<Inputs.TableGlobalSecondaryIndexesArgs>());
            set => _globalSecondaryIndexes = value;
        }

        /// <summary>
        /// The name of the hash key in the index; must be
        /// defined as an attribute in the resource.
        /// </summary>
        [Input("hashKey", required: true)]
        public Input<string> HashKey { get; set; } = null!;

        [Input("localSecondaryIndexes")]
        private InputList<Inputs.TableLocalSecondaryIndexesArgs>? _localSecondaryIndexes;

        /// <summary>
        /// Describe an LSI on the table;
        /// these can only be allocated *at creation* so you cannot change this
        /// definition after you have created the resource.
        /// </summary>
        public InputList<Inputs.TableLocalSecondaryIndexesArgs> LocalSecondaryIndexes
        {
            get => _localSecondaryIndexes ?? (_localSecondaryIndexes = new InputList<Inputs.TableLocalSecondaryIndexesArgs>());
            set => _localSecondaryIndexes = value;
        }

        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Point-in-time recovery options.
        /// </summary>
        [Input("pointInTimeRecovery")]
        public Input<Inputs.TablePointInTimeRecoveryArgs>? PointInTimeRecovery { get; set; }

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Input("rangeKey")]
        public Input<string>? RangeKey { get; set; }

        /// <summary>
        /// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("readCapacity")]
        public Input<int>? ReadCapacity { get; set; }

        /// <summary>
        /// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
        /// </summary>
        [Input("serverSideEncryption")]
        public Input<Inputs.TableServerSideEncryptionArgs>? ServerSideEncryption { get; set; }

        /// <summary>
        /// Indicates whether Streams are to be enabled (true) or disabled (false).
        /// </summary>
        [Input("streamEnabled")]
        public Input<bool>? StreamEnabled { get; set; }

        /// <summary>
        /// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
        /// </summary>
        [Input("streamViewType")]
        public Input<string>? StreamViewType { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A map of tags to populate on the created table.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Defines ttl, has two properties, and can only be specified once:
        /// </summary>
        [Input("ttl")]
        public Input<Inputs.TableTtlArgs>? Ttl { get; set; }

        /// <summary>
        /// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("writeCapacity")]
        public Input<int>? WriteCapacity { get; set; }

        public TableArgs()
        {
        }
    }

    public sealed class TableState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The arn of the table
        /// </summary>
        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("attributes")]
        private InputList<Inputs.TableAttributesGetArgs>? _attributes;

        /// <summary>
        /// List of nested attribute definitions. Only required for `hash_key` and `range_key` attributes. Each attribute has two properties:
        /// </summary>
        public InputList<Inputs.TableAttributesGetArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.TableAttributesGetArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// Controls how you are charged for read and write throughput and how you manage capacity. The valid values are `PROVISIONED` and `PAY_PER_REQUEST`. Defaults to `PROVISIONED`.
        /// </summary>
        [Input("billingMode")]
        public Input<string>? BillingMode { get; set; }

        [Input("globalSecondaryIndexes")]
        private InputList<Inputs.TableGlobalSecondaryIndexesGetArgs>? _globalSecondaryIndexes;

        /// <summary>
        /// Describe a GSI for the table;
        /// subject to the normal limits on the number of GSIs, projected
        /// attributes, etc.
        /// </summary>
        public InputList<Inputs.TableGlobalSecondaryIndexesGetArgs> GlobalSecondaryIndexes
        {
            get => _globalSecondaryIndexes ?? (_globalSecondaryIndexes = new InputList<Inputs.TableGlobalSecondaryIndexesGetArgs>());
            set => _globalSecondaryIndexes = value;
        }

        /// <summary>
        /// The name of the hash key in the index; must be
        /// defined as an attribute in the resource.
        /// </summary>
        [Input("hashKey")]
        public Input<string>? HashKey { get; set; }

        [Input("localSecondaryIndexes")]
        private InputList<Inputs.TableLocalSecondaryIndexesGetArgs>? _localSecondaryIndexes;

        /// <summary>
        /// Describe an LSI on the table;
        /// these can only be allocated *at creation* so you cannot change this
        /// definition after you have created the resource.
        /// </summary>
        public InputList<Inputs.TableLocalSecondaryIndexesGetArgs> LocalSecondaryIndexes
        {
            get => _localSecondaryIndexes ?? (_localSecondaryIndexes = new InputList<Inputs.TableLocalSecondaryIndexesGetArgs>());
            set => _localSecondaryIndexes = value;
        }

        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Point-in-time recovery options.
        /// </summary>
        [Input("pointInTimeRecovery")]
        public Input<Inputs.TablePointInTimeRecoveryGetArgs>? PointInTimeRecovery { get; set; }

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Input("rangeKey")]
        public Input<string>? RangeKey { get; set; }

        /// <summary>
        /// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("readCapacity")]
        public Input<int>? ReadCapacity { get; set; }

        /// <summary>
        /// Encryption at rest options. AWS DynamoDB tables are automatically encrypted at rest with an AWS owned Customer Master Key if this argument isn't specified.
        /// </summary>
        [Input("serverSideEncryption")]
        public Input<Inputs.TableServerSideEncryptionGetArgs>? ServerSideEncryption { get; set; }

        /// <summary>
        /// The ARN of the Table Stream. Only available when `stream_enabled = true`
        /// </summary>
        [Input("streamArn")]
        public Input<string>? StreamArn { get; set; }

        /// <summary>
        /// Indicates whether Streams are to be enabled (true) or disabled (false).
        /// </summary>
        [Input("streamEnabled")]
        public Input<bool>? StreamEnabled { get; set; }

        /// <summary>
        /// A timestamp, in ISO 8601 format, for this stream. Note that this timestamp is not
        /// a unique identifier for the stream on its own. However, the combination of AWS customer ID,
        /// table name and this field is guaranteed to be unique.
        /// It can be used for creating CloudWatch Alarms. Only available when `stream_enabled = true`
        /// </summary>
        [Input("streamLabel")]
        public Input<string>? StreamLabel { get; set; }

        /// <summary>
        /// When an item in the table is modified, StreamViewType determines what information is written to the table's stream. Valid values are `KEYS_ONLY`, `NEW_IMAGE`, `OLD_IMAGE`, `NEW_AND_OLD_IMAGES`.
        /// </summary>
        [Input("streamViewType")]
        public Input<string>? StreamViewType { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;

        /// <summary>
        /// A map of tags to populate on the created table.
        /// </summary>
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        /// <summary>
        /// Defines ttl, has two properties, and can only be specified once:
        /// </summary>
        [Input("ttl")]
        public Input<Inputs.TableTtlGetArgs>? Ttl { get; set; }

        /// <summary>
        /// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("writeCapacity")]
        public Input<int>? WriteCapacity { get; set; }

        public TableState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class TableAttributesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TableAttributesArgs()
        {
        }
    }

    public sealed class TableAttributesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public TableAttributesGetArgs()
        {
        }
    }

    public sealed class TableGlobalSecondaryIndexesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the hash key in the index; must be
        /// defined as an attribute in the resource.
        /// </summary>
        [Input("hashKey", required: true)]
        public Input<string> HashKey { get; set; } = null!;

        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("nonKeyAttributes")]
        private InputList<string>? _nonKeyAttributes;

        /// <summary>
        /// Only required with `INCLUDE` as a
        /// projection type; a list of attributes to project into the index. These
        /// do not need to be defined as attributes on the table.
        /// </summary>
        public InputList<string> NonKeyAttributes
        {
            get => _nonKeyAttributes ?? (_nonKeyAttributes = new InputList<string>());
            set => _nonKeyAttributes = value;
        }

        /// <summary>
        /// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
        /// where `ALL` projects every attribute into the index, `KEYS_ONLY`
        /// projects just the hash and range key into the index, and `INCLUDE`
        /// projects only the keys specified in the _non_key_attributes_
        /// parameter.
        /// </summary>
        [Input("projectionType", required: true)]
        public Input<string> ProjectionType { get; set; } = null!;

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Input("rangeKey")]
        public Input<string>? RangeKey { get; set; }

        /// <summary>
        /// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("readCapacity")]
        public Input<int>? ReadCapacity { get; set; }

        /// <summary>
        /// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("writeCapacity")]
        public Input<int>? WriteCapacity { get; set; }

        public TableGlobalSecondaryIndexesArgs()
        {
        }
    }

    public sealed class TableGlobalSecondaryIndexesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the hash key in the index; must be
        /// defined as an attribute in the resource.
        /// </summary>
        [Input("hashKey", required: true)]
        public Input<string> HashKey { get; set; } = null!;

        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("nonKeyAttributes")]
        private InputList<string>? _nonKeyAttributes;

        /// <summary>
        /// Only required with `INCLUDE` as a
        /// projection type; a list of attributes to project into the index. These
        /// do not need to be defined as attributes on the table.
        /// </summary>
        public InputList<string> NonKeyAttributes
        {
            get => _nonKeyAttributes ?? (_nonKeyAttributes = new InputList<string>());
            set => _nonKeyAttributes = value;
        }

        /// <summary>
        /// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
        /// where `ALL` projects every attribute into the index, `KEYS_ONLY`
        /// projects just the hash and range key into the index, and `INCLUDE`
        /// projects only the keys specified in the _non_key_attributes_
        /// parameter.
        /// </summary>
        [Input("projectionType", required: true)]
        public Input<string> ProjectionType { get; set; } = null!;

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Input("rangeKey")]
        public Input<string>? RangeKey { get; set; }

        /// <summary>
        /// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("readCapacity")]
        public Input<int>? ReadCapacity { get; set; }

        /// <summary>
        /// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        [Input("writeCapacity")]
        public Input<int>? WriteCapacity { get; set; }

        public TableGlobalSecondaryIndexesGetArgs()
        {
        }
    }

    public sealed class TableLocalSecondaryIndexesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("nonKeyAttributes")]
        private InputList<string>? _nonKeyAttributes;

        /// <summary>
        /// Only required with `INCLUDE` as a
        /// projection type; a list of attributes to project into the index. These
        /// do not need to be defined as attributes on the table.
        /// </summary>
        public InputList<string> NonKeyAttributes
        {
            get => _nonKeyAttributes ?? (_nonKeyAttributes = new InputList<string>());
            set => _nonKeyAttributes = value;
        }

        /// <summary>
        /// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
        /// where `ALL` projects every attribute into the index, `KEYS_ONLY`
        /// projects just the hash and range key into the index, and `INCLUDE`
        /// projects only the keys specified in the _non_key_attributes_
        /// parameter.
        /// </summary>
        [Input("projectionType", required: true)]
        public Input<string> ProjectionType { get; set; } = null!;

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Input("rangeKey", required: true)]
        public Input<string> RangeKey { get; set; } = null!;

        public TableLocalSecondaryIndexesArgs()
        {
        }
    }

    public sealed class TableLocalSecondaryIndexesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the index
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("nonKeyAttributes")]
        private InputList<string>? _nonKeyAttributes;

        /// <summary>
        /// Only required with `INCLUDE` as a
        /// projection type; a list of attributes to project into the index. These
        /// do not need to be defined as attributes on the table.
        /// </summary>
        public InputList<string> NonKeyAttributes
        {
            get => _nonKeyAttributes ?? (_nonKeyAttributes = new InputList<string>());
            set => _nonKeyAttributes = value;
        }

        /// <summary>
        /// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
        /// where `ALL` projects every attribute into the index, `KEYS_ONLY`
        /// projects just the hash and range key into the index, and `INCLUDE`
        /// projects only the keys specified in the _non_key_attributes_
        /// parameter.
        /// </summary>
        [Input("projectionType", required: true)]
        public Input<string> ProjectionType { get; set; } = null!;

        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        [Input("rangeKey", required: true)]
        public Input<string> RangeKey { get; set; } = null!;

        public TableLocalSecondaryIndexesGetArgs()
        {
        }
    }

    public sealed class TablePointInTimeRecoveryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public TablePointInTimeRecoveryArgs()
        {
        }
    }

    public sealed class TablePointInTimeRecoveryGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public TablePointInTimeRecoveryGetArgs()
        {
        }
    }

    public sealed class TableServerSideEncryptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The ARN of the CMK that should be used for the AWS KMS encryption.
        /// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        public TableServerSideEncryptionArgs()
        {
        }
    }

    public sealed class TableServerSideEncryptionGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The ARN of the CMK that should be used for the AWS KMS encryption.
        /// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
        /// </summary>
        [Input("kmsKeyArn")]
        public Input<string>? KmsKeyArn { get; set; }

        public TableServerSideEncryptionGetArgs()
        {
        }
    }

    public sealed class TableTtlArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the table attribute to store the TTL timestamp in.
        /// </summary>
        [Input("attributeName", required: true)]
        public Input<string> AttributeName { get; set; } = null!;

        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public TableTtlArgs()
        {
        }
    }

    public sealed class TableTtlGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the table attribute to store the TTL timestamp in.
        /// </summary>
        [Input("attributeName", required: true)]
        public Input<string> AttributeName { get; set; } = null!;

        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        public TableTtlGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class TableAttributes
    {
        /// <summary>
        /// The name of the index
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Attribute type, which must be a scalar type: `S`, `N`, or `B` for (S)tring, (N)umber or (B)inary data
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private TableAttributes(
            string name,
            string type)
        {
            Name = name;
            Type = type;
        }
    }

    [OutputType]
    public sealed class TableGlobalSecondaryIndexes
    {
        /// <summary>
        /// The name of the hash key in the index; must be
        /// defined as an attribute in the resource.
        /// </summary>
        public readonly string HashKey;
        /// <summary>
        /// The name of the index
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Only required with `INCLUDE` as a
        /// projection type; a list of attributes to project into the index. These
        /// do not need to be defined as attributes on the table.
        /// </summary>
        public readonly ImmutableArray<string> NonKeyAttributes;
        /// <summary>
        /// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
        /// where `ALL` projects every attribute into the index, `KEYS_ONLY`
        /// projects just the hash and range key into the index, and `INCLUDE`
        /// projects only the keys specified in the _non_key_attributes_
        /// parameter.
        /// </summary>
        public readonly string ProjectionType;
        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        public readonly string? RangeKey;
        /// <summary>
        /// The number of read units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        public readonly int? ReadCapacity;
        /// <summary>
        /// The number of write units for this index. Must be set if billing_mode is set to PROVISIONED.
        /// </summary>
        public readonly int? WriteCapacity;

        [OutputConstructor]
        private TableGlobalSecondaryIndexes(
            string hashKey,
            string name,
            ImmutableArray<string> nonKeyAttributes,
            string projectionType,
            string? rangeKey,
            int? readCapacity,
            int? writeCapacity)
        {
            HashKey = hashKey;
            Name = name;
            NonKeyAttributes = nonKeyAttributes;
            ProjectionType = projectionType;
            RangeKey = rangeKey;
            ReadCapacity = readCapacity;
            WriteCapacity = writeCapacity;
        }
    }

    [OutputType]
    public sealed class TableLocalSecondaryIndexes
    {
        /// <summary>
        /// The name of the index
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Only required with `INCLUDE` as a
        /// projection type; a list of attributes to project into the index. These
        /// do not need to be defined as attributes on the table.
        /// </summary>
        public readonly ImmutableArray<string> NonKeyAttributes;
        /// <summary>
        /// One of `ALL`, `INCLUDE` or `KEYS_ONLY`
        /// where `ALL` projects every attribute into the index, `KEYS_ONLY`
        /// projects just the hash and range key into the index, and `INCLUDE`
        /// projects only the keys specified in the _non_key_attributes_
        /// parameter.
        /// </summary>
        public readonly string ProjectionType;
        /// <summary>
        /// The name of the range key; must be defined
        /// </summary>
        public readonly string RangeKey;

        [OutputConstructor]
        private TableLocalSecondaryIndexes(
            string name,
            ImmutableArray<string> nonKeyAttributes,
            string projectionType,
            string rangeKey)
        {
            Name = name;
            NonKeyAttributes = nonKeyAttributes;
            ProjectionType = projectionType;
            RangeKey = rangeKey;
        }
    }

    [OutputType]
    public sealed class TablePointInTimeRecovery
    {
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        public readonly bool Enabled;

        [OutputConstructor]
        private TablePointInTimeRecovery(bool enabled)
        {
            Enabled = enabled;
        }
    }

    [OutputType]
    public sealed class TableServerSideEncryption
    {
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The ARN of the CMK that should be used for the AWS KMS encryption.
        /// This attribute should only be specified if the key is different from the default DynamoDB CMK, `alias/aws/dynamodb`.
        /// </summary>
        public readonly string KmsKeyArn;

        [OutputConstructor]
        private TableServerSideEncryption(
            bool enabled,
            string kmsKeyArn)
        {
            Enabled = enabled;
            KmsKeyArn = kmsKeyArn;
        }
    }

    [OutputType]
    public sealed class TableTtl
    {
        /// <summary>
        /// The name of the table attribute to store the TTL timestamp in.
        /// </summary>
        public readonly string AttributeName;
        /// <summary>
        /// Whether to enable point-in-time recovery - note that it can take up to 10 minutes to enable for new tables. If the `point_in_time_recovery` block is not provided then this defaults to `false`.
        /// </summary>
        public readonly bool? Enabled;

        [OutputConstructor]
        private TableTtl(
            string attributeName,
            bool? enabled)
        {
            AttributeName = attributeName;
            Enabled = enabled;
        }
    }
    }
}
