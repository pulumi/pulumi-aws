// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.CodeDeploy
{
    /// <summary>
    /// Provides a CodeDeploy Deployment Group for a CodeDeploy Application
    /// 
    /// &gt; **NOTE on blue/green deployments:** When using `green_fleet_provisioning_option` with the `COPY_AUTO_SCALING_GROUP` action, CodeDeploy will create a new ASG with a different name. This ASG is _not_ managed by this provider and will conflict with existing configuration and state. You may want to use a different approach to managing deployments that involve multiple ASG, such as `DISCOVER_EXISTING` with separate blue and green ASG.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/codedeploy_deployment_group.html.markdown.
    /// </summary>
    public partial class DeploymentGroup : Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration block of alarms associated with the deployment group (documented below).
        /// </summary>
        [Output("alarmConfiguration")]
        public Output<Outputs.DeploymentGroupAlarmConfiguration?> AlarmConfiguration { get; private set; } = null!;

        /// <summary>
        /// The name of the application.
        /// </summary>
        [Output("appName")]
        public Output<string> AppName { get; private set; } = null!;

        /// <summary>
        /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
        /// </summary>
        [Output("autoRollbackConfiguration")]
        public Output<Outputs.DeploymentGroupAutoRollbackConfiguration?> AutoRollbackConfiguration { get; private set; } = null!;

        /// <summary>
        /// Autoscaling groups associated with the deployment group.
        /// </summary>
        [Output("autoscalingGroups")]
        public Output<ImmutableArray<string>> AutoscalingGroups { get; private set; } = null!;

        /// <summary>
        /// Configuration block of the blue/green deployment options for a deployment group (documented below).
        /// </summary>
        [Output("blueGreenDeploymentConfig")]
        public Output<Outputs.DeploymentGroupBlueGreenDeploymentConfig> BlueGreenDeploymentConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
        /// </summary>
        [Output("deploymentConfigName")]
        public Output<string?> DeploymentConfigName { get; private set; } = null!;

        /// <summary>
        /// The name of the deployment group.
        /// </summary>
        [Output("deploymentGroupName")]
        public Output<string> DeploymentGroupName { get; private set; } = null!;

        /// <summary>
        /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
        /// </summary>
        [Output("deploymentStyle")]
        public Output<Outputs.DeploymentGroupDeploymentStyle?> DeploymentStyle { get; private set; } = null!;

        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        [Output("ec2TagFilters")]
        public Output<ImmutableArray<Outputs.DeploymentGroupEc2TagFilters>> Ec2TagFilters { get; private set; } = null!;

        /// <summary>
        /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
        /// </summary>
        [Output("ec2TagSets")]
        public Output<ImmutableArray<Outputs.DeploymentGroupEc2TagSets>> Ec2TagSets { get; private set; } = null!;

        /// <summary>
        /// Configuration block(s) of the ECS services for a deployment group (documented below).
        /// </summary>
        [Output("ecsService")]
        public Output<Outputs.DeploymentGroupEcsService?> EcsService { get; private set; } = null!;

        /// <summary>
        /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
        /// </summary>
        [Output("loadBalancerInfo")]
        public Output<Outputs.DeploymentGroupLoadBalancerInfo?> LoadBalancerInfo { get; private set; } = null!;

        /// <summary>
        /// On premise tag filters associated with the group. See the AWS docs for details.
        /// </summary>
        [Output("onPremisesInstanceTagFilters")]
        public Output<ImmutableArray<Outputs.DeploymentGroupOnPremisesInstanceTagFilters>> OnPremisesInstanceTagFilters { get; private set; } = null!;

        /// <summary>
        /// The service role ARN that allows deployments.
        /// </summary>
        [Output("serviceRoleArn")]
        public Output<string> ServiceRoleArn { get; private set; } = null!;

        /// <summary>
        /// Configuration block(s) of the triggers for the deployment group (documented below).
        /// </summary>
        [Output("triggerConfigurations")]
        public Output<ImmutableArray<Outputs.DeploymentGroupTriggerConfigurations>> TriggerConfigurations { get; private set; } = null!;


        /// <summary>
        /// Create a DeploymentGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DeploymentGroup(string name, DeploymentGroupArgs args, CustomResourceOptions? options = null)
            : base("aws:codedeploy/deploymentGroup:DeploymentGroup", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private DeploymentGroup(string name, Input<string> id, DeploymentGroupState? state = null, CustomResourceOptions? options = null)
            : base("aws:codedeploy/deploymentGroup:DeploymentGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DeploymentGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DeploymentGroup Get(string name, Input<string> id, DeploymentGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new DeploymentGroup(name, id, state, options);
        }
    }

    public sealed class DeploymentGroupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block of alarms associated with the deployment group (documented below).
        /// </summary>
        [Input("alarmConfiguration")]
        public Input<Inputs.DeploymentGroupAlarmConfigurationArgs>? AlarmConfiguration { get; set; }

        /// <summary>
        /// The name of the application.
        /// </summary>
        [Input("appName", required: true)]
        public Input<string> AppName { get; set; } = null!;

        /// <summary>
        /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
        /// </summary>
        [Input("autoRollbackConfiguration")]
        public Input<Inputs.DeploymentGroupAutoRollbackConfigurationArgs>? AutoRollbackConfiguration { get; set; }

        [Input("autoscalingGroups")]
        private InputList<string>? _autoscalingGroups;

        /// <summary>
        /// Autoscaling groups associated with the deployment group.
        /// </summary>
        public InputList<string> AutoscalingGroups
        {
            get => _autoscalingGroups ?? (_autoscalingGroups = new InputList<string>());
            set => _autoscalingGroups = value;
        }

        /// <summary>
        /// Configuration block of the blue/green deployment options for a deployment group (documented below).
        /// </summary>
        [Input("blueGreenDeploymentConfig")]
        public Input<Inputs.DeploymentGroupBlueGreenDeploymentConfigArgs>? BlueGreenDeploymentConfig { get; set; }

        /// <summary>
        /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
        /// </summary>
        [Input("deploymentConfigName")]
        public Input<string>? DeploymentConfigName { get; set; }

        /// <summary>
        /// The name of the deployment group.
        /// </summary>
        [Input("deploymentGroupName", required: true)]
        public Input<string> DeploymentGroupName { get; set; } = null!;

        /// <summary>
        /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
        /// </summary>
        [Input("deploymentStyle")]
        public Input<Inputs.DeploymentGroupDeploymentStyleArgs>? DeploymentStyle { get; set; }

        [Input("ec2TagFilters")]
        private InputList<Inputs.DeploymentGroupEc2TagFiltersArgs>? _ec2TagFilters;

        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        public InputList<Inputs.DeploymentGroupEc2TagFiltersArgs> Ec2TagFilters
        {
            get => _ec2TagFilters ?? (_ec2TagFilters = new InputList<Inputs.DeploymentGroupEc2TagFiltersArgs>());
            set => _ec2TagFilters = value;
        }

        [Input("ec2TagSets")]
        private InputList<Inputs.DeploymentGroupEc2TagSetsArgs>? _ec2TagSets;

        /// <summary>
        /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
        /// </summary>
        public InputList<Inputs.DeploymentGroupEc2TagSetsArgs> Ec2TagSets
        {
            get => _ec2TagSets ?? (_ec2TagSets = new InputList<Inputs.DeploymentGroupEc2TagSetsArgs>());
            set => _ec2TagSets = value;
        }

        /// <summary>
        /// Configuration block(s) of the ECS services for a deployment group (documented below).
        /// </summary>
        [Input("ecsService")]
        public Input<Inputs.DeploymentGroupEcsServiceArgs>? EcsService { get; set; }

        /// <summary>
        /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
        /// </summary>
        [Input("loadBalancerInfo")]
        public Input<Inputs.DeploymentGroupLoadBalancerInfoArgs>? LoadBalancerInfo { get; set; }

        [Input("onPremisesInstanceTagFilters")]
        private InputList<Inputs.DeploymentGroupOnPremisesInstanceTagFiltersArgs>? _onPremisesInstanceTagFilters;

        /// <summary>
        /// On premise tag filters associated with the group. See the AWS docs for details.
        /// </summary>
        public InputList<Inputs.DeploymentGroupOnPremisesInstanceTagFiltersArgs> OnPremisesInstanceTagFilters
        {
            get => _onPremisesInstanceTagFilters ?? (_onPremisesInstanceTagFilters = new InputList<Inputs.DeploymentGroupOnPremisesInstanceTagFiltersArgs>());
            set => _onPremisesInstanceTagFilters = value;
        }

        /// <summary>
        /// The service role ARN that allows deployments.
        /// </summary>
        [Input("serviceRoleArn", required: true)]
        public Input<string> ServiceRoleArn { get; set; } = null!;

        [Input("triggerConfigurations")]
        private InputList<Inputs.DeploymentGroupTriggerConfigurationsArgs>? _triggerConfigurations;

        /// <summary>
        /// Configuration block(s) of the triggers for the deployment group (documented below).
        /// </summary>
        public InputList<Inputs.DeploymentGroupTriggerConfigurationsArgs> TriggerConfigurations
        {
            get => _triggerConfigurations ?? (_triggerConfigurations = new InputList<Inputs.DeploymentGroupTriggerConfigurationsArgs>());
            set => _triggerConfigurations = value;
        }

        public DeploymentGroupArgs()
        {
        }
    }

    public sealed class DeploymentGroupState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block of alarms associated with the deployment group (documented below).
        /// </summary>
        [Input("alarmConfiguration")]
        public Input<Inputs.DeploymentGroupAlarmConfigurationGetArgs>? AlarmConfiguration { get; set; }

        /// <summary>
        /// The name of the application.
        /// </summary>
        [Input("appName")]
        public Input<string>? AppName { get; set; }

        /// <summary>
        /// Configuration block of the automatic rollback configuration associated with the deployment group (documented below).
        /// </summary>
        [Input("autoRollbackConfiguration")]
        public Input<Inputs.DeploymentGroupAutoRollbackConfigurationGetArgs>? AutoRollbackConfiguration { get; set; }

        [Input("autoscalingGroups")]
        private InputList<string>? _autoscalingGroups;

        /// <summary>
        /// Autoscaling groups associated with the deployment group.
        /// </summary>
        public InputList<string> AutoscalingGroups
        {
            get => _autoscalingGroups ?? (_autoscalingGroups = new InputList<string>());
            set => _autoscalingGroups = value;
        }

        /// <summary>
        /// Configuration block of the blue/green deployment options for a deployment group (documented below).
        /// </summary>
        [Input("blueGreenDeploymentConfig")]
        public Input<Inputs.DeploymentGroupBlueGreenDeploymentConfigGetArgs>? BlueGreenDeploymentConfig { get; set; }

        /// <summary>
        /// The name of the group's deployment config. The default is "CodeDeployDefault.OneAtATime".
        /// </summary>
        [Input("deploymentConfigName")]
        public Input<string>? DeploymentConfigName { get; set; }

        /// <summary>
        /// The name of the deployment group.
        /// </summary>
        [Input("deploymentGroupName")]
        public Input<string>? DeploymentGroupName { get; set; }

        /// <summary>
        /// Configuration block of the type of deployment, either in-place or blue/green, you want to run and whether to route deployment traffic behind a load balancer (documented below).
        /// </summary>
        [Input("deploymentStyle")]
        public Input<Inputs.DeploymentGroupDeploymentStyleGetArgs>? DeploymentStyle { get; set; }

        [Input("ec2TagFilters")]
        private InputList<Inputs.DeploymentGroupEc2TagFiltersGetArgs>? _ec2TagFilters;

        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        public InputList<Inputs.DeploymentGroupEc2TagFiltersGetArgs> Ec2TagFilters
        {
            get => _ec2TagFilters ?? (_ec2TagFilters = new InputList<Inputs.DeploymentGroupEc2TagFiltersGetArgs>());
            set => _ec2TagFilters = value;
        }

        [Input("ec2TagSets")]
        private InputList<Inputs.DeploymentGroupEc2TagSetsGetArgs>? _ec2TagSets;

        /// <summary>
        /// Configuration block(s) of Tag filters associated with the deployment group, which are also referred to as tag groups (documented below). See the AWS docs for details.
        /// </summary>
        public InputList<Inputs.DeploymentGroupEc2TagSetsGetArgs> Ec2TagSets
        {
            get => _ec2TagSets ?? (_ec2TagSets = new InputList<Inputs.DeploymentGroupEc2TagSetsGetArgs>());
            set => _ec2TagSets = value;
        }

        /// <summary>
        /// Configuration block(s) of the ECS services for a deployment group (documented below).
        /// </summary>
        [Input("ecsService")]
        public Input<Inputs.DeploymentGroupEcsServiceGetArgs>? EcsService { get; set; }

        /// <summary>
        /// Single configuration block of the load balancer to use in a blue/green deployment (documented below).
        /// </summary>
        [Input("loadBalancerInfo")]
        public Input<Inputs.DeploymentGroupLoadBalancerInfoGetArgs>? LoadBalancerInfo { get; set; }

        [Input("onPremisesInstanceTagFilters")]
        private InputList<Inputs.DeploymentGroupOnPremisesInstanceTagFiltersGetArgs>? _onPremisesInstanceTagFilters;

        /// <summary>
        /// On premise tag filters associated with the group. See the AWS docs for details.
        /// </summary>
        public InputList<Inputs.DeploymentGroupOnPremisesInstanceTagFiltersGetArgs> OnPremisesInstanceTagFilters
        {
            get => _onPremisesInstanceTagFilters ?? (_onPremisesInstanceTagFilters = new InputList<Inputs.DeploymentGroupOnPremisesInstanceTagFiltersGetArgs>());
            set => _onPremisesInstanceTagFilters = value;
        }

        /// <summary>
        /// The service role ARN that allows deployments.
        /// </summary>
        [Input("serviceRoleArn")]
        public Input<string>? ServiceRoleArn { get; set; }

        [Input("triggerConfigurations")]
        private InputList<Inputs.DeploymentGroupTriggerConfigurationsGetArgs>? _triggerConfigurations;

        /// <summary>
        /// Configuration block(s) of the triggers for the deployment group (documented below).
        /// </summary>
        public InputList<Inputs.DeploymentGroupTriggerConfigurationsGetArgs> TriggerConfigurations
        {
            get => _triggerConfigurations ?? (_triggerConfigurations = new InputList<Inputs.DeploymentGroupTriggerConfigurationsGetArgs>());
            set => _triggerConfigurations = value;
        }

        public DeploymentGroupState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class DeploymentGroupAlarmConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("alarms")]
        private InputList<string>? _alarms;

        /// <summary>
        /// A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
        /// </summary>
        public InputList<string> Alarms
        {
            get => _alarms ?? (_alarms = new InputList<string>());
            set => _alarms = value;
        }

        /// <summary>
        /// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
        /// * `true`: The deployment will proceed even if alarm status information can't be retrieved.
        /// * `false`: The deployment will stop if alarm status information can't be retrieved.
        /// </summary>
        [Input("ignorePollAlarmFailure")]
        public Input<bool>? IgnorePollAlarmFailure { get; set; }

        public DeploymentGroupAlarmConfigurationArgs()
        {
        }
    }

    public sealed class DeploymentGroupAlarmConfigurationGetArgs : Pulumi.ResourceArgs
    {
        [Input("alarms")]
        private InputList<string>? _alarms;

        /// <summary>
        /// A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
        /// </summary>
        public InputList<string> Alarms
        {
            get => _alarms ?? (_alarms = new InputList<string>());
            set => _alarms = value;
        }

        /// <summary>
        /// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
        /// * `true`: The deployment will proceed even if alarm status information can't be retrieved.
        /// * `false`: The deployment will stop if alarm status information can't be retrieved.
        /// </summary>
        [Input("ignorePollAlarmFailure")]
        public Input<bool>? IgnorePollAlarmFailure { get; set; }

        public DeploymentGroupAlarmConfigurationGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupAutoRollbackConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("events")]
        private InputList<string>? _events;

        /// <summary>
        /// The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        public DeploymentGroupAutoRollbackConfigurationArgs()
        {
        }
    }

    public sealed class DeploymentGroupAutoRollbackConfigurationGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("events")]
        private InputList<string>? _events;

        /// <summary>
        /// The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
        /// </summary>
        public InputList<string> Events
        {
            get => _events ?? (_events = new InputList<string>());
            set => _events = value;
        }

        public DeploymentGroupAutoRollbackConfigurationGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
        /// </summary>
        [Input("deploymentReadyOption")]
        public Input<DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs>? DeploymentReadyOption { get; set; }

        /// <summary>
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
        /// </summary>
        [Input("greenFleetProvisioningOption")]
        public Input<DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs>? GreenFleetProvisioningOption { get; set; }

        /// <summary>
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
        /// </summary>
        [Input("terminateBlueInstancesOnDeploymentSuccess")]
        public Input<DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs>? TerminateBlueInstancesOnDeploymentSuccess { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        /// * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
        /// * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
        /// </summary>
        [Input("actionOnTimeout")]
        public Input<string>? ActionOnTimeout { get; set; }

        /// <summary>
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
        /// </summary>
        [Input("waitTimeInMinutes")]
        public Input<int>? WaitTimeInMinutes { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        /// * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
        /// * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
        /// </summary>
        [Input("actionOnTimeout")]
        public Input<string>? ActionOnTimeout { get; set; }

        /// <summary>
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
        /// </summary>
        [Input("waitTimeInMinutes")]
        public Input<int>? WaitTimeInMinutes { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
        /// </summary>
        [Input("deploymentReadyOption")]
        public Input<DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOptionGetArgs>? DeploymentReadyOption { get; set; }

        /// <summary>
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
        /// </summary>
        [Input("greenFleetProvisioningOption")]
        public Input<DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionGetArgs>? GreenFleetProvisioningOption { get; set; }

        /// <summary>
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
        /// </summary>
        [Input("terminateBlueInstancesOnDeploymentSuccess")]
        public Input<DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessGetArgs>? TerminateBlueInstancesOnDeploymentSuccess { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        /// * `TERMINATE`: Instances are terminated after a specified wait time.
        /// * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        /// * `TERMINATE`: Instances are terminated after a specified wait time.
        /// * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOptionGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        /// * `TERMINATE`: Instances are terminated after a specified wait time.
        /// * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        /// </summary>
        [Input("terminationWaitTimeInMinutes")]
        public Input<int>? TerminationWaitTimeInMinutes { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessArgs()
        {
        }
    }

    public sealed class DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        /// * `TERMINATE`: Instances are terminated after a specified wait time.
        /// * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        /// </summary>
        [Input("terminationWaitTimeInMinutes")]
        public Input<int>? TerminationWaitTimeInMinutes { get; set; }

        public DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccessGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupDeploymentStyleArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
        /// </summary>
        [Input("deploymentOption")]
        public Input<string>? DeploymentOption { get; set; }

        /// <summary>
        /// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        public DeploymentGroupDeploymentStyleArgs()
        {
        }
    }

    public sealed class DeploymentGroupDeploymentStyleGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
        /// </summary>
        [Input("deploymentOption")]
        public Input<string>? DeploymentOption { get; set; }

        /// <summary>
        /// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
        /// </summary>
        [Input("deploymentType")]
        public Input<string>? DeploymentType { get; set; }

        public DeploymentGroupDeploymentStyleGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupEc2TagFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DeploymentGroupEc2TagFiltersArgs()
        {
        }
    }

    public sealed class DeploymentGroupEc2TagFiltersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DeploymentGroupEc2TagFiltersGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupEc2TagSetsArgs : Pulumi.ResourceArgs
    {
        [Input("ec2TagFilters")]
        private InputList<DeploymentGroupEc2TagSetsEc2TagFiltersArgs>? _ec2TagFilters;

        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        public InputList<DeploymentGroupEc2TagSetsEc2TagFiltersArgs> Ec2TagFilters
        {
            get => _ec2TagFilters ?? (_ec2TagFilters = new InputList<DeploymentGroupEc2TagSetsEc2TagFiltersArgs>());
            set => _ec2TagFilters = value;
        }

        public DeploymentGroupEc2TagSetsArgs()
        {
        }
    }

    public sealed class DeploymentGroupEc2TagSetsEc2TagFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DeploymentGroupEc2TagSetsEc2TagFiltersArgs()
        {
        }
    }

    public sealed class DeploymentGroupEc2TagSetsEc2TagFiltersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DeploymentGroupEc2TagSetsEc2TagFiltersGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupEc2TagSetsGetArgs : Pulumi.ResourceArgs
    {
        [Input("ec2TagFilters")]
        private InputList<DeploymentGroupEc2TagSetsEc2TagFiltersGetArgs>? _ec2TagFilters;

        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        public InputList<DeploymentGroupEc2TagSetsEc2TagFiltersGetArgs> Ec2TagFilters
        {
            get => _ec2TagFilters ?? (_ec2TagFilters = new InputList<DeploymentGroupEc2TagSetsEc2TagFiltersGetArgs>());
            set => _ec2TagFilters = value;
        }

        public DeploymentGroupEc2TagSetsGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupEcsServiceArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the ECS cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the ECS service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public DeploymentGroupEcsServiceArgs()
        {
        }
    }

    public sealed class DeploymentGroupEcsServiceGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the ECS cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// The name of the ECS service.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public DeploymentGroupEcsServiceGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoArgs : Pulumi.ResourceArgs
    {
        [Input("elbInfos")]
        private InputList<DeploymentGroupLoadBalancerInfoElbInfosArgs>? _elbInfos;

        /// <summary>
        /// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
        /// </summary>
        public InputList<DeploymentGroupLoadBalancerInfoElbInfosArgs> ElbInfos
        {
            get => _elbInfos ?? (_elbInfos = new InputList<DeploymentGroupLoadBalancerInfoElbInfosArgs>());
            set => _elbInfos = value;
        }

        [Input("targetGroupInfos")]
        private InputList<DeploymentGroupLoadBalancerInfoTargetGroupInfosArgs>? _targetGroupInfos;

        /// <summary>
        /// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
        /// </summary>
        public InputList<DeploymentGroupLoadBalancerInfoTargetGroupInfosArgs> TargetGroupInfos
        {
            get => _targetGroupInfos ?? (_targetGroupInfos = new InputList<DeploymentGroupLoadBalancerInfoTargetGroupInfosArgs>());
            set => _targetGroupInfos = value;
        }

        /// <summary>
        /// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
        /// </summary>
        [Input("targetGroupPairInfo")]
        public Input<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs>? TargetGroupPairInfo { get; set; }

        public DeploymentGroupLoadBalancerInfoArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoElbInfosArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DeploymentGroupLoadBalancerInfoElbInfosArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoElbInfosGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DeploymentGroupLoadBalancerInfoElbInfosGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoGetArgs : Pulumi.ResourceArgs
    {
        [Input("elbInfos")]
        private InputList<DeploymentGroupLoadBalancerInfoElbInfosGetArgs>? _elbInfos;

        /// <summary>
        /// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
        /// </summary>
        public InputList<DeploymentGroupLoadBalancerInfoElbInfosGetArgs> ElbInfos
        {
            get => _elbInfos ?? (_elbInfos = new InputList<DeploymentGroupLoadBalancerInfoElbInfosGetArgs>());
            set => _elbInfos = value;
        }

        [Input("targetGroupInfos")]
        private InputList<DeploymentGroupLoadBalancerInfoTargetGroupInfosGetArgs>? _targetGroupInfos;

        /// <summary>
        /// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
        /// </summary>
        public InputList<DeploymentGroupLoadBalancerInfoTargetGroupInfosGetArgs> TargetGroupInfos
        {
            get => _targetGroupInfos ?? (_targetGroupInfos = new InputList<DeploymentGroupLoadBalancerInfoTargetGroupInfosGetArgs>());
            set => _targetGroupInfos = value;
        }

        /// <summary>
        /// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
        /// </summary>
        [Input("targetGroupPairInfo")]
        public Input<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoGetArgs>? TargetGroupPairInfo { get; set; }

        public DeploymentGroupLoadBalancerInfoGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupInfosArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DeploymentGroupLoadBalancerInfoTargetGroupInfosArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupInfosGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public DeploymentGroupLoadBalancerInfoTargetGroupInfosGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for the production traffic route (documented below).
        /// </summary>
        [Input("prodTrafficRoute", required: true)]
        public Input<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs> ProdTrafficRoute { get; set; } = null!;

        [Input("targetGroups", required: true)]
        private InputList<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsArgs>? _targetGroups;

        /// <summary>
        /// Configuration blocks for a target group within a target group pair (documented below).
        /// </summary>
        public InputList<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsArgs> TargetGroups
        {
            get => _targetGroups ?? (_targetGroups = new InputList<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsArgs>());
            set => _targetGroups = value;
        }

        /// <summary>
        /// Configuration block for the test traffic route (documented below).
        /// </summary>
        [Input("testTrafficRoute")]
        public Input<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs>? TestTrafficRoute { get; set; }

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration block for the production traffic route (documented below).
        /// </summary>
        [Input("prodTrafficRoute", required: true)]
        public Input<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteGetArgs> ProdTrafficRoute { get; set; } = null!;

        [Input("targetGroups", required: true)]
        private InputList<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsGetArgs>? _targetGroups;

        /// <summary>
        /// Configuration blocks for a target group within a target group pair (documented below).
        /// </summary>
        public InputList<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsGetArgs> TargetGroups
        {
            get => _targetGroups ?? (_targetGroups = new InputList<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsGetArgs>());
            set => _targetGroups = value;
        }

        /// <summary>
        /// Configuration block for the test traffic route (documented below).
        /// </summary>
        [Input("testTrafficRoute")]
        public Input<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteGetArgs>? TestTrafficRoute { get; set; }

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs : Pulumi.ResourceArgs
    {
        [Input("listenerArns", required: true)]
        private InputList<string>? _listenerArns;

        /// <summary>
        /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
        /// </summary>
        public InputList<string> ListenerArns
        {
            get => _listenerArns ?? (_listenerArns = new InputList<string>());
            set => _listenerArns = value;
        }

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteGetArgs : Pulumi.ResourceArgs
    {
        [Input("listenerArns", required: true)]
        private InputList<string>? _listenerArns;

        /// <summary>
        /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
        /// </summary>
        public InputList<string> ListenerArns
        {
            get => _listenerArns ?? (_listenerArns = new InputList<string>());
            set => _listenerArns = value;
        }

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRouteGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroupsGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs : Pulumi.ResourceArgs
    {
        [Input("listenerArns", required: true)]
        private InputList<string>? _listenerArns;

        /// <summary>
        /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
        /// </summary>
        public InputList<string> ListenerArns
        {
            get => _listenerArns ?? (_listenerArns = new InputList<string>());
            set => _listenerArns = value;
        }

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteArgs()
        {
        }
    }

    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteGetArgs : Pulumi.ResourceArgs
    {
        [Input("listenerArns", required: true)]
        private InputList<string>? _listenerArns;

        /// <summary>
        /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
        /// </summary>
        public InputList<string> ListenerArns
        {
            get => _listenerArns ?? (_listenerArns = new InputList<string>());
            set => _listenerArns = value;
        }

        public DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRouteGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupOnPremisesInstanceTagFiltersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DeploymentGroupOnPremisesInstanceTagFiltersArgs()
        {
        }
    }

    public sealed class DeploymentGroupOnPremisesInstanceTagFiltersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public DeploymentGroupOnPremisesInstanceTagFiltersGetArgs()
        {
        }
    }

    public sealed class DeploymentGroupTriggerConfigurationsArgs : Pulumi.ResourceArgs
    {
        [Input("triggerEvents", required: true)]
        private InputList<string>? _triggerEvents;

        /// <summary>
        /// The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation][1] for all possible values.
        /// </summary>
        public InputList<string> TriggerEvents
        {
            get => _triggerEvents ?? (_triggerEvents = new InputList<string>());
            set => _triggerEvents = value;
        }

        /// <summary>
        /// The name of the notification trigger.
        /// </summary>
        [Input("triggerName", required: true)]
        public Input<string> TriggerName { get; set; } = null!;

        /// <summary>
        /// The ARN of the SNS topic through which notifications are sent.
        /// </summary>
        [Input("triggerTargetArn", required: true)]
        public Input<string> TriggerTargetArn { get; set; } = null!;

        public DeploymentGroupTriggerConfigurationsArgs()
        {
        }
    }

    public sealed class DeploymentGroupTriggerConfigurationsGetArgs : Pulumi.ResourceArgs
    {
        [Input("triggerEvents", required: true)]
        private InputList<string>? _triggerEvents;

        /// <summary>
        /// The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation][1] for all possible values.
        /// </summary>
        public InputList<string> TriggerEvents
        {
            get => _triggerEvents ?? (_triggerEvents = new InputList<string>());
            set => _triggerEvents = value;
        }

        /// <summary>
        /// The name of the notification trigger.
        /// </summary>
        [Input("triggerName", required: true)]
        public Input<string> TriggerName { get; set; } = null!;

        /// <summary>
        /// The ARN of the SNS topic through which notifications are sent.
        /// </summary>
        [Input("triggerTargetArn", required: true)]
        public Input<string> TriggerTargetArn { get; set; } = null!;

        public DeploymentGroupTriggerConfigurationsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class DeploymentGroupAlarmConfiguration
    {
        /// <summary>
        /// A list of alarms configured for the deployment group. _A maximum of 10 alarms can be added to a deployment group_.
        /// </summary>
        public readonly ImmutableArray<string> Alarms;
        /// <summary>
        /// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from CloudWatch. The default value is `false`.
        /// * `true`: The deployment will proceed even if alarm status information can't be retrieved.
        /// * `false`: The deployment will stop if alarm status information can't be retrieved.
        /// </summary>
        public readonly bool? IgnorePollAlarmFailure;

        [OutputConstructor]
        private DeploymentGroupAlarmConfiguration(
            ImmutableArray<string> alarms,
            bool? enabled,
            bool? ignorePollAlarmFailure)
        {
            Alarms = alarms;
            Enabled = enabled;
            IgnorePollAlarmFailure = ignorePollAlarmFailure;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupAutoRollbackConfiguration
    {
        /// <summary>
        /// Indicates whether a defined automatic rollback configuration is currently enabled for this Deployment Group. If you enable automatic rollback, you must specify at least one event type.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// The event type or types that trigger a rollback. Supported types are `DEPLOYMENT_FAILURE` and `DEPLOYMENT_STOP_ON_ALARM`.
        /// </summary>
        public readonly ImmutableArray<string> Events;

        [OutputConstructor]
        private DeploymentGroupAutoRollbackConfiguration(
            bool? enabled,
            ImmutableArray<string> events)
        {
            Enabled = enabled;
            Events = events;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupBlueGreenDeploymentConfig
    {
        /// <summary>
        /// Information about the action to take when newly provisioned instances are ready to receive traffic in a blue/green deployment (documented below).
        /// </summary>
        public readonly DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption? DeploymentReadyOption;
        /// <summary>
        /// Information about how instances are provisioned for a replacement environment in a blue/green deployment (documented below).
        /// </summary>
        public readonly DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption GreenFleetProvisioningOption;
        /// <summary>
        /// Information about whether to terminate instances in the original fleet during a blue/green deployment (documented below).
        /// </summary>
        public readonly DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess? TerminateBlueInstancesOnDeploymentSuccess;

        [OutputConstructor]
        private DeploymentGroupBlueGreenDeploymentConfig(
            DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption? deploymentReadyOption,
            DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption greenFleetProvisioningOption,
            DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess? terminateBlueInstancesOnDeploymentSuccess)
        {
            DeploymentReadyOption = deploymentReadyOption;
            GreenFleetProvisioningOption = greenFleetProvisioningOption;
            TerminateBlueInstancesOnDeploymentSuccess = terminateBlueInstancesOnDeploymentSuccess;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption
    {
        /// <summary>
        /// When to reroute traffic from an original environment to a replacement environment in a blue/green deployment.
        /// * `CONTINUE_DEPLOYMENT`: Register new instances with the load balancer immediately after the new application revision is installed on the instances in the replacement environment.
        /// * `STOP_DEPLOYMENT`: Do not register new instances with load balancer unless traffic is rerouted manually. If traffic is not rerouted manually before the end of the specified wait period, the deployment status is changed to Stopped.
        /// </summary>
        public readonly string? ActionOnTimeout;
        /// <summary>
        /// The number of minutes to wait before the status of a blue/green deployment changed to Stopped if rerouting is not started manually. Applies only to the `STOP_DEPLOYMENT` option for `action_on_timeout`.
        /// </summary>
        public readonly int? WaitTimeInMinutes;

        [OutputConstructor]
        private DeploymentGroupBlueGreenDeploymentConfigDeploymentReadyOption(
            string? actionOnTimeout,
            int? waitTimeInMinutes)
        {
            ActionOnTimeout = actionOnTimeout;
            WaitTimeInMinutes = waitTimeInMinutes;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption
    {
        /// <summary>
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        /// * `TERMINATE`: Instances are terminated after a specified wait time.
        /// * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        /// </summary>
        public readonly string? Action;

        [OutputConstructor]
        private DeploymentGroupBlueGreenDeploymentConfigGreenFleetProvisioningOption(string? action)
        {
            Action = action;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess
    {
        /// <summary>
        /// The action to take on instances in the original environment after a successful blue/green deployment.
        /// * `TERMINATE`: Instances are terminated after a specified wait time.
        /// * `KEEP_ALIVE`: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// The number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.
        /// </summary>
        public readonly int? TerminationWaitTimeInMinutes;

        [OutputConstructor]
        private DeploymentGroupBlueGreenDeploymentConfigTerminateBlueInstancesOnDeploymentSuccess(
            string? action,
            int? terminationWaitTimeInMinutes)
        {
            Action = action;
            TerminationWaitTimeInMinutes = terminationWaitTimeInMinutes;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupDeploymentStyle
    {
        /// <summary>
        /// Indicates whether to route deployment traffic behind a load balancer. Valid Values are `WITH_TRAFFIC_CONTROL` or `WITHOUT_TRAFFIC_CONTROL`. Default is `WITHOUT_TRAFFIC_CONTROL`.
        /// </summary>
        public readonly string? DeploymentOption;
        /// <summary>
        /// Indicates whether to run an in-place deployment or a blue/green deployment. Valid Values are `IN_PLACE` or `BLUE_GREEN`. Default is `IN_PLACE`.
        /// </summary>
        public readonly string? DeploymentType;

        [OutputConstructor]
        private DeploymentGroupDeploymentStyle(
            string? deploymentOption,
            string? deploymentType)
        {
            DeploymentOption = deploymentOption;
            DeploymentType = deploymentType;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupEc2TagFilters
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        public readonly string? Key;
        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        public readonly string? Value;

        [OutputConstructor]
        private DeploymentGroupEc2TagFilters(
            string? key,
            string? type,
            string? value)
        {
            Key = key;
            Type = type;
            Value = value;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupEc2TagSets
    {
        /// <summary>
        /// Tag filters associated with the deployment group. See the AWS docs for details.
        /// </summary>
        public readonly ImmutableArray<DeploymentGroupEc2TagSetsEc2TagFilters> Ec2TagFilters;

        [OutputConstructor]
        private DeploymentGroupEc2TagSets(ImmutableArray<DeploymentGroupEc2TagSetsEc2TagFilters> ec2TagFilters)
        {
            Ec2TagFilters = ec2TagFilters;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupEc2TagSetsEc2TagFilters
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        public readonly string? Key;
        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        public readonly string? Value;

        [OutputConstructor]
        private DeploymentGroupEc2TagSetsEc2TagFilters(
            string? key,
            string? type,
            string? value)
        {
            Key = key;
            Type = type;
            Value = value;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupEcsService
    {
        /// <summary>
        /// The name of the ECS cluster.
        /// </summary>
        public readonly string ClusterName;
        /// <summary>
        /// The name of the ECS service.
        /// </summary>
        public readonly string ServiceName;

        [OutputConstructor]
        private DeploymentGroupEcsService(
            string clusterName,
            string serviceName)
        {
            ClusterName = clusterName;
            ServiceName = serviceName;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfo
    {
        /// <summary>
        /// The Classic Elastic Load Balancer to use in a deployment. Conflicts with `target_group_info` and `target_group_pair_info`.
        /// </summary>
        public readonly ImmutableArray<DeploymentGroupLoadBalancerInfoElbInfos> ElbInfos;
        /// <summary>
        /// The (Application/Network Load Balancer) target group to use in a deployment. Conflicts with `elb_info` and `target_group_pair_info`.
        /// </summary>
        public readonly ImmutableArray<DeploymentGroupLoadBalancerInfoTargetGroupInfos> TargetGroupInfos;
        /// <summary>
        /// The (Application/Network Load Balancer) target group pair to use in a deployment. Conflicts with `elb_info` and `target_group_info`.
        /// </summary>
        public readonly DeploymentGroupLoadBalancerInfoTargetGroupPairInfo? TargetGroupPairInfo;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfo(
            ImmutableArray<DeploymentGroupLoadBalancerInfoElbInfos> elbInfos,
            ImmutableArray<DeploymentGroupLoadBalancerInfoTargetGroupInfos> targetGroupInfos,
            DeploymentGroupLoadBalancerInfoTargetGroupPairInfo? targetGroupPairInfo)
        {
            ElbInfos = elbInfos;
            TargetGroupInfos = targetGroupInfos;
            TargetGroupPairInfo = targetGroupPairInfo;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfoElbInfos
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfoElbInfos(string? name)
        {
            Name = name;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupInfos
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfoTargetGroupInfos(string? name)
        {
            Name = name;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfo
    {
        /// <summary>
        /// Configuration block for the production traffic route (documented below).
        /// </summary>
        public readonly DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute ProdTrafficRoute;
        /// <summary>
        /// Configuration blocks for a target group within a target group pair (documented below).
        /// </summary>
        public readonly ImmutableArray<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroups> TargetGroups;
        /// <summary>
        /// Configuration block for the test traffic route (documented below).
        /// </summary>
        public readonly DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute? TestTrafficRoute;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfoTargetGroupPairInfo(
            DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute prodTrafficRoute,
            ImmutableArray<DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroups> targetGroups,
            DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute? testTrafficRoute)
        {
            ProdTrafficRoute = prodTrafficRoute;
            TargetGroups = targetGroups;
            TestTrafficRoute = testTrafficRoute;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute
    {
        /// <summary>
        /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
        /// </summary>
        public readonly ImmutableArray<string> ListenerArns;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfoTargetGroupPairInfoProdTrafficRoute(ImmutableArray<string> listenerArns)
        {
            ListenerArns = listenerArns;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroups
    {
        /// <summary>
        /// Name of the target group.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTargetGroups(string name)
        {
            Name = name;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute
    {
        /// <summary>
        /// List of Amazon Resource Names (ARNs) of the load balancer listeners.
        /// </summary>
        public readonly ImmutableArray<string> ListenerArns;

        [OutputConstructor]
        private DeploymentGroupLoadBalancerInfoTargetGroupPairInfoTestTrafficRoute(ImmutableArray<string> listenerArns)
        {
            ListenerArns = listenerArns;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupOnPremisesInstanceTagFilters
    {
        /// <summary>
        /// The key of the tag filter.
        /// </summary>
        public readonly string? Key;
        /// <summary>
        /// The type of the tag filter, either `KEY_ONLY`, `VALUE_ONLY`, or `KEY_AND_VALUE`.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The value of the tag filter.
        /// </summary>
        public readonly string? Value;

        [OutputConstructor]
        private DeploymentGroupOnPremisesInstanceTagFilters(
            string? key,
            string? type,
            string? value)
        {
            Key = key;
            Type = type;
            Value = value;
        }
    }

    [OutputType]
    public sealed class DeploymentGroupTriggerConfigurations
    {
        /// <summary>
        /// The event type or types for which notifications are triggered. Some values that are supported: `DeploymentStart`, `DeploymentSuccess`, `DeploymentFailure`, `DeploymentStop`, `DeploymentRollback`, `InstanceStart`, `InstanceSuccess`, `InstanceFailure`.  See [the CodeDeploy documentation][1] for all possible values.
        /// </summary>
        public readonly ImmutableArray<string> TriggerEvents;
        /// <summary>
        /// The name of the notification trigger.
        /// </summary>
        public readonly string TriggerName;
        /// <summary>
        /// The ARN of the SNS topic through which notifications are sent.
        /// </summary>
        public readonly string TriggerTargetArn;

        [OutputConstructor]
        private DeploymentGroupTriggerConfigurations(
            ImmutableArray<string> triggerEvents,
            string triggerName,
            string triggerTargetArn)
        {
            TriggerEvents = triggerEvents;
            TriggerName = triggerName;
            TriggerTargetArn = triggerTargetArn;
        }
    }
    }
}
